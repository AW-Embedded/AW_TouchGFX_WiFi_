
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021828  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002304  08021ad8  08021ad8  00031ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 000004b0  08023ddc  08023ddc  00033ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802428c  0802428c  00148c54  2**0
                  CONTENTS
  5 .ARM          00000000  0802428c  0802428c  00148c54  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802428c  0802428c  00148c54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000028  0802428c  0802428c  0003428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000001c  080242b4  080242b4  000342b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000144  24000000  080242d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000c934  24000144  08024414  00040144  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400ca78  08024414  0004ca78  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00148c54  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 14 FontFlashSection 00007f68  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 0000002c  90007f68  90007f68  00057f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 000f0cc0  90007f94  90007f94  00057f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   00064792  00000000  00000000  00148c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000cd995  00000000  00000000  001ad414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00014f58  00000000  00000000  0027ada9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003e30  00000000  00000000  0028fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017a1e3  00000000  00000000  00293b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003fd0  00000000  00000000  0040dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0003ff17  00000000  00000000  00411cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00041b30  00000000  00000000  00451c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  00493737  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000b918  00000000  00000000  00493808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000144 	.word	0x24000144
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08021ac0 	.word	0x08021ac0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000148 	.word	0x24000148
 80002ec:	08021ac0 	.word	0x08021ac0

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003c6:	e003      	b.n	80003d0 <LoopCopyDataInit>

080003c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ce:	3104      	adds	r1, #4

080003d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d8:	d3f6      	bcc.n	80003c8 <CopyDataInit>
  ldr  r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003dc:	e002      	b.n	80003e4 <LoopFillZerobss>

080003de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003e0:	f842 3b04 	str.w	r3, [r2], #4

080003e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e8:	d3f9      	bcc.n	80003de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ea:	f008 fe81 	bl	80090f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f020 f947 	bl	8020680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f002 f919 	bl	8002628 <main>
  bx  lr
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003fc:	080242d0 	.word	0x080242d0
  ldr  r0, =_sdata
 8000400:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000404:	24000144 	.word	0x24000144
  ldr  r2, =_sbss
 8000408:	24000144 	.word	0x24000144
  ldr  r3, = _ebss
 800040c:	2400ca78 	.word	0x2400ca78

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>

08000412 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000412:	4770      	bx	lr

08000414 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000414:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000416:	f000 ff6d 	bl	80012f4 <touchgfx_init>
}
 800041a:	bd08      	pop	{r3, pc}

0800041c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800041c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800041e:	f000 ffe3 	bl	80013e8 <touchgfx_taskEntry>
}
 8000422:	bd08      	pop	{r3, pc}

08000424 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000424:	4a02      	ldr	r2, [pc, #8]	; (8000430 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8000426:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8000428:	4a02      	ldr	r2, [pc, #8]	; (8000434 <_ZN20STM32TouchControllerD1Ev+0x10>)
 800042a:	6002      	str	r2, [r0, #0]
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	08021b38 	.word	0x08021b38
 8000434:	08021b20 	.word	0x08021b20

08000438 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000438:	b500      	push	{lr}
 800043a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800043c:	2308      	movs	r3, #8
 800043e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000440:	2000      	movs	r0, #0
 8000442:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <_ZN20STM32TouchController4initEv+0x24>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <_ZN20STM32TouchController4initEv+0x28>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000450:	4669      	mov	r1, sp
 8000452:	f008 fd59 	bl	8008f08 <BSP_TS_Init>
}
 8000456:	b005      	add	sp, #20
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	2400c7ee 	.word	0x2400c7ee
 8000460:	2400c7f0 	.word	0x2400c7f0

08000464 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	b085      	sub	sp, #20
 8000468:	460d      	mov	r5, r1
 800046a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800046c:	2000      	movs	r0, #0
 800046e:	9001      	str	r0, [sp, #4]
 8000470:	9002      	str	r0, [sp, #8]
 8000472:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000474:	a901      	add	r1, sp, #4
 8000476:	f008 fdb7 	bl	8008fe8 <BSP_TS_GetState>
 800047a:	b140      	cbz	r0, 800048e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000480:	f383 8811 	msr	BASEPRI, r3
 8000484:	f3bf 8f6f 	isb	sy
 8000488:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800048c:	e7fe      	b.n	800048c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800048e:	9b01      	ldr	r3, [sp, #4]
 8000490:	b913      	cbnz	r3, 8000498 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000492:	2000      	movs	r0, #0
}
 8000494:	b005      	add	sp, #20
 8000496:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800049c:	9b03      	ldr	r3, [sp, #12]
 800049e:	6023      	str	r3, [r4, #0]
        return true;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e7f7      	b.n	8000494 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

080004a4 <_ZN20STM32TouchControllerD0Ev>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4604      	mov	r4, r0
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <_ZN20STM32TouchControllerD0Ev+0x18>)
 80004aa:	6003      	str	r3, [r0, #0]
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 80004ae:	6003      	str	r3, [r0, #0]
 80004b0:	2104      	movs	r1, #4
 80004b2:	f01f ff76 	bl	80203a2 <_ZdlPvj>
 80004b6:	4620      	mov	r0, r4
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	08021b38 	.word	0x08021b38
 80004c0:	08021b20 	.word	0x08021b20

080004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80004c4:	b508      	push	{r3, lr}
    switch (id)
 80004c6:	2803      	cmp	r0, #3
 80004c8:	d80e      	bhi.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 80004ca:	e8df f000 	tbb	[pc, r0]
 80004ce:	0e02      	.short	0x0e02
 80004d0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	4815      	ldr	r0, [pc, #84]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004e4:	f009 fc1f 	bl	8009d26 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004e8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f009 fc13 	bl	8009d26 <HAL_GPIO_WritePin>
        break;
 8000500:	e7f2      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8000504:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000508:	fab2 f282 	clz	r2, r2
 800050c:	0952      	lsrs	r2, r2, #5
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 8000514:	f009 fc07 	bl	8009d26 <HAL_GPIO_WritePin>
        break;
 8000518:	e7e6      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 800051c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000520:	fab2 f282 	clz	r2, r2
 8000524:	0952      	lsrs	r2, r2, #5
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 800052c:	f009 fbfb 	bl	8009d26 <HAL_GPIO_WritePin>
}
 8000530:	e7da      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000532:	bf00      	nop
 8000534:	24000160 	.word	0x24000160
 8000538:	58021c00 	.word	0x58021c00
 800053c:	58022000 	.word	0x58022000

08000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000540:	b508      	push	{r3, lr}
    switch (id)
 8000542:	2803      	cmp	r0, #3
 8000544:	d80e      	bhi.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000546:	e8df f000 	tbb	[pc, r0]
 800054a:	0e02      	.short	0x0e02
 800054c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b103      	cbz	r3, 8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000556:	2001      	movs	r0, #1
 8000558:	4602      	mov	r2, r0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000560:	f009 fbe1 	bl	8009d26 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000564:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000568:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056c:	b903      	cbnz	r3, 8000570 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800056e:	2000      	movs	r0, #0
 8000570:	4602      	mov	r2, r0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f009 fbd5 	bl	8009d26 <HAL_GPIO_WritePin>
        break;
 800057c:	e7f2      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000584:	b133      	cbz	r3, 8000594 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800058e:	f009 fbca 	bl	8009d26 <HAL_GPIO_WritePin>
        break;
 8000592:	e7e7      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000594:	2200      	movs	r2, #0
 8000596:	e7f7      	b.n	8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800059a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800059e:	b133      	cbz	r3, 80005ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 80005a8:	f009 fbbd 	bl	8009d26 <HAL_GPIO_WritePin>
}
 80005ac:	e7da      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80005ae:	2200      	movs	r2, #0
 80005b0:	e7f7      	b.n	80005a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 80005b2:	bf00      	nop
 80005b4:	24000160 	.word	0x24000160
 80005b8:	58021c00 	.word	0x58021c00
 80005bc:	58022000 	.word	0x58022000

080005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80005c0:	b508      	push	{r3, lr}
    switch (id)
 80005c2:	2803      	cmp	r0, #3
 80005c4:	d808      	bhi.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005c6:	e8df f000 	tbb	[pc, r0]
 80005ca:	0802      	.short	0x0802
 80005cc:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005d4:	f009 fbad 	bl	8009d32 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005d8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005e0:	f009 fba7 	bl	8009d32 <HAL_GPIO_TogglePin>
        break;
 80005e4:	e7f8      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005ec:	f009 fba1 	bl	8009d32 <HAL_GPIO_TogglePin>
        break;
 80005f0:	e7f2      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005f8:	f009 fb9b 	bl	8009d32 <HAL_GPIO_TogglePin>
}
 80005fc:	e7ec      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005fe:	bf00      	nop
 8000600:	58021c00 	.word	0x58021c00
 8000604:	58022000 	.word	0x58022000

08000608 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8000608:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800060c:	2301      	movs	r3, #1
 800060e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000612:	4770      	bx	lr

08000614 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000614:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8000616:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800061a:	b123      	cbz	r3, 8000626 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 800061c:	6840      	ldr	r0, [r0, #4]
 800061e:	6803      	ldr	r3, [r0, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8000624:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8000626:	2000      	movs	r0, #0
 8000628:	e7fc      	b.n	8000624 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0800062a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800062a:	2000      	movs	r0, #0
 800062c:	4770      	bx	lr
	...

08000630 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000630:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000632:	3900      	subs	r1, #0
 8000634:	bf18      	it	ne
 8000636:	2101      	movne	r1, #1
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800063a:	7019      	strb	r1, [r3, #0]
    }
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2400c7f3 	.word	0x2400c7f3

08000644 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000644:	2000      	movs	r0, #0
 8000646:	4770      	bx	lr

08000648 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000648:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800064a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800064c:	b10b      	cbz	r3, 8000652 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800064e:	4608      	mov	r0, r1
 8000650:	4798      	blx	r3
        }
    }
 8000652:	bd08      	pop	{r3, pc}

08000654 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000658:	4770      	bx	lr

0800065a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800065a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800065c:	6840      	ldr	r0, [r0, #4]
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4798      	blx	r3
    }
 8000664:	bd08      	pop	{r3, pc}
	...

08000668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000668:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800066c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000670:	429a      	cmp	r2, r3
 8000672:	d00c      	beq.n	800068e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b9ab      	cbnz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800067c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000680:	8818      	ldrh	r0, [r3, #0]
 8000682:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000684:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b143      	cbz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000696:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800069a:	8818      	ldrh	r0, [r3, #0]
 800069c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800069e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
        }
    }
 80006a6:	4770      	bx	lr
 80006a8:	2400c7ec 	.word	0x2400c7ec
 80006ac:	2400c7ea 	.word	0x2400c7ea
 80006b0:	2400c7e8 	.word	0x2400c7e8

080006b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <_ZN11TouchGFXHALD1Ev+0x10>)
 80006b6:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <_ZN11TouchGFXHALD1Ev+0x14>)
 80006ba:	6002      	str	r2, [r0, #0]
    {
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <_ZN11TouchGFXHALD1Ev+0x18>)
 80006be:	6002      	str	r2, [r0, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	08021cc8 	.word	0x08021cc8
 80006c8:	080222d8 	.word	0x080222d8
 80006cc:	08023580 	.word	0x08023580

080006d0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006d0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006d2:	f001 fc57 	bl	8001f84 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006d6:	bd08      	pop	{r3, pc}

080006d8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006d8:	b508      	push	{r3, lr}
 80006da:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e2:	4798      	blx	r3
    enableInterrupts();
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006e8:	4620      	mov	r0, r4
 80006ea:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006ec:	f000 f920 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f4:	4620      	mov	r0, r4
 80006f6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006fe:	f009 fb12 	bl	8009d26 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000702:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	4628      	mov	r0, r5
 800070a:	f009 fb0c 	bl	8009d26 <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f008 fd6c 	bl	80091ec <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2102      	movs	r1, #2
 8000718:	4628      	mov	r0, r5
 800071a:	f009 fb04 	bl	8009d26 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800071e:	f000 f907 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000726:	4620      	mov	r0, r4
 8000728:	4798      	blx	r3
    for (;;)
 800072a:	e7f8      	b.n	800071e <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 800072c:	58022800 	.word	0x58022800
 8000730:	58020000 	.word	0x58020000

08000734 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000734:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000736:	f001 f97f 	bl	8001a38 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800073a:	bd08      	pop	{r3, pc}

0800073c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800073c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800073e:	f001 f981 	bl	8001a44 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000742:	bd08      	pop	{r3, pc}

08000744 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000744:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000746:	f001 fc45 	bl	8001fd4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000756:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800075a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800075e:	e000      	b.n	8000762 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000760:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000762:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000766:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800076a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800076e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000774:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000778:	4613      	mov	r3, r2
 800077a:	3a01      	subs	r2, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f2      	bne.n	8000766 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	2800      	cmp	r0, #0
 8000784:	d1ec      	bne.n	8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000794:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000796:	f001 f90d 	bl	80019b4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800079a:	bd08      	pop	{r3, pc}

0800079c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800079c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800079e:	f001 f913 	bl	80019c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80007a4:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80007a6:	f001 f919 	bl	80019dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80007aa:	bd08      	pop	{r3, pc}

080007ac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80007ac:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80007ae:	f001 f929 	bl	8001a04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80007b2:	bd08      	pop	{r3, pc}

080007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007b4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007b6:	b161      	cbz	r1, 80007d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007b8:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80007ba:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80007bc:	3a00      	subs	r2, #0
 80007be:	bf18      	it	ne
 80007c0:	2201      	movne	r2, #1
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80007c4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80007c6:	6802      	ldr	r2, [r0, #0]
 80007c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4790      	blx	r2
    }
 80007d0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007dc:	f01f fe10 	bl	8020400 <__assert_func>
 80007e0:	2400c7f2 	.word	0x2400c7f2
 80007e4:	08021b48 	.word	0x08021b48
 80007e8:	08021b80 	.word	0x08021b80
 80007ec:	08021bd0 	.word	0x08021bd0

080007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007f0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d808      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4293      	cmp	r3, r2
 8000800:	d804      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000804:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000808:	801a      	strh	r2, [r3, #0]
    }
 800080a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000810:	219e      	movs	r1, #158	; 0x9e
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000814:	f01f fdf4 	bl	8020400 <__assert_func>
 8000818:	2400c7e8 	.word	0x2400c7e8
 800081c:	2400c7ea 	.word	0x2400c7ea
 8000820:	2400c7ee 	.word	0x2400c7ee
 8000824:	2400c7f0 	.word	0x2400c7f0
 8000828:	08021c18 	.word	0x08021c18
 800082c:	08021c7c 	.word	0x08021c7c
 8000830:	08021bd0 	.word	0x08021bd0

08000834 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000838:	f012 f93e 	bl	8012ab8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000842:	4620      	mov	r0, r4
 8000844:	4798      	blx	r3
    }
 8000846:	bd10      	pop	{r4, pc}

08000848 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000848:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800084a:	f011 fb81 	bl	8011f50 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800084e:	bd08      	pop	{r3, pc}

08000850 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000856:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <_ZN11TouchGFXHALD0Ev+0x20>)
 800085a:	6003      	str	r3, [r0, #0]
    {
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_ZN11TouchGFXHALD0Ev+0x24>)
 800085e:	6003      	str	r3, [r0, #0]
 8000860:	217c      	movs	r1, #124	; 0x7c
 8000862:	f01f fd9e 	bl	80203a2 <_ZdlPvj>
 8000866:	4620      	mov	r0, r4
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	08021cc8 	.word	0x08021cc8
 8000870:	080222d8 	.word	0x080222d8
 8000874:	08023580 	.word	0x08023580

08000878 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000878:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4608      	mov	r0, r1
 8000880:	f00d fbc6 	bl	800e010 <osSemaphoreNew>
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000886:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000888:	b140      	cbz	r0, 800089c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f00d fc7d 	bl	800e18e <osMessageQueueNew>
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000896:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000898:	b130      	cbz	r0, 80008a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800089a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008a0:	2128      	movs	r1, #40	; 0x28
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008a4:	f01f fdac 	bl	8020400 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008ac:	212c      	movs	r1, #44	; 0x2c
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008b0:	f01f fda6 	bl	8020400 <__assert_func>
 80008b4:	24000174 	.word	0x24000174
 80008b8:	24000170 	.word	0x24000170
 80008bc:	08021d98 	.word	0x08021d98
 80008c0:	08021de4 	.word	0x08021de4
 80008c4:	08021e14 	.word	0x08021e14
 80008c8:	08021e74 	.word	0x08021e74

080008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80008cc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80008ce:	f04f 31ff 	mov.w	r1, #4294967295
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f00d fbf7 	bl	800e0c8 <osSemaphoreAcquire>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000174 	.word	0x24000174

080008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008e0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008e2:	4b02      	ldr	r3, [pc, #8]	; (80008ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f00d fc23 	bl	800e130 <osSemaphoreRelease>
}
 80008ea:	bd08      	pop	{r3, pc}
 80008ec:	24000174 	.word	0x24000174

080008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008f0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	f00d fbe6 	bl	800e0c8 <osSemaphoreAcquire>
}
 80008fc:	bd08      	pop	{r3, pc}
 80008fe:	bf00      	nop
 8000900:	24000174 	.word	0x24000174

08000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000904:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f00d fc11 	bl	800e130 <osSemaphoreRelease>
}
 800090e:	bd08      	pop	{r3, pc}
 8000910:	24000174 	.word	0x24000174

08000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000914:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	461a      	mov	r2, r3
 800091a:	4903      	ldr	r1, [pc, #12]	; (8000928 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	f00d fc81 	bl	800e226 <osMessageQueuePut>
}
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	24000004 	.word	0x24000004
 800092c:	24000170 	.word	0x24000170

08000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000934:	4c07      	ldr	r4, [pc, #28]	; (8000954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000936:	2300      	movs	r3, #0
 8000938:	461a      	mov	r2, r3
 800093a:	a901      	add	r1, sp, #4
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f00d fcb2 	bl	800e2a6 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2200      	movs	r2, #0
 8000948:	a901      	add	r1, sp, #4
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f00d fcab 	bl	800e2a6 <osMessageQueueGet>
}
 8000950:	b002      	add	sp, #8
 8000952:	bd10      	pop	{r4, pc}
 8000954:	24000170 	.word	0x24000170

08000958 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000958:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800095a:	6803      	ldr	r3, [r0, #0]
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4798      	blx	r3
    }
 8000960:	bd08      	pop	{r3, pc}

08000962 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000962:	2001      	movs	r0, #1
 8000964:	4770      	bx	lr

08000966 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000966:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	4798      	blx	r3
    }
 800096e:	bd08      	pop	{r3, pc}

08000970 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000970:	b508      	push	{r3, lr}
        return instance;
 8000972:	4b03      	ldr	r3, [pc, #12]	; (8000980 <DMA2D_XferCpltCallback+0x10>)
 8000974:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	6803      	ldr	r3, [r0, #0]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800097e:	bd08      	pop	{r3, pc}
 8000980:	2400c7f4 	.word	0x2400c7f4

08000984 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <_ZN8STM32DMAD1Ev+0x24>)
 8000986:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_ZN8STM32DMAD1Ev+0x28>)
 800098a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800098e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000996:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_ZN8STM32DMAD1Ev+0x2c>)
 800099c:	60c2      	str	r2, [r0, #12]
    {
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_ZN8STM32DMAD1Ev+0x30>)
 80009a0:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_ZN8STM32DMAD1Ev+0x34>)
 80009a4:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 80009a6:	4770      	bx	lr
 80009a8:	08022054 	.word	0x08022054
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	080236a8 	.word	0x080236a8
 80009b4:	08022030 	.word	0x08022030
 80009b8:	08023658 	.word	0x08023658

080009bc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80009bc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <_ZN8STM32DMA10initializeEv+0x40>)
 80009c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009c4:	f042 0210 	orr.w	r2, r2, #16
 80009c8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80009cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009d0:	f002 0210 	and.w	r2, r2, #16
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009da:	f042 0210 	orr.w	r2, r2, #16
 80009de:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009e2:	f022 0210 	bic.w	r2, r2, #16
 80009e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_ZN8STM32DMA10initializeEv+0x44>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN8STM32DMA10initializeEv+0x48>)
 80009ec:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009f6:	b002      	add	sp, #8
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	58024400 	.word	0x58024400
 8000a00:	240018a4 	.word	0x240018a4
 8000a04:	08000971 	.word	0x08000971
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000a0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a10:	4770      	bx	lr

08000a12 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000a12:	b510      	push	{r4, lr}
 8000a14:	4604      	mov	r4, r0
}
 8000a16:	f7ff ffb5 	bl	8000984 <_ZN8STM32DMAD1Ev>
 8000a1a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f01f fcbf 	bl	80203a2 <_ZdlPvj>
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd10      	pop	{r4, pc}

08000a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000a28:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000a2a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d809      	bhi.n	8000a44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a30:	e8df f003 	tbb	[pc, r3]
 8000a34:	080e1006 	.word	0x080e1006
 8000a38:	10080808 	.word	0x10080808
 8000a3c:	1010      	.short	0x1010
 8000a3e:	10          	.byte	0x10
 8000a3f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a40:	2002      	movs	r0, #2
        break;
 8000a42:	e008      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a48:	2187      	movs	r1, #135	; 0x87
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a4c:	f01f fcd8 	bl	8020400 <__assert_func>
    switch (format)
 8000a50:	2000      	movs	r0, #0
 8000a52:	e000      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a54:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a58:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a5a:	8aca      	ldrh	r2, [r1, #22]
 8000a5c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a66:	690a      	ldr	r2, [r1, #16]
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a6a:	8b4a      	ldrh	r2, [r1, #26]
 8000a6c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a70:	eba2 020c 	sub.w	r2, r2, ip
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a76:	680b      	ldr	r3, [r1, #0]
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d008      	beq.n	8000a8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a7e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a84:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a8a:	601a      	str	r2, [r3, #0]
    }
}
 8000a8c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a8e:	8b4a      	ldrh	r2, [r1, #26]
 8000a90:	8a8b      	ldrh	r3, [r1, #20]
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a96:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a98:	8b4a      	ldrh	r2, [r1, #26]
 8000a9a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a9e:	eba2 020c 	sub.w	r2, r2, ip
 8000aa2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000aa4:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000aa6:	7f08      	ldrb	r0, [r1, #28]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000aaa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000ab2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab4:	690a      	ldr	r2, [r1, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab8:	690a      	ldr	r2, [r1, #16]
 8000aba:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e7e4      	b.n	8000a8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000ac2:	bf00      	nop
 8000ac4:	08021eb8 	.word	0x08021eb8
 8000ac8:	08021ed4 	.word	0x08021ed4
 8000acc:	08021f20 	.word	0x08021f20
 8000ad0:	52001000 	.word	0x52001000
 8000ad4:	00030201 	.word	0x00030201
 8000ad8:	00010009 	.word	0x00010009
 8000adc:	00020201 	.word	0x00020201

08000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ae2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ae4:	2b0b      	cmp	r3, #11
 8000ae6:	d815      	bhi.n	8000b14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ae8:	e8df f003 	tbb	[pc, r3]
 8000aec:	141a1c06 	.word	0x141a1c06
 8000af0:	12141414 	.word	0x12141414
 8000af4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000afa:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d820      	bhi.n	8000b42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000b00:	e8df f003 	tbb	[pc, r3]
 8000b04:	1f252712 	.word	0x1f252712
 8000b08:	1d1f1f1f 	.word	0x1d1f1f1f
 8000b0c:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b10:	2005      	movs	r0, #5
        break;
 8000b12:	e7f2      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000b14:	4b75      	ldr	r3, [pc, #468]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b16:	4a76      	ldr	r2, [pc, #472]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b18:	2166      	movs	r1, #102	; 0x66
 8000b1a:	4876      	ldr	r0, [pc, #472]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b1c:	f01f fc70 	bl	8020400 <__assert_func>
    switch (format)
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ea      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e7e8      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000b28:	2402      	movs	r4, #2
    switch (format)
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d815      	bhi.n	8000b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000b2e:	e8df f003 	tbb	[pc, r3]
 8000b32:	1c12      	.short	0x1c12
 8000b34:	1414141a 	.word	0x1414141a
 8000b38:	1c1c1c14 	.word	0x1c1c1c14
 8000b3c:	1c          	.byte	0x1c
 8000b3d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b3e:	2405      	movs	r4, #5
        break;
 8000b40:	e7f3      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b44:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b46:	2166      	movs	r1, #102	; 0x66
 8000b48:	486a      	ldr	r0, [pc, #424]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b4a:	f01f fc59 	bl	8020400 <__assert_func>
    switch (format)
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e7eb      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b52:	2401      	movs	r4, #1
 8000b54:	e7e9      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b56:	2502      	movs	r5, #2
        break;
 8000b58:	e008      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b5e:	2187      	movs	r1, #135	; 0x87
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b62:	f01f fc4d 	bl	8020400 <__assert_func>
    switch (format)
 8000b66:	2500      	movs	r5, #0
 8000b68:	e000      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b6a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b6c:	8b4a      	ldrh	r2, [r1, #26]
 8000b6e:	8a8b      	ldrh	r3, [r1, #20]
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b76:	8b4a      	ldrh	r2, [r1, #26]
 8000b78:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b7c:	eba2 020c 	sub.w	r2, r2, ip
 8000b80:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b82:	8b0a      	ldrh	r2, [r1, #24]
 8000b84:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b88:	eba2 020c 	sub.w	r2, r2, ip
 8000b8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b8e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b90:	8aca      	ldrh	r2, [r1, #22]
 8000b92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b96:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b9a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b9c:	690a      	ldr	r2, [r1, #16]
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000ba0:	684a      	ldr	r2, [r1, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	2b80      	cmp	r3, #128	; 0x80
 8000ba8:	d036      	beq.n	8000c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000baa:	d813      	bhi.n	8000bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d07c      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb0:	2b40      	cmp	r3, #64	; 0x40
 8000bb2:	d07a      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	f040 8085 	bne.w	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bba:	7f0b      	ldrb	r3, [r1, #28]
 8000bbc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bc0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bc6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bc8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bca:	690a      	ldr	r2, [r1, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bd0:	601a      	str	r2, [r3, #0]
        break;
 8000bd2:	e020      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d010      	beq.n	8000bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d171      	bne.n	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be0:	7f0b      	ldrb	r3, [r1, #28]
 8000be2:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bea:	61da      	str	r2, [r3, #28]
 8000bec:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bee:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf2:	690a      	ldr	r2, [r1, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bf6:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bf8:	601a      	str	r2, [r3, #0]
        break;
 8000bfa:	e00c      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bfc:	7f0b      	ldrb	r3, [r1, #28]
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000c00:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0e:	690a      	ldr	r2, [r1, #16]
 8000c10:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000c18:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c1a:	7f0b      	ldrb	r3, [r1, #28]
 8000c1c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c26:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c28:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c2a:	6908      	ldr	r0, [r1, #16]
 8000c2c:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000c2e:	1d10      	adds	r0, r2, #4
 8000c30:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	b18b      	cbz	r3, 8000c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d12c      	bne.n	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c3a:	7f0b      	ldrb	r3, [r1, #28]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d027      	beq.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c40:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c44:	69c4      	ldr	r4, [r0, #28]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c48:	4023      	ands	r3, r4
 8000c4a:	8852      	ldrh	r2, [r2, #2]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	61c3      	str	r3, [r0, #28]
                break;
 8000c58:	e009      	b.n	8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c5a:	4928      	ldr	r1, [pc, #160]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c5c:	69c8      	ldr	r0, [r1, #28]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c60:	4003      	ands	r3, r0
 8000c62:	8852      	ldrh	r2, [r2, #2]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c6a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c6c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	69d3      	ldr	r3, [r2, #28]
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f013 0f20 	tst.w	r3, #32
 8000c80:	d1fa      	bne.n	8000c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c88:	b159      	cbz	r1, 8000ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e7c2      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c90:	2100      	movs	r1, #0
 8000c92:	e7d6      	b.n	8000c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c98:	f240 1101 	movw	r1, #257	; 0x101
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c9e:	f01f fbaf 	bl	8020400 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7b5      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000caa:	7f0b      	ldrb	r3, [r1, #28]
 8000cac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cb0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000cb8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cba:	690a      	ldr	r2, [r1, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000cc0:	601a      	str	r2, [r3, #0]
        break;
 8000cc2:	e7a8      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cc4:	7f0b      	ldrb	r3, [r1, #28]
 8000cc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cca:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cd0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cd2:	7f4a      	ldrb	r2, [r1, #29]
 8000cd4:	7f8b      	ldrb	r3, [r1, #30]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d003      	beq.n	8000ce2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e799      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ce4:	f240 2201 	movw	r2, #513	; 0x201
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	e794      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cec:	08021eb8 	.word	0x08021eb8
 8000cf0:	08021f80 	.word	0x08021f80
 8000cf4:	08021f20 	.word	0x08021f20
 8000cf8:	08021ed4 	.word	0x08021ed4
 8000cfc:	52001000 	.word	0x52001000
 8000d00:	00020201 	.word	0x00020201
 8000d04:	00020009 	.word	0x00020009
 8000d08:	0002000a 	.word	0x0002000a
 8000d0c:	ffff00ef 	.word	0xffff00ef
 8000d10:	08021fcc 	.word	0x08021fcc
 8000d14:	08021fe8 	.word	0x08021fe8
 8000d18:	00010201 	.word	0x00010201

08000d1c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_ZN8STM32DMAC1Ev+0x38>)
 8000d22:	f840 3b0c 	str.w	r3, [r0], #12
 8000d26:	6068      	str	r0, [r5, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	722b      	strb	r3, [r5, #8]
 8000d2c:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000d2e:	462c      	mov	r4, r5
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d32:	f844 3b20 	str.w	r3, [r4], #32
 8000d36:	2260      	movs	r2, #96	; 0x60
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f011 ffff 	bl	8012d3c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d3e:	235f      	movs	r3, #95	; 0x5f
 8000d40:	e003      	b.n	8000d4a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60e2      	str	r2, [r4, #12]
 8000d46:	3424      	adds	r4, #36	; 0x24
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	daf9      	bge.n	8000d42 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d4e:	4628      	mov	r0, r5
 8000d50:	bd38      	pop	{r3, r4, r5, pc}
 8000d52:	bf00      	nop
 8000d54:	08023658 	.word	0x08023658
 8000d58:	08022054 	.word	0x08022054

08000d5c <_ZN8touchgfx9TypedTextD1Ev>:
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <_ZN8touchgfx9TypedTextD1Ev+0x8>)
 8000d5e:	6003      	str	r3, [r0, #0]
    }
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	080220a4 	.word	0x080220a4

08000d68 <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d68:	4b01      	ldr	r3, [pc, #4]	; (8000d70 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d6a:	6003      	str	r3, [r0, #0]
    }
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	080220c8 	.word	0x080220c8

08000d74 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d74:	4770      	bx	lr

08000d76 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d76:	4770      	bx	lr

08000d78 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d78:	4770      	bx	lr

08000d7a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d7a:	4770      	bx	lr

08000d7c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d7c:	4770      	bx	lr

08000d7e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d7e:	4770      	bx	lr

08000d80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d82:	6003      	str	r3, [r0, #0]
    }
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	080220d8 	.word	0x080220d8

08000d8c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d8c:	4770      	bx	lr

08000d8e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d8e:	4770      	bx	lr

08000d90 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d90:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d94:	6808      	ldr	r0, [r1, #0]
 8000d96:	6849      	ldr	r1, [r1, #4]
 8000d98:	c303      	stmia	r3!, {r0, r1}
    }
 8000d9a:	4770      	bx	lr

08000d9c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000da0:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000da4:	b158      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4798      	blx	r3
 8000dac:	b138      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000dae:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000db2:	6803      	ldr	r3, [r0, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000dc2:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000dc6:	6002      	str	r2, [r0, #0]
    {
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000dca:	6002      	str	r2, [r0, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	08022118 	.word	0x08022118
 8000dd4:	080239bc 	.word	0x080239bc
 8000dd8:	080220d8 	.word	0x080220d8

08000ddc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000dde:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000de2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000de8:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000dee:	6002      	str	r2, [r0, #0]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000df6:	6002      	str	r2, [r0, #0]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0802217c 	.word	0x0802217c
 8000e00:	08022164 	.word	0x08022164
 8000e04:	08022100 	.word	0x08022100
 8000e08:	08022118 	.word	0x08022118
 8000e0c:	080239bc 	.word	0x080239bc
 8000e10:	080220d8 	.word	0x080220d8

08000e14 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <_ZN19FrontendApplicationD1Ev+0x24>)
 8000e16:	6002      	str	r2, [r0, #0]
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <_ZN19FrontendApplicationD1Ev+0x28>)
 8000e1a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000e1e:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000e24:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <_ZN19FrontendApplicationD1Ev+0x34>)
 8000e2a:	6002      	str	r2, [r0, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <_ZN19FrontendApplicationD1Ev+0x38>)
 8000e2e:	6002      	str	r2, [r0, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000e32:	6002      	str	r2, [r0, #0]
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	080221c8 	.word	0x080221c8
 8000e3c:	0802217c 	.word	0x0802217c
 8000e40:	08022164 	.word	0x08022164
 8000e44:	08022100 	.word	0x08022100
 8000e48:	08022118 	.word	0x08022118
 8000e4c:	080239bc 	.word	0x080239bc
 8000e50:	080220d8 	.word	0x080220d8

08000e54 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e54:	4a02      	ldr	r2, [pc, #8]	; (8000e60 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e56:	6002      	str	r2, [r0, #0]
    {
 8000e58:	4a02      	ldr	r2, [pc, #8]	; (8000e64 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e5a:	6002      	str	r2, [r0, #0]
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	08022214 	.word	0x08022214
 8000e64:	080220c8 	.word	0x080220c8

08000e68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e68:	4a02      	ldr	r2, [pc, #8]	; (8000e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e6a:	6002      	str	r2, [r0, #0]
    {
 8000e6c:	4a02      	ldr	r2, [pc, #8]	; (8000e78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e6e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	08022164 	.word	0x08022164
 8000e78:	08022100 	.word	0x08022100

08000e7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e80:	200c      	movs	r0, #12
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e88:	0089      	lsls	r1, r1, #2
 8000e8a:	3108      	adds	r1, #8
    }
 8000e8c:	4408      	add	r0, r1
 8000e8e:	4770      	bx	lr

08000e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e94:	0089      	lsls	r1, r1, #2
 8000e96:	3108      	adds	r1, #8
    }
 8000e98:	4408      	add	r0, r1
 8000e9a:	4770      	bx	lr

08000e9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	4770      	bx	lr

08000ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ea0:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ea6:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 8000eaa:	fb03 f101 	mul.w	r1, r3, r1
 8000eae:	3108      	adds	r1, #8
    }
 8000eb0:	4408      	add	r0, r1
 8000eb2:	4770      	bx	lr

08000eb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb4:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 8000eb8:	fb03 f101 	mul.w	r1, r3, r1
 8000ebc:	3108      	adds	r1, #8
    }
 8000ebe:	4408      	add	r0, r1
 8000ec0:	4770      	bx	lr

08000ec2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4770      	bx	lr

08000ec6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	4770      	bx	lr

08000eca <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eca:	0109      	lsls	r1, r1, #4
 8000ecc:	3108      	adds	r1, #8
    }
 8000ece:	4408      	add	r0, r1
 8000ed0:	4770      	bx	lr

08000ed2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ed2:	0109      	lsls	r1, r1, #4
 8000ed4:	3108      	adds	r1, #8
    }
 8000ed6:	4408      	add	r0, r1
 8000ed8:	4770      	bx	lr

08000eda <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000eda:	b508      	push	{r3, lr}
 8000edc:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000ede:	6841      	ldr	r1, [r0, #4]
 8000ee0:	68c2      	ldr	r2, [r0, #12]
 8000ee2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ee6:	f012 0f01 	tst.w	r2, #1
 8000eea:	d102      	bne.n	8000ef2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	4798      	blx	r3
    }
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000ef6:	f851 200c 	ldr.w	r2, [r1, ip]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	58d3      	ldr	r3, [r2, r3]
 8000efe:	e7f6      	b.n	8000eee <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000f00 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000f00:	6843      	ldr	r3, [r0, #4]
 8000f02:	b14b      	cbz	r3, 8000f18 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000f04:	6883      	ldr	r3, [r0, #8]
 8000f06:	b10b      	cbz	r3, 8000f0c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4770      	bx	lr
 8000f0c:	68c3      	ldr	r3, [r0, #12]
 8000f0e:	f013 0f01 	tst.w	r3, #1
 8000f12:	d003      	beq.n	8000f1c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000f14:	2001      	movs	r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	2000      	movs	r0, #0
    }
 8000f1e:	4770      	bx	lr

08000f20 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000f20:	b510      	push	{r4, lr}
 8000f22:	4604      	mov	r4, r0
    {
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000f26:	6003      	str	r3, [r0, #0]
    }
 8000f28:	2104      	movs	r1, #4
 8000f2a:	f01f fa3a 	bl	80203a2 <_ZdlPvj>
 8000f2e:	4620      	mov	r0, r4
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	bf00      	nop
 8000f34:	080220d8 	.word	0x080220d8

08000f38 <_ZN16FrontendHeapBaseD0Ev>:
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000f3e:	6003      	str	r3, [r0, #0]
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f42:	6003      	str	r3, [r0, #0]
 8000f44:	2114      	movs	r1, #20
 8000f46:	f01f fa2c 	bl	80203a2 <_ZdlPvj>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	bd10      	pop	{r4, pc}
 8000f4e:	bf00      	nop
 8000f50:	08022214 	.word	0x08022214
 8000f54:	080220c8 	.word	0x080220c8

08000f58 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
    {
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f5e:	6003      	str	r3, [r0, #0]
    }
 8000f60:	2114      	movs	r1, #20
 8000f62:	f01f fa1e 	bl	80203a2 <_ZdlPvj>
 8000f66:	4620      	mov	r0, r4
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	bf00      	nop
 8000f6c:	080220c8 	.word	0x080220c8

08000f70 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
    {
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <_ZN8touchgfx9TypedTextD0Ev+0x14>)
 8000f76:	6003      	str	r3, [r0, #0]
    }
 8000f78:	2108      	movs	r1, #8
 8000f7a:	f01f fa12 	bl	80203a2 <_ZdlPvj>
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	bf00      	nop
 8000f84:	080220a4 	.word	0x080220a4

08000f88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f8e:	6003      	str	r3, [r0, #0]
    {
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f92:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f94:	2110      	movs	r1, #16
 8000f96:	f01f fa04 	bl	80203a2 <_ZdlPvj>
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08022164 	.word	0x08022164
 8000fa4:	08022100 	.word	0x08022100

08000fa8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000fb2:	6003      	str	r3, [r0, #0]
    {
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000fb6:	6003      	str	r3, [r0, #0]
 8000fb8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000fbc:	f01f f9f1 	bl	80203a2 <_ZdlPvj>
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	08022118 	.word	0x08022118
 8000fc8:	080239bc 	.word	0x080239bc
 8000fcc:	080220d8 	.word	0x080220d8

08000fd0 <_ZN23FrontendApplicationBaseD0Ev>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000fda:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000fe0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000fe6:	6003      	str	r3, [r0, #0]
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000fea:	6003      	str	r3, [r0, #0]
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000fee:	6003      	str	r3, [r0, #0]
 8000ff0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000ff4:	f01f f9d5 	bl	80203a2 <_ZdlPvj>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	0802217c 	.word	0x0802217c
 8001000:	08022164 	.word	0x08022164
 8001004:	08022100 	.word	0x08022100
 8001008:	08022118 	.word	0x08022118
 800100c:	080239bc 	.word	0x080239bc
 8001010:	080220d8 	.word	0x080220d8

08001014 <_ZN19FrontendApplicationD0Ev>:
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <_ZN19FrontendApplicationD0Ev+0x30>)
 800101a:	6003      	str	r3, [r0, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZN19FrontendApplicationD0Ev+0x34>)
 800101e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <_ZN19FrontendApplicationD0Ev+0x38>)
 8001022:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8001028:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <_ZN19FrontendApplicationD0Ev+0x40>)
 800102e:	6003      	str	r3, [r0, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <_ZN19FrontendApplicationD0Ev+0x44>)
 8001032:	6003      	str	r3, [r0, #0]
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <_ZN19FrontendApplicationD0Ev+0x48>)
 8001036:	6003      	str	r3, [r0, #0]
 8001038:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800103c:	f01f f9b1 	bl	80203a2 <_ZdlPvj>
 8001040:	4620      	mov	r0, r4
 8001042:	bd10      	pop	{r4, pc}
 8001044:	080221c8 	.word	0x080221c8
 8001048:	0802217c 	.word	0x0802217c
 800104c:	08022164 	.word	0x08022164
 8001050:	08022100 	.word	0x08022100
 8001054:	08022118 	.word	0x08022118
 8001058:	080239bc 	.word	0x080239bc
 800105c:	080220d8 	.word	0x080220d8

08001060 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001060:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 8001062:	4608      	mov	r0, r1
 8001064:	f002 fda4 	bl	8003bb0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001068:	bd08      	pop	{r3, pc}

0800106a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800106a:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 800106c:	f002 fda0 	bl	8003bb0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001070:	bd08      	pop	{r3, pc}

08001072 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001072:	b510      	push	{r4, lr}
 8001074:	4604      	mov	r4, r0
    {
        model.tick();
 8001076:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800107a:	f004 f94c 	bl	8005316 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800107e:	4620      	mov	r0, r4
 8001080:	f014 fac8 	bl	8015614 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001084:	bd10      	pop	{r4, pc}
	...

08001088 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800108e:	6003      	str	r3, [r0, #0]
 8001090:	f010 fcab 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001094:	4620      	mov	r0, r4
 8001096:	bd10      	pop	{r4, pc}
 8001098:	08022290 	.word	0x08022290

0800109c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800109c:	b510      	push	{r4, lr}
 800109e:	4604      	mov	r4, r0
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010a2:	6003      	str	r3, [r0, #0]
 80010a4:	f010 fca1 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010a8:	2114      	movs	r1, #20
 80010aa:	4620      	mov	r0, r4
 80010ac:	f01f f979 	bl	80203a2 <_ZdlPvj>
 80010b0:	4620      	mov	r0, r4
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	08022290 	.word	0x08022290

080010b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010b8:	b510      	push	{r4, lr}
 80010ba:	4604      	mov	r4, r0
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010be:	6003      	str	r3, [r0, #0]
 80010c0:	f010 fc93 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010c4:	4620      	mov	r0, r4
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	0802225c 	.word	0x0802225c

080010cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 80010d2:	6003      	str	r3, [r0, #0]
 80010d4:	f010 fc89 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010d8:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 80010dc:	4620      	mov	r0, r4
 80010de:	f01f f960 	bl	80203a2 <_ZdlPvj>
 80010e2:	4620      	mov	r0, r4
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	0802225c 	.word	0x0802225c

080010ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	4604      	mov	r4, r0
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010f2:	6003      	str	r3, [r0, #0]
 80010f4:	f010 fc79 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010f8:	4620      	mov	r0, r4
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	08022228 	.word	0x08022228

08001100 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001106:	6003      	str	r3, [r0, #0]
 8001108:	f010 fc6f 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 800110c:	2118      	movs	r1, #24
 800110e:	4620      	mov	r0, r4
 8001110:	f01f f947 	bl	80203a2 <_ZdlPvj>
 8001114:	4620      	mov	r0, r4
 8001116:	bd10      	pop	{r4, pc}
 8001118:	08022228 	.word	0x08022228

0800111c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800111c:	b510      	push	{r4, lr}
 800111e:	4604      	mov	r4, r0
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <_ZN12FrontendHeapD1Ev+0x64>)
 8001122:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <_ZN12FrontendHeapD1Ev+0x68>)
 8001126:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
    virtual ~FrontendApplicationBase() { }
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <_ZN12FrontendHeapD1Ev+0x6c>)
 800112c:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <_ZN12FrontendHeapD1Ev+0x70>)
 8001132:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
    {
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <_ZN12FrontendHeapD1Ev+0x74>)
 8001138:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_ZN12FrontendHeapD1Ev+0x78>)
 800113e:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_ZN12FrontendHeapD1Ev+0x7c>)
 8001144:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <_ZN12FrontendHeapD1Ev+0x80>)
 800114a:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <_ZN12FrontendHeapD1Ev+0x84>)
 8001150:	f8c0 3310 	str.w	r3, [r0, #784]	; 0x310
 8001154:	f500 7044 	add.w	r0, r0, #784	; 0x310
 8001158:	f010 fc47 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 800115c:	4620      	mov	r0, r4
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_ZN12FrontendHeapD1Ev+0x88>)
 8001160:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001164:	f010 fc41 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001168:	4620      	mov	r0, r4
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <_ZN12FrontendHeapD1Ev+0x8c>)
 800116c:	f840 3f14 	str.w	r3, [r0, #20]!
 8001170:	f010 fc3b 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <_ZN12FrontendHeapD1Ev+0x90>)
 8001176:	6023      	str	r3, [r4, #0]
    {
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <_ZN12FrontendHeapD1Ev+0x94>)
 800117a:	6023      	str	r3, [r4, #0]
 800117c:	4620      	mov	r0, r4
 800117e:	bd10      	pop	{r4, pc}
 8001180:	080222c4 	.word	0x080222c4
 8001184:	080221c8 	.word	0x080221c8
 8001188:	0802217c 	.word	0x0802217c
 800118c:	08022164 	.word	0x08022164
 8001190:	08022100 	.word	0x08022100
 8001194:	08022118 	.word	0x08022118
 8001198:	080239bc 	.word	0x080239bc
 800119c:	080220d8 	.word	0x080220d8
 80011a0:	08022290 	.word	0x08022290
 80011a4:	0802225c 	.word	0x0802225c
 80011a8:	08022228 	.word	0x08022228
 80011ac:	08022214 	.word	0x08022214
 80011b0:	080220c8 	.word	0x080220c8

080011b4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80011b4:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 80011b6:	4c18      	ldr	r4, [pc, #96]	; (8001218 <__tcf_0+0x64>)
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <__tcf_0+0x68>)
 80011ba:	6023      	str	r3, [r4, #0]
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <__tcf_0+0x6c>)
 80011be:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <__tcf_0+0x70>)
 80011c4:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <__tcf_0+0x74>)
 80011ca:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
    {
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <__tcf_0+0x78>)
 80011d0:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <__tcf_0+0x7c>)
 80011d6:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <__tcf_0+0x80>)
 80011dc:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <__tcf_0+0x84>)
 80011e2:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <__tcf_0+0x88>)
 80011e8:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
 80011ec:	f504 7044 	add.w	r0, r4, #784	; 0x310
 80011f0:	f010 fbfb 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011f4:	4620      	mov	r0, r4
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <__tcf_0+0x8c>)
 80011f8:	f840 3f2c 	str.w	r3, [r0, #44]!
 80011fc:	f010 fbf5 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001200:	4620      	mov	r0, r4
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <__tcf_0+0x90>)
 8001204:	f840 3f14 	str.w	r3, [r0, #20]!
 8001208:	f010 fbef 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <__tcf_0+0x94>)
 800120e:	6023      	str	r3, [r4, #0]
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <__tcf_0+0x98>)
 8001212:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 8001214:	bd10      	pop	{r4, pc}
 8001216:	bf00      	nop
 8001218:	2400017c 	.word	0x2400017c
 800121c:	080222c4 	.word	0x080222c4
 8001220:	080221c8 	.word	0x080221c8
 8001224:	0802217c 	.word	0x0802217c
 8001228:	08022164 	.word	0x08022164
 800122c:	08022100 	.word	0x08022100
 8001230:	08022118 	.word	0x08022118
 8001234:	080239bc 	.word	0x080239bc
 8001238:	080220d8 	.word	0x080220d8
 800123c:	08022290 	.word	0x08022290
 8001240:	0802225c 	.word	0x0802225c
 8001244:	08022228 	.word	0x08022228
 8001248:	08022214 	.word	0x08022214
 800124c:	080220c8 	.word	0x080220c8

08001250 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <_ZN12FrontendHeapD0Ev+0x70>)
 8001256:	6003      	str	r3, [r0, #0]
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <_ZN12FrontendHeapD0Ev+0x74>)
 800125a:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <_ZN12FrontendHeapD0Ev+0x78>)
 8001260:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <_ZN12FrontendHeapD0Ev+0x7c>)
 8001266:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
    {
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <_ZN12FrontendHeapD0Ev+0x80>)
 800126c:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <_ZN12FrontendHeapD0Ev+0x84>)
 8001272:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <_ZN12FrontendHeapD0Ev+0x88>)
 8001278:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <_ZN12FrontendHeapD0Ev+0x8c>)
 800127e:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <_ZN12FrontendHeapD0Ev+0x90>)
 8001284:	f8c0 3310 	str.w	r3, [r0, #784]	; 0x310
 8001288:	f500 7044 	add.w	r0, r0, #784	; 0x310
 800128c:	f010 fbad 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001290:	4620      	mov	r0, r4
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <_ZN12FrontendHeapD0Ev+0x94>)
 8001294:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001298:	f010 fba7 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 800129c:	4620      	mov	r0, r4
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <_ZN12FrontendHeapD0Ev+0x98>)
 80012a0:	f840 3f14 	str.w	r3, [r0, #20]!
 80012a4:	f010 fba1 	bl	80119ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_ZN12FrontendHeapD0Ev+0x9c>)
 80012aa:	6023      	str	r3, [r4, #0]
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_ZN12FrontendHeapD0Ev+0xa0>)
 80012ae:	6023      	str	r3, [r4, #0]
 80012b0:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80012b4:	4620      	mov	r0, r4
 80012b6:	f01f f874 	bl	80203a2 <_ZdlPvj>
 80012ba:	4620      	mov	r0, r4
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	bf00      	nop
 80012c0:	080222c4 	.word	0x080222c4
 80012c4:	080221c8 	.word	0x080221c8
 80012c8:	0802217c 	.word	0x0802217c
 80012cc:	08022164 	.word	0x08022164
 80012d0:	08022100 	.word	0x08022100
 80012d4:	08022118 	.word	0x08022118
 80012d8:	080239bc 	.word	0x080239bc
 80012dc:	080220d8 	.word	0x080220d8
 80012e0:	08022290 	.word	0x08022290
 80012e4:	0802225c 	.word	0x0802225c
 80012e8:	08022228 	.word	0x08022228
 80012ec:	08022214 	.word	0x08022214
 80012f0:	080220c8 	.word	0x080220c8

080012f4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80012f8:	f002 f982 	bl	8003600 <_ZN14BitmapDatabase11getInstanceEv>
 80012fc:	4605      	mov	r5, r0
 80012fe:	f002 f983 	bl	8003608 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001302:	4601      	mov	r1, r0
 8001304:	2400      	movs	r4, #0
 8001306:	9400      	str	r4, [sp, #0]
 8001308:	4623      	mov	r3, r4
 800130a:	4622      	mov	r2, r4
 800130c:	4628      	mov	r0, r5
 800130e:	f016 ff59 	bl	80181c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <touchgfx_init+0xc0>)
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <touchgfx_init+0xc4>)
 8001316:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001318:	4620      	mov	r0, r4
 800131a:	f002 ffcb 	bl	80042b4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800131e:	4827      	ldr	r0, [pc, #156]	; (80013bc <touchgfx_init+0xc8>)
 8001320:	f016 fdfe 	bl	8017f20 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <touchgfx_init+0xcc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f3bf 8f5b 	dmb	ish
 800132c:	f013 0f01 	tst.w	r3, #1
 8001330:	d004      	beq.n	800133c <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001332:	4824      	ldr	r0, [pc, #144]	; (80013c4 <touchgfx_init+0xd0>)
 8001334:	f7ff f9cc 	bl	80006d0 <_ZN11TouchGFXHAL10initializeEv>
}
 8001338:	b003      	add	sp, #12
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <touchgfx_init+0xcc>)
 800133e:	f01f f832 	bl	80203a6 <__cxa_guard_acquire>
 8001342:	2800      	cmp	r0, #0
 8001344:	d0f5      	beq.n	8001332 <touchgfx_init+0x3e>
          frontendApplication(app)
 8001346:	4c20      	ldr	r4, [pc, #128]	; (80013c8 <touchgfx_init+0xd4>)
 8001348:	4620      	mov	r0, r4
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <touchgfx_init+0xd8>)
 800134c:	f840 3b14 	str.w	r3, [r0], #20
 8001350:	6060      	str	r0, [r4, #4]
 8001352:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8001356:	60a7      	str	r7, [r4, #8]
 8001358:	f504 7644 	add.w	r6, r4, #784	; 0x310
 800135c:	60e6      	str	r6, [r4, #12]
 800135e:	f504 754a 	add.w	r5, r4, #808	; 0x328
 8001362:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <touchgfx_init+0xdc>)
 8001366:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <touchgfx_init+0xe0>)
 800136a:	6023      	str	r3, [r4, #0]
 800136c:	f010 fb3e 	bl	80119ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <touchgfx_init+0xe4>)
 8001372:	6163      	str	r3, [r4, #20]
 8001374:	4638      	mov	r0, r7
 8001376:	f010 fb39 	bl	80119ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <touchgfx_init+0xe8>)
 800137c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800137e:	4630      	mov	r0, r6
 8001380:	f010 fb34 	bl	80119ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <touchgfx_init+0xec>)
 8001386:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
 800138a:	f504 7649 	add.w	r6, r4, #804	; 0x324
 800138e:	4630      	mov	r0, r6
 8001390:	f003 ffbe 	bl	8005310 <_ZN5ModelC1Ev>
 8001394:	4622      	mov	r2, r4
 8001396:	4631      	mov	r1, r6
 8001398:	4628      	mov	r0, r5
 800139a:	f003 ffaf 	bl	80052fc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 800139e:	4628      	mov	r0, r5
 80013a0:	f002 fc06 	bl	8003bb0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 80013a4:	480f      	ldr	r0, [pc, #60]	; (80013e4 <touchgfx_init+0xf0>)
 80013a6:	f01f f849 	bl	802043c <atexit>
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <touchgfx_init+0xcc>)
 80013ac:	f01f f807 	bl	80203be <__cxa_guard_release>
 80013b0:	e7bf      	b.n	8001332 <touchgfx_init+0x3e>
 80013b2:	bf00      	nop
 80013b4:	2400c850 	.word	0x2400c850
 80013b8:	2400147c 	.word	0x2400147c
 80013bc:	24000008 	.word	0x24000008
 80013c0:	24000178 	.word	0x24000178
 80013c4:	24001400 	.word	0x24001400
 80013c8:	2400017c 	.word	0x2400017c
 80013cc:	080220c8 	.word	0x080220c8
 80013d0:	08022214 	.word	0x08022214
 80013d4:	080222c4 	.word	0x080222c4
 80013d8:	08022228 	.word	0x08022228
 80013dc:	0802225c 	.word	0x0802225c
 80013e0:	08022290 	.word	0x08022290
 80013e4:	080011b5 	.word	0x080011b5

080013e8 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 80013e8:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80013ea:	4802      	ldr	r0, [pc, #8]	; (80013f4 <touchgfx_taskEntry+0xc>)
 80013ec:	f7ff f974 	bl	80006d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80013f0:	bd08      	pop	{r3, pc}
 80013f2:	bf00      	nop
 80013f4:	24001400 	.word	0x24001400

080013f8 <_Z41__static_initialization_and_destruction_0ii>:
 80013f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013fc:	4604      	mov	r4, r0
 80013fe:	460d      	mov	r5, r1
 8001400:	2801      	cmp	r0, #1
 8001402:	d007      	beq.n	8001414 <_Z41__static_initialization_and_destruction_0ii+0x1c>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8001404:	b924      	cbnz	r4, 8001410 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8001406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140a:	429d      	cmp	r5, r3
 800140c:	f000 827b 	beq.w	8001906 <_Z41__static_initialization_and_destruction_0ii+0x50e>
}
 8001410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001418:	4299      	cmp	r1, r3
 800141a:	d1f3      	bne.n	8001404 <_Z41__static_initialization_and_destruction_0ii+0xc>
    {27, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 4,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {28, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 5,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {29, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 6,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},

    {30, Rect(SPACE_X, KEY_ROW_4_Y, SPACE_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_SPACE_ID}
};
 800141c:	4bea      	ldr	r3, [pc, #936]	; (80017c8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001422:	f04f 0c0c 	mov.w	ip, #12
 8001426:	f8a3 c002 	strh.w	ip, [r3, #2]
 800142a:	2064      	movs	r0, #100	; 0x64
 800142c:	8098      	strh	r0, [r3, #4]
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	80da      	strh	r2, [r3, #6]
 8001432:	811a      	strh	r2, [r3, #8]
 8001434:	2105      	movs	r1, #5
 8001436:	8159      	strh	r1, [r3, #10]
 8001438:	f04f 0602 	mov.w	r6, #2
 800143c:	731e      	strb	r6, [r3, #12]
 800143e:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001442:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001446:	8218      	strh	r0, [r3, #16]
 8001448:	825a      	strh	r2, [r3, #18]
 800144a:	829a      	strh	r2, [r3, #20]
 800144c:	82d9      	strh	r1, [r3, #22]
 800144e:	f04f 0603 	mov.w	r6, #3
 8001452:	761e      	strb	r6, [r3, #24]
 8001454:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001458:	835e      	strh	r6, [r3, #26]
 800145a:	8398      	strh	r0, [r3, #28]
 800145c:	83da      	strh	r2, [r3, #30]
 800145e:	841a      	strh	r2, [r3, #32]
 8001460:	8459      	strh	r1, [r3, #34]	; 0x22
 8001462:	f04f 0704 	mov.w	r7, #4
 8001466:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 800146a:	f04f 088a 	mov.w	r8, #138	; 0x8a
 800146e:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001472:	8518      	strh	r0, [r3, #40]	; 0x28
 8001474:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001476:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001478:	85d9      	strh	r1, [r3, #46]	; 0x2e
 800147a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
 800147e:	27b4      	movs	r7, #180	; 0xb4
 8001480:	865f      	strh	r7, [r3, #50]	; 0x32
 8001482:	8698      	strh	r0, [r3, #52]	; 0x34
 8001484:	86da      	strh	r2, [r3, #54]	; 0x36
 8001486:	871a      	strh	r2, [r3, #56]	; 0x38
 8001488:	8759      	strh	r1, [r3, #58]	; 0x3a
 800148a:	f04f 0e06 	mov.w	lr, #6
 800148e:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
 8001492:	f04f 0ede 	mov.w	lr, #222	; 0xde
 8001496:	f8a3 e03e 	strh.w	lr, [r3, #62]	; 0x3e
 800149a:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 800149e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80014a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80014a6:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
 80014aa:	f04f 0907 	mov.w	r9, #7
 80014ae:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 80014b2:	f44f 7984 	mov.w	r9, #264	; 0x108
 80014b6:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80014ba:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
 80014be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80014c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80014c6:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
 80014ca:	f04f 0e08 	mov.w	lr, #8
 80014ce:	f883 e054 	strb.w	lr, [r3, #84]	; 0x54
 80014d2:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80014d6:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80014da:	f8a3 0058 	strh.w	r0, [r3, #88]	; 0x58
 80014de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80014e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80014e6:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 80014ea:	f04f 0e09 	mov.w	lr, #9
 80014ee:	f883 e060 	strb.w	lr, [r3, #96]	; 0x60
 80014f2:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80014f6:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80014fa:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 80014fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001506:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
 800150a:	f04f 0e0a 	mov.w	lr, #10
 800150e:	f883 e06c 	strb.w	lr, [r3, #108]	; 0x6c
 8001512:	f44f 7ec3 	mov.w	lr, #390	; 0x186
 8001516:	f8a3 e06e 	strh.w	lr, [r3, #110]	; 0x6e
 800151a:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
 800151e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001522:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001526:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
 800152a:	f04f 090b 	mov.w	r9, #11
 800152e:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001532:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001536:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 800153a:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 800153e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001542:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001546:	f8a3 1082 	strh.w	r1, [r3, #130]	; 0x82
 800154a:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
 800154e:	f8a3 c086 	strh.w	ip, [r3, #134]	; 0x86
 8001552:	208e      	movs	r0, #142	; 0x8e
 8001554:	f8a3 0088 	strh.w	r0, [r3, #136]	; 0x88
 8001558:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800155c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8001560:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
 8001564:	f04f 060d 	mov.w	r6, #13
 8001568:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 800156c:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8001570:	f8a3 0094 	strh.w	r0, [r3, #148]	; 0x94
 8001574:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001578:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800157c:	f8a3 109a 	strh.w	r1, [r3, #154]	; 0x9a
 8001580:	f04f 0a0e 	mov.w	sl, #14
 8001584:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8001588:	f04f 0660 	mov.w	r6, #96	; 0x60
 800158c:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8001590:	f8a3 00a0 	strh.w	r0, [r3, #160]	; 0xa0
 8001594:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001598:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800159c:	f8a3 10a6 	strh.w	r1, [r3, #166]	; 0xa6
 80015a0:	f04f 0a0f 	mov.w	sl, #15
 80015a4:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 80015a8:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 80015ac:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80015b0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80015b4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80015b8:	f8a3 10b2 	strh.w	r1, [r3, #178]	; 0xb2
 80015bc:	f04f 0a10 	mov.w	sl, #16
 80015c0:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80015c4:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80015c8:	f8a3 00b8 	strh.w	r0, [r3, #184]	; 0xb8
 80015cc:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80015d0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80015d4:	f8a3 10be 	strh.w	r1, [r3, #190]	; 0xbe
 80015d8:	f04f 0a11 	mov.w	sl, #17
 80015dc:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80015e0:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80015e4:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80015e8:	f8a3 00c4 	strh.w	r0, [r3, #196]	; 0xc4
 80015ec:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80015f0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80015f4:	f8a3 10ca 	strh.w	r1, [r3, #202]	; 0xca
 80015f8:	f04f 0a12 	mov.w	sl, #18
 80015fc:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8001600:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001604:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001608:	f8a3 00d0 	strh.w	r0, [r3, #208]	; 0xd0
 800160c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8001610:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001614:	f8a3 10d6 	strh.w	r1, [r3, #214]	; 0xd6
 8001618:	f04f 0a13 	mov.w	sl, #19
 800161c:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8001620:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001624:	4656      	mov	r6, sl
 8001626:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 800162a:	f8a3 00dc 	strh.w	r0, [r3, #220]	; 0xdc
 800162e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001632:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001636:	f8a3 10e2 	strh.w	r1, [r3, #226]	; 0xe2
 800163a:	f04f 0a14 	mov.w	sl, #20
 800163e:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001642:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001646:	f8a3 00e8 	strh.w	r0, [r3, #232]	; 0xe8
 800164a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800164e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001652:	f8a3 10ee 	strh.w	r1, [r3, #238]	; 0xee
 8001656:	f04f 0a15 	mov.w	sl, #21
 800165a:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 800165e:	f8a3 e0f2 	strh.w	lr, [r3, #242]	; 0xf2
 8001662:	f8a3 00f4 	strh.w	r0, [r3, #244]	; 0xf4
 8001666:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 800166a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800166e:	f8a3 10fa 	strh.w	r1, [r3, #250]	; 0xfa
 8001672:	f04f 0a16 	mov.w	sl, #22
 8001676:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 800167a:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 800167e:	f8a3 0100 	strh.w	r0, [r3, #256]	; 0x100
 8001682:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001686:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800168a:	f8a3 1106 	strh.w	r1, [r3, #262]	; 0x106
 800168e:	2017      	movs	r0, #23
 8001690:	f883 0108 	strb.w	r0, [r3, #264]	; 0x108
 8001694:	f04f 0060 	mov.w	r0, #96	; 0x60
 8001698:	f8a3 010a 	strh.w	r0, [r3, #266]	; 0x10a
 800169c:	20b8      	movs	r0, #184	; 0xb8
 800169e:	f8a3 010c 	strh.w	r0, [r3, #268]	; 0x10c
 80016a2:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 80016a6:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 80016aa:	f8a3 1112 	strh.w	r1, [r3, #274]	; 0x112
 80016ae:	f04f 0918 	mov.w	r9, #24
 80016b2:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 80016b6:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80016ba:	f8a3 0118 	strh.w	r0, [r3, #280]	; 0x118
 80016be:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80016c2:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80016c6:	f8a3 111e 	strh.w	r1, [r3, #286]	; 0x11e
 80016ca:	f04f 0819 	mov.w	r8, #25
 80016ce:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80016d2:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80016d6:	f8a3 0124 	strh.w	r0, [r3, #292]	; 0x124
 80016da:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80016de:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80016e2:	f8a3 112a 	strh.w	r1, [r3, #298]	; 0x12a
 80016e6:	271a      	movs	r7, #26
 80016e8:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80016ec:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80016f0:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80016f4:	f8a3 0130 	strh.w	r0, [r3, #304]	; 0x130
 80016f8:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80016fc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001700:	f8a3 1136 	strh.w	r1, [r3, #310]	; 0x136
 8001704:	271b      	movs	r7, #27
 8001706:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 800170a:	f44f 7a84 	mov.w	sl, #264	; 0x108
 800170e:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001712:	f8a3 013c 	strh.w	r0, [r3, #316]	; 0x13c
 8001716:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 800171a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 800171e:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
 8001722:	271c      	movs	r7, #28
 8001724:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001728:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 800172c:	f8a3 0148 	strh.w	r0, [r3, #328]	; 0x148
 8001730:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001734:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001738:	f8a3 114e 	strh.w	r1, [r3, #334]	; 0x14e
 800173c:	271d      	movs	r7, #29
 800173e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001742:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001746:	f8a3 0154 	strh.w	r0, [r3, #340]	; 0x154
 800174a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 800174e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001752:	f8a3 115a 	strh.w	r1, [r3, #346]	; 0x15a
 8001756:	211e      	movs	r1, #30
 8001758:	f883 115c 	strb.w	r1, [r3, #348]	; 0x15c
 800175c:	f04f 0160 	mov.w	r1, #96	; 0x60
 8001760:	f8a3 115e 	strh.w	r1, [r3, #350]	; 0x15e
 8001764:	21e2      	movs	r1, #226	; 0xe2
 8001766:	f8a3 1160 	strh.w	r1, [r3, #352]	; 0x160
 800176a:	f44f 7690 	mov.w	r6, #288	; 0x120
 800176e:	f8a3 6162 	strh.w	r6, [r3, #354]	; 0x162
 8001772:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001776:	f04f 0607 	mov.w	r6, #7
 800177a:	f8a3 6166 	strh.w	r6, [r3, #358]	; 0x166
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8001780:	f8a3 c000 	strh.w	ip, [r3]
 8001784:	8058      	strh	r0, [r3, #2]
 8001786:	274e      	movs	r7, #78	; 0x4e
 8001788:	809f      	strh	r7, [r3, #4]
 800178a:	80da      	strh	r2, [r3, #6]
{
    {Rect(CAPS_LOCK_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_CAPSLOCK_ID},    // caps-lock
    {Rect(BACKSPACE_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_BACKSPACE_ID},   // backspace    
    {Rect(MODE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_MODE_ID},        // mode
    {Rect(DONE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_DONE_ID}         // done
};
 800178c:	2600      	movs	r6, #0
 800178e:	609e      	str	r6, [r3, #8]
 8001790:	f04f 0803 	mov.w	r8, #3
 8001794:	f8a3 800c 	strh.w	r8, [r3, #12]
 8001798:	f8a3 e010 	strh.w	lr, [r3, #16]
 800179c:	8258      	strh	r0, [r3, #18]
 800179e:	829f      	strh	r7, [r3, #20]
 80017a0:	82da      	strh	r2, [r3, #22]
 80017a2:	619e      	str	r6, [r3, #24]
 80017a4:	f04f 0002 	mov.w	r0, #2
 80017a8:	8398      	strh	r0, [r3, #28]
 80017aa:	f8a3 c020 	strh.w	ip, [r3, #32]
 80017ae:	8459      	strh	r1, [r3, #34]	; 0x22
 80017b0:	849f      	strh	r7, [r3, #36]	; 0x24
 80017b2:	84da      	strh	r2, [r3, #38]	; 0x26
 80017b4:	629e      	str	r6, [r3, #40]	; 0x28
 80017b6:	f04f 0006 	mov.w	r0, #6
 80017ba:	8598      	strh	r0, [r3, #44]	; 0x2c
 80017bc:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
 80017c0:	8659      	strh	r1, [r3, #50]	; 0x32
 80017c2:	869f      	strh	r7, [r3, #52]	; 0x34
 80017c4:	e004      	b.n	80017d0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>
 80017c6:	bf00      	nop
 80017c8:	24001508 	.word	0x24001508
 80017cc:	240005fc 	.word	0x240005fc
 80017d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80017d2:	639e      	str	r6, [r3, #56]	; 0x38
 80017d4:	f04f 0204 	mov.w	r2, #4
 80017d8:	879a      	strh	r2, [r3, #60]	; 0x3c
 80017da:	4621      	mov	r1, r4
 80017dc:	3340      	adds	r3, #64	; 0x40
 80017de:	2900      	cmp	r1, #0
 80017e0:	db0b      	blt.n	80017fa <_Z41__static_initialization_and_destruction_0ii+0x402>
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 80017ec:	801a      	strh	r2, [r3, #0]
 80017ee:	805a      	strh	r2, [r3, #2]
 80017f0:	809a      	strh	r2, [r3, #4]
 80017f2:	80da      	strh	r2, [r3, #6]
 80017f4:	3310      	adds	r3, #16
 80017f6:	3901      	subs	r1, #1
 80017f8:	e7f1      	b.n	80017de <_Z41__static_initialization_and_destruction_0ii+0x3e6>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80017fa:	4b51      	ldr	r3, [pc, #324]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 80017fc:	2205      	movs	r2, #5
 80017fe:	825a      	strh	r2, [r3, #18]
 8001800:	222d      	movs	r2, #45	; 0x2d
 8001802:	829a      	strh	r2, [r3, #20]
 8001804:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001808:	82da      	strh	r2, [r3, #22]
 800180a:	2246      	movs	r2, #70	; 0x46
 800180c:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 800180e:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8001810:	61da      	str	r2, [r3, #28]
 8001812:	2600      	movs	r6, #0
 8001814:	841e      	strh	r6, [r3, #32]
        : color(col)
 8001816:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 800181a:	625a      	str	r2, [r3, #36]	; 0x24
 800181c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
class TouchController
 8001822:	4f49      	ldr	r7, [pc, #292]	; (8001948 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8001826:	603b      	str	r3, [r7, #0]
{
public:

    STM32TouchController() {}
 8001828:	4b49      	ldr	r3, [pc, #292]	; (8001950 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 800182a:	603b      	str	r3, [r7, #0]
static STM32DMA dma;
 800182c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8001994 <_Z41__static_initialization_and_destruction_0ii+0x59c>
 8001830:	4648      	mov	r0, r9
 8001832:	f7ff fa73 	bl	8000d1c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001836:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8001988 <_Z41__static_initialization_and_destruction_0ii+0x590>
 800183a:	4640      	mov	r0, r8
 800183c:	f018 fedc 	bl	801a5f8 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8001842:	4a45      	ldr	r2, [pc, #276]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f8c3 9004 	str.w	r9, [r3, #4]
 800184a:	f8c3 8008 	str.w	r8, [r3, #8]
 800184e:	60df      	str	r7, [r3, #12]
 8001850:	611e      	str	r6, [r3, #16]
 8001852:	615e      	str	r6, [r3, #20]
 8001854:	619e      	str	r6, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001856:	839e      	strh	r6, [r3, #28]
 8001858:	83de      	strh	r6, [r3, #30]
 800185a:	841e      	strh	r6, [r3, #32]
 800185c:	845e      	strh	r6, [r3, #34]	; 0x22
 800185e:	849e      	strh	r6, [r3, #36]	; 0x24
 8001860:	84de      	strh	r6, [r3, #38]	; 0x26
 8001862:	851e      	strh	r6, [r3, #40]	; 0x28
 8001864:	f883 602a 	strb.w	r6, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001868:	62de      	str	r6, [r3, #44]	; 0x2c
 800186a:	861e      	strh	r6, [r3, #48]	; 0x30
 800186c:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
 8001870:	639e      	str	r6, [r3, #56]	; 0x38
 8001872:	63de      	str	r6, [r3, #60]	; 0x3c
 8001874:	641e      	str	r6, [r3, #64]	; 0x40
 8001876:	645e      	str	r6, [r3, #68]	; 0x44
 8001878:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001882:	f883 604a 	strb.w	r6, [r3, #74]	; 0x4a
 8001886:	f883 604b 	strb.w	r6, [r3, #75]	; 0x4b
 800188a:	64de      	str	r6, [r3, #76]	; 0x4c
        : x(0), y(0), width(0), height(0)
 800188c:	f8a3 6050 	strh.w	r6, [r3, #80]	; 0x50
 8001890:	f8a3 6052 	strh.w	r6, [r3, #82]	; 0x52
 8001894:	f8a3 6054 	strh.w	r6, [r3, #84]	; 0x54
 8001898:	f8a3 6056 	strh.w	r6, [r3, #86]	; 0x56
 800189c:	659e      	str	r6, [r3, #88]	; 0x58
 800189e:	65de      	str	r6, [r3, #92]	; 0x5c
 80018a0:	661e      	str	r6, [r3, #96]	; 0x60
 80018a2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80018a6:	f883 6065 	strb.w	r6, [r3, #101]	; 0x65
 80018aa:	f883 6066 	strb.w	r6, [r3, #102]	; 0x66
 80018ae:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80018b2:	f883 6068 	strb.w	r6, [r3, #104]	; 0x68
 80018b6:	f883 6069 	strb.w	r6, [r3, #105]	; 0x69
 80018ba:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
 80018be:	f883 606b 	strb.w	r6, [r3, #107]	; 0x6b
 80018c2:	f883 606c 	strb.w	r6, [r3, #108]	; 0x6c
 80018c6:	671e      	str	r6, [r3, #112]	; 0x70
 80018c8:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
 80018cc:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 80018d0:	f883 6076 	strb.w	r6, [r3, #118]	; 0x76
 80018d4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80018d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80018dc:	4a1f      	ldr	r2, [pc, #124]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x564>)
 80018de:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80018e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018e4:	491e      	ldr	r1, [pc, #120]	; (8001960 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 80018e6:	800a      	strh	r2, [r1, #0]
 80018e8:	491e      	ldr	r1, [pc, #120]	; (8001964 <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 80018ea:	800a      	strh	r2, [r1, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80018ec:	f44f 7288 	mov.w	r2, #272	; 0x110
 80018f0:	491d      	ldr	r1, [pc, #116]	; (8001968 <_Z41__static_initialization_and_destruction_0ii+0x570>)
 80018f2:	800a      	strh	r2, [r1, #0]
 80018f4:	491d      	ldr	r1, [pc, #116]	; (800196c <_Z41__static_initialization_and_destruction_0ii+0x574>)
 80018f6:	800a      	strh	r2, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 80018fa:	7016      	strb	r6, [r2, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80018fc:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 80018fe:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x580>)
 8001902:	601a      	str	r2, [r3, #0]
    }
 8001904:	e57e      	b.n	8001404 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x580>)
 800190a:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 800190e:	601a      	str	r2, [r3, #0]
    {
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 8001912:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId KEYBOARD = 4; // verdana_18_4bpp
    static const touchgfx::FontId MODE = 4;     // verdana_18_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x584>)
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 8001918:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 800191a:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800191c:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 8001920:	4a1a      	ldr	r2, [pc, #104]	; (800198c <_Z41__static_initialization_and_destruction_0ii+0x594>)
 8001922:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 8001924:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 8001926:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 8001928:	481a      	ldr	r0, [pc, #104]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800192a:	f7ff f82b 	bl	8000984 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8001932:	601a      	str	r2, [r3, #0]
    {
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8001936:	601a      	str	r2, [r3, #0]
    {
 8001938:	4b01      	ldr	r3, [pc, #4]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 800193a:	4a02      	ldr	r2, [pc, #8]	; (8001944 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 800193c:	61da      	str	r2, [r3, #28]
}
 800193e:	e567      	b.n	8001410 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8001940:	24001480 	.word	0x24001480
 8001944:	080220a4 	.word	0x080220a4
 8001948:	2400065c 	.word	0x2400065c
 800194c:	08021b20 	.word	0x08021b20
 8001950:	08021b38 	.word	0x08021b38
 8001954:	24001400 	.word	0x24001400
 8001958:	08023580 	.word	0x08023580
 800195c:	2400c7f4 	.word	0x2400c7f4
 8001960:	2400c7e8 	.word	0x2400c7e8
 8001964:	2400c7ee 	.word	0x2400c7ee
 8001968:	2400c7ea 	.word	0x2400c7ea
 800196c:	2400c7f0 	.word	0x2400c7f0
 8001970:	2400c7ec 	.word	0x2400c7ec
 8001974:	080222d8 	.word	0x080222d8
 8001978:	08021cc8 	.word	0x08021cc8
 800197c:	24000008 	.word	0x24000008
 8001980:	08022458 	.word	0x08022458
 8001984:	080220b4 	.word	0x080220b4
 8001988:	240014b0 	.word	0x240014b0
 800198c:	08023cb4 	.word	0x08023cb4
 8001990:	08023964 	.word	0x08023964
 8001994:	24000660 	.word	0x24000660

08001998 <_GLOBAL__sub_I_touchgfx_init>:
 8001998:	b508      	push	{r3, lr}
 800199a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fd2a 	bl	80013f8 <_Z41__static_initialization_and_destruction_0ii>
 80019a4:	bd08      	pop	{r3, pc}

080019a6 <_GLOBAL__sub_D_touchgfx_init>:
 80019a6:	b508      	push	{r3, lr}
 80019a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fd23 	bl	80013f8 <_Z41__static_initialization_and_destruction_0ii>
 80019b2:	bd08      	pop	{r3, pc}

080019b4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80019b6:	2290      	movs	r2, #144	; 0x90
 80019b8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80019bc:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80019ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d4:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100

080019dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80019de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80019e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019ea:	f3bf 8f6f 	isb	sy
 80019ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80019f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019fa:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001a04:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001a06:	68d3      	ldr	r3, [r2, #12]
 8001a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001a12:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001a14:	6911      	ldr	r1, [r2, #16]
 8001a16:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001a1a:	3901      	subs	r1, #1
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 8001a1e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001a22:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001a2a:	4770      	bx	lr
 8001a2c:	50001000 	.word	0x50001000
 8001a30:	2400186c 	.word	0x2400186c
 8001a34:	2400186a 	.word	0x2400186a

08001a38 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001a38:	4b01      	ldr	r3, [pc, #4]	; (8001a40 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001a3a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8001a3e:	4770      	bx	lr
 8001a40:	50001000 	.word	0x50001000

08001a44 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8001a46:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a4e:	4770      	bx	lr
 8001a50:	50001000 	.word	0x50001000

08001a54 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a5c:	d025      	beq.n	8001aaa <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 8001a5e:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a68:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001a6c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a70:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001a74:	e000      	b.n	8001a78 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 8001a76:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a78:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a7c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001a80:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001a84:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001a88:	4908      	ldr	r1, [pc, #32]	; (8001aac <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a8a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001a8e:	4613      	mov	r3, r2
 8001a90:	3a01      	subs	r2, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f2      	bne.n	8001a7c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001a96:	1e43      	subs	r3, r0, #1
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d1ec      	bne.n	8001a76 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 8001a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aa0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ab8:	d025      	beq.n	8001b06 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 8001aba:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001ac8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001acc:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001ad0:	e000      	b.n	8001ad4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001ad2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ad4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ad8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001adc:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001ae0:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001ae4:	4908      	ldr	r1, [pc, #32]	; (8001b08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ae6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001aea:	4613      	mov	r3, r2
 8001aec:	3a01      	subs	r2, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f2      	bne.n	8001ad8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 8001af2:	1e43      	subs	r3, r0, #1
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d1ec      	bne.n	8001ad2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001afc:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <_ZN20TouchGFXGeneratedHALD1Ev>:
 8001b0c:	4a02      	ldr	r2, [pc, #8]	; (8001b18 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 8001b0e:	6002      	str	r2, [r0, #0]
 8001b10:	4a02      	ldr	r2, [pc, #8]	; (8001b1c <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 8001b12:	6002      	str	r2, [r0, #0]
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	080222d8 	.word	0x080222d8
 8001b1c:	08023580 	.word	0x08023580

08001b20 <_Z41__static_initialization_and_destruction_0ii>:
            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
}
 8001b20:	2801      	cmp	r0, #1
 8001b22:	d006      	beq.n	8001b32 <_Z41__static_initialization_and_destruction_0ii+0x12>

/**
 * The layout for the CustomKeyboard.
 */
static const Keyboard::Layout layout =
 8001b24:	b920      	cbnz	r0, 8001b30 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8001b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b2a:	4299      	cmp	r1, r3
 8001b2c:	f000 8222 	beq.w	8001f74 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8001b30:	4770      	bx	lr
 8001b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b36:	4299      	cmp	r1, r3
 8001b38:	d1f4      	bne.n	8001b24 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8001b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8001b3e:	4bf0      	ldr	r3, [pc, #960]	; (8001f00 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001b44:	240c      	movs	r4, #12
 8001b46:	805c      	strh	r4, [r3, #2]
 8001b48:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8001b4c:	f8a3 e004 	strh.w	lr, [r3, #4]
 8001b50:	2224      	movs	r2, #36	; 0x24
 8001b52:	80da      	strh	r2, [r3, #6]
 8001b54:	811a      	strh	r2, [r3, #8]
 8001b56:	f04f 0c05 	mov.w	ip, #5
 8001b5a:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8001b5e:	f04f 0502 	mov.w	r5, #2
 8001b62:	731d      	strb	r5, [r3, #12]
 8001b64:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001b68:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001b6c:	f8a3 e010 	strh.w	lr, [r3, #16]
 8001b70:	825a      	strh	r2, [r3, #18]
 8001b72:	829a      	strh	r2, [r3, #20]
 8001b74:	f8a3 c016 	strh.w	ip, [r3, #22]
 8001b78:	f04f 0503 	mov.w	r5, #3
 8001b7c:	761d      	strb	r5, [r3, #24]
 8001b7e:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001b82:	835e      	strh	r6, [r3, #26]
 8001b84:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001b88:	83da      	strh	r2, [r3, #30]
 8001b8a:	841a      	strh	r2, [r3, #32]
 8001b8c:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8001b90:	f04f 0504 	mov.w	r5, #4
 8001b94:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8001b98:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8001b9c:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001ba0:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001ba8:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8001bac:	f883 c030 	strb.w	ip, [r3, #48]	; 0x30
 8001bb0:	27b4      	movs	r7, #180	; 0xb4
 8001bb2:	865f      	strh	r7, [r3, #50]	; 0x32
 8001bb4:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8001bb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bba:	871a      	strh	r2, [r3, #56]	; 0x38
 8001bbc:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8001bc0:	f04f 0506 	mov.w	r5, #6
 8001bc4:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 8001bc8:	f04f 05de 	mov.w	r5, #222	; 0xde
 8001bcc:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8001bce:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8001bd2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8001bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001bda:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8001bde:	f04f 0907 	mov.w	r9, #7
 8001be2:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8001be6:	f44f 7984 	mov.w	r9, #264	; 0x108
 8001bea:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8001bee:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8001bf2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8001bf6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8001bfa:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8001bfe:	2508      	movs	r5, #8
 8001c00:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
 8001c04:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8001c08:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8001c0c:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8001c10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8001c14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c18:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8001c1c:	2509      	movs	r5, #9
 8001c1e:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8001c22:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8001c26:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8001c2a:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8001c2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001c36:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8001c3a:	250a      	movs	r5, #10
 8001c3c:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8001c40:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8001c44:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8001c48:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8001c4c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001c50:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001c54:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8001c58:	f04f 090b 	mov.w	r9, #11
 8001c5c:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001c60:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001c64:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8001c68:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8001c6c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001c70:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001c74:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8001c78:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8001c7c:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8001c80:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8001c84:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8001c88:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8001c8c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8001c90:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8001c94:	f04f 060d 	mov.w	r6, #13
 8001c98:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8001c9c:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8001ca0:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8001ca4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001ca8:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8001cac:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8001cb0:	f04f 0a0e 	mov.w	sl, #14
 8001cb4:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8001cb8:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001cbc:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8001cc0:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8001cc4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001cc8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001ccc:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8001cd0:	f04f 0a0f 	mov.w	sl, #15
 8001cd4:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8001cd8:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8001cdc:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8001ce0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8001ce4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8001ce8:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8001cec:	f04f 0a10 	mov.w	sl, #16
 8001cf0:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8001cf4:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8001cf8:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8001cfc:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8001d00:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8001d04:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8001d08:	f04f 0a11 	mov.w	sl, #17
 8001d0c:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8001d10:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001d14:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8001d18:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8001d1c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8001d20:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001d24:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8001d28:	f04f 0a12 	mov.w	sl, #18
 8001d2c:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8001d30:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001d34:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001d38:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8001d3c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8001d40:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001d44:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8001d48:	f04f 0a13 	mov.w	sl, #19
 8001d4c:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8001d50:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001d54:	4656      	mov	r6, sl
 8001d56:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8001d5a:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8001d5e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001d62:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001d66:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8001d6a:	f04f 0a14 	mov.w	sl, #20
 8001d6e:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001d72:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001d76:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8001d7a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8001d7e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001d82:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8001d86:	f04f 0a15 	mov.w	sl, #21
 8001d8a:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8001d8e:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8001d92:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8001d96:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001d9a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8001d9e:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8001da2:	f04f 0a16 	mov.w	sl, #22
 8001da6:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8001daa:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8001dae:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8001db2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001db6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8001dba:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8001dbe:	f04f 0e17 	mov.w	lr, #23
 8001dc2:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8001dc6:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8001dca:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8001dce:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8001dd2:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8001dd6:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8001dda:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8001dde:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8001de2:	f04f 0918 	mov.w	r9, #24
 8001de6:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8001dea:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8001dee:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8001df2:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8001df6:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8001dfa:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8001dfe:	f04f 0819 	mov.w	r8, #25
 8001e02:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8001e06:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8001e0a:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8001e0e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8001e12:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8001e16:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8001e1a:	271a      	movs	r7, #26
 8001e1c:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8001e20:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001e24:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8001e28:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8001e2c:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8001e30:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001e34:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8001e38:	271b      	movs	r7, #27
 8001e3a:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8001e3e:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001e42:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001e46:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8001e4a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8001e4e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8001e52:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8001e56:	271c      	movs	r7, #28
 8001e58:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001e5c:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8001e60:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8001e64:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001e68:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001e6c:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8001e70:	271d      	movs	r7, #29
 8001e72:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001e76:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001e7a:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8001e7e:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8001e82:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001e86:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8001e8a:	271e      	movs	r7, #30
 8001e8c:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8001e90:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001e94:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8001e98:	26e2      	movs	r6, #226	; 0xe2
 8001e9a:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8001e9e:	f44f 7790 	mov.w	r7, #288	; 0x120
 8001ea2:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8001ea6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001eaa:	f04f 0707 	mov.w	r7, #7
 8001eae:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8001eb4:	801c      	strh	r4, [r3, #0]
 8001eb6:	f8a3 e002 	strh.w	lr, [r3, #2]
 8001eba:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8001ebe:	f8a3 c004 	strh.w	ip, [r3, #4]
 8001ec2:	80da      	strh	r2, [r3, #6]
};
 8001ec4:	2700      	movs	r7, #0
 8001ec6:	609f      	str	r7, [r3, #8]
 8001ec8:	f04f 0803 	mov.w	r8, #3
 8001ecc:	f8a3 800c 	strh.w	r8, [r3, #12]
 8001ed0:	821d      	strh	r5, [r3, #16]
 8001ed2:	f8a3 e012 	strh.w	lr, [r3, #18]
 8001ed6:	f8a3 c014 	strh.w	ip, [r3, #20]
 8001eda:	82da      	strh	r2, [r3, #22]
 8001edc:	619f      	str	r7, [r3, #24]
 8001ede:	f04f 0e02 	mov.w	lr, #2
 8001ee2:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001ee6:	841c      	strh	r4, [r3, #32]
 8001ee8:	845e      	strh	r6, [r3, #34]	; 0x22
 8001eea:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8001eee:	84da      	strh	r2, [r3, #38]	; 0x26
 8001ef0:	629f      	str	r7, [r3, #40]	; 0x28
 8001ef2:	f04f 0406 	mov.w	r4, #6
 8001ef6:	859c      	strh	r4, [r3, #44]	; 0x2c
 8001ef8:	861d      	strh	r5, [r3, #48]	; 0x30
 8001efa:	865e      	strh	r6, [r3, #50]	; 0x32
 8001efc:	e004      	b.n	8001f08 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8001efe:	bf00      	nop
 8001f00:	24001700 	.word	0x24001700
 8001f04:	24001670 	.word	0x24001670
 8001f08:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8001f0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f0e:	639f      	str	r7, [r3, #56]	; 0x38
 8001f10:	f04f 0204 	mov.w	r2, #4
 8001f14:	879a      	strh	r2, [r3, #60]	; 0x3c
 8001f16:	4604      	mov	r4, r0
 8001f18:	3340      	adds	r3, #64	; 0x40
 8001f1a:	2c00      	cmp	r4, #0
 8001f1c:	db0b      	blt.n	8001f36 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8001f28:	801a      	strh	r2, [r3, #0]
 8001f2a:	805a      	strh	r2, [r3, #2]
 8001f2c:	809a      	strh	r2, [r3, #4]
 8001f2e:	80da      	strh	r2, [r3, #6]
 8001f30:	3310      	adds	r3, #16
 8001f32:	3c01      	subs	r4, #1
 8001f34:	e7f1      	b.n	8001f1a <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f38:	2205      	movs	r2, #5
 8001f3a:	825a      	strh	r2, [r3, #18]
 8001f3c:	222d      	movs	r2, #45	; 0x2d
 8001f3e:	829a      	strh	r2, [r3, #20]
 8001f40:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001f44:	82da      	strh	r2, [r3, #22]
 8001f46:	2246      	movs	r2, #70	; 0x46
 8001f48:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f4c:	61da      	str	r2, [r3, #28]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	841a      	strh	r2, [r3, #32]
        : color(col)
 8001f52:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
 8001f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8001f5e:	b918      	cbnz	r0, 8001f68 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f64:	4299      	cmp	r1, r3
 8001f66:	d001      	beq.n	8001f6c <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8001f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f70:	61da      	str	r2, [r3, #28]
 8001f72:	e7f9      	b.n	8001f68 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f74:	4b01      	ldr	r3, [pc, #4]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f76:	4a02      	ldr	r2, [pc, #8]	; (8001f80 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f78:	61da      	str	r2, [r3, #28]
 8001f7a:	4770      	bx	lr
 8001f7c:	240016d0 	.word	0x240016d0
 8001f80:	080220a4 	.word	0x080220a4

08001f84 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4604      	mov	r4, r0
    HAL::initialize();
 8001f88:	f010 f837 	bl	8011ffa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001f90:	f013 fc70 	bl	8015874 <_ZN8touchgfx11Application11getInstanceEv>
 8001f94:	4601      	mov	r1, r0
 8001f96:	4620      	mov	r0, r4
 8001f98:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	4a02      	ldr	r2, [pc, #8]	; (8001fac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 8001fa4:	4902      	ldr	r1, [pc, #8]	; (8001fb0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	47a8      	blx	r5
}
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
 8001fac:	2409fa00 	.word	0x2409fa00
 8001fb0:	24040000 	.word	0x24040000

08001fb4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 8001fb4:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 8001fb6:	f010 f807 	bl	8011fc8 <_ZN8touchgfx3HAL10beginFrameEv>
}
 8001fba:	bd08      	pop	{r3, pc}

08001fbc <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8001fbc:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 8001fbe:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8001fc2:	b113      	cbz	r3, 8001fca <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001fca:	f010 f809 	bl	8011fe0 <_ZN8touchgfx3HAL8endFrameEv>
}
 8001fce:	bd08      	pop	{r3, pc}
 8001fd0:	24001868 	.word	0x24001868

08001fd4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001fd4:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8001fd6:	f00f ffc1 	bl	8011f5c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001fe2:	d021      	beq.n	8002028 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001fec:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001ff0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ff4:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001ff8:	e000      	b.n	8001ffc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8001ffa:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ffc:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002000:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002004:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8002008:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800200e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002012:	4613      	mov	r3, r2
 8002014:	3a01      	subs	r2, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f2      	bne.n	8002000 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 800201a:	1e43      	subs	r3, r0, #1
 800201c:	2800      	cmp	r0, #0
 800201e:	d1ec      	bne.n	8001ffa <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 8002020:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002024:	f3bf 8f6f 	isb	sy
}
 8002028:	bd10      	pop	{r4, pc}
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 8002030:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 8002032:	f010 f8fc 	bl	801222e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8002036:	bd08      	pop	{r3, pc}

08002038 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8002038:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 800203a:	f00f ff89 	bl	8011f50 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800203e:	bd08      	pop	{r3, pc}

08002040 <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8002040:	b510      	push	{r4, lr}
 8002042:	4604      	mov	r4, r0
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8002046:	6003      	str	r3, [r0, #0]
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 800204a:	6003      	str	r3, [r0, #0]
 800204c:	217c      	movs	r1, #124	; 0x7c
 800204e:	f01e f9a8 	bl	80203a2 <_ZdlPvj>
 8002052:	4620      	mov	r0, r4
 8002054:	bd10      	pop	{r4, pc}
 8002056:	bf00      	nop
 8002058:	080222d8 	.word	0x080222d8
 800205c:	08023580 	.word	0x08023580

08002060 <HAL_LTDC_LineEventCallback>:
        return instance;
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_LTDC_LineEventCallback+0x54>)
 8002062:	681b      	ldr	r3, [r3, #0]
        if (!HAL::getInstance())
 8002064:	b32b      	cbz	r3, 80020b2 <HAL_LTDC_LineEventCallback+0x52>
    {
 8002066:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_LTDC_LineEventCallback+0x58>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <HAL_LTDC_LineEventCallback+0x5c>)
 800206e:	8811      	ldrh	r1, [r2, #0]
 8002070:	428b      	cmp	r3, r1
 8002072:	d00a      	beq.n	800208a <HAL_LTDC_LineEventCallback+0x2a>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002074:	f008 fcb4 	bl	800a9e0 <HAL_LTDC_ProgramLineEvent>
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_LTDC_LineEventCallback+0x54>)
 800207a:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 800207c:	6803      	ldr	r3, [r0, #0]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002082:	2000      	movs	r0, #0
 8002084:	f7fe fa5c 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002088:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_LTDC_LineEventCallback+0x60>)
 800208c:	8819      	ldrh	r1, [r3, #0]
 800208e:	f008 fca7 	bl	800a9e0 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002092:	4c08      	ldr	r4, [pc, #32]	; (80020b4 <HAL_LTDC_LineEventCallback+0x54>)
 8002094:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002096:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800209a:	3301      	adds	r3, #1
 800209c:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80020a0:	f7fe fc38 	bl	8000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80020a4:	6820      	ldr	r0, [r4, #0]
 80020a6:	f010 fd07 	bl	8012ab8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7fe fa0a 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80020b0:	e7ea      	b.n	8002088 <HAL_LTDC_LineEventCallback+0x28>
 80020b2:	4770      	bx	lr
 80020b4:	2400c7f4 	.word	0x2400c7f4
 80020b8:	50001000 	.word	0x50001000
 80020bc:	2400186c 	.word	0x2400186c
 80020c0:	2400186a 	.word	0x2400186a

080020c4 <_GLOBAL__sub_I__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
}
 80020c4:	b508      	push	{r3, lr}
 80020c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020ca:	2001      	movs	r0, #1
 80020cc:	f7ff fd28 	bl	8001b20 <_Z41__static_initialization_and_destruction_0ii>
 80020d0:	bd08      	pop	{r3, pc}

080020d2 <_GLOBAL__sub_D__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 80020d2:	b508      	push	{r3, lr}
 80020d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff fd21 	bl	8001b20 <_Z41__static_initialization_and_destruction_0ii>
 80020de:	bd08      	pop	{r3, pc}

080020e0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80020e0:	b530      	push	{r4, r5, lr}
 80020e2:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020e4:	2400      	movs	r4, #0
 80020e6:	9400      	str	r4, [sp, #0]
 80020e8:	9401      	str	r4, [sp, #4]
 80020ea:	9402      	str	r4, [sp, #8]
 80020ec:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020ee:	f007 f8f9 	bl	80092e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020f2:	2501      	movs	r5, #1
 80020f4:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020f8:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80020fc:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8002100:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8002102:	231b      	movs	r3, #27
 8002104:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002108:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800210c:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002110:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002114:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002118:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800211c:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002120:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002124:	4668      	mov	r0, sp
 8002126:	f007 f8fb 	bl	8009320 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800212a:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800212e:	2319      	movs	r3, #25
 8002130:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002134:	2403      	movs	r4, #3
 8002136:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800213a:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800213e:	4668      	mov	r0, sp
 8002140:	f007 f8ee 	bl	8009320 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002144:	2302      	movs	r3, #2
 8002146:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800214a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800214e:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8002150:	2313      	movs	r3, #19
 8002152:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002156:	4668      	mov	r0, sp
 8002158:	f007 f8e2 	bl	8009320 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800215c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002160:	2311      	movs	r3, #17
 8002162:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002166:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800216a:	4668      	mov	r0, sp
 800216c:	f007 f8d8 	bl	8009320 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002170:	2004      	movs	r0, #4
 8002172:	f007 f8c5 	bl	8009300 <HAL_MPU_Enable>

}
 8002176:	b005      	add	sp, #20
 8002178:	bd30      	pop	{r4, r5, pc}
	...

0800217c <MX_CRC_Init>:
{
 800217c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800217e:	4806      	ldr	r0, [pc, #24]	; (8002198 <MX_CRC_Init+0x1c>)
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <MX_CRC_Init+0x20>)
 8002182:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002188:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800218a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800218c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800218e:	2301      	movs	r3, #1
 8002190:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002192:	f007 f8f5 	bl	8009380 <HAL_CRC_Init>
}
 8002196:	bd08      	pop	{r3, pc}
 8002198:	24001880 	.word	0x24001880
 800219c:	40023000 	.word	0x40023000

080021a0 <MX_GPIO_Init>:
{
 80021a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021a4:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a6:	2400      	movs	r4, #0
 80021a8:	9409      	str	r4, [sp, #36]	; 0x24
 80021aa:	940a      	str	r4, [sp, #40]	; 0x28
 80021ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80021ae:	940c      	str	r4, [sp, #48]	; 0x30
 80021b0:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021b2:	4b76      	ldr	r3, [pc, #472]	; (800238c <MX_GPIO_Init+0x1ec>)
 80021b4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021c4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80021c8:	9201      	str	r2, [sp, #4]
 80021ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021cc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021d8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021dc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80021e0:	9202      	str	r2, [sp, #8]
 80021e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021f4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80021f8:	9203      	str	r2, [sp, #12]
 80021fa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002204:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002208:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800220c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002210:	9204      	str	r2, [sp, #16]
 8002212:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002214:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002218:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002220:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002224:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002228:	9205      	str	r2, [sp, #20]
 800222a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002238:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800223c:	f002 0201 	and.w	r2, r2, #1
 8002240:	9206      	str	r2, [sp, #24]
 8002242:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002244:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002248:	f042 0204 	orr.w	r2, r2, #4
 800224c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002250:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002254:	f002 0204 	and.w	r2, r2, #4
 8002258:	9207      	str	r2, [sp, #28]
 800225a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002260:	f042 0208 	orr.w	r2, r2, #8
 8002264:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002268:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	9308      	str	r3, [sp, #32]
 8002272:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|FRAME_RATE_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8002274:	4e46      	ldr	r6, [pc, #280]	; (8002390 <MX_GPIO_Init+0x1f0>)
 8002276:	4622      	mov	r2, r4
 8002278:	f240 210e 	movw	r1, #526	; 0x20e
 800227c:	4630      	mov	r0, r6
 800227e:	f007 fd52 	bl	8009d26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002282:	f8df a118 	ldr.w	sl, [pc, #280]	; 800239c <MX_GPIO_Init+0x1fc>
 8002286:	4622      	mov	r2, r4
 8002288:	f640 0104 	movw	r1, #2052	; 0x804
 800228c:	4650      	mov	r0, sl
 800228e:	f007 fd4a 	bl	8009d26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8002292:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80023a0 <MX_GPIO_Init+0x200>
 8002296:	4622      	mov	r2, r4
 8002298:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 800229c:	4640      	mov	r0, r8
 800229e:	f007 fd42 	bl	8009d26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80022a2:	4f3c      	ldr	r7, [pc, #240]	; (8002394 <MX_GPIO_Init+0x1f4>)
 80022a4:	4622      	mov	r2, r4
 80022a6:	2106      	movs	r1, #6
 80022a8:	4638      	mov	r0, r7
 80022aa:	f007 fd3c 	bl	8009d26 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80022ae:	2330      	movs	r3, #48	; 0x30
 80022b0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b2:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
 80022b6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022bc:	a909      	add	r1, sp, #36	; 0x24
 80022be:	4630      	mov	r0, r6
 80022c0:	f007 fb72 	bl	80099a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80022c4:	230e      	movs	r3, #14
 80022c6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c8:	2501      	movs	r5, #1
 80022ca:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022d0:	a909      	add	r1, sp, #36	; 0x24
 80022d2:	4630      	mov	r0, r6
 80022d4:	f007 fb68 	bl	80099a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80022d8:	f640 0304 	movw	r3, #2052	; 0x804
 80022dc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022e4:	a909      	add	r1, sp, #36	; 0x24
 80022e6:	4650      	mov	r0, sl
 80022e8:	f007 fb5e 	bl	80099a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80022ec:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80022f0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	f04f 0a03 	mov.w	sl, #3
 80022fa:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022fe:	a909      	add	r1, sp, #36	; 0x24
 8002300:	4640      	mov	r0, r8
 8002302:	f007 fb51 	bl	80099a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8002306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8002314:	a909      	add	r1, sp, #36	; 0x24
 8002316:	4630      	mov	r0, r6
 8002318:	f007 fb46 	bl	80099a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 800231c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002320:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002322:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002328:	a909      	add	r1, sp, #36	; 0x24
 800232a:	481b      	ldr	r0, [pc, #108]	; (8002398 <MX_GPIO_Init+0x1f8>)
 800232c:	f007 fb3c 	bl	80099a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002330:	2604      	movs	r6, #4
 8002332:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002334:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002338:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800233a:	a909      	add	r1, sp, #36	; 0x24
 800233c:	4640      	mov	r0, r8
 800233e:	f007 fb33 	bl	80099a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002342:	2302      	movs	r3, #2
 8002344:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800234c:	a909      	add	r1, sp, #36	; 0x24
 800234e:	4638      	mov	r0, r7
 8002350:	f007 fb2a 	bl	80099a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8002354:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002358:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 800235c:	a909      	add	r1, sp, #36	; 0x24
 800235e:	4638      	mov	r0, r7
 8002360:	f007 fb22 	bl	80099a8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002364:	4622      	mov	r2, r4
 8002366:	2105      	movs	r1, #5
 8002368:	2017      	movs	r0, #23
 800236a:	f006 ff65 	bl	8009238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800236e:	2017      	movs	r0, #23
 8002370:	f006 ff98 	bl	80092a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002374:	4622      	mov	r2, r4
 8002376:	2105      	movs	r1, #5
 8002378:	2028      	movs	r0, #40	; 0x28
 800237a:	f006 ff5d 	bl	8009238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800237e:	2028      	movs	r0, #40	; 0x28
 8002380:	f006 ff90 	bl	80092a4 <HAL_NVIC_EnableIRQ>
}
 8002384:	b00e      	add	sp, #56	; 0x38
 8002386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800238a:	bf00      	nop
 800238c:	58024400 	.word	0x58024400
 8002390:	58022000 	.word	0x58022000
 8002394:	58020000 	.word	0x58020000
 8002398:	58020800 	.word	0x58020800
 800239c:	58021800 	.word	0x58021800
 80023a0:	58021c00 	.word	0x58021c00

080023a4 <MX_DMA2D_Init>:
{
 80023a4:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 80023a6:	4c0b      	ldr	r4, [pc, #44]	; (80023d4 <MX_DMA2D_Init+0x30>)
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_DMA2D_Init+0x34>)
 80023aa:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80023ac:	2300      	movs	r3, #0
 80023ae:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80023b0:	2202      	movs	r2, #2
 80023b2:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 80023b4:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80023b6:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80023b8:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80023ba:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80023bc:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80023be:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80023c0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80023c2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80023c4:	4620      	mov	r0, r4
 80023c6:	f007 f98b 	bl	80096e0 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80023ca:	2101      	movs	r1, #1
 80023cc:	4620      	mov	r0, r4
 80023ce:	f007 fa69 	bl	80098a4 <HAL_DMA2D_ConfigLayer>
}
 80023d2:	bd10      	pop	{r4, pc}
 80023d4:	240018a4 	.word	0x240018a4
 80023d8:	52001000 	.word	0x52001000

080023dc <MX_LTDC_Init>:
{
 80023dc:	b530      	push	{r4, r5, lr}
 80023de:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80023e0:	2234      	movs	r2, #52	; 0x34
 80023e2:	2100      	movs	r1, #0
 80023e4:	a801      	add	r0, sp, #4
 80023e6:	f01e f9a1 	bl	802072c <memset>
  hltdc.Instance = LTDC;
 80023ea:	4c23      	ldr	r4, [pc, #140]	; (8002478 <MX_LTDC_Init+0x9c>)
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <MX_LTDC_Init+0xa0>)
 80023ee:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023f0:	2500      	movs	r5, #0
 80023f2:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80023f4:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80023f6:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023f8:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 80023fa:	2328      	movs	r3, #40	; 0x28
 80023fc:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 80023fe:	2309      	movs	r3, #9
 8002400:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8002402:	232a      	movs	r3, #42	; 0x2a
 8002404:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002406:	230b      	movs	r3, #11
 8002408:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 800240a:	f240 230a 	movw	r3, #522	; 0x20a
 800240e:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002410:	f240 131b 	movw	r3, #283	; 0x11b
 8002414:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8002416:	f240 232a 	movw	r3, #554	; 0x22a
 800241a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800241c:	f240 131d 	movw	r3, #285	; 0x11d
 8002420:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002422:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002426:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800242a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800242e:	4620      	mov	r0, r4
 8002430:	f008 f9b8 	bl	800a7a4 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8002434:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8002436:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800243a:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 800243c:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 800243e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002442:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002444:	2301      	movs	r3, #1
 8002446:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8002448:	23ff      	movs	r3, #255	; 0xff
 800244a:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 800244c:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800244e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002452:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002454:	2005      	movs	r0, #5
 8002456:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002458:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800245a:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800245c:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 800245e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002462:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002466:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800246a:	462a      	mov	r2, r5
 800246c:	a901      	add	r1, sp, #4
 800246e:	4620      	mov	r0, r4
 8002470:	f008 fa81 	bl	800a976 <HAL_LTDC_ConfigLayer>
}
 8002474:	b00f      	add	sp, #60	; 0x3c
 8002476:	bd30      	pop	{r4, r5, pc}
 8002478:	24001958 	.word	0x24001958
 800247c:	50001000 	.word	0x50001000

08002480 <MX_I2C4_Init>:
{
 8002480:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 8002482:	4c0d      	ldr	r4, [pc, #52]	; (80024b8 <MX_I2C4_Init+0x38>)
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <MX_I2C4_Init+0x3c>)
 8002486:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <MX_I2C4_Init+0x40>)
 800248a:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800248c:	2500      	movs	r5, #0
 800248e:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002490:	2301      	movs	r3, #1
 8002492:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002494:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002496:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002498:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800249a:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800249c:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800249e:	4620      	mov	r0, r4
 80024a0:	f007 fe20 	bl	800a0e4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80024a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a8:	4620      	mov	r0, r4
 80024aa:	f008 f844 	bl	800a536 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80024ae:	4629      	mov	r1, r5
 80024b0:	4620      	mov	r0, r4
 80024b2:	f008 f86e 	bl	800a592 <HAL_I2CEx_ConfigDigitalFilter>
}
 80024b6:	bd38      	pop	{r3, r4, r5, pc}
 80024b8:	2400190c 	.word	0x2400190c
 80024bc:	58001c00 	.word	0x58001c00
 80024c0:	30808bd0 	.word	0x30808bd0

080024c4 <MX_OCTOSPI1_Init>:
{
 80024c4:	b530      	push	{r4, r5, lr}
 80024c6:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 80024c8:	4814      	ldr	r0, [pc, #80]	; (800251c <MX_OCTOSPI1_Init+0x58>)
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <MX_OCTOSPI1_Init+0x5c>)
 80024cc:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 80024ce:	2501      	movs	r5, #1
 80024d0:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80024d2:	2400      	movs	r4, #0
 80024d4:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80024d6:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 80024d8:	231a      	movs	r3, #26
 80024da:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80024dc:	2302      	movs	r3, #2
 80024de:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80024e0:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80024e2:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80024e4:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 80024e6:	2303      	movs	r3, #3
 80024e8:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80024ea:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80024ec:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80024ee:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80024f0:	2308      	movs	r3, #8
 80024f2:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80024f4:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 80024f6:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80024f8:	f008 fef0 	bl	800b2dc <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80024fc:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8002500:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8002504:	4620      	mov	r0, r4
 8002506:	f006 fbe9 	bl	8008cdc <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 800250a:	a901      	add	r1, sp, #4
 800250c:	4620      	mov	r0, r4
 800250e:	f006 fc5f 	bl	8008dd0 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8002512:	4620      	mov	r0, r4
 8002514:	f006 fb8a 	bl	8008c2c <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8002518:	b003      	add	sp, #12
 800251a:	bd30      	pop	{r4, r5, pc}
 800251c:	24001a00 	.word	0x24001a00
 8002520:	52005000 	.word	0x52005000

08002524 <MX_SPI2_Init>:
{
 8002524:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8002526:	4812      	ldr	r0, [pc, #72]	; (8002570 <MX_SPI2_Init+0x4c>)
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <MX_SPI2_Init+0x50>)
 800252a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800252c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002530:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002532:	2300      	movs	r3, #0
 8002534:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002536:	220f      	movs	r2, #15
 8002538:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800253a:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800253c:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800253e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002542:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002544:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002548:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800254a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800254c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002550:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002556:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002558:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800255a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800255c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800255e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002560:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002562:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002564:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002566:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002568:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800256a:	f00a fc33 	bl	800cdd4 <HAL_SPI_Init>
}
 800256e:	bd08      	pop	{r3, pc}
 8002570:	24001a5c 	.word	0x24001a5c
 8002574:	40003800 	.word	0x40003800

08002578 <SystemClock_Config>:
{
 8002578:	b510      	push	{r4, lr}
 800257a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800257c:	224c      	movs	r2, #76	; 0x4c
 800257e:	2100      	movs	r1, #0
 8002580:	a809      	add	r0, sp, #36	; 0x24
 8002582:	f01e f8d3 	bl	802072c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002586:	2220      	movs	r2, #32
 8002588:	2100      	movs	r1, #0
 800258a:	a801      	add	r0, sp, #4
 800258c:	f01e f8ce 	bl	802072c <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8002590:	4b23      	ldr	r3, [pc, #140]	; (8002620 <SystemClock_Config+0xa8>)
 8002592:	f04f 32ff 	mov.w	r2, #4294967295
 8002596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800259a:	2004      	movs	r0, #4
 800259c:	f008 ff22 	bl	800b3e4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <SystemClock_Config+0xac>)
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025ac:	619a      	str	r2, [r3, #24]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <SystemClock_Config+0xac>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80025c0:	d0fa      	beq.n	80025b8 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80025c2:	4a17      	ldr	r2, [pc, #92]	; (8002620 <SystemClock_Config+0xa8>)
 80025c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025da:	2302      	movs	r3, #2
 80025dc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025de:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80025e0:	220c      	movs	r2, #12
 80025e2:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80025e4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80025e8:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80025ea:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025ec:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025ee:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80025f0:	2304      	movs	r3, #4
 80025f2:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025f4:	2400      	movs	r4, #0
 80025f6:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80025f8:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fa:	a809      	add	r0, sp, #36	; 0x24
 80025fc:	f008 ff3c 	bl	800b478 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002600:	233f      	movs	r3, #63	; 0x3f
 8002602:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002604:	2103      	movs	r1, #3
 8002606:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002608:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800260a:	2308      	movs	r3, #8
 800260c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800260e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002610:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002612:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002614:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002616:	a801      	add	r0, sp, #4
 8002618:	f009 fb3a 	bl	800bc90 <HAL_RCC_ClockConfig>
}
 800261c:	b01c      	add	sp, #112	; 0x70
 800261e:	bd10      	pop	{r4, pc}
 8002620:	58024400 	.word	0x58024400
 8002624:	58024800 	.word	0x58024800

08002628 <main>:
{
 8002628:	b508      	push	{r3, lr}
  MPU_Config();
 800262a:	f7ff fd59 	bl	80020e0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <main+0x104>)
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002636:	d113      	bne.n	8002660 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8002638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800263c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <main+0x104>)
 8002642:	2200      	movs	r2, #0
 8002644:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800264c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002656:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002658:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800265c:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <main+0x104>)
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002668:	d127      	bne.n	80026ba <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <main+0x104>)
 800266c:	2200      	movs	r2, #0
 800266e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002672:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002676:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800267a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800267e:	e000      	b.n	8002682 <main+0x5a>
    } while(sets-- != 0U);
 8002680:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002682:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002686:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800268a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800268e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8002692:	4926      	ldr	r1, [pc, #152]	; (800272c <main+0x104>)
 8002694:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002698:	4613      	mov	r3, r2
 800269a:	3a01      	subs	r2, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f2      	bne.n	8002686 <main+0x5e>
    } while(sets-- != 0U);
 80026a0:	1e43      	subs	r3, r0, #1
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d1ec      	bne.n	8002680 <main+0x58>
 80026a6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80026aa:	694b      	ldr	r3, [r1, #20]
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	614b      	str	r3, [r1, #20]
 80026b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026b6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80026ba:	f006 fd57 	bl	800916c <HAL_Init>
  SystemClock_Config();
 80026be:	f7ff ff5b 	bl	8002578 <SystemClock_Config>
  MX_CRC_Init();
 80026c2:	f7ff fd5b 	bl	800217c <MX_CRC_Init>
  MX_GPIO_Init();
 80026c6:	f7ff fd6b 	bl	80021a0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80026ca:	f7ff fe6b 	bl	80023a4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80026ce:	f7ff fe85 	bl	80023dc <MX_LTDC_Init>
  MX_I2C4_Init();
 80026d2:	f7ff fed5 	bl	8002480 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 80026d6:	f7ff fef5 	bl	80024c4 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 80026da:	f7ff ff23 	bl	8002524 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 80026de:	f7fd fe99 	bl	8000414 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80026e2:	f7fd fe96 	bl	8000412 <MX_TouchGFX_PreOSInit>
  wifi_initialise();
 80026e6:	f000 fead 	bl	8003444 <wifi_initialise>
  osKernelInitialize();
 80026ea:	f00b fc05 	bl	800def8 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <main+0x108>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	200a      	movs	r0, #10
 80026f4:	f00b fd4b 	bl	800e18e <osMessageQueueNew>
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <main+0x10c>)
 80026fa:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 80026fc:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <main+0x110>)
 80026fe:	2101      	movs	r1, #1
 8002700:	200a      	movs	r0, #10
 8002702:	f00b fd44 	bl	800e18e <osMessageQueueNew>
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <main+0x114>)
 8002708:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 800270a:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <main+0x118>)
 800270c:	2100      	movs	r1, #0
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <main+0x11c>)
 8002710:	f00b fc20 	bl	800df54 <osThreadNew>
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <main+0x120>)
 8002716:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <main+0x124>)
 800271a:	2100      	movs	r1, #0
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <main+0x128>)
 800271e:	f00b fc19 	bl	800df54 <osThreadNew>
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <main+0x12c>)
 8002724:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002726:	f00b fbf9 	bl	800df1c <osKernelStart>
  while (1)
 800272a:	e7fe      	b.n	800272a <main+0x102>
 800272c:	e000ed00 	.word	0xe000ed00
 8002730:	080223d8 	.word	0x080223d8
 8002734:	24001870 	.word	0x24001870
 8002738:	08022414 	.word	0x08022414
 800273c:	24001878 	.word	0x24001878
 8002740:	0802242c 	.word	0x0802242c
 8002744:	080034d9 	.word	0x080034d9
 8002748:	2400187c 	.word	0x2400187c
 800274c:	080223f0 	.word	0x080223f0
 8002750:	0800041d 	.word	0x0800041d
 8002754:	24001874 	.word	0x24001874

08002758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800275a:	6802      	ldr	r2, [r0, #0]
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800275e:	429a      	cmp	r2, r3
 8002760:	d000      	beq.n	8002764 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002762:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002764:	f006 fd30 	bl	80091c8 <HAL_IncTick>
}
 8002768:	e7fb      	b.n	8002762 <HAL_TIM_PeriodElapsedCallback+0xa>
 800276a:	bf00      	nop
 800276c:	40001000 	.word	0x40001000

08002770 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002770:	4770      	bx	lr
	...

08002774 <wait_cmddata_rdy_rising_event>:
}



int32_t wait_cmddata_rdy_rising_event(int32_t timeout)
{
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4605      	mov	r5, r0
#ifdef SEM_WAIT
    return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
    int32_t tickstart = HAL_GetTick();
 8002778:	f006 fd32 	bl	80091e0 <HAL_GetTick>
 800277c:	4604      	mov	r4, r0
    while (cmddata_rdy_rising_event == 1)
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <wait_cmddata_rdy_rising_event+0x28>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <wait_cmddata_rdy_rising_event+0x22>
    {
        if ((HAL_GetTick() - tickstart) > timeout)
 8002786:	f006 fd2b 	bl	80091e0 <HAL_GetTick>
 800278a:	1b00      	subs	r0, r0, r4
 800278c:	42a8      	cmp	r0, r5
 800278e:	d9f6      	bls.n	800277e <wait_cmddata_rdy_rising_event+0xa>
        {
            return -1;
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	e000      	b.n	8002798 <wait_cmddata_rdy_rising_event+0x24>
        }
    }
    return 0;
 8002796:	2000      	movs	r0, #0
#endif /* SEM_WAIT */
}
 8002798:	bd38      	pop	{r3, r4, r5, pc}
 800279a:	bf00      	nop
 800279c:	2400218c 	.word	0x2400218c

080027a0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80027a0:	b530      	push	{r4, r5, lr}
 80027a2:	b083      	sub	sp, #12
 80027a4:	4604      	mov	r4, r0
    volatile        uint32_t ct = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	9301      	str	r3, [sp, #4]
    uint32_t        loop_per_us = 0;
    static uint32_t cycle_per_loop = 0;

    /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
    /* 10 cycle for STM32L4 */
    if (cycle_per_loop == 0)
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <SPI_WIFI_DelayUs+0x74>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	b16b      	cbz	r3, 80027cc <SPI_WIFI_DelayUs+0x2c>
        {
            cycle_per_loop = 1;
        }
    }

    loop_per_us = SystemCoreClock / 1000000UL / cycle_per_loop;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <SPI_WIFI_DelayUs+0x78>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4819      	ldr	r0, [pc, #100]	; (800281c <SPI_WIFI_DelayUs+0x7c>)
 80027b6:	fba0 2303 	umull	r2, r3, r0, r3
 80027ba:	0c9b      	lsrs	r3, r3, #18
 80027bc:	4a15      	ldr	r2, [pc, #84]	; (8002814 <SPI_WIFI_DelayUs+0x74>)
 80027be:	6810      	ldr	r0, [r2, #0]
 80027c0:	fbb3 f3f0 	udiv	r3, r3, r0
    ct = n * loop_per_us;
 80027c4:	fb04 f303 	mul.w	r3, r4, r3
 80027c8:	9301      	str	r3, [sp, #4]
    while (ct)
 80027ca:	e01d      	b.n	8002808 <SPI_WIFI_DelayUs+0x68>
        uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <SPI_WIFI_DelayUs+0x78>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a13      	ldr	r2, [pc, #76]	; (8002820 <SPI_WIFI_DelayUs+0x80>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	099b      	lsrs	r3, r3, #6
        ct = cycle_per_ms;
 80027d8:	9301      	str	r3, [sp, #4]
        tick = HAL_GetTick();
 80027da:	f006 fd01 	bl	80091e0 <HAL_GetTick>
 80027de:	4605      	mov	r5, r0
        while (ct)
 80027e0:	e002      	b.n	80027e8 <SPI_WIFI_DelayUs+0x48>
            ct--;
 80027e2:	9b01      	ldr	r3, [sp, #4]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	9301      	str	r3, [sp, #4]
        while (ct)
 80027e8:	9b01      	ldr	r3, [sp, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f9      	bne.n	80027e2 <SPI_WIFI_DelayUs+0x42>
        cycle_per_loop = HAL_GetTick() - tick;
 80027ee:	f006 fcf7 	bl	80091e0 <HAL_GetTick>
 80027f2:	1b40      	subs	r0, r0, r5
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <SPI_WIFI_DelayUs+0x74>)
 80027f6:	6018      	str	r0, [r3, #0]
        if (cycle_per_loop == 0)
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d1d9      	bne.n	80027b0 <SPI_WIFI_DelayUs+0x10>
            cycle_per_loop = 1;
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e7d6      	b.n	80027b0 <SPI_WIFI_DelayUs+0x10>
    {
        ct--;
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	3b01      	subs	r3, #1
 8002806:	9301      	str	r3, [sp, #4]
    while (ct)
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f9      	bne.n	8002802 <SPI_WIFI_DelayUs+0x62>
    }
    return;
}
 800280e:	b003      	add	sp, #12
 8002810:	bd30      	pop	{r4, r5, pc}
 8002812:	bf00      	nop
 8002814:	24002190 	.word	0x24002190
 8002818:	24000070 	.word	0x24000070
 800281c:	431bde83 	.word	0x431bde83
 8002820:	10624dd3 	.word	0x10624dd3

08002824 <wait_spi_rx_event>:
{
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002828:	f006 fcda 	bl	80091e0 <HAL_GetTick>
 800282c:	4604      	mov	r4, r0
    while (spi_rx_event == 1)
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <wait_spi_rx_event+0x28>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <wait_spi_rx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002836:	f006 fcd3 	bl	80091e0 <HAL_GetTick>
 800283a:	1b00      	subs	r0, r0, r4
 800283c:	42a8      	cmp	r0, r5
 800283e:	d9f6      	bls.n	800282e <wait_spi_rx_event+0xa>
            return -1;
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	e000      	b.n	8002848 <wait_spi_rx_event+0x24>
    return 0;
 8002846:	2000      	movs	r0, #0
}
 8002848:	bd38      	pop	{r3, r4, r5, pc}
 800284a:	bf00      	nop
 800284c:	24002194 	.word	0x24002194

08002850 <wait_spi_tx_event>:
{
 8002850:	b538      	push	{r3, r4, r5, lr}
 8002852:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002854:	f006 fcc4 	bl	80091e0 <HAL_GetTick>
 8002858:	4604      	mov	r4, r0
    while (spi_tx_event == 1)
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <wait_spi_tx_event+0x28>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <wait_spi_tx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002862:	f006 fcbd 	bl	80091e0 <HAL_GetTick>
 8002866:	1b00      	subs	r0, r0, r4
 8002868:	42a8      	cmp	r0, r5
 800286a:	d9f6      	bls.n	800285a <wait_spi_tx_event+0xa>
            return -1;
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	e000      	b.n	8002874 <wait_spi_tx_event+0x24>
    return 0;
 8002872:	2000      	movs	r0, #0
}
 8002874:	bd38      	pop	{r3, r4, r5, pc}
 8002876:	bf00      	nop
 8002878:	24002198 	.word	0x24002198

0800287c <SPI_WIFI_ResetModule>:
{
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	b082      	sub	sp, #8
    uint32_t tickstart = HAL_GetTick();
 8002880:	f006 fcae 	bl	80091e0 <HAL_GetTick>
 8002884:	4606      	mov	r6, r0
    WIFI_RESET_MODULE();
 8002886:	4c38      	ldr	r4, [pc, #224]	; (8002968 <SPI_WIFI_ResetModule+0xec>)
 8002888:	2200      	movs	r2, #0
 800288a:	2102      	movs	r1, #2
 800288c:	4620      	mov	r0, r4
 800288e:	f007 fa4a 	bl	8009d26 <HAL_GPIO_WritePin>
 8002892:	200a      	movs	r0, #10
 8002894:	f006 fcaa 	bl	80091ec <HAL_Delay>
 8002898:	2201      	movs	r2, #1
 800289a:	2102      	movs	r1, #2
 800289c:	4620      	mov	r0, r4
 800289e:	f007 fa42 	bl	8009d26 <HAL_GPIO_WritePin>
 80028a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028a6:	f006 fca1 	bl	80091ec <HAL_Delay>
    WIFI_ENABLE_NSS();
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028b0:	482e      	ldr	r0, [pc, #184]	; (800296c <SPI_WIFI_ResetModule+0xf0>)
 80028b2:	f007 fa38 	bl	8009d26 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80028b6:	200a      	movs	r0, #10
 80028b8:	f7ff ff72 	bl	80027a0 <SPI_WIFI_DelayUs>
    uint8_t count = 0;
 80028bc:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80028be:	2120      	movs	r1, #32
 80028c0:	4829      	ldr	r0, [pc, #164]	; (8002968 <SPI_WIFI_ResetModule+0xec>)
 80028c2:	f007 fa29 	bl	8009d18 <HAL_GPIO_ReadPin>
 80028c6:	2801      	cmp	r0, #1
 80028c8:	d11c      	bne.n	8002904 <SPI_WIFI_ResetModule+0x88>
        Status = HAL_SPI_Receive(&hspi2, &Prompt[count], 1, 0xFFFF);
 80028ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ce:	2201      	movs	r2, #1
 80028d0:	eb0d 0104 	add.w	r1, sp, r4
 80028d4:	4826      	ldr	r0, [pc, #152]	; (8002970 <SPI_WIFI_ResetModule+0xf4>)
 80028d6:	f00a fcd1 	bl	800d27c <HAL_SPI_Receive>
 80028da:	4605      	mov	r5, r0
        count += 2;
 80028dc:	3402      	adds	r4, #2
 80028de:	b2e4      	uxtb	r4, r4
        if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80028e0:	f006 fc7e 	bl	80091e0 <HAL_GetTick>
 80028e4:	1b83      	subs	r3, r0, r6
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ea:	d201      	bcs.n	80028f0 <SPI_WIFI_ResetModule+0x74>
 80028ec:	2d00      	cmp	r5, #0
 80028ee:	d0e6      	beq.n	80028be <SPI_WIFI_ResetModule+0x42>
            WIFI_DISABLE_NSS();
 80028f0:	2201      	movs	r2, #1
 80028f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028f6:	481d      	ldr	r0, [pc, #116]	; (800296c <SPI_WIFI_ResetModule+0xf0>)
 80028f8:	f007 fa15 	bl	8009d26 <HAL_GPIO_WritePin>
            return -1;
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002900:	b002      	add	sp, #8
 8002902:	bd70      	pop	{r4, r5, r6, pc}
    WIFI_DISABLE_NSS();
 8002904:	2201      	movs	r2, #1
 8002906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800290a:	4818      	ldr	r0, [pc, #96]	; (800296c <SPI_WIFI_ResetModule+0xf0>)
 800290c:	f007 fa0b 	bl	8009d26 <HAL_GPIO_WritePin>
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002910:	f89d 3000 	ldrb.w	r3, [sp]
 8002914:	2b15      	cmp	r3, #21
 8002916:	d115      	bne.n	8002944 <SPI_WIFI_ResetModule+0xc8>
 8002918:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800291c:	2b15      	cmp	r3, #21
 800291e:	d114      	bne.n	800294a <SPI_WIFI_ResetModule+0xce>
 8002920:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002924:	2b0d      	cmp	r3, #13
 8002926:	d113      	bne.n	8002950 <SPI_WIFI_ResetModule+0xd4>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002928:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800292c:	2b0a      	cmp	r3, #10
 800292e:	d112      	bne.n	8002956 <SPI_WIFI_ResetModule+0xda>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002930:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002934:	2b3e      	cmp	r3, #62	; 0x3e
 8002936:	d111      	bne.n	800295c <SPI_WIFI_ResetModule+0xe0>
 8002938:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800293c:	2b20      	cmp	r3, #32
 800293e:	d110      	bne.n	8002962 <SPI_WIFI_ResetModule+0xe6>
    return 0;
 8002940:	2000      	movs	r0, #0
 8002942:	e7dd      	b.n	8002900 <SPI_WIFI_ResetModule+0x84>
        return -1;
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	e7da      	b.n	8002900 <SPI_WIFI_ResetModule+0x84>
 800294a:	f04f 30ff 	mov.w	r0, #4294967295
 800294e:	e7d7      	b.n	8002900 <SPI_WIFI_ResetModule+0x84>
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	e7d4      	b.n	8002900 <SPI_WIFI_ResetModule+0x84>
 8002956:	f04f 30ff 	mov.w	r0, #4294967295
 800295a:	e7d1      	b.n	8002900 <SPI_WIFI_ResetModule+0x84>
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	e7ce      	b.n	8002900 <SPI_WIFI_ResetModule+0x84>
 8002962:	f04f 30ff 	mov.w	r0, #4294967295
 8002966:	e7cb      	b.n	8002900 <SPI_WIFI_ResetModule+0x84>
 8002968:	58022000 	.word	0x58022000
 800296c:	58020000 	.word	0x58020000
 8002970:	24001a5c 	.word	0x24001a5c

08002974 <SPI_WIFI_ReceiveData>:
{
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	b083      	sub	sp, #12
 8002978:	4605      	mov	r5, r0
 800297a:	460e      	mov	r6, r1
 800297c:	4617      	mov	r7, r2
    WIFI_DISABLE_NSS();
 800297e:	2201      	movs	r2, #1
 8002980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002984:	482b      	ldr	r0, [pc, #172]	; (8002a34 <SPI_WIFI_ReceiveData+0xc0>)
 8002986:	f007 f9ce 	bl	8009d26 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 800298a:	200a      	movs	r0, #10
 800298c:	f7ff ff08 	bl	80027a0 <SPI_WIFI_DelayUs>
    if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8002990:	4638      	mov	r0, r7
 8002992:	f7ff feef 	bl	8002774 <wait_cmddata_rdy_rising_event>
 8002996:	2800      	cmp	r0, #0
 8002998:	db48      	blt.n	8002a2c <SPI_WIFI_ReceiveData+0xb8>
    WIFI_ENABLE_NSS();
 800299a:	2200      	movs	r2, #0
 800299c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a0:	4824      	ldr	r0, [pc, #144]	; (8002a34 <SPI_WIFI_ReceiveData+0xc0>)
 80029a2:	f007 f9c0 	bl	8009d26 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(30);
 80029a6:	201e      	movs	r0, #30
 80029a8:	f7ff fefa 	bl	80027a0 <SPI_WIFI_DelayUs>
    int16_t length = 0;
 80029ac:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80029ae:	e016      	b.n	80029de <SPI_WIFI_ReceiveData+0x6a>
            spi_rx_event = 1;
 80029b0:	2201      	movs	r2, #1
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <SPI_WIFI_ReceiveData+0xc4>)
 80029b4:	601a      	str	r2, [r3, #0]
            if (HAL_SPI_Receive_IT(&hspi2, tmp, 1) != HAL_OK)
 80029b6:	a901      	add	r1, sp, #4
 80029b8:	4820      	ldr	r0, [pc, #128]	; (8002a3c <SPI_WIFI_ReceiveData+0xc8>)
 80029ba:	f00a ff0b 	bl	800d7d4 <HAL_SPI_Receive_IT>
 80029be:	bb08      	cbnz	r0, 8002a04 <SPI_WIFI_ReceiveData+0x90>
            wait_spi_rx_event(timeout);
 80029c0:	4638      	mov	r0, r7
 80029c2:	f7ff ff2f 	bl	8002824 <wait_spi_rx_event>
            pData[0] = tmp[0];
 80029c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029ca:	702b      	strb	r3, [r5, #0]
            pData[1] = tmp[1];
 80029cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029d0:	706b      	strb	r3, [r5, #1]
            length += 2;
 80029d2:	3402      	adds	r4, #2
 80029d4:	b224      	sxth	r4, r4
            pData  += 2;
 80029d6:	3502      	adds	r5, #2
            if (length >= ES_WIFI_DATA_SIZE)
 80029d8:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 80029dc:	da1b      	bge.n	8002a16 <SPI_WIFI_ReceiveData+0xa2>
    while (WIFI_IS_CMDDATA_READY())
 80029de:	2120      	movs	r1, #32
 80029e0:	4817      	ldr	r0, [pc, #92]	; (8002a40 <SPI_WIFI_ReceiveData+0xcc>)
 80029e2:	f007 f999 	bl	8009d18 <HAL_GPIO_ReadPin>
 80029e6:	2801      	cmp	r0, #1
 80029e8:	d103      	bne.n	80029f2 <SPI_WIFI_ReceiveData+0x7e>
        if ((length < len) || (!len))
 80029ea:	42b4      	cmp	r4, r6
 80029ec:	dbe0      	blt.n	80029b0 <SPI_WIFI_ReceiveData+0x3c>
 80029ee:	2e00      	cmp	r6, #0
 80029f0:	d0de      	beq.n	80029b0 <SPI_WIFI_ReceiveData+0x3c>
    WIFI_DISABLE_NSS();
 80029f2:	2201      	movs	r2, #1
 80029f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029f8:	480e      	ldr	r0, [pc, #56]	; (8002a34 <SPI_WIFI_ReceiveData+0xc0>)
 80029fa:	f007 f994 	bl	8009d26 <HAL_GPIO_WritePin>
}
 80029fe:	4620      	mov	r0, r4
 8002a00:	b003      	add	sp, #12
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
                WIFI_DISABLE_NSS();
 8002a04:	2201      	movs	r2, #1
 8002a06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a0a:	480a      	ldr	r0, [pc, #40]	; (8002a34 <SPI_WIFI_ReceiveData+0xc0>)
 8002a0c:	f007 f98b 	bl	8009d26 <HAL_GPIO_WritePin>
                return ES_WIFI_ERROR_SPI_FAILED;
 8002a10:	f04f 34ff 	mov.w	r4, #4294967295
 8002a14:	e7f3      	b.n	80029fe <SPI_WIFI_ReceiveData+0x8a>
                WIFI_DISABLE_NSS();
 8002a16:	2201      	movs	r2, #1
 8002a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <SPI_WIFI_ReceiveData+0xc0>)
 8002a1e:	f007 f982 	bl	8009d26 <HAL_GPIO_WritePin>
                SPI_WIFI_ResetModule();
 8002a22:	f7ff ff2b 	bl	800287c <SPI_WIFI_ResetModule>
                return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002a26:	f06f 0403 	mvn.w	r4, #3
 8002a2a:	e7e8      	b.n	80029fe <SPI_WIFI_ReceiveData+0x8a>
        return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002a2c:	f06f 0402 	mvn.w	r4, #2
 8002a30:	e7e5      	b.n	80029fe <SPI_WIFI_ReceiveData+0x8a>
 8002a32:	bf00      	nop
 8002a34:	58020000 	.word	0x58020000
 8002a38:	24002194 	.word	0x24002194
 8002a3c:	24001a5c 	.word	0x24001a5c
 8002a40:	58022000 	.word	0x58022000

08002a44 <SPI_WIFI_DeInit>:
{
 8002a44:	b508      	push	{r3, lr}
    HAL_SPI_DeInit(&hspi2);
 8002a46:	4802      	ldr	r0, [pc, #8]	; (8002a50 <SPI_WIFI_DeInit+0xc>)
 8002a48:	f00a fa78 	bl	800cf3c <HAL_SPI_DeInit>
}
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	bd08      	pop	{r3, pc}
 8002a50:	24001a5c 	.word	0x24001a5c

08002a54 <SPI_WIFI_MspInit>:
{
 8002a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a58:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <SPI_WIFI_MspInit+0x140>)
 8002a5c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a64:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002a68:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a6c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a70:	9201      	str	r2, [sp, #4]
 8002a72:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI2_FORCE_RESET();
 8002a74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_SPI2_RELEASE_RESET();
 8002a80:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002a98:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002a9c:	f002 0201 	and.w	r2, r2, #1
 8002aa0:	9202      	str	r2, [sp, #8]
 8002aa2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002aa8:	f042 0204 	orr.w	r2, r2, #4
 8002aac:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ab0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ab4:	f002 0204 	and.w	r2, r2, #4
 8002ab8:	9203      	str	r2, [sp, #12]
 8002aba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002abc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ac8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	9304      	str	r3, [sp, #16]
 8002ad2:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ad4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002b98 <SPI_WIFI_MspInit+0x144>
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2104      	movs	r1, #4
 8002adc:	4640      	mov	r0, r8
 8002ade:	f007 f922 	bl	8009d26 <HAL_GPIO_WritePin>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002ae2:	f04f 0904 	mov.w	r9, #4
 8002ae6:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002aea:	2501      	movs	r5, #1
 8002aec:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002aee:	2400      	movs	r4, #0
 8002af0:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002af2:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002af4:	a905      	add	r1, sp, #20
 8002af6:	4640      	mov	r0, r8
 8002af8:	f006 ff56 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_5;
 8002afc:	2320      	movs	r3, #32
 8002afe:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002b00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b04:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b06:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b08:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b0a:	a905      	add	r1, sp, #20
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	f006 ff4b 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_1;
 8002b12:	2702      	movs	r7, #2
 8002b14:	9705      	str	r7, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b16:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b18:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b1a:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b1c:	2605      	movs	r6, #5
 8002b1e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b20:	a905      	add	r1, sp, #20
 8002b22:	4640      	mov	r0, r8
 8002b24:	f006 ff40 	bl	80099a8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002b28:	f5a8 5800 	sub.w	r8, r8, #8192	; 0x2000
 8002b2c:	462a      	mov	r2, r5
 8002b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b32:	4640      	mov	r0, r8
 8002b34:	f007 f8f7 	bl	8009d26 <HAL_GPIO_WritePin>
    GPIO_Init.Pin       =  GPIO_PIN_11;
 8002b38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b3c:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b3e:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b40:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b42:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b44:	a905      	add	r1, sp, #20
 8002b46:	4640      	mov	r0, r8
 8002b48:	f006 ff2e 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_Init.Pin       =  GPIO_PIN_12;
 8002b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b50:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b52:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b54:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b56:	9508      	str	r5, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b58:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b5a:	a905      	add	r1, sp, #20
 8002b5c:	4640      	mov	r0, r8
 8002b5e:	f006 ff23 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_3;
 8002b62:	2308      	movs	r3, #8
 8002b64:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b66:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b68:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b6a:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b6c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002b6e:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8002b72:	a905      	add	r1, sp, #20
 8002b74:	4640      	mov	r0, r8
 8002b76:	f006 ff17 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002b7a:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b7e:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_PULLUP;
 8002b80:	9507      	str	r5, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b82:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b84:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002b86:	a905      	add	r1, sp, #20
 8002b88:	4640      	mov	r0, r8
 8002b8a:	f006 ff0d 	bl	80099a8 <HAL_GPIO_Init>
}
 8002b8e:	b00b      	add	sp, #44	; 0x2c
 8002b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b94:	58024400 	.word	0x58024400
 8002b98:	58022000 	.word	0x58022000

08002b9c <SPI_WIFI_Init>:
{
 8002b9c:	b510      	push	{r4, lr}
    if (mode == ES_WIFI_INIT)
 8002b9e:	bb78      	cbnz	r0, 8002c00 <SPI_WIFI_Init+0x64>
        hspi2.Instance               = SPI2;
 8002ba0:	4c1a      	ldr	r4, [pc, #104]	; (8002c0c <SPI_WIFI_Init+0x70>)
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <SPI_WIFI_Init+0x74>)
 8002ba4:	6023      	str	r3, [r4, #0]
        SPI_WIFI_MspInit(&hspi2);
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7ff ff54 	bl	8002a54 <SPI_WIFI_MspInit>
        hspi2.Init.Mode              = SPI_MODE_MASTER;
 8002bac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bb0:	6063      	str	r3, [r4, #4]
        hspi2.Init.Direction         = SPI_DIRECTION_2LINES;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60a3      	str	r3, [r4, #8]
        hspi2.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	60e2      	str	r2, [r4, #12]
        hspi2.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002bba:	6123      	str	r3, [r4, #16]
        hspi2.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002bbc:	6163      	str	r3, [r4, #20]
        hspi2.Init.NSS               = SPI_NSS_SOFT;
 8002bbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bc2:	61a2      	str	r2, [r4, #24]
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /* 280/16 = 17.5MHz (Inventek WIFI module supports up to 20MHz)*/
 8002bc4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002bc8:	61e2      	str	r2, [r4, #28]
        hspi2.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002bca:	6223      	str	r3, [r4, #32]
        hspi2.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002bcc:	6263      	str	r3, [r4, #36]	; 0x24
        hspi2.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002bce:	62a3      	str	r3, [r4, #40]	; 0x28
        hspi2.Init.CRCPolynomial     = 0;
 8002bd0:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f00a f8fe 	bl	800cdd4 <HAL_SPI_Init>
 8002bd8:	b9a8      	cbnz	r0, 8002c06 <SPI_WIFI_Init+0x6a>
        HAL_NVIC_SetPriority((IRQn_Type)DATA_READY_IRQ, SPI_INTERFACE_PRIO, 0x00);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4611      	mov	r1, r2
 8002bde:	2017      	movs	r0, #23
 8002be0:	f006 fb2a 	bl	8009238 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)DATA_READY_IRQ);
 8002be4:	2017      	movs	r0, #23
 8002be6:	f006 fb5d 	bl	80092a4 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority((IRQn_Type)SPI2_IRQn, SPI_INTERFACE_PRIO, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	4611      	mov	r1, r2
 8002bee:	2024      	movs	r0, #36	; 0x24
 8002bf0:	f006 fb22 	bl	8009238 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)SPI2_IRQn);
 8002bf4:	2024      	movs	r0, #36	; 0x24
 8002bf6:	f006 fb55 	bl	80092a4 <HAL_NVIC_EnableIRQ>
        SPI_WIFI_DelayUs(10);
 8002bfa:	200a      	movs	r0, #10
 8002bfc:	f7ff fdd0 	bl	80027a0 <SPI_WIFI_DelayUs>
    rc = SPI_WIFI_ResetModule();
 8002c00:	f7ff fe3c 	bl	800287c <SPI_WIFI_ResetModule>
}
 8002c04:	bd10      	pop	{r4, pc}
            return -1;
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0a:	e7fb      	b.n	8002c04 <SPI_WIFI_Init+0x68>
 8002c0c:	24001a5c 	.word	0x24001a5c
 8002c10:	40003800 	.word	0x40003800

08002c14 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_rx_event)
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_SPI_RxCpltCallback+0x10>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	b113      	cbz	r3, 8002c20 <HAL_SPI_RxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_rx_sem);
        spi_rx_event = 0;
 8002c1a:	4b02      	ldr	r3, [pc, #8]	; (8002c24 <HAL_SPI_RxCpltCallback+0x10>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    }
}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	24002194 	.word	0x24002194

08002c28 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_tx_event)
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_SPI_TxCpltCallback+0x10>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b113      	cbz	r3, 8002c34 <HAL_SPI_TxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_tx_sem);
        spi_tx_event = 0;
 8002c2e:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <HAL_SPI_TxCpltCallback+0x10>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    }
}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	24002198 	.word	0x24002198

08002c3c <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
    if (cmddata_rdy_rising_event == 1)
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SPI_WIFI_ISR+0x14>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d000      	beq.n	8002c46 <SPI_WIFI_ISR+0xa>
    {
        SEM_SIGNAL(cmddata_rdy_rising_sem);
        cmddata_rdy_rising_event = 0;
    }
}
 8002c44:	4770      	bx	lr
        cmddata_rdy_rising_event = 0;
 8002c46:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <SPI_WIFI_ISR+0x14>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	e7fa      	b.n	8002c44 <SPI_WIFI_ISR+0x8>
 8002c4e:	bf00      	nop
 8002c50:	2400218c 	.word	0x2400218c

08002c54 <wait_cmddata_rdy_high>:
{
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002c58:	f006 fac2 	bl	80091e0 <HAL_GetTick>
 8002c5c:	4604      	mov	r4, r0
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c5e:	e001      	b.n	8002c64 <wait_cmddata_rdy_high+0x10>
        SPI_WIFI_ISR();
 8002c60:	f7ff ffec 	bl	8002c3c <SPI_WIFI_ISR>
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c64:	2120      	movs	r1, #32
 8002c66:	4807      	ldr	r0, [pc, #28]	; (8002c84 <wait_cmddata_rdy_high+0x30>)
 8002c68:	f007 f856 	bl	8009d18 <HAL_GPIO_ReadPin>
 8002c6c:	2801      	cmp	r0, #1
 8002c6e:	d007      	beq.n	8002c80 <wait_cmddata_rdy_high+0x2c>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002c70:	f006 fab6 	bl	80091e0 <HAL_GetTick>
 8002c74:	1b00      	subs	r0, r0, r4
 8002c76:	42a8      	cmp	r0, r5
 8002c78:	d9f2      	bls.n	8002c60 <wait_cmddata_rdy_high+0xc>
            return -1;
 8002c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7e:	e000      	b.n	8002c82 <wait_cmddata_rdy_high+0x2e>
    return 0;
 8002c80:	2000      	movs	r0, #0
}
 8002c82:	bd38      	pop	{r3, r4, r5, pc}
 8002c84:	58022000 	.word	0x58022000

08002c88 <SPI_WIFI_SendData>:
{
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	4606      	mov	r6, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	4615      	mov	r5, r2
    if (wait_cmddata_rdy_high(timeout) < 0)
 8002c92:	4610      	mov	r0, r2
 8002c94:	f7ff ffde 	bl	8002c54 <wait_cmddata_rdy_high>
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	db47      	blt.n	8002d2c <SPI_WIFI_SendData+0xa4>
    cmddata_rdy_rising_event = 1;
 8002c9c:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <SPI_WIFI_SendData+0xac>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    WIFI_ENABLE_NSS();
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca8:	4823      	ldr	r0, [pc, #140]	; (8002d38 <SPI_WIFI_SendData+0xb0>)
 8002caa:	f007 f83c 	bl	8009d26 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 8002cae:	200a      	movs	r0, #10
 8002cb0:	f7ff fd76 	bl	80027a0 <SPI_WIFI_DelayUs>
    if (len > 1)
 8002cb4:	2c01      	cmp	r4, #1
 8002cb6:	d805      	bhi.n	8002cc4 <SPI_WIFI_SendData+0x3c>
    if (len & 1)
 8002cb8:	f014 0f01 	tst.w	r4, #1
 8002cbc:	d119      	bne.n	8002cf2 <SPI_WIFI_SendData+0x6a>
    return len;
 8002cbe:	b220      	sxth	r0, r4
}
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
        spi_tx_event = 1;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <SPI_WIFI_SendData+0xb4>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)pdata, len / 2) != HAL_OK)
 8002cca:	fa24 f202 	lsr.w	r2, r4, r2
 8002cce:	4631      	mov	r1, r6
 8002cd0:	481b      	ldr	r0, [pc, #108]	; (8002d40 <SPI_WIFI_SendData+0xb8>)
 8002cd2:	f00a fbf5 	bl	800d4c0 <HAL_SPI_Transmit_IT>
 8002cd6:	b918      	cbnz	r0, 8002ce0 <SPI_WIFI_SendData+0x58>
        wait_spi_tx_event(timeout);
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f7ff fdb9 	bl	8002850 <wait_spi_tx_event>
 8002cde:	e7eb      	b.n	8002cb8 <SPI_WIFI_SendData+0x30>
            WIFI_DISABLE_NSS();
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ce6:	4814      	ldr	r0, [pc, #80]	; (8002d38 <SPI_WIFI_SendData+0xb0>)
 8002ce8:	f007 f81d 	bl	8009d26 <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	e7e6      	b.n	8002cc0 <SPI_WIFI_SendData+0x38>
        Padding[0] = pdata[len - 1];
 8002cf2:	1930      	adds	r0, r6, r4
 8002cf4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002cf8:	f88d 3004 	strb.w	r3, [sp, #4]
        Padding[1] = '\n';
 8002cfc:	230a      	movs	r3, #10
 8002cfe:	f88d 3005 	strb.w	r3, [sp, #5]
        spi_tx_event = 1;
 8002d02:	2201      	movs	r2, #1
 8002d04:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <SPI_WIFI_SendData+0xb4>)
 8002d06:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, Padding, 1) != HAL_OK)
 8002d08:	a901      	add	r1, sp, #4
 8002d0a:	480d      	ldr	r0, [pc, #52]	; (8002d40 <SPI_WIFI_SendData+0xb8>)
 8002d0c:	f00a fbd8 	bl	800d4c0 <HAL_SPI_Transmit_IT>
 8002d10:	b918      	cbnz	r0, 8002d1a <SPI_WIFI_SendData+0x92>
        wait_spi_tx_event(timeout);
 8002d12:	4628      	mov	r0, r5
 8002d14:	f7ff fd9c 	bl	8002850 <wait_spi_tx_event>
 8002d18:	e7d1      	b.n	8002cbe <SPI_WIFI_SendData+0x36>
            WIFI_DISABLE_NSS();
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d20:	4805      	ldr	r0, [pc, #20]	; (8002d38 <SPI_WIFI_SendData+0xb0>)
 8002d22:	f007 f800 	bl	8009d26 <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2a:	e7c9      	b.n	8002cc0 <SPI_WIFI_SendData+0x38>
        return ES_WIFI_ERROR_SPI_FAILED;
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	e7c6      	b.n	8002cc0 <SPI_WIFI_SendData+0x38>
 8002d32:	bf00      	nop
 8002d34:	2400218c 	.word	0x2400218c
 8002d38:	58020000 	.word	0x58020000
 8002d3c:	24002198 	.word	0x24002198
 8002d40:	24001a5c 	.word	0x24001a5c

08002d44 <wifi_probe>:
  * @brief  probe function to register wifi to connectivity framwotk
  * @param  None
  * @retval None
  */
int32_t wifi_probe(void **ll_drv_context)
{
 8002d44:	b510      	push	{r4, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	4604      	mov	r4, r0
    if (ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <wifi_probe+0x2c>)
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <wifi_probe+0x30>)
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <wifi_probe+0x34>)
 8002d54:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <wifi_probe+0x38>)
 8002d56:	490a      	ldr	r1, [pc, #40]	; (8002d80 <wifi_probe+0x3c>)
 8002d58:	480a      	ldr	r0, [pc, #40]	; (8002d84 <wifi_probe+0x40>)
 8002d5a:	f003 fe3d 	bl	80069d8 <ES_WIFI_RegisterBusIO>
 8002d5e:	b918      	cbnz	r0, 8002d68 <wifi_probe+0x24>
                              SPI_WIFI_DeInit,
                              HAL_Delay,
                              SPI_WIFI_SendData,
                              SPI_WIFI_ReceiveData) == 0)
    {
        *ll_drv_context = &EsWifiObj;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <wifi_probe+0x40>)
 8002d62:	6023      	str	r3, [r4, #0]
        return 0;
    }
    return -1;
}
 8002d64:	b002      	add	sp, #8
 8002d66:	bd10      	pop	{r4, pc}
    return -1;
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	e7fa      	b.n	8002d64 <wifi_probe+0x20>
 8002d6e:	bf00      	nop
 8002d70:	08002975 	.word	0x08002975
 8002d74:	08002c89 	.word	0x08002c89
 8002d78:	080091ed 	.word	0x080091ed
 8002d7c:	08002a45 	.word	0x08002a45
 8002d80:	08002b9d 	.word	0x08002b9d
 8002d84:	24001ae4 	.word	0x24001ae4

08002d88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_5)
 8002d88:	2820      	cmp	r0, #32
 8002d8a:	d000      	beq.n	8002d8e <HAL_GPIO_EXTI_Callback+0x6>
  {
    cmddata_rdy_rising_event = 0;
  }
}
 8002d8c:	4770      	bx	lr
    cmddata_rdy_rising_event = 0;
 8002d8e:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x10>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	e7fa      	b.n	8002d8c <HAL_GPIO_EXTI_Callback+0x4>
 8002d96:	bf00      	nop
 8002d98:	2400218c 	.word	0x2400218c

08002d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d9c:	b500      	push	{lr}
 8002d9e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_MspInit+0x30>)
 8002da2:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8002da6:	f042 0202 	orr.w	r2, r2, #2
 8002daa:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8002dae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	f06f 0001 	mvn.w	r0, #1
 8002dc2:	f006 fa39 	bl	8009238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc6:	b003      	add	sp, #12
 8002dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dcc:	58024400 	.word	0x58024400

08002dd0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002dd0:	6802      	ldr	r2, [r0, #0]
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_CRC_MspInit+0x2c>)
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d000      	beq.n	8002dda <HAL_CRC_MspInit+0xa>
 8002dd8:	4770      	bx	lr
{
 8002dda:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_CRC_MspInit+0x30>)
 8002dde:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8002de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002dea:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002df6:	b002      	add	sp, #8
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023000 	.word	0x40023000
 8002e00:	58024400 	.word	0x58024400

08002e04 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002e04:	6802      	ldr	r2, [r0, #0]
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_DMA2D_MspInit+0x40>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d000      	beq.n	8002e0e <HAL_DMA2D_MspInit+0xa>
 8002e0c:	4770      	bx	lr
{
 8002e0e:	b500      	push	{lr}
 8002e10:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_DMA2D_MspInit+0x44>)
 8002e14:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002e18:	f042 0210 	orr.w	r2, r2, #16
 8002e1c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002e20:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2105      	movs	r1, #5
 8002e30:	205a      	movs	r0, #90	; 0x5a
 8002e32:	f006 fa01 	bl	8009238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002e36:	205a      	movs	r0, #90	; 0x5a
 8002e38:	f006 fa34 	bl	80092a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002e3c:	b003      	add	sp, #12
 8002e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e42:	bf00      	nop
 8002e44:	52001000 	.word	0x52001000
 8002e48:	58024400 	.word	0x58024400

08002e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	b0b6      	sub	sp, #216	; 0xd8
 8002e50:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e52:	2100      	movs	r1, #0
 8002e54:	9131      	str	r1, [sp, #196]	; 0xc4
 8002e56:	9132      	str	r1, [sp, #200]	; 0xc8
 8002e58:	9133      	str	r1, [sp, #204]	; 0xcc
 8002e5a:	9134      	str	r1, [sp, #208]	; 0xd0
 8002e5c:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e5e:	22b8      	movs	r2, #184	; 0xb8
 8002e60:	a803      	add	r0, sp, #12
 8002e62:	f01d fc63 	bl	802072c <memset>
  if(hi2c->Instance==I2C4)
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_I2C_MspInit+0x8c>)
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002e6e:	b036      	add	sp, #216	; 0xd8
 8002e70:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002e72:	2310      	movs	r3, #16
 8002e74:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e76:	a803      	add	r0, sp, #12
 8002e78:	f009 f9d0 	bl	800c21c <HAL_RCCEx_PeriphCLKConfig>
 8002e7c:	bb40      	cbnz	r0, 8002ed0 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7e:	4c17      	ldr	r4, [pc, #92]	; (8002edc <HAL_I2C_MspInit+0x90>)
 8002e80:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002e84:	f043 0308 	orr.w	r3, r3, #8
 8002e88:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002e8c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002e98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e9c:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9e:	2312      	movs	r3, #18
 8002ea0:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eae:	a931      	add	r1, sp, #196	; 0xc4
 8002eb0:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <HAL_I2C_MspInit+0x94>)
 8002eb2:	f006 fd79 	bl	80099a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002eb6:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebe:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8002ec2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	9b02      	ldr	r3, [sp, #8]
}
 8002ece:	e7ce      	b.n	8002e6e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002ed0:	f7ff fc4e 	bl	8002770 <Error_Handler>
 8002ed4:	e7d3      	b.n	8002e7e <HAL_I2C_MspInit+0x32>
 8002ed6:	bf00      	nop
 8002ed8:	58001c00 	.word	0x58001c00
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	58020c00 	.word	0x58020c00

08002ee4 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8002ee4:	6802      	ldr	r2, [r0, #0]
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_I2C_MspDeInit+0x34>)
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d000      	beq.n	8002eee <HAL_I2C_MspDeInit+0xa>
 8002eec:	4770      	bx	lr
{
 8002eee:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_I2C_MspDeInit+0x38>)
 8002ef2:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8002ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8002efe:	4c08      	ldr	r4, [pc, #32]	; (8002f20 <HAL_I2C_MspDeInit+0x3c>)
 8002f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f04:	4620      	mov	r0, r4
 8002f06:	f006 fe5f 	bl	8009bc8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8002f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f006 fe5a 	bl	8009bc8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002f14:	bd10      	pop	{r4, pc}
 8002f16:	bf00      	nop
 8002f18:	58001c00 	.word	0x58001c00
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	58020c00 	.word	0x58020c00

08002f24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	b0b8      	sub	sp, #224	; 0xe0
 8002f28:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	9133      	str	r1, [sp, #204]	; 0xcc
 8002f2e:	9134      	str	r1, [sp, #208]	; 0xd0
 8002f30:	9135      	str	r1, [sp, #212]	; 0xd4
 8002f32:	9136      	str	r1, [sp, #216]	; 0xd8
 8002f34:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f36:	22b8      	movs	r2, #184	; 0xb8
 8002f38:	a805      	add	r0, sp, #20
 8002f3a:	f01d fbf7 	bl	802072c <memset>
  if(hltdc->Instance==LTDC)
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_LTDC_MspInit+0x114>)
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d001      	beq.n	8002f4a <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f46:	b038      	add	sp, #224	; 0xe0
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f4a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f4e:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8002f50:	2318      	movs	r3, #24
 8002f52:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8002f54:	23c9      	movs	r3, #201	; 0xc9
 8002f56:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002f5c:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8002f5e:	2315      	movs	r3, #21
 8002f60:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f66:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8002f68:	f241 5356 	movw	r3, #5462	; 0x1556
 8002f6c:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f6e:	a805      	add	r0, sp, #20
 8002f70:	f009 f954 	bl	800c21c <HAL_RCCEx_PeriphCLKConfig>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d15c      	bne.n	8003032 <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_LTDC_MspInit+0x118>)
 8002f7a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002f7e:	f042 0208 	orr.w	r2, r2, #8
 8002f82:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8002f86:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002f8a:	f002 0208 	and.w	r2, r2, #8
 8002f8e:	9201      	str	r2, [sp, #4]
 8002f90:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f92:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002f96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f9a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002f9e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fa2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002fa6:	9202      	str	r2, [sp, #8]
 8002fa8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002faa:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fb6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fba:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002fbe:	9203      	str	r2, [sp, #12]
 8002fc0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fc2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	9304      	str	r3, [sp, #16]
 8002fd8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8002fda:	23ff      	movs	r3, #255	; 0xff
 8002fdc:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2602      	movs	r6, #2
 8002fe0:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2400      	movs	r4, #0
 8002fe4:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fe8:	250e      	movs	r5, #14
 8002fea:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002fec:	a933      	add	r1, sp, #204	; 0xcc
 8002fee:	4814      	ldr	r0, [pc, #80]	; (8003040 <HAL_LTDC_MspInit+0x11c>)
 8002ff0:	f006 fcda 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8002ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ff8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003000:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003002:	a933      	add	r1, sp, #204	; 0xcc
 8003004:	480f      	ldr	r0, [pc, #60]	; (8003044 <HAL_LTDC_MspInit+0x120>)
 8003006:	f006 fccf 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 800300a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800300e:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003016:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003018:	a933      	add	r1, sp, #204	; 0xcc
 800301a:	480b      	ldr	r0, [pc, #44]	; (8003048 <HAL_LTDC_MspInit+0x124>)
 800301c:	f006 fcc4 	bl	80099a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003020:	4622      	mov	r2, r4
 8003022:	2105      	movs	r1, #5
 8003024:	2058      	movs	r0, #88	; 0x58
 8003026:	f006 f907 	bl	8009238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800302a:	2058      	movs	r0, #88	; 0x58
 800302c:	f006 f93a 	bl	80092a4 <HAL_NVIC_EnableIRQ>
}
 8003030:	e789      	b.n	8002f46 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 8003032:	f7ff fb9d 	bl	8002770 <Error_Handler>
 8003036:	e79f      	b.n	8002f78 <HAL_LTDC_MspInit+0x54>
 8003038:	50001000 	.word	0x50001000
 800303c:	58024400 	.word	0x58024400
 8003040:	58022800 	.word	0x58022800
 8003044:	58022400 	.word	0x58022400
 8003048:	58022000 	.word	0x58022000

0800304c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800304c:	b510      	push	{r4, lr}
 800304e:	b0b0      	sub	sp, #192	; 0xc0
 8003050:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003052:	22b8      	movs	r2, #184	; 0xb8
 8003054:	2100      	movs	r1, #0
 8003056:	a802      	add	r0, sp, #8
 8003058:	f01d fb68 	bl	802072c <memset>
  if(hospi->Instance==OCTOSPI1)
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_OSPI_MspInit+0x8c>)
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003064:	b030      	add	sp, #192	; 0xc0
 8003066:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800306c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800306e:	2318      	movs	r3, #24
 8003070:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8003072:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003076:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003078:	2302      	movs	r3, #2
 800307a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800307c:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800307e:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003080:	2320      	movs	r3, #32
 8003082:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003084:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003086:	a802      	add	r0, sp, #8
 8003088:	f009 f8c8 	bl	800c21c <HAL_RCCEx_PeriphCLKConfig>
 800308c:	bb08      	cbnz	r0, 80030d2 <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HAL_OSPI_MspInit+0x90>)
 8003090:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003094:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003098:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800309c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030a4:	9200      	str	r2, [sp, #0]
 80030a6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80030a8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80030b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80030b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80030c0:	2200      	movs	r2, #0
 80030c2:	2105      	movs	r1, #5
 80030c4:	205c      	movs	r0, #92	; 0x5c
 80030c6:	f006 f8b7 	bl	8009238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80030ca:	205c      	movs	r0, #92	; 0x5c
 80030cc:	f006 f8ea 	bl	80092a4 <HAL_NVIC_EnableIRQ>
}
 80030d0:	e7c8      	b.n	8003064 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80030d2:	f7ff fb4d 	bl	8002770 <Error_Handler>
 80030d6:	e7da      	b.n	800308e <HAL_OSPI_MspInit+0x42>
 80030d8:	52005000 	.word	0x52005000
 80030dc:	58024400 	.word	0x58024400

080030e0 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80030e0:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80030e2:	6802      	ldr	r2, [r0, #0]
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_OSPI_MspDeInit+0x30>)
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d000      	beq.n	80030ec <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80030ea:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_OSPI_MspDeInit+0x34>)
 80030ee:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030f2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80030f6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80030fa:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003102:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8003106:	205c      	movs	r0, #92	; 0x5c
 8003108:	f006 f8da 	bl	80092c0 <HAL_NVIC_DisableIRQ>
}
 800310c:	e7ed      	b.n	80030ea <HAL_OSPI_MspDeInit+0xa>
 800310e:	bf00      	nop
 8003110:	52005000 	.word	0x52005000
 8003114:	58024400 	.word	0x58024400

08003118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	b0b6      	sub	sp, #216	; 0xd8
 800311c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311e:	2100      	movs	r1, #0
 8003120:	9131      	str	r1, [sp, #196]	; 0xc4
 8003122:	9132      	str	r1, [sp, #200]	; 0xc8
 8003124:	9133      	str	r1, [sp, #204]	; 0xcc
 8003126:	9134      	str	r1, [sp, #208]	; 0xd0
 8003128:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800312a:	22b8      	movs	r2, #184	; 0xb8
 800312c:	a803      	add	r0, sp, #12
 800312e:	f01d fafd 	bl	802072c <memset>
  if(hspi->Instance==SPI2)
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_SPI_MspInit+0xc8>)
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800313a:	b036      	add	sp, #216	; 0xd8
 800313c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003142:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003144:	a803      	add	r0, sp, #12
 8003146:	f009 f869 	bl	800c21c <HAL_RCCEx_PeriphCLKConfig>
 800314a:	2800      	cmp	r0, #0
 800314c:	d145      	bne.n	80031da <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800314e:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_SPI_MspInit+0xcc>)
 8003150:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003158:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800315c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003160:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003164:	9200      	str	r2, [sp, #0]
 8003166:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003168:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003174:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003178:	f002 0201 	and.w	r2, r2, #1
 800317c:	9201      	str	r2, [sp, #4]
 800317e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003180:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003184:	f042 0204 	orr.w	r2, r2, #4
 8003188:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800318c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	9302      	str	r3, [sp, #8]
 8003196:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800319c:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2602      	movs	r6, #2
 80031a0:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2400      	movs	r4, #0
 80031a4:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031a8:	2505      	movs	r5, #5
 80031aa:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ac:	a931      	add	r1, sp, #196	; 0xc4
 80031ae:	480e      	ldr	r0, [pc, #56]	; (80031e8 <HAL_SPI_MspInit+0xd0>)
 80031b0:	f006 fbfa 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031b4:	230c      	movs	r3, #12
 80031b6:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031bc:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031be:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c0:	a931      	add	r1, sp, #196	; 0xc4
 80031c2:	480a      	ldr	r0, [pc, #40]	; (80031ec <HAL_SPI_MspInit+0xd4>)
 80031c4:	f006 fbf0 	bl	80099a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80031c8:	4622      	mov	r2, r4
 80031ca:	4621      	mov	r1, r4
 80031cc:	2024      	movs	r0, #36	; 0x24
 80031ce:	f006 f833 	bl	8009238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031d2:	2024      	movs	r0, #36	; 0x24
 80031d4:	f006 f866 	bl	80092a4 <HAL_NVIC_EnableIRQ>
}
 80031d8:	e7af      	b.n	800313a <HAL_SPI_MspInit+0x22>
      Error_Handler();
 80031da:	f7ff fac9 	bl	8002770 <Error_Handler>
 80031de:	e7b6      	b.n	800314e <HAL_SPI_MspInit+0x36>
 80031e0:	40003800 	.word	0x40003800
 80031e4:	58024400 	.word	0x58024400
 80031e8:	58020000 	.word	0x58020000
 80031ec:	58020800 	.word	0x58020800

080031f0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80031f0:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 80031f2:	6802      	ldr	r2, [r0, #0]
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_SPI_MspDeInit+0x34>)
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d000      	beq.n	80031fc <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80031fa:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <HAL_SPI_MspDeInit+0x38>)
 80031fe:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 8003202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003206:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 800320a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800320e:	4807      	ldr	r0, [pc, #28]	; (800322c <HAL_SPI_MspDeInit+0x3c>)
 8003210:	f006 fcda 	bl	8009bc8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8003214:	210c      	movs	r1, #12
 8003216:	4806      	ldr	r0, [pc, #24]	; (8003230 <HAL_SPI_MspDeInit+0x40>)
 8003218:	f006 fcd6 	bl	8009bc8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 800321c:	2024      	movs	r0, #36	; 0x24
 800321e:	f006 f84f 	bl	80092c0 <HAL_NVIC_DisableIRQ>
}
 8003222:	e7ea      	b.n	80031fa <HAL_SPI_MspDeInit+0xa>
 8003224:	40003800 	.word	0x40003800
 8003228:	58024400 	.word	0x58024400
 800322c:	58020000 	.word	0x58020000
 8003230:	58020800 	.word	0x58020800

08003234 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003234:	280f      	cmp	r0, #15
 8003236:	d901      	bls.n	800323c <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800323a:	4770      	bx	lr
{
 800323c:	b510      	push	{r4, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003242:	2200      	movs	r2, #0
 8003244:	4601      	mov	r1, r0
 8003246:	2036      	movs	r0, #54	; 0x36
 8003248:	f005 fff6 	bl	8009238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800324c:	2036      	movs	r0, #54	; 0x36
 800324e:	f006 f829 	bl	80092a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_InitTick+0x88>)
 8003254:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_InitTick+0x8c>)
 8003258:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800325c:	f042 0210 	orr.w	r2, r2, #16
 8003260:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003264:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003270:	a901      	add	r1, sp, #4
 8003272:	a802      	add	r0, sp, #8
 8003274:	f008 fe9c 	bl	800bfb0 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003278:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800327a:	b9bb      	cbnz	r3, 80032ac <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800327c:	f008 fe74 	bl	800bf68 <HAL_RCC_GetPCLK1Freq>
 8003280:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003282:	4810      	ldr	r0, [pc, #64]	; (80032c4 <HAL_InitTick+0x90>)
 8003284:	fba0 2303 	umull	r2, r3, r0, r3
 8003288:	0c9b      	lsrs	r3, r3, #18
 800328a:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 800328c:	480e      	ldr	r0, [pc, #56]	; (80032c8 <HAL_InitTick+0x94>)
 800328e:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_InitTick+0x98>)
 8003290:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003292:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003296:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003298:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329e:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80032a0:	f00a fdea 	bl	800de78 <HAL_TIM_Base_Init>
 80032a4:	b130      	cbz	r0, 80032b4 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80032a6:	2001      	movs	r0, #1
}
 80032a8:	b00a      	add	sp, #40	; 0x28
 80032aa:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032ac:	f008 fe5c 	bl	800bf68 <HAL_RCC_GetPCLK1Freq>
 80032b0:	0043      	lsls	r3, r0, #1
 80032b2:	e7e6      	b.n	8003282 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <HAL_InitTick+0x94>)
 80032b6:	f00a fc43 	bl	800db40 <HAL_TIM_Base_Start_IT>
 80032ba:	e7f5      	b.n	80032a8 <HAL_InitTick+0x74>
 80032bc:	2400007c 	.word	0x2400007c
 80032c0:	58024400 	.word	0x58024400
 80032c4:	431bde83 	.word	0x431bde83
 80032c8:	2400219c 	.word	0x2400219c
 80032cc:	40001000 	.word	0x40001000

080032d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032d0:	4770      	bx	lr

080032d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <HardFault_Handler>

080032d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <MemManage_Handler>

080032d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <BusFault_Handler>

080032d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d8:	e7fe      	b.n	80032d8 <UsageFault_Handler>

080032da <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032da:	4770      	bx	lr

080032dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_DATRDY_Pin);
 80032de:	2020      	movs	r0, #32
 80032e0:	f006 fd30 	bl	8009d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032e4:	bd08      	pop	{r3, pc}
	...

080032e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80032e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80032ea:	4802      	ldr	r0, [pc, #8]	; (80032f4 <SPI2_IRQHandler+0xc>)
 80032ec:	f00a fafa 	bl	800d8e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80032f0:	bd08      	pop	{r3, pc}
 80032f2:	bf00      	nop
 80032f4:	24001a5c 	.word	0x24001a5c

080032f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_Pin);
 80032fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032fe:	f006 fd21 	bl	8009d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003302:	bd08      	pop	{r3, pc}

08003304 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003306:	4802      	ldr	r0, [pc, #8]	; (8003310 <TIM6_DAC_IRQHandler+0xc>)
 8003308:	f00a fc66 	bl	800dbd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	2400219c 	.word	0x2400219c

08003314 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003316:	4802      	ldr	r0, [pc, #8]	; (8003320 <LTDC_IRQHandler+0xc>)
 8003318:	f007 fac0 	bl	800a89c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800331c:	bd08      	pop	{r3, pc}
 800331e:	bf00      	nop
 8003320:	24001958 	.word	0x24001958

08003324 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003326:	4802      	ldr	r0, [pc, #8]	; (8003330 <DMA2D_IRQHandler+0xc>)
 8003328:	f006 fa1e 	bl	8009768 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800332c:	bd08      	pop	{r3, pc}
 800332e:	bf00      	nop
 8003330:	240018a4 	.word	0x240018a4

08003334 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003336:	4802      	ldr	r0, [pc, #8]	; (8003340 <OCTOSPI1_IRQHandler+0xc>)
 8003338:	f007 feba 	bl	800b0b0 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800333c:	bd08      	pop	{r3, pc}
 800333e:	bf00      	nop
 8003340:	24001a00 	.word	0x24001a00

08003344 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003344:	2001      	movs	r0, #1
 8003346:	4770      	bx	lr

08003348 <_kill>:

int _kill(int pid, int sig)
{
 8003348:	b508      	push	{r3, lr}
	errno = EINVAL;
 800334a:	f01d f88b 	bl	8020464 <__errno>
 800334e:	2316      	movs	r3, #22
 8003350:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003352:	f04f 30ff 	mov.w	r0, #4294967295
 8003356:	bd08      	pop	{r3, pc}

08003358 <_exit>:

void _exit (int status)
{
 8003358:	b508      	push	{r3, lr}
	_kill(status, -1);
 800335a:	f04f 31ff 	mov.w	r1, #4294967295
 800335e:	f7ff fff3 	bl	8003348 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003362:	e7fe      	b.n	8003362 <_exit+0xa>

08003364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	460c      	mov	r4, r1
 8003368:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336a:	2500      	movs	r5, #0
 800336c:	e006      	b.n	800337c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800336e:	f3af 8000 	nop.w
 8003372:	4621      	mov	r1, r4
 8003374:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003378:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800337a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337c:	42b5      	cmp	r5, r6
 800337e:	dbf6      	blt.n	800336e <_read+0xa>
	}

return len;
}
 8003380:	4630      	mov	r0, r6
 8003382:	bd70      	pop	{r4, r5, r6, pc}

08003384 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	460c      	mov	r4, r1
 8003388:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338a:	2500      	movs	r5, #0
 800338c:	e004      	b.n	8003398 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800338e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003392:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003396:	3501      	adds	r5, #1
 8003398:	42b5      	cmp	r5, r6
 800339a:	dbf8      	blt.n	800338e <_write+0xa>
	}
	return len;
}
 800339c:	4630      	mov	r0, r6
 800339e:	bd70      	pop	{r4, r5, r6, pc}

080033a0 <_close>:

int _close(int file)
{
	return -1;
}
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	4770      	bx	lr

080033a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80033a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033aa:	604b      	str	r3, [r1, #4]
	return 0;
}
 80033ac:	2000      	movs	r0, #0
 80033ae:	4770      	bx	lr

080033b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80033b0:	2001      	movs	r0, #1
 80033b2:	4770      	bx	lr

080033b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80033b4:	2000      	movs	r0, #0
 80033b6:	4770      	bx	lr

080033b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80033b8:	b508      	push	{r3, lr}
 80033ba:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033bc:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <_sbrk+0x34>)
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	b142      	cbz	r2, 80033d4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80033c2:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <_sbrk+0x34>)
 80033c4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80033c6:	4403      	add	r3, r0
 80033c8:	466a      	mov	r2, sp
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d806      	bhi.n	80033dc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80033ce:	4a07      	ldr	r2, [pc, #28]	; (80033ec <_sbrk+0x34>)
 80033d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80033d2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80033d4:	4a05      	ldr	r2, [pc, #20]	; (80033ec <_sbrk+0x34>)
 80033d6:	4906      	ldr	r1, [pc, #24]	; (80033f0 <_sbrk+0x38>)
 80033d8:	6011      	str	r1, [r2, #0]
 80033da:	e7f2      	b.n	80033c2 <_sbrk+0xa>
		errno = ENOMEM;
 80033dc:	f01d f842 	bl	8020464 <__errno>
 80033e0:	230c      	movs	r3, #12
 80033e2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295
 80033e8:	e7f3      	b.n	80033d2 <_sbrk+0x1a>
 80033ea:	bf00      	nop
 80033ec:	240021e8 	.word	0x240021e8
 80033f0:	2400ca78 	.word	0x2400ca78

080033f4 <wifi_networkInit>:
  * @brief  Network interface initialization
  * @param  none
  * @retval 0 in case of success, an error code otherwise
  */
static int wifi_networkInit(void)
{
 80033f4:	b510      	push	{r4, lr}
  if (net_if_init(&netif, es_wifi_driver_ptr, &net_handler) != NET_OK)
 80033f6:	4a10      	ldr	r2, [pc, #64]	; (8003438 <wifi_networkInit+0x44>)
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <wifi_networkInit+0x48>)
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	4810      	ldr	r0, [pc, #64]	; (8003440 <wifi_networkInit+0x4c>)
 80033fe:	f00d fa21 	bl	8010844 <net_if_init>
 8003402:	b998      	cbnz	r0, 800342c <wifi_networkInit+0x38>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_INITIALIZED,STATE_TRANSITION_TIMEOUT);
 8003404:	4c0e      	ldr	r4, [pc, #56]	; (8003440 <wifi_networkInit+0x4c>)
 8003406:	f242 7210 	movw	r2, #10000	; 0x2710
 800340a:	2101      	movs	r1, #1
 800340c:	4620      	mov	r0, r4
 800340e:	f00d f9f2 	bl	80107f6 <net_if_wait_state>
  if ( net_if_start (&netif) != NET_OK )
 8003412:	4620      	mov	r0, r4
 8003414:	f00d fa2b 	bl	801086e <net_if_start>
 8003418:	4604      	mov	r4, r0
 800341a:	b950      	cbnz	r0, 8003432 <wifi_networkInit+0x3e>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_READY,STATE_TRANSITION_TIMEOUT);
 800341c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003420:	2103      	movs	r1, #3
 8003422:	4807      	ldr	r0, [pc, #28]	; (8003440 <wifi_networkInit+0x4c>)
 8003424:	f00d f9e7 	bl	80107f6 <net_if_wait_state>

  return 0;
}
 8003428:	4620      	mov	r0, r4
 800342a:	bd10      	pop	{r4, pc}
    return -1;
 800342c:	f04f 34ff 	mov.w	r4, #4294967295
 8003430:	e7fa      	b.n	8003428 <wifi_networkInit+0x34>
    return -1;
 8003432:	f04f 34ff 	mov.w	r4, #4294967295
 8003436:	e7f7      	b.n	8003428 <wifi_networkInit+0x34>
 8003438:	240023f4 	.word	0x240023f4
 800343c:	2400000c 	.word	0x2400000c
 8003440:	240023fc 	.word	0x240023fc

08003444 <wifi_initialise>:
  * @brief  Initializes module wifi network interface
  * @param  none
  * @retval none
  */
void wifi_initialise(void)
{
 8003444:	b508      	push	{r3, lr}
    wifi_networkInit();
 8003446:	f7ff ffd5 	bl	80033f4 <wifi_networkInit>
}
 800344a:	bd08      	pop	{r3, pc}

0800344c <wifi_scan>:
  * @brief  Get available access points
  * @param  APs: pointer Access points structure
  * @retval ES Wifi status
  */
int32_t wifi_scan(net_wifi_scan_results_t *APs)
{
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4604      	mov	r4, r0
  int32_t ret;
  ret = net_wifi_scan(&netif,NET_WIFI_SCAN_PASSIVE,NULL);
 8003450:	2200      	movs	r2, #0
 8003452:	4611      	mov	r1, r2
 8003454:	4807      	ldr	r0, [pc, #28]	; (8003474 <wifi_scan+0x28>)
 8003456:	f00d f961 	bl	801071c <net_wifi_scan>
  if (ret == NET_OK)
 800345a:	4605      	mov	r5, r0
 800345c:	b108      	cbz	r0, 8003462 <wifi_scan+0x16>
  {
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
    if (ret > 0) ret= NET_OK;
  }
  return ret;
}
 800345e:	4628      	mov	r0, r5
 8003460:	bd38      	pop	{r3, r4, r5, pc}
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8003462:	220a      	movs	r2, #10
 8003464:	4621      	mov	r1, r4
 8003466:	4803      	ldr	r0, [pc, #12]	; (8003474 <wifi_scan+0x28>)
 8003468:	f00d f972 	bl	8010750 <net_wifi_get_scan_results>
    if (ret > 0) ret= NET_OK;
 800346c:	2800      	cmp	r0, #0
 800346e:	dcf6      	bgt.n	800345e <wifi_scan+0x12>
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8003470:	4605      	mov	r5, r0
  return ret;
 8003472:	e7f4      	b.n	800345e <wifi_scan+0x12>
 8003474:	240023fc 	.word	0x240023fc

08003478 <wifi_connect>:
  * @param  password:  access point password
  * @param  encryption : security mode
  * @retval 0 in case of success, an error code otherwise
  */
int8_t wifi_connect(char *ssid, uint8_t *password, int32_t encryption )
{  
 8003478:	b500      	push	{lr}
 800347a:	b085      	sub	sp, #20
  net_wifi_credentials_t  Credentials = 
 800347c:	9001      	str	r0, [sp, #4]
 800347e:	9102      	str	r1, [sp, #8]
 8003480:	9203      	str	r2, [sp, #12]
    (char const*) ssid,
    (char const*)password,
    encryption
  };
  
  if (net_wifi_set_credentials(&netif, &Credentials) != NET_OK)
 8003482:	a901      	add	r1, sp, #4
 8003484:	4813      	ldr	r0, [pc, #76]	; (80034d4 <wifi_connect+0x5c>)
 8003486:	f00d f979 	bl	801077c <net_wifi_set_credentials>
 800348a:	b9e8      	cbnz	r0, 80034c8 <wifi_connect+0x50>
  {
    return -1;
  }
  
  if (netif.state == NET_STATE_CONNECTING )
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <wifi_connect+0x5c>)
 800348e:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8003492:	2b04      	cmp	r3, #4
 8003494:	d00b      	beq.n	80034ae <wifi_connect+0x36>
  {
    netif.state = NET_STATE_CONNECTED ; 
  }
    
  if (netif.state == NET_STATE_CONNECTED ) 
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <wifi_connect+0x5c>)
 8003498:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 800349c:	2b05      	cmp	r3, #5
 800349e:	d00b      	beq.n	80034b8 <wifi_connect+0x40>
    {
      return  -1;
    }
  }
  
  if(net_if_connect (&netif) != NET_OK)
 80034a0:	480c      	ldr	r0, [pc, #48]	; (80034d4 <wifi_connect+0x5c>)
 80034a2:	f00d f9e9 	bl	8010878 <net_if_connect>
 80034a6:	b990      	cbnz	r0, 80034ce <wifi_connect+0x56>
  {
    return -1;
  }

  return NET_OK;
}
 80034a8:	b005      	add	sp, #20
 80034aa:	f85d fb04 	ldr.w	pc, [sp], #4
    netif.state = NET_STATE_CONNECTED ; 
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <wifi_connect+0x5c>)
 80034b0:	2205      	movs	r2, #5
 80034b2:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80034b6:	e7ee      	b.n	8003496 <wifi_connect+0x1e>
    if(net_if_disconnect(&netif)!= NET_OK)
 80034b8:	4806      	ldr	r0, [pc, #24]	; (80034d4 <wifi_connect+0x5c>)
 80034ba:	f00d f9e2 	bl	8010882 <net_if_disconnect>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d0ee      	beq.n	80034a0 <wifi_connect+0x28>
      return  -1;
 80034c2:	f04f 30ff 	mov.w	r0, #4294967295
 80034c6:	e7ef      	b.n	80034a8 <wifi_connect+0x30>
    return -1;
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	e7ec      	b.n	80034a8 <wifi_connect+0x30>
    return -1;
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295
 80034d2:	e7e9      	b.n	80034a8 <wifi_connect+0x30>
 80034d4:	240023fc 	.word	0x240023fc

080034d8 <esWiFi_Task>:
 * WiFi Task
 * - Handle requests from GUI task
 * - Return status to GUI task
 */
void esWiFi_Task(void *argument)
{
 80034d8:	b500      	push	{lr}
 80034da:	b083      	sub	sp, #12
    uint8_t msg;
    uint8_t retvalue;

    wifi_scan(&APs[0]);
 80034dc:	4824      	ldr	r0, [pc, #144]	; (8003570 <esWiFi_Task+0x98>)
 80034de:	f7ff ffb5 	bl	800344c <wifi_scan>
 80034e2:	e015      	b.n	8003510 <esWiFi_Task+0x38>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);

        switch(msg)
        {
            case UPDATE_WIFI_AP:
                memset(&APs, 0, sizeof(APs));
 80034e4:	4c22      	ldr	r4, [pc, #136]	; (8003570 <esWiFi_Task+0x98>)
 80034e6:	f44f 7202 	mov.w	r2, #520	; 0x208
 80034ea:	2100      	movs	r1, #0
 80034ec:	4620      	mov	r0, r4
 80034ee:	f01d f91d 	bl	802072c <memset>

                if(wifi_scan(&APs[0]) == NET_OK)
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff ffaa 	bl	800344c <wifi_scan>
 80034f8:	b950      	cbnz	r0, 8003510 <esWiFi_Task+0x38>
                {
                    retvalue = UPDATE_WIFI_AP_DONE;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 8003500:	2300      	movs	r3, #0
 8003502:	461a      	mov	r2, r3
 8003504:	f10d 0106 	add.w	r1, sp, #6
 8003508:	481a      	ldr	r0, [pc, #104]	; (8003574 <esWiFi_Task+0x9c>)
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	f00a fe8b 	bl	800e226 <osMessageQueuePut>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);
 8003510:	f04f 33ff 	mov.w	r3, #4294967295
 8003514:	2200      	movs	r2, #0
 8003516:	f10d 0107 	add.w	r1, sp, #7
 800351a:	4817      	ldr	r0, [pc, #92]	; (8003578 <esWiFi_Task+0xa0>)
 800351c:	6800      	ldr	r0, [r0, #0]
 800351e:	f00a fec2 	bl	800e2a6 <osMessageQueueGet>
        switch(msg)
 8003522:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0dc      	beq.n	80034e4 <esWiFi_Task+0xc>
 800352a:	2b02      	cmp	r3, #2
 800352c:	d1f0      	bne.n	8003510 <esWiFi_Task+0x38>
                }
            break;

            case CONNECTING_TO_WIFI:
                if(wifi_connect((char*)ssid_ascii, password_ascii, net_wifi_string_to_security((char*)encryption_ascii)) != NET_OK)
 800352e:	4813      	ldr	r0, [pc, #76]	; (800357c <esWiFi_Task+0xa4>)
 8003530:	f00d f832 	bl	8010598 <net_wifi_string_to_security>
 8003534:	4602      	mov	r2, r0
 8003536:	4912      	ldr	r1, [pc, #72]	; (8003580 <esWiFi_Task+0xa8>)
 8003538:	4812      	ldr	r0, [pc, #72]	; (8003584 <esWiFi_Task+0xac>)
 800353a:	f7ff ff9d 	bl	8003478 <wifi_connect>
 800353e:	b158      	cbz	r0, 8003558 <esWiFi_Task+0x80>
                {
                    retvalue = CONNECTING_TO_WIFI_ERROR;
 8003540:	2304      	movs	r3, #4
 8003542:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8003546:	2300      	movs	r3, #0
 8003548:	461a      	mov	r2, r3
 800354a:	f10d 0106 	add.w	r1, sp, #6
 800354e:	4809      	ldr	r0, [pc, #36]	; (8003574 <esWiFi_Task+0x9c>)
 8003550:	6800      	ldr	r0, [r0, #0]
 8003552:	f00a fe68 	bl	800e226 <osMessageQueuePut>
 8003556:	e7db      	b.n	8003510 <esWiFi_Task+0x38>
                }
                else
                {
                    retvalue = CONNECTING_TO_WIFI_OK;
 8003558:	2303      	movs	r3, #3
 800355a:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 800355e:	2300      	movs	r3, #0
 8003560:	461a      	mov	r2, r3
 8003562:	f10d 0106 	add.w	r1, sp, #6
 8003566:	4803      	ldr	r0, [pc, #12]	; (8003574 <esWiFi_Task+0x9c>)
 8003568:	6800      	ldr	r0, [r0, #0]
 800356a:	f00a fe5c 	bl	800e226 <osMessageQueuePut>
 800356e:	e7cf      	b.n	8003510 <esWiFi_Task+0x38>
 8003570:	240021ec 	.word	0x240021ec
 8003574:	24001870 	.word	0x24001870
 8003578:	24001878 	.word	0x24001878
 800357c:	240029b4 	.word	0x240029b4
 8003580:	240029d4 	.word	0x240029d4
 8003584:	24002a14 	.word	0x24002a14

08003588 <_ZN23ApplicationFontProviderD1Ev>:
 8003588:	4a02      	ldr	r2, [pc, #8]	; (8003594 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 800358a:	6002      	str	r2, [r0, #0]
 800358c:	4a02      	ldr	r2, [pc, #8]	; (8003598 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 800358e:	6002      	str	r2, [r0, #0]
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	08022458 	.word	0x08022458
 8003598:	080220b4 	.word	0x080220b4

0800359c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800359c:	b508      	push	{r3, lr}
    switch (typography)
 800359e:	2905      	cmp	r1, #5
 80035a0:	d81c      	bhi.n	80035dc <_ZN23ApplicationFontProvider7getFontEt+0x40>
 80035a2:	e8df f001 	tbb	[pc, r1]
 80035a6:	0703      	.short	0x0703
 80035a8:	17130f0b 	.word	0x17130f0b
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80035ac:	f000 feee 	bl	800438c <_ZN17TypedTextDatabase8getFontsEv>
 80035b0:	6800      	ldr	r0, [r0, #0]
        // verdana_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
    default:
        return 0;
    }
}
 80035b2:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80035b4:	f000 feea 	bl	800438c <_ZN17TypedTextDatabase8getFontsEv>
 80035b8:	6840      	ldr	r0, [r0, #4]
 80035ba:	e7fa      	b.n	80035b2 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80035bc:	f000 fee6 	bl	800438c <_ZN17TypedTextDatabase8getFontsEv>
 80035c0:	6880      	ldr	r0, [r0, #8]
 80035c2:	e7f6      	b.n	80035b2 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80035c4:	f000 fee2 	bl	800438c <_ZN17TypedTextDatabase8getFontsEv>
 80035c8:	68c0      	ldr	r0, [r0, #12]
 80035ca:	e7f2      	b.n	80035b2 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80035cc:	f000 fede 	bl	800438c <_ZN17TypedTextDatabase8getFontsEv>
 80035d0:	6900      	ldr	r0, [r0, #16]
 80035d2:	e7ee      	b.n	80035b2 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80035d4:	f000 feda 	bl	800438c <_ZN17TypedTextDatabase8getFontsEv>
 80035d8:	6900      	ldr	r0, [r0, #16]
 80035da:	e7ea      	b.n	80035b2 <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 80035dc:	2000      	movs	r0, #0
 80035de:	e7e8      	b.n	80035b2 <_ZN23ApplicationFontProvider7getFontEt+0x16>

080035e0 <_ZN23ApplicationFontProviderD0Ev>:
 80035e0:	b510      	push	{r4, lr}
 80035e2:	4604      	mov	r4, r0
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 80035e6:	6003      	str	r3, [r0, #0]
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 80035ea:	6003      	str	r3, [r0, #0]
 80035ec:	2104      	movs	r1, #4
 80035ee:	f01c fed8 	bl	80203a2 <_ZdlPvj>
 80035f2:	4620      	mov	r0, r4
 80035f4:	bd10      	pop	{r4, pc}
 80035f6:	bf00      	nop
 80035f8:	08022458 	.word	0x08022458
 80035fc:	080220b4 	.word	0x080220b4

08003600 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003600:	4800      	ldr	r0, [pc, #0]	; (8003604 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003602:	4770      	bx	lr
 8003604:	08022464 	.word	0x08022464

08003608 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003608:	2008      	movs	r0, #8
 800360a:	4770      	bx	lr

0800360c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 800360c:	b169      	cbz	r1, 800362a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800360e:	b510      	push	{r4, lr}
 8003610:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003616:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800361a:	6803      	ldr	r3, [r0, #0]
 800361c:	689c      	ldr	r4, [r3, #8]
 800361e:	f10d 0303 	add.w	r3, sp, #3
 8003622:	aa01      	add	r2, sp, #4
 8003624:	47a0      	blx	r4
        return glyph;
    }
 8003626:	b002      	add	sp, #8
 8003628:	bd10      	pop	{r4, pc}
            return 0;
 800362a:	2000      	movs	r0, #0
    }
 800362c:	4770      	bx	lr

0800362e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800362e:	8940      	ldrh	r0, [r0, #10]
 8003630:	4770      	bx	lr

08003632 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003632:	8980      	ldrh	r0, [r0, #12]
 8003634:	4770      	bx	lr

08003636 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003636:	8880      	ldrh	r0, [r0, #4]
 8003638:	4770      	bx	lr

0800363a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800363a:	8883      	ldrh	r3, [r0, #4]
 800363c:	7980      	ldrb	r0, [r0, #6]
 800363e:	4418      	add	r0, r3
    }
 8003640:	b280      	uxth	r0, r0
 8003642:	4770      	bx	lr

08003644 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003644:	79c0      	ldrb	r0, [r0, #7]
    }
 8003646:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800364a:	4770      	bx	lr

0800364c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800364c:	79c0      	ldrb	r0, [r0, #7]
    }
 800364e:	09c0      	lsrs	r0, r0, #7
 8003650:	4770      	bx	lr
	...

08003654 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8003654:	4b01      	ldr	r3, [pc, #4]	; (800365c <_ZN8touchgfx10TransitionD1Ev+0x8>)
 8003656:	6003      	str	r3, [r0, #0]
    }
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	08022838 	.word	0x08022838

08003660 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 8003660:	4770      	bx	lr

08003662 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003662:	4770      	bx	lr

08003664 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003664:	4770      	bx	lr

08003666 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003666:	6041      	str	r1, [r0, #4]
    }
 8003668:	4770      	bx	lr

0800366a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800366a:	2301      	movs	r3, #1
 800366c:	7203      	strb	r3, [r0, #8]
    }
 800366e:	4770      	bx	lr

08003670 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003670:	4a02      	ldr	r2, [pc, #8]	; (800367c <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 8003672:	6002      	str	r2, [r0, #0]
    {
 8003674:	4a02      	ldr	r2, [pc, #8]	; (8003680 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 8003676:	6002      	str	r2, [r0, #0]
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	0802285c 	.word	0x0802285c
 8003680:	08022838 	.word	0x08022838

08003684 <_Z41__static_initialization_and_destruction_0ii>:
}

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
 8003684:	2801      	cmp	r0, #1
 8003686:	d006      	beq.n	8003696 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8003688:	b920      	cbnz	r0, 8003694 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800368a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800368e:	4299      	cmp	r1, r3
 8003690:	f000 8222 	beq.w	8003ad8 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8003694:	4770      	bx	lr
 8003696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800369a:	4299      	cmp	r1, r3
 800369c:	d1f4      	bne.n	8003688 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800369e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80036a2:	4bf0      	ldr	r3, [pc, #960]	; (8003a64 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80036a8:	240c      	movs	r4, #12
 80036aa:	805c      	strh	r4, [r3, #2]
 80036ac:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80036b0:	f8a3 e004 	strh.w	lr, [r3, #4]
 80036b4:	2224      	movs	r2, #36	; 0x24
 80036b6:	80da      	strh	r2, [r3, #6]
 80036b8:	811a      	strh	r2, [r3, #8]
 80036ba:	f04f 0c05 	mov.w	ip, #5
 80036be:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80036c2:	f04f 0502 	mov.w	r5, #2
 80036c6:	731d      	strb	r5, [r3, #12]
 80036c8:	f04f 0a36 	mov.w	sl, #54	; 0x36
 80036cc:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80036d0:	f8a3 e010 	strh.w	lr, [r3, #16]
 80036d4:	825a      	strh	r2, [r3, #18]
 80036d6:	829a      	strh	r2, [r3, #20]
 80036d8:	f8a3 c016 	strh.w	ip, [r3, #22]
 80036dc:	f04f 0503 	mov.w	r5, #3
 80036e0:	761d      	strb	r5, [r3, #24]
 80036e2:	f04f 0660 	mov.w	r6, #96	; 0x60
 80036e6:	835e      	strh	r6, [r3, #26]
 80036e8:	f8a3 e01c 	strh.w	lr, [r3, #28]
 80036ec:	83da      	strh	r2, [r3, #30]
 80036ee:	841a      	strh	r2, [r3, #32]
 80036f0:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 80036f4:	f04f 0504 	mov.w	r5, #4
 80036f8:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 80036fc:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8003700:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8003704:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a
 800370a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800370c:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8003710:	f883 c030 	strb.w	ip, [r3, #48]	; 0x30
 8003714:	27b4      	movs	r7, #180	; 0xb4
 8003716:	865f      	strh	r7, [r3, #50]	; 0x32
 8003718:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 800371c:	86da      	strh	r2, [r3, #54]	; 0x36
 800371e:	871a      	strh	r2, [r3, #56]	; 0x38
 8003720:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8003724:	f04f 0506 	mov.w	r5, #6
 8003728:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 800372c:	f04f 05de 	mov.w	r5, #222	; 0xde
 8003730:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8003732:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8003736:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800373a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800373e:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8003742:	f04f 0907 	mov.w	r9, #7
 8003746:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 800374a:	f44f 7984 	mov.w	r9, #264	; 0x108
 800374e:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8003752:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8003756:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800375a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800375e:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8003762:	2508      	movs	r5, #8
 8003764:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
 8003768:	f44f 7b99 	mov.w	fp, #306	; 0x132
 800376c:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8003770:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8003774:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8003778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800377c:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8003780:	2509      	movs	r5, #9
 8003782:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8003786:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 800378a:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 800378e:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8003792:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8003796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800379a:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 800379e:	250a      	movs	r5, #10
 80037a0:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80037a4:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80037a8:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80037ac:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 80037b0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80037b4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80037b8:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 80037bc:	f04f 090b 	mov.w	r9, #11
 80037c0:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80037c4:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 80037c8:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 80037cc:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 80037d0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80037d4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80037d8:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 80037dc:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 80037e0:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 80037e4:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 80037e8:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 80037ec:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80037f0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80037f4:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 80037f8:	f04f 060d 	mov.w	r6, #13
 80037fc:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8003800:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8003804:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8003808:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800380c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8003810:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8003814:	f04f 0a0e 	mov.w	sl, #14
 8003818:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 800381c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003820:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8003824:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8003828:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800382c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003830:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8003834:	f04f 0a0f 	mov.w	sl, #15
 8003838:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 800383c:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8003840:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8003844:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8003848:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800384c:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8003850:	f04f 0a10 	mov.w	sl, #16
 8003854:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8003858:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 800385c:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8003860:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8003864:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8003868:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 800386c:	f04f 0a11 	mov.w	sl, #17
 8003870:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8003874:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8003878:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 800387c:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8003880:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8003884:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8003888:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 800388c:	f04f 0a12 	mov.w	sl, #18
 8003890:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8003894:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8003898:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 800389c:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80038a0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80038a4:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80038a8:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80038ac:	f04f 0a13 	mov.w	sl, #19
 80038b0:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 80038b4:	f44f 7a99 	mov.w	sl, #306	; 0x132
 80038b8:	4656      	mov	r6, sl
 80038ba:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 80038be:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80038c2:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80038c6:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80038ca:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 80038ce:	f04f 0a14 	mov.w	sl, #20
 80038d2:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 80038d6:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 80038da:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 80038de:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 80038e2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80038e6:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 80038ea:	f04f 0a15 	mov.w	sl, #21
 80038ee:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 80038f2:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 80038f6:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 80038fa:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80038fe:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8003902:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8003906:	f04f 0a16 	mov.w	sl, #22
 800390a:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 800390e:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8003912:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8003916:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800391a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800391e:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8003922:	f04f 0e17 	mov.w	lr, #23
 8003926:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800392a:	f04f 0e60 	mov.w	lr, #96	; 0x60
 800392e:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8003932:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8003936:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800393a:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 800393e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8003942:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8003946:	f04f 0918 	mov.w	r9, #24
 800394a:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 800394e:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8003952:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8003956:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 800395a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800395e:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8003962:	f04f 0819 	mov.w	r8, #25
 8003966:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 800396a:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 800396e:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8003972:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8003976:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 800397a:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 800397e:	271a      	movs	r7, #26
 8003980:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8003984:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8003988:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 800398c:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8003990:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8003994:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8003998:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 800399c:	271b      	movs	r7, #27
 800399e:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80039a2:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80039a6:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80039aa:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 80039ae:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80039b2:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 80039b6:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 80039ba:	271c      	movs	r7, #28
 80039bc:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 80039c0:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 80039c4:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 80039c8:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 80039cc:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 80039d0:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 80039d4:	271d      	movs	r7, #29
 80039d6:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 80039da:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 80039de:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 80039e2:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 80039e6:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 80039ea:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 80039ee:	271e      	movs	r7, #30
 80039f0:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 80039f4:	f04f 0660 	mov.w	r6, #96	; 0x60
 80039f8:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 80039fc:	26e2      	movs	r6, #226	; 0xe2
 80039fe:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8003a02:	f44f 7790 	mov.w	r7, #288	; 0x120
 8003a06:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8003a0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8003a0e:	f04f 0707 	mov.w	r7, #7
 8003a12:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8003a18:	801c      	strh	r4, [r3, #0]
 8003a1a:	f8a3 e002 	strh.w	lr, [r3, #2]
 8003a1e:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8003a22:	f8a3 c004 	strh.w	ip, [r3, #4]
 8003a26:	80da      	strh	r2, [r3, #6]
};
 8003a28:	2700      	movs	r7, #0
 8003a2a:	609f      	str	r7, [r3, #8]
 8003a2c:	f04f 0803 	mov.w	r8, #3
 8003a30:	f8a3 800c 	strh.w	r8, [r3, #12]
 8003a34:	821d      	strh	r5, [r3, #16]
 8003a36:	f8a3 e012 	strh.w	lr, [r3, #18]
 8003a3a:	f8a3 c014 	strh.w	ip, [r3, #20]
 8003a3e:	82da      	strh	r2, [r3, #22]
 8003a40:	619f      	str	r7, [r3, #24]
 8003a42:	f04f 0e02 	mov.w	lr, #2
 8003a46:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8003a4a:	841c      	strh	r4, [r3, #32]
 8003a4c:	845e      	strh	r6, [r3, #34]	; 0x22
 8003a4e:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8003a52:	84da      	strh	r2, [r3, #38]	; 0x26
 8003a54:	629f      	str	r7, [r3, #40]	; 0x28
 8003a56:	f04f 0406 	mov.w	r4, #6
 8003a5a:	859c      	strh	r4, [r3, #44]	; 0x2c
 8003a5c:	861d      	strh	r5, [r3, #48]	; 0x30
 8003a5e:	865e      	strh	r6, [r3, #50]	; 0x32
 8003a60:	e004      	b.n	8003a6c <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8003a62:	bf00      	nop
 8003a64:	24002584 	.word	0x24002584
 8003a68:	240024f4 	.word	0x240024f4
 8003a6c:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8003a70:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a72:	639f      	str	r7, [r3, #56]	; 0x38
 8003a74:	f04f 0204 	mov.w	r2, #4
 8003a78:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	3340      	adds	r3, #64	; 0x40
 8003a7e:	2c00      	cmp	r4, #0
 8003a80:	db0b      	blt.n	8003a9a <_Z41__static_initialization_and_destruction_0ii+0x416>
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	805a      	strh	r2, [r3, #2]
 8003a90:	809a      	strh	r2, [r3, #4]
 8003a92:	80da      	strh	r2, [r3, #6]
 8003a94:	3310      	adds	r3, #16
 8003a96:	3c01      	subs	r4, #1
 8003a98:	e7f1      	b.n	8003a7e <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003a9c:	2205      	movs	r2, #5
 8003a9e:	825a      	strh	r2, [r3, #18]
 8003aa0:	222d      	movs	r2, #45	; 0x2d
 8003aa2:	829a      	strh	r2, [r3, #20]
 8003aa4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003aa8:	82da      	strh	r2, [r3, #22]
 8003aaa:	2246      	movs	r2, #70	; 0x46
 8003aac:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8003aae:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003ab0:	61da      	str	r2, [r3, #28]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	841a      	strh	r2, [r3, #32]
        : color(col)
 8003ab6:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
 8003abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8003ac2:	b918      	cbnz	r0, 8003acc <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ac8:	4299      	cmp	r1, r3
 8003aca:	d001      	beq.n	8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8003acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003ad2:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003ad4:	61da      	str	r2, [r3, #28]
 8003ad6:	e7f9      	b.n	8003acc <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003ad8:	4b01      	ldr	r3, [pc, #4]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003ada:	4a02      	ldr	r2, [pc, #8]	; (8003ae4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003adc:	61da      	str	r2, [r3, #28]
 8003ade:	4770      	bx	lr
 8003ae0:	24002554 	.word	0x24002554
 8003ae4:	080220a4 	.word	0x080220a4

08003ae8 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 8003aee:	6003      	str	r3, [r0, #0]
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8003af2:	6003      	str	r3, [r0, #0]
 8003af4:	210c      	movs	r1, #12
 8003af6:	f01c fc54 	bl	80203a2 <_ZdlPvj>
 8003afa:	4620      	mov	r0, r4
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	bf00      	nop
 8003b00:	0802285c 	.word	0x0802285c
 8003b04:	08022838 	.word	0x08022838

08003b08 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	4604      	mov	r4, r0
    {
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <_ZN8touchgfx10TransitionD0Ev+0x14>)
 8003b0e:	6003      	str	r3, [r0, #0]
    }
 8003b10:	210c      	movs	r1, #12
 8003b12:	f01c fc46 	bl	80203a2 <_ZdlPvj>
 8003b16:	4620      	mov	r0, r4
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	bf00      	nop
 8003b1c:	08022838 	.word	0x08022838

08003b20 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003b20:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8003b22:	f011 fea7 	bl	8015874 <_ZN8touchgfx11Application11getInstanceEv>
 8003b26:	f012 fa4b 	bl	8015fc0 <_ZN8touchgfx11Application10invalidateEv>
    }
 8003b2a:	bd08      	pop	{r3, pc}

08003b2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	4604      	mov	r4, r0
 8003b30:	460e      	mov	r6, r1
 8003b32:	4617      	mov	r7, r2
          pendingScreenTransitionCallback(0)
 8003b34:	f011 fec0 	bl	80158b8 <_ZN8touchgfx11ApplicationC1Ev>
 8003b38:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8003b42:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        instance = this;
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8003b48:	601c      	str	r4, [r3, #0]
      model(m)
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8003b4c:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8003b50:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8003b54:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 8003b56:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003b5a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003b5e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8003b62:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8003b66:	f8c4 7150 	str.w	r7, [r4, #336]	; 0x150
 8003b6a:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        return instance;
 8003b6e:	4e0f      	ldr	r6, [pc, #60]	; (8003bac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
 8003b70:	6830      	ldr	r0, [r6, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b72:	6803      	ldr	r3, [r0, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	4629      	mov	r1, r5
 8003b78:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 fb9a 	bl	80042b4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b80:	6833      	ldr	r3, [r6, #0]
 8003b82:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003b86:	b10a      	cbz	r2, 8003b8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
 8003b88:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003b8a:	b900      	cbnz	r0, 8003b8e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x62>
        return instance->lcdRef;
 8003b8c:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003b8e:	f017 fde4 	bl	801b75a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8003b92:	4620      	mov	r0, r4
 8003b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b96:	bf00      	nop
 8003b98:	08022118 	.word	0x08022118
 8003b9c:	2400c840 	.word	0x2400c840
 8003ba0:	0802217c 	.word	0x0802217c
 8003ba4:	08022100 	.word	0x08022100
 8003ba8:	08022164 	.word	0x08022164
 8003bac:	2400c7f4 	.word	0x2400c7f4

08003bb0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
{
 8003bb0:	b410      	push	{r4}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 8003bb6:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8003bb8:	9206      	str	r2, [sp, #24]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	9207      	str	r2, [sp, #28]
 8003bbe:	46ec      	mov	ip, sp
 8003bc0:	aa08      	add	r2, sp, #32
 8003bc2:	e912 0003 	ldmdb	r2, {r0, r1}
 8003bc6:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8003bca:	4c0c      	ldr	r4, [pc, #48]	; (8003bfc <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8003bcc:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8003bd0:	9202      	str	r2, [sp, #8]
 8003bd2:	9303      	str	r3, [sp, #12]
 8003bd4:	aa04      	add	r2, sp, #16
 8003bd6:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003bda:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8003bde:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 8003be2:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 8003be6:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8003be8:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003bec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003bf0:	b009      	add	sp, #36	; 0x24
 8003bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	08003d55 	.word	0x08003d55
 8003bfc:	08022100 	.word	0x08022100
 8003c00:	08022164 	.word	0x08022164

08003c04 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c08:	4607      	mov	r7, r0
 8003c0a:	4688      	mov	r8, r1
 8003c0c:	4615      	mov	r5, r2
 8003c0e:	4699      	mov	r9, r3
 8003c10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003c14:	6890      	ldr	r0, [r2, #8]
 8003c16:	6803      	ldr	r3, [r0, #0]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	4798      	blx	r3
 8003c1c:	f5b0 7f37 	cmp.w	r0, #732	; 0x2dc
 8003c20:	d376      	bcc.n	8003d10 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003c22:	6868      	ldr	r0, [r5, #4]
 8003c24:	6803      	ldr	r3, [r0, #0]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4798      	blx	r3
 8003c2a:	280f      	cmp	r0, #15
 8003c2c:	d976      	bls.n	8003d1c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003c2e:	68e8      	ldr	r0, [r5, #12]
 8003c30:	6803      	ldr	r3, [r0, #0]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4798      	blx	r3
 8003c36:	280b      	cmp	r0, #11
 8003c38:	d976      	bls.n	8003d28 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
    Application::getInstance()->clearAllTimerWidgets();
 8003c3a:	f011 fe1b 	bl	8015874 <_ZN8touchgfx11Application11getInstanceEv>
 8003c3e:	f011 fe1f 	bl	8015880 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003c42:	f8d9 0000 	ldr.w	r0, [r9]
 8003c46:	b110      	cbz	r0, 8003c4e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x4a>
        (*currentTrans)->tearDown();
 8003c48:	6803      	ldr	r3, [r0, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4798      	blx	r3
    if (*currentTrans)
 8003c4e:	f8d9 0000 	ldr.w	r0, [r9]
 8003c52:	b110      	cbz	r0, 8003c5a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
        (*currentTrans)->~Transition();
 8003c54:	6803      	ldr	r3, [r0, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4798      	blx	r3
    if (*currentScreen)
 8003c5a:	6838      	ldr	r0, [r7, #0]
 8003c5c:	b110      	cbz	r0, 8003c64 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x60>
        (*currentScreen)->tearDownScreen();
 8003c5e:	6803      	ldr	r3, [r0, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4798      	blx	r3
    if (*currentPresenter)
 8003c64:	f8d8 0000 	ldr.w	r0, [r8]
 8003c68:	b110      	cbz	r0, 8003c70 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
        (*currentPresenter)->deactivate();
 8003c6a:	6803      	ldr	r3, [r0, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4798      	blx	r3
    if (*currentScreen)
 8003c70:	6838      	ldr	r0, [r7, #0]
 8003c72:	b110      	cbz	r0, 8003c7a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
        (*currentScreen)->~Screen();
 8003c74:	6803      	ldr	r3, [r0, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4798      	blx	r3
    if (*currentPresenter)
 8003c7a:	f8d8 0000 	ldr.w	r0, [r8]
 8003c7e:	b110      	cbz	r0, 8003c86 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
        (*currentPresenter)->~Presenter();
 8003c80:	6803      	ldr	r3, [r0, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003c86:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003c88:	6803      	ldr	r3, [r0, #0]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4798      	blx	r3
 8003c90:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8003c92:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8003c94:	6003      	str	r3, [r0, #0]
 8003c96:	f04f 0b00 	mov.w	fp, #0
 8003c9a:	f8c0 b004 	str.w	fp, [r0, #4]
 8003c9e:	f880 b008 	strb.w	fp, [r0, #8]
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8003ca4:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003ca6:	68a8      	ldr	r0, [r5, #8]
 8003ca8:	6803      	ldr	r3, [r0, #0]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	4659      	mov	r1, fp
 8003cae:	4798      	blx	r3
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	f002 f9e1 	bl	8006078 <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003cb6:	6868      	ldr	r0, [r5, #4]
 8003cb8:	6803      	ldr	r3, [r0, #0]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	4798      	blx	r3
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	4631      	mov	r1, r6
 8003cc4:	f001 fdde 	bl	8005884 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8003cc8:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003ccc:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8003cd0:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	d02e      	beq.n	8003d34 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8003cd6:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003cd8:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003cdc:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003ce0:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8003ce2:	6833      	ldr	r3, [r6, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	4798      	blx	r3
    newPresenter->activate();
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4628      	mov	r0, r5
 8003cf0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f013 f999 	bl	801702c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4798      	blx	r3
    newTransition->invalidate();
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4620      	mov	r0, r4
 8003d08:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8003d12:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d14:	21a3      	movs	r1, #163	; 0xa3
 8003d16:	480c      	ldr	r0, [pc, #48]	; (8003d48 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d18:	f01c fb72 	bl	8020400 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d1e:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d20:	21a4      	movs	r1, #164	; 0xa4
 8003d22:	4809      	ldr	r0, [pc, #36]	; (8003d48 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d24:	f01c fb6c 	bl	8020400 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8003d2a:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d2c:	21a5      	movs	r1, #165	; 0xa5
 8003d2e:	4806      	ldr	r0, [pc, #24]	; (8003d48 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d30:	f01c fb66 	bl	8020400 <__assert_func>
    model->bind(newPresenter);
 8003d34:	462b      	mov	r3, r5
 8003d36:	e7cf      	b.n	8003cd8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd4>
 8003d38:	08022838 	.word	0x08022838
 8003d3c:	0802285c 	.word	0x0802285c
 8003d40:	08022504 	.word	0x08022504
 8003d44:	08022594 	.word	0x08022594
 8003d48:	080226a0 	.word	0x080226a0
 8003d4c:	080226e8 	.word	0x080226e8
 8003d50:	0802278c 	.word	0x0802278c

08003d54 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:
{
 8003d54:	b500      	push	{lr}
 8003d56:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003d58:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8003d60:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003d64:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8003d68:	4803      	ldr	r0, [pc, #12]	; (8003d78 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 8003d6a:	f7ff ff4b 	bl	8003c04 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003d6e:	b003      	add	sp, #12
 8003d70:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d74:	2400c834 	.word	0x2400c834
 8003d78:	2400c830 	.word	0x2400c830

08003d7c <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003d7c:	b508      	push	{r3, lr}
 8003d7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7ff fc7e 	bl	8003684 <_Z41__static_initialization_and_destruction_0ii>
 8003d88:	bd08      	pop	{r3, pc}

08003d8a <_GLOBAL__sub_D__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003d8a:	b508      	push	{r3, lr}
 8003d8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7ff fc77 	bl	8003684 <_Z41__static_initialization_and_destruction_0ii>
 8003d96:	bd08      	pop	{r3, pc}

08003d98 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003d98:	6a00      	ldr	r0, [r0, #32]
 8003d9a:	4770      	bx	lr

08003d9c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003d9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003d9e:	4770      	bx	lr

08003da0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003da0:	4a03      	ldr	r2, [pc, #12]	; (8003db0 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 8003da2:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003da4:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 8003da6:	6002      	str	r2, [r0, #0]
    {
 8003da8:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8003daa:	6002      	str	r2, [r0, #0]
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	08022880 	.word	0x08022880
 8003db4:	08023a70 	.word	0x08023a70
 8003db8:	08022ac0 	.word	0x08022ac0

08003dbc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003dbc:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003dbe:	888b      	ldrh	r3, [r1, #4]
 8003dc0:	0adb      	lsrs	r3, r3, #11
 8003dc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003dc6:	680b      	ldr	r3, [r1, #0]
}
 8003dc8:	4418      	add	r0, r3
 8003dca:	4770      	bx	lr

08003dcc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003dcc:	4694      	mov	ip, r2
 8003dce:	b1da      	cbz	r2, 8003e08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8003dd0:	7b13      	ldrb	r3, [r2, #12]
 8003dd2:	b1db      	cbz	r3, 8003e0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003dd4:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003dd6:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8003dda:	0200      	lsls	r0, r0, #8
 8003ddc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003de0:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8003de4:	ea40 000c 	orr.w	r0, r0, ip
 8003de8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	b17b      	cbz	r3, 8003e10 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003df0:	8810      	ldrh	r0, [r2, #0]
 8003df2:	4288      	cmp	r0, r1
 8003df4:	d005      	beq.n	8003e02 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 8003df6:	4288      	cmp	r0, r1
 8003df8:	d80c      	bhi.n	8003e14 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3204      	adds	r2, #4
 8003e00:	e7f5      	b.n	8003dee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 8003e02:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8003e06:	4770      	bx	lr
        return 0;
 8003e08:	2000      	movs	r0, #0
 8003e0a:	4770      	bx	lr
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 8003e10:	2000      	movs	r0, #0
 8003e12:	4770      	bx	lr
 8003e14:	2000      	movs	r0, #0
}
 8003e16:	4770      	bx	lr

08003e18 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 8003e1e:	6003      	str	r3, [r0, #0]
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 8003e22:	6003      	str	r3, [r0, #0]
    {
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 8003e26:	6003      	str	r3, [r0, #0]
 8003e28:	2128      	movs	r1, #40	; 0x28
 8003e2a:	f01c faba 	bl	80203a2 <_ZdlPvj>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	bf00      	nop
 8003e34:	08022880 	.word	0x08022880
 8003e38:	08023a70 	.word	0x08023a70
 8003e3c:	08022ac0 	.word	0x08022ac0

08003e40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003e40:	b530      	push	{r4, r5, lr}
 8003e42:	b089      	sub	sp, #36	; 0x24
 8003e44:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003e46:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003e4a:	9506      	str	r5, [sp, #24]
 8003e4c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003e50:	9505      	str	r5, [sp, #20]
 8003e52:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003e56:	9504      	str	r5, [sp, #16]
 8003e58:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003e5c:	9503      	str	r5, [sp, #12]
 8003e5e:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003e62:	9502      	str	r5, [sp, #8]
 8003e64:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003e68:	9501      	str	r5, [sp, #4]
 8003e6a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003e6e:	9500      	str	r5, [sp, #0]
 8003e70:	f012 fd46 	bl	8016900 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e7a:	61a3      	str	r3, [r4, #24]
 8003e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e7e:	61e3      	str	r3, [r4, #28]
 8003e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e82:	6223      	str	r3, [r4, #32]
 8003e84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e86:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003e88:	4620      	mov	r0, r4
 8003e8a:	b009      	add	sp, #36	; 0x24
 8003e8c:	bd30      	pop	{r4, r5, pc}
 8003e8e:	bf00      	nop
 8003e90:	08022880 	.word	0x08022880

08003e94 <__tcf_0>:
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <__tcf_0+0x10>)
 8003e96:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <__tcf_0+0x14>)
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	4a04      	ldr	r2, [pc, #16]	; (8003eac <__tcf_0+0x18>)
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <__tcf_0+0x1c>)
 8003ea0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003ea2:	4770      	bx	lr
 8003ea4:	240026f0 	.word	0x240026f0
 8003ea8:	08022880 	.word	0x08022880
 8003eac:	08023a70 	.word	0x08023a70
 8003eb0:	08022ac0 	.word	0x08022ac0

08003eb4 <_Z23getFont_verdana_10_4bppv>:
 8003eb4:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	f3bf 8f5b 	dmb	ish
 8003ebc:	f013 0f01 	tst.w	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 8003ec2:	4815      	ldr	r0, [pc, #84]	; (8003f18 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003ec4:	4770      	bx	lr
{
 8003ec6:	b500      	push	{lr}
 8003ec8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003eca:	4812      	ldr	r0, [pc, #72]	; (8003f14 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003ecc:	f01c fa6b 	bl	80203a6 <__cxa_guard_acquire>
 8003ed0:	b918      	cbnz	r0, 8003eda <_Z23getFont_verdana_10_4bppv+0x26>
}
 8003ed2:	4811      	ldr	r0, [pc, #68]	; (8003f18 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003ed4:	b00d      	add	sp, #52	; 0x34
 8003ed6:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003eda:	2300      	movs	r3, #0
 8003edc:	930a      	str	r3, [sp, #40]	; 0x28
 8003ede:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee0:	9308      	str	r3, [sp, #32]
 8003ee2:	223f      	movs	r2, #63	; 0x3f
 8003ee4:	9207      	str	r2, [sp, #28]
 8003ee6:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <_Z23getFont_verdana_10_4bppv+0x68>)
 8003ee8:	9206      	str	r2, [sp, #24]
 8003eea:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003eec:	9205      	str	r2, [sp, #20]
 8003eee:	9304      	str	r3, [sp, #16]
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	9202      	str	r2, [sp, #8]
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	9101      	str	r1, [sp, #4]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	230a      	movs	r3, #10
 8003efe:	4909      	ldr	r1, [pc, #36]	; (8003f24 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003f00:	4805      	ldr	r0, [pc, #20]	; (8003f18 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003f02:	f7ff ff9d 	bl	8003e40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f06:	4808      	ldr	r0, [pc, #32]	; (8003f28 <_Z23getFont_verdana_10_4bppv+0x74>)
 8003f08:	f01c fa98 	bl	802043c <atexit>
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003f0e:	f01c fa56 	bl	80203be <__cxa_guard_release>
 8003f12:	e7de      	b.n	8003ed2 <_Z23getFont_verdana_10_4bppv+0x1e>
 8003f14:	240026ec 	.word	0x240026ec
 8003f18:	240026f0 	.word	0x240026f0
 8003f1c:	08023ddc 	.word	0x08023ddc
 8003f20:	08024258 	.word	0x08024258
 8003f24:	90007330 	.word	0x90007330
 8003f28:	08003e95 	.word	0x08003e95

08003f2c <__tcf_0>:
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <__tcf_0+0x10>)
 8003f2e:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <__tcf_0+0x14>)
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <__tcf_0+0x18>)
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <__tcf_0+0x1c>)
 8003f38:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 8003f3a:	4770      	bx	lr
 8003f3c:	2400271c 	.word	0x2400271c
 8003f40:	08022880 	.word	0x08022880
 8003f44:	08023a70 	.word	0x08023a70
 8003f48:	08022ac0 	.word	0x08022ac0

08003f4c <_Z23getFont_verdana_18_4bppv>:
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <_Z23getFont_verdana_18_4bppv+0x64>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f3bf 8f5b 	dmb	ish
 8003f54:	f013 0f01 	tst.w	r3, #1
 8003f58:	d001      	beq.n	8003f5e <_Z23getFont_verdana_18_4bppv+0x12>
    return verdana_18_4bpp;
}
 8003f5a:	4816      	ldr	r0, [pc, #88]	; (8003fb4 <_Z23getFont_verdana_18_4bppv+0x68>)
 8003f5c:	4770      	bx	lr
{
 8003f5e:	b500      	push	{lr}
 8003f60:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 8003f62:	4813      	ldr	r0, [pc, #76]	; (8003fb0 <_Z23getFont_verdana_18_4bppv+0x64>)
 8003f64:	f01c fa1f 	bl	80203a6 <__cxa_guard_acquire>
 8003f68:	b918      	cbnz	r0, 8003f72 <_Z23getFont_verdana_18_4bppv+0x26>
}
 8003f6a:	4812      	ldr	r0, [pc, #72]	; (8003fb4 <_Z23getFont_verdana_18_4bppv+0x68>)
 8003f6c:	b00d      	add	sp, #52	; 0x34
 8003f6e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 8003f72:	2300      	movs	r3, #0
 8003f74:	930a      	str	r3, [sp, #40]	; 0x28
 8003f76:	9309      	str	r3, [sp, #36]	; 0x24
 8003f78:	9308      	str	r3, [sp, #32]
 8003f7a:	233f      	movs	r3, #63	; 0x3f
 8003f7c:	9307      	str	r3, [sp, #28]
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <_Z23getFont_verdana_18_4bppv+0x6c>)
 8003f80:	9306      	str	r3, [sp, #24]
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <_Z23getFont_verdana_18_4bppv+0x70>)
 8003f84:	9305      	str	r3, [sp, #20]
 8003f86:	2301      	movs	r3, #1
 8003f88:	9304      	str	r3, [sp, #16]
 8003f8a:	9303      	str	r3, [sp, #12]
 8003f8c:	9302      	str	r3, [sp, #8]
 8003f8e:	2304      	movs	r3, #4
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2312      	movs	r3, #18
 8003f96:	226e      	movs	r2, #110	; 0x6e
 8003f98:	4909      	ldr	r1, [pc, #36]	; (8003fc0 <_Z23getFont_verdana_18_4bppv+0x74>)
 8003f9a:	4806      	ldr	r0, [pc, #24]	; (8003fb4 <_Z23getFont_verdana_18_4bppv+0x68>)
 8003f9c:	f7ff ff50 	bl	8003e40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003fa0:	4808      	ldr	r0, [pc, #32]	; (8003fc4 <_Z23getFont_verdana_18_4bppv+0x78>)
 8003fa2:	f01c fa4b 	bl	802043c <atexit>
 8003fa6:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <_Z23getFont_verdana_18_4bppv+0x64>)
 8003fa8:	f01c fa09 	bl	80203be <__cxa_guard_release>
 8003fac:	e7dd      	b.n	8003f6a <_Z23getFont_verdana_18_4bppv+0x1e>
 8003fae:	bf00      	nop
 8003fb0:	24002718 	.word	0x24002718
 8003fb4:	2400271c 	.word	0x2400271c
 8003fb8:	08023de0 	.word	0x08023de0
 8003fbc:	0802425c 	.word	0x0802425c
 8003fc0:	90007340 	.word	0x90007340
 8003fc4:	08003f2d 	.word	0x08003f2d

08003fc8 <__tcf_0>:
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <__tcf_0+0x10>)
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <__tcf_0+0x14>)
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <__tcf_0+0x18>)
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <__tcf_0+0x1c>)
 8003fd4:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003fd6:	4770      	bx	lr
 8003fd8:	24002748 	.word	0x24002748
 8003fdc:	08022880 	.word	0x08022880
 8003fe0:	08023a70 	.word	0x08023a70
 8003fe4:	08022ac0 	.word	0x08022ac0

08003fe8 <_Z23getFont_verdana_20_4bppv>:
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f3bf 8f5b 	dmb	ish
 8003ff0:	f013 0f01 	tst.w	r3, #1
 8003ff4:	d001      	beq.n	8003ffa <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 8003ff6:	4815      	ldr	r0, [pc, #84]	; (800404c <_Z23getFont_verdana_20_4bppv+0x64>)
 8003ff8:	4770      	bx	lr
{
 8003ffa:	b500      	push	{lr}
 8003ffc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003ffe:	4812      	ldr	r0, [pc, #72]	; (8004048 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004000:	f01c f9d1 	bl	80203a6 <__cxa_guard_acquire>
 8004004:	b918      	cbnz	r0, 800400e <_Z23getFont_verdana_20_4bppv+0x26>
}
 8004006:	4811      	ldr	r0, [pc, #68]	; (800404c <_Z23getFont_verdana_20_4bppv+0x64>)
 8004008:	b00d      	add	sp, #52	; 0x34
 800400a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800400e:	2300      	movs	r3, #0
 8004010:	930a      	str	r3, [sp, #40]	; 0x28
 8004012:	9309      	str	r3, [sp, #36]	; 0x24
 8004014:	9308      	str	r3, [sp, #32]
 8004016:	223f      	movs	r2, #63	; 0x3f
 8004018:	9207      	str	r2, [sp, #28]
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <_Z23getFont_verdana_20_4bppv+0x68>)
 800401c:	9206      	str	r2, [sp, #24]
 800401e:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004020:	9205      	str	r2, [sp, #20]
 8004022:	9304      	str	r3, [sp, #16]
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	9202      	str	r2, [sp, #8]
 800402a:	2104      	movs	r1, #4
 800402c:	9101      	str	r1, [sp, #4]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2314      	movs	r3, #20
 8004032:	4909      	ldr	r1, [pc, #36]	; (8004058 <_Z23getFont_verdana_20_4bppv+0x70>)
 8004034:	4805      	ldr	r0, [pc, #20]	; (800404c <_Z23getFont_verdana_20_4bppv+0x64>)
 8004036:	f7ff ff03 	bl	8003e40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800403a:	4808      	ldr	r0, [pc, #32]	; (800405c <_Z23getFont_verdana_20_4bppv+0x74>)
 800403c:	f01c f9fe 	bl	802043c <atexit>
 8004040:	4801      	ldr	r0, [pc, #4]	; (8004048 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004042:	f01c f9bc 	bl	80203be <__cxa_guard_release>
 8004046:	e7de      	b.n	8004006 <_Z23getFont_verdana_20_4bppv+0x1e>
 8004048:	24002744 	.word	0x24002744
 800404c:	24002748 	.word	0x24002748
 8004050:	08023f60 	.word	0x08023f60
 8004054:	08024270 	.word	0x08024270
 8004058:	90007944 	.word	0x90007944
 800405c:	08003fc9 	.word	0x08003fc9

08004060 <__tcf_0>:
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <__tcf_0+0x10>)
 8004062:	4a04      	ldr	r2, [pc, #16]	; (8004074 <__tcf_0+0x14>)
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	4a04      	ldr	r2, [pc, #16]	; (8004078 <__tcf_0+0x18>)
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	4a04      	ldr	r2, [pc, #16]	; (800407c <__tcf_0+0x1c>)
 800406c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_34_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_34_4bpp();

touchgfx::GeneratedFont& getFont_verdana_34_4bpp()
{
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 800406e:	4770      	bx	lr
 8004070:	24002774 	.word	0x24002774
 8004074:	08022880 	.word	0x08022880
 8004078:	08023a70 	.word	0x08023a70
 800407c:	08022ac0 	.word	0x08022ac0

08004080 <_Z23getFont_verdana_34_4bppv>:
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <_Z23getFont_verdana_34_4bppv+0x68>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	f3bf 8f5b 	dmb	ish
 8004088:	f013 0f01 	tst.w	r3, #1
 800408c:	d001      	beq.n	8004092 <_Z23getFont_verdana_34_4bppv+0x12>
    return verdana_34_4bpp;
}
 800408e:	4817      	ldr	r0, [pc, #92]	; (80040ec <_Z23getFont_verdana_34_4bppv+0x6c>)
 8004090:	4770      	bx	lr
{
 8004092:	b500      	push	{lr}
 8004094:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 8004096:	4814      	ldr	r0, [pc, #80]	; (80040e8 <_Z23getFont_verdana_34_4bppv+0x68>)
 8004098:	f01c f985 	bl	80203a6 <__cxa_guard_acquire>
 800409c:	b918      	cbnz	r0, 80040a6 <_Z23getFont_verdana_34_4bppv+0x26>
}
 800409e:	4813      	ldr	r0, [pc, #76]	; (80040ec <_Z23getFont_verdana_34_4bppv+0x6c>)
 80040a0:	b00d      	add	sp, #52	; 0x34
 80040a2:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80040a6:	2300      	movs	r3, #0
 80040a8:	930a      	str	r3, [sp, #40]	; 0x28
 80040aa:	9309      	str	r3, [sp, #36]	; 0x24
 80040ac:	9308      	str	r3, [sp, #32]
 80040ae:	233f      	movs	r3, #63	; 0x3f
 80040b0:	9307      	str	r3, [sp, #28]
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <_Z23getFont_verdana_34_4bppv+0x70>)
 80040b4:	9306      	str	r3, [sp, #24]
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <_Z23getFont_verdana_34_4bppv+0x74>)
 80040b8:	9305      	str	r3, [sp, #20]
 80040ba:	2302      	movs	r3, #2
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	2301      	movs	r3, #1
 80040c0:	9303      	str	r3, [sp, #12]
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	2304      	movs	r3, #4
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	2307      	movs	r3, #7
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2322      	movs	r3, #34	; 0x22
 80040ce:	226e      	movs	r2, #110	; 0x6e
 80040d0:	4909      	ldr	r1, [pc, #36]	; (80040f8 <_Z23getFont_verdana_34_4bppv+0x78>)
 80040d2:	4806      	ldr	r0, [pc, #24]	; (80040ec <_Z23getFont_verdana_34_4bppv+0x6c>)
 80040d4:	f7ff feb4 	bl	8003e40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80040d8:	4808      	ldr	r0, [pc, #32]	; (80040fc <_Z23getFont_verdana_34_4bppv+0x7c>)
 80040da:	f01c f9af 	bl	802043c <atexit>
 80040de:	4802      	ldr	r0, [pc, #8]	; (80040e8 <_Z23getFont_verdana_34_4bppv+0x68>)
 80040e0:	f01c f96d 	bl	80203be <__cxa_guard_release>
 80040e4:	e7db      	b.n	800409e <_Z23getFont_verdana_34_4bppv+0x1e>
 80040e6:	bf00      	nop
 80040e8:	24002770 	.word	0x24002770
 80040ec:	24002774 	.word	0x24002774
 80040f0:	08023f64 	.word	0x08023f64
 80040f4:	08024274 	.word	0x08024274
 80040f8:	90007954 	.word	0x90007954
 80040fc:	08004061 	.word	0x08004061

08004100 <__tcf_0>:
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <__tcf_0+0x10>)
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <__tcf_0+0x14>)
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <__tcf_0+0x18>)
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	4a04      	ldr	r2, [pc, #16]	; (800411c <__tcf_0+0x1c>)
 800410c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800410e:	4770      	bx	lr
 8004110:	240027a0 	.word	0x240027a0
 8004114:	08022880 	.word	0x08022880
 8004118:	08023a70 	.word	0x08023a70
 800411c:	08022ac0 	.word	0x08022ac0

08004120 <_Z23getFont_verdana_40_4bppv>:
 8004120:	4b17      	ldr	r3, [pc, #92]	; (8004180 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	f3bf 8f5b 	dmb	ish
 8004128:	f013 0f01 	tst.w	r3, #1
 800412c:	d001      	beq.n	8004132 <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 800412e:	4815      	ldr	r0, [pc, #84]	; (8004184 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004130:	4770      	bx	lr
{
 8004132:	b500      	push	{lr}
 8004134:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004136:	4812      	ldr	r0, [pc, #72]	; (8004180 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004138:	f01c f935 	bl	80203a6 <__cxa_guard_acquire>
 800413c:	b918      	cbnz	r0, 8004146 <_Z23getFont_verdana_40_4bppv+0x26>
}
 800413e:	4811      	ldr	r0, [pc, #68]	; (8004184 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004140:	b00d      	add	sp, #52	; 0x34
 8004142:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004146:	2300      	movs	r3, #0
 8004148:	930a      	str	r3, [sp, #40]	; 0x28
 800414a:	9309      	str	r3, [sp, #36]	; 0x24
 800414c:	9308      	str	r3, [sp, #32]
 800414e:	223f      	movs	r2, #63	; 0x3f
 8004150:	9207      	str	r2, [sp, #28]
 8004152:	4a0d      	ldr	r2, [pc, #52]	; (8004188 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004154:	9206      	str	r2, [sp, #24]
 8004156:	4a0d      	ldr	r2, [pc, #52]	; (800418c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004158:	9205      	str	r2, [sp, #20]
 800415a:	9304      	str	r3, [sp, #16]
 800415c:	9303      	str	r3, [sp, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	9202      	str	r2, [sp, #8]
 8004162:	2104      	movs	r1, #4
 8004164:	9101      	str	r1, [sp, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2328      	movs	r3, #40	; 0x28
 800416a:	4909      	ldr	r1, [pc, #36]	; (8004190 <_Z23getFont_verdana_40_4bppv+0x70>)
 800416c:	4805      	ldr	r0, [pc, #20]	; (8004184 <_Z23getFont_verdana_40_4bppv+0x64>)
 800416e:	f7ff fe67 	bl	8003e40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004172:	4808      	ldr	r0, [pc, #32]	; (8004194 <_Z23getFont_verdana_40_4bppv+0x74>)
 8004174:	f01c f962 	bl	802043c <atexit>
 8004178:	4801      	ldr	r0, [pc, #4]	; (8004180 <_Z23getFont_verdana_40_4bppv+0x60>)
 800417a:	f01c f920 	bl	80203be <__cxa_guard_release>
 800417e:	e7de      	b.n	800413e <_Z23getFont_verdana_40_4bppv+0x1e>
 8004180:	2400279c 	.word	0x2400279c
 8004184:	240027a0 	.word	0x240027a0
 8004188:	08024254 	.word	0x08024254
 800418c:	08024288 	.word	0x08024288
 8004190:	90007f58 	.word	0x90007f58
 8004194:	08004101 	.word	0x08004101

08004198 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 8004198:	2000      	movs	r0, #0
 800419a:	4770      	bx	lr

0800419c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 800419c:	2000      	movs	r0, #0
 800419e:	4770      	bx	lr

080041a0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80041a0:	2000      	movs	r0, #0
 80041a2:	4770      	bx	lr

080041a4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80041a4:	b40e      	push	{r1, r2, r3}
 80041a6:	b500      	push	{lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	ab03      	add	r3, sp, #12
 80041ac:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80041b0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80041b2:	2100      	movs	r1, #0
 80041b4:	f012 f9d4 	bl	8016560 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80041b8:	b002      	add	sp, #8
 80041ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80041be:	b003      	add	sp, #12
 80041c0:	4770      	bx	lr

080041c2 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80041c2:	b40c      	push	{r2, r3}
 80041c4:	b500      	push	{lr}
 80041c6:	b083      	sub	sp, #12
 80041c8:	ab04      	add	r3, sp, #16
 80041ca:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80041ce:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80041d0:	f012 f9c6 	bl	8016560 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80041d4:	b003      	add	sp, #12
 80041d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80041da:	b002      	add	sp, #8
 80041dc:	4770      	bx	lr
	...

080041e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80041e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80041e6:	b133      	cbz	r3, 80041f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80041e8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80041ea:	b143      	cbz	r3, 80041fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 80041ec:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80041ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80041f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80041f4:	b94b      	cbnz	r3, 800420a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80041f6:	4620      	mov	r0, r4
 80041f8:	f013 fb4a 	bl	8017890 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 80041fc:	bd10      	pop	{r4, pc}
            assert(used > 0);
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8004202:	21c0      	movs	r1, #192	; 0xc0
 8004204:	481c      	ldr	r0, [pc, #112]	; (8004278 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8004206:	f01c f8fb 	bl	8020400 <__assert_func>
        substituteGlyphs();
 800420a:	f013 fc3f 	bl	8017a8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800420e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8004210:	2801      	cmp	r0, #1
 8004212:	d91d      	bls.n	8004250 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 8004214:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8004216:	1c4b      	adds	r3, r1, #1
 8004218:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800421a:	2b09      	cmp	r3, #9
 800421c:	d81e      	bhi.n	800425c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 800421e:	461a      	mov	r2, r3
 8004220:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004224:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004228:	f640 123f 	movw	r2, #2367	; 0x93f
 800422c:	4594      	cmp	ip, r2
 800422e:	d1e2      	bne.n	80041f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 8004230:	b1b8      	cbz	r0, 8004262 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 8004232:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 8004236:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004238:	2b09      	cmp	r3, #9
 800423a:	d900      	bls.n	800423e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 800423c:	2300      	movs	r3, #0
 800423e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004242:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8004244:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004248:	f640 133f 	movw	r3, #2367	; 0x93f
 800424c:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 800424e:	e7d2      	b.n	80041f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 8004252:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 8004254:	21c5      	movs	r1, #197	; 0xc5
 8004256:	4808      	ldr	r0, [pc, #32]	; (8004278 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8004258:	f01c f8d2 	bl	8020400 <__assert_func>
            return buffer[index < size ? index : index - size];
 800425c:	f1a3 020a 	sub.w	r2, r3, #10
 8004260:	e7de      	b.n	8004220 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 8004262:	4b03      	ldr	r3, [pc, #12]	; (8004270 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8004264:	4a03      	ldr	r2, [pc, #12]	; (8004274 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8004266:	21c0      	movs	r1, #192	; 0xc0
 8004268:	4803      	ldr	r0, [pc, #12]	; (8004278 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 800426a:	f01c f8c9 	bl	8020400 <__assert_func>
 800426e:	bf00      	nop
 8004270:	080228d0 	.word	0x080228d0
 8004274:	080228dc 	.word	0x080228dc
 8004278:	08022988 	.word	0x08022988
 800427c:	080229d4 	.word	0x080229d4
 8004280:	080229e4 	.word	0x080229e4

08004284 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8004284:	b508      	push	{r3, lr}
    fillInputBuffer();
 8004286:	f013 facc 	bl	8017822 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800428a:	bd08      	pop	{r3, pc}

0800428c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800428c:	b500      	push	{lr}
 800428e:	b087      	sub	sp, #28
 8004290:	f10d 0c08 	add.w	ip, sp, #8
 8004294:	e88c 0006 	stmia.w	ip, {r1, r2}
 8004298:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 800429a:	ab0a      	add	r3, sp, #40	; 0x28
 800429c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	9b08      	ldr	r3, [sp, #32]
 80042a6:	4661      	mov	r1, ip
 80042a8:	f010 fe3c 	bl	8014f24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80042ac:	b007      	add	sp, #28
 80042ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080042b4 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80042b4:	bb40      	cbnz	r0, 8004308 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 80042b6:	b538      	push	{r3, r4, r5, lr}
 80042b8:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80042bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80042c0:	b1c3      	cbz	r3, 80042f4 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	4419      	add	r1, r3
 80042c6:	4812      	ldr	r0, [pc, #72]	; (8004310 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80042c8:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	4419      	add	r1, r3
 80042ce:	4811      	ldr	r0, [pc, #68]	; (8004314 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80042d0:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80042d2:	689c      	ldr	r4, [r3, #8]
 80042d4:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 80042d6:	b164      	cbz	r4, 80042f2 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 80042d8:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80042da:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80042dc:	f000 f856 	bl	800438c <_ZN17TypedTextDatabase8getFontsEv>
 80042e0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80042e2:	f000 f851 	bl	8004388 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80042e8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80042ec:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80042f0:	8018      	strh	r0, [r3, #0]
    }
}
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80042f6:	490c      	ldr	r1, [pc, #48]	; (8004328 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80042f8:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80042fc:	490b      	ldr	r1, [pc, #44]	; (800432c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 80042fe:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8004302:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004306:	e7e6      	b.n	80042d6 <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	240027c8 	.word	0x240027c8
 8004310:	240027cc 	.word	0x240027cc
 8004314:	240027d0 	.word	0x240027d0
 8004318:	240027d4 	.word	0x240027d4
 800431c:	2400c844 	.word	0x2400c844
 8004320:	2400c84c 	.word	0x2400c84c
 8004324:	2400c848 	.word	0x2400c848
 8004328:	90007f74 	.word	0x90007f74
 800432c:	90007f68 	.word	0x90007f68
 8004330:	90007f90 	.word	0x90007f90

08004334 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a04      	ldr	r2, [pc, #16]	; (800434c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
 8004340:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	240027cc 	.word	0x240027cc
 800434c:	240027d0 	.word	0x240027d0

08004350 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdana_18_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004350:	2801      	cmp	r0, #1
 8004352:	d000      	beq.n	8004356 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8004354:	4770      	bx	lr
 8004356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800435a:	4299      	cmp	r1, r3
 800435c:	d1fa      	bne.n	8004354 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800435e:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8004360:	f7ff fe42 	bl	8003fe8 <_Z23getFont_verdana_20_4bppv>
};
 8004364:	4c07      	ldr	r4, [pc, #28]	; (8004384 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004366:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004368:	f7ff feda 	bl	8004120 <_Z23getFont_verdana_40_4bppv>
};
 800436c:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 800436e:	f7ff fda1 	bl	8003eb4 <_Z23getFont_verdana_10_4bppv>
};
 8004372:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_34_4bpp()),
 8004374:	f7ff fe84 	bl	8004080 <_Z23getFont_verdana_34_4bppv>
};
 8004378:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_18_4bpp())
 800437a:	f7ff fde7 	bl	8003f4c <_Z23getFont_verdana_18_4bppv>
};
 800437e:	6120      	str	r0, [r4, #16]
} // namespace TypedTextDatabase
 8004380:	bd10      	pop	{r4, pc}
 8004382:	bf00      	nop
 8004384:	240027d8 	.word	0x240027d8

08004388 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 8004388:	2003      	movs	r0, #3
 800438a:	4770      	bx	lr

0800438c <_ZN17TypedTextDatabase8getFontsEv>:
}
 800438c:	4800      	ldr	r0, [pc, #0]	; (8004390 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800438e:	4770      	bx	lr
 8004390:	240027d8 	.word	0x240027d8

08004394 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8004394:	b508      	push	{r3, lr}
 8004396:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800439a:	2001      	movs	r0, #1
 800439c:	f7ff ffd8 	bl	8004350 <_Z41__static_initialization_and_destruction_0ii>
 80043a0:	bd08      	pop	{r3, pc}

080043a2 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80043a2:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80043a4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80043a8:	b113      	cbz	r3, 80043b0 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 80043aa:	6803      	ldr	r3, [r0, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	4798      	blx	r3
        }
    }
 80043b0:	bd08      	pop	{r3, pc}

080043b2 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80043b2:	2000      	movs	r0, #0
 80043b4:	4770      	bx	lr

080043b6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80043b6:	8081      	strh	r1, [r0, #4]
    }
 80043b8:	4770      	bx	lr

080043ba <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80043ba:	80c1      	strh	r1, [r0, #6]
    }
 80043bc:	4770      	bx	lr

080043be <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80043be:	8101      	strh	r1, [r0, #8]
    }
 80043c0:	4770      	bx	lr

080043c2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80043c2:	8141      	strh	r1, [r0, #10]
    }
 80043c4:	4770      	bx	lr

080043c6 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80043c6:	4770      	bx	lr

080043c8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80043c8:	4770      	bx	lr

080043ca <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80043ca:	4770      	bx	lr

080043cc <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80043cc:	4770      	bx	lr

080043ce <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80043ce:	4770      	bx	lr

080043d0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80043d0:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 80043d2:	6804      	ldr	r4, [r0, #0]
 80043d4:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80043d6:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 80043da:	eba1 010c 	sub.w	r1, r1, ip
 80043de:	88c3      	ldrh	r3, [r0, #6]
 80043e0:	1ad2      	subs	r2, r2, r3
 80043e2:	b212      	sxth	r2, r2
 80043e4:	b209      	sxth	r1, r1
 80043e6:	47a0      	blx	r4
    }
 80043e8:	bd10      	pop	{r4, pc}

080043ea <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80043ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ee:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80043f0:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80043f2:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80043f4:	6813      	ldr	r3, [r2, #0]
 80043f6:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80043f8:	6010      	str	r0, [r2, #0]
    }
 80043fa:	4770      	bx	lr

080043fc <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80043fc:	4770      	bx	lr

080043fe <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80043fe:	4770      	bx	lr

08004400 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004400:	4770      	bx	lr

08004402 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004402:	4770      	bx	lr

08004404 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004404:	4770      	bx	lr

08004406 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8004406:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800440a:	b11a      	cbz	r2, 8004414 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 800440c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8004410:	b102      	cbz	r2, 8004414 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8004412:	6018      	str	r0, [r3, #0]
        }
    }
 8004414:	4770      	bx	lr
	...

08004418 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8004418:	4a04      	ldr	r2, [pc, #16]	; (800442c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 800441a:	6002      	str	r2, [r0, #0]
    {
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 800441e:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8004420:	4a04      	ldr	r2, [pc, #16]	; (8004434 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 8004422:	6042      	str	r2, [r0, #4]
    {
 8004424:	4a04      	ldr	r2, [pc, #16]	; (8004438 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 8004426:	6042      	str	r2, [r0, #4]
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	08022b7c 	.word	0x08022b7c
 8004430:	08023af0 	.word	0x08023af0
 8004434:	080234e4 	.word	0x080234e4
 8004438:	08023a08 	.word	0x08023a08

0800443c <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 800443c:	b410      	push	{r4}
 800443e:	4a0b      	ldr	r2, [pc, #44]	; (800446c <_ZN18mainScreenViewBaseD1Ev+0x30>)
 8004440:	6002      	str	r2, [r0, #0]
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <_ZN18mainScreenViewBaseD1Ev+0x34>)
 8004444:	66c2      	str	r2, [r0, #108]	; 0x6c
class Widget : public Drawable
 8004446:	490b      	ldr	r1, [pc, #44]	; (8004474 <_ZN18mainScreenViewBaseD1Ev+0x38>)
 8004448:	66c1      	str	r1, [r0, #108]	; 0x6c
 800444a:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <_ZN18mainScreenViewBaseD1Ev+0x3c>)
 800444c:	66c2      	str	r2, [r0, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 800444e:	4c0b      	ldr	r4, [pc, #44]	; (800447c <_ZN18mainScreenViewBaseD1Ev+0x40>)
 8004450:	6404      	str	r4, [r0, #64]	; 0x40
 8004452:	6401      	str	r1, [r0, #64]	; 0x40
 8004454:	6402      	str	r2, [r0, #64]	; 0x40
 8004456:	490a      	ldr	r1, [pc, #40]	; (8004480 <_ZN18mainScreenViewBaseD1Ev+0x44>)
 8004458:	6001      	str	r1, [r0, #0]
 800445a:	490a      	ldr	r1, [pc, #40]	; (8004484 <_ZN18mainScreenViewBaseD1Ev+0x48>)
 800445c:	6001      	str	r1, [r0, #0]
 800445e:	490a      	ldr	r1, [pc, #40]	; (8004488 <_ZN18mainScreenViewBaseD1Ev+0x4c>)
 8004460:	6041      	str	r1, [r0, #4]
 8004462:	6042      	str	r2, [r0, #4]
 8004464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	08022bb0 	.word	0x08022bb0
 8004470:	08023854 	.word	0x08023854
 8004474:	08022b14 	.word	0x08022b14
 8004478:	08023a08 	.word	0x08023a08
 800447c:	0802375c 	.word	0x0802375c
 8004480:	08022b7c 	.word	0x08022b7c
 8004484:	08023af0 	.word	0x08023af0
 8004488:	080234e4 	.word	0x080234e4

0800448c <_ZN18mainScreenViewBase11setupScreenEv>:
}

void mainScreenViewBase::setupScreen()
{

}
 800448c:	4770      	bx	lr
	...

08004490 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 8004490:	b510      	push	{r4, lr}
 8004492:	4604      	mov	r4, r0
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 8004496:	6003      	str	r3, [r0, #0]
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 800449a:	6003      	str	r3, [r0, #0]
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 800449e:	6043      	str	r3, [r0, #4]
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 80044a2:	6043      	str	r3, [r0, #4]
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	f01b ff7c 	bl	80203a2 <_ZdlPvj>
 80044aa:	4620      	mov	r0, r4
 80044ac:	bd10      	pop	{r4, pc}
 80044ae:	bf00      	nop
 80044b0:	08022b7c 	.word	0x08022b7c
 80044b4:	08023af0 	.word	0x08023af0
 80044b8:	080234e4 	.word	0x080234e4
 80044bc:	08023a08 	.word	0x08023a08

080044c0 <_ZN18mainScreenViewBaseD0Ev>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4604      	mov	r4, r0
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <_ZN18mainScreenViewBaseD0Ev+0x34>)
 80044c6:	6003      	str	r3, [r0, #0]
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <_ZN18mainScreenViewBaseD0Ev+0x38>)
 80044ca:	66c3      	str	r3, [r0, #108]	; 0x6c
 80044cc:	4a0b      	ldr	r2, [pc, #44]	; (80044fc <_ZN18mainScreenViewBaseD0Ev+0x3c>)
 80044ce:	66c2      	str	r2, [r0, #108]	; 0x6c
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <_ZN18mainScreenViewBaseD0Ev+0x40>)
 80044d2:	66c3      	str	r3, [r0, #108]	; 0x6c
 80044d4:	490b      	ldr	r1, [pc, #44]	; (8004504 <_ZN18mainScreenViewBaseD0Ev+0x44>)
 80044d6:	6401      	str	r1, [r0, #64]	; 0x40
 80044d8:	6402      	str	r2, [r0, #64]	; 0x40
 80044da:	6403      	str	r3, [r0, #64]	; 0x40
 80044dc:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <_ZN18mainScreenViewBaseD0Ev+0x48>)
 80044de:	6002      	str	r2, [r0, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <_ZN18mainScreenViewBaseD0Ev+0x4c>)
 80044e2:	6002      	str	r2, [r0, #0]
 80044e4:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <_ZN18mainScreenViewBaseD0Ev+0x50>)
 80044e6:	6042      	str	r2, [r0, #4]
 80044e8:	6043      	str	r3, [r0, #4]
 80044ea:	2198      	movs	r1, #152	; 0x98
 80044ec:	f01b ff59 	bl	80203a2 <_ZdlPvj>
 80044f0:	4620      	mov	r0, r4
 80044f2:	bd10      	pop	{r4, pc}
 80044f4:	08022bb0 	.word	0x08022bb0
 80044f8:	08023854 	.word	0x08023854
 80044fc:	08022b14 	.word	0x08022b14
 8004500:	08023a08 	.word	0x08023a08
 8004504:	0802375c 	.word	0x0802375c
 8004508:	08022b7c 	.word	0x08022b7c
 800450c:	08023af0 	.word	0x08023af0
 8004510:	080234e4 	.word	0x080234e4

08004514 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 8004514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004518:	b083      	sub	sp, #12
 800451a:	4607      	mov	r7, r0
        : presenter(0)
 800451c:	f012 fbda 	bl	8016cd4 <_ZN8touchgfx6ScreenC1Ev>
 8004520:	4b47      	ldr	r3, [pc, #284]	; (8004640 <_ZN18mainScreenViewBaseC1Ev+0x12c>)
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	2400      	movs	r4, #0
 8004526:	63fc      	str	r4, [r7, #60]	; 0x3c
 8004528:	463d      	mov	r5, r7
 800452a:	4b46      	ldr	r3, [pc, #280]	; (8004644 <_ZN18mainScreenViewBaseC1Ev+0x130>)
 800452c:	f845 3b40 	str.w	r3, [r5], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004530:	f04f 0926 	mov.w	r9, #38	; 0x26
 8004534:	464a      	mov	r2, r9
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f01c f8f7 	bl	802072c <memset>
          visible(true)
 800453e:	f8df b114 	ldr.w	fp, [pc, #276]	; 8004654 <_ZN18mainScreenViewBaseC1Ev+0x140>
 8004542:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8004546:	80ac      	strh	r4, [r5, #4]
 8004548:	80ec      	strh	r4, [r5, #6]
 800454a:	812c      	strh	r4, [r5, #8]
 800454c:	816c      	strh	r4, [r5, #10]
 800454e:	81ac      	strh	r4, [r5, #12]
 8004550:	81ec      	strh	r4, [r5, #14]
 8004552:	822c      	strh	r4, [r5, #16]
 8004554:	826c      	strh	r4, [r5, #18]
 8004556:	616c      	str	r4, [r5, #20]
 8004558:	61ac      	str	r4, [r5, #24]
 800455a:	61ec      	str	r4, [r5, #28]
 800455c:	842c      	strh	r4, [r5, #32]
 800455e:	846c      	strh	r4, [r5, #34]	; 0x22
 8004560:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8004564:	f04f 0a01 	mov.w	sl, #1
 8004568:	f885 a025 	strb.w	sl, [r5, #37]	; 0x25
 800456c:	4b36      	ldr	r3, [pc, #216]	; (8004648 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 800456e:	643b      	str	r3, [r7, #64]	; 0x40
 8004570:	4b36      	ldr	r3, [pc, #216]	; (800464c <_ZN18mainScreenViewBaseC1Ev+0x138>)
 8004572:	643b      	str	r3, [r7, #64]	; 0x40
 8004574:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004578:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
        : color(col)
 800457c:	62ac      	str	r4, [r5, #40]	; 0x28
 800457e:	f107 066c 	add.w	r6, r7, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004586:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 800458a:	464a      	mov	r2, r9
 800458c:	4621      	mov	r1, r4
 800458e:	4630      	mov	r0, r6
 8004590:	f01c f8cc 	bl	802072c <memset>
 8004594:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8004598:	80b4      	strh	r4, [r6, #4]
 800459a:	80f4      	strh	r4, [r6, #6]
 800459c:	8134      	strh	r4, [r6, #8]
 800459e:	8174      	strh	r4, [r6, #10]
 80045a0:	81b4      	strh	r4, [r6, #12]
 80045a2:	81f4      	strh	r4, [r6, #14]
 80045a4:	8234      	strh	r4, [r6, #16]
 80045a6:	8274      	strh	r4, [r6, #18]
 80045a8:	6174      	str	r4, [r6, #20]
 80045aa:	61b4      	str	r4, [r6, #24]
 80045ac:	61f4      	str	r4, [r6, #28]
 80045ae:	8434      	strh	r4, [r6, #32]
 80045b0:	8474      	strh	r4, [r6, #34]	; 0x22
 80045b2:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 80045b6:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 80045ba:	4b23      	ldr	r3, [pc, #140]	; (8004648 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 80045bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <_ZN18mainScreenViewBaseC1Ev+0x13c>)
 80045c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c2:	f8bd 3000 	ldrh.w	r3, [sp]
 80045c6:	84f3      	strh	r3, [r6, #38]	; 0x26
 80045c8:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 80045cc:	4669      	mov	r1, sp
 80045ce:	4630      	mov	r0, r6
 80045d0:	f00f f876 	bl	80136c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80045d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	4621      	mov	r1, r4
 80045da:	4628      	mov	r0, r5
 80045dc:	4798      	blx	r3
        setY(y);
 80045de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	4621      	mov	r1, r4
 80045e4:	4628      	mov	r0, r5
 80045e6:	4798      	blx	r3
        setWidth(width);
 80045e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80045f0:	4628      	mov	r0, r5
 80045f2:	4798      	blx	r3
        setHeight(height);
 80045f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80045fc:	4628      	mov	r0, r5
 80045fe:	4798      	blx	r3
        : color(col)
 8004600:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004604:	66bb      	str	r3, [r7, #104]	; 0x68
        setX(x);
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4621      	mov	r1, r4
 800460c:	4630      	mov	r0, r6
 800460e:	4798      	blx	r3
        setY(y);
 8004610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	4621      	mov	r1, r4
 8004616:	4630      	mov	r0, r6
 8004618:	4798      	blx	r3
 800461a:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 800461e:	a901      	add	r1, sp, #4
 8004620:	4630      	mov	r0, r6
 8004622:	f00f f84d 	bl	80136c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004626:	1d3c      	adds	r4, r7, #4
 8004628:	4629      	mov	r1, r5
 800462a:	4620      	mov	r0, r4
 800462c:	f00d f9f0 	bl	8011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004630:	4631      	mov	r1, r6
 8004632:	4620      	mov	r0, r4
 8004634:	f00d f9ec 	bl	8011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004638:	4638      	mov	r0, r7
 800463a:	b003      	add	sp, #12
 800463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004640:	08022b7c 	.word	0x08022b7c
 8004644:	08022bb0 	.word	0x08022bb0
 8004648:	08022b14 	.word	0x08022b14
 800464c:	0802375c 	.word	0x0802375c
 8004650:	08023854 	.word	0x08023854
 8004654:	08023a08 	.word	0x08023a08

08004658 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8004658:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800465a:	4770      	bx	lr

0800465c <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800465c:	b530      	push	{r4, r5, lr}
 800465e:	b085      	sub	sp, #20
 8004660:	4604      	mov	r4, r0
        rect.width = width;
 8004662:	8101      	strh	r1, [r0, #8]
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8004664:	466d      	mov	r5, sp
 8004666:	6803      	ldr	r3, [r0, #0]
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466c:	4601      	mov	r1, r0
 800466e:	4628      	mov	r0, r5
 8004670:	4798      	blx	r3
 8004672:	343c      	adds	r4, #60	; 0x3c
 8004674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800467c:	b005      	add	sp, #20
 800467e:	bd30      	pop	{r4, r5, pc}

08004680 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8004680:	b530      	push	{r4, r5, lr}
 8004682:	b085      	sub	sp, #20
 8004684:	4604      	mov	r4, r0
        rect.height = height;
 8004686:	8141      	strh	r1, [r0, #10]
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004688:	466d      	mov	r5, sp
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004690:	4601      	mov	r1, r0
 8004692:	4628      	mov	r0, r5
 8004694:	4798      	blx	r3
 8004696:	343c      	adds	r4, #60	; 0x3c
 8004698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800469c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80046a0:	b005      	add	sp, #20
 80046a2:	bd30      	pop	{r4, r5, pc}

080046a4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80046a4:	2200      	movs	r2, #0
 80046a6:	8002      	strh	r2, [r0, #0]
 80046a8:	8042      	strh	r2, [r0, #2]
 80046aa:	8082      	strh	r2, [r0, #4]
 80046ac:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80046ae:	4770      	bx	lr

080046b0 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80046b0:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 80046b4:	4770      	bx	lr

080046b6 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80046b6:	b538      	push	{r3, r4, r5, lr}
 80046b8:	4604      	mov	r4, r0
 80046ba:	4615      	mov	r5, r2
    {
        setX(x);
 80046bc:	6803      	ldr	r3, [r0, #0]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4798      	blx	r3
        setBaselineY(baselineY);
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c6:	4629      	mov	r1, r5
 80046c8:	4620      	mov	r0, r4
 80046ca:	4798      	blx	r3
    }
 80046cc:	bd38      	pop	{r3, r4, r5, pc}

080046ce <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 80046ce:	2000      	movs	r0, #0
 80046d0:	4770      	bx	lr

080046d2 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80046d2:	2200      	movs	r2, #0
 80046d4:	8002      	strh	r2, [r0, #0]
 80046d6:	8042      	strh	r2, [r0, #2]
 80046d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046dc:	8081      	strh	r1, [r0, #4]
 80046de:	80c1      	strh	r1, [r0, #6]
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 80046e0:	6082      	str	r2, [r0, #8]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 80046e2:	4770      	bx	lr

080046e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80046e4:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80046e6:	4770      	bx	lr

080046e8 <_ZN14CustomKeyboardD1Ev>:
 */
class CustomKeyboard : public Container
{
public:
    CustomKeyboard();
    virtual ~CustomKeyboard() { }
 80046e8:	b4f0      	push	{r4, r5, r6, r7}
 80046ea:	4a23      	ldr	r2, [pc, #140]	; (8004778 <_ZN14CustomKeyboardD1Ev+0x90>)
 80046ec:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80046ee:	4a23      	ldr	r2, [pc, #140]	; (800477c <_ZN14CustomKeyboardD1Ev+0x94>)
 80046f0:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    }
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <_ZN14CustomKeyboardD1Ev+0x98>)
 80046f6:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80046fa:	4922      	ldr	r1, [pc, #136]	; (8004784 <_ZN14CustomKeyboardD1Ev+0x9c>)
 80046fc:	f8c0 120c 	str.w	r1, [r0, #524]	; 0x20c
    {
 8004700:	4a21      	ldr	r2, [pc, #132]	; (8004788 <_ZN14CustomKeyboardD1Ev+0xa0>)
 8004702:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004706:	f8c0 11fc 	str.w	r1, [r0, #508]	; 0x1fc
    {
 800470a:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800470e:	f8c0 11ec 	str.w	r1, [r0, #492]	; 0x1ec
    {
 8004712:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004716:	f8c0 11dc 	str.w	r1, [r0, #476]	; 0x1dc
    {
 800471a:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
class TextArea : public Widget
 800471e:	4e1b      	ldr	r6, [pc, #108]	; (800478c <_ZN14CustomKeyboardD1Ev+0xa4>)
 8004720:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
    {
 8004724:	4d1a      	ldr	r5, [pc, #104]	; (8004790 <_ZN14CustomKeyboardD1Ev+0xa8>)
 8004726:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 800472a:	491a      	ldr	r1, [pc, #104]	; (8004794 <_ZN14CustomKeyboardD1Ev+0xac>)
 800472c:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
    {
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <_ZN14CustomKeyboardD1Ev+0xb0>)
 8004732:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 * A keyboard with multiple key mappings e.g. lower case alpha, upper case alpha and
 * numeric mappings can be created by implementing callback methods for shift and mode
 * areas in the provided bitmap and then changing the KeyMappingList when those areas
 * are pressed.
 */
class Keyboard : public Container
 8004736:	4c19      	ldr	r4, [pc, #100]	; (800479c <_ZN14CustomKeyboardD1Ev+0xb4>)
 8004738:	62c4      	str	r4, [r0, #44]	; 0x2c
class Image : public Widget
 800473a:	4c19      	ldr	r4, [pc, #100]	; (80047a0 <_ZN14CustomKeyboardD1Ev+0xb8>)
 800473c:	f8c0 40e4 	str.w	r4, [r0, #228]	; 0xe4
 8004740:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8004744:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004748:	4f16      	ldr	r7, [pc, #88]	; (80047a4 <_ZN14CustomKeyboardD1Ev+0xbc>)
 800474a:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 800474e:	4f16      	ldr	r7, [pc, #88]	; (80047a8 <_ZN14CustomKeyboardD1Ev+0xc0>)
 8004750:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8004754:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 8004758:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 800475c:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 8004760:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8004764:	6644      	str	r4, [r0, #100]	; 0x64
 8004766:	6641      	str	r1, [r0, #100]	; 0x64
 8004768:	6642      	str	r2, [r0, #100]	; 0x64
class Container : public Drawable
 800476a:	4910      	ldr	r1, [pc, #64]	; (80047ac <_ZN14CustomKeyboardD1Ev+0xc4>)
 800476c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800476e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8004770:	6001      	str	r1, [r0, #0]
 8004772:	6002      	str	r2, [r0, #0]
 8004774:	bcf0      	pop	{r4, r5, r6, r7}
 8004776:	4770      	bx	lr
 8004778:	08022dc4 	.word	0x08022dc4
 800477c:	08022dac 	.word	0x08022dac
 8004780:	08022d7c 	.word	0x08022d7c
 8004784:	08022d94 	.word	0x08022d94
 8004788:	08022100 	.word	0x08022100
 800478c:	080236cc 	.word	0x080236cc
 8004790:	080220a4 	.word	0x080220a4
 8004794:	08022b14 	.word	0x08022b14
 8004798:	08023a08 	.word	0x08023a08
 800479c:	080238d4 	.word	0x080238d4
 80047a0:	08023854 	.word	0x08023854
 80047a4:	08022cec 	.word	0x08022cec
 80047a8:	080237c4 	.word	0x080237c4
 80047ac:	080234e4 	.word	0x080234e4

080047b0 <_ZN14CustomKeyboard18donePressedHandlerEv>:
    uppercaseKeys = !uppercaseKeys;
    setKeyMappingList();
}

void CustomKeyboard::donePressedHandler()
{
 80047b0:	b510      	push	{r4, lr}
 80047b2:	4604      	mov	r4, r0
    if (doneReturnCallback && doneReturnCallback->isValid())
 80047b4:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
 80047b8:	b150      	cbz	r0, 80047d0 <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
 80047ba:	6803      	ldr	r3, [r0, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4798      	blx	r3
 80047c0:	b130      	cbz	r0, 80047d0 <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
    {
        doneReturnCallback->execute(buffer);
 80047c2:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
 80047c6:	6803      	ldr	r3, [r0, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f504 718a 	add.w	r1, r4, #276	; 0x114
 80047ce:	4798      	blx	r3
    }
}
 80047d0:	bd10      	pop	{r4, pc}
	...

080047d4 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80047d4:	4a02      	ldr	r2, [pc, #8]	; (80047e0 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0xc>)
 80047d6:	6002      	str	r2, [r0, #0]
    }
 80047d8:	4a02      	ldr	r2, [pc, #8]	; (80047e4 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0x10>)
 80047da:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	08022dac 	.word	0x08022dac
 80047e4:	08022d7c 	.word	0x08022d7c

080047e8 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80047e8:	4a02      	ldr	r2, [pc, #8]	; (80047f4 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0xc>)
 80047ea:	6002      	str	r2, [r0, #0]
    {
 80047ec:	4a02      	ldr	r2, [pc, #8]	; (80047f8 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0x10>)
 80047ee:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	08022d94 	.word	0x08022d94
 80047f8:	08022100 	.word	0x08022100

080047fc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80047fc:	4a06      	ldr	r2, [pc, #24]	; (8004818 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x1c>)
 80047fe:	6002      	str	r2, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004800:	4a06      	ldr	r2, [pc, #24]	; (800481c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8004802:	6002      	str	r2, [r0, #0]
 8004804:	4a06      	ldr	r2, [pc, #24]	; (8004820 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x24>)
 8004806:	6002      	str	r2, [r0, #0]
 8004808:	4a06      	ldr	r2, [pc, #24]	; (8004824 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x28>)
 800480a:	6282      	str	r2, [r0, #40]	; 0x28
 800480c:	4a06      	ldr	r2, [pc, #24]	; (8004828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x2c>)
 800480e:	6002      	str	r2, [r0, #0]
 8004810:	4a06      	ldr	r2, [pc, #24]	; (800482c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x30>)
 8004812:	6002      	str	r2, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	08022cec 	.word	0x08022cec
 800481c:	080237c4 	.word	0x080237c4
 8004820:	080236cc 	.word	0x080236cc
 8004824:	080220a4 	.word	0x080220a4
 8004828:	08022b14 	.word	0x08022b14
 800482c:	08023a08 	.word	0x08023a08

08004830 <_Z41__static_initialization_and_destruction_0ii>:

    uppercaseKeys = true;
    firstCharacterEntry = true;
    alphaKeys = true;
    setKeyMappingList();
}
 8004830:	2801      	cmp	r0, #1
 8004832:	d006      	beq.n	8004842 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8004834:	b920      	cbnz	r0, 8004840 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8004836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800483a:	4299      	cmp	r1, r3
 800483c:	f000 8222 	beq.w	8004c84 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8004840:	4770      	bx	lr
 8004842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004846:	4299      	cmp	r1, r3
 8004848:	d1f4      	bne.n	8004834 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800484a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 800484e:	4bf0      	ldr	r3, [pc, #960]	; (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	240c      	movs	r4, #12
 8004856:	805c      	strh	r4, [r3, #2]
 8004858:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800485c:	f8a3 e004 	strh.w	lr, [r3, #4]
 8004860:	2224      	movs	r2, #36	; 0x24
 8004862:	80da      	strh	r2, [r3, #6]
 8004864:	811a      	strh	r2, [r3, #8]
 8004866:	f04f 0c05 	mov.w	ip, #5
 800486a:	f8a3 c00a 	strh.w	ip, [r3, #10]
 800486e:	f04f 0502 	mov.w	r5, #2
 8004872:	731d      	strb	r5, [r3, #12]
 8004874:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8004878:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800487c:	f8a3 e010 	strh.w	lr, [r3, #16]
 8004880:	825a      	strh	r2, [r3, #18]
 8004882:	829a      	strh	r2, [r3, #20]
 8004884:	f8a3 c016 	strh.w	ip, [r3, #22]
 8004888:	f04f 0503 	mov.w	r5, #3
 800488c:	761d      	strb	r5, [r3, #24]
 800488e:	f04f 0660 	mov.w	r6, #96	; 0x60
 8004892:	835e      	strh	r6, [r3, #26]
 8004894:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8004898:	83da      	strh	r2, [r3, #30]
 800489a:	841a      	strh	r2, [r3, #32]
 800489c:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 80048a0:	f04f 0504 	mov.w	r5, #4
 80048a4:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 80048a8:	f04f 088a 	mov.w	r8, #138	; 0x8a
 80048ac:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 80048b0:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048b6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80048b8:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 80048bc:	f883 c030 	strb.w	ip, [r3, #48]	; 0x30
 80048c0:	27b4      	movs	r7, #180	; 0xb4
 80048c2:	865f      	strh	r7, [r3, #50]	; 0x32
 80048c4:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 80048c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80048ca:	871a      	strh	r2, [r3, #56]	; 0x38
 80048cc:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 80048d0:	f04f 0506 	mov.w	r5, #6
 80048d4:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 80048d8:	f04f 05de 	mov.w	r5, #222	; 0xde
 80048dc:	87dd      	strh	r5, [r3, #62]	; 0x3e
 80048de:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 80048e2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80048e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80048ea:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 80048ee:	f04f 0907 	mov.w	r9, #7
 80048f2:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 80048f6:	f44f 7984 	mov.w	r9, #264	; 0x108
 80048fa:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80048fe:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8004902:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004906:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800490a:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 800490e:	2508      	movs	r5, #8
 8004910:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
 8004914:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8004918:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 800491c:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8004920:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8004924:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004928:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 800492c:	2509      	movs	r5, #9
 800492e:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8004932:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8004936:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 800493a:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 800493e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8004942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004946:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 800494a:	250a      	movs	r5, #10
 800494c:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8004950:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8004954:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8004958:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 800495c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004960:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8004964:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8004968:	f04f 090b 	mov.w	r9, #11
 800496c:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8004970:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8004974:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8004978:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 800497c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8004980:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8004984:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8004988:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 800498c:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8004990:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8004994:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8004998:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800499c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80049a0:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 80049a4:	f04f 060d 	mov.w	r6, #13
 80049a8:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 80049ac:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 80049b0:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 80049b4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80049b8:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80049bc:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 80049c0:	f04f 0a0e 	mov.w	sl, #14
 80049c4:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 80049c8:	f04f 0660 	mov.w	r6, #96	; 0x60
 80049cc:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 80049d0:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 80049d4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80049d8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80049dc:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 80049e0:	f04f 0a0f 	mov.w	sl, #15
 80049e4:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 80049e8:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 80049ec:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 80049f0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80049f4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80049f8:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 80049fc:	f04f 0a10 	mov.w	sl, #16
 8004a00:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8004a04:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8004a08:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8004a0c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8004a10:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8004a14:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8004a18:	f04f 0a11 	mov.w	sl, #17
 8004a1c:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8004a20:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8004a24:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8004a28:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8004a2c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8004a30:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8004a34:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8004a38:	f04f 0a12 	mov.w	sl, #18
 8004a3c:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8004a40:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8004a44:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8004a48:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8004a4c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8004a50:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8004a54:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8004a58:	f04f 0a13 	mov.w	sl, #19
 8004a5c:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8004a60:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8004a64:	4656      	mov	r6, sl
 8004a66:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8004a6a:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8004a6e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8004a72:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8004a76:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8004a7a:	f04f 0a14 	mov.w	sl, #20
 8004a7e:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8004a82:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8004a86:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8004a8a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8004a8e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8004a92:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8004a96:	f04f 0a15 	mov.w	sl, #21
 8004a9a:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8004a9e:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8004aa2:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8004aa6:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8004aaa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8004aae:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8004ab2:	f04f 0a16 	mov.w	sl, #22
 8004ab6:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8004aba:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8004abe:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8004ac2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8004ac6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8004aca:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8004ace:	f04f 0e17 	mov.w	lr, #23
 8004ad2:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8004ad6:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8004ada:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8004ade:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8004ae2:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8004ae6:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8004aea:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8004aee:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8004af2:	f04f 0918 	mov.w	r9, #24
 8004af6:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8004afa:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8004afe:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8004b02:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8004b06:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8004b0a:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8004b0e:	f04f 0819 	mov.w	r8, #25
 8004b12:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8004b16:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8004b1a:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8004b1e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8004b22:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8004b26:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8004b2a:	271a      	movs	r7, #26
 8004b2c:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8004b30:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8004b34:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8004b38:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8004b3c:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8004b40:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8004b44:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8004b48:	271b      	movs	r7, #27
 8004b4a:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8004b4e:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8004b52:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8004b56:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8004b5a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8004b5e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8004b62:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8004b66:	271c      	movs	r7, #28
 8004b68:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8004b6c:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8004b70:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8004b74:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8004b78:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8004b7c:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8004b80:	271d      	movs	r7, #29
 8004b82:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8004b86:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8004b8a:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8004b8e:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8004b92:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8004b96:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8004b9a:	271e      	movs	r7, #30
 8004b9c:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8004ba0:	f04f 0660 	mov.w	r6, #96	; 0x60
 8004ba4:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8004ba8:	26e2      	movs	r6, #226	; 0xe2
 8004baa:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8004bae:	f44f 7790 	mov.w	r7, #288	; 0x120
 8004bb2:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8004bb6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8004bba:	f04f 0707 	mov.w	r7, #7
 8004bbe:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8004bc2:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8004bc4:	801c      	strh	r4, [r3, #0]
 8004bc6:	f8a3 e002 	strh.w	lr, [r3, #2]
 8004bca:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8004bce:	f8a3 c004 	strh.w	ip, [r3, #4]
 8004bd2:	80da      	strh	r2, [r3, #6]
};
 8004bd4:	2700      	movs	r7, #0
 8004bd6:	609f      	str	r7, [r3, #8]
 8004bd8:	f04f 0803 	mov.w	r8, #3
 8004bdc:	f8a3 800c 	strh.w	r8, [r3, #12]
 8004be0:	821d      	strh	r5, [r3, #16]
 8004be2:	f8a3 e012 	strh.w	lr, [r3, #18]
 8004be6:	f8a3 c014 	strh.w	ip, [r3, #20]
 8004bea:	82da      	strh	r2, [r3, #22]
 8004bec:	619f      	str	r7, [r3, #24]
 8004bee:	f04f 0e02 	mov.w	lr, #2
 8004bf2:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8004bf6:	841c      	strh	r4, [r3, #32]
 8004bf8:	845e      	strh	r6, [r3, #34]	; 0x22
 8004bfa:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8004bfe:	84da      	strh	r2, [r3, #38]	; 0x26
 8004c00:	629f      	str	r7, [r3, #40]	; 0x28
 8004c02:	f04f 0406 	mov.w	r4, #6
 8004c06:	859c      	strh	r4, [r3, #44]	; 0x2c
 8004c08:	861d      	strh	r5, [r3, #48]	; 0x30
 8004c0a:	865e      	strh	r6, [r3, #50]	; 0x32
 8004c0c:	e004      	b.n	8004c18 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8004c0e:	bf00      	nop
 8004c10:	2400284c 	.word	0x2400284c
 8004c14:	240027ec 	.word	0x240027ec
 8004c18:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8004c1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c1e:	639f      	str	r7, [r3, #56]	; 0x38
 8004c20:	f04f 0204 	mov.w	r2, #4
 8004c24:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004c26:	4604      	mov	r4, r0
 8004c28:	3340      	adds	r3, #64	; 0x40
 8004c2a:	2c00      	cmp	r4, #0
 8004c2c:	db0b      	blt.n	8004c46 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	805a      	strh	r2, [r3, #2]
 8004c3c:	809a      	strh	r2, [r3, #4]
 8004c3e:	80da      	strh	r2, [r3, #6]
 8004c40:	3310      	adds	r3, #16
 8004c42:	3c01      	subs	r4, #1
 8004c44:	e7f1      	b.n	8004c2a <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8004c48:	2205      	movs	r2, #5
 8004c4a:	825a      	strh	r2, [r3, #18]
 8004c4c:	222d      	movs	r2, #45	; 0x2d
 8004c4e:	829a      	strh	r2, [r3, #20]
 8004c50:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8004c54:	82da      	strh	r2, [r3, #22]
 8004c56:	2246      	movs	r2, #70	; 0x46
 8004c58:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8004c5a:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8004c5c:	61da      	str	r2, [r3, #28]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	841a      	strh	r2, [r3, #32]
        : color(col)
 8004c62:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
 8004c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c6c:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8004c6e:	b918      	cbnz	r0, 8004c78 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8004c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c74:	4299      	cmp	r1, r3
 8004c76:	d001      	beq.n	8004c7c <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8004c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8004c7e:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8004c80:	61da      	str	r2, [r3, #28]
 8004c82:	e7f9      	b.n	8004c78 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8004c84:	4b01      	ldr	r3, [pc, #4]	; (8004c8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8004c86:	4a02      	ldr	r2, [pc, #8]	; (8004c90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8004c88:	61da      	str	r2, [r3, #28]
 8004c8a:	4770      	bx	lr
 8004c8c:	24000010 	.word	0x24000010
 8004c90:	080220a4 	.word	0x080220a4

08004c94 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt>:
    virtual void execute(T1 t1)
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004c98:	6844      	ldr	r4, [r0, #4]
 8004c9a:	68c2      	ldr	r2, [r0, #12]
 8004c9c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004ca0:	f012 0f01 	tst.w	r2, #1
 8004ca4:	d102      	bne.n	8004cac <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x18>
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4798      	blx	r3
    }
 8004caa:	bd10      	pop	{r4, pc}
 8004cac:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8004cb0:	f854 200c 	ldr.w	r2, [r4, ip]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	58d3      	ldr	r3, [r2, r3]
 8004cb8:	e7f6      	b.n	8004ca8 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x14>

08004cba <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004cba:	6843      	ldr	r3, [r0, #4]
 8004cbc:	b14b      	cbz	r3, 8004cd2 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x18>
 8004cbe:	6883      	ldr	r3, [r0, #8]
 8004cc0:	b10b      	cbz	r3, 8004cc6 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0xc>
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	4770      	bx	lr
 8004cc6:	68c3      	ldr	r3, [r0, #12]
 8004cc8:	f013 0f01 	tst.w	r3, #1
 8004ccc:	d003      	beq.n	8004cd6 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x1c>
 8004cce:	2001      	movs	r0, #1
 8004cd0:	4770      	bx	lr
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	4770      	bx	lr
 8004cd6:	2000      	movs	r0, #0
    }
 8004cd8:	4770      	bx	lr

08004cda <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv>:
    virtual void execute()
 8004cda:	b508      	push	{r3, lr}
 8004cdc:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8004cde:	6841      	ldr	r1, [r0, #4]
 8004ce0:	68c2      	ldr	r2, [r0, #12]
 8004ce2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8004ce6:	f012 0f01 	tst.w	r2, #1
 8004cea:	d102      	bne.n	8004cf2 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x18>
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	4798      	blx	r3
    }
 8004cf0:	bd08      	pop	{r3, pc}
 8004cf2:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8004cf6:	f851 200c 	ldr.w	r2, [r1, ip]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	58d3      	ldr	r3, [r2, r3]
 8004cfe:	e7f6      	b.n	8004cee <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x14>

08004d00 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004d00:	6843      	ldr	r3, [r0, #4]
 8004d02:	b14b      	cbz	r3, 8004d18 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x18>
 8004d04:	6883      	ldr	r3, [r0, #8]
 8004d06:	b10b      	cbz	r3, 8004d0c <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0xc>
 8004d08:	2001      	movs	r0, #1
 8004d0a:	4770      	bx	lr
 8004d0c:	68c3      	ldr	r3, [r0, #12]
 8004d0e:	f013 0f01 	tst.w	r3, #1
 8004d12:	d003      	beq.n	8004d1c <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x1c>
 8004d14:	2001      	movs	r0, #1
 8004d16:	4770      	bx	lr
 8004d18:	2000      	movs	r0, #0
 8004d1a:	4770      	bx	lr
 8004d1c:	2000      	movs	r0, #0
    }
 8004d1e:	4770      	bx	lr

08004d20 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4604      	mov	r4, r0
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x18>)
 8004d26:	6003      	str	r3, [r0, #0]
    {
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x1c>)
 8004d2a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004d2c:	2110      	movs	r1, #16
 8004d2e:	f01b fb38 	bl	80203a2 <_ZdlPvj>
 8004d32:	4620      	mov	r0, r4
 8004d34:	bd10      	pop	{r4, pc}
 8004d36:	bf00      	nop
 8004d38:	08022d94 	.word	0x08022d94
 8004d3c:	08022100 	.word	0x08022100

08004d40 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004d40:	b510      	push	{r4, lr}
 8004d42:	4604      	mov	r4, r0
 8004d44:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x28>)
 8004d46:	6003      	str	r3, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004d48:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x2c>)
 8004d4a:	6003      	str	r3, [r0, #0]
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x30>)
 8004d4e:	6003      	str	r3, [r0, #0]
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x34>)
 8004d52:	6283      	str	r3, [r0, #40]	; 0x28
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x38>)
 8004d56:	6003      	str	r3, [r0, #0]
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x3c>)
 8004d5a:	6003      	str	r3, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004d5c:	214c      	movs	r1, #76	; 0x4c
 8004d5e:	f01b fb20 	bl	80203a2 <_ZdlPvj>
 8004d62:	4620      	mov	r0, r4
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	bf00      	nop
 8004d68:	08022cec 	.word	0x08022cec
 8004d6c:	080237c4 	.word	0x080237c4
 8004d70:	080236cc 	.word	0x080236cc
 8004d74:	080220a4 	.word	0x080220a4
 8004d78:	08022b14 	.word	0x08022b14
 8004d7c:	08023a08 	.word	0x08023a08

08004d80 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d80:	b510      	push	{r4, lr}
 8004d82:	4604      	mov	r4, r0
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x18>)
 8004d86:	6003      	str	r3, [r0, #0]
    }
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x1c>)
 8004d8a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d8c:	2110      	movs	r1, #16
 8004d8e:	f01b fb08 	bl	80203a2 <_ZdlPvj>
 8004d92:	4620      	mov	r0, r4
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	bf00      	nop
 8004d98:	08022dac 	.word	0x08022dac
 8004d9c:	08022d7c 	.word	0x08022d7c

08004da0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
    virtual void setBaselineY(int16_t baselineY)
 8004da0:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004da2:	6803      	ldr	r3, [r0, #0]
 8004da4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004da6:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	b1a3      	cbz	r3, 8004dd6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8004dac:	4604      	mov	r4, r0
 8004dae:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
 8004db0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8004db2:	4910      	ldr	r1, [pc, #64]	; (8004df4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8004db4:	8809      	ldrh	r1, [r1, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004db6:	428a      	cmp	r2, r1
 8004db8:	d213      	bcs.n	8004de2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x42>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004dba:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004dc6:	6803      	ldr	r3, [r0, #0]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	4798      	blx	r3
 8004dcc:	1a31      	subs	r1, r6, r0
 8004dce:	b209      	sxth	r1, r1
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	47a8      	blx	r5
    }
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004dda:	216c      	movs	r1, #108	; 0x6c
 8004ddc:	4809      	ldr	r0, [pc, #36]	; (8004e04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004dde:	f01b fb0f 	bl	8020400 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004de4:	4a06      	ldr	r2, [pc, #24]	; (8004e00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004de6:	216d      	movs	r1, #109	; 0x6d
 8004de8:	4806      	ldr	r0, [pc, #24]	; (8004e04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004dea:	f01b fb09 	bl	8020400 <__assert_func>
 8004dee:	bf00      	nop
 8004df0:	2400c844 	.word	0x2400c844
 8004df4:	2400c848 	.word	0x2400c848
 8004df8:	2400c84c 	.word	0x2400c84c
 8004dfc:	08022bdc 	.word	0x08022bdc
 8004e00:	08022c20 	.word	0x08022c20
 8004e04:	08022c5c 	.word	0x08022c5c
 8004e08:	08022ca4 	.word	0x08022ca4

08004e0c <_ZN14CustomKeyboardD0Ev>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <_ZN14CustomKeyboardD0Ev+0x9c>)
 8004e12:	6003      	str	r3, [r0, #0]
 8004e14:	4b25      	ldr	r3, [pc, #148]	; (8004eac <_ZN14CustomKeyboardD0Ev+0xa0>)
 8004e16:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    }
 8004e1a:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <_ZN14CustomKeyboardD0Ev+0xa4>)
 8004e1c:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004e20:	4a24      	ldr	r2, [pc, #144]	; (8004eb4 <_ZN14CustomKeyboardD0Ev+0xa8>)
 8004e22:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
    {
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <_ZN14CustomKeyboardD0Ev+0xac>)
 8004e28:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004e2c:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
    {
 8004e30:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004e34:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
    {
 8004e38:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004e3c:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
    {
 8004e40:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
class TextArea : public Widget
 8004e44:	4e1d      	ldr	r6, [pc, #116]	; (8004ebc <_ZN14CustomKeyboardD0Ev+0xb0>)
 8004e46:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
    {
 8004e4a:	4d1d      	ldr	r5, [pc, #116]	; (8004ec0 <_ZN14CustomKeyboardD0Ev+0xb4>)
 8004e4c:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <_ZN14CustomKeyboardD0Ev+0xb8>)
 8004e52:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <_ZN14CustomKeyboardD0Ev+0xbc>)
 8004e58:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 8004e5c:	491b      	ldr	r1, [pc, #108]	; (8004ecc <_ZN14CustomKeyboardD0Ev+0xc0>)
 8004e5e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8004e60:	491b      	ldr	r1, [pc, #108]	; (8004ed0 <_ZN14CustomKeyboardD0Ev+0xc4>)
 8004e62:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8004e66:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8004e6a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8004e6e:	4f19      	ldr	r7, [pc, #100]	; (8004ed4 <_ZN14CustomKeyboardD0Ev+0xc8>)
 8004e70:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8004e74:	4f18      	ldr	r7, [pc, #96]	; (8004ed8 <_ZN14CustomKeyboardD0Ev+0xcc>)
 8004e76:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8004e7a:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 8004e7e:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 8004e82:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8004e86:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8004e8a:	6641      	str	r1, [r0, #100]	; 0x64
 8004e8c:	6642      	str	r2, [r0, #100]	; 0x64
 8004e8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e90:	4a12      	ldr	r2, [pc, #72]	; (8004edc <_ZN14CustomKeyboardD0Ev+0xd0>)
 8004e92:	62c2      	str	r2, [r0, #44]	; 0x2c
 8004e94:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004e96:	6002      	str	r2, [r0, #0]
 8004e98:	6003      	str	r3, [r0, #0]
 8004e9a:	f44f 710d 	mov.w	r1, #564	; 0x234
 8004e9e:	f01b fa80 	bl	80203a2 <_ZdlPvj>
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08022dc4 	.word	0x08022dc4
 8004eac:	08022dac 	.word	0x08022dac
 8004eb0:	08022d7c 	.word	0x08022d7c
 8004eb4:	08022d94 	.word	0x08022d94
 8004eb8:	08022100 	.word	0x08022100
 8004ebc:	080236cc 	.word	0x080236cc
 8004ec0:	080220a4 	.word	0x080220a4
 8004ec4:	08022b14 	.word	0x08022b14
 8004ec8:	08023a08 	.word	0x08023a08
 8004ecc:	080238d4 	.word	0x080238d4
 8004ed0:	08023854 	.word	0x08023854
 8004ed4:	08022cec 	.word	0x08022cec
 8004ed8:	080237c4 	.word	0x080237c4
 8004edc:	080234e4 	.word	0x080234e4

08004ee0 <_ZN14CustomKeyboard17setKeyMappingListEv>:
{
 8004ee0:	b530      	push	{r4, r5, lr}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	4604      	mov	r4, r0
    if (alphaKeys)
 8004ee6:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8004eea:	b1d3      	cbz	r3, 8004f22 <_ZN14CustomKeyboard17setKeyMappingListEv+0x42>
        : typedTextId(id)
 8004eec:	4d1a      	ldr	r5, [pc, #104]	; (8004f58 <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8004eee:	9500      	str	r5, [sp, #0]
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f8ad 3004 	strh.w	r3, [sp, #4]
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 8004ef6:	4669      	mov	r1, sp
 8004ef8:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8004efc:	f00e faa0 	bl	8013440 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8004f00:	9500      	str	r5, [sp, #0]
        if (uppercaseKeys)
 8004f02:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8004f06:	b133      	cbz	r3, 8004f16 <_ZN14CustomKeyboard17setKeyMappingListEv+0x36>
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 8004f08:	4914      	ldr	r1, [pc, #80]	; (8004f5c <_ZN14CustomKeyboard17setKeyMappingListEv+0x7c>)
 8004f0a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004f0e:	f00e ffdf 	bl	8013ed0 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8004f12:	b005      	add	sp, #20
 8004f14:	bd30      	pop	{r4, r5, pc}
            keyboard.setKeymappingList(&keyMappingListAlphaLower);
 8004f16:	4912      	ldr	r1, [pc, #72]	; (8004f60 <_ZN14CustomKeyboard17setKeyMappingListEv+0x80>)
 8004f18:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004f1c:	f00e ffd8 	bl	8013ed0 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8004f20:	e7f7      	b.n	8004f12 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
        : typedTextId(id)
 8004f22:	4d0d      	ldr	r5, [pc, #52]	; (8004f58 <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8004f24:	9502      	str	r5, [sp, #8]
 8004f26:	2301      	movs	r3, #1
 8004f28:	f8ad 300c 	strh.w	r3, [sp, #12]
        modeBtnTextArea.setTypedText(TypedText(T_NUMMODE));
 8004f2c:	a902      	add	r1, sp, #8
 8004f2e:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8004f32:	f00e fa85 	bl	8013440 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8004f36:	9502      	str	r5, [sp, #8]
        if (uppercaseKeys)
 8004f38:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8004f3c:	b12b      	cbz	r3, 8004f4a <_ZN14CustomKeyboard17setKeyMappingListEv+0x6a>
            keyboard.setKeymappingList(&keyMappingListNumUpper);
 8004f3e:	4909      	ldr	r1, [pc, #36]	; (8004f64 <_ZN14CustomKeyboard17setKeyMappingListEv+0x84>)
 8004f40:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004f44:	f00e ffc4 	bl	8013ed0 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8004f48:	e7e3      	b.n	8004f12 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8004f4a:	4907      	ldr	r1, [pc, #28]	; (8004f68 <_ZN14CustomKeyboard17setKeyMappingListEv+0x88>)
 8004f4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004f50:	f00e ffbe 	bl	8013ed0 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8004f54:	e7dd      	b.n	8004f12 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
 8004f56:	bf00      	nop
 8004f58:	080220a4 	.word	0x080220a4
 8004f5c:	08023044 	.word	0x08023044
 8004f60:	0802303c 	.word	0x0802303c
 8004f64:	08023034 	.word	0x08023034
 8004f68:	0802302c 	.word	0x0802302c

08004f6c <_ZN14CustomKeyboard23backspacePressedHandlerEv>:
{
 8004f6c:	b538      	push	{r3, r4, r5, lr}
     *
     * @see setBufferPosition
     */
    uint16_t getBufferPosition()
    {
        return bufferPosition;
 8004f6e:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
    if (pos > 0)
 8004f72:	b905      	cbnz	r5, 8004f76 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0xa>
}
 8004f74:	bd38      	pop	{r3, r4, r5, pc}
 8004f76:	4604      	mov	r4, r0
        buffer[pos - 1] = 0;
 8004f78:	1e69      	subs	r1, r5, #1
 8004f7a:	f105 0387 	add.w	r3, r5, #135	; 0x87
 8004f7e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004f82:	2200      	movs	r2, #0
 8004f84:	809a      	strh	r2, [r3, #4]
        keyboard.setBufferPosition(pos - 1);
 8004f86:	b289      	uxth	r1, r1
 8004f88:	302c      	adds	r0, #44	; 0x2c
 8004f8a:	f00e ff9d 	bl	8013ec8 <_ZN8touchgfx8Keyboard17setBufferPositionEt>
        if (1 == pos)
 8004f8e:	2d01      	cmp	r5, #1
 8004f90:	d1f0      	bne.n	8004f74 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>
            firstCharacterEntry = true;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
            uppercaseKeys = true;
 8004f98:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
            setKeyMappingList();
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7ff ff9f 	bl	8004ee0 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8004fa2:	e7e7      	b.n	8004f74 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>

08004fa4 <_ZN14CustomKeyboard22capslockPressedHandlerEv>:
{
 8004fa4:	b508      	push	{r3, lr}
    uppercaseKeys = !uppercaseKeys;
 8004fa6:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
 8004faa:	f082 0201 	eor.w	r2, r2, #1
 8004fae:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    setKeyMappingList();
 8004fb2:	f7ff ff95 	bl	8004ee0 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8004fb6:	bd08      	pop	{r3, pc}

08004fb8 <_ZN14CustomKeyboard18modePressedHandlerEv>:
{
 8004fb8:	b508      	push	{r3, lr}
    alphaKeys = !alphaKeys;
 8004fba:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8004fbe:	f083 0301 	eor.w	r3, r3, #1
 8004fc2:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (firstCharacterEntry && alphaKeys)
 8004fc6:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
 8004fca:	b122      	cbz	r2, 8004fd6 <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
 8004fcc:	b11b      	cbz	r3, 8004fd6 <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
        uppercaseKeys = true;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
 8004fd4:	e002      	b.n	8004fdc <_ZN14CustomKeyboard18modePressedHandlerEv+0x24>
        uppercaseKeys = false;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    setKeyMappingList();
 8004fdc:	f7ff ff80 	bl	8004ee0 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8004fe0:	bd08      	pop	{r3, pc}

08004fe2 <_ZN14CustomKeyboard17keyPressedhandlerEt>:
{
 8004fe2:	b508      	push	{r3, lr}
    if (firstCharacterEntry && keyChar != 0)
 8004fe4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
 8004fe8:	b103      	cbz	r3, 8004fec <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
 8004fea:	b901      	cbnz	r1, 8004fee <_ZN14CustomKeyboard17keyPressedhandlerEt+0xc>
}
 8004fec:	bd08      	pop	{r3, pc}
        firstCharacterEntry = false;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f880 322e 	strb.w	r3, [r0, #558]	; 0x22e
        uppercaseKeys = false;
 8004ff4:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
        setKeyMappingList();
 8004ff8:	f7ff ff72 	bl	8004ee0 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8004ffc:	e7f6      	b.n	8004fec <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
	...

08005000 <_ZN14CustomKeyboardC1Ev>:
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005004:	b08d      	sub	sp, #52	; 0x34
 8005006:	4604      	mov	r4, r0
          visible(true)
 8005008:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800529c <_ZN14CustomKeyboardC1Ev+0x29c>
 800500c:	f8c0 9000 	str.w	r9, [r0]
        : x(0), y(0), width(0), height(0)
 8005010:	2500      	movs	r5, #0
 8005012:	8085      	strh	r5, [r0, #4]
 8005014:	80c5      	strh	r5, [r0, #6]
 8005016:	8105      	strh	r5, [r0, #8]
 8005018:	8145      	strh	r5, [r0, #10]
 800501a:	8185      	strh	r5, [r0, #12]
 800501c:	81c5      	strh	r5, [r0, #14]
 800501e:	8205      	strh	r5, [r0, #16]
 8005020:	8245      	strh	r5, [r0, #18]
 8005022:	6145      	str	r5, [r0, #20]
 8005024:	6185      	str	r5, [r0, #24]
 8005026:	61c5      	str	r5, [r0, #28]
 8005028:	8405      	strh	r5, [r0, #32]
 800502a:	8445      	strh	r5, [r0, #34]	; 0x22
 800502c:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8005030:	f04f 0801 	mov.w	r8, #1
 8005034:	f880 8025 	strb.w	r8, [r0, #37]	; 0x25
          firstChild(0)
 8005038:	4b8a      	ldr	r3, [pc, #552]	; (8005264 <_ZN14CustomKeyboardC1Ev+0x264>)
 800503a:	6003      	str	r3, [r0, #0]
 800503c:	6285      	str	r5, [r0, #40]	; 0x28
    firstCharacterEntry(false)
 800503e:	4607      	mov	r7, r0
 8005040:	4b89      	ldr	r3, [pc, #548]	; (8005268 <_ZN14CustomKeyboardC1Ev+0x268>)
 8005042:	f847 3b2c 	str.w	r3, [r7], #44
 8005046:	4638      	mov	r0, r7
 8005048:	f00e fc70 	bl	801392c <_ZN8touchgfx8KeyboardC1Ev>
 800504c:	f504 76ca 	add.w	r6, r4, #404	; 0x194
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005050:	2226      	movs	r2, #38	; 0x26
 8005052:	4629      	mov	r1, r5
 8005054:	4630      	mov	r0, r6
 8005056:	f01b fb69 	bl	802072c <memset>
 800505a:	f8c4 9194 	str.w	r9, [r4, #404]	; 0x194
 800505e:	80b5      	strh	r5, [r6, #4]
 8005060:	80f5      	strh	r5, [r6, #6]
 8005062:	8135      	strh	r5, [r6, #8]
 8005064:	8175      	strh	r5, [r6, #10]
 8005066:	81b5      	strh	r5, [r6, #12]
 8005068:	81f5      	strh	r5, [r6, #14]
 800506a:	8235      	strh	r5, [r6, #16]
 800506c:	8275      	strh	r5, [r6, #18]
 800506e:	6175      	str	r5, [r6, #20]
 8005070:	61b5      	str	r5, [r6, #24]
 8005072:	61f5      	str	r5, [r6, #28]
 8005074:	8435      	strh	r5, [r6, #32]
 8005076:	8475      	strh	r5, [r6, #34]	; 0x22
 8005078:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
 800507c:	f886 8025 	strb.w	r8, [r6, #37]	; 0x25
 8005080:	4b7a      	ldr	r3, [pc, #488]	; (800526c <_ZN14CustomKeyboardC1Ev+0x26c>)
 8005082:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8005086:	4b7a      	ldr	r3, [pc, #488]	; (8005270 <_ZN14CustomKeyboardC1Ev+0x270>)
 8005088:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
        : typedTextId(id)
 800508c:	4b79      	ldr	r3, [pc, #484]	; (8005274 <_ZN14CustomKeyboardC1Ev+0x274>)
 800508e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005094:	85b3      	strh	r3, [r6, #44]	; 0x2c
        : color(col)
 8005096:	6335      	str	r5, [r6, #48]	; 0x30
 8005098:	86b5      	strh	r5, [r6, #52]	; 0x34
 800509a:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 800509e:	f886 5037 	strb.w	r5, [r6, #55]	; 0x37
 80050a2:	f886 5038 	strb.w	r5, [r6, #56]	; 0x38
 80050a6:	f886 5039 	strb.w	r5, [r6, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80050aa:	87b5      	strh	r5, [r6, #60]	; 0x3c
 80050ac:	87f5      	strh	r5, [r6, #62]	; 0x3e
 80050ae:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
 80050b2:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
              text(0)
 80050b6:	6475      	str	r5, [r6, #68]	; 0x44
 80050b8:	4b6f      	ldr	r3, [pc, #444]	; (8005278 <_ZN14CustomKeyboardC1Ev+0x278>)
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	9503      	str	r5, [sp, #12]
 80050be:	466b      	mov	r3, sp
 80050c0:	aa02      	add	r2, sp, #8
 80050c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050c6:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 80050ca:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80052a0 <_ZN14CustomKeyboardC1Ev+0x2a0>
 80050ce:	f8c4 c1dc 	str.w	ip, [r4, #476]	; 0x1dc
        : pobject(pObject), pmemfun(pmemfun_0)
 80050d2:	4a6a      	ldr	r2, [pc, #424]	; (800527c <_ZN14CustomKeyboardC1Ev+0x27c>)
 80050d4:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
 80050d8:	f8c4 41e0 	str.w	r4, [r4, #480]	; 0x1e0
 80050dc:	f504 7ef2 	add.w	lr, r4, #484	; 0x1e4
 80050e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050e4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80050e8:	4965      	ldr	r1, [pc, #404]	; (8005280 <_ZN14CustomKeyboardC1Ev+0x280>)
 80050ea:	9104      	str	r1, [sp, #16]
 80050ec:	9505      	str	r5, [sp, #20]
 80050ee:	a904      	add	r1, sp, #16
 80050f0:	c903      	ldmia	r1, {r0, r1}
 80050f2:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 80050f6:	f8c4 c1ec 	str.w	ip, [r4, #492]	; 0x1ec
        : pobject(pObject), pmemfun(pmemfun_0)
 80050fa:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
 80050fe:	f8c4 41f0 	str.w	r4, [r4, #496]	; 0x1f0
 8005102:	f504 7efa 	add.w	lr, r4, #500	; 0x1f4
 8005106:	e893 0003 	ldmia.w	r3, {r0, r1}
 800510a:	e88e 0003 	stmia.w	lr, {r0, r1}
 800510e:	495d      	ldr	r1, [pc, #372]	; (8005284 <_ZN14CustomKeyboardC1Ev+0x284>)
 8005110:	9106      	str	r1, [sp, #24]
 8005112:	9507      	str	r5, [sp, #28]
 8005114:	a906      	add	r1, sp, #24
 8005116:	c903      	ldmia	r1, {r0, r1}
 8005118:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 800511c:	f8c4 c1fc 	str.w	ip, [r4, #508]	; 0x1fc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005120:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
 8005124:	f8c4 4200 	str.w	r4, [r4, #512]	; 0x200
 8005128:	f504 7e01 	add.w	lr, r4, #516	; 0x204
 800512c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005130:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005134:	4954      	ldr	r1, [pc, #336]	; (8005288 <_ZN14CustomKeyboardC1Ev+0x288>)
 8005136:	9108      	str	r1, [sp, #32]
 8005138:	9509      	str	r5, [sp, #36]	; 0x24
 800513a:	a908      	add	r1, sp, #32
 800513c:	c903      	ldmia	r1, {r0, r1}
 800513e:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005142:	f8c4 c20c 	str.w	ip, [r4, #524]	; 0x20c
        : pobject(pObject), pmemfun(pmemfun_0)
 8005146:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 800514a:	f8c4 4210 	str.w	r4, [r4, #528]	; 0x210
 800514e:	f504 7205 	add.w	r2, r4, #532	; 0x214
 8005152:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005156:	e882 0003 	stmia.w	r2, {r0, r1}
 800515a:	4a4c      	ldr	r2, [pc, #304]	; (800528c <_ZN14CustomKeyboardC1Ev+0x28c>)
 800515c:	920a      	str	r2, [sp, #40]	; 0x28
 800515e:	950b      	str	r5, [sp, #44]	; 0x2c
 8005160:	aa0c      	add	r2, sp, #48	; 0x30
 8005162:	e912 0003 	ldmdb	r2, {r0, r1}
 8005166:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 800516a:	4a49      	ldr	r2, [pc, #292]	; (8005290 <_ZN14CustomKeyboardC1Ev+0x290>)
 800516c:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
        : pobject(pObject), pmemfun(pmemfun_1)
 8005170:	4a48      	ldr	r2, [pc, #288]	; (8005294 <_ZN14CustomKeyboardC1Ev+0x294>)
 8005172:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 8005176:	f8c4 4220 	str.w	r4, [r4, #544]	; 0x220
 800517a:	f504 7209 	add.w	r2, r4, #548	; 0x224
 800517e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005182:	e882 0003 	stmia.w	r2, {r0, r1}
 8005186:	f884 822c 	strb.w	r8, [r4, #556]	; 0x22c
 800518a:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
 800518e:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
    layout.callbackAreaArray[0].callback = &capslockPressed;
 8005192:	4941      	ldr	r1, [pc, #260]	; (8005298 <_ZN14CustomKeyboardC1Ev+0x298>)
 8005194:	68cb      	ldr	r3, [r1, #12]
 8005196:	f504 72ee 	add.w	r2, r4, #476	; 0x1dc
 800519a:	609a      	str	r2, [r3, #8]
    layout.callbackAreaArray[1].callback = &backspacePressed;
 800519c:	68cb      	ldr	r3, [r1, #12]
 800519e:	f504 72f6 	add.w	r2, r4, #492	; 0x1ec
 80051a2:	619a      	str	r2, [r3, #24]
    layout.callbackAreaArray[2].callback = &modePressed;
 80051a4:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
 80051a8:	629a      	str	r2, [r3, #40]	; 0x28
    layout.callbackAreaArray[3].callback = &donePressed;
 80051aa:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
    keyboard.setLayout(&layout);
 80051b0:	4638      	mov	r0, r7
 80051b2:	f00e fc34 	bl	8013a1e <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>
    keyboard.setKeyListener(keyPressed);
 80051b6:	f504 7307 	add.w	r3, r4, #540	; 0x21c
     *
     * @note Backspace, shift and mode keys report a 0 as value.
     */
    void setKeyListener(GenericCallback<Unicode::UnicodeChar>& callback)
    {
        keyListener = &callback;
 80051ba:	65a3      	str	r3, [r4, #88]	; 0x58
        setX(x);
 80051bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	4629      	mov	r1, r5
 80051c2:	4638      	mov	r0, r7
 80051c4:	4798      	blx	r3
        setY(y);
 80051c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	4629      	mov	r1, r5
 80051cc:	4638      	mov	r0, r7
 80051ce:	4798      	blx	r3
        setWidth(width);
 80051d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80051d8:	4638      	mov	r0, r7
 80051da:	4798      	blx	r3
        setHeight(height);
 80051dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80051e4:	4638      	mov	r0, r7
 80051e6:	4798      	blx	r3
    keyboard.setTextIndentation();
 80051e8:	4638      	mov	r0, r7
 80051ea:	f00e fc49 	bl	8013a80 <_ZN8touchgfx8Keyboard18setTextIndentationEv>
    memset(buffer, 0, sizeof(buffer));
 80051ee:	f504 798a 	add.w	r9, r4, #276	; 0x114
 80051f2:	227e      	movs	r2, #126	; 0x7e
 80051f4:	4629      	mov	r1, r5
 80051f6:	4648      	mov	r0, r9
 80051f8:	f01b fa98 	bl	802072c <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 80051fc:	223f      	movs	r2, #63	; 0x3f
 80051fe:	4649      	mov	r1, r9
 8005200:	4638      	mov	r0, r7
 8005202:	f00e fc01 	bl	8013a08 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 8005206:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 800520a:	f884 822e 	strb.w	r8, [r4, #558]	; 0x22e
        setX(x);
 800520e:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	210c      	movs	r1, #12
 8005216:	4630      	mov	r0, r6
 8005218:	4798      	blx	r3
        setY(y);
 800521a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	21e9      	movs	r1, #233	; 0xe9
 8005222:	4630      	mov	r0, r6
 8005224:	4798      	blx	r3
        setWidth(width);
 8005226:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	214e      	movs	r1, #78	; 0x4e
 800522e:	4630      	mov	r0, r6
 8005230:	4798      	blx	r3
        setHeight(height);
 8005232:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	2124      	movs	r1, #36	; 0x24
 800523a:	4630      	mov	r0, r6
 800523c:	4798      	blx	r3
        : color(col)
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
        color = newColor;
 8005242:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    setKeyMappingList();
 8005246:	4620      	mov	r0, r4
 8005248:	f7ff fe4a 	bl	8004ee0 <_ZN14CustomKeyboard17setKeyMappingListEv>
    add(keyboard);
 800524c:	4639      	mov	r1, r7
 800524e:	4620      	mov	r0, r4
 8005250:	f00c fbde 	bl	8011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(modeBtnTextArea);
 8005254:	4631      	mov	r1, r6
 8005256:	4620      	mov	r0, r4
 8005258:	f00c fbda 	bl	8011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800525c:	4620      	mov	r0, r4
 800525e:	b00d      	add	sp, #52	; 0x34
 8005260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005264:	080234e4 	.word	0x080234e4
 8005268:	08022dc4 	.word	0x08022dc4
 800526c:	08022b14 	.word	0x08022b14
 8005270:	080236cc 	.word	0x080236cc
 8005274:	080220a4 	.word	0x080220a4
 8005278:	08004fa5 	.word	0x08004fa5
 800527c:	08022d94 	.word	0x08022d94
 8005280:	08004f6d 	.word	0x08004f6d
 8005284:	08004fb9 	.word	0x08004fb9
 8005288:	080047b1 	.word	0x080047b1
 800528c:	08004fe3 	.word	0x08004fe3
 8005290:	08022d7c 	.word	0x08022d7c
 8005294:	08022dac 	.word	0x08022dac
 8005298:	24000010 	.word	0x24000010
 800529c:	08023a08 	.word	0x08023a08
 80052a0:	08022100 	.word	0x08022100

080052a4 <_ZN14CustomKeyboard34setKeyboardDoneReturnPressedActionERN8touchgfx15GenericCallbackIA_tvvEE>:
    doneReturnCallback = &callback;
 80052a4:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
}
 80052a8:	4770      	bx	lr

080052aa <_ZN14CustomKeyboard11clearBufferEv>:
{
 80052aa:	b538      	push	{r3, r4, r5, lr}
 80052ac:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
 80052ae:	f500 758a 	add.w	r5, r0, #276	; 0x114
 80052b2:	227e      	movs	r2, #126	; 0x7e
 80052b4:	2100      	movs	r1, #0
 80052b6:	4628      	mov	r0, r5
 80052b8:	f01b fa38 	bl	802072c <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 80052bc:	223f      	movs	r2, #63	; 0x3f
 80052be:	4629      	mov	r1, r5
 80052c0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80052c4:	f00e fba0 	bl	8013a08 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 80052ce:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    alphaKeys = true;
 80052d2:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
    setKeyMappingList();
 80052d6:	4620      	mov	r0, r4
 80052d8:	f7ff fe02 	bl	8004ee0 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 80052dc:	bd38      	pop	{r3, r4, r5, pc}

080052de <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
 80052de:	b508      	push	{r3, lr}
 80052e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7ff faa3 	bl	8004830 <_Z41__static_initialization_and_destruction_0ii>
 80052ea:	bd08      	pop	{r3, pc}

080052ec <_GLOBAL__sub_D__ZN14CustomKeyboardC2Ev>:
 80052ec:	b508      	push	{r3, lr}
 80052ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80052f2:	2000      	movs	r0, #0
 80052f4:	f7ff fa9c 	bl	8004830 <_Z41__static_initialization_and_destruction_0ii>
 80052f8:	bd08      	pop	{r3, pc}
	...

080052fc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8005300:	f7fe fc14 	bl	8003b2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005304:	4b01      	ldr	r3, [pc, #4]	; (800530c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8005306:	6023      	str	r3, [r4, #0]
{

}
 8005308:	4620      	mov	r0, r4
 800530a:	bd10      	pop	{r4, pc}
 800530c:	080221c8 	.word	0x080221c8

08005310 <_ZN5ModelC1Ev>:

uint8_t password_ascii[64];
uint8_t ssid_ascii[32];
uint8_t encryption_ascii[30];

Model::Model() : modelListener(0)
 8005310:	2200      	movs	r2, #0
 8005312:	6002      	str	r2, [r0, #0]
{

}
 8005314:	4770      	bx	lr

08005316 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8005316:	4770      	bx	lr

08005318 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 8005318:	4770      	bx	lr

0800531a <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 800531a:	4770      	bx	lr

0800531c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 800531c:	4b01      	ldr	r3, [pc, #4]	; (8005324 <_ZN8touchgfx9PresenterD1Ev+0x8>)
 800531e:	6003      	str	r3, [r0, #0]
    }
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	08023054 	.word	0x08023054

08005328 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8005328:	4b01      	ldr	r3, [pc, #4]	; (8005330 <_ZN13ModelListenerD1Ev+0x8>)
 800532a:	6003      	str	r3, [r0, #0]
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	0802306c 	.word	0x0802306c

08005334 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8005334:	4a05      	ldr	r2, [pc, #20]	; (800534c <_ZN19mainScreenPresenterD1Ev+0x18>)
 8005336:	f102 0108 	add.w	r1, r2, #8
 800533a:	6001      	str	r1, [r0, #0]
 800533c:	3220      	adds	r2, #32
 800533e:	6042      	str	r2, [r0, #4]
 8005340:	4a03      	ldr	r2, [pc, #12]	; (8005350 <_ZN19mainScreenPresenterD1Ev+0x1c>)
 8005342:	6042      	str	r2, [r0, #4]
    {
 8005344:	4a03      	ldr	r2, [pc, #12]	; (8005354 <_ZN19mainScreenPresenterD1Ev+0x20>)
 8005346:	6002      	str	r2, [r0, #0]
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	08023074 	.word	0x08023074
 8005350:	0802306c 	.word	0x0802306c
 8005354:	08023054 	.word	0x08023054

08005358 <_ZThn4_N19mainScreenPresenterD1Ev>:
 8005358:	4603      	mov	r3, r0
 800535a:	4a07      	ldr	r2, [pc, #28]	; (8005378 <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 800535c:	f102 0108 	add.w	r1, r2, #8
 8005360:	f840 1c04 	str.w	r1, [r0, #-4]
 8005364:	3220      	adds	r2, #32
 8005366:	f840 2904 	str.w	r2, [r0], #-4
 800536a:	4a04      	ldr	r2, [pc, #16]	; (800537c <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 800536c:	6042      	str	r2, [r0, #4]
 800536e:	4a04      	ldr	r2, [pc, #16]	; (8005380 <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 8005370:	f843 2c04 	str.w	r2, [r3, #-4]
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	08023074 	.word	0x08023074
 800537c:	0802306c 	.word	0x0802306c
 8005380:	08023054 	.word	0x08023054

08005384 <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 8005384:	4770      	bx	lr

08005386 <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 8005386:	4770      	bx	lr

08005388 <_Z41__static_initialization_and_destruction_0ii>:
 8005388:	2801      	cmp	r0, #1
 800538a:	d006      	beq.n	800539a <_Z41__static_initialization_and_destruction_0ii+0x12>
 800538c:	b920      	cbnz	r0, 8005398 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800538e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005392:	4299      	cmp	r1, r3
 8005394:	f000 8222 	beq.w	80057dc <_Z41__static_initialization_and_destruction_0ii+0x454>
 8005398:	4770      	bx	lr
 800539a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800539e:	4299      	cmp	r1, r3
 80053a0:	d1f4      	bne.n	800538c <_Z41__static_initialization_and_destruction_0ii+0x4>
 80053a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80053a6:	4bf0      	ldr	r3, [pc, #960]	; (8005768 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80053ac:	240c      	movs	r4, #12
 80053ae:	805c      	strh	r4, [r3, #2]
 80053b0:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80053b4:	f8a3 e004 	strh.w	lr, [r3, #4]
 80053b8:	2224      	movs	r2, #36	; 0x24
 80053ba:	80da      	strh	r2, [r3, #6]
 80053bc:	811a      	strh	r2, [r3, #8]
 80053be:	f04f 0c05 	mov.w	ip, #5
 80053c2:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80053c6:	f04f 0502 	mov.w	r5, #2
 80053ca:	731d      	strb	r5, [r3, #12]
 80053cc:	f04f 0a36 	mov.w	sl, #54	; 0x36
 80053d0:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80053d4:	f8a3 e010 	strh.w	lr, [r3, #16]
 80053d8:	825a      	strh	r2, [r3, #18]
 80053da:	829a      	strh	r2, [r3, #20]
 80053dc:	f8a3 c016 	strh.w	ip, [r3, #22]
 80053e0:	f04f 0503 	mov.w	r5, #3
 80053e4:	761d      	strb	r5, [r3, #24]
 80053e6:	f04f 0660 	mov.w	r6, #96	; 0x60
 80053ea:	835e      	strh	r6, [r3, #26]
 80053ec:	f8a3 e01c 	strh.w	lr, [r3, #28]
 80053f0:	83da      	strh	r2, [r3, #30]
 80053f2:	841a      	strh	r2, [r3, #32]
 80053f4:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 80053f8:	f04f 0504 	mov.w	r5, #4
 80053fc:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8005400:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8005404:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8005408:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 800540c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800540e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005410:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8005414:	f883 c030 	strb.w	ip, [r3, #48]	; 0x30
 8005418:	27b4      	movs	r7, #180	; 0xb4
 800541a:	865f      	strh	r7, [r3, #50]	; 0x32
 800541c:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8005420:	86da      	strh	r2, [r3, #54]	; 0x36
 8005422:	871a      	strh	r2, [r3, #56]	; 0x38
 8005424:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8005428:	f04f 0506 	mov.w	r5, #6
 800542c:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 8005430:	f04f 05de 	mov.w	r5, #222	; 0xde
 8005434:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8005436:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 800543a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800543e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005442:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8005446:	f04f 0907 	mov.w	r9, #7
 800544a:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 800544e:	f44f 7984 	mov.w	r9, #264	; 0x108
 8005452:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8005456:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 800545a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800545e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005462:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8005466:	2508      	movs	r5, #8
 8005468:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
 800546c:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8005470:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8005474:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8005478:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800547c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005480:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8005484:	2509      	movs	r5, #9
 8005486:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 800548a:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 800548e:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8005492:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8005496:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800549a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800549e:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80054a2:	250a      	movs	r5, #10
 80054a4:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80054a8:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80054ac:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80054b0:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 80054b4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80054b8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80054bc:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 80054c0:	f04f 090b 	mov.w	r9, #11
 80054c4:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80054c8:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 80054cc:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 80054d0:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 80054d4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80054d8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80054dc:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 80054e0:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 80054e4:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 80054e8:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 80054ec:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 80054f0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80054f4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80054f8:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 80054fc:	f04f 060d 	mov.w	r6, #13
 8005500:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8005504:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8005508:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 800550c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005510:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005514:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8005518:	f04f 0a0e 	mov.w	sl, #14
 800551c:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8005520:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005524:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8005528:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 800552c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005530:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005534:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8005538:	f04f 0a0f 	mov.w	sl, #15
 800553c:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8005540:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8005544:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8005548:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800554c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005550:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8005554:	f04f 0a10 	mov.w	sl, #16
 8005558:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 800555c:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8005560:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8005564:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005568:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 800556c:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8005570:	f04f 0a11 	mov.w	sl, #17
 8005574:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8005578:	f04f 0ade 	mov.w	sl, #222	; 0xde
 800557c:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8005580:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8005584:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005588:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 800558c:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8005590:	f04f 0a12 	mov.w	sl, #18
 8005594:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8005598:	f44f 7a84 	mov.w	sl, #264	; 0x108
 800559c:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80055a0:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80055a4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80055a8:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80055ac:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80055b0:	f04f 0a13 	mov.w	sl, #19
 80055b4:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 80055b8:	f44f 7a99 	mov.w	sl, #306	; 0x132
 80055bc:	4656      	mov	r6, sl
 80055be:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 80055c2:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80055c6:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80055ca:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80055ce:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 80055d2:	f04f 0a14 	mov.w	sl, #20
 80055d6:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 80055da:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 80055de:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 80055e2:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 80055e6:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80055ea:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 80055ee:	f04f 0a15 	mov.w	sl, #21
 80055f2:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 80055f6:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 80055fa:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 80055fe:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8005602:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8005606:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 800560a:	f04f 0a16 	mov.w	sl, #22
 800560e:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8005612:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8005616:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 800561a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800561e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8005622:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8005626:	f04f 0e17 	mov.w	lr, #23
 800562a:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800562e:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8005632:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8005636:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 800563a:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800563e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8005642:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8005646:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 800564a:	f04f 0918 	mov.w	r9, #24
 800564e:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8005652:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8005656:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 800565a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 800565e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8005662:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8005666:	f04f 0819 	mov.w	r8, #25
 800566a:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 800566e:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8005672:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8005676:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 800567a:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 800567e:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8005682:	271a      	movs	r7, #26
 8005684:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8005688:	f04f 0ade 	mov.w	sl, #222	; 0xde
 800568c:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8005690:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8005694:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8005698:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 800569c:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80056a0:	271b      	movs	r7, #27
 80056a2:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80056a6:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80056aa:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80056ae:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 80056b2:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80056b6:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 80056ba:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 80056be:	271c      	movs	r7, #28
 80056c0:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 80056c4:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 80056c8:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 80056cc:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 80056d0:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 80056d4:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 80056d8:	271d      	movs	r7, #29
 80056da:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 80056de:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 80056e2:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 80056e6:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 80056ea:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 80056ee:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 80056f2:	271e      	movs	r7, #30
 80056f4:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 80056f8:	f04f 0660 	mov.w	r6, #96	; 0x60
 80056fc:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8005700:	26e2      	movs	r6, #226	; 0xe2
 8005702:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8005706:	f44f 7790 	mov.w	r7, #288	; 0x120
 800570a:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 800570e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8005712:	f04f 0707 	mov.w	r7, #7
 8005716:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800571c:	801c      	strh	r4, [r3, #0]
 800571e:	f8a3 e002 	strh.w	lr, [r3, #2]
 8005722:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8005726:	f8a3 c004 	strh.w	ip, [r3, #4]
 800572a:	80da      	strh	r2, [r3, #6]
};
 800572c:	2700      	movs	r7, #0
 800572e:	609f      	str	r7, [r3, #8]
 8005730:	f04f 0803 	mov.w	r8, #3
 8005734:	f8a3 800c 	strh.w	r8, [r3, #12]
 8005738:	821d      	strh	r5, [r3, #16]
 800573a:	f8a3 e012 	strh.w	lr, [r3, #18]
 800573e:	f8a3 c014 	strh.w	ip, [r3, #20]
 8005742:	82da      	strh	r2, [r3, #22]
 8005744:	619f      	str	r7, [r3, #24]
 8005746:	f04f 0e02 	mov.w	lr, #2
 800574a:	f8a3 e01c 	strh.w	lr, [r3, #28]
 800574e:	841c      	strh	r4, [r3, #32]
 8005750:	845e      	strh	r6, [r3, #34]	; 0x22
 8005752:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8005756:	84da      	strh	r2, [r3, #38]	; 0x26
 8005758:	629f      	str	r7, [r3, #40]	; 0x28
 800575a:	f04f 0406 	mov.w	r4, #6
 800575e:	859c      	strh	r4, [r3, #44]	; 0x2c
 8005760:	861d      	strh	r5, [r3, #48]	; 0x30
 8005762:	865e      	strh	r6, [r3, #50]	; 0x32
 8005764:	e004      	b.n	8005770 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8005766:	bf00      	nop
 8005768:	24002ac4 	.word	0x24002ac4
 800576c:	24002a34 	.word	0x24002a34
 8005770:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8005774:	86da      	strh	r2, [r3, #54]	; 0x36
 8005776:	639f      	str	r7, [r3, #56]	; 0x38
 8005778:	f04f 0204 	mov.w	r2, #4
 800577c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800577e:	4604      	mov	r4, r0
 8005780:	3340      	adds	r3, #64	; 0x40
 8005782:	2c00      	cmp	r4, #0
 8005784:	db0b      	blt.n	800579e <_Z41__static_initialization_and_destruction_0ii+0x416>
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	805a      	strh	r2, [r3, #2]
 8005794:	809a      	strh	r2, [r3, #4]
 8005796:	80da      	strh	r2, [r3, #6]
 8005798:	3310      	adds	r3, #16
 800579a:	3c01      	subs	r4, #1
 800579c:	e7f1      	b.n	8005782 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800579e:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80057a0:	2205      	movs	r2, #5
 80057a2:	825a      	strh	r2, [r3, #18]
 80057a4:	222d      	movs	r2, #45	; 0x2d
 80057a6:	829a      	strh	r2, [r3, #20]
 80057a8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80057ac:	82da      	strh	r2, [r3, #22]
 80057ae:	2246      	movs	r2, #70	; 0x46
 80057b0:	831a      	strh	r2, [r3, #24]
 80057b2:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80057b4:	61da      	str	r2, [r3, #28]
 80057b6:	2200      	movs	r2, #0
 80057b8:	841a      	strh	r2, [r3, #32]
        : color(col)
 80057ba:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 80057be:	625a      	str	r2, [r3, #36]	; 0x24
 80057c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c4:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 80057c6:	b918      	cbnz	r0, 80057d0 <_Z41__static_initialization_and_destruction_0ii+0x448>
 80057c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057cc:	4299      	cmp	r1, r3
 80057ce:	d001      	beq.n	80057d4 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 80057d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80057d6:	4a04      	ldr	r2, [pc, #16]	; (80057e8 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80057d8:	61da      	str	r2, [r3, #28]
 80057da:	e7f9      	b.n	80057d0 <_Z41__static_initialization_and_destruction_0ii+0x448>
 80057dc:	4b01      	ldr	r3, [pc, #4]	; (80057e4 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80057de:	4a02      	ldr	r2, [pc, #8]	; (80057e8 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80057e0:	61da      	str	r2, [r3, #28]
 80057e2:	4770      	bx	lr
 80057e4:	24002a94 	.word	0x24002a94
 80057e8:	080220a4 	.word	0x080220a4

080057ec <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80057ec:	b510      	push	{r4, lr}
 80057ee:	4604      	mov	r4, r0
    {
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 80057f2:	6003      	str	r3, [r0, #0]
    }
 80057f4:	2104      	movs	r1, #4
 80057f6:	f01a fdd4 	bl	80203a2 <_ZdlPvj>
 80057fa:	4620      	mov	r0, r4
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	bf00      	nop
 8005800:	08023054 	.word	0x08023054

08005804 <_ZN13ModelListenerD0Ev>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4604      	mov	r4, r0
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <_ZN13ModelListenerD0Ev+0x14>)
 800580a:	6003      	str	r3, [r0, #0]
 800580c:	2108      	movs	r1, #8
 800580e:	f01a fdc8 	bl	80203a2 <_ZdlPvj>
 8005812:	4620      	mov	r0, r4
 8005814:	bd10      	pop	{r4, pc}
 8005816:	bf00      	nop
 8005818:	0802306c 	.word	0x0802306c

0800581c <_ZN19mainScreenPresenterD0Ev>:
 800581c:	b510      	push	{r4, lr}
 800581e:	4604      	mov	r4, r0
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <_ZN19mainScreenPresenterD0Ev+0x24>)
 8005822:	f103 0208 	add.w	r2, r3, #8
 8005826:	6002      	str	r2, [r0, #0]
 8005828:	3320      	adds	r3, #32
 800582a:	6043      	str	r3, [r0, #4]
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <_ZN19mainScreenPresenterD0Ev+0x28>)
 800582e:	6043      	str	r3, [r0, #4]
    {
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <_ZN19mainScreenPresenterD0Ev+0x2c>)
 8005832:	6003      	str	r3, [r0, #0]
 8005834:	2110      	movs	r1, #16
 8005836:	f01a fdb4 	bl	80203a2 <_ZdlPvj>
 800583a:	4620      	mov	r0, r4
 800583c:	bd10      	pop	{r4, pc}
 800583e:	bf00      	nop
 8005840:	08023074 	.word	0x08023074
 8005844:	0802306c 	.word	0x0802306c
 8005848:	08023054 	.word	0x08023054

0800584c <_ZThn4_N19mainScreenPresenterD0Ev>:
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 8005852:	f103 0208 	add.w	r2, r3, #8
 8005856:	f840 2c04 	str.w	r2, [r0, #-4]
 800585a:	3320      	adds	r3, #32
 800585c:	f844 3904 	str.w	r3, [r4], #-4
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 8005862:	6063      	str	r3, [r4, #4]
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 8005866:	f840 3c04 	str.w	r3, [r0, #-4]
 800586a:	2110      	movs	r1, #16
 800586c:	4620      	mov	r0, r4
 800586e:	f01a fd98 	bl	80203a2 <_ZdlPvj>
 8005872:	4620      	mov	r0, r4
 8005874:	bd10      	pop	{r4, pc}
 8005876:	bf00      	nop
 8005878:	08023074 	.word	0x08023074
 800587c:	0802306c 	.word	0x0802306c
 8005880:	08023054 	.word	0x08023054

08005884 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8005884:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 8005886:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 8005888:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 800588a:	4a08      	ldr	r2, [pc, #32]	; (80058ac <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 800588c:	6042      	str	r2, [r0, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	6082      	str	r2, [r0, #8]
    : view(v)
 8005892:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 8005894:	f102 0408 	add.w	r4, r2, #8
 8005898:	6004      	str	r4, [r0, #0]
 800589a:	3220      	adds	r2, #32
 800589c:	6042      	str	r2, [r0, #4]
 800589e:	60c1      	str	r1, [r0, #12]
}
 80058a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	08023054 	.word	0x08023054
 80058ac:	0802306c 	.word	0x0802306c
 80058b0:	08023074 	.word	0x08023074

080058b4 <_GLOBAL__sub_I__ZN19mainScreenPresenterC2ER14mainScreenView>:
}
 80058b4:	b508      	push	{r3, lr}
 80058b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058ba:	2001      	movs	r0, #1
 80058bc:	f7ff fd64 	bl	8005388 <_Z41__static_initialization_and_destruction_0ii>
 80058c0:	bd08      	pop	{r3, pc}

080058c2 <_GLOBAL__sub_D__ZN19mainScreenPresenterC2ER14mainScreenView>:
 80058c2:	b508      	push	{r3, lr}
 80058c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058c8:	2000      	movs	r0, #0
 80058ca:	f7ff fd5d 	bl	8005388 <_Z41__static_initialization_and_destruction_0ii>
 80058ce:	bd08      	pop	{r3, pc}

080058d0 <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 80058d0:	4770      	bx	lr
	...

080058d4 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80058d4:	4a02      	ldr	r2, [pc, #8]	; (80058e0 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0xc>)
 80058d6:	6002      	str	r2, [r0, #0]
    }
 80058d8:	4a02      	ldr	r2, [pc, #8]	; (80058e4 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0x10>)
 80058da:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	080230bc 	.word	0x080230bc
 80058e4:	080230a4 	.word	0x080230a4

080058e8 <_Z41__static_initialization_and_destruction_0ii>:
void mainScreenView::keyboardDonePressed(Unicode::UnicodeChar buffer[])
{
    wifiKeyboard.clearBuffer();
    wifiKeyboard.setVisible(false);
    wifiKeyboard.invalidate();
}
 80058e8:	2801      	cmp	r0, #1
 80058ea:	d006      	beq.n	80058fa <_Z41__static_initialization_and_destruction_0ii+0x12>
 80058ec:	b920      	cbnz	r0, 80058f8 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80058ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058f2:	4299      	cmp	r1, r3
 80058f4:	f000 8222 	beq.w	8005d3c <_Z41__static_initialization_and_destruction_0ii+0x454>
 80058f8:	4770      	bx	lr
 80058fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058fe:	4299      	cmp	r1, r3
 8005900:	d1f4      	bne.n	80058ec <_Z41__static_initialization_and_destruction_0ii+0x4>
 8005902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8005906:	4bf0      	ldr	r3, [pc, #960]	; (8005cc8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800590c:	240c      	movs	r4, #12
 800590e:	805c      	strh	r4, [r3, #2]
 8005910:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8005914:	f8a3 e004 	strh.w	lr, [r3, #4]
 8005918:	2224      	movs	r2, #36	; 0x24
 800591a:	80da      	strh	r2, [r3, #6]
 800591c:	811a      	strh	r2, [r3, #8]
 800591e:	f04f 0c05 	mov.w	ip, #5
 8005922:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8005926:	f04f 0502 	mov.w	r5, #2
 800592a:	731d      	strb	r5, [r3, #12]
 800592c:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8005930:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8005934:	f8a3 e010 	strh.w	lr, [r3, #16]
 8005938:	825a      	strh	r2, [r3, #18]
 800593a:	829a      	strh	r2, [r3, #20]
 800593c:	f8a3 c016 	strh.w	ip, [r3, #22]
 8005940:	f04f 0503 	mov.w	r5, #3
 8005944:	761d      	strb	r5, [r3, #24]
 8005946:	f04f 0660 	mov.w	r6, #96	; 0x60
 800594a:	835e      	strh	r6, [r3, #26]
 800594c:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005950:	83da      	strh	r2, [r3, #30]
 8005952:	841a      	strh	r2, [r3, #32]
 8005954:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8005958:	f04f 0504 	mov.w	r5, #4
 800595c:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8005960:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8005964:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8005968:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 800596c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800596e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005970:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8005974:	f883 c030 	strb.w	ip, [r3, #48]	; 0x30
 8005978:	27b4      	movs	r7, #180	; 0xb4
 800597a:	865f      	strh	r7, [r3, #50]	; 0x32
 800597c:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8005980:	86da      	strh	r2, [r3, #54]	; 0x36
 8005982:	871a      	strh	r2, [r3, #56]	; 0x38
 8005984:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8005988:	f04f 0506 	mov.w	r5, #6
 800598c:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 8005990:	f04f 05de 	mov.w	r5, #222	; 0xde
 8005994:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8005996:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 800599a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800599e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80059a2:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 80059a6:	f04f 0907 	mov.w	r9, #7
 80059aa:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 80059ae:	f44f 7984 	mov.w	r9, #264	; 0x108
 80059b2:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80059b6:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 80059ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80059be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80059c2:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 80059c6:	2508      	movs	r5, #8
 80059c8:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
 80059cc:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80059d0:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80059d4:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80059d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80059dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059e0:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80059e4:	2509      	movs	r5, #9
 80059e6:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80059ea:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80059ee:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80059f2:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80059f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80059fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80059fe:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8005a02:	250a      	movs	r5, #10
 8005a04:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8005a08:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8005a0c:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8005a10:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8005a14:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005a18:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005a1c:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8005a20:	f04f 090b 	mov.w	r9, #11
 8005a24:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8005a28:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8005a2c:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8005a30:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8005a34:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005a38:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005a3c:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8005a40:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8005a44:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8005a48:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8005a4c:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8005a50:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005a54:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005a58:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8005a5c:	f04f 060d 	mov.w	r6, #13
 8005a60:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8005a64:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8005a68:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8005a6c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005a70:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005a74:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8005a78:	f04f 0a0e 	mov.w	sl, #14
 8005a7c:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8005a80:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005a84:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8005a88:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8005a8c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005a90:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005a94:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8005a98:	f04f 0a0f 	mov.w	sl, #15
 8005a9c:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8005aa0:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8005aa4:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8005aa8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005aac:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005ab0:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8005ab4:	f04f 0a10 	mov.w	sl, #16
 8005ab8:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8005abc:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8005ac0:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8005ac4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005ac8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005acc:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8005ad0:	f04f 0a11 	mov.w	sl, #17
 8005ad4:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8005ad8:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8005adc:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8005ae0:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8005ae4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005ae8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005aec:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8005af0:	f04f 0a12 	mov.w	sl, #18
 8005af4:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8005af8:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8005afc:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8005b00:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8005b04:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8005b08:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8005b0c:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8005b10:	f04f 0a13 	mov.w	sl, #19
 8005b14:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8005b18:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8005b1c:	4656      	mov	r6, sl
 8005b1e:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8005b22:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8005b26:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8005b2a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8005b2e:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8005b32:	f04f 0a14 	mov.w	sl, #20
 8005b36:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8005b3a:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8005b3e:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8005b42:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8005b46:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8005b4a:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8005b4e:	f04f 0a15 	mov.w	sl, #21
 8005b52:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8005b56:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8005b5a:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8005b5e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8005b62:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8005b66:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8005b6a:	f04f 0a16 	mov.w	sl, #22
 8005b6e:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8005b72:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8005b76:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8005b7a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8005b7e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8005b82:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8005b86:	f04f 0e17 	mov.w	lr, #23
 8005b8a:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8005b8e:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8005b92:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8005b96:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8005b9a:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8005b9e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8005ba2:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8005ba6:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8005baa:	f04f 0918 	mov.w	r9, #24
 8005bae:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8005bb2:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8005bb6:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8005bba:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8005bbe:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8005bc2:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8005bc6:	f04f 0819 	mov.w	r8, #25
 8005bca:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8005bce:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8005bd2:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8005bd6:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8005bda:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8005bde:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8005be2:	271a      	movs	r7, #26
 8005be4:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8005be8:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8005bec:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8005bf0:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8005bf4:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8005bf8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8005bfc:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8005c00:	271b      	movs	r7, #27
 8005c02:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8005c06:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8005c0a:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8005c0e:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8005c12:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8005c16:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8005c1a:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8005c1e:	271c      	movs	r7, #28
 8005c20:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8005c24:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8005c28:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8005c2c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8005c30:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8005c34:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8005c38:	271d      	movs	r7, #29
 8005c3a:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8005c3e:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8005c42:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8005c46:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8005c4a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8005c4e:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8005c52:	271e      	movs	r7, #30
 8005c54:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8005c58:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005c5c:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8005c60:	26e2      	movs	r6, #226	; 0xe2
 8005c62:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8005c66:	f44f 7790 	mov.w	r7, #288	; 0x120
 8005c6a:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8005c6e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8005c72:	f04f 0707 	mov.w	r7, #7
 8005c76:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8005c7c:	801c      	strh	r4, [r3, #0]
 8005c7e:	f8a3 e002 	strh.w	lr, [r3, #2]
 8005c82:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8005c86:	f8a3 c004 	strh.w	ip, [r3, #4]
 8005c8a:	80da      	strh	r2, [r3, #6]
};
 8005c8c:	2700      	movs	r7, #0
 8005c8e:	609f      	str	r7, [r3, #8]
 8005c90:	f04f 0803 	mov.w	r8, #3
 8005c94:	f8a3 800c 	strh.w	r8, [r3, #12]
 8005c98:	821d      	strh	r5, [r3, #16]
 8005c9a:	f8a3 e012 	strh.w	lr, [r3, #18]
 8005c9e:	f8a3 c014 	strh.w	ip, [r3, #20]
 8005ca2:	82da      	strh	r2, [r3, #22]
 8005ca4:	619f      	str	r7, [r3, #24]
 8005ca6:	f04f 0e02 	mov.w	lr, #2
 8005caa:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005cae:	841c      	strh	r4, [r3, #32]
 8005cb0:	845e      	strh	r6, [r3, #34]	; 0x22
 8005cb2:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8005cb6:	84da      	strh	r2, [r3, #38]	; 0x26
 8005cb8:	629f      	str	r7, [r3, #40]	; 0x28
 8005cba:	f04f 0406 	mov.w	r4, #6
 8005cbe:	859c      	strh	r4, [r3, #44]	; 0x2c
 8005cc0:	861d      	strh	r5, [r3, #48]	; 0x30
 8005cc2:	865e      	strh	r6, [r3, #50]	; 0x32
 8005cc4:	e004      	b.n	8005cd0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8005cc6:	bf00      	nop
 8005cc8:	24002cbc 	.word	0x24002cbc
 8005ccc:	24002c2c 	.word	0x24002c2c
 8005cd0:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8005cd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cd6:	639f      	str	r7, [r3, #56]	; 0x38
 8005cd8:	f04f 0204 	mov.w	r2, #4
 8005cdc:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005cde:	4604      	mov	r4, r0
 8005ce0:	3340      	adds	r3, #64	; 0x40
 8005ce2:	2c00      	cmp	r4, #0
 8005ce4:	db0b      	blt.n	8005cfe <_Z41__static_initialization_and_destruction_0ii+0x416>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	609a      	str	r2, [r3, #8]
 8005cee:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	805a      	strh	r2, [r3, #2]
 8005cf4:	809a      	strh	r2, [r3, #4]
 8005cf6:	80da      	strh	r2, [r3, #6]
 8005cf8:	3310      	adds	r3, #16
 8005cfa:	3c01      	subs	r4, #1
 8005cfc:	e7f1      	b.n	8005ce2 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005d00:	2205      	movs	r2, #5
 8005d02:	825a      	strh	r2, [r3, #18]
 8005d04:	222d      	movs	r2, #45	; 0x2d
 8005d06:	829a      	strh	r2, [r3, #20]
 8005d08:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005d0c:	82da      	strh	r2, [r3, #22]
 8005d0e:	2246      	movs	r2, #70	; 0x46
 8005d10:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8005d12:	4a0d      	ldr	r2, [pc, #52]	; (8005d48 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005d14:	61da      	str	r2, [r3, #28]
 8005d16:	2200      	movs	r2, #0
 8005d18:	841a      	strh	r2, [r3, #32]
        : color(col)
 8005d1a:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d24:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8005d26:	b918      	cbnz	r0, 8005d30 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d2c:	4299      	cmp	r1, r3
 8005d2e:	d001      	beq.n	8005d34 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8005d34:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005d36:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005d38:	61da      	str	r2, [r3, #28]
 8005d3a:	e7f9      	b.n	8005d30 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005d3c:	4b01      	ldr	r3, [pc, #4]	; (8005d44 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005d3e:	4a02      	ldr	r2, [pc, #8]	; (8005d48 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005d40:	61da      	str	r2, [r3, #28]
 8005d42:	4770      	bx	lr
 8005d44:	24002c8c 	.word	0x24002c8c
 8005d48:	080220a4 	.word	0x080220a4

08005d4c <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt>:
    virtual void execute(T1 t1)
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8005d50:	6844      	ldr	r4, [r0, #4]
 8005d52:	68c2      	ldr	r2, [r0, #12]
 8005d54:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005d58:	f012 0f01 	tst.w	r2, #1
 8005d5c:	d102      	bne.n	8005d64 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x18>
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	4798      	blx	r3
    }
 8005d62:	bd10      	pop	{r4, pc}
 8005d64:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8005d68:	f854 200c 	ldr.w	r2, [r4, ip]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	58d3      	ldr	r3, [r2, r3]
 8005d70:	e7f6      	b.n	8005d60 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x14>

08005d72 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005d72:	6843      	ldr	r3, [r0, #4]
 8005d74:	b14b      	cbz	r3, 8005d8a <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x18>
 8005d76:	6883      	ldr	r3, [r0, #8]
 8005d78:	b10b      	cbz	r3, 8005d7e <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0xc>
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	4770      	bx	lr
 8005d7e:	68c3      	ldr	r3, [r0, #12]
 8005d80:	f013 0f01 	tst.w	r3, #1
 8005d84:	d003      	beq.n	8005d8e <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x1c>
 8005d86:	2001      	movs	r0, #1
 8005d88:	4770      	bx	lr
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	4770      	bx	lr
 8005d8e:	2000      	movs	r0, #0
    }
 8005d90:	4770      	bx	lr
	...

08005d94 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005d94:	b510      	push	{r4, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x18>)
 8005d9a:	6003      	str	r3, [r0, #0]
    }
 8005d9c:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x1c>)
 8005d9e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005da0:	2110      	movs	r1, #16
 8005da2:	f01a fafe 	bl	80203a2 <_ZdlPvj>
 8005da6:	4620      	mov	r0, r4
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	080230bc 	.word	0x080230bc
 8005db0:	080230a4 	.word	0x080230a4

08005db4 <_ZN14mainScreenView11setupScreenEv>:
{
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4604      	mov	r4, r0
    mainScreenViewBase::setupScreen();
 8005db8:	f7fe fb68 	bl	800448c <_ZN18mainScreenViewBase11setupScreenEv>
    wifiKeyboard.setPosition(0, 0, 480, 272);
 8005dbc:	f104 0598 	add.w	r5, r4, #152	; 0x98
        setX(x);
 8005dc0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4628      	mov	r0, r5
 8005dca:	4798      	blx	r3
        setY(y);
 8005dcc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	4798      	blx	r3
        setWidth(width);
 8005dd8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005de2:	4628      	mov	r0, r5
 8005de4:	4798      	blx	r3
        setHeight(height);
 8005de6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dec:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005df0:	4628      	mov	r0, r5
 8005df2:	4798      	blx	r3
    wifiKeyboard.setKeyboardDoneReturnPressedAction(keyboardDonePressedCallback);
 8005df4:	f504 7133 	add.w	r1, r4, #716	; 0x2cc
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7ff fa53 	bl	80052a4 <_ZN14CustomKeyboard34setKeyboardDoneReturnPressedActionERN8touchgfx15GenericCallbackIA_tvvEE>
        visible = vis;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 8005e04:	4629      	mov	r1, r5
 8005e06:	1d20      	adds	r0, r4, #4
 8005e08:	f00b fe02 	bl	8011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}

08005e0e <_ZN14mainScreenView19keyboardDonePressedEPt>:
{
 8005e0e:	b538      	push	{r3, r4, r5, lr}
 8005e10:	4604      	mov	r4, r0
    wifiKeyboard.clearBuffer();
 8005e12:	f100 0598 	add.w	r5, r0, #152	; 0x98
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7ff fa47 	bl	80052aa <_ZN14CustomKeyboard11clearBufferEv>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    wifiKeyboard.invalidate();
 8005e22:	4628      	mov	r0, r5
 8005e24:	f010 fcbe 	bl	80167a4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
	...

08005e2c <_ZN14mainScreenViewD0Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	4604      	mov	r4, r0
 8005e30:	4b34      	ldr	r3, [pc, #208]	; (8005f04 <_ZN14mainScreenViewD0Ev+0xd8>)
 8005e32:	6003      	str	r3, [r0, #0]
 8005e34:	4b34      	ldr	r3, [pc, #208]	; (8005f08 <_ZN14mainScreenViewD0Ev+0xdc>)
 8005e36:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
    }
 8005e3a:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <_ZN14mainScreenViewD0Ev+0xe0>)
 8005e3c:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
 8005e40:	f100 0398 	add.w	r3, r0, #152	; 0x98
 8005e44:	4a32      	ldr	r2, [pc, #200]	; (8005f10 <_ZN14mainScreenViewD0Ev+0xe4>)
 8005e46:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005e4a:	4a32      	ldr	r2, [pc, #200]	; (8005f14 <_ZN14mainScreenViewD0Ev+0xe8>)
 8005e4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }
 8005e50:	4a31      	ldr	r2, [pc, #196]	; (8005f18 <_ZN14mainScreenViewD0Ev+0xec>)
 8005e52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005e56:	4931      	ldr	r1, [pc, #196]	; (8005f1c <_ZN14mainScreenViewD0Ev+0xf0>)
 8005e58:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
    {
 8005e5c:	4a30      	ldr	r2, [pc, #192]	; (8005f20 <_ZN14mainScreenViewD0Ev+0xf4>)
 8005e5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005e62:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
    {
 8005e66:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005e6a:	f8c3 11ec 	str.w	r1, [r3, #492]	; 0x1ec
    {
 8005e6e:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005e72:	f8c3 11dc 	str.w	r1, [r3, #476]	; 0x1dc
    {
 8005e76:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
class TextArea : public Widget
 8005e7a:	4f2a      	ldr	r7, [pc, #168]	; (8005f24 <_ZN14mainScreenViewD0Ev+0xf8>)
 8005e7c:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8005e80:	4d29      	ldr	r5, [pc, #164]	; (8005f28 <_ZN14mainScreenViewD0Ev+0xfc>)
 8005e82:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 8005e86:	4929      	ldr	r1, [pc, #164]	; (8005f2c <_ZN14mainScreenViewD0Ev+0x100>)
 8005e88:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
    {
 8005e8c:	4a28      	ldr	r2, [pc, #160]	; (8005f30 <_ZN14mainScreenViewD0Ev+0x104>)
 8005e8e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
class Keyboard : public Container
 8005e92:	4e28      	ldr	r6, [pc, #160]	; (8005f34 <_ZN14mainScreenViewD0Ev+0x108>)
 8005e94:	62de      	str	r6, [r3, #44]	; 0x2c
 8005e96:	4e28      	ldr	r6, [pc, #160]	; (8005f38 <_ZN14mainScreenViewD0Ev+0x10c>)
 8005e98:	f8c3 60e4 	str.w	r6, [r3, #228]	; 0xe4
 8005e9c:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8005ea0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8005ea4:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8005f50 <_ZN14mainScreenViewD0Ev+0x124>
 8005ea8:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8005eac:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8005f54 <_ZN14mainScreenViewD0Ev+0x128>
 8005eb0:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8005eb4:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 8005eb8:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
 8005ebc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8005ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005ec4:	665e      	str	r6, [r3, #100]	; 0x64
 8005ec6:	6659      	str	r1, [r3, #100]	; 0x64
 8005ec8:	665a      	str	r2, [r3, #100]	; 0x64
class Container : public Drawable
 8005eca:	4d1c      	ldr	r5, [pc, #112]	; (8005f3c <_ZN14mainScreenViewD0Ev+0x110>)
 8005ecc:	62dd      	str	r5, [r3, #44]	; 0x2c
 8005ece:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ed0:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
 8005ed4:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <_ZN14mainScreenViewD0Ev+0x114>)
 8005eda:	6003      	str	r3, [r0, #0]
 8005edc:	66c6      	str	r6, [r0, #108]	; 0x6c
 8005ede:	66c1      	str	r1, [r0, #108]	; 0x6c
 8005ee0:	66c2      	str	r2, [r0, #108]	; 0x6c
class Box : public Widget
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <_ZN14mainScreenViewD0Ev+0x118>)
 8005ee4:	6403      	str	r3, [r0, #64]	; 0x40
 8005ee6:	6401      	str	r1, [r0, #64]	; 0x40
 8005ee8:	6402      	str	r2, [r0, #64]	; 0x40
class View : public Screen
 8005eea:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <_ZN14mainScreenViewD0Ev+0x11c>)
 8005eec:	6003      	str	r3, [r0, #0]
    {
 8005eee:	4b17      	ldr	r3, [pc, #92]	; (8005f4c <_ZN14mainScreenViewD0Ev+0x120>)
 8005ef0:	6003      	str	r3, [r0, #0]
 8005ef2:	6045      	str	r5, [r0, #4]
 8005ef4:	6042      	str	r2, [r0, #4]
 8005ef6:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8005efa:	f01a fa52 	bl	80203a2 <_ZdlPvj>
 8005efe:	4620      	mov	r0, r4
 8005f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f02:	bf00      	nop
 8005f04:	080230d4 	.word	0x080230d4
 8005f08:	080230bc 	.word	0x080230bc
 8005f0c:	080230a4 	.word	0x080230a4
 8005f10:	08022dc4 	.word	0x08022dc4
 8005f14:	08022dac 	.word	0x08022dac
 8005f18:	08022d7c 	.word	0x08022d7c
 8005f1c:	08022d94 	.word	0x08022d94
 8005f20:	08022100 	.word	0x08022100
 8005f24:	080236cc 	.word	0x080236cc
 8005f28:	080220a4 	.word	0x080220a4
 8005f2c:	08022b14 	.word	0x08022b14
 8005f30:	08023a08 	.word	0x08023a08
 8005f34:	080238d4 	.word	0x080238d4
 8005f38:	08023854 	.word	0x08023854
 8005f3c:	080234e4 	.word	0x080234e4
 8005f40:	08022bb0 	.word	0x08022bb0
 8005f44:	0802375c 	.word	0x0802375c
 8005f48:	08022b7c 	.word	0x08022b7c
 8005f4c:	08023af0 	.word	0x08023af0
 8005f50:	08022cec 	.word	0x08022cec
 8005f54:	080237c4 	.word	0x080237c4

08005f58 <_ZN14mainScreenViewD1Ev>:
 8005f58:	b4f0      	push	{r4, r5, r6, r7}
 8005f5a:	4b32      	ldr	r3, [pc, #200]	; (8006024 <_ZN14mainScreenViewD1Ev+0xcc>)
 8005f5c:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005f5e:	4b32      	ldr	r3, [pc, #200]	; (8006028 <_ZN14mainScreenViewD1Ev+0xd0>)
 8005f60:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
    }
 8005f64:	4b31      	ldr	r3, [pc, #196]	; (800602c <_ZN14mainScreenViewD1Ev+0xd4>)
 8005f66:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
 8005f6a:	f100 0398 	add.w	r3, r0, #152	; 0x98
 8005f6e:	4930      	ldr	r1, [pc, #192]	; (8006030 <_ZN14mainScreenViewD1Ev+0xd8>)
 8005f70:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005f74:	492f      	ldr	r1, [pc, #188]	; (8006034 <_ZN14mainScreenViewD1Ev+0xdc>)
 8005f76:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    }
 8005f7a:	492f      	ldr	r1, [pc, #188]	; (8006038 <_ZN14mainScreenViewD1Ev+0xe0>)
 8005f7c:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005f80:	4c2e      	ldr	r4, [pc, #184]	; (800603c <_ZN14mainScreenViewD1Ev+0xe4>)
 8005f82:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    {
 8005f86:	492e      	ldr	r1, [pc, #184]	; (8006040 <_ZN14mainScreenViewD1Ev+0xe8>)
 8005f88:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005f8c:	f8c3 41fc 	str.w	r4, [r3, #508]	; 0x1fc
    {
 8005f90:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005f94:	f8c3 41ec 	str.w	r4, [r3, #492]	; 0x1ec
    {
 8005f98:	f8c3 11ec 	str.w	r1, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005f9c:	f8c3 41dc 	str.w	r4, [r3, #476]	; 0x1dc
    {
 8005fa0:	f8c3 11dc 	str.w	r1, [r3, #476]	; 0x1dc
 8005fa4:	4f27      	ldr	r7, [pc, #156]	; (8006044 <_ZN14mainScreenViewD1Ev+0xec>)
 8005fa6:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8005faa:	4d27      	ldr	r5, [pc, #156]	; (8006048 <_ZN14mainScreenViewD1Ev+0xf0>)
 8005fac:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 8005fb0:	4c26      	ldr	r4, [pc, #152]	; (800604c <_ZN14mainScreenViewD1Ev+0xf4>)
 8005fb2:	f8c3 4194 	str.w	r4, [r3, #404]	; 0x194
 8005fb6:	4926      	ldr	r1, [pc, #152]	; (8006050 <_ZN14mainScreenViewD1Ev+0xf8>)
 8005fb8:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 8005fbc:	4e25      	ldr	r6, [pc, #148]	; (8006054 <_ZN14mainScreenViewD1Ev+0xfc>)
 8005fbe:	62de      	str	r6, [r3, #44]	; 0x2c
 8005fc0:	4e25      	ldr	r6, [pc, #148]	; (8006058 <_ZN14mainScreenViewD1Ev+0x100>)
 8005fc2:	f8c3 60e4 	str.w	r6, [r3, #228]	; 0xe4
 8005fc6:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8005fca:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8005fce:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8006070 <_ZN14mainScreenViewD1Ev+0x118>
 8005fd2:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8005fd6:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8006074 <_ZN14mainScreenViewD1Ev+0x11c>
 8005fda:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8005fde:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 8005fe2:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
 8005fe6:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 8005fea:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8005fee:	665e      	str	r6, [r3, #100]	; 0x64
 8005ff0:	665c      	str	r4, [r3, #100]	; 0x64
 8005ff2:	6659      	str	r1, [r3, #100]	; 0x64
 8005ff4:	4d19      	ldr	r5, [pc, #100]	; (800605c <_ZN14mainScreenViewD1Ev+0x104>)
 8005ff6:	62dd      	str	r5, [r3, #44]	; 0x2c
 8005ff8:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005ffa:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
 8005ffe:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 8006002:	4b17      	ldr	r3, [pc, #92]	; (8006060 <_ZN14mainScreenViewD1Ev+0x108>)
 8006004:	6003      	str	r3, [r0, #0]
 8006006:	66c6      	str	r6, [r0, #108]	; 0x6c
 8006008:	66c4      	str	r4, [r0, #108]	; 0x6c
 800600a:	66c1      	str	r1, [r0, #108]	; 0x6c
 800600c:	4b15      	ldr	r3, [pc, #84]	; (8006064 <_ZN14mainScreenViewD1Ev+0x10c>)
 800600e:	6403      	str	r3, [r0, #64]	; 0x40
 8006010:	6404      	str	r4, [r0, #64]	; 0x40
 8006012:	6401      	str	r1, [r0, #64]	; 0x40
 8006014:	4b14      	ldr	r3, [pc, #80]	; (8006068 <_ZN14mainScreenViewD1Ev+0x110>)
 8006016:	6003      	str	r3, [r0, #0]
 8006018:	4b14      	ldr	r3, [pc, #80]	; (800606c <_ZN14mainScreenViewD1Ev+0x114>)
 800601a:	6003      	str	r3, [r0, #0]
 800601c:	6045      	str	r5, [r0, #4]
 800601e:	6041      	str	r1, [r0, #4]
 8006020:	bcf0      	pop	{r4, r5, r6, r7}
 8006022:	4770      	bx	lr
 8006024:	080230d4 	.word	0x080230d4
 8006028:	080230bc 	.word	0x080230bc
 800602c:	080230a4 	.word	0x080230a4
 8006030:	08022dc4 	.word	0x08022dc4
 8006034:	08022dac 	.word	0x08022dac
 8006038:	08022d7c 	.word	0x08022d7c
 800603c:	08022d94 	.word	0x08022d94
 8006040:	08022100 	.word	0x08022100
 8006044:	080236cc 	.word	0x080236cc
 8006048:	080220a4 	.word	0x080220a4
 800604c:	08022b14 	.word	0x08022b14
 8006050:	08023a08 	.word	0x08023a08
 8006054:	080238d4 	.word	0x080238d4
 8006058:	08023854 	.word	0x08023854
 800605c:	080234e4 	.word	0x080234e4
 8006060:	08022bb0 	.word	0x08022bb0
 8006064:	0802375c 	.word	0x0802375c
 8006068:	08022b7c 	.word	0x08022b7c
 800606c:	08023af0 	.word	0x08023af0
 8006070:	08022cec 	.word	0x08022cec
 8006074:	080237c4 	.word	0x080237c4

08006078 <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView() :
 8006078:	b510      	push	{r4, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	4604      	mov	r4, r0
    keyboardDonePressedCallback(this, &mainScreenView::keyboardDonePressed)
 800607e:	f7fe fa49 	bl	8004514 <_ZN18mainScreenViewBaseC1Ev>
 8006082:	4620      	mov	r0, r4
 8006084:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <_ZN14mainScreenViewC1Ev+0x48>)
 8006086:	f840 3b98 	str.w	r3, [r0], #152
 800608a:	f7fe ffb9 	bl	8005000 <_ZN14CustomKeyboardC1Ev>
 800608e:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <_ZN14mainScreenViewC1Ev+0x4c>)
 8006090:	9302      	str	r3, [sp, #8]
 8006092:	2300      	movs	r3, #0
 8006094:	9303      	str	r3, [sp, #12]
 8006096:	466b      	mov	r3, sp
 8006098:	aa04      	add	r2, sp, #16
 800609a:	e912 0003 	ldmdb	r2, {r0, r1}
 800609e:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 80060a2:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <_ZN14mainScreenViewC1Ev+0x50>)
 80060a4:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
        : pobject(pObject), pmemfun(pmemfun_1)
 80060a8:	4a08      	ldr	r2, [pc, #32]	; (80060cc <_ZN14mainScreenViewC1Ev+0x54>)
 80060aa:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 80060ae:	f8c4 42d0 	str.w	r4, [r4, #720]	; 0x2d0
 80060b2:	f504 7235 	add.w	r2, r4, #724	; 0x2d4
 80060b6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80060ba:	4620      	mov	r0, r4
 80060bc:	b004      	add	sp, #16
 80060be:	bd10      	pop	{r4, pc}
 80060c0:	080230d4 	.word	0x080230d4
 80060c4:	08005e0f 	.word	0x08005e0f
 80060c8:	080230a4 	.word	0x080230a4
 80060cc:	080230bc 	.word	0x080230bc

080060d0 <_GLOBAL__sub_I__ZN14mainScreenViewC2Ev>:
}
 80060d0:	b508      	push	{r3, lr}
 80060d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060d6:	2001      	movs	r0, #1
 80060d8:	f7ff fc06 	bl	80058e8 <_Z41__static_initialization_and_destruction_0ii>
 80060dc:	bd08      	pop	{r3, pc}

080060de <_GLOBAL__sub_D__ZN14mainScreenViewC2Ev>:
 80060de:	b508      	push	{r3, lr}
 80060e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060e4:	2000      	movs	r0, #0
 80060e6:	f7ff fbff 	bl	80058e8 <_Z41__static_initialization_and_destruction_0ii>
 80060ea:	bd08      	pop	{r3, pc}

080060ec <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 80060ec:	4603      	mov	r3, r0
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80060ee:	3830      	subs	r0, #48	; 0x30
 80060f0:	b2c0      	uxtb	r0, r0
 80060f2:	2809      	cmp	r0, #9
 80060f4:	d90a      	bls.n	800610c <Hex2Num+0x20>
        return a - '0';
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80060f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	2a05      	cmp	r2, #5
 80060fe:	d906      	bls.n	800610e <Hex2Num+0x22>
        return (a - 'a') + 10;
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8006100:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	2a05      	cmp	r2, #5
 8006108:	d904      	bls.n	8006114 <Hex2Num+0x28>
        return (a - 'A') + 10;
    }

    return 0;
 800610a:	2000      	movs	r0, #0
}
 800610c:	4770      	bx	lr
        return (a - 'a') + 10;
 800610e:	3b57      	subs	r3, #87	; 0x57
 8006110:	b2d8      	uxtb	r0, r3
 8006112:	4770      	bx	lr
        return (a - 'A') + 10;
 8006114:	3b37      	subs	r3, #55	; 0x37
 8006116:	b2d8      	uxtb	r0, r3
 8006118:	4770      	bx	lr

0800611a <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800611a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611c:	4605      	mov	r5, r0
 800611e:	460e      	mov	r6, r1
    uint32_t sum = 0;
    uint8_t i = 0;
 8006120:	2400      	movs	r4, #0
    uint32_t sum = 0;
 8006122:	4627      	mov	r7, r4

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8006124:	e006      	b.n	8006134 <ParseHexNumber+0x1a>
        sum <<= 4;
 8006126:	013f      	lsls	r7, r7, #4
        sum += Hex2Num(*ptr);
 8006128:	f7ff ffe0 	bl	80060ec <Hex2Num>
 800612c:	4407      	add	r7, r0
        ptr++;
 800612e:	3501      	adds	r5, #1
        i++;
 8006130:	3401      	adds	r4, #1
 8006132:	b2e4      	uxtb	r4, r4
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8006134:	7828      	ldrb	r0, [r5, #0]
 8006136:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b05      	cmp	r3, #5
 8006144:	bf88      	it	hi
 8006146:	2a09      	cmphi	r2, #9
 8006148:	d9ed      	bls.n	8006126 <ParseHexNumber+0xc>
 800614a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b05      	cmp	r3, #5
 8006152:	d9e8      	bls.n	8006126 <ParseHexNumber+0xc>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8006154:	b106      	cbz	r6, 8006158 <ParseHexNumber+0x3e>
        *cnt = i;
 8006156:	7034      	strb	r4, [r6, #0]
    }
    return sum;                                        		/* Return number */
}
 8006158:	4638      	mov	r0, r7
 800615a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800615c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800615c:	b510      	push	{r4, lr}
 800615e:	4686      	mov	lr, r0
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8006160:	7803      	ldrb	r3, [r0, #0]
 8006162:	2b2d      	cmp	r3, #45	; 0x2d
 8006164:	d003      	beq.n	800616e <ParseNumber+0x12>
    uint8_t minus = 0, i = 0;
 8006166:	2400      	movs	r4, #0
 8006168:	46a4      	mov	ip, r4
 800616a:	2000      	movs	r0, #0
 800616c:	e00e      	b.n	800618c <ParseNumber+0x30>
        minus = 1;
        ptr++;
 800616e:	f100 0e01 	add.w	lr, r0, #1
        minus = 1;
 8006172:	2401      	movs	r4, #1
 8006174:	e7f8      	b.n	8006168 <ParseNumber+0xc>
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8006176:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800617a:	3b30      	subs	r3, #48	; 0x30
 800617c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
        ptr++;
 8006180:	f10e 0e01 	add.w	lr, lr, #1
        i++;
 8006184:	f10c 0c01 	add.w	ip, ip, #1
 8006188:	fa5f fc8c 	uxtb.w	ip, ip
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800618c:	f89e 3000 	ldrb.w	r3, [lr]
 8006190:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	2a09      	cmp	r2, #9
 8006198:	d9ed      	bls.n	8006176 <ParseNumber+0x1a>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800619a:	b109      	cbz	r1, 80061a0 <ParseNumber+0x44>
        *cnt = i;
 800619c:	f881 c000 	strb.w	ip, [r1]
    }
    if (minus) {                                    		/* Minus detected */
 80061a0:	b904      	cbnz	r4, 80061a4 <ParseNumber+0x48>
        return 0 - sum;
    }
    return sum;                                       		/* Return number */
}
 80061a2:	bd10      	pop	{r4, pc}
        return 0 - sum;
 80061a4:	4240      	negs	r0, r0
 80061a6:	e7fc      	b.n	80061a2 <ParseNumber+0x46>

080061a8 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	4604      	mov	r4, r0
 80061ae:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 80061b0:	2500      	movs	r5, #0

  while(* ptr) {
 80061b2:	e002      	b.n	80061ba <ParseMAC+0x12>
    hexcnt = 1;
    if(*ptr != ':')
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 80061b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80061b8:	441c      	add	r4, r3
  while(* ptr) {
 80061ba:	7823      	ldrb	r3, [r4, #0]
 80061bc:	b173      	cbz	r3, 80061dc <ParseMAC+0x34>
    hexcnt = 1;
 80061be:	2301      	movs	r3, #1
 80061c0:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != ':')
 80061c4:	7823      	ldrb	r3, [r4, #0]
 80061c6:	2b3a      	cmp	r3, #58	; 0x3a
 80061c8:	d0f4      	beq.n	80061b4 <ParseMAC+0xc>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80061ca:	f10d 0107 	add.w	r1, sp, #7
 80061ce:	4620      	mov	r0, r4
 80061d0:	f7ff ffa3 	bl	800611a <ParseHexNumber>
 80061d4:	1c6b      	adds	r3, r5, #1
 80061d6:	5570      	strb	r0, [r6, r5]
 80061d8:	b2dd      	uxtb	r5, r3
 80061da:	e7eb      	b.n	80061b4 <ParseMAC+0xc>
  }
}
 80061dc:	b002      	add	sp, #8
 80061de:	bd70      	pop	{r4, r5, r6, pc}

080061e0 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	4604      	mov	r4, r0
 80061e6:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 80061e8:	2500      	movs	r5, #0

  while(* ptr) {
 80061ea:	e002      	b.n	80061f2 <ParseIP+0x12>
    hexcnt = 1;
    if(*ptr != '.')
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 80061ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80061f0:	441c      	add	r4, r3
  while(* ptr) {
 80061f2:	7823      	ldrb	r3, [r4, #0]
 80061f4:	b173      	cbz	r3, 8006214 <ParseIP+0x34>
    hexcnt = 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != '.')
 80061fc:	7823      	ldrb	r3, [r4, #0]
 80061fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006200:	d0f4      	beq.n	80061ec <ParseIP+0xc>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8006202:	f10d 0107 	add.w	r1, sp, #7
 8006206:	4620      	mov	r0, r4
 8006208:	f7ff ffa8 	bl	800615c <ParseNumber>
 800620c:	1c6b      	adds	r3, r5, #1
 800620e:	5570      	strb	r0, [r6, r5]
 8006210:	b2dd      	uxtb	r5, r3
 8006212:	e7eb      	b.n	80061ec <ParseIP+0xc>
  }
}
 8006214:	b002      	add	sp, #8
 8006216:	bd70      	pop	{r4, r5, r6, pc}

08006218 <ArrayTo32bit>:
  }
}

static uint32_t ArrayTo32bit(uint8_t * buf)
{
	return ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3] << 0));
 8006218:	7802      	ldrb	r2, [r0, #0]
 800621a:	7843      	ldrb	r3, [r0, #1]
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006222:	7882      	ldrb	r2, [r0, #2]
 8006224:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006228:	78c0      	ldrb	r0, [r0, #3]
}
 800622a:	4318      	orrs	r0, r3
 800622c:	4770      	bx	lr

0800622e <AT_ParseIsConnected>:
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800622e:	7883      	ldrb	r3, [r0, #2]
 8006230:	2b31      	cmp	r3, #49	; 0x31
 8006232:	bf14      	ite	ne
 8006234:	2300      	movne	r3, #0
 8006236:	2301      	moveq	r3, #1
 8006238:	700b      	strb	r3, [r1, #0]
}
 800623a:	4770      	bx	lr

0800623c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	4616      	mov	r6, r2
  int ret = 0;
  int16_t recv_len = 0;

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8006244:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8006248:	4608      	mov	r0, r1
 800624a:	f7fa f85b 	bl	8000304 <strlen>
 800624e:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8006252:	b281      	uxth	r1, r0
 8006254:	4628      	mov	r0, r5
 8006256:	47b8      	blx	r7

  if( ret > 0)
 8006258:	2800      	cmp	r0, #0
 800625a:	dd25      	ble.n	80062a8 <AT_ExecuteCommand+0x6c>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800625c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006260:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8006264:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8006268:	4630      	mov	r0, r6
 800626a:	4798      	blx	r3
 800626c:	4604      	mov	r4, r0
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800626e:	1e43      	subs	r3, r0, #1
 8006270:	b29b      	uxth	r3, r3
 8006272:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8006276:	d212      	bcs.n	800629e <AT_ExecuteCommand+0x62>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8006278:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 800627c:	d008      	beq.n	8006290 <AT_ExecuteCommand+0x54>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
      }
      *(pdata + recv_len) = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	5533      	strb	r3, [r6, r4]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 8006282:	490c      	ldr	r1, [pc, #48]	; (80062b4 <AT_ExecuteCommand+0x78>)
 8006284:	4630      	mov	r0, r6
 8006286:	f01a ff6f 	bl	8021168 <strstr>
 800628a:	b118      	cbz	r0, 8006294 <AT_ExecuteCommand+0x58>
      {
        return ES_WIFI_STATUS_OK;
 800628c:	2000      	movs	r0, #0
 800628e:	e00a      	b.n	80062a6 <AT_ExecuteCommand+0x6a>
        recv_len--;
 8006290:	b21c      	sxth	r4, r3
 8006292:	e7f4      	b.n	800627e <AT_ExecuteCommand+0x42>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8006294:	4908      	ldr	r1, [pc, #32]	; (80062b8 <AT_ExecuteCommand+0x7c>)
 8006296:	4630      	mov	r0, r6
 8006298:	f01a ff66 	bl	8021168 <strstr>
 800629c:	b930      	cbnz	r0, 80062ac <AT_ExecuteCommand+0x70>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800629e:	f114 0f04 	cmn.w	r4, #4
 80062a2:	d005      	beq.n	80062b0 <AT_ExecuteCommand+0x74>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80062a4:	2004      	movs	r0, #4
}
 80062a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ES_WIFI_STATUS_IO_ERROR;
 80062a8:	2004      	movs	r0, #4
 80062aa:	e7fc      	b.n	80062a6 <AT_ExecuteCommand+0x6a>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80062ac:	2005      	movs	r0, #5
 80062ae:	e7fa      	b.n	80062a6 <AT_ExecuteCommand+0x6a>
      return ES_WIFI_STATUS_MODULE_CRASH;
 80062b0:	2006      	movs	r0, #6
 80062b2:	e7f8      	b.n	80062a6 <AT_ExecuteCommand+0x6a>
 80062b4:	08023100 	.word	0x08023100
 80062b8:	0802310c 	.word	0x0802310c

080062bc <ParseSecurity>:
{
 80062bc:	b510      	push	{r4, lr}
 80062be:	4604      	mov	r4, r0
  if(strstr(ptr,"Open")) return ES_WIFI_SEC_OPEN;
 80062c0:	4915      	ldr	r1, [pc, #84]	; (8006318 <ParseSecurity+0x5c>)
 80062c2:	f01a ff51 	bl	8021168 <strstr>
 80062c6:	b108      	cbz	r0, 80062cc <ParseSecurity+0x10>
 80062c8:	2000      	movs	r0, #0
}
 80062ca:	bd10      	pop	{r4, pc}
  else if(strstr(ptr,"WEP")) return ES_WIFI_SEC_WEP;
 80062cc:	4913      	ldr	r1, [pc, #76]	; (800631c <ParseSecurity+0x60>)
 80062ce:	4620      	mov	r0, r4
 80062d0:	f01a ff4a 	bl	8021168 <strstr>
 80062d4:	b108      	cbz	r0, 80062da <ParseSecurity+0x1e>
 80062d6:	2001      	movs	r0, #1
 80062d8:	e7f7      	b.n	80062ca <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 80062da:	4911      	ldr	r1, [pc, #68]	; (8006320 <ParseSecurity+0x64>)
 80062dc:	4620      	mov	r0, r4
 80062de:	f01a ff43 	bl	8021168 <strstr>
 80062e2:	b980      	cbnz	r0, 8006306 <ParseSecurity+0x4a>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 80062e4:	490f      	ldr	r1, [pc, #60]	; (8006324 <ParseSecurity+0x68>)
 80062e6:	4620      	mov	r0, r4
 80062e8:	f01a ff3e 	bl	8021168 <strstr>
 80062ec:	b968      	cbnz	r0, 800630a <ParseSecurity+0x4e>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 80062ee:	490e      	ldr	r1, [pc, #56]	; (8006328 <ParseSecurity+0x6c>)
 80062f0:	4620      	mov	r0, r4
 80062f2:	f01a ff39 	bl	8021168 <strstr>
 80062f6:	b950      	cbnz	r0, 800630e <ParseSecurity+0x52>
  else if(strstr(ptr,"WPA")) return ES_WIFI_SEC_WPA;
 80062f8:	490c      	ldr	r1, [pc, #48]	; (800632c <ParseSecurity+0x70>)
 80062fa:	4620      	mov	r0, r4
 80062fc:	f01a ff34 	bl	8021168 <strstr>
 8006300:	b138      	cbz	r0, 8006312 <ParseSecurity+0x56>
 8006302:	2002      	movs	r0, #2
 8006304:	e7e1      	b.n	80062ca <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 8006306:	2004      	movs	r0, #4
 8006308:	e7df      	b.n	80062ca <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 800630a:	2005      	movs	r0, #5
 800630c:	e7dd      	b.n	80062ca <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 800630e:	2003      	movs	r0, #3
 8006310:	e7db      	b.n	80062ca <ParseSecurity+0xe>
  else return ES_WIFI_SEC_UNKNOWN;
 8006312:	20ff      	movs	r0, #255	; 0xff
 8006314:	e7d9      	b.n	80062ca <ParseSecurity+0xe>
 8006316:	bf00      	nop
 8006318:	08023114 	.word	0x08023114
 800631c:	0802311c 	.word	0x0802311c
 8006320:	08023120 	.word	0x08023120
 8006324:	0802312c 	.word	0x0802312c
 8006328:	08023124 	.word	0x08023124
 800632c:	08023138 	.word	0x08023138

08006330 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8006330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	4617      	mov	r7, r2
 800633a:	461e      	mov	r6, r3
  int16_t send_len = 0;
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 800633c:	4608      	mov	r0, r1
 800633e:	f7f9 ffe1 	bl	8000304 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8006342:	f010 0f01 	tst.w	r0, #1
 8006346:	d138      	bne.n	80063ba <AT_RequestSendData+0x8a>
 8006348:	fa1f f880 	uxth.w	r8, r0
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800634c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006350:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8006354:	4641      	mov	r1, r8
 8006356:	4628      	mov	r0, r5
 8006358:	4798      	blx	r3
 800635a:	b280      	uxth	r0, r0
  if (n == cmd_len)
 800635c:	4580      	cmp	r8, r0
 800635e:	d002      	beq.n	8006366 <AT_RequestSendData+0x36>
    else
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8006360:	2004      	movs	r0, #4
}
 8006362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8006366:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800636a:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 800636e:	4631      	mov	r1, r6
 8006370:	4638      	mov	r0, r7
 8006372:	4798      	blx	r3
    if (send_len == len)
 8006374:	42b0      	cmp	r0, r6
 8006376:	d122      	bne.n	80063be <AT_RequestSendData+0x8e>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8006378:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800637c:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8006380:	2100      	movs	r1, #0
 8006382:	9806      	ldr	r0, [sp, #24]
 8006384:	4798      	blx	r3
      if (recv_len > 0)
 8006386:	2800      	cmp	r0, #0
 8006388:	dd10      	ble.n	80063ac <AT_RequestSendData+0x7c>
        *(pdata+recv_len) = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	9a06      	ldr	r2, [sp, #24]
 800638e:	5413      	strb	r3, [r2, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8006390:	490d      	ldr	r1, [pc, #52]	; (80063c8 <AT_RequestSendData+0x98>)
 8006392:	4610      	mov	r0, r2
 8006394:	f01a fee8 	bl	8021168 <strstr>
 8006398:	b108      	cbz	r0, 800639e <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 800639a:	2000      	movs	r0, #0
 800639c:	e7e1      	b.n	8006362 <AT_RequestSendData+0x32>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800639e:	490b      	ldr	r1, [pc, #44]	; (80063cc <AT_RequestSendData+0x9c>)
 80063a0:	9806      	ldr	r0, [sp, #24]
 80063a2:	f01a fee1 	bl	8021168 <strstr>
 80063a6:	b160      	cbz	r0, 80063c2 <AT_RequestSendData+0x92>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80063a8:	2005      	movs	r0, #5
 80063aa:	e7da      	b.n	8006362 <AT_RequestSendData+0x32>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80063ac:	f110 0f04 	cmn.w	r0, #4
 80063b0:	d001      	beq.n	80063b6 <AT_RequestSendData+0x86>
      return ES_WIFI_STATUS_ERROR;
 80063b2:	2002      	movs	r0, #2
 80063b4:	e7d5      	b.n	8006362 <AT_RequestSendData+0x32>
        return ES_WIFI_STATUS_MODULE_CRASH;
 80063b6:	2006      	movs	r0, #6
 80063b8:	e7d3      	b.n	8006362 <AT_RequestSendData+0x32>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80063ba:	2002      	movs	r0, #2
 80063bc:	e7d1      	b.n	8006362 <AT_RequestSendData+0x32>
      return ES_WIFI_STATUS_ERROR;
 80063be:	2002      	movs	r0, #2
 80063c0:	e7cf      	b.n	8006362 <AT_RequestSendData+0x32>
          return ES_WIFI_STATUS_ERROR;
 80063c2:	2002      	movs	r0, #2
 80063c4:	e7cd      	b.n	8006362 <AT_RequestSendData+0x32>
 80063c6:	bf00      	nop
 80063c8:	08023100 	.word	0x08023100
 80063cc:	0802310c 	.word	0x0802310c

080063d0 <AT_ParseFWRev>:
{
 80063d0:	b530      	push	{r4, r5, lr}
 80063d2:	b083      	sub	sp, #12
 80063d4:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 1, ".",&saveptr);
 80063d6:	aa01      	add	r2, sp, #4
 80063d8:	490e      	ldr	r1, [pc, #56]	; (8006414 <AT_ParseFWRev+0x44>)
 80063da:	3001      	adds	r0, #1
 80063dc:	f01a ff02 	bl	80211e4 <strtok_r>
  uint8_t num = 0;
 80063e0:	2400      	movs	r4, #0
  while ((ptr != NULL) && (num < 4)) {
 80063e2:	e006      	b.n	80063f2 <AT_ParseFWRev+0x22>
    num++;
 80063e4:	3401      	adds	r4, #1
 80063e6:	b2e4      	uxtb	r4, r4
    ptr = strtok_r(NULL, ".",&saveptr);
 80063e8:	aa01      	add	r2, sp, #4
 80063ea:	490a      	ldr	r1, [pc, #40]	; (8006414 <AT_ParseFWRev+0x44>)
 80063ec:	2000      	movs	r0, #0
 80063ee:	f01a fef9 	bl	80211e4 <strtok_r>
  while ((ptr != NULL) && (num < 4)) {
 80063f2:	1e03      	subs	r3, r0, #0
 80063f4:	bf18      	it	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2c03      	cmp	r4, #3
 80063fa:	bf88      	it	hi
 80063fc:	2300      	movhi	r3, #0
 80063fe:	b133      	cbz	r3, 800640e <AT_ParseFWRev+0x3e>
    switch (num) {
 8006400:	2c03      	cmp	r4, #3
 8006402:	d8ef      	bhi.n	80063e4 <AT_ParseFWRev+0x14>
      ver[num] =  ParseNumber(ptr,0);
 8006404:	2100      	movs	r1, #0
 8006406:	f7ff fea9 	bl	800615c <ParseNumber>
 800640a:	5528      	strb	r0, [r5, r4]
      break;
 800640c:	e7ea      	b.n	80063e4 <AT_ParseFWRev+0x14>
}
 800640e:	b003      	add	sp, #12
 8006410:	bd30      	pop	{r4, r5, pc}
 8006412:	bf00      	nop
 8006414:	0802313c 	.word	0x0802313c

08006418 <AT_ParsePing>:
{
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641a:	b083      	sub	sp, #12
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	4610      	mov	r0, r2
  ptr= strtok_r(pdata,",\n\r",&saveptr);
 8006422:	aa01      	add	r2, sp, #4
 8006424:	490f      	ldr	r1, [pc, #60]	; (8006464 <AT_ParsePing+0x4c>)
 8006426:	f01a fedd 	bl	80211e4 <strtok_r>
 800642a:	4603      	mov	r3, r0
  int i=0;
 800642c:	2600      	movs	r6, #0
  while(ptr)
 800642e:	b1bb      	cbz	r3, 8006460 <AT_ParsePing+0x48>
    ptr = strtok_r(0,"\n\r",&saveptr);
 8006430:	aa01      	add	r2, sp, #4
 8006432:	490d      	ldr	r1, [pc, #52]	; (8006468 <AT_ParsePing+0x50>)
 8006434:	2000      	movs	r0, #0
 8006436:	f01a fed5 	bl	80211e4 <strtok_r>
    if (ptr)
 800643a:	4603      	mov	r3, r0
 800643c:	2800      	cmp	r0, #0
 800643e:	d0f6      	beq.n	800642e <AT_ParsePing+0x16>
      res[i++]=ParseNumber(ptr,0);
 8006440:	1c77      	adds	r7, r6, #1
 8006442:	2100      	movs	r1, #0
 8006444:	f7ff fe8a 	bl	800615c <ParseNumber>
 8006448:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      if (i==count) return;
 800644c:	42bc      	cmp	r4, r7
 800644e:	d007      	beq.n	8006460 <AT_ParsePing+0x48>
      ptr = strtok_r(0,",\n\r",&saveptr);
 8006450:	aa01      	add	r2, sp, #4
 8006452:	4904      	ldr	r1, [pc, #16]	; (8006464 <AT_ParsePing+0x4c>)
 8006454:	2000      	movs	r0, #0
 8006456:	f01a fec5 	bl	80211e4 <strtok_r>
 800645a:	4603      	mov	r3, r0
      res[i++]=ParseNumber(ptr,0);
 800645c:	463e      	mov	r6, r7
 800645e:	e7e6      	b.n	800642e <AT_ParsePing+0x16>
}
 8006460:	b003      	add	sp, #12
 8006462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006464:	08023144 	.word	0x08023144
 8006468:	08023148 	.word	0x08023148

0800646c <AT_ParseTransportSettings>:
{
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8006472:	aa01      	add	r2, sp, #4
 8006474:	4937      	ldr	r1, [pc, #220]	; (8006554 <AT_ParseTransportSettings+0xe8>)
 8006476:	3002      	adds	r0, #2
 8006478:	f01a feb4 	bl	80211e4 <strtok_r>
 800647c:	4603      	mov	r3, r0
  uint8_t num = 0;
 800647e:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8006480:	e010      	b.n	80064a4 <AT_ParseTransportSettings+0x38>
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fe69 	bl	800615c <ParseNumber>
 800648a:	7028      	strb	r0, [r5, #0]
    ptr = strtok_r(NULL, ",",&saveptr);
 800648c:	aa01      	add	r2, sp, #4
 800648e:	4931      	ldr	r1, [pc, #196]	; (8006554 <AT_ParseTransportSettings+0xe8>)
 8006490:	2000      	movs	r0, #0
 8006492:	f01a fea7 	bl	80211e4 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8006496:	4603      	mov	r3, r0
 8006498:	b118      	cbz	r0, 80064a2 <AT_ParseTransportSettings+0x36>
 800649a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800649e:	2a2c      	cmp	r2, #44	; 0x2c
 80064a0:	d053      	beq.n	800654a <AT_ParseTransportSettings+0xde>
{
 80064a2:	4626      	mov	r6, r4
  while (ptr != NULL) {
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d053      	beq.n	8006550 <AT_ParseTransportSettings+0xe4>
    switch (num++) {
 80064a8:	1c74      	adds	r4, r6, #1
 80064aa:	b2e4      	uxtb	r4, r4
 80064ac:	2e09      	cmp	r6, #9
 80064ae:	d8ed      	bhi.n	800648c <AT_ParseTransportSettings+0x20>
 80064b0:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <AT_ParseTransportSettings+0x4c>)
 80064b2:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	08006483 	.word	0x08006483
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064f7 	.word	0x080064f7
 80064c8:	08006503 	.word	0x08006503
 80064cc:	0800650f 	.word	0x0800650f
 80064d0:	0800651b 	.word	0x0800651b
 80064d4:	08006527 	.word	0x08006527
 80064d8:	08006533 	.word	0x08006533
 80064dc:	0800653f 	.word	0x0800653f
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 80064e0:	1c69      	adds	r1, r5, #1
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff fe7c 	bl	80061e0 <ParseIP>
      break;
 80064e8:	e7d0      	b.n	800648c <AT_ParseTransportSettings+0x20>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fe35 	bl	800615c <ParseNumber>
 80064f2:	80e8      	strh	r0, [r5, #6]
      break;
 80064f4:	e7ca      	b.n	800648c <AT_ParseTransportSettings+0x20>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 80064f6:	f105 0108 	add.w	r1, r5, #8
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fe70 	bl	80061e0 <ParseIP>
      break;
 8006500:	e7c4      	b.n	800648c <AT_ParseTransportSettings+0x20>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8006502:	2100      	movs	r1, #0
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff fe29 	bl	800615c <ParseNumber>
 800650a:	81a8      	strh	r0, [r5, #12]
      break;
 800650c:	e7be      	b.n	800648c <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff fe23 	bl	800615c <ParseNumber>
 8006516:	73a8      	strb	r0, [r5, #14]
      break;
 8006518:	e7b8      	b.n	800648c <AT_ParseTransportSettings+0x20>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fe1d 	bl	800615c <ParseNumber>
 8006522:	73e8      	strb	r0, [r5, #15]
      break;
 8006524:	e7b2      	b.n	800648c <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 8006526:	2100      	movs	r1, #0
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff fe17 	bl	800615c <ParseNumber>
 800652e:	7428      	strb	r0, [r5, #16]
      break;
 8006530:	e7ac      	b.n	800648c <AT_ParseTransportSettings+0x20>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fe11 	bl	800615c <ParseNumber>
 800653a:	7468      	strb	r0, [r5, #17]
      break;
 800653c:	e7a6      	b.n	800648c <AT_ParseTransportSettings+0x20>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 800653e:	2100      	movs	r1, #0
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fe0b 	bl	800615c <ParseNumber>
 8006546:	74a8      	strb	r0, [r5, #18]
      break;
 8006548:	e7a0      	b.n	800648c <AT_ParseTransportSettings+0x20>
      num++;
 800654a:	1cb4      	adds	r4, r6, #2
 800654c:	b2e4      	uxtb	r4, r4
 800654e:	e7a8      	b.n	80064a2 <AT_ParseTransportSettings+0x36>
}
 8006550:	b002      	add	sp, #8
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	08023140 	.word	0x08023140

08006558 <AT_ParseInfo>:
{
 8006558:	b530      	push	{r4, r5, lr}
 800655a:	b083      	sub	sp, #12
 800655c:	4605      	mov	r5, r0
 800655e:	4608      	mov	r0, r1
  ptr = strtok_r((char *)pdata + 2, ",", &saveptr);
 8006560:	aa01      	add	r2, sp, #4
 8006562:	492c      	ldr	r1, [pc, #176]	; (8006614 <AT_ParseInfo+0xbc>)
 8006564:	3002      	adds	r0, #2
 8006566:	f01a fe3d 	bl	80211e4 <strtok_r>
  uint8_t num = 0;
 800656a:	2300      	movs	r3, #0
  while (ptr != NULL){
 800656c:	e00a      	b.n	8006584 <AT_ParseInfo+0x2c>
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800656e:	2220      	movs	r2, #32
 8006570:	4601      	mov	r1, r0
 8006572:	4628      	mov	r0, r5
 8006574:	f01a fde5 	bl	8021142 <strncpy>
    ptr = strtok_r(NULL, ",", &saveptr);
 8006578:	aa01      	add	r2, sp, #4
 800657a:	4926      	ldr	r1, [pc, #152]	; (8006614 <AT_ParseInfo+0xbc>)
 800657c:	2000      	movs	r0, #0
 800657e:	f01a fe31 	bl	80211e4 <strtok_r>
    switch (num++) {
 8006582:	4623      	mov	r3, r4
  while (ptr != NULL){
 8006584:	2800      	cmp	r0, #0
 8006586:	d042      	beq.n	800660e <AT_ParseInfo+0xb6>
    switch (num++) {
 8006588:	1c5c      	adds	r4, r3, #1
 800658a:	b2e4      	uxtb	r4, r4
 800658c:	2b06      	cmp	r3, #6
 800658e:	d8f3      	bhi.n	8006578 <AT_ParseInfo+0x20>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <AT_ParseInfo+0x40>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	0800656f 	.word	0x0800656f
 800659c:	080065b5 	.word	0x080065b5
 80065a0:	080065c3 	.word	0x080065c3
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	080065df 	.word	0x080065df
 80065ac:	080065ed 	.word	0x080065ed
 80065b0:	080065f9 	.word	0x080065f9
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80065b4:	2218      	movs	r2, #24
 80065b6:	4601      	mov	r1, r0
 80065b8:	f105 0020 	add.w	r0, r5, #32
 80065bc:	f01a fdc1 	bl	8021142 <strncpy>
      break;
 80065c0:	e7da      	b.n	8006578 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80065c2:	2210      	movs	r2, #16
 80065c4:	4601      	mov	r1, r0
 80065c6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80065ca:	f01a fdba 	bl	8021142 <strncpy>
      break;
 80065ce:	e7d3      	b.n	8006578 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80065d0:	2210      	movs	r2, #16
 80065d2:	4601      	mov	r1, r0
 80065d4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80065d8:	f01a fdb3 	bl	8021142 <strncpy>
      break;
 80065dc:	e7cc      	b.n	8006578 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80065de:	2210      	movs	r2, #16
 80065e0:	4601      	mov	r1, r0
 80065e2:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80065e6:	f01a fdac 	bl	8021142 <strncpy>
      break;
 80065ea:	e7c5      	b.n	8006578 <AT_ParseInfo+0x20>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80065ec:	2100      	movs	r1, #0
 80065ee:	f7ff fdb5 	bl	800615c <ParseNumber>
 80065f2:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
      break;
 80065f6:	e7bf      	b.n	8006578 <AT_ParseInfo+0x20>
      ptr = strtok_r(ptr, "\r", &saveptr);
 80065f8:	aa01      	add	r2, sp, #4
 80065fa:	4907      	ldr	r1, [pc, #28]	; (8006618 <AT_ParseInfo+0xc0>)
 80065fc:	f01a fdf2 	bl	80211e4 <strtok_r>
 8006600:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8006602:	2220      	movs	r2, #32
 8006604:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8006608:	f01a fd9b 	bl	8021142 <strncpy>
      break;
 800660c:	e7b4      	b.n	8006578 <AT_ParseInfo+0x20>
}
 800660e:	b003      	add	sp, #12
 8006610:	bd30      	pop	{r4, r5, pc}
 8006612:	bf00      	nop
 8006614:	08023140 	.word	0x08023140
 8006618:	080232b8 	.word	0x080232b8

0800661c <AT_ParseSingleAP>:
{
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	460e      	mov	r6, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8006622:	aa01      	add	r2, sp, #4
 8006624:	4926      	ldr	r1, [pc, #152]	; (80066c0 <AT_ParseSingleAP+0xa4>)
 8006626:	3002      	adds	r0, #2
 8006628:	f01a fddc 	bl	80211e4 <strtok_r>
 800662c:	4604      	mov	r4, r0
  uint8_t num = 0;
 800662e:	2300      	movs	r3, #0
  while (ptr != NULL) {
 8006630:	e011      	b.n	8006656 <AT_ParseSingleAP+0x3a>
      ptr[strlen(ptr) - 1] = 0;
 8006632:	4620      	mov	r0, r4
 8006634:	f7f9 fe66 	bl	8000304 <strlen>
 8006638:	3801      	subs	r0, #1
 800663a:	2300      	movs	r3, #0
 800663c:	5423      	strb	r3, [r4, r0]
      strncpy((char *)AP->SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800663e:	2221      	movs	r2, #33	; 0x21
 8006640:	1c61      	adds	r1, r4, #1
 8006642:	4630      	mov	r0, r6
 8006644:	f01a fd7d 	bl	8021142 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8006648:	aa01      	add	r2, sp, #4
 800664a:	491d      	ldr	r1, [pc, #116]	; (80066c0 <AT_ParseSingleAP+0xa4>)
 800664c:	2000      	movs	r0, #0
 800664e:	f01a fdc9 	bl	80211e4 <strtok_r>
 8006652:	4604      	mov	r4, r0
 8006654:	462b      	mov	r3, r5
  while (ptr != NULL) {
 8006656:	b38c      	cbz	r4, 80066bc <AT_ParseSingleAP+0xa0>
    switch (num++) {
 8006658:	1c5d      	adds	r5, r3, #1
 800665a:	b2ed      	uxtb	r5, r5
 800665c:	3b01      	subs	r3, #1
 800665e:	2b07      	cmp	r3, #7
 8006660:	d8f2      	bhi.n	8006648 <AT_ParseSingleAP+0x2c>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <AT_ParseSingleAP+0x4c>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	08006633 	.word	0x08006633
 800666c:	08006689 	.word	0x08006689
 8006670:	08006695 	.word	0x08006695
 8006674:	08006649 	.word	0x08006649
 8006678:	08006649 	.word	0x08006649
 800667c:	080066a1 	.word	0x080066a1
 8006680:	08006649 	.word	0x08006649
 8006684:	080066ad 	.word	0x080066ad
      ParseMAC(ptr, AP->MAC);
 8006688:	f106 0124 	add.w	r1, r6, #36	; 0x24
 800668c:	4620      	mov	r0, r4
 800668e:	f7ff fd8b 	bl	80061a8 <ParseMAC>
      break;
 8006692:	e7d9      	b.n	8006648 <AT_ParseSingleAP+0x2c>
      AP->RSSI = ParseNumber(ptr, NULL);
 8006694:	2100      	movs	r1, #0
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff fd60 	bl	800615c <ParseNumber>
 800669c:	8470      	strh	r0, [r6, #34]	; 0x22
      break;
 800669e:	e7d3      	b.n	8006648 <AT_ParseSingleAP+0x2c>
      AP->Security = ParseSecurity(ptr);
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7ff fe0b 	bl	80062bc <ParseSecurity>
 80066a6:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 80066aa:	e7cd      	b.n	8006648 <AT_ParseSingleAP+0x2c>
      AP->Channel = ParseNumber(ptr, NULL);
 80066ac:	2100      	movs	r1, #0
 80066ae:	4620      	mov	r0, r4
 80066b0:	f7ff fd54 	bl	800615c <ParseNumber>
 80066b4:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
      num = 1;
 80066b8:	2501      	movs	r5, #1
      break;
 80066ba:	e7c5      	b.n	8006648 <AT_ParseSingleAP+0x2c>
}
 80066bc:	b002      	add	sp, #8
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	08023140 	.word	0x08023140

080066c4 <AT_ParseAP>:
{
 80066c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066c6:	b083      	sub	sp, #12
 80066c8:	460f      	mov	r7, r1
  APs->nbr = 0;
 80066ca:	2400      	movs	r4, #0
 80066cc:	f881 4370 	strb.w	r4, [r1, #880]	; 0x370
  ptr = strtok_r(pdata + 2, "," ,&saveptr);
 80066d0:	aa01      	add	r2, sp, #4
 80066d2:	4935      	ldr	r1, [pc, #212]	; (80067a8 <AT_ParseAP+0xe4>)
 80066d4:	3002      	adds	r0, #2
 80066d6:	f01a fd85 	bl	80211e4 <strtok_r>
 80066da:	4605      	mov	r5, r0
  uint8_t num = 0;
 80066dc:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 80066de:	e015      	b.n	800670c <AT_ParseAP+0x48>
      ptr[strlen(ptr) - 1] = 0;
 80066e0:	4628      	mov	r0, r5
 80066e2:	f7f9 fe0f 	bl	8000304 <strlen>
 80066e6:	3801      	subs	r0, #1
 80066e8:	2300      	movs	r3, #0
 80066ea:	542b      	strb	r3, [r5, r0]
      strncpy((char *)APs->AP[APs->nbr].SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80066ec:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 80066f0:	2221      	movs	r2, #33	; 0x21
 80066f2:	1c69      	adds	r1, r5, #1
 80066f4:	202c      	movs	r0, #44	; 0x2c
 80066f6:	fb00 7003 	mla	r0, r0, r3, r7
 80066fa:	f01a fd22 	bl	8021142 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 80066fe:	aa01      	add	r2, sp, #4
 8006700:	4929      	ldr	r1, [pc, #164]	; (80067a8 <AT_ParseAP+0xe4>)
 8006702:	2000      	movs	r0, #0
 8006704:	f01a fd6e 	bl	80211e4 <strtok_r>
 8006708:	4605      	mov	r5, r0
 800670a:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 800670c:	2d00      	cmp	r5, #0
 800670e:	d049      	beq.n	80067a4 <AT_ParseAP+0xe0>
 8006710:	f897 6370 	ldrb.w	r6, [r7, #880]	; 0x370
 8006714:	2e13      	cmp	r6, #19
 8006716:	d845      	bhi.n	80067a4 <AT_ParseAP+0xe0>
    switch (num++) {
 8006718:	1c5c      	adds	r4, r3, #1
 800671a:	b2e4      	uxtb	r4, r4
 800671c:	3b01      	subs	r3, #1
 800671e:	2b07      	cmp	r3, #7
 8006720:	d8ed      	bhi.n	80066fe <AT_ParseAP+0x3a>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <AT_ParseAP+0x64>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	080066e1 	.word	0x080066e1
 800672c:	08006749 	.word	0x08006749
 8006730:	0800675d 	.word	0x0800675d
 8006734:	080066ff 	.word	0x080066ff
 8006738:	080066ff 	.word	0x080066ff
 800673c:	08006773 	.word	0x08006773
 8006740:	080066ff 	.word	0x080066ff
 8006744:	08006785 	.word	0x08006785
      ParseMAC(ptr, APs->AP[APs->nbr].MAC);
 8006748:	212c      	movs	r1, #44	; 0x2c
 800674a:	fb06 f101 	mul.w	r1, r6, r1
 800674e:	3120      	adds	r1, #32
 8006750:	4439      	add	r1, r7
 8006752:	3104      	adds	r1, #4
 8006754:	4628      	mov	r0, r5
 8006756:	f7ff fd27 	bl	80061a8 <ParseMAC>
      break;
 800675a:	e7d0      	b.n	80066fe <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].RSSI = ParseNumber(ptr, NULL);
 800675c:	2100      	movs	r1, #0
 800675e:	4628      	mov	r0, r5
 8006760:	f7ff fcfc 	bl	800615c <ParseNumber>
 8006764:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8006768:	222c      	movs	r2, #44	; 0x2c
 800676a:	fb02 7303 	mla	r3, r2, r3, r7
 800676e:	8458      	strh	r0, [r3, #34]	; 0x22
      break;
 8006770:	e7c5      	b.n	80066fe <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Security = ParseSecurity(ptr);
 8006772:	4628      	mov	r0, r5
 8006774:	f7ff fda2 	bl	80062bc <ParseSecurity>
 8006778:	232c      	movs	r3, #44	; 0x2c
 800677a:	fb03 7606 	mla	r6, r3, r6, r7
 800677e:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8006782:	e7bc      	b.n	80066fe <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Channel = ParseNumber(ptr, NULL);
 8006784:	2100      	movs	r1, #0
 8006786:	4628      	mov	r0, r5
 8006788:	f7ff fce8 	bl	800615c <ParseNumber>
 800678c:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8006790:	222c      	movs	r2, #44	; 0x2c
 8006792:	fb02 7203 	mla	r2, r2, r3, r7
 8006796:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
      APs->nbr++;
 800679a:	3301      	adds	r3, #1
 800679c:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
      num = 1;
 80067a0:	2401      	movs	r4, #1
      break;
 80067a2:	e7ac      	b.n	80066fe <AT_ParseAP+0x3a>
}
 80067a4:	b003      	add	sp, #12
 80067a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a8:	08023140 	.word	0x08023140

080067ac <AT_ParseConnSettings>:
{
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 80067b2:	aa01      	add	r2, sp, #4
 80067b4:	4942      	ldr	r1, [pc, #264]	; (80068c0 <AT_ParseConnSettings+0x114>)
 80067b6:	3002      	adds	r0, #2
 80067b8:	f01a fd14 	bl	80211e4 <strtok_r>
 80067bc:	4603      	mov	r3, r0
  uint8_t num = 0;
 80067be:	2600      	movs	r6, #0
  while (ptr != NULL) {
 80067c0:	e010      	b.n	80067e4 <AT_ParseConnSettings+0x38>
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80067c2:	2221      	movs	r2, #33	; 0x21
 80067c4:	4619      	mov	r1, r3
 80067c6:	4628      	mov	r0, r5
 80067c8:	f01a fcbb 	bl	8021142 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 80067cc:	aa01      	add	r2, sp, #4
 80067ce:	493c      	ldr	r1, [pc, #240]	; (80068c0 <AT_ParseConnSettings+0x114>)
 80067d0:	2000      	movs	r0, #0
 80067d2:	f01a fd07 	bl	80211e4 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80067d6:	4603      	mov	r3, r0
 80067d8:	b118      	cbz	r0, 80067e2 <AT_ParseConnSettings+0x36>
 80067da:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80067de:	2a2c      	cmp	r2, #44	; 0x2c
 80067e0:	d069      	beq.n	80068b6 <AT_ParseConnSettings+0x10a>
{
 80067e2:	4626      	mov	r6, r4
  while (ptr != NULL) {
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d069      	beq.n	80068bc <AT_ParseConnSettings+0x110>
    switch (num++) {
 80067e8:	1c74      	adds	r4, r6, #1
 80067ea:	b2e4      	uxtb	r4, r4
 80067ec:	2e0b      	cmp	r6, #11
 80067ee:	d8ed      	bhi.n	80067cc <AT_ParseConnSettings+0x20>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <AT_ParseConnSettings+0x4c>)
 80067f2:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	080067c3 	.word	0x080067c3
 80067fc:	08006829 	.word	0x08006829
 8006800:	08006835 	.word	0x08006835
 8006804:	08006843 	.word	0x08006843
 8006808:	08006851 	.word	0x08006851
 800680c:	0800685f 	.word	0x0800685f
 8006810:	0800686b 	.word	0x0800686b
 8006814:	08006877 	.word	0x08006877
 8006818:	08006883 	.word	0x08006883
 800681c:	0800688f 	.word	0x0800688f
 8006820:	0800689b 	.word	0x0800689b
 8006824:	080068a9 	.word	0x080068a9
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8006828:	2221      	movs	r2, #33	; 0x21
 800682a:	4619      	mov	r1, r3
 800682c:	18a8      	adds	r0, r5, r2
 800682e:	f01a fc88 	bl	8021142 <strncpy>
      break;
 8006832:	e7cb      	b.n	80067cc <AT_ParseConnSettings+0x20>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8006834:	2100      	movs	r1, #0
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff fc90 	bl	800615c <ParseNumber>
 800683c:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
        break;
 8006840:	e7c4      	b.n	80067cc <AT_ParseConnSettings+0x20>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8006842:	2100      	movs	r1, #0
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff fc89 	bl	800615c <ParseNumber>
 800684a:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
      break;
 800684e:	e7bd      	b.n	80067cc <AT_ParseConnSettings+0x20>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fc82 	bl	800615c <ParseNumber>
 8006858:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
      break;
 800685c:	e7b6      	b.n	80067cc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Addr);
 800685e:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fcbc 	bl	80061e0 <ParseIP>
      break;
 8006868:	e7b0      	b.n	80067cc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Mask);
 800686a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fcb6 	bl	80061e0 <ParseIP>
      break;
 8006874:	e7aa      	b.n	80067cc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8006876:	f105 0150 	add.w	r1, r5, #80	; 0x50
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fcb0 	bl	80061e0 <ParseIP>
      break;
 8006880:	e7a4      	b.n	80067cc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS1);
 8006882:	f105 0154 	add.w	r1, r5, #84	; 0x54
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fcaa 	bl	80061e0 <ParseIP>
      break;
 800688c:	e79e      	b.n	80067cc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS2);
 800688e:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fca4 	bl	80061e0 <ParseIP>
      break;
 8006898:	e798      	b.n	80067cc <AT_ParseConnSettings+0x20>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fc5d 	bl	800615c <ParseNumber>
 80068a2:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
      break;
 80068a6:	e791      	b.n	80067cc <AT_ParseConnSettings+0x20>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fc56 	bl	800615c <ParseNumber>
 80068b0:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
      break;
 80068b4:	e78a      	b.n	80067cc <AT_ParseConnSettings+0x20>
      num++;
 80068b6:	1cb4      	adds	r4, r6, #2
 80068b8:	b2e4      	uxtb	r4, r4
 80068ba:	e792      	b.n	80067e2 <AT_ParseConnSettings+0x36>
}
 80068bc:	b002      	add	sp, #8
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	08023140 	.word	0x08023140

080068c4 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	4604      	mov	r4, r0
 80068ca:	460d      	mov	r5, r1
 80068cc:	4690      	mov	r8, r2
 80068ce:	461e      	mov	r6, r3
  int len;
  uint8_t *p=Obj->CmdData;
 80068d0:	f500 7994 	add.w	r9, r0, #296	; 0x128

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80068d4:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 80068d8:	4608      	mov	r0, r1
 80068da:	f7f9 fd13 	bl	8000304 <strlen>
 80068de:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80068e2:	b281      	uxth	r1, r0
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b8      	blx	r7
 80068e8:	2800      	cmp	r0, #0
 80068ea:	dd48      	ble.n	800697e <AT_RequestReceiveData+0xba>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 80068ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80068f0:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80068f4:	2100      	movs	r1, #0
 80068f6:	4648      	mov	r0, r9
 80068f8:	4798      	blx	r3
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80068fa:	f110 0f04 	cmn.w	r0, #4
 80068fe:	d041      	beq.n	8006984 <AT_RequestReceiveData+0xc0>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8006900:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8006904:	2b0d      	cmp	r3, #13
 8006906:	d13f      	bne.n	8006988 <AT_RequestReceiveData+0xc4>
 8006908:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 800690c:	2b0a      	cmp	r3, #10
 800690e:	d13d      	bne.n	800698c <AT_RequestReceiveData+0xc8>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
    }
    len-=2;
 8006910:	1e85      	subs	r5, r0, #2
    p+=2;
 8006912:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    if (len >= AT_OK_STRING_LEN)
 8006916:	2d07      	cmp	r5, #7
 8006918:	d802      	bhi.n	8006920 <AT_RequestReceiveData+0x5c>

     *ReadData = 0;
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800691a:	2004      	movs	r0, #4
 800691c:	e030      	b.n	8006980 <AT_RequestReceiveData+0xbc>
     while(len && (p[len-1]==0x15)) len--;
 800691e:	3d01      	subs	r5, #1
 8006920:	b125      	cbz	r5, 800692c <AT_RequestReceiveData+0x68>
 8006922:	1963      	adds	r3, r4, r5
 8006924:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006928:	2b15      	cmp	r3, #21
 800692a:	d0f8      	beq.n	800691e <AT_RequestReceiveData+0x5a>
     p[len] = '\0';
 800692c:	2300      	movs	r3, #0
 800692e:	5563      	strb	r3, [r4, r5]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8006930:	f1a5 0008 	sub.w	r0, r5, #8
 8006934:	4916      	ldr	r1, [pc, #88]	; (8006990 <AT_RequestReceiveData+0xcc>)
 8006936:	4420      	add	r0, r4
 8006938:	f01a fc16 	bl	8021168 <strstr>
 800693c:	b170      	cbz	r0, 800695c <AT_RequestReceiveData+0x98>
       *ReadData = len - AT_OK_STRING_LEN;
 800693e:	3d08      	subs	r5, #8
 8006940:	b2ad      	uxth	r5, r5
 8006942:	9b08      	ldr	r3, [sp, #32]
 8006944:	801d      	strh	r5, [r3, #0]
	   if (*ReadData > Reqlen)
 8006946:	42b5      	cmp	r5, r6
 8006948:	d900      	bls.n	800694c <AT_RequestReceiveData+0x88>
         *ReadData = Reqlen;
 800694a:	801e      	strh	r6, [r3, #0]
       memcpy(pdata, p, *ReadData);
 800694c:	9b08      	ldr	r3, [sp, #32]
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	4621      	mov	r1, r4
 8006952:	4640      	mov	r0, r8
 8006954:	f019 fedc 	bl	8020710 <memcpy>
       return ES_WIFI_STATUS_OK;
 8006958:	2000      	movs	r0, #0
 800695a:	e011      	b.n	8006980 <AT_RequestReceiveData+0xbc>
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800695c:	1f28      	subs	r0, r5, #4
 800695e:	2204      	movs	r2, #4
 8006960:	490c      	ldr	r1, [pc, #48]	; (8006994 <AT_RequestReceiveData+0xd0>)
 8006962:	4420      	add	r0, r4
 8006964:	f019 fec4 	bl	80206f0 <memcmp>
 8006968:	b920      	cbnz	r0, 8006974 <AT_RequestReceiveData+0xb0>
       *ReadData = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	9a08      	ldr	r2, [sp, #32]
 800696e:	8013      	strh	r3, [r2, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8006970:	2005      	movs	r0, #5
 8006972:	e005      	b.n	8006980 <AT_RequestReceiveData+0xbc>
     *ReadData = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	9a08      	ldr	r2, [sp, #32]
 8006978:	8013      	strh	r3, [r2, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800697a:	2005      	movs	r0, #5
 800697c:	e000      	b.n	8006980 <AT_RequestReceiveData+0xbc>
  return ES_WIFI_STATUS_IO_ERROR;
 800697e:	2004      	movs	r0, #4
}
 8006980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return ES_WIFI_STATUS_MODULE_CRASH;
 8006984:	2006      	movs	r0, #6
 8006986:	e7fb      	b.n	8006980 <AT_RequestReceiveData+0xbc>
     return  ES_WIFI_STATUS_IO_ERROR;
 8006988:	2004      	movs	r0, #4
 800698a:	e7f9      	b.n	8006980 <AT_RequestReceiveData+0xbc>
 800698c:	2004      	movs	r0, #4
 800698e:	e7f7      	b.n	8006980 <AT_RequestReceiveData+0xbc>
 8006990:	08023100 	.word	0x08023100
 8006994:	08023104 	.word	0x08023104

08006998 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800699c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069a0:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80069a4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80069a8:	2000      	movs	r0, #0
 80069aa:	4798      	blx	r3
 80069ac:	b110      	cbz	r0, 80069b4 <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80069ae:	2502      	movs	r5, #2
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 80069b0:	4628      	mov	r0, r5
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80069b4:	f504 7694 	add.w	r6, r4, #296	; 0x128
 80069b8:	4632      	mov	r2, r6
 80069ba:	4906      	ldr	r1, [pc, #24]	; (80069d4 <ES_WIFI_Init+0x3c>)
 80069bc:	4620      	mov	r0, r4
 80069be:	f7ff fc3d 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80069c2:	4605      	mov	r5, r0
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d1f3      	bne.n	80069b0 <ES_WIFI_Init+0x18>
      AT_ParseInfo (Obj, Obj->CmdData);
 80069c8:	4631      	mov	r1, r6
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7ff fdc4 	bl	8006558 <AT_ParseInfo>
 80069d0:	e7ee      	b.n	80069b0 <ES_WIFI_Init+0x18>
 80069d2:	bf00      	nop
 80069d4:	0802314c 	.word	0x0802314c

080069d8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 80069d8:	b470      	push	{r4, r5, r6}
 80069da:	9c03      	ldr	r4, [sp, #12]
 80069dc:	9d04      	ldr	r5, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80069de:	2900      	cmp	r1, #0
 80069e0:	bf18      	it	ne
 80069e2:	2800      	cmpne	r0, #0
 80069e4:	d013      	beq.n	8006a0e <ES_WIFI_RegisterBusIO+0x36>
 80069e6:	460e      	mov	r6, r1
 80069e8:	fab4 f184 	clz	r1, r4
 80069ec:	0949      	lsrs	r1, r1, #5
 80069ee:	b182      	cbz	r2, 8006a12 <ES_WIFI_RegisterBusIO+0x3a>
 80069f0:	b979      	cbnz	r1, 8006a12 <ES_WIFI_RegisterBusIO+0x3a>
 80069f2:	b185      	cbz	r5, 8006a16 <ES_WIFI_RegisterBusIO+0x3e>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 80069f4:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80069f8:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80069fc:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8006a00:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8006a04:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8006a08:	2000      	movs	r0, #0
}
 8006a0a:	bc70      	pop	{r4, r5, r6}
 8006a0c:	4770      	bx	lr
    return ES_WIFI_STATUS_ERROR;
 8006a0e:	2002      	movs	r0, #2
 8006a10:	e7fb      	b.n	8006a0a <ES_WIFI_RegisterBusIO+0x32>
 8006a12:	2002      	movs	r0, #2
 8006a14:	e7f9      	b.n	8006a0a <ES_WIFI_RegisterBusIO+0x32>
 8006a16:	2002      	movs	r0, #2
 8006a18:	e7f7      	b.n	8006a0a <ES_WIFI_RegisterBusIO+0x32>
	...

08006a1c <ES_WIFI_ListAccessPoints>:
  * @param  Obj: pointer to module handle
  * @param  APs: pointer Access points structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_ListAccessPoints(ES_WIFIObject_t *Obj, ES_WIFI_APs_t *APs)
{
 8006a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	4606      	mov	r6, r0
 8006a22:	460f      	mov	r7, r1
  ES_WIFI_Status_t ret;
  int send_len;
  int16_t recv_len = 0;
  uint8_t version[4] = { 0 };
 8006a24:	2300      	movs	r3, #0
 8006a26:	9301      	str	r3, [sp, #4]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, (char*)Obj->FW_Rev);
 8006a28:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8006a2c:	f100 0120 	add.w	r1, r0, #32
 8006a30:	4620      	mov	r0, r4
 8006a32:	f01a fb0f 	bl	8021054 <siprintf>

  AT_ParseFWRev((char*)Obj->CmdData, version);
 8006a36:	a901      	add	r1, sp, #4
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f7ff fcc9 	bl	80063d0 <AT_ParseFWRev>

  if (ArrayTo32bit(version) >= UPDATED_SCAN_PARAMETERS_FW_REV)
 8006a3e:	a801      	add	r0, sp, #4
 8006a40:	f7ff fbea 	bl	8006218 <ArrayTo32bit>
 8006a44:	4b36      	ldr	r3, [pc, #216]	; (8006b20 <ES_WIFI_ListAccessPoints+0x104>)
 8006a46:	4298      	cmp	r0, r3
 8006a48:	d958      	bls.n	8006afc <ES_WIFI_ListAccessPoints+0xe0>
  {
    APs->nbr = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370

    sprintf((char*)Obj->CmdData,"F0=2\r");
 8006a50:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <ES_WIFI_ListAccessPoints+0x108>)
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
 8006a58:	889b      	ldrh	r3, [r3, #4]
 8006a5a:	80a3      	strh	r3, [r4, #4]

    send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8006a5c:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8006a60:	4620      	mov	r0, r4
 8006a62:	f7f9 fc4f 	bl	8000304 <strlen>
 8006a66:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8006a6a:	b281      	uxth	r1, r0
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	47a8      	blx	r5

    if (send_len == 5)
 8006a70:	2805      	cmp	r0, #5
 8006a72:	d019      	beq.n	8006aa8 <ES_WIFI_ListAccessPoints+0x8c>
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
	  } while (send_len == 3);
    }

    UNLOCK_WIFI();
    return ES_WIFI_STATUS_IO_ERROR;
 8006a74:	2504      	movs	r5, #4
      AT_ParseAP((char *)Obj->CmdData, APs);
    }
    UNLOCK_WIFI();
    return ret;
  }
}
 8006a76:	4628      	mov	r0, r5
 8006a78:	b003      	add	sp, #12
 8006a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8006a7c:	f115 0f04 	cmn.w	r5, #4
 8006a80:	d04b      	beq.n	8006b1a <ES_WIFI_ListAccessPoints+0xfe>
        if (APs->nbr < ES_WIFI_MAX_DETECTED_AP)
 8006a82:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8006a86:	2b13      	cmp	r3, #19
 8006a88:	d92c      	bls.n	8006ae4 <ES_WIFI_ListAccessPoints+0xc8>
        sprintf((char*)Obj->CmdData,"MR\r");
 8006a8a:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <ES_WIFI_ListAccessPoints+0x10c>)
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	6020      	str	r0, [r4, #0]
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8006a90:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7f9 fc35 	bl	8000304 <strlen>
 8006a9a:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8006a9e:	b281      	uxth	r1, r0
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	47a8      	blx	r5
	  } while (send_len == 3);
 8006aa4:	2803      	cmp	r0, #3
 8006aa6:	d1e5      	bne.n	8006a74 <ES_WIFI_ListAccessPoints+0x58>
	    recv_len = Obj->fops.IO_Receive(Obj->CmdData, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8006aa8:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8006aac:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8006ab0:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4798      	blx	r3
 8006ab8:	4605      	mov	r5, r0
        if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8006aba:	1e43      	subs	r3, r0, #1
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f240 5276 	movw	r2, #1398	; 0x576
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d8da      	bhi.n	8006a7c <ES_WIFI_ListAccessPoints+0x60>
          *(Obj->CmdData + recv_len) = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	5423      	strb	r3, [r4, r0]
	      if(strstr((char *)Obj->CmdData, AT_OK_STRING))
 8006aca:	4918      	ldr	r1, [pc, #96]	; (8006b2c <ES_WIFI_ListAccessPoints+0x110>)
 8006acc:	4620      	mov	r0, r4
 8006ace:	f01a fb4b 	bl	8021168 <strstr>
 8006ad2:	bb00      	cbnz	r0, 8006b16 <ES_WIFI_ListAccessPoints+0xfa>
	      else if(strstr((char *)Obj->CmdData, AT_ERROR_STRING))
 8006ad4:	4916      	ldr	r1, [pc, #88]	; (8006b30 <ES_WIFI_ListAccessPoints+0x114>)
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f01a fb46 	bl	8021168 <strstr>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d0cd      	beq.n	8006a7c <ES_WIFI_ListAccessPoints+0x60>
            return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8006ae0:	2505      	movs	r5, #5
 8006ae2:	e7c8      	b.n	8006a76 <ES_WIFI_ListAccessPoints+0x5a>
          AT_ParseSingleAP((char *)Obj->CmdData, &(APs->AP[APs->nbr]));
 8006ae4:	212c      	movs	r1, #44	; 0x2c
 8006ae6:	fb01 7103 	mla	r1, r1, r3, r7
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff fd96 	bl	800661c <AT_ParseSingleAP>
          APs->nbr++;
 8006af0:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8006af4:	3301      	adds	r3, #1
 8006af6:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
 8006afa:	e7c6      	b.n	8006a8a <ES_WIFI_ListAccessPoints+0x6e>
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"F0\r", Obj->CmdData);
 8006afc:	4622      	mov	r2, r4
 8006afe:	490d      	ldr	r1, [pc, #52]	; (8006b34 <ES_WIFI_ListAccessPoints+0x118>)
 8006b00:	4630      	mov	r0, r6
 8006b02:	f7ff fb9b 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006b06:	4605      	mov	r5, r0
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d1b4      	bne.n	8006a76 <ES_WIFI_ListAccessPoints+0x5a>
      AT_ParseAP((char *)Obj->CmdData, APs);
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7ff fdd8 	bl	80066c4 <AT_ParseAP>
    return ret;
 8006b14:	e7af      	b.n	8006a76 <ES_WIFI_ListAccessPoints+0x5a>
		    return ES_WIFI_STATUS_OK;
 8006b16:	2500      	movs	r5, #0
 8006b18:	e7ad      	b.n	8006a76 <ES_WIFI_ListAccessPoints+0x5a>
	      return ES_WIFI_STATUS_MODULE_CRASH;
 8006b1a:	2506      	movs	r5, #6
 8006b1c:	e7ab      	b.n	8006a76 <ES_WIFI_ListAccessPoints+0x5a>
 8006b1e:	bf00      	nop
 8006b20:	03050204 	.word	0x03050204
 8006b24:	08023154 	.word	0x08023154
 8006b28:	0802315c 	.word	0x0802315c
 8006b2c:	08023100 	.word	0x08023100
 8006b30:	0802310c 	.word	0x0802310c
 8006b34:	08023160 	.word	0x08023160

08006b38 <ES_WIFI_Connect>:
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8006b38:	2a00      	cmp	r2, #0
 8006b3a:	bf18      	it	ne
 8006b3c:	2900      	cmpne	r1, #0
 8006b3e:	d101      	bne.n	8006b44 <ES_WIFI_Connect+0xc>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8006b40:	2002      	movs	r0, #2
    }

    UNLOCK_WIFI();
  }
  return ret;
}
 8006b42:	4770      	bx	lr
{
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	4604      	mov	r4, r0
 8006b48:	461e      	mov	r6, r3
 8006b4a:	4617      	mov	r7, r2
    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8006b4c:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006b50:	460a      	mov	r2, r1
 8006b52:	491a      	ldr	r1, [pc, #104]	; (8006bbc <ES_WIFI_Connect+0x84>)
 8006b54:	4628      	mov	r0, r5
 8006b56:	f01a fa7d 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006b5a:	462a      	mov	r2, r5
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7ff fb6c 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006b64:	b100      	cbz	r0, 8006b68 <ES_WIFI_Connect+0x30>
}
 8006b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8006b68:	463a      	mov	r2, r7
 8006b6a:	4915      	ldr	r1, [pc, #84]	; (8006bc0 <ES_WIFI_Connect+0x88>)
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f01a fa71 	bl	8021054 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006b72:	462a      	mov	r2, r5
 8006b74:	4629      	mov	r1, r5
 8006b76:	4620      	mov	r0, r4
 8006b78:	f7ff fb60 	bl	800623c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1f2      	bne.n	8006b66 <ES_WIFI_Connect+0x2e>
        Obj->Security = SecType;
 8006b80:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8006b84:	4632      	mov	r2, r6
 8006b86:	490f      	ldr	r1, [pc, #60]	; (8006bc4 <ES_WIFI_Connect+0x8c>)
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f01a fa63 	bl	8021054 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006b8e:	462a      	mov	r2, r5
 8006b90:	4629      	mov	r1, r5
 8006b92:	4620      	mov	r0, r4
 8006b94:	f7ff fb52 	bl	800623c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d1e4      	bne.n	8006b66 <ES_WIFI_Connect+0x2e>
          sprintf((char*)Obj->CmdData,"C0\r");
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <ES_WIFI_Connect+0x90>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7ff fb47 	bl	800623c <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d1d9      	bne.n	8006b66 <ES_WIFI_Connect+0x2e>
            Obj->NetSettings.IsConnected = 1;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
 8006bb8:	e7d5      	b.n	8006b66 <ES_WIFI_Connect+0x2e>
 8006bba:	bf00      	nop
 8006bbc:	08023164 	.word	0x08023164
 8006bc0:	0802316c 	.word	0x0802316c
 8006bc4:	08023174 	.word	0x08023174
 8006bc8:	0802317c 	.word	0x0802317c

08006bcc <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8006bd0:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <ES_WIFI_IsConnected+0x30>)
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006bdc:	462a      	mov	r2, r5
 8006bde:	4629      	mov	r1, r5
 8006be0:	4620      	mov	r0, r4
 8006be2:	f7ff fb2b 	bl	800623c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8006be6:	b110      	cbz	r0, 8006bee <ES_WIFI_IsConnected+0x22>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8006be8:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8006bec:	bd38      	pop	{r3, r4, r5, pc}
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8006bee:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f7ff fb1b 	bl	800622e <AT_ParseIsConnected>
 8006bf8:	e7f6      	b.n	8006be8 <ES_WIFI_IsConnected+0x1c>
 8006bfa:	bf00      	nop
 8006bfc:	08023180 	.word	0x08023180

08006c00 <ES_WIFI_Disconnect>:
  * @brief  Disconnect from a network.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj)
{
 8006c00:	b508      	push	{r3, lr}
 8006c02:	4603      	mov	r3, r0
   ES_WIFI_Status_t ret;
   LOCK_WIFI();
   sprintf((char*)Obj->CmdData,"CD\r");
 8006c04:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8006c08:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <ES_WIFI_Disconnect+0x1c>)
 8006c0a:	6810      	ldr	r0, [r2, #0]
 8006c0c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
   ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006c10:	460a      	mov	r2, r1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff fb12 	bl	800623c <AT_ExecuteCommand>
   UNLOCK_WIFI();
   return  ret;
}
 8006c18:	bd08      	pop	{r3, pc}
 8006c1a:	bf00      	nop
 8006c1c:	08023184 	.word	0x08023184

08006c20 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8006c24:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <ES_WIFI_GetNetworkSettings+0x30>)
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006c30:	462a      	mov	r2, r5
 8006c32:	4629      	mov	r1, r5
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7ff fb01 	bl	800623c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	b108      	cbz	r0, 8006c42 <ES_WIFI_GetNetworkSettings+0x22>
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
  }

  UNLOCK_WIFI();
  return ret;
}
 8006c3e:	4630      	mov	r0, r6
 8006c40:	bd70      	pop	{r4, r5, r6, pc}
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8006c42:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 8006c46:	4628      	mov	r0, r5
 8006c48:	f7ff fdb0 	bl	80067ac <AT_ParseConnSettings>
 8006c4c:	e7f7      	b.n	8006c3e <ES_WIFI_GetNetworkSettings+0x1e>
 8006c4e:	bf00      	nop
 8006c50:	08023188 	.word	0x08023188

08006c54 <ES_WIFI_ActivateAP>:
  * @param  ip : AP IP address
  * @param  mac : AP MAC address
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ActivateAP(ES_WIFIObject_t *Obj, ES_WIFI_APConfig_t *ApConfig)
{
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	4604      	mov	r4, r0
 8006c58:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"AS=0,%s\r", ApConfig->SSID);
 8006c5a:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006c5e:	460a      	mov	r2, r1
 8006c60:	492b      	ldr	r1, [pc, #172]	; (8006d10 <ES_WIFI_ActivateAP+0xbc>)
 8006c62:	4628      	mov	r0, r5
 8006c64:	f01a f9f6 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7ff fae5 	bl	800623c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8006c72:	4607      	mov	r7, r0
 8006c74:	b108      	cbz	r0, 8006c7a <ES_WIFI_ActivateAP+0x26>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8006c76:	4638      	mov	r0, r7
 8006c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sprintf((char*)Obj->CmdData,"A1=%c\r", (int)ApConfig->Security + '0');
 8006c7a:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 8006c7e:	3230      	adds	r2, #48	; 0x30
 8006c80:	4924      	ldr	r1, [pc, #144]	; (8006d14 <ES_WIFI_ActivateAP+0xc0>)
 8006c82:	4628      	mov	r0, r5
 8006c84:	f01a f9e6 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006c88:	462a      	mov	r2, r5
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f7ff fad5 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006c92:	4607      	mov	r7, r0
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d1ee      	bne.n	8006c76 <ES_WIFI_ActivateAP+0x22>
      sprintf((char*)Obj->CmdData,"A2=%s\r", ApConfig->Pass);
 8006c98:	f106 0221 	add.w	r2, r6, #33	; 0x21
 8006c9c:	491e      	ldr	r1, [pc, #120]	; (8006d18 <ES_WIFI_ActivateAP+0xc4>)
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f01a f9d8 	bl	8021054 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff fac7 	bl	800623c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8006cae:	4607      	mov	r7, r0
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d1e0      	bne.n	8006c76 <ES_WIFI_ActivateAP+0x22>
        sprintf((char*)Obj->CmdData,"AC=%d\r", ApConfig->Channel);
 8006cb4:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8006cb8:	4918      	ldr	r1, [pc, #96]	; (8006d1c <ES_WIFI_ActivateAP+0xc8>)
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f01a f9ca 	bl	8021054 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff fab9 	bl	800623c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8006cca:	4607      	mov	r7, r0
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d1d2      	bne.n	8006c76 <ES_WIFI_ActivateAP+0x22>
          sprintf((char*)Obj->CmdData,"AT=%d\r", ApConfig->MaxConnections);
 8006cd0:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 8006cd4:	4912      	ldr	r1, [pc, #72]	; (8006d20 <ES_WIFI_ActivateAP+0xcc>)
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f01a f9bc 	bl	8021054 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006cdc:	462a      	mov	r2, r5
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f7ff faab 	bl	800623c <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d1c4      	bne.n	8006c76 <ES_WIFI_ActivateAP+0x22>
            sprintf((char*)Obj->CmdData,"A0\r");
 8006cec:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <ES_WIFI_ActivateAP+0xd0>)
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff fa9f 	bl	800623c <AT_ExecuteCommand>
            if(ret == ES_WIFI_STATUS_OK)
 8006cfe:	4607      	mov	r7, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d1b8      	bne.n	8006c76 <ES_WIFI_ActivateAP+0x22>
              if(strstr((char *)Obj->CmdData, "[AP     ]"))
 8006d04:	4908      	ldr	r1, [pc, #32]	; (8006d28 <ES_WIFI_ActivateAP+0xd4>)
 8006d06:	4628      	mov	r0, r5
 8006d08:	f01a fa2e 	bl	8021168 <strstr>
 8006d0c:	e7b3      	b.n	8006c76 <ES_WIFI_ActivateAP+0x22>
 8006d0e:	bf00      	nop
 8006d10:	0802318c 	.word	0x0802318c
 8006d14:	08023198 	.word	0x08023198
 8006d18:	080231a0 	.word	0x080231a0
 8006d1c:	080231a8 	.word	0x080231a8
 8006d20:	080231b0 	.word	0x080231b0
 8006d24:	080231b8 	.word	0x080231b8
 8006d28:	080231bc 	.word	0x080231bc

08006d2c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
  ES_WIFI_Status_t ret ;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8006d34:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <ES_WIFI_GetMACAddress+0x3c>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006d40:	460a      	mov	r2, r1
 8006d42:	4620      	mov	r0, r4
 8006d44:	f7ff fa7a 	bl	800623c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8006d48:	4606      	mov	r6, r0
 8006d4a:	b110      	cbz	r0, 8006d52 <ES_WIFI_GetMACAddress+0x26>
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
    ParseMAC(ptr, mac) ;
  }
  UNLOCK_WIFI();
  return ret;
}
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	b002      	add	sp, #8
 8006d50:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
 8006d52:	aa01      	add	r2, sp, #4
 8006d54:	4905      	ldr	r1, [pc, #20]	; (8006d6c <ES_WIFI_GetMACAddress+0x40>)
 8006d56:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8006d5a:	f01a fa43 	bl	80211e4 <strtok_r>
    ParseMAC(ptr, mac) ;
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f7ff fa22 	bl	80061a8 <ParseMAC>
 8006d64:	e7f2      	b.n	8006d4c <ES_WIFI_GetMACAddress+0x20>
 8006d66:	bf00      	nop
 8006d68:	080231c8 	.word	0x080231c8
 8006d6c:	080231cc 	.word	0x080231cc

08006d70 <ES_WIFI_Ping>:
  * @param  Obj: pointer to module handle
  * @param  Ping: ping structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Ping(ES_WIFIObject_t *Obj, uint8_t *address, uint16_t count, uint16_t interval_ms, int32_t result[])
{
 8006d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	4605      	mov	r5, r0
 8006d78:	460c      	mov	r4, r1
 8006d7a:	4617      	mov	r7, r2
 8006d7c:	4698      	mov	r8, r3
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  memset(result,-1,sizeof(int)*count);
 8006d7e:	0092      	lsls	r2, r2, #2
 8006d80:	f04f 31ff 	mov.w	r1, #4294967295
 8006d84:	9808      	ldr	r0, [sp, #32]
 8006d86:	f019 fcd1 	bl	802072c <memset>
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 8006d8a:	f505 7694 	add.w	r6, r5, #296	; 0x128
          address[2],address[3]);
 8006d8e:	78a3      	ldrb	r3, [r4, #2]
 8006d90:	78e2      	ldrb	r2, [r4, #3]
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	7863      	ldrb	r3, [r4, #1]
 8006d98:	7822      	ldrb	r2, [r4, #0]
 8006d9a:	491f      	ldr	r1, [pc, #124]	; (8006e18 <ES_WIFI_Ping+0xa8>)
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f01a f959 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006da2:	4632      	mov	r2, r6
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	f7ff fa48 	bl	800623c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8006dac:	4604      	mov	r4, r0
 8006dae:	b118      	cbz	r0, 8006db8 <ES_WIFI_Ping+0x48>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8006db0:	4620      	mov	r0, r4
 8006db2:	b002      	add	sp, #8
 8006db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"T2=%d\r", count);
 8006db8:	463a      	mov	r2, r7
 8006dba:	4918      	ldr	r1, [pc, #96]	; (8006e1c <ES_WIFI_Ping+0xac>)
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f01a f949 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f7ff fa38 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006dcc:	4604      	mov	r4, r0
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d1ee      	bne.n	8006db0 <ES_WIFI_Ping+0x40>
      sprintf((char*)Obj->CmdData,"T3=%d\r", interval_ms);
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	4912      	ldr	r1, [pc, #72]	; (8006e20 <ES_WIFI_Ping+0xb0>)
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f01a f93c 	bl	8021054 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ddc:	4632      	mov	r2, r6
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	f7ff fa2b 	bl	800623c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8006de6:	4604      	mov	r4, r0
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d1e1      	bne.n	8006db0 <ES_WIFI_Ping+0x40>
        sprintf((char*)Obj->CmdData,"T0=\r");
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <ES_WIFI_Ping+0xb4>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8006df4:	791b      	ldrb	r3, [r3, #4]
 8006df6:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006dfa:	4632      	mov	r2, r6
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f7ff fa1c 	bl	800623c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8006e04:	4604      	mov	r4, r0
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d1d2      	bne.n	8006db0 <ES_WIFI_Ping+0x40>
         AT_ParsePing(result,count,(char*)Obj->CmdData);
 8006e0a:	4632      	mov	r2, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	9808      	ldr	r0, [sp, #32]
 8006e10:	f7ff fb02 	bl	8006418 <AT_ParsePing>
 8006e14:	e7cc      	b.n	8006db0 <ES_WIFI_Ping+0x40>
 8006e16:	bf00      	nop
 8006e18:	080231d0 	.word	0x080231d0
 8006e1c:	080231e0 	.word	0x080231e0
 8006e20:	080231e8 	.word	0x080231e8
 8006e24:	080231f0 	.word	0x080231f0

08006e28 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	4616      	mov	r6, r2
  ES_WIFI_Status_t ret;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8006e30:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006e34:	460a      	mov	r2, r1
 8006e36:	490c      	ldr	r1, [pc, #48]	; (8006e68 <ES_WIFI_DNS_LookUp+0x40>)
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f01a f90b 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4629      	mov	r1, r5
 8006e42:	4620      	mov	r0, r4
 8006e44:	f7ff f9fa 	bl	800623c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8006e48:	4605      	mov	r5, r0
 8006e4a:	b110      	cbz	r0, 8006e52 <ES_WIFI_DNS_LookUp+0x2a>
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
    ParseIP(ptr, ipaddress);
  }
  UNLOCK_WIFI();
  return ret;
}
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	b002      	add	sp, #8
 8006e50:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
 8006e52:	aa01      	add	r2, sp, #4
 8006e54:	4905      	ldr	r1, [pc, #20]	; (8006e6c <ES_WIFI_DNS_LookUp+0x44>)
 8006e56:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8006e5a:	f01a f9c3 	bl	80211e4 <strtok_r>
    ParseIP(ptr, ipaddress);
 8006e5e:	4631      	mov	r1, r6
 8006e60:	f7ff f9be 	bl	80061e0 <ParseIP>
 8006e64:	e7f2      	b.n	8006e4c <ES_WIFI_DNS_LookUp+0x24>
 8006e66:	bf00      	nop
 8006e68:	080231f8 	.word	0x080231f8
 8006e6c:	080232b8 	.word	0x080232b8

08006e70 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	4605      	mov	r5, r0
 8006e76:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8006e78:	780b      	ldrb	r3, [r1, #0]
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	bf18      	it	ne
 8006e7e:	2b00      	cmpne	r3, #0
 8006e80:	d102      	bne.n	8006e88 <ES_WIFI_StartClientConnection+0x18>
 8006e82:	888b      	ldrh	r3, [r1, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d079      	beq.n	8006f7c <ES_WIFI_StartClientConnection+0x10c>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8006e88:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8006e8c:	78b2      	ldrb	r2, [r6, #2]
 8006e8e:	493c      	ldr	r1, [pc, #240]	; (8006f80 <ES_WIFI_StartClientConnection+0x110>)
 8006e90:	4620      	mov	r0, r4
 8006e92:	f01a f8df 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006e96:	4622      	mov	r2, r4
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f7ff f9ce 	bl	800623c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8006ea0:	b1c0      	cbz	r0, 8006ed4 <ES_WIFI_StartClientConnection+0x64>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8006ea2:	b310      	cbz	r0, 8006eea <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8006ea4:	b920      	cbnz	r0, 8006eb0 <ES_WIFI_StartClientConnection+0x40>
 8006ea6:	7833      	ldrb	r3, [r6, #0]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	bf18      	it	ne
 8006eac:	2b00      	cmpne	r3, #0
 8006eae:	d027      	beq.n	8006f00 <ES_WIFI_StartClientConnection+0x90>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8006eb0:	b920      	cbnz	r0, 8006ebc <ES_WIFI_StartClientConnection+0x4c>
 8006eb2:	7833      	ldrb	r3, [r6, #0]
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	bf18      	it	ne
 8006eb8:	2b00      	cmpne	r3, #0
 8006eba:	d02c      	beq.n	8006f16 <ES_WIFI_StartClientConnection+0xa6>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8006ebc:	b910      	cbnz	r0, 8006ec4 <ES_WIFI_StartClientConnection+0x54>
 8006ebe:	7833      	ldrb	r3, [r6, #0]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d038      	beq.n	8006f36 <ES_WIFI_StartClientConnection+0xc6>
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8006ec4:	b910      	cbnz	r0, 8006ecc <ES_WIFI_StartClientConnection+0x5c>
 8006ec6:	7833      	ldrb	r3, [r6, #0]
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d03f      	beq.n	8006f4c <ES_WIFI_StartClientConnection+0xdc>
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d049      	beq.n	8006f64 <ES_WIFI_StartClientConnection+0xf4>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8006ed4:	7832      	ldrb	r2, [r6, #0]
 8006ed6:	492b      	ldr	r1, [pc, #172]	; (8006f84 <ES_WIFI_StartClientConnection+0x114>)
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f01a f8bb 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f7ff f9aa 	bl	800623c <AT_ExecuteCommand>
 8006ee8:	e7db      	b.n	8006ea2 <ES_WIFI_StartClientConnection+0x32>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8006eea:	88f2      	ldrh	r2, [r6, #6]
 8006eec:	4926      	ldr	r1, [pc, #152]	; (8006f88 <ES_WIFI_StartClientConnection+0x118>)
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f01a f8b0 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff f99f 	bl	800623c <AT_ExecuteCommand>
 8006efe:	e7d1      	b.n	8006ea4 <ES_WIFI_StartClientConnection+0x34>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8006f00:	88b2      	ldrh	r2, [r6, #4]
 8006f02:	4922      	ldr	r1, [pc, #136]	; (8006f8c <ES_WIFI_StartClientConnection+0x11c>)
 8006f04:	4620      	mov	r0, r4
 8006f06:	f01a f8a5 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f7ff f994 	bl	800623c <AT_ExecuteCommand>
 8006f14:	e7cc      	b.n	8006eb0 <ES_WIFI_StartClientConnection+0x40>
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8006f16:	7ab3      	ldrb	r3, [r6, #10]
 8006f18:	7af2      	ldrb	r2, [r6, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8006f1a:	9201      	str	r2, [sp, #4]
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	7a73      	ldrb	r3, [r6, #9]
 8006f20:	7a32      	ldrb	r2, [r6, #8]
 8006f22:	491b      	ldr	r1, [pc, #108]	; (8006f90 <ES_WIFI_StartClientConnection+0x120>)
 8006f24:	4620      	mov	r0, r4
 8006f26:	f01a f895 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f7ff f984 	bl	800623c <AT_ExecuteCommand>
 8006f34:	e7c2      	b.n	8006ebc <ES_WIFI_StartClientConnection+0x4c>
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 8006f36:	7872      	ldrb	r2, [r6, #1]
 8006f38:	4916      	ldr	r1, [pc, #88]	; (8006f94 <ES_WIFI_StartClientConnection+0x124>)
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f01a f88a 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f40:	4622      	mov	r2, r4
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f7ff f979 	bl	800623c <AT_ExecuteCommand>
 8006f4a:	e7bb      	b.n	8006ec4 <ES_WIFI_StartClientConnection+0x54>
    sprintf((char*)Obj->CmdData,"PB=0\r");
 8006f4c:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <ES_WIFI_StartClientConnection+0x128>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8006f54:	889b      	ldrh	r3, [r3, #4]
 8006f56:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f58:	4622      	mov	r2, r4
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7ff f96d 	bl	800623c <AT_ExecuteCommand>
 8006f62:	e7b3      	b.n	8006ecc <ES_WIFI_StartClientConnection+0x5c>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8006f64:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <ES_WIFI_StartClientConnection+0x12c>)
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8006f6c:	889b      	ldrh	r3, [r3, #4]
 8006f6e:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f70:	4622      	mov	r2, r4
 8006f72:	4621      	mov	r1, r4
 8006f74:	4628      	mov	r0, r5
 8006f76:	f7ff f961 	bl	800623c <AT_ExecuteCommand>
 8006f7a:	e7a9      	b.n	8006ed0 <ES_WIFI_StartClientConnection+0x60>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8006f7c:	2002      	movs	r0, #2
 8006f7e:	e7a7      	b.n	8006ed0 <ES_WIFI_StartClientConnection+0x60>
 8006f80:	08023200 	.word	0x08023200
 8006f84:	08023208 	.word	0x08023208
 8006f88:	08023210 	.word	0x08023210
 8006f8c:	08023218 	.word	0x08023218
 8006f90:	08023220 	.word	0x08023220
 8006f94:	08023230 	.word	0x08023230
 8006f98:	08023238 	.word	0x08023238
 8006f9c:	08023240 	.word	0x08023240

08006fa0 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8006fa4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006fa8:	788a      	ldrb	r2, [r1, #2]
 8006faa:	490c      	ldr	r1, [pc, #48]	; (8006fdc <ES_WIFI_StopClientConnection+0x3c>)
 8006fac:	4628      	mov	r0, r5
 8006fae:	f01a f851 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7ff f940 	bl	800623c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8006fbc:	b100      	cbz	r0, 8006fc0 <ES_WIFI_StopClientConnection+0x20>
    sprintf((char*)Obj->CmdData,"P6=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  UNLOCK_WIFI();
  return ret;
}
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <ES_WIFI_StopClientConnection+0x40>)
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8006fc8:	889b      	ldrh	r3, [r3, #4]
 8006fca:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006fce:	462a      	mov	r2, r5
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f7ff f932 	bl	800623c <AT_ExecuteCommand>
 8006fd8:	e7f1      	b.n	8006fbe <ES_WIFI_StopClientConnection+0x1e>
 8006fda:	bf00      	nop
 8006fdc:	08023200 	.word	0x08023200
 8006fe0:	08023248 	.word	0x08023248

08006fe4 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8006fea:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8006fee:	788a      	ldrb	r2, [r1, #2]
 8006ff0:	492c      	ldr	r1, [pc, #176]	; (80070a4 <ES_WIFI_StartServerSingleConn+0xc0>)
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f01a f82e 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f7ff f91d 	bl	800623c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8007002:	4602      	mov	r2, r0
 8007004:	b928      	cbnz	r0, 8007012 <ES_WIFI_StartServerSingleConn+0x2e>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8007006:	7833      	ldrb	r3, [r6, #0]
 8007008:	3b01      	subs	r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d802      	bhi.n	8007016 <ES_WIFI_StartServerSingleConn+0x32>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8007010:	b18a      	cbz	r2, 8007036 <ES_WIFI_StartServerSingleConn+0x52>
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 8007012:	4610      	mov	r0, r2
 8007014:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <ES_WIFI_StartServerSingleConn+0xc4>)
 8007018:	cb03      	ldmia	r3!, {r0, r1}
 800701a:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800701e:	6061      	str	r1, [r4, #4]
 8007020:	881a      	ldrh	r2, [r3, #0]
 8007022:	789b      	ldrb	r3, [r3, #2]
 8007024:	8122      	strh	r2, [r4, #8]
 8007026:	72a3      	strb	r3, [r4, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007028:	4622      	mov	r2, r4
 800702a:	4621      	mov	r1, r4
 800702c:	4628      	mov	r0, r5
 800702e:	f7ff f905 	bl	800623c <AT_ExecuteCommand>
 8007032:	4602      	mov	r2, r0
 8007034:	e7ec      	b.n	8007010 <ES_WIFI_StartServerSingleConn+0x2c>
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8007036:	7832      	ldrb	r2, [r6, #0]
 8007038:	491c      	ldr	r1, [pc, #112]	; (80070ac <ES_WIFI_StartServerSingleConn+0xc8>)
 800703a:	4620      	mov	r0, r4
 800703c:	f01a f80a 	bl	8021054 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007040:	4622      	mov	r2, r4
 8007042:	4621      	mov	r1, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff f8f9 	bl	800623c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800704a:	4602      	mov	r2, r0
 800704c:	2800      	cmp	r0, #0
 800704e:	d1e0      	bne.n	8007012 <ES_WIFI_StartServerSingleConn+0x2e>
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8007050:	7c32      	ldrb	r2, [r6, #16]
 8007052:	4917      	ldr	r1, [pc, #92]	; (80070b0 <ES_WIFI_StartServerSingleConn+0xcc>)
 8007054:	4620      	mov	r0, r4
 8007056:	f019 fffd 	bl	8021054 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800705a:	4622      	mov	r2, r4
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f7ff f8ec 	bl	800623c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8007064:	4602      	mov	r2, r0
 8007066:	2800      	cmp	r0, #0
 8007068:	d1d3      	bne.n	8007012 <ES_WIFI_StartServerSingleConn+0x2e>
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800706a:	88f2      	ldrh	r2, [r6, #6]
 800706c:	4911      	ldr	r1, [pc, #68]	; (80070b4 <ES_WIFI_StartServerSingleConn+0xd0>)
 800706e:	4620      	mov	r0, r4
 8007070:	f019 fff0 	bl	8021054 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007074:	4622      	mov	r2, r4
 8007076:	4621      	mov	r1, r4
 8007078:	4628      	mov	r0, r5
 800707a:	f7ff f8df 	bl	800623c <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 800707e:	4602      	mov	r2, r0
 8007080:	2800      	cmp	r0, #0
 8007082:	d1c6      	bne.n	8007012 <ES_WIFI_StartServerSingleConn+0x2e>
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8007084:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <ES_WIFI_StartServerSingleConn+0xd4>)
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800708c:	889a      	ldrh	r2, [r3, #4]
 800708e:	799b      	ldrb	r3, [r3, #6]
 8007090:	80a2      	strh	r2, [r4, #4]
 8007092:	71a3      	strb	r3, [r4, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007094:	4622      	mov	r2, r4
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f7ff f8cf 	bl	800623c <AT_ExecuteCommand>
 800709e:	4602      	mov	r2, r0
 80070a0:	e7b7      	b.n	8007012 <ES_WIFI_StartServerSingleConn+0x2e>
 80070a2:	bf00      	nop
 80070a4:	08023200 	.word	0x08023200
 80070a8:	08023250 	.word	0x08023250
 80070ac:	08023208 	.word	0x08023208
 80070b0:	0802325c 	.word	0x0802325c
 80070b4:	08023210 	.word	0x08023210
 80070b8:	08023264 	.word	0x08023264

080070bc <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	b083      	sub	sp, #12
 80070c2:	4605      	mov	r5, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	4692      	mov	sl, r2
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;
  char          *saveptr;

  tstart=HAL_GetTick();
 80070c8:	f002 f88a 	bl	80091e0 <HAL_GetTick>
 80070cc:	4680      	mov	r8, r0
  tlast=tstart+timeout;
  if (tlast < tstart )
 80070ce:	eb10 0907 	adds.w	r9, r0, r7
 80070d2:	d301      	bcc.n	80070d8 <ES_WIFI_WaitServerConnection+0x1c>
  {
	   tstart=0;
 80070d4:	f04f 0800 	mov.w	r8, #0
 80070d8:	2600      	movs	r6, #0
 80070da:	e02d      	b.n	8007138 <ES_WIFI_WaitServerConnection+0x7c>
        if(strstr((char *)Obj->CmdData, "Accepted"))
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80070dc:	4946      	ldr	r1, [pc, #280]	; (80071f8 <ES_WIFI_WaitServerConnection+0x13c>)
 80070de:	4620      	mov	r0, r4
 80070e0:	f01a f842 	bl	8021168 <strstr>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f000 8081 	beq.w	80071ec <ES_WIFI_WaitServerConnection+0x130>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80070ea:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80070ee:	2100      	movs	r1, #0
 80070f0:	4620      	mov	r0, r4
 80070f2:	f019 fb1b 	bl	802072c <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 80070f6:	4b41      	ldr	r3, [pc, #260]	; (80071fc <ES_WIFI_WaitServerConnection+0x140>)
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80070fe:	4622      	mov	r2, r4
 8007100:	4621      	mov	r1, r4
 8007102:	4628      	mov	r0, r5
 8007104:	f7ff f89a 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007108:	4683      	mov	fp, r0
 800710a:	2800      	cmp	r0, #0
 800710c:	d171      	bne.n	80071f2 <ES_WIFI_WaitServerConnection+0x136>
    {
      if(accepted && (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 800710e:	b136      	cbz	r6, 800711e <ES_WIFI_WaitServerConnection+0x62>
 8007110:	220c      	movs	r2, #12
 8007112:	493b      	ldr	r1, [pc, #236]	; (8007200 <ES_WIFI_WaitServerConnection+0x144>)
 8007114:	4620      	mov	r0, r4
 8007116:	f01a f800 	bl	802111a <strncmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	d133      	bne.n	8007186 <ES_WIFI_WaitServerConnection+0xca>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 800711e:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8007122:	2064      	movs	r0, #100	; 0x64
 8007124:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 8007126:	f002 f85b 	bl	80091e0 <HAL_GetTick>
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800712a:	b12f      	cbz	r7, 8007138 <ES_WIFI_WaitServerConnection+0x7c>
 800712c:	464b      	mov	r3, r9
 800712e:	45c1      	cmp	r9, r8
 8007130:	bf38      	it	cc
 8007132:	4643      	movcc	r3, r8
 8007134:	4283      	cmp	r3, r0
 8007136:	d950      	bls.n	80071da <ES_WIFI_WaitServerConnection+0x11e>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8007138:	f505 7494 	add.w	r4, r5, #296	; 0x128
 800713c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8007140:	2100      	movs	r1, #0
 8007142:	4620      	mov	r0, r4
 8007144:	f019 faf2 	bl	802072c <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8007148:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <ES_WIFI_WaitServerConnection+0x148>)
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007150:	4622      	mov	r2, r4
 8007152:	4621      	mov	r1, r4
 8007154:	4628      	mov	r0, r5
 8007156:	f7ff f871 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800715a:	2800      	cmp	r0, #0
 800715c:	d140      	bne.n	80071e0 <ES_WIFI_WaitServerConnection+0x124>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 800715e:	492a      	ldr	r1, [pc, #168]	; (8007208 <ES_WIFI_WaitServerConnection+0x14c>)
 8007160:	4620      	mov	r0, r4
 8007162:	f01a f801 	bl	8021168 <strstr>
 8007166:	2800      	cmp	r0, #0
 8007168:	d0bf      	beq.n	80070ea <ES_WIFI_WaitServerConnection+0x2e>
 800716a:	4928      	ldr	r1, [pc, #160]	; (800720c <ES_WIFI_WaitServerConnection+0x150>)
 800716c:	4620      	mov	r0, r4
 800716e:	f019 fffb 	bl	8021168 <strstr>
 8007172:	2800      	cmp	r0, #0
 8007174:	d0b9      	beq.n	80070ea <ES_WIFI_WaitServerConnection+0x2e>
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8007176:	4926      	ldr	r1, [pc, #152]	; (8007210 <ES_WIFI_WaitServerConnection+0x154>)
 8007178:	4620      	mov	r0, r4
 800717a:	f019 fff5 	bl	8021168 <strstr>
 800717e:	2800      	cmp	r0, #0
 8007180:	d0ac      	beq.n	80070dc <ES_WIFI_WaitServerConnection+0x20>
         accepted=true;// flushing out the MR messages
 8007182:	2601      	movs	r6, #1
 8007184:	e7b1      	b.n	80070ea <ES_WIFI_WaitServerConnection+0x2e>
        ptr = strtok_r((char *)Obj->CmdData + 2, ",",&saveptr);
 8007186:	4c23      	ldr	r4, [pc, #140]	; (8007214 <ES_WIFI_WaitServerConnection+0x158>)
 8007188:	aa01      	add	r2, sp, #4
 800718a:	4621      	mov	r1, r4
 800718c:	f505 7095 	add.w	r0, r5, #298	; 0x12a
 8007190:	f01a f828 	bl	80211e4 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //port
 8007194:	aa01      	add	r2, sp, #4
 8007196:	4621      	mov	r1, r4
 8007198:	2000      	movs	r0, #0
 800719a:	f01a f823 	bl	80211e4 <strtok_r>
        ParseIP((char *)ptr, conn->RemoteIP);
 800719e:	f10a 0108 	add.w	r1, sl, #8
 80071a2:	f7ff f81d 	bl	80061e0 <ParseIP>
        ptr = strtok_r(0, ",",&saveptr); //port
 80071a6:	aa01      	add	r2, sp, #4
 80071a8:	4621      	mov	r1, r4
 80071aa:	2000      	movs	r0, #0
 80071ac:	f01a f81a 	bl	80211e4 <strtok_r>
        conn->LocalPort=ParseNumber(ptr,0);
 80071b0:	2100      	movs	r1, #0
 80071b2:	f7fe ffd3 	bl	800615c <ParseNumber>
 80071b6:	f8aa 0006 	strh.w	r0, [sl, #6]
        ptr = strtok_r(0, ",",&saveptr); //ip
 80071ba:	aa01      	add	r2, sp, #4
 80071bc:	4621      	mov	r1, r4
 80071be:	2000      	movs	r0, #0
 80071c0:	f01a f810 	bl	80211e4 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //remote port
 80071c4:	aa01      	add	r2, sp, #4
 80071c6:	4621      	mov	r1, r4
 80071c8:	2000      	movs	r0, #0
 80071ca:	f01a f80b 	bl	80211e4 <strtok_r>
        conn->RemotePort=ParseNumber(ptr,0);
 80071ce:	2100      	movs	r1, #0
 80071d0:	f7fe ffc4 	bl	800615c <ParseNumber>
 80071d4:	f8aa 0004 	strh.w	r0, [sl, #4]
        return ES_WIFI_STATUS_OK;
 80071d8:	e004      	b.n	80071e4 <ES_WIFI_WaitServerConnection+0x128>
  return ES_WIFI_STATUS_TIMEOUT;
 80071da:	f04f 0b03 	mov.w	fp, #3
 80071de:	e001      	b.n	80071e4 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 80071e0:	f04f 0b02 	mov.w	fp, #2
}
 80071e4:	4658      	mov	r0, fp
 80071e6:	b003      	add	sp, #12
 80071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return ES_WIFI_STATUS_ERROR;
 80071ec:	f04f 0b02 	mov.w	fp, #2
 80071f0:	e7f8      	b.n	80071e4 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 80071f2:	f04f 0b02 	mov.w	fp, #2
 80071f6:	e7f5      	b.n	80071e4 <ES_WIFI_WaitServerConnection+0x128>
 80071f8:	08023288 	.word	0x08023288
 80071fc:	08023298 	.word	0x08023298
 8007200:	0802329c 	.word	0x0802329c
 8007204:	0802315c 	.word	0x0802315c
 8007208:	0802326c 	.word	0x0802326c
 800720c:	08023274 	.word	0x08023274
 8007210:	0802327c 	.word	0x0802327c
 8007214:	08023140 	.word	0x08023140

08007218 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4604      	mov	r4, r0
 800721c:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800721e:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007222:	490d      	ldr	r1, [pc, #52]	; (8007258 <ES_WIFI_CloseServerConnection+0x40>)
 8007224:	4628      	mov	r0, r5
 8007226:	f019 ff15 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800722a:	462a      	mov	r2, r5
 800722c:	4629      	mov	r1, r5
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff f804 	bl	800623c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8007234:	b100      	cbz	r0, 8007238 <ES_WIFI_CloseServerConnection+0x20>
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8007236:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 8007238:	4b08      	ldr	r3, [pc, #32]	; (800725c <ES_WIFI_CloseServerConnection+0x44>)
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8007240:	889a      	ldrh	r2, [r3, #4]
 8007242:	799b      	ldrb	r3, [r3, #6]
 8007244:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
 8007248:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800724c:	462a      	mov	r2, r5
 800724e:	4629      	mov	r1, r5
 8007250:	4620      	mov	r0, r4
 8007252:	f7fe fff3 	bl	800623c <AT_ExecuteCommand>
  return ret;
 8007256:	e7ee      	b.n	8007236 <ES_WIFI_CloseServerConnection+0x1e>
 8007258:	08023200 	.word	0x08023200
 800725c:	080232ac 	.word	0x080232ac

08007260 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4604      	mov	r4, r0
 8007264:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8007266:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800726a:	490c      	ldr	r1, [pc, #48]	; (800729c <ES_WIFI_StopServerSingleConn+0x3c>)
 800726c:	4628      	mov	r0, r5
 800726e:	f019 fef1 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007272:	462a      	mov	r2, r5
 8007274:	4629      	mov	r1, r5
 8007276:	4620      	mov	r0, r4
 8007278:	f7fe ffe0 	bl	800623c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 800727c:	b100      	cbz	r0, 8007280 <ES_WIFI_StopServerSingleConn+0x20>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 800727e:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <ES_WIFI_StopServerSingleConn+0x40>)
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8007288:	889b      	ldrh	r3, [r3, #4]
 800728a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800728e:	462a      	mov	r2, r5
 8007290:	4629      	mov	r1, r5
 8007292:	4620      	mov	r0, r4
 8007294:	f7fe ffd2 	bl	800623c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8007298:	e7f1      	b.n	800727e <ES_WIFI_StopServerSingleConn+0x1e>
 800729a:	bf00      	nop
 800729c:	08023200 	.word	0x08023200
 80072a0:	080232b4 	.word	0x080232b4

080072a4 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80072a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	4605      	mov	r5, r0
 80072ac:	4690      	mov	r8, r2
 80072ae:	461c      	mov	r4, r3
 80072b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80072b4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80072b8:	f1b9 0f00 	cmp.w	r9, #0
 80072bc:	d101      	bne.n	80072c2 <ES_WIFI_SendData+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80072be:	f04f 0901 	mov.w	r9, #1
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80072c2:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 80072c6:	d301      	bcc.n	80072cc <ES_WIFI_SendData+0x28>
 80072c8:	f44f 6496 	mov.w	r4, #1200	; 0x4b0

  *SentLen = Reqlen;
 80072cc:	f8aa 4000 	strh.w	r4, [sl]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80072d0:	f505 7694 	add.w	r6, r5, #296	; 0x128
 80072d4:	460a      	mov	r2, r1
 80072d6:	491c      	ldr	r1, [pc, #112]	; (8007348 <ES_WIFI_SendData+0xa4>)
 80072d8:	4630      	mov	r0, r6
 80072da:	f019 febb 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80072de:	4632      	mov	r2, r6
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	f7fe ffaa 	bl	800623c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80072e8:	4607      	mov	r7, r0
 80072ea:	b128      	cbz	r0, 80072f8 <ES_WIFI_SendData+0x54>
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80072ec:	2f02      	cmp	r7, #2
 80072ee:	d026      	beq.n	800733e <ES_WIFI_SendData+0x9a>
  {
    *SentLen = 0;
  }
  UNLOCK_WIFI();
  return ret;
}
 80072f0:	4638      	mov	r0, r7
 80072f2:	b002      	add	sp, #8
 80072f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80072f8:	464a      	mov	r2, r9
 80072fa:	4914      	ldr	r1, [pc, #80]	; (800734c <ES_WIFI_SendData+0xa8>)
 80072fc:	4630      	mov	r0, r6
 80072fe:	f019 fea9 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007302:	4632      	mov	r2, r6
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	f7fe ff98 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800730c:	4607      	mov	r7, r0
 800730e:	2800      	cmp	r0, #0
 8007310:	d1ec      	bne.n	80072ec <ES_WIFI_SendData+0x48>
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8007312:	4622      	mov	r2, r4
 8007314:	490e      	ldr	r1, [pc, #56]	; (8007350 <ES_WIFI_SendData+0xac>)
 8007316:	4630      	mov	r0, r6
 8007318:	f019 fe9c 	bl	8021054 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800731c:	9600      	str	r6, [sp, #0]
 800731e:	4623      	mov	r3, r4
 8007320:	4642      	mov	r2, r8
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	f7ff f803 	bl	8006330 <AT_RequestSendData>
      if(ret == ES_WIFI_STATUS_OK)
 800732a:	4607      	mov	r7, r0
 800732c:	2800      	cmp	r0, #0
 800732e:	d1dd      	bne.n	80072ec <ES_WIFI_SendData+0x48>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8007330:	4908      	ldr	r1, [pc, #32]	; (8007354 <ES_WIFI_SendData+0xb0>)
 8007332:	4630      	mov	r0, r6
 8007334:	f019 ff18 	bl	8021168 <strstr>
 8007338:	2800      	cmp	r0, #0
 800733a:	d0d7      	beq.n	80072ec <ES_WIFI_SendData+0x48>
          ret = ES_WIFI_STATUS_ERROR;
 800733c:	2702      	movs	r7, #2
    *SentLen = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	f8aa 3000 	strh.w	r3, [sl]
 8007344:	e7d4      	b.n	80072f0 <ES_WIFI_SendData+0x4c>
 8007346:	bf00      	nop
 8007348:	08023200 	.word	0x08023200
 800734c:	080232bc 	.word	0x080232bc
 8007350:	080232c4 	.word	0x080232c4
 8007354:	080232d0 	.word	0x080232d0

08007358 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8007358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	4606      	mov	r6, r0
 8007360:	4690      	mov	r8, r2
 8007362:	461f      	mov	r7, r3
 8007364:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007368:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 800736c:	f1b9 0f00 	cmp.w	r9, #0
 8007370:	d101      	bne.n	8007376 <ES_WIFI_SendDataTo+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8007372:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8007376:	f506 7594 	add.w	r5, r6, #296	; 0x128
 800737a:	460a      	mov	r2, r1
 800737c:	493d      	ldr	r1, [pc, #244]	; (8007474 <ES_WIFI_SendDataTo+0x11c>)
 800737e:	4628      	mov	r0, r5
 8007380:	f019 fe68 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007384:	462a      	mov	r2, r5
 8007386:	4629      	mov	r1, r5
 8007388:	4630      	mov	r0, r6
 800738a:	f7fe ff57 	bl	800623c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 800738e:	4604      	mov	r4, r0
 8007390:	b300      	cbz	r0, 80073d4 <ES_WIFI_SendDataTo+0x7c>
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 8007392:	b364      	cbz	r4, 80073ee <ES_WIFI_SendDataTo+0x96>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8007394:	2c00      	cmp	r4, #0
 8007396:	d037      	beq.n	8007408 <ES_WIFI_SendDataTo+0xb0>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8007398:	b924      	cbnz	r4, 80073a4 <ES_WIFI_SendDataTo+0x4c>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 800739a:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
 800739e:	d301      	bcc.n	80073a4 <ES_WIFI_SendDataTo+0x4c>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80073a0:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 80073a4:	2c00      	cmp	r4, #0
 80073a6:	d044      	beq.n	8007432 <ES_WIFI_SendDataTo+0xda>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 80073a8:	2c00      	cmp	r4, #0
 80073aa:	d04e      	beq.n	800744a <ES_WIFI_SendDataTo+0xf2>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 80073ac:	2c00      	cmp	r4, #0
 80073ae:	d15a      	bne.n	8007466 <ES_WIFI_SendDataTo+0x10e>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 80073b0:	4931      	ldr	r1, [pc, #196]	; (8007478 <ES_WIFI_SendDataTo+0x120>)
 80073b2:	4628      	mov	r0, r5
 80073b4:	f019 fed8 	bl	8021168 <strstr>
    if(ptr != NULL)
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d054      	beq.n	8007466 <ES_WIFI_SendDataTo+0x10e>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 80073bc:	f506 66d4 	add.w	r6, r6, #1696	; 0x6a0
 80073c0:	4286      	cmp	r6, r0
 80073c2:	d855      	bhi.n	8007470 <ES_WIFI_SendDataTo+0x118>
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 80073c4:	2404      	movs	r4, #4
    *SentLen = Reqlen;
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
    *SentLen = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ca:	8013      	strh	r3, [r2, #0]
  }

  UNLOCK_WIFI();
  return ret;
}
 80073cc:	4620      	mov	r0, r4
 80073ce:	b002      	add	sp, #8
 80073d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 80073d4:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 80073d8:	4928      	ldr	r1, [pc, #160]	; (800747c <ES_WIFI_SendDataTo+0x124>)
 80073da:	4628      	mov	r0, r5
 80073dc:	f019 fe3a 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80073e0:	462a      	mov	r2, r5
 80073e2:	4629      	mov	r1, r5
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7fe ff29 	bl	800623c <AT_ExecuteCommand>
 80073ea:	4604      	mov	r4, r0
 80073ec:	e7d1      	b.n	8007392 <ES_WIFI_SendDataTo+0x3a>
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 80073ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80073f2:	4923      	ldr	r1, [pc, #140]	; (8007480 <ES_WIFI_SendDataTo+0x128>)
 80073f4:	4628      	mov	r0, r5
 80073f6:	f019 fe2d 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80073fa:	462a      	mov	r2, r5
 80073fc:	4629      	mov	r1, r5
 80073fe:	4630      	mov	r0, r6
 8007400:	f7fe ff1c 	bl	800623c <AT_ExecuteCommand>
 8007404:	4604      	mov	r4, r0
 8007406:	e7c5      	b.n	8007394 <ES_WIFI_SendDataTo+0x3c>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8007408:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800740c:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8007410:	9201      	str	r2, [sp, #4]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007418:	f89a 2000 	ldrb.w	r2, [sl]
 800741c:	4919      	ldr	r1, [pc, #100]	; (8007484 <ES_WIFI_SendDataTo+0x12c>)
 800741e:	4628      	mov	r0, r5
 8007420:	f019 fe18 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007424:	462a      	mov	r2, r5
 8007426:	4629      	mov	r1, r5
 8007428:	4630      	mov	r0, r6
 800742a:	f7fe ff07 	bl	800623c <AT_ExecuteCommand>
 800742e:	4604      	mov	r4, r0
 8007430:	e7b2      	b.n	8007398 <ES_WIFI_SendDataTo+0x40>
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8007432:	464a      	mov	r2, r9
 8007434:	4914      	ldr	r1, [pc, #80]	; (8007488 <ES_WIFI_SendDataTo+0x130>)
 8007436:	4628      	mov	r0, r5
 8007438:	f019 fe0c 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800743c:	462a      	mov	r2, r5
 800743e:	4629      	mov	r1, r5
 8007440:	4630      	mov	r0, r6
 8007442:	f7fe fefb 	bl	800623c <AT_ExecuteCommand>
 8007446:	4604      	mov	r4, r0
 8007448:	e7ae      	b.n	80073a8 <ES_WIFI_SendDataTo+0x50>
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800744a:	463a      	mov	r2, r7
 800744c:	490f      	ldr	r1, [pc, #60]	; (800748c <ES_WIFI_SendDataTo+0x134>)
 800744e:	4628      	mov	r0, r5
 8007450:	f019 fe00 	bl	8021054 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8007454:	9500      	str	r5, [sp, #0]
 8007456:	463b      	mov	r3, r7
 8007458:	4642      	mov	r2, r8
 800745a:	4629      	mov	r1, r5
 800745c:	4630      	mov	r0, r6
 800745e:	f7fe ff67 	bl	8006330 <AT_RequestSendData>
 8007462:	4604      	mov	r4, r0
 8007464:	e7a2      	b.n	80073ac <ES_WIFI_SendDataTo+0x54>
  if (ret == ES_WIFI_STATUS_OK)
 8007466:	2c00      	cmp	r4, #0
 8007468:	d1ad      	bne.n	80073c6 <ES_WIFI_SendDataTo+0x6e>
    *SentLen = Reqlen;
 800746a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746c:	801f      	strh	r7, [r3, #0]
 800746e:	e7ad      	b.n	80073cc <ES_WIFI_SendDataTo+0x74>
        ret = ES_WIFI_STATUS_ERROR;
 8007470:	2402      	movs	r4, #2
 8007472:	e7a8      	b.n	80073c6 <ES_WIFI_SendDataTo+0x6e>
 8007474:	08023200 	.word	0x08023200
 8007478:	080232d0 	.word	0x080232d0
 800747c:	08023210 	.word	0x08023210
 8007480:	08023218 	.word	0x08023218
 8007484:	08023220 	.word	0x08023220
 8007488:	080232bc 	.word	0x080232bc
 800748c:	080232c4 	.word	0x080232c4

08007490 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8007490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	4604      	mov	r4, r0
 8007498:	4690      	mov	r8, r2
 800749a:	461d      	mov	r5, r3
 800749c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 800749e:	b906      	cbnz	r6, 80074a2 <ES_WIFI_ReceiveData+0x12>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80074a0:	2601      	movs	r6, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80074a2:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80074a6:	d903      	bls.n	80074b0 <ES_WIFI_ReceiveData+0x20>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80074a8:	2002      	movs	r0, #2
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80074aa:	b002      	add	sp, #8
 80074ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80074b0:	f504 7794 	add.w	r7, r4, #296	; 0x128
 80074b4:	460a      	mov	r2, r1
 80074b6:	491b      	ldr	r1, [pc, #108]	; (8007524 <ES_WIFI_ReceiveData+0x94>)
 80074b8:	4638      	mov	r0, r7
 80074ba:	f019 fdcb 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80074be:	463a      	mov	r2, r7
 80074c0:	4639      	mov	r1, r7
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7fe feba 	bl	800623c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80074c8:	b120      	cbz	r0, 80074d4 <ES_WIFI_ReceiveData+0x44>
      issue15++;
 80074ca:	4a17      	ldr	r2, [pc, #92]	; (8007528 <ES_WIFI_ReceiveData+0x98>)
 80074cc:	6813      	ldr	r3, [r2, #0]
 80074ce:	3301      	adds	r3, #1
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	e7ea      	b.n	80074aa <ES_WIFI_ReceiveData+0x1a>
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80074d4:	462a      	mov	r2, r5
 80074d6:	4915      	ldr	r1, [pc, #84]	; (800752c <ES_WIFI_ReceiveData+0x9c>)
 80074d8:	4638      	mov	r0, r7
 80074da:	f019 fdbb 	bl	8021054 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80074de:	463a      	mov	r2, r7
 80074e0:	4639      	mov	r1, r7
 80074e2:	4620      	mov	r0, r4
 80074e4:	f7fe feaa 	bl	800623c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80074e8:	b118      	cbz	r0, 80074f2 <ES_WIFI_ReceiveData+0x62>
        *Receivedlen = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	9a08      	ldr	r2, [sp, #32]
 80074ee:	8013      	strh	r3, [r2, #0]
 80074f0:	e7db      	b.n	80074aa <ES_WIFI_ReceiveData+0x1a>
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80074f2:	4632      	mov	r2, r6
 80074f4:	490e      	ldr	r1, [pc, #56]	; (8007530 <ES_WIFI_ReceiveData+0xa0>)
 80074f6:	4638      	mov	r0, r7
 80074f8:	f019 fdac 	bl	8021054 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80074fc:	463a      	mov	r2, r7
 80074fe:	4639      	mov	r1, r7
 8007500:	4620      	mov	r0, r4
 8007502:	f7fe fe9b 	bl	800623c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8007506:	2800      	cmp	r0, #0
 8007508:	d1cf      	bne.n	80074aa <ES_WIFI_ReceiveData+0x1a>
          sprintf((char*)Obj->CmdData,"R0\r");
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <ES_WIFI_ReceiveData+0xa4>)
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	462b      	mov	r3, r5
 8007518:	4642      	mov	r2, r8
 800751a:	4639      	mov	r1, r7
 800751c:	4620      	mov	r0, r4
 800751e:	f7ff f9d1 	bl	80068c4 <AT_RequestReceiveData>
            DEBUG("AT_RequestReceiveData  failed\n");
 8007522:	e7c2      	b.n	80074aa <ES_WIFI_ReceiveData+0x1a>
 8007524:	08023200 	.word	0x08023200
 8007528:	24002e24 	.word	0x24002e24
 800752c:	080232d8 	.word	0x080232d8
 8007530:	080232e0 	.word	0x080232e0
 8007534:	080232e8 	.word	0x080232e8

08007538 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 8007538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800753c:	b088      	sub	sp, #32
 800753e:	4605      	mov	r5, r0
 8007540:	4690      	mov	r8, r2
 8007542:	461e      	mov	r6, r3
 8007544:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007546:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	803b      	strh	r3, [r7, #0]


  if (Timeout == 0)
 800754e:	f1b9 0f00 	cmp.w	r9, #0
 8007552:	d101      	bne.n	8007558 <ES_WIFI_ReceiveDataFrom+0x20>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8007554:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8007558:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 800755c:	d90f      	bls.n	800757e <ES_WIFI_ReceiveDataFrom+0x46>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800755e:	2402      	movs	r4, #2
  else
  {
    DEBUG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 8007560:	b344      	cbz	r4, 80075b4 <ES_WIFI_ReceiveDataFrom+0x7c>
  else
  {
    DEBUG("R1 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 8007562:	b3ac      	cbz	r4, 80075d0 <ES_WIFI_ReceiveDataFrom+0x98>
  else
  {
    DEBUG("R2 failed.\n");
  }

  if (ret == ES_WIFI_STATUS_OK)
 8007564:	b924      	cbnz	r4, 8007570 <ES_WIFI_ReceiveDataFrom+0x38>
  {
    if (*Receivedlen > Reqlen)
 8007566:	883b      	ldrh	r3, [r7, #0]
 8007568:	42b3      	cmp	r3, r6
 800756a:	d85f      	bhi.n	800762c <ES_WIFI_ReceiveDataFrom+0xf4>
      DEBUG("AT_RequestReceiveData overflow\n.");
      ret = ES_WIFI_STATUS_ERROR;
    }
    else
    {
      if (*Receivedlen > 0)
 800756c:	2b00      	cmp	r3, #0
 800756e:	d13d      	bne.n	80075ec <ES_WIFI_ReceiveDataFrom+0xb4>
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 8007570:	b10c      	cbz	r4, 8007576 <ES_WIFI_ReceiveDataFrom+0x3e>
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
    *Receivedlen = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	803b      	strh	r3, [r7, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 8007576:	4620      	mov	r0, r4
 8007578:	b008      	add	sp, #32
 800757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 800757e:	f505 7a94 	add.w	sl, r5, #296	; 0x128
 8007582:	460a      	mov	r2, r1
 8007584:	492a      	ldr	r1, [pc, #168]	; (8007630 <ES_WIFI_ReceiveDataFrom+0xf8>)
 8007586:	4650      	mov	r0, sl
 8007588:	f019 fd64 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800758c:	4652      	mov	r2, sl
 800758e:	4651      	mov	r1, sl
 8007590:	4628      	mov	r0, r5
 8007592:	f7fe fe53 	bl	800623c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8007596:	4604      	mov	r4, r0
 8007598:	2800      	cmp	r0, #0
 800759a:	d1e1      	bne.n	8007560 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800759c:	4632      	mov	r2, r6
 800759e:	4925      	ldr	r1, [pc, #148]	; (8007634 <ES_WIFI_ReceiveDataFrom+0xfc>)
 80075a0:	4650      	mov	r0, sl
 80075a2:	f019 fd57 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80075a6:	4652      	mov	r2, sl
 80075a8:	4651      	mov	r1, sl
 80075aa:	4628      	mov	r0, r5
 80075ac:	f7fe fe46 	bl	800623c <AT_ExecuteCommand>
 80075b0:	4604      	mov	r4, r0
 80075b2:	e7d5      	b.n	8007560 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80075b4:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80075b8:	464a      	mov	r2, r9
 80075ba:	491f      	ldr	r1, [pc, #124]	; (8007638 <ES_WIFI_ReceiveDataFrom+0x100>)
 80075bc:	4620      	mov	r0, r4
 80075be:	f019 fd49 	bl	8021054 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80075c2:	4622      	mov	r2, r4
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f7fe fe38 	bl	800623c <AT_ExecuteCommand>
 80075cc:	4604      	mov	r4, r0
 80075ce:	e7c8      	b.n	8007562 <ES_WIFI_ReceiveDataFrom+0x2a>
    sprintf((char*)Obj->CmdData,"R0\r");
 80075d0:	4b1a      	ldr	r3, [pc, #104]	; (800763c <ES_WIFI_ReceiveDataFrom+0x104>)
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80075d8:	9700      	str	r7, [sp, #0]
 80075da:	4633      	mov	r3, r6
 80075dc:	4642      	mov	r2, r8
 80075de:	f505 7194 	add.w	r1, r5, #296	; 0x128
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7ff f96e 	bl	80068c4 <AT_RequestReceiveData>
 80075e8:	4604      	mov	r4, r0
 80075ea:	e7bb      	b.n	8007564 <ES_WIFI_ReceiveDataFrom+0x2c>
        sprintf((char*)Obj->CmdData,"P?\r");
 80075ec:	f505 7694 	add.w	r6, r5, #296	; 0x128
 80075f0:	4b13      	ldr	r3, [pc, #76]	; (8007640 <ES_WIFI_ReceiveDataFrom+0x108>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80075f8:	4632      	mov	r2, r6
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	f7fe fe1d 	bl	800623c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8007602:	4604      	mov	r4, r0
 8007604:	2800      	cmp	r0, #0
 8007606:	d1b3      	bne.n	8007570 <ES_WIFI_ReceiveDataFrom+0x38>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8007608:	2300      	movs	r3, #0
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	9304      	str	r3, [sp, #16]
 800760e:	9305      	str	r3, [sp, #20]
 8007610:	9306      	str	r3, [sp, #24]
 8007612:	9307      	str	r3, [sp, #28]
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8007614:	a903      	add	r1, sp, #12
 8007616:	4630      	mov	r0, r6
 8007618:	f7fe ff28 	bl	800646c <AT_ParseTransportSettings>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 800761c:	9a05      	ldr	r2, [sp, #20]
 800761e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007620:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8007622:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8007626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	e7a1      	b.n	8007570 <ES_WIFI_ReceiveDataFrom+0x38>
      ret = ES_WIFI_STATUS_ERROR;
 800762c:	2402      	movs	r4, #2
 800762e:	e7a0      	b.n	8007572 <ES_WIFI_ReceiveDataFrom+0x3a>
 8007630:	08023200 	.word	0x08023200
 8007634:	080232d8 	.word	0x080232d8
 8007638:	080232e0 	.word	0x080232e0
 800763c:	080232e8 	.word	0x080232e8
 8007640:	08023298 	.word	0x08023298

08007644 <ES_WIFI_SockInfo>:

ES_WIFI_Status_t  ES_WIFI_SockInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8007644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	4604      	mov	r4, r0
 800764c:	4690      	mov	r8, r2
 800764e:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8007650:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007654:	460a      	mov	r2, r1
 8007656:	4916      	ldr	r1, [pc, #88]	; (80076b0 <ES_WIFI_SockInfo+0x6c>)
 8007658:	4628      	mov	r0, r5
 800765a:	f019 fcfb 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800765e:	462a      	mov	r2, r5
 8007660:	4629      	mov	r1, r5
 8007662:	4620      	mov	r0, r4
 8007664:	f7fe fdea 	bl	800623c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8007668:	4606      	mov	r6, r0
 800766a:	b118      	cbz	r0, 8007674 <ES_WIFI_SockInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 800766c:	4630      	mov	r0, r6
 800766e:	b006      	add	sp, #24
 8007670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8007674:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <ES_WIFI_SockInfo+0x70>)
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800767c:	462a      	mov	r2, r5
 800767e:	4629      	mov	r1, r5
 8007680:	4620      	mov	r0, r4
 8007682:	f7fe fddb 	bl	800623c <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8007686:	4606      	mov	r6, r0
 8007688:	2800      	cmp	r0, #0
 800768a:	d1ef      	bne.n	800766c <ES_WIFI_SockInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 800768c:	2300      	movs	r3, #0
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	9302      	str	r3, [sp, #8]
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8007698:	a901      	add	r1, sp, #4
 800769a:	4628      	mov	r0, r5
 800769c:	f7fe fee6 	bl	800646c <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Local_IP_Addr, 4);
 80076a0:	f8dd 3005 	ldr.w	r3, [sp, #5]
 80076a4:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Local_Port;
 80076a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80076ac:	803b      	strh	r3, [r7, #0]
 80076ae:	e7dd      	b.n	800766c <ES_WIFI_SockInfo+0x28>
 80076b0:	08023200 	.word	0x08023200
 80076b4:	08023298 	.word	0x08023298

080076b8 <ES_WIFI_PeerInfo>:


ES_WIFI_Status_t  ES_WIFI_PeerInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 80076b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	4604      	mov	r4, r0
 80076c0:	4690      	mov	r8, r2
 80076c2:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80076c4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80076c8:	460a      	mov	r2, r1
 80076ca:	4916      	ldr	r1, [pc, #88]	; (8007724 <ES_WIFI_PeerInfo+0x6c>)
 80076cc:	4628      	mov	r0, r5
 80076ce:	f019 fcc1 	bl	8021054 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80076d2:	462a      	mov	r2, r5
 80076d4:	4629      	mov	r1, r5
 80076d6:	4620      	mov	r0, r4
 80076d8:	f7fe fdb0 	bl	800623c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80076dc:	4606      	mov	r6, r0
 80076de:	b118      	cbz	r0, 80076e8 <ES_WIFI_PeerInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 80076e0:	4630      	mov	r0, r6
 80076e2:	b006      	add	sp, #24
 80076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 80076e8:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <ES_WIFI_PeerInfo+0x70>)
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80076f0:	462a      	mov	r2, r5
 80076f2:	4629      	mov	r1, r5
 80076f4:	4620      	mov	r0, r4
 80076f6:	f7fe fda1 	bl	800623c <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 80076fa:	4606      	mov	r6, r0
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d1ef      	bne.n	80076e0 <ES_WIFI_PeerInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8007700:	2300      	movs	r3, #0
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	9303      	str	r3, [sp, #12]
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 800770c:	a901      	add	r1, sp, #4
 800770e:	4628      	mov	r0, r5
 8007710:	f7fe feac 	bl	800646c <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Remote_Port;
 800771a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800771e:	803b      	strh	r3, [r7, #0]
 8007720:	e7de      	b.n	80076e0 <ES_WIFI_PeerInfo+0x28>
 8007722:	bf00      	nop
 8007724:	08023200 	.word	0x08023200
 8007728:	08023298 	.word	0x08023298

0800772c <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800772c:	2301      	movs	r3, #1
 800772e:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8007730:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8007732:	2305      	movs	r3, #5
 8007734:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8007736:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800773a:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800773c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007740:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8007742:	2000      	movs	r0, #0
 8007744:	4770      	bx	lr

08007746 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8007746:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800774a:	2b01      	cmp	r3, #1
 800774c:	d001      	beq.n	8007752 <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 800774e:	2000      	movs	r0, #0
 8007750:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8007758:	e7f9      	b.n	800774e <FT5336_DeInit+0x8>

0800775a <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 800775a:	2000      	movs	r0, #0
 800775c:	4770      	bx	lr

0800775e <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 800775e:	2000      	movs	r0, #0
 8007760:	4770      	bx	lr

08007762 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8007762:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007764:	6904      	ldr	r4, [r0, #16]
 8007766:	8900      	ldrh	r0, [r0, #8]
 8007768:	47a0      	blx	r4
}
 800776a:	bd10      	pop	{r4, pc}

0800776c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800776c:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800776e:	68c4      	ldr	r4, [r0, #12]
 8007770:	8900      	ldrh	r0, [r0, #8]
 8007772:	47a0      	blx	r4
}
 8007774:	bd10      	pop	{r4, pc}

08007776 <FT5336_GestureConfig>:
{
 8007776:	b570      	push	{r4, r5, r6, lr}
 8007778:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800777a:	f100 0518 	add.w	r5, r0, #24
 800777e:	7809      	ldrb	r1, [r1, #0]
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f91d 	bl	80079c0 <ft5336_radian_value>
 8007786:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8007788:	7931      	ldrb	r1, [r6, #4]
 800778a:	4628      	mov	r0, r5
 800778c:	f000 f925 	bl	80079da <ft5336_offset_left_right>
 8007790:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8007792:	7a31      	ldrb	r1, [r6, #8]
 8007794:	4628      	mov	r0, r5
 8007796:	f000 f92d 	bl	80079f4 <ft5336_offset_up_down>
 800779a:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800779c:	7b31      	ldrb	r1, [r6, #12]
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f935 	bl	8007a0e <ft5336_disatnce_left_right>
 80077a4:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80077a6:	7c31      	ldrb	r1, [r6, #16]
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 f93d 	bl	8007a28 <ft5336_distance_up_down>
 80077ae:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80077b0:	7d31      	ldrb	r1, [r6, #20]
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 f945 	bl	8007a42 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 80077b8:	1820      	adds	r0, r4, r0
 80077ba:	d100      	bne.n	80077be <FT5336_GestureConfig+0x48>
}
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 80077be:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80077c2:	e7fb      	b.n	80077bc <FT5336_GestureConfig+0x46>

080077c4 <FT5336_ReadID>:
{
 80077c4:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80077c6:	3018      	adds	r0, #24
 80077c8:	f000 f955 	bl	8007a76 <ft5336_chip_id>
}
 80077cc:	bd08      	pop	{r3, pc}

080077ce <FT5336_DetectTouch>:
{
 80077ce:	b500      	push	{lr}
 80077d0:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80077d2:	f10d 0107 	add.w	r1, sp, #7
 80077d6:	3018      	adds	r0, #24
 80077d8:	f000 f8e5 	bl	80079a6 <ft5336_td_status>
 80077dc:	b938      	cbnz	r0, 80077ee <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80077de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	d800      	bhi.n	80077e8 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 80077e6:	4618      	mov	r0, r3
}
 80077e8:	b003      	add	sp, #12
 80077ea:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80077f2:	e7f9      	b.n	80077e8 <FT5336_DetectTouch+0x1a>

080077f4 <FT5336_GetState>:
{
 80077f4:	b530      	push	{r4, r5, lr}
 80077f6:	b083      	sub	sp, #12
 80077f8:	4605      	mov	r5, r0
 80077fa:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80077fc:	f7ff ffe7 	bl	80077ce <FT5336_DetectTouch>
 8007800:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8007802:	2304      	movs	r3, #4
 8007804:	eb0d 0203 	add.w	r2, sp, r3
 8007808:	2103      	movs	r1, #3
 800780a:	f105 0018 	add.w	r0, r5, #24
 800780e:	f000 f8b9 	bl	8007984 <ft5336_read_reg>
 8007812:	b998      	cbnz	r0, 800783c <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8007814:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800781e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007822:	4313      	orrs	r3, r2
 8007824:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8007826:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007830:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007834:	4313      	orrs	r3, r2
 8007836:	60a3      	str	r3, [r4, #8]
}
 8007838:	b003      	add	sp, #12
 800783a:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007840:	e7fa      	b.n	8007838 <FT5336_GetState+0x44>

08007842 <FT5336_GetMultiTouchState>:
{
 8007842:	b530      	push	{r4, r5, lr}
 8007844:	b089      	sub	sp, #36	; 0x24
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800784a:	f7ff ffc0 	bl	80077ce <FT5336_DetectTouch>
 800784e:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8007850:	231e      	movs	r3, #30
 8007852:	466a      	mov	r2, sp
 8007854:	2103      	movs	r1, #3
 8007856:	f104 0018 	add.w	r0, r4, #24
 800785a:	f000 f893 	bl	8007984 <ft5336_read_reg>
 800785e:	2800      	cmp	r0, #0
 8007860:	d146      	bne.n	80078f0 <FT5336_GetMultiTouchState+0xae>
 8007862:	4603      	mov	r3, r0
 8007864:	e040      	b.n	80078e8 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8007866:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800786a:	004a      	lsls	r2, r1, #1
 800786c:	ac08      	add	r4, sp, #32
 800786e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8007872:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 8007876:	ea4f 210c 	mov.w	r1, ip, lsl #8
 800787a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800787e:	f102 0421 	add.w	r4, r2, #33	; 0x21
 8007882:	446c      	add	r4, sp
 8007884:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 8007888:	4321      	orrs	r1, r4
 800788a:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 800788e:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8007890:	f102 0122 	add.w	r1, r2, #34	; 0x22
 8007894:	4469      	add	r1, sp
 8007896:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 800789a:	0224      	lsls	r4, r4, #8
 800789c:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80078a0:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80078a4:	4469      	add	r1, sp
 80078a6:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80078aa:	430c      	orrs	r4, r1
 80078ac:	1d99      	adds	r1, r3, #6
 80078ae:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80078b2:	ea4f 119c 	mov.w	r1, ip, lsr #6
 80078b6:	f103 0410 	add.w	r4, r3, #16
 80078ba:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80078be:	f102 0124 	add.w	r1, r2, #36	; 0x24
 80078c2:	4469      	add	r1, sp
 80078c4:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 80078c8:	f103 010a 	add.w	r1, r3, #10
 80078cc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80078d0:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80078d2:	3225      	adds	r2, #37	; 0x25
 80078d4:	446a      	add	r2, sp
 80078d6:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 80078da:	0909      	lsrs	r1, r1, #4
 80078dc:	f103 0214 	add.w	r2, r3, #20
 80078e0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80078e4:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80078e6:	3301      	adds	r3, #1
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d9bc      	bls.n	8007866 <FT5336_GetMultiTouchState+0x24>
}
 80078ec:	b009      	add	sp, #36	; 0x24
 80078ee:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80078f4:	e7fa      	b.n	80078ec <FT5336_GetMultiTouchState+0xaa>

080078f6 <FT5336_GetGesture>:
{
 80078f6:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80078f8:	3018      	adds	r0, #24
 80078fa:	f000 f84d 	bl	8007998 <ft5336_gest_id>
}
 80078fe:	bd08      	pop	{r3, pc}

08007900 <FT5336_EnableIT>:
{
 8007900:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8007902:	2101      	movs	r1, #1
 8007904:	3018      	adds	r0, #24
 8007906:	f000 f8a9 	bl	8007a5c <ft5336_g_mode>
}
 800790a:	bd08      	pop	{r3, pc}

0800790c <FT5336_DisableIT>:
{
 800790c:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800790e:	2100      	movs	r1, #0
 8007910:	3018      	adds	r0, #24
 8007912:	f000 f8a3 	bl	8007a5c <ft5336_g_mode>
}
 8007916:	bd08      	pop	{r3, pc}

08007918 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8007918:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800791c:	b95b      	cbnz	r3, 8007936 <FT5336_Init+0x1e>
{
 800791e:	b510      	push	{r4, lr}
 8007920:	4604      	mov	r4, r0
    pObj->IO.Init();
 8007922:	6803      	ldr	r3, [r0, #0]
 8007924:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff fff0 	bl	800790c <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 800792c:	2201      	movs	r2, #1
 800792e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8007932:	b910      	cbnz	r0, 800793a <FT5336_Init+0x22>
}
 8007934:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8007936:	2000      	movs	r0, #0
}
 8007938:	4770      	bx	lr
    ret = FT5336_ERROR;
 800793a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800793e:	e7f9      	b.n	8007934 <FT5336_Init+0x1c>

08007940 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8007940:	b1a8      	cbz	r0, 800796e <FT5336_RegisterBusIO+0x2e>
{
 8007942:	b508      	push	{r3, lr}
 8007944:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8007946:	680a      	ldr	r2, [r1, #0]
 8007948:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800794a:	6848      	ldr	r0, [r1, #4]
 800794c:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800794e:	8908      	ldrh	r0, [r1, #8]
 8007950:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007952:	68c8      	ldr	r0, [r1, #12]
 8007954:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007956:	6908      	ldr	r0, [r1, #16]
 8007958:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800795a:	6949      	ldr	r1, [r1, #20]
 800795c:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800795e:	4907      	ldr	r1, [pc, #28]	; (800797c <FT5336_RegisterBusIO+0x3c>)
 8007960:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8007962:	4907      	ldr	r1, [pc, #28]	; (8007980 <FT5336_RegisterBusIO+0x40>)
 8007964:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8007966:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 8007968:	b122      	cbz	r2, 8007974 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 800796a:	4790      	blx	r2
}
 800796c:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 800796e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007972:	4770      	bx	lr
      ret = FT5336_ERROR;
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007978:	e7f8      	b.n	800796c <FT5336_RegisterBusIO+0x2c>
 800797a:	bf00      	nop
 800797c:	08007763 	.word	0x08007763
 8007980:	0800776d 	.word	0x0800776d

08007984 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8007984:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007986:	6844      	ldr	r4, [r0, #4]
 8007988:	6880      	ldr	r0, [r0, #8]
 800798a:	47a0      	blx	r4
}
 800798c:	bd10      	pop	{r4, pc}

0800798e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800798e:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8007990:	6804      	ldr	r4, [r0, #0]
 8007992:	6880      	ldr	r0, [r0, #8]
 8007994:	47a0      	blx	r4
}
 8007996:	bd10      	pop	{r4, pc}

08007998 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8007998:	b508      	push	{r3, lr}
 800799a:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800799c:	2301      	movs	r3, #1
 800799e:	4619      	mov	r1, r3
 80079a0:	f7ff fff0 	bl	8007984 <ft5336_read_reg>
}
 80079a4:	bd08      	pop	{r3, pc}

080079a6 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80079a6:	b510      	push	{r4, lr}
 80079a8:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80079aa:	2301      	movs	r3, #1
 80079ac:	460a      	mov	r2, r1
 80079ae:	2102      	movs	r1, #2
 80079b0:	f7ff ffe8 	bl	8007984 <ft5336_read_reg>
  
  if(ret == 0)
 80079b4:	b918      	cbnz	r0, 80079be <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80079b6:	7823      	ldrb	r3, [r4, #0]
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80079be:	bd10      	pop	{r4, pc}

080079c0 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80079c0:	b500      	push	{lr}
 80079c2:	b083      	sub	sp, #12
 80079c4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 80079c8:	2301      	movs	r3, #1
 80079ca:	f10d 0207 	add.w	r2, sp, #7
 80079ce:	2191      	movs	r1, #145	; 0x91
 80079d0:	f7ff ffdd 	bl	800798e <ft5336_write_reg>
}
 80079d4:	b003      	add	sp, #12
 80079d6:	f85d fb04 	ldr.w	pc, [sp], #4

080079da <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80079da:	b500      	push	{lr}
 80079dc:	b083      	sub	sp, #12
 80079de:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 80079e2:	2301      	movs	r3, #1
 80079e4:	f10d 0207 	add.w	r2, sp, #7
 80079e8:	2192      	movs	r1, #146	; 0x92
 80079ea:	f7ff ffd0 	bl	800798e <ft5336_write_reg>
}
 80079ee:	b003      	add	sp, #12
 80079f0:	f85d fb04 	ldr.w	pc, [sp], #4

080079f4 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80079f4:	b500      	push	{lr}
 80079f6:	b083      	sub	sp, #12
 80079f8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 80079fc:	2301      	movs	r3, #1
 80079fe:	f10d 0207 	add.w	r2, sp, #7
 8007a02:	2193      	movs	r1, #147	; 0x93
 8007a04:	f7ff ffc3 	bl	800798e <ft5336_write_reg>
}
 8007a08:	b003      	add	sp, #12
 8007a0a:	f85d fb04 	ldr.w	pc, [sp], #4

08007a0e <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8007a0e:	b500      	push	{lr}
 8007a10:	b083      	sub	sp, #12
 8007a12:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8007a16:	2301      	movs	r3, #1
 8007a18:	f10d 0207 	add.w	r2, sp, #7
 8007a1c:	2194      	movs	r1, #148	; 0x94
 8007a1e:	f7ff ffb6 	bl	800798e <ft5336_write_reg>
}
 8007a22:	b003      	add	sp, #12
 8007a24:	f85d fb04 	ldr.w	pc, [sp], #4

08007a28 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8007a28:	b500      	push	{lr}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8007a30:	2301      	movs	r3, #1
 8007a32:	f10d 0207 	add.w	r2, sp, #7
 8007a36:	2195      	movs	r1, #149	; 0x95
 8007a38:	f7ff ffa9 	bl	800798e <ft5336_write_reg>
}
 8007a3c:	b003      	add	sp, #12
 8007a3e:	f85d fb04 	ldr.w	pc, [sp], #4

08007a42 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8007a42:	b500      	push	{lr}
 8007a44:	b083      	sub	sp, #12
 8007a46:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f10d 0207 	add.w	r2, sp, #7
 8007a50:	2196      	movs	r1, #150	; 0x96
 8007a52:	f7ff ff9c 	bl	800798e <ft5336_write_reg>
}
 8007a56:	b003      	add	sp, #12
 8007a58:	f85d fb04 	ldr.w	pc, [sp], #4

08007a5c <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8007a5c:	b500      	push	{lr}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8007a64:	2301      	movs	r3, #1
 8007a66:	f10d 0207 	add.w	r2, sp, #7
 8007a6a:	21a4      	movs	r1, #164	; 0xa4
 8007a6c:	f7ff ff8f 	bl	800798e <ft5336_write_reg>
}
 8007a70:	b003      	add	sp, #12
 8007a72:	f85d fb04 	ldr.w	pc, [sp], #4

08007a76 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8007a76:	b508      	push	{r3, lr}
 8007a78:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	21a8      	movs	r1, #168	; 0xa8
 8007a7e:	f7ff ff81 	bl	8007984 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 8007a82:	bd08      	pop	{r3, pc}

08007a84 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8007a84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007a88:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8007a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a8e:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8007a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a94:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8007a96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a9a:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8007a9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007aa0:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8007aa2:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8007aa4:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8007aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aaa:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8007aac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ab0:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	4770      	bx	lr

08007ab6 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8007ab6:	b570      	push	{r4, r5, r6, lr}
 8007ab8:	b09a      	sub	sp, #104	; 0x68
 8007aba:	4606      	mov	r6, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8007ac0:	2250      	movs	r2, #80	; 0x50
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	a806      	add	r0, sp, #24
 8007ac6:	f018 fe31 	bl	802072c <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8007aca:	2300      	movs	r3, #0
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	9302      	str	r3, [sp, #8]
 8007ad0:	9303      	str	r3, [sp, #12]
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	bf08      	it	eq
 8007ada:	2d01      	cmpeq	r5, #1
 8007adc:	d061      	beq.n	8007ba2 <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007ade:	2c00      	cmp	r4, #0
 8007ae0:	d143      	bne.n	8007b6a <MX25LM51245G_AutoPollingMemReady+0xb4>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007ae6:	2d01      	cmp	r5, #1
 8007ae8:	d041      	beq.n	8007b6e <MX25LM51245G_AutoPollingMemReady+0xb8>
 8007aea:	2300      	movs	r3, #0
 8007aec:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007aee:	2c00      	cmp	r4, #0
 8007af0:	d13f      	bne.n	8007b72 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8007af2:	2300      	movs	r3, #0
 8007af4:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007af6:	2c00      	cmp	r4, #0
 8007af8:	d13d      	bne.n	8007b76 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8007afa:	2305      	movs	r3, #5
 8007afc:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8007afe:	2c00      	cmp	r4, #0
 8007b00:	d13c      	bne.n	8007b7c <MX25LM51245G_AutoPollingMemReady+0xc6>
 8007b02:	2300      	movs	r3, #0
 8007b04:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007b06:	2d01      	cmp	r5, #1
 8007b08:	d03b      	beq.n	8007b82 <MX25LM51245G_AutoPollingMemReady+0xcc>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007b0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007b12:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007b14:	2c00      	cmp	r4, #0
 8007b16:	d137      	bne.n	8007b88 <MX25LM51245G_AutoPollingMemReady+0xd2>
 8007b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b1c:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007b1e:	2d01      	cmp	r5, #1
 8007b20:	d035      	beq.n	8007b8e <MX25LM51245G_AutoPollingMemReady+0xd8>
 8007b22:	2300      	movs	r3, #0
 8007b24:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007b26:	bbac      	cbnz	r4, 8007b94 <MX25LM51245G_AutoPollingMemReady+0xde>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007b2c:	2d01      	cmp	r5, #1
 8007b2e:	d033      	beq.n	8007b98 <MX25LM51245G_AutoPollingMemReady+0xe2>
 8007b30:	2301      	movs	r3, #1
 8007b32:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007b34:	2d01      	cmp	r5, #1
 8007b36:	d031      	beq.n	8007b9c <MX25LM51245G_AutoPollingMemReady+0xe6>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8007b40:	2310      	movs	r3, #16
 8007b42:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007b44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b48:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4e:	a906      	add	r1, sp, #24
 8007b50:	4630      	mov	r0, r6
 8007b52:	f003 f8dd 	bl	800ad10 <HAL_OSPI_Command>
 8007b56:	bb38      	cbnz	r0, 8007ba8 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5c:	a901      	add	r1, sp, #4
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f003 f9e7 	bl	800af32 <HAL_OSPI_AutoPolling>
 8007b64:	bb18      	cbnz	r0, 8007bae <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007b66:	b01a      	add	sp, #104	; 0x68
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007b6a:	2304      	movs	r3, #4
 8007b6c:	e7ba      	b.n	8007ae4 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007b6e:	2308      	movs	r3, #8
 8007b70:	e7bc      	b.n	8007aec <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007b72:	2310      	movs	r3, #16
 8007b74:	e7be      	b.n	8007af4 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007b76:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8007b7a:	e7bf      	b.n	8007afc <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8007b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b80:	e7c0      	b.n	8007b04 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b86:	e7c1      	b.n	8007b0c <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007b88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007b8c:	e7c6      	b.n	8007b1c <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b92:	e7c7      	b.n	8007b24 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007b94:	2305      	movs	r3, #5
 8007b96:	e7c8      	b.n	8007b2a <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e7ca      	b.n	8007b32 <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007b9c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007ba0:	e7cb      	b.n	8007b3a <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 8007ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba6:	e7de      	b.n	8007b66 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	e7db      	b.n	8007b66 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb2:	e7d8      	b.n	8007b66 <MX25LM51245G_AutoPollingMemReady+0xb0>

08007bb4 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	b096      	sub	sp, #88	; 0x58
 8007bb8:	4606      	mov	r6, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8007bbe:	2250      	movs	r2, #80	; 0x50
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	a802      	add	r0, sp, #8
 8007bc4:	f018 fdb2 	bl	802072c <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8007bce:	2c01      	cmp	r4, #1
 8007bd0:	bf08      	it	eq
 8007bd2:	429d      	cmpeq	r5, r3
 8007bd4:	d04e      	beq.n	8007c74 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007bda:	b104      	cbz	r4, 8007bde <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007be0:	b92c      	cbnz	r4, 8007bee <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8007be2:	2300      	movs	r3, #0
 8007be4:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8007be6:	b924      	cbnz	r4, 8007bf2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8007be8:	bb15      	cbnz	r5, 8007c30 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 8007bea:	230b      	movs	r3, #11
 8007bec:	e003      	b.n	8007bf6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007bee:	2310      	movs	r3, #16
 8007bf0:	e7f8      	b.n	8007be4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8007bf2:	f64e 4313 	movw	r3, #60435	; 0xec13
 8007bf6:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007bf8:	b9e4      	cbnz	r4, 8007c34 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 8007bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bfe:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8007c00:	b9dd      	cbnz	r5, 8007c3a <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 8007c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c06:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007c08:	b9d4      	cbnz	r4, 8007c40 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8007c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c0e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8007c10:	b9cc      	cbnz	r4, 8007c46 <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 8007c12:	2308      	movs	r3, #8
 8007c14:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c1a:	a902      	add	r1, sp, #8
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f003 f877 	bl	800ad10 <HAL_OSPI_Command>
 8007c22:	bb50      	cbnz	r0, 8007c7a <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8007c24:	2302      	movs	r3, #2
 8007c26:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8007c28:	b97c      	cbnz	r4, 8007c4a <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 8007c2a:	b185      	cbz	r5, 8007c4e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 8007c2c:	2312      	movs	r3, #18
 8007c2e:	e00e      	b.n	8007c4e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8007c30:	230c      	movs	r3, #12
 8007c32:	e7e0      	b.n	8007bf6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c38:	e7e1      	b.n	8007bfe <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8007c3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007c3e:	e7e2      	b.n	8007c06 <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007c40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007c44:	e7e3      	b.n	8007c0e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8007c46:	2306      	movs	r3, #6
 8007c48:	e7e4      	b.n	8007c14 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8007c4a:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8007c4e:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c58:	a902      	add	r1, sp, #8
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f003 f858 	bl	800ad10 <HAL_OSPI_Command>
 8007c60:	b970      	cbnz	r0, 8007c80 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8007c62:	2300      	movs	r3, #0
 8007c64:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8007c66:	4669      	mov	r1, sp
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f003 f9bf 	bl	800afec <HAL_OSPI_MemoryMapped>
 8007c6e:	b950      	cbnz	r0, 8007c86 <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007c70:	b016      	add	sp, #88	; 0x58
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	e7fa      	b.n	8007c70 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8007c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7e:	e7f7      	b.n	8007c70 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	e7f4      	b.n	8007c70 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	e7f1      	b.n	8007c70 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

08007c8c <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	b096      	sub	sp, #88	; 0x58
 8007c90:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8007c92:	2250      	movs	r2, #80	; 0x50
 8007c94:	2100      	movs	r1, #0
 8007c96:	a802      	add	r0, sp, #8
 8007c98:	f018 fd48 	bl	802072c <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8007caa:	2308      	movs	r3, #8
 8007cac:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8007cae:	2310      	movs	r3, #16
 8007cb0:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8007cb2:	f64e 6311 	movw	r3, #60945	; 0xee11
 8007cb6:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8007cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cbc:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8007cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cc2:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007cc4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007cc8:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8007cca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007cce:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8007cd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cd4:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8007cd6:	2306      	movs	r3, #6
 8007cd8:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8007cda:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007cde:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce4:	a902      	add	r1, sp, #8
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f003 f812 	bl	800ad10 <HAL_OSPI_Command>
 8007cec:	b9b8      	cbnz	r0, 8007d1e <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8007cee:	2302      	movs	r3, #2
 8007cf0:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8007cf2:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8007cf6:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8007cfc:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d02:	a902      	add	r1, sp, #8
 8007d04:	4620      	mov	r0, r4
 8007d06:	f003 f803 	bl	800ad10 <HAL_OSPI_Command>
 8007d0a:	b958      	cbnz	r0, 8007d24 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8007d10:	4669      	mov	r1, sp
 8007d12:	4620      	mov	r0, r4
 8007d14:	f003 f96a 	bl	800afec <HAL_OSPI_MemoryMapped>
 8007d18:	b938      	cbnz	r0, 8007d2a <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007d1a:	b016      	add	sp, #88	; 0x58
 8007d1c:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 8007d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d22:	e7fa      	b.n	8007d1a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	e7f7      	b.n	8007d1a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	e7f4      	b.n	8007d1a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

08007d30 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	b09a      	sub	sp, #104	; 0x68
 8007d34:	4606      	mov	r6, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8007d3a:	2250      	movs	r2, #80	; 0x50
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	a806      	add	r0, sp, #24
 8007d40:	f018 fcf4 	bl	802072c <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8007d44:	2300      	movs	r3, #0
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	9302      	str	r3, [sp, #8]
 8007d4a:	9303      	str	r3, [sp, #12]
 8007d4c:	9304      	str	r3, [sp, #16]
 8007d4e:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007d50:	429c      	cmp	r4, r3
 8007d52:	bf08      	it	eq
 8007d54:	2d01      	cmpeq	r5, #1
 8007d56:	d076      	beq.n	8007e46 <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007d58:	2c00      	cmp	r4, #0
 8007d5a:	d155      	bne.n	8007e08 <MX25LM51245G_WriteEnable+0xd8>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007d60:	2d01      	cmp	r5, #1
 8007d62:	d053      	beq.n	8007e0c <MX25LM51245G_WriteEnable+0xdc>
 8007d64:	2300      	movs	r3, #0
 8007d66:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007d68:	2c00      	cmp	r4, #0
 8007d6a:	d151      	bne.n	8007e10 <MX25LM51245G_WriteEnable+0xe0>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8007d70:	2c00      	cmp	r4, #0
 8007d72:	d14f      	bne.n	8007e14 <MX25LM51245G_WriteEnable+0xe4>
 8007d74:	2306      	movs	r3, #6
 8007d76:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d7c:	a906      	add	r1, sp, #24
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f002 ffc6 	bl	800ad10 <HAL_OSPI_Command>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d161      	bne.n	8007e4c <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007d88:	2c00      	cmp	r4, #0
 8007d8a:	d146      	bne.n	8007e1a <MX25LM51245G_WriteEnable+0xea>
 8007d8c:	2305      	movs	r3, #5
 8007d8e:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8007d90:	2c00      	cmp	r4, #0
 8007d92:	d145      	bne.n	8007e20 <MX25LM51245G_WriteEnable+0xf0>
 8007d94:	2300      	movs	r3, #0
 8007d96:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007d98:	2d01      	cmp	r5, #1
 8007d9a:	d044      	beq.n	8007e26 <MX25LM51245G_WriteEnable+0xf6>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8007da0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007da4:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	d13e      	bne.n	8007e2c <MX25LM51245G_WriteEnable+0xfc>
 8007dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007db2:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007db4:	2d01      	cmp	r5, #1
 8007db6:	d03c      	beq.n	8007e32 <MX25LM51245G_WriteEnable+0x102>
 8007db8:	2300      	movs	r3, #0
 8007dba:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007dbc:	2c00      	cmp	r4, #0
 8007dbe:	d13b      	bne.n	8007e38 <MX25LM51245G_WriteEnable+0x108>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007dc4:	2d01      	cmp	r5, #1
 8007dc6:	d039      	beq.n	8007e3c <MX25LM51245G_WriteEnable+0x10c>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007dcc:	2d01      	cmp	r5, #1
 8007dce:	d037      	beq.n	8007e40 <MX25LM51245G_WriteEnable+0x110>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd8:	a906      	add	r1, sp, #24
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f002 ff98 	bl	800ad10 <HAL_OSPI_Command>
 8007de0:	bbb8      	cbnz	r0, 8007e52 <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 8007de2:	2302      	movs	r3, #2
 8007de4:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 8007de6:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8007de8:	2300      	movs	r3, #0
 8007dea:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8007dec:	2310      	movs	r3, #16
 8007dee:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007df0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007df4:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dfa:	a901      	add	r1, sp, #4
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f003 f898 	bl	800af32 <HAL_OSPI_AutoPolling>
 8007e02:	bb48      	cbnz	r0, 8007e58 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007e04:	b01a      	add	sp, #104	; 0x68
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007e08:	2304      	movs	r3, #4
 8007e0a:	e7a8      	b.n	8007d5e <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007e0c:	2308      	movs	r3, #8
 8007e0e:	e7aa      	b.n	8007d66 <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007e10:	2310      	movs	r3, #16
 8007e12:	e7ac      	b.n	8007d6e <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8007e14:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8007e18:	e7ad      	b.n	8007d76 <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007e1a:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8007e1e:	e7b6      	b.n	8007d8e <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8007e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e24:	e7b7      	b.n	8007d96 <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e2a:	e7b8      	b.n	8007d9e <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007e2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e30:	e7bf      	b.n	8007db2 <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007e32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e36:	e7c0      	b.n	8007dba <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007e38:	2305      	movs	r3, #5
 8007e3a:	e7c2      	b.n	8007dc2 <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e7c4      	b.n	8007dca <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007e40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007e44:	e7c5      	b.n	8007dd2 <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	e7db      	b.n	8007e04 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	e7d8      	b.n	8007e04 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8007e52:	f04f 30ff 	mov.w	r0, #4294967295
 8007e56:	e7d5      	b.n	8007e04 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5c:	e7d2      	b.n	8007e04 <MX25LM51245G_WriteEnable+0xd4>

08007e5e <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8007e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e60:	b095      	sub	sp, #84	; 0x54
 8007e62:	4607      	mov	r7, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	4615      	mov	r5, r2
 8007e68:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8007e6a:	2250      	movs	r2, #80	; 0x50
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4668      	mov	r0, sp
 8007e70:	f018 fc5c 	bl	802072c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007e74:	2c00      	cmp	r4, #0
 8007e76:	bf08      	it	eq
 8007e78:	2d01      	cmpeq	r5, #1
 8007e7a:	d04e      	beq.n	8007f1a <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007e7c:	bb24      	cbnz	r4, 8007ec8 <MX25LM51245G_WriteCfg2Register+0x6a>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007e82:	2d01      	cmp	r5, #1
 8007e84:	d022      	beq.n	8007ecc <MX25LM51245G_WriteCfg2Register+0x6e>
 8007e86:	2300      	movs	r3, #0
 8007e88:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007e8a:	bb0c      	cbnz	r4, 8007ed0 <MX25LM51245G_WriteCfg2Register+0x72>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8007e90:	bb04      	cbnz	r4, 8007ed4 <MX25LM51245G_WriteCfg2Register+0x76>
 8007e92:	2372      	movs	r3, #114	; 0x72
 8007e94:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007e96:	bb04      	cbnz	r4, 8007eda <MX25LM51245G_WriteCfg2Register+0x7c>
 8007e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e9c:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007e9e:	2d01      	cmp	r5, #1
 8007ea0:	d01e      	beq.n	8007ee0 <MX25LM51245G_WriteCfg2Register+0x82>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007ea6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007eaa:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 8007eac:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007eae:	b9d4      	cbnz	r4, 8007ee6 <MX25LM51245G_WriteCfg2Register+0x88>
 8007eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007eb4:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007eb6:	2d01      	cmp	r5, #1
 8007eb8:	d018      	beq.n	8007eec <MX25LM51245G_WriteCfg2Register+0x8e>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8007ebe:	b1d4      	cbz	r4, 8007ef6 <MX25LM51245G_WriteCfg2Register+0x98>
 8007ec0:	2d01      	cmp	r5, #1
 8007ec2:	d016      	beq.n	8007ef2 <MX25LM51245G_WriteCfg2Register+0x94>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e017      	b.n	8007ef8 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007ec8:	2304      	movs	r3, #4
 8007eca:	e7d9      	b.n	8007e80 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007ecc:	2308      	movs	r3, #8
 8007ece:	e7db      	b.n	8007e88 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	e7dc      	b.n	8007e8e <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8007ed4:	f247 238d 	movw	r3, #29325	; 0x728d
 8007ed8:	e7dc      	b.n	8007e94 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ede:	e7dd      	b.n	8007e9c <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ee4:	e7de      	b.n	8007ea4 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007ee6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007eea:	e7e3      	b.n	8007eb4 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ef0:	e7e4      	b.n	8007ebc <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e000      	b.n	8007ef8 <MX25LM51245G_WriteCfg2Register+0x9a>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efe:	4669      	mov	r1, sp
 8007f00:	4638      	mov	r0, r7
 8007f02:	f002 ff05 	bl	800ad10 <HAL_OSPI_Command>
 8007f06:	b958      	cbnz	r0, 8007f20 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0c:	a91a      	add	r1, sp, #104	; 0x68
 8007f0e:	4638      	mov	r0, r7
 8007f10:	f002 ff5f 	bl	800add2 <HAL_OSPI_Transmit>
 8007f14:	b938      	cbnz	r0, 8007f26 <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007f16:	b015      	add	sp, #84	; 0x54
 8007f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 8007f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1e:	e7fa      	b.n	8007f16 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	e7f7      	b.n	8007f16 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8007f26:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2a:	e7f4      	b.n	8007f16 <MX25LM51245G_WriteCfg2Register+0xb8>

08007f2c <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8007f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f2e:	b095      	sub	sp, #84	; 0x54
 8007f30:	4607      	mov	r7, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	4615      	mov	r5, r2
 8007f36:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8007f38:	2250      	movs	r2, #80	; 0x50
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4668      	mov	r0, sp
 8007f3e:	f018 fbf5 	bl	802072c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007f42:	2c00      	cmp	r4, #0
 8007f44:	bf08      	it	eq
 8007f46:	2d01      	cmpeq	r5, #1
 8007f48:	d05b      	beq.n	8008002 <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007f4a:	2c00      	cmp	r4, #0
 8007f4c:	d13d      	bne.n	8007fca <MX25LM51245G_ReadCfg2Register+0x9e>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007f52:	2d01      	cmp	r5, #1
 8007f54:	d03b      	beq.n	8007fce <MX25LM51245G_ReadCfg2Register+0xa2>
 8007f56:	2300      	movs	r3, #0
 8007f58:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007f5a:	2c00      	cmp	r4, #0
 8007f5c:	d139      	bne.n	8007fd2 <MX25LM51245G_ReadCfg2Register+0xa6>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8007f62:	2c00      	cmp	r4, #0
 8007f64:	d137      	bne.n	8007fd6 <MX25LM51245G_ReadCfg2Register+0xaa>
 8007f66:	2371      	movs	r3, #113	; 0x71
 8007f68:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007f6a:	2c00      	cmp	r4, #0
 8007f6c:	d136      	bne.n	8007fdc <MX25LM51245G_ReadCfg2Register+0xb0>
 8007f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f72:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007f74:	2d01      	cmp	r5, #1
 8007f76:	d034      	beq.n	8007fe2 <MX25LM51245G_ReadCfg2Register+0xb6>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007f7c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007f80:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 8007f82:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007f84:	bb84      	cbnz	r4, 8007fe8 <MX25LM51245G_ReadCfg2Register+0xbc>
 8007f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f8a:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007f8c:	2d01      	cmp	r5, #1
 8007f8e:	d02e      	beq.n	8007fee <MX25LM51245G_ReadCfg2Register+0xc2>
 8007f90:	2300      	movs	r3, #0
 8007f92:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007f94:	bb74      	cbnz	r4, 8007ff4 <MX25LM51245G_ReadCfg2Register+0xc8>
 8007f96:	2300      	movs	r3, #0
 8007f98:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007f9a:	2d01      	cmp	r5, #1
 8007f9c:	d02c      	beq.n	8007ff8 <MX25LM51245G_ReadCfg2Register+0xcc>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007fa2:	2d01      	cmp	r5, #1
 8007fa4:	d02a      	beq.n	8007ffc <MX25LM51245G_ReadCfg2Register+0xd0>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fae:	4669      	mov	r1, sp
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f002 fead 	bl	800ad10 <HAL_OSPI_Command>
 8007fb6:	bb38      	cbnz	r0, 8008008 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f002 ff54 	bl	800ae6c <HAL_OSPI_Receive>
 8007fc4:	bb18      	cbnz	r0, 800800e <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007fc6:	b015      	add	sp, #84	; 0x54
 8007fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007fca:	2304      	movs	r3, #4
 8007fcc:	e7c0      	b.n	8007f50 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007fce:	2308      	movs	r3, #8
 8007fd0:	e7c2      	b.n	8007f58 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007fd2:	2310      	movs	r3, #16
 8007fd4:	e7c4      	b.n	8007f60 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8007fd6:	f247 138e 	movw	r3, #29070	; 0x718e
 8007fda:	e7c5      	b.n	8007f68 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe0:	e7c7      	b.n	8007f72 <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007fe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fe6:	e7c8      	b.n	8007f7a <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007fe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007fec:	e7cd      	b.n	8007f8a <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007fee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ff2:	e7ce      	b.n	8007f92 <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007ff4:	2305      	movs	r3, #5
 8007ff6:	e7cf      	b.n	8007f98 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e7d1      	b.n	8007fa0 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007ffc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008000:	e7d2      	b.n	8007fa8 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	e7de      	b.n	8007fc6 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	e7db      	b.n	8007fc6 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 800800e:	f04f 30ff 	mov.w	r0, #4294967295
 8008012:	e7d8      	b.n	8007fc6 <MX25LM51245G_ReadCfg2Register+0x9a>

08008014 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	b094      	sub	sp, #80	; 0x50
 8008018:	4606      	mov	r6, r0
 800801a:	460c      	mov	r4, r1
 800801c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800801e:	2250      	movs	r2, #80	; 0x50
 8008020:	2100      	movs	r1, #0
 8008022:	4668      	mov	r0, sp
 8008024:	f018 fb82 	bl	802072c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008028:	2c00      	cmp	r4, #0
 800802a:	bf08      	it	eq
 800802c:	2d01      	cmpeq	r5, #1
 800802e:	d01e      	beq.n	800806e <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008030:	b9a4      	cbnz	r4, 800805c <MX25LM51245G_ResetEnable+0x48>
 8008032:	2301      	movs	r3, #1
 8008034:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008036:	2d01      	cmp	r5, #1
 8008038:	d012      	beq.n	8008060 <MX25LM51245G_ResetEnable+0x4c>
 800803a:	2300      	movs	r3, #0
 800803c:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800803e:	b98c      	cbnz	r4, 8008064 <MX25LM51245G_ResetEnable+0x50>
 8008040:	2300      	movs	r3, #0
 8008042:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8008044:	b984      	cbnz	r4, 8008068 <MX25LM51245G_ResetEnable+0x54>
 8008046:	2366      	movs	r3, #102	; 0x66
 8008048:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800804a:	f241 3288 	movw	r2, #5000	; 0x1388
 800804e:	4669      	mov	r1, sp
 8008050:	4630      	mov	r0, r6
 8008052:	f002 fe5d 	bl	800ad10 <HAL_OSPI_Command>
 8008056:	b968      	cbnz	r0, 8008074 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8008058:	b014      	add	sp, #80	; 0x50
 800805a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800805c:	2304      	movs	r3, #4
 800805e:	e7e9      	b.n	8008034 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008060:	2308      	movs	r3, #8
 8008062:	e7eb      	b.n	800803c <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008064:	2310      	movs	r3, #16
 8008066:	e7ec      	b.n	8008042 <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8008068:	f246 6399 	movw	r3, #26265	; 0x6699
 800806c:	e7ec      	b.n	8008048 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 800806e:	f04f 30ff 	mov.w	r0, #4294967295
 8008072:	e7f1      	b.n	8008058 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	e7ee      	b.n	8008058 <MX25LM51245G_ResetEnable+0x44>

0800807a <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800807a:	b570      	push	{r4, r5, r6, lr}
 800807c:	b094      	sub	sp, #80	; 0x50
 800807e:	4606      	mov	r6, r0
 8008080:	460c      	mov	r4, r1
 8008082:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8008084:	2250      	movs	r2, #80	; 0x50
 8008086:	2100      	movs	r1, #0
 8008088:	4668      	mov	r0, sp
 800808a:	f018 fb4f 	bl	802072c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800808e:	2c00      	cmp	r4, #0
 8008090:	bf08      	it	eq
 8008092:	2d01      	cmpeq	r5, #1
 8008094:	d01e      	beq.n	80080d4 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008096:	b9a4      	cbnz	r4, 80080c2 <MX25LM51245G_ResetMemory+0x48>
 8008098:	2301      	movs	r3, #1
 800809a:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800809c:	2d01      	cmp	r5, #1
 800809e:	d012      	beq.n	80080c6 <MX25LM51245G_ResetMemory+0x4c>
 80080a0:	2300      	movs	r3, #0
 80080a2:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80080a4:	b98c      	cbnz	r4, 80080ca <MX25LM51245G_ResetMemory+0x50>
 80080a6:	2300      	movs	r3, #0
 80080a8:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80080aa:	b984      	cbnz	r4, 80080ce <MX25LM51245G_ResetMemory+0x54>
 80080ac:	2399      	movs	r3, #153	; 0x99
 80080ae:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80080b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b4:	4669      	mov	r1, sp
 80080b6:	4630      	mov	r0, r6
 80080b8:	f002 fe2a 	bl	800ad10 <HAL_OSPI_Command>
 80080bc:	b968      	cbnz	r0, 80080da <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80080be:	b014      	add	sp, #80	; 0x50
 80080c0:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80080c2:	2304      	movs	r3, #4
 80080c4:	e7e9      	b.n	800809a <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80080c6:	2308      	movs	r3, #8
 80080c8:	e7eb      	b.n	80080a2 <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80080ca:	2310      	movs	r3, #16
 80080cc:	e7ec      	b.n	80080a8 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80080ce:	f649 1366 	movw	r3, #39270	; 0x9966
 80080d2:	e7ec      	b.n	80080ae <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 80080d4:	f04f 30ff 	mov.w	r0, #4294967295
 80080d8:	e7f1      	b.n	80080be <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 80080da:	f04f 30ff 	mov.w	r0, #4294967295
 80080de:	e7ee      	b.n	80080be <MX25LM51245G_ResetMemory+0x44>

080080e0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80080e4:	4b32      	ldr	r3, [pc, #200]	; (80081b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 80080e6:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 80080ea:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80080ee:	4b31      	ldr	r3, [pc, #196]	; (80081b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 80080f0:	222c      	movs	r2, #44	; 0x2c
 80080f2:	fb02 3101 	mla	r1, r2, r1, r3
 80080f6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80080f8:	68ca      	ldr	r2, [r1, #12]
 80080fa:	eb03 0e02 	add.w	lr, r3, r2
 80080fe:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8008102:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8008104:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8008106:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800810a:	690b      	ldr	r3, [r1, #16]
 800810c:	6a08      	ldr	r0, [r1, #32]
 800810e:	1a1e      	subs	r6, r3, r0
 8008110:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8008114:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008116:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800811a:	694b      	ldr	r3, [r1, #20]
 800811c:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 8008120:	f1be 0f00 	cmp.w	lr, #0
 8008124:	dd08      	ble.n	8008138 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 8008126:	2e00      	cmp	r6, #0
 8008128:	dd09      	ble.n	800813e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800812a:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 800812c:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8008130:	2d0f      	cmp	r5, #15
 8008132:	d83b      	bhi.n	80081ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008134:	2400      	movs	r4, #0
 8008136:	e02b      	b.n	8008190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 8008138:	f04f 0e00 	mov.w	lr, #0
 800813c:	e7f3      	b.n	8008126 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 800813e:	2600      	movs	r6, #0
 8008140:	e7f3      	b.n	800812a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8008142:	3201      	adds	r2, #1
 8008144:	2a0f      	cmp	r2, #15
 8008146:	d822      	bhi.n	800818e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8008148:	fb02 f300 	mul.w	r3, r2, r0
 800814c:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8008150:	459e      	cmp	lr, r3
 8008152:	bf8c      	ite	hi
 8008154:	2100      	movhi	r1, #0
 8008156:	2101      	movls	r1, #1
 8008158:	429e      	cmp	r6, r3
 800815a:	bf38      	it	cc
 800815c:	2100      	movcc	r1, #0
 800815e:	2900      	cmp	r1, #0
 8008160:	d0ef      	beq.n	8008142 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 8008162:	45a9      	cmp	r9, r5
 8008164:	d0ed      	beq.n	8008142 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008166:	4914      	ldr	r1, [pc, #80]	; (80081b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 8008168:	680b      	ldr	r3, [r1, #0]
 800816a:	f8df a050 	ldr.w	sl, [pc, #80]	; 80081bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 800816e:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8008172:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 8008176:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800817a:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800817e:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 8008182:	3301      	adds	r3, #1
 8008184:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008186:	2b7f      	cmp	r3, #127	; 0x7f
 8008188:	d810      	bhi.n	80081ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 800818a:	46a9      	mov	r9, r5
 800818c:	e7d9      	b.n	8008142 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800818e:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008190:	2c0f      	cmp	r4, #15
 8008192:	d809      	bhi.n	80081a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8008194:	1c67      	adds	r7, r4, #1
 8008196:	1c68      	adds	r0, r5, #1
 8008198:	fb04 0300 	mla	r3, r4, r0, r0
 800819c:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 80081a0:	4598      	cmp	r8, r3
 80081a2:	d8f4      	bhi.n	800818e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80081a4:	2200      	movs	r2, #0
 80081a6:	e7cd      	b.n	8008144 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80081a8:	3501      	adds	r5, #1
 80081aa:	e7c1      	b.n	8008130 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 80081ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b0:	3b9aca00 	.word	0x3b9aca00
 80081b4:	080232ec 	.word	0x080232ec
 80081b8:	2400382c 	.word	0x2400382c
 80081bc:	24002e2c 	.word	0x24002e2c

080081c0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	b089      	sub	sp, #36	; 0x24
 80081c6:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80081c8:	4f4b      	ldr	r7, [pc, #300]	; (80082f8 <I2C_Compute_SCLL_SCLH+0x138>)
 80081ca:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 80081ce:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80081d2:	494a      	ldr	r1, [pc, #296]	; (80082fc <I2C_Compute_SCLL_SCLH+0x13c>)
 80081d4:	232c      	movs	r3, #44	; 0x2c
 80081d6:	fb04 f303 	mul.w	r3, r4, r3
 80081da:	18ca      	adds	r2, r1, r3
 80081dc:	58cb      	ldr	r3, [r1, r3]
 80081de:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 80081e2:	fbb1 f1f3 	udiv	r1, r1, r3
 80081e6:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80081e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80081ea:	fb08 f303 	mul.w	r3, r8, r3
 80081ee:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80081f0:	6853      	ldr	r3, [r2, #4]
 80081f2:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80081f6:	6893      	ldr	r3, [r2, #8]
 80081f8:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 80081fc:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80081fe:	2300      	movs	r3, #0
 8008200:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8008202:	f04f 33ff 	mov.w	r3, #4294967295
 8008206:	9307      	str	r3, [sp, #28]
 8008208:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800820a:	e060      	b.n	80082ce <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 800820c:	1af2      	subs	r2, r6, r3
 800820e:	e02a      	b.n	8008266 <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8008210:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008212:	29ff      	cmp	r1, #255	; 0xff
 8008214:	d837      	bhi.n	8008286 <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8008216:	1c4d      	adds	r5, r1, #1
 8008218:	fb01 0200 	mla	r2, r1, r0, r0
 800821c:	4442      	add	r2, r8
 800821e:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8008220:	eb0c 0302 	add.w	r3, ip, r2
 8008224:	4e35      	ldr	r6, [pc, #212]	; (80082fc <I2C_Compute_SCLL_SCLH+0x13c>)
 8008226:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800822a:	fb0b 6b04 	mla	fp, fp, r4, r6
 800822e:	f8db 6020 	ldr.w	r6, [fp, #32]
 8008232:	4433      	add	r3, r6
 8008234:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8008238:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800823a:	429f      	cmp	r7, r3
 800823c:	bf8c      	ite	hi
 800823e:	2600      	movhi	r6, #0
 8008240:	2601      	movls	r6, #1
 8008242:	4599      	cmp	r9, r3
 8008244:	bf38      	it	cc
 8008246:	2600      	movcc	r6, #0
 8008248:	2e00      	cmp	r6, #0
 800824a:	d0e1      	beq.n	8008210 <I2C_Compute_SCLL_SCLH+0x50>
 800824c:	4e2b      	ldr	r6, [pc, #172]	; (80082fc <I2C_Compute_SCLL_SCLH+0x13c>)
 800824e:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8008252:	fb0b 6604 	mla	r6, fp, r4, r6
 8008256:	69f6      	ldr	r6, [r6, #28]
 8008258:	4296      	cmp	r6, r2
 800825a:	d8d9      	bhi.n	8008210 <I2C_Compute_SCLL_SCLH+0x50>
 800825c:	4592      	cmp	sl, r2
 800825e:	d2d7      	bcs.n	8008210 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 8008260:	9e05      	ldr	r6, [sp, #20]
 8008262:	1b9a      	subs	r2, r3, r6
 8008264:	d4d2      	bmi.n	800820c <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	429a      	cmp	r2, r3
 800826a:	d2d1      	bcs.n	8008210 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8008272:	4b23      	ldr	r3, [pc, #140]	; (8008300 <I2C_Compute_SCLL_SCLH+0x140>)
 8008274:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008278:	9e01      	ldr	r6, [sp, #4]
 800827a:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 800827c:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 800827e:	9202      	str	r2, [sp, #8]
              ret = count;
 8008280:	9b04      	ldr	r3, [sp, #16]
 8008282:	9307      	str	r3, [sp, #28]
 8008284:	e7c4      	b.n	8008210 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800828a:	9b01      	ldr	r3, [sp, #4]
 800828c:	2bff      	cmp	r3, #255	; 0xff
 800828e:	d81b      	bhi.n	80082c8 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8008290:	9906      	ldr	r1, [sp, #24]
 8008292:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	9203      	str	r2, [sp, #12]
 800829c:	fb03 0c00 	mla	ip, r3, r0, r0
 80082a0:	ea4f 084a 	mov.w	r8, sl, lsl #1
 80082a4:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 80082a8:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <I2C_Compute_SCLL_SCLH+0x13c>)
 80082ac:	222c      	movs	r2, #44	; 0x2c
 80082ae:	fb02 3304 	mla	r3, r2, r4, r3
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	4563      	cmp	r3, ip
 80082b6:	d2e6      	bcs.n	8008286 <I2C_Compute_SCLL_SCLH+0xc6>
 80082b8:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 80082bc:	1a5b      	subs	r3, r3, r1
 80082be:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 80082c2:	d2e0      	bcs.n	8008286 <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80082c4:	2100      	movs	r1, #0
 80082c6:	e7a4      	b.n	8008212 <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80082c8:	9b04      	ldr	r3, [sp, #16]
 80082ca:	3301      	adds	r3, #1
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <I2C_Compute_SCLL_SCLH+0x144>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	9a04      	ldr	r2, [sp, #16]
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d90a      	bls.n	80082ee <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80082d8:	9b04      	ldr	r3, [sp, #16]
 80082da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082de:	4a08      	ldr	r2, [pc, #32]	; (8008300 <I2C_Compute_SCLL_SCLH+0x140>)
 80082e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80082e4:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80082e8:	2300      	movs	r3, #0
 80082ea:	9301      	str	r3, [sp, #4]
 80082ec:	e7cd      	b.n	800828a <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 80082ee:	9807      	ldr	r0, [sp, #28]
 80082f0:	b009      	add	sp, #36	; 0x24
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	bf00      	nop
 80082f8:	3b9aca00 	.word	0x3b9aca00
 80082fc:	080232ec 	.word	0x080232ec
 8008300:	24002e2c 	.word	0x24002e2c
 8008304:	2400382c 	.word	0x2400382c

08008308 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8008308:	2800      	cmp	r0, #0
 800830a:	bf18      	it	ne
 800830c:	2900      	cmpne	r1, #0
 800830e:	d134      	bne.n	800837a <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8008310:	2000      	movs	r0, #0
}
 8008312:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8008314:	3401      	adds	r4, #1
 8008316:	2c02      	cmp	r4, #2
 8008318:	d834      	bhi.n	8008384 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800831a:	4b1c      	ldr	r3, [pc, #112]	; (800838c <I2C_GetTiming+0x84>)
 800831c:	212c      	movs	r1, #44	; 0x2c
 800831e:	fb01 3304 	mla	r3, r1, r4, r3
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	4293      	cmp	r3, r2
 8008326:	d8f5      	bhi.n	8008314 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8008328:	4b18      	ldr	r3, [pc, #96]	; (800838c <I2C_GetTiming+0x84>)
 800832a:	fb01 3304 	mla	r3, r1, r4, r3
 800832e:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8008330:	4293      	cmp	r3, r2
 8008332:	d3ef      	bcc.n	8008314 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8008334:	4621      	mov	r1, r4
 8008336:	4628      	mov	r0, r5
 8008338:	f7ff fed2 	bl	80080e0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800833c:	4621      	mov	r1, r4
 800833e:	4628      	mov	r0, r5
 8008340:	f7ff ff3e 	bl	80081c0 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8008344:	287f      	cmp	r0, #127	; 0x7f
 8008346:	d81f      	bhi.n	8008388 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008348:	4a11      	ldr	r2, [pc, #68]	; (8008390 <I2C_GetTiming+0x88>)
 800834a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800834e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8008352:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8008356:	6863      	ldr	r3, [r4, #4]
 8008358:	051b      	lsls	r3, r3, #20
 800835a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800835e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8008362:	68a1      	ldr	r1, [r4, #8]
 8008364:	0409      	lsls	r1, r1, #16
 8008366:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800836a:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800836c:	68e1      	ldr	r1, [r4, #12]
 800836e:	0209      	lsls	r1, r1, #8
 8008370:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8008372:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8008374:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008376:	4318      	orrs	r0, r3
 8008378:	e005      	b.n	8008386 <I2C_GetTiming+0x7e>
{
 800837a:	b538      	push	{r3, r4, r5, lr}
 800837c:	4605      	mov	r5, r0
 800837e:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8008380:	2400      	movs	r4, #0
 8008382:	e7c8      	b.n	8008316 <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 8008384:	2000      	movs	r0, #0
}
 8008386:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 8008388:	2000      	movs	r0, #0
  return ret;
 800838a:	e7fc      	b.n	8008386 <I2C_GetTiming+0x7e>
 800838c:	080232ec 	.word	0x080232ec
 8008390:	24002e2c 	.word	0x24002e2c

08008394 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8008394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008398:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800839a:	4c2a      	ldr	r4, [pc, #168]	; (8008444 <I2C4_MspInit+0xb0>)
 800839c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80083a0:	f043 0308 	orr.w	r3, r3, #8
 80083a4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80083a8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80083b4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80083b8:	f043 0308 	orr.w	r3, r3, #8
 80083bc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80083c0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80083c4:	f003 0308 	and.w	r3, r3, #8
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80083cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083d0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80083d2:	f04f 0912 	mov.w	r9, #18
 80083d6:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80083da:	f04f 0800 	mov.w	r8, #0
 80083de:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80083e2:	2702      	movs	r7, #2
 80083e4:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80083e6:	2604      	movs	r6, #4
 80083e8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80083ea:	4d17      	ldr	r5, [pc, #92]	; (8008448 <I2C4_MspInit+0xb4>)
 80083ec:	a903      	add	r1, sp, #12
 80083ee:	4628      	mov	r0, r5
 80083f0:	f001 fada 	bl	80099a8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80083f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083f8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80083fa:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80083fe:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8008402:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8008404:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8008406:	a903      	add	r1, sp, #12
 8008408:	4628      	mov	r0, r5
 800840a:	f001 facd 	bl	80099a8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800840e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8008412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008416:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 800841a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 800841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008422:	9302      	str	r3, [sp, #8]
 8008424:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8008426:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800842a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800842e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8008432:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800843a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800843e:	b009      	add	sp, #36	; 0x24
 8008440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008444:	58024400 	.word	0x58024400
 8008448:	58020c00 	.word	0x58020c00

0800844c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800844c:	b510      	push	{r4, lr}
 800844e:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8008450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008454:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8008456:	4c09      	ldr	r4, [pc, #36]	; (800847c <I2C4_MspDeInit+0x30>)
 8008458:	4620      	mov	r0, r4
 800845a:	f001 fbb5 	bl	8009bc8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800845e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008462:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8008464:	4620      	mov	r0, r4
 8008466:	f001 fbaf 	bl	8009bc8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800846a:	4a05      	ldr	r2, [pc, #20]	; (8008480 <I2C4_MspDeInit+0x34>)
 800846c:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8008470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008474:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8008478:	b006      	add	sp, #24
 800847a:	bd10      	pop	{r4, pc}
 800847c:	58020c00 	.word	0x58020c00
 8008480:	58024400 	.word	0x58024400

08008484 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8008484:	b510      	push	{r4, lr}
 8008486:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008488:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800848c:	9402      	str	r4, [sp, #8]
 800848e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8008492:	9401      	str	r4, [sp, #4]
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	4613      	mov	r3, r2
 8008498:	460a      	mov	r2, r1
 800849a:	4601      	mov	r1, r0
 800849c:	4804      	ldr	r0, [pc, #16]	; (80084b0 <I2C4_WriteReg+0x2c>)
 800849e:	f001 fe98 	bl	800a1d2 <HAL_I2C_Mem_Write>
 80084a2:	b910      	cbnz	r0, 80084aa <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 80084a4:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 80084a6:	b004      	add	sp, #16
 80084a8:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 80084aa:	f06f 0007 	mvn.w	r0, #7
 80084ae:	e7fa      	b.n	80084a6 <I2C4_WriteReg+0x22>
 80084b0:	24003830 	.word	0x24003830

080084b4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80084b4:	b510      	push	{r4, lr}
 80084b6:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80084b8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80084bc:	9402      	str	r4, [sp, #8]
 80084be:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80084c2:	9401      	str	r4, [sp, #4]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	4613      	mov	r3, r2
 80084c8:	460a      	mov	r2, r1
 80084ca:	4601      	mov	r1, r0
 80084cc:	4804      	ldr	r0, [pc, #16]	; (80084e0 <I2C4_ReadReg+0x2c>)
 80084ce:	f001 ff55 	bl	800a37c <HAL_I2C_Mem_Read>
 80084d2:	b910      	cbnz	r0, 80084da <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 80084d4:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 80084d6:	b004      	add	sp, #16
 80084d8:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 80084da:	f06f 0007 	mvn.w	r0, #7
 80084de:	e7fa      	b.n	80084d6 <I2C4_ReadReg+0x22>
 80084e0:	24003830 	.word	0x24003830

080084e4 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 80084e4:	4a09      	ldr	r2, [pc, #36]	; (800850c <BSP_I2C4_DeInit+0x28>)
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80084ec:	b10b      	cbz	r3, 80084f2 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 80084ee:	2000      	movs	r0, #0
}
 80084f0:	4770      	bx	lr
{
 80084f2:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 80084f4:	4c06      	ldr	r4, [pc, #24]	; (8008510 <BSP_I2C4_DeInit+0x2c>)
 80084f6:	4620      	mov	r0, r4
 80084f8:	f7ff ffa8 	bl	800844c <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80084fc:	4620      	mov	r0, r4
 80084fe:	f001 fe4f 	bl	800a1a0 <HAL_I2C_DeInit>
 8008502:	b900      	cbnz	r0, 8008506 <BSP_I2C4_DeInit+0x22>
}
 8008504:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 8008506:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800850a:	e7fb      	b.n	8008504 <BSP_I2C4_DeInit+0x20>
 800850c:	24002e28 	.word	0x24002e28
 8008510:	24003830 	.word	0x24003830

08008514 <MX_I2C4_Init>:
{
 8008514:	b510      	push	{r4, lr}
 8008516:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8008518:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800851e:	2201      	movs	r2, #1
 8008520:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008522:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8008524:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008526:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008528:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800852a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800852c:	f001 fdda 	bl	800a0e4 <HAL_I2C_Init>
 8008530:	b108      	cbz	r0, 8008536 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8008532:	2001      	movs	r0, #1
}
 8008534:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8008536:	2100      	movs	r1, #0
 8008538:	4620      	mov	r0, r4
 800853a:	f001 fffc 	bl	800a536 <HAL_I2CEx_ConfigAnalogFilter>
 800853e:	b108      	cbz	r0, 8008544 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8008540:	2001      	movs	r0, #1
 8008542:	e7f7      	b.n	8008534 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8008544:	2100      	movs	r1, #0
 8008546:	4620      	mov	r0, r4
 8008548:	f002 f823 	bl	800a592 <HAL_I2CEx_ConfigDigitalFilter>
 800854c:	2800      	cmp	r0, #0
 800854e:	d0f1      	beq.n	8008534 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8008550:	2001      	movs	r0, #1
 8008552:	e7ef      	b.n	8008534 <MX_I2C4_Init+0x20>

08008554 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8008554:	4b11      	ldr	r3, [pc, #68]	; (800859c <BSP_I2C4_Init+0x48>)
 8008556:	4a12      	ldr	r2, [pc, #72]	; (80085a0 <BSP_I2C4_Init+0x4c>)
 8008558:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <BSP_I2C4_Init+0x50>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	b10b      	cbz	r3, 8008564 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8008560:	2000      	movs	r0, #0
}
 8008562:	4770      	bx	lr
{
 8008564:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 8008566:	3301      	adds	r3, #1
 8008568:	4a0e      	ldr	r2, [pc, #56]	; (80085a4 <BSP_I2C4_Init+0x50>)
 800856a:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800856c:	480b      	ldr	r0, [pc, #44]	; (800859c <BSP_I2C4_Init+0x48>)
 800856e:	f001 ffdd 	bl	800a52c <HAL_I2C_GetState>
 8008572:	b108      	cbz	r0, 8008578 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8008574:	2000      	movs	r0, #0
}
 8008576:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 8008578:	4c08      	ldr	r4, [pc, #32]	; (800859c <BSP_I2C4_Init+0x48>)
 800857a:	4620      	mov	r0, r4
 800857c:	f7ff ff0a 	bl	8008394 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8008580:	f003 fd04 	bl	800bf8c <HAL_RCC_GetPCLK2Freq>
 8008584:	4908      	ldr	r1, [pc, #32]	; (80085a8 <BSP_I2C4_Init+0x54>)
 8008586:	f7ff febf 	bl	8008308 <I2C_GetTiming>
 800858a:	4601      	mov	r1, r0
 800858c:	4620      	mov	r0, r4
 800858e:	f7ff ffc1 	bl	8008514 <MX_I2C4_Init>
 8008592:	2800      	cmp	r0, #0
 8008594:	d0ef      	beq.n	8008576 <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 8008596:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800859a:	e7ec      	b.n	8008576 <BSP_I2C4_Init+0x22>
 800859c:	24003830 	.word	0x24003830
 80085a0:	58001c00 	.word	0x58001c00
 80085a4:	24002e28 	.word	0x24002e28
 80085a8:	000186a0 	.word	0x000186a0

080085ac <BSP_I2C4_WriteReg>:
{
 80085ac:	b500      	push	{lr}
 80085ae:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4613      	mov	r3, r2
 80085b4:	2201      	movs	r2, #1
 80085b6:	f7ff ff65 	bl	8008484 <I2C4_WriteReg>
 80085ba:	b910      	cbnz	r0, 80085c2 <BSP_I2C4_WriteReg+0x16>
}
 80085bc:	b003      	add	sp, #12
 80085be:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80085c2:	4805      	ldr	r0, [pc, #20]	; (80085d8 <BSP_I2C4_WriteReg+0x2c>)
 80085c4:	f001 ffb5 	bl	800a532 <HAL_I2C_GetError>
 80085c8:	2804      	cmp	r0, #4
 80085ca:	d002      	beq.n	80085d2 <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80085cc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80085d0:	e7f4      	b.n	80085bc <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80085d2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80085d6:	e7f1      	b.n	80085bc <BSP_I2C4_WriteReg+0x10>
 80085d8:	24003830 	.word	0x24003830

080085dc <BSP_I2C4_ReadReg>:
{
 80085dc:	b500      	push	{lr}
 80085de:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	4613      	mov	r3, r2
 80085e4:	2201      	movs	r2, #1
 80085e6:	f7ff ff65 	bl	80084b4 <I2C4_ReadReg>
 80085ea:	b910      	cbnz	r0, 80085f2 <BSP_I2C4_ReadReg+0x16>
}
 80085ec:	b003      	add	sp, #12
 80085ee:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <BSP_I2C4_ReadReg+0x2c>)
 80085f4:	f001 ff9d 	bl	800a532 <HAL_I2C_GetError>
 80085f8:	2804      	cmp	r0, #4
 80085fa:	d002      	beq.n	8008602 <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80085fc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008600:	e7f4      	b.n	80085ec <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8008602:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8008606:	e7f1      	b.n	80085ec <BSP_I2C4_ReadReg+0x10>
 8008608:	24003830 	.word	0x24003830

0800860c <BSP_GetTick>:
{
 800860c:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 800860e:	f000 fde7 	bl	80091e0 <HAL_GetTick>
}
 8008612:	bd08      	pop	{r3, pc}

08008614 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800861a:	4b7e      	ldr	r3, [pc, #504]	; (8008814 <OSPI_NOR_MspInit+0x200>)
 800861c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008624:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8008628:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800862c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008630:	9201      	str	r2, [sp, #4]
 8008632:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8008634:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800863a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800863c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800863e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008642:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8008644:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008648:	f042 0202 	orr.w	r2, r2, #2
 800864c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008650:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008654:	f002 0202 	and.w	r2, r2, #2
 8008658:	9202      	str	r2, [sp, #8]
 800865a:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 800865c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008660:	f042 0204 	orr.w	r2, r2, #4
 8008664:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008668:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800866c:	f002 0204 	and.w	r2, r2, #4
 8008670:	9203      	str	r2, [sp, #12]
 8008672:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 8008674:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800867c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008680:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008684:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008688:	9204      	str	r2, [sp, #16]
 800868a:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 800868c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008690:	f042 0208 	orr.w	r2, r2, #8
 8008694:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008698:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800869c:	f002 0208 	and.w	r2, r2, #8
 80086a0:	9205      	str	r2, [sp, #20]
 80086a2:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 80086a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80086a8:	f042 0220 	orr.w	r2, r2, #32
 80086ac:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80086b0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80086b4:	f002 0220 	and.w	r2, r2, #32
 80086b8:	9206      	str	r2, [sp, #24]
 80086ba:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 80086bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80086c0:	f042 0220 	orr.w	r2, r2, #32
 80086c4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80086c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80086cc:	f002 0220 	and.w	r2, r2, #32
 80086d0:	9207      	str	r2, [sp, #28]
 80086d2:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 80086d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80086d8:	f042 0220 	orr.w	r2, r2, #32
 80086dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80086e0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80086e4:	f002 0220 	and.w	r2, r2, #32
 80086e8:	9208      	str	r2, [sp, #32]
 80086ea:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 80086ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80086f0:	f042 0204 	orr.w	r2, r2, #4
 80086f4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80086f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80086fc:	f002 0204 	and.w	r2, r2, #4
 8008700:	9209      	str	r2, [sp, #36]	; 0x24
 8008702:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8008704:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800870c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008710:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008714:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008718:	920a      	str	r2, [sp, #40]	; 0x28
 800871a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 800871c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008724:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008728:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800872c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008730:	920b      	str	r2, [sp, #44]	; 0x2c
 8008732:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8008734:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800873c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008748:	930c      	str	r3, [sp, #48]	; 0x30
 800874a:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800874c:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8008750:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8008754:	f04f 0a02 	mov.w	sl, #2
 8008758:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800875c:	2301      	movs	r3, #1
 800875e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008760:	2303      	movs	r3, #3
 8008762:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8008764:	240a      	movs	r4, #10
 8008766:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8008768:	a90d      	add	r1, sp, #52	; 0x34
 800876a:	482b      	ldr	r0, [pc, #172]	; (8008818 <OSPI_NOR_MspInit+0x204>)
 800876c:	f001 f91c 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8008770:	2320      	movs	r3, #32
 8008772:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8008774:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8008776:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800882c <OSPI_NOR_MspInit+0x218>
 800877a:	a90d      	add	r1, sp, #52	; 0x34
 800877c:	4648      	mov	r0, r9
 800877e:	f001 f913 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8008782:	2304      	movs	r3, #4
 8008784:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008786:	2300      	movs	r3, #0
 8008788:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800878a:	2509      	movs	r5, #9
 800878c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800878e:	a90d      	add	r1, sp, #52	; 0x34
 8008790:	4822      	ldr	r0, [pc, #136]	; (800881c <OSPI_NOR_MspInit+0x208>)
 8008792:	f001 f909 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8008796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800879a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800879c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800879e:	a90d      	add	r1, sp, #52	; 0x34
 80087a0:	481f      	ldr	r0, [pc, #124]	; (8008820 <OSPI_NOR_MspInit+0x20c>)
 80087a2:	f001 f901 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 80087a6:	f44f 7800 	mov.w	r8, #512	; 0x200
 80087aa:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 80087ae:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 80087b0:	4e1c      	ldr	r6, [pc, #112]	; (8008824 <OSPI_NOR_MspInit+0x210>)
 80087b2:	a90d      	add	r1, sp, #52	; 0x34
 80087b4:	4630      	mov	r0, r6
 80087b6:	f001 f8f7 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 80087ba:	2780      	movs	r7, #128	; 0x80
 80087bc:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 80087be:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 80087c0:	a90d      	add	r1, sp, #52	; 0x34
 80087c2:	4630      	mov	r0, r6
 80087c4:	f001 f8f0 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 80087c8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 80087cc:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 80087ce:	a90d      	add	r1, sp, #52	; 0x34
 80087d0:	4630      	mov	r0, r6
 80087d2:	f001 f8e9 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 80087d6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 80087da:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 80087dc:	a90d      	add	r1, sp, #52	; 0x34
 80087de:	4648      	mov	r0, r9
 80087e0:	f001 f8e2 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 80087e4:	2308      	movs	r3, #8
 80087e6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 80087e8:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 80087ea:	a90d      	add	r1, sp, #52	; 0x34
 80087ec:	480e      	ldr	r0, [pc, #56]	; (8008828 <OSPI_NOR_MspInit+0x214>)
 80087ee:	f001 f8db 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 80087f2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 80087f6:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 80087f8:	a90d      	add	r1, sp, #52	; 0x34
 80087fa:	4807      	ldr	r0, [pc, #28]	; (8008818 <OSPI_NOR_MspInit+0x204>)
 80087fc:	f001 f8d4 	bl	80099a8 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8008800:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8008802:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8008804:	a90d      	add	r1, sp, #52	; 0x34
 8008806:	4806      	ldr	r0, [pc, #24]	; (8008820 <OSPI_NOR_MspInit+0x20c>)
 8008808:	f001 f8ce 	bl	80099a8 <HAL_GPIO_Init>
}
 800880c:	b013      	add	sp, #76	; 0x4c
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	bf00      	nop
 8008814:	58024400 	.word	0x58024400
 8008818:	58021800 	.word	0x58021800
 800881c:	58020400 	.word	0x58020400
 8008820:	58020c00 	.word	0x58020c00
 8008824:	58021400 	.word	0x58021400
 8008828:	58021c00 	.word	0x58021c00
 800882c:	58020800 	.word	0x58020800

08008830 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008834:	4c24      	ldr	r4, [pc, #144]	; (80088c8 <OSPI_NOR_ResetMemory+0x98>)
 8008836:	235c      	movs	r3, #92	; 0x5c
 8008838:	fb03 4400 	mla	r4, r3, r0, r4
 800883c:	2200      	movs	r2, #0
 800883e:	4611      	mov	r1, r2
 8008840:	4620      	mov	r0, r4
 8008842:	f7ff fbe7 	bl	8008014 <MX25LM51245G_ResetEnable>
 8008846:	bb60      	cbnz	r0, 80088a2 <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008848:	2200      	movs	r2, #0
 800884a:	4611      	mov	r1, r2
 800884c:	4620      	mov	r0, r4
 800884e:	f7ff fc14 	bl	800807a <MX25LM51245G_ResetMemory>
 8008852:	bb48      	cbnz	r0, 80088a8 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008854:	2200      	movs	r2, #0
 8008856:	2101      	movs	r1, #1
 8008858:	4620      	mov	r0, r4
 800885a:	f7ff fbdb 	bl	8008014 <MX25LM51245G_ResetEnable>
 800885e:	bb30      	cbnz	r0, 80088ae <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008860:	2200      	movs	r2, #0
 8008862:	2101      	movs	r1, #1
 8008864:	4620      	mov	r0, r4
 8008866:	f7ff fc08 	bl	800807a <MX25LM51245G_ResetMemory>
 800886a:	bb18      	cbnz	r0, 80088b4 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800886c:	2201      	movs	r2, #1
 800886e:	4611      	mov	r1, r2
 8008870:	4620      	mov	r0, r4
 8008872:	f7ff fbcf 	bl	8008014 <MX25LM51245G_ResetEnable>
 8008876:	bb00      	cbnz	r0, 80088ba <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8008878:	2201      	movs	r2, #1
 800887a:	4611      	mov	r1, r2
 800887c:	4620      	mov	r0, r4
 800887e:	f7ff fbfc 	bl	800807a <MX25LM51245G_ResetMemory>
 8008882:	4604      	mov	r4, r0
 8008884:	b9e0      	cbnz	r0, 80088c0 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8008886:	4811      	ldr	r0, [pc, #68]	; (80088cc <OSPI_NOR_ResetMemory+0x9c>)
 8008888:	2301      	movs	r3, #1
 800888a:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800888e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8008892:	2300      	movs	r3, #0
 8008894:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8008896:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8008898:	2064      	movs	r0, #100	; 0x64
 800889a:	f000 fca7 	bl	80091ec <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 800889e:	4620      	mov	r0, r4
 80088a0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80088a2:	f06f 0404 	mvn.w	r4, #4
 80088a6:	e7fa      	b.n	800889e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80088a8:	f06f 0404 	mvn.w	r4, #4
 80088ac:	e7f7      	b.n	800889e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80088ae:	f06f 0404 	mvn.w	r4, #4
 80088b2:	e7f4      	b.n	800889e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80088b4:	f06f 0404 	mvn.w	r4, #4
 80088b8:	e7f1      	b.n	800889e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80088ba:	f06f 0404 	mvn.w	r4, #4
 80088be:	e7ee      	b.n	800889e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80088c0:	f06f 0404 	mvn.w	r4, #4
  return ret;
 80088c4:	e7eb      	b.n	800889e <OSPI_NOR_ResetMemory+0x6e>
 80088c6:	bf00      	nop
 80088c8:	24003884 	.word	0x24003884
 80088cc:	2400387c 	.word	0x2400387c

080088d0 <OSPI_NOR_MspDeInit>:
{
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 80088d2:	2104      	movs	r1, #4
 80088d4:	4820      	ldr	r0, [pc, #128]	; (8008958 <OSPI_NOR_MspDeInit+0x88>)
 80088d6:	f001 f977 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 80088da:	4f20      	ldr	r7, [pc, #128]	; (800895c <OSPI_NOR_MspDeInit+0x8c>)
 80088dc:	2120      	movs	r1, #32
 80088de:	4638      	mov	r0, r7
 80088e0:	f001 f972 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 80088e4:	4e1e      	ldr	r6, [pc, #120]	; (8008960 <OSPI_NOR_MspDeInit+0x90>)
 80088e6:	2140      	movs	r1, #64	; 0x40
 80088e8:	4630      	mov	r0, r6
 80088ea:	f001 f96d 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 80088ee:	4d1d      	ldr	r5, [pc, #116]	; (8008964 <OSPI_NOR_MspDeInit+0x94>)
 80088f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80088f4:	4628      	mov	r0, r5
 80088f6:	f001 f967 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 80088fa:	4c1b      	ldr	r4, [pc, #108]	; (8008968 <OSPI_NOR_MspDeInit+0x98>)
 80088fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008900:	4620      	mov	r0, r4
 8008902:	f001 f961 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8008906:	2180      	movs	r1, #128	; 0x80
 8008908:	4620      	mov	r0, r4
 800890a:	f001 f95d 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800890e:	2140      	movs	r1, #64	; 0x40
 8008910:	4620      	mov	r0, r4
 8008912:	f001 f959 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8008916:	2102      	movs	r1, #2
 8008918:	4638      	mov	r0, r7
 800891a:	f001 f955 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800891e:	2108      	movs	r1, #8
 8008920:	4812      	ldr	r0, [pc, #72]	; (800896c <OSPI_NOR_MspDeInit+0x9c>)
 8008922:	f001 f951 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8008926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800892a:	4630      	mov	r0, r6
 800892c:	f001 f94c 	bl	8009bc8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8008930:	2180      	movs	r1, #128	; 0x80
 8008932:	4628      	mov	r0, r5
 8008934:	f001 f948 	bl	8009bc8 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 8008938:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <OSPI_NOR_MspDeInit+0xa0>)
 800893a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800893c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008940:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8008942:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008944:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008948:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 800894a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800894e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008952:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8008956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008958:	58020400 	.word	0x58020400
 800895c:	58020800 	.word	0x58020800
 8008960:	58021800 	.word	0x58021800
 8008964:	58020c00 	.word	0x58020c00
 8008968:	58021400 	.word	0x58021400
 800896c:	58021c00 	.word	0x58021c00
 8008970:	58024400 	.word	0x58024400

08008974 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800897a:	4d2b      	ldr	r5, [pc, #172]	; (8008a28 <OSPI_NOR_ExitOPIMode+0xb4>)
 800897c:	235c      	movs	r3, #92	; 0x5c
 800897e:	fb03 5500 	mla	r5, r3, r0, r5
 8008982:	4b2a      	ldr	r3, [pc, #168]	; (8008a2c <OSPI_NOR_ExitOPIMode+0xb8>)
 8008984:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008988:	789a      	ldrb	r2, [r3, #2]
 800898a:	7859      	ldrb	r1, [r3, #1]
 800898c:	4628      	mov	r0, r5
 800898e:	f7ff f9cf 	bl	8007d30 <MX25LM51245G_WriteEnable>
 8008992:	2800      	cmp	r0, #0
 8008994:	d138      	bne.n	8008a08 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 800899c:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 80089a0:	4922      	ldr	r1, [pc, #136]	; (8008a2c <OSPI_NOR_ExitOPIMode+0xb8>)
 80089a2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	788a      	ldrb	r2, [r1, #2]
 80089aa:	7849      	ldrb	r1, [r1, #1]
 80089ac:	4628      	mov	r0, r5
 80089ae:	f7ff fa56 	bl	8007e5e <MX25LM51245G_WriteCfg2Register>
 80089b2:	4606      	mov	r6, r0
 80089b4:	bb58      	cbnz	r0, 8008a0e <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80089b6:	2028      	movs	r0, #40	; 0x28
 80089b8:	f000 fc18 	bl	80091ec <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 80089bc:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <OSPI_NOR_ExitOPIMode+0xb8>)
 80089be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089c2:	789b      	ldrb	r3, [r3, #2]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d014      	beq.n	80089f2 <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80089c8:	2200      	movs	r2, #0
 80089ca:	4611      	mov	r1, r2
 80089cc:	4628      	mov	r0, r5
 80089ce:	f7ff f872 	bl	8007ab6 <MX25LM51245G_AutoPollingMemReady>
 80089d2:	b9f8      	cbnz	r0, 8008a14 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	2300      	movs	r3, #0
 80089da:	461a      	mov	r2, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	4628      	mov	r0, r5
 80089e0:	f7ff faa4 	bl	8007f2c <MX25LM51245G_ReadCfg2Register>
 80089e4:	b9c8      	cbnz	r0, 8008a1a <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 80089e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80089ea:	b9cb      	cbnz	r3, 8008a20 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 80089ec:	4630      	mov	r0, r6
 80089ee:	b004      	add	sp, #16
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80089f6:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80089f8:	4628      	mov	r0, r5
 80089fa:	f002 fc6f 	bl	800b2dc <HAL_OSPI_Init>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d0e2      	beq.n	80089c8 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8008a02:	f06f 0603 	mvn.w	r6, #3
 8008a06:	e7df      	b.n	80089c8 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a08:	f06f 0604 	mvn.w	r6, #4
 8008a0c:	e7ee      	b.n	80089ec <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a0e:	f06f 0604 	mvn.w	r6, #4
 8008a12:	e7eb      	b.n	80089ec <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a14:	f06f 0604 	mvn.w	r6, #4
 8008a18:	e7e8      	b.n	80089ec <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a1a:	f06f 0604 	mvn.w	r6, #4
 8008a1e:	e7e5      	b.n	80089ec <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a20:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8008a24:	e7e2      	b.n	80089ec <OSPI_NOR_ExitOPIMode+0x78>
 8008a26:	bf00      	nop
 8008a28:	24003884 	.word	0x24003884
 8008a2c:	2400387c 	.word	0x2400387c

08008a30 <OSPI_NOR_EnterSOPIMode>:
{
 8008a30:	b530      	push	{r4, r5, lr}
 8008a32:	b085      	sub	sp, #20
 8008a34:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008a36:	4c2e      	ldr	r4, [pc, #184]	; (8008af0 <OSPI_NOR_EnterSOPIMode+0xc0>)
 8008a38:	235c      	movs	r3, #92	; 0x5c
 8008a3a:	fb03 4400 	mla	r4, r3, r0, r4
 8008a3e:	4b2d      	ldr	r3, [pc, #180]	; (8008af4 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8008a40:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008a44:	789a      	ldrb	r2, [r3, #2]
 8008a46:	7859      	ldrb	r1, [r3, #1]
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f7ff f971 	bl	8007d30 <MX25LM51245G_WriteEnable>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d139      	bne.n	8008ac6 <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8008a52:	4928      	ldr	r1, [pc, #160]	; (8008af4 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8008a54:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008a58:	2307      	movs	r3, #7
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a60:	788a      	ldrb	r2, [r1, #2]
 8008a62:	7849      	ldrb	r1, [r1, #1]
 8008a64:	4620      	mov	r0, r4
 8008a66:	f7ff f9fa 	bl	8007e5e <MX25LM51245G_WriteCfg2Register>
 8008a6a:	bb78      	cbnz	r0, 8008acc <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008a6c:	4b21      	ldr	r3, [pc, #132]	; (8008af4 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8008a6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008a72:	789a      	ldrb	r2, [r3, #2]
 8008a74:	7859      	ldrb	r1, [r3, #1]
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7ff f95a 	bl	8007d30 <MX25LM51245G_WriteEnable>
 8008a7c:	bb48      	cbnz	r0, 8008ad2 <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8008a7e:	481d      	ldr	r0, [pc, #116]	; (8008af4 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8008a80:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8008a84:	2301      	movs	r3, #1
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	78aa      	ldrb	r2, [r5, #2]
 8008a8c:	7869      	ldrb	r1, [r5, #1]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7ff f9e5 	bl	8007e5e <MX25LM51245G_WriteCfg2Register>
 8008a94:	bb00      	cbnz	r0, 8008ad8 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8008a96:	2028      	movs	r0, #40	; 0x28
 8008a98:	f000 fba8 	bl	80091ec <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f7ff f808 	bl	8007ab6 <MX25LM51245G_AutoPollingMemReady>
 8008aa6:	b9d0      	cbnz	r0, 8008ade <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8008aa8:	ab03      	add	r3, sp, #12
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	2300      	movs	r3, #0
 8008aae:	461a      	mov	r2, r3
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7ff fa3a 	bl	8007f2c <MX25LM51245G_ReadCfg2Register>
 8008ab8:	b9a0      	cbnz	r0, 8008ae4 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8008aba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d113      	bne.n	8008aea <OSPI_NOR_EnterSOPIMode+0xba>
}
 8008ac2:	b005      	add	sp, #20
 8008ac4:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ac6:	f06f 0004 	mvn.w	r0, #4
 8008aca:	e7fa      	b.n	8008ac2 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008acc:	f06f 0004 	mvn.w	r0, #4
 8008ad0:	e7f7      	b.n	8008ac2 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ad2:	f06f 0004 	mvn.w	r0, #4
 8008ad6:	e7f4      	b.n	8008ac2 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ad8:	f06f 0004 	mvn.w	r0, #4
 8008adc:	e7f1      	b.n	8008ac2 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ade:	f06f 0004 	mvn.w	r0, #4
 8008ae2:	e7ee      	b.n	8008ac2 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ae4:	f06f 0004 	mvn.w	r0, #4
 8008ae8:	e7eb      	b.n	8008ac2 <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008aea:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008aee:	e7e8      	b.n	8008ac2 <OSPI_NOR_EnterSOPIMode+0x92>
 8008af0:	24003884 	.word	0x24003884
 8008af4:	2400387c 	.word	0x2400387c

08008af8 <OSPI_NOR_EnterDOPIMode>:
{
 8008af8:	b530      	push	{r4, r5, lr}
 8008afa:	b085      	sub	sp, #20
 8008afc:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008afe:	4c35      	ldr	r4, [pc, #212]	; (8008bd4 <OSPI_NOR_EnterDOPIMode+0xdc>)
 8008b00:	235c      	movs	r3, #92	; 0x5c
 8008b02:	fb03 4400 	mla	r4, r3, r0, r4
 8008b06:	4b34      	ldr	r3, [pc, #208]	; (8008bd8 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8008b08:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008b0c:	789a      	ldrb	r2, [r3, #2]
 8008b0e:	7859      	ldrb	r1, [r3, #1]
 8008b10:	4620      	mov	r0, r4
 8008b12:	f7ff f90d 	bl	8007d30 <MX25LM51245G_WriteEnable>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d144      	bne.n	8008ba4 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8008b1a:	492f      	ldr	r1, [pc, #188]	; (8008bd8 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8008b1c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008b20:	2307      	movs	r3, #7
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008b28:	788a      	ldrb	r2, [r1, #2]
 8008b2a:	7849      	ldrb	r1, [r1, #1]
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7ff f996 	bl	8007e5e <MX25LM51245G_WriteCfg2Register>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d139      	bne.n	8008baa <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008b36:	4b28      	ldr	r3, [pc, #160]	; (8008bd8 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8008b38:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008b3c:	789a      	ldrb	r2, [r3, #2]
 8008b3e:	7859      	ldrb	r1, [r3, #1]
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7ff f8f5 	bl	8007d30 <MX25LM51245G_WriteEnable>
 8008b46:	bb98      	cbnz	r0, 8008bb0 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8008b48:	4923      	ldr	r1, [pc, #140]	; (8008bd8 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8008b4a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008b4e:	2302      	movs	r3, #2
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	2300      	movs	r3, #0
 8008b54:	788a      	ldrb	r2, [r1, #2]
 8008b56:	7849      	ldrb	r1, [r1, #1]
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f7ff f980 	bl	8007e5e <MX25LM51245G_WriteCfg2Register>
 8008b5e:	bb50      	cbnz	r0, 8008bb6 <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8008b60:	2028      	movs	r0, #40	; 0x28
 8008b62:	f000 fb43 	bl	80091ec <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8008b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b6a:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8008b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b70:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8008b72:	4620      	mov	r0, r4
 8008b74:	f002 fbb2 	bl	800b2dc <HAL_OSPI_Init>
 8008b78:	bb00      	cbnz	r0, 8008bbc <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f7fe ff99 	bl	8007ab6 <MX25LM51245G_AutoPollingMemReady>
 8008b84:	b9e8      	cbnz	r0, 8008bc2 <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8008b86:	ab03      	add	r3, sp, #12
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4620      	mov	r0, r4
 8008b92:	f7ff f9cb 	bl	8007f2c <MX25LM51245G_ReadCfg2Register>
 8008b96:	b9b8      	cbnz	r0, 8008bc8 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8008b98:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d116      	bne.n	8008bce <OSPI_NOR_EnterDOPIMode+0xd6>
}
 8008ba0:	b005      	add	sp, #20
 8008ba2:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ba4:	f06f 0004 	mvn.w	r0, #4
 8008ba8:	e7fa      	b.n	8008ba0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008baa:	f06f 0004 	mvn.w	r0, #4
 8008bae:	e7f7      	b.n	8008ba0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bb0:	f06f 0004 	mvn.w	r0, #4
 8008bb4:	e7f4      	b.n	8008ba0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bb6:	f06f 0004 	mvn.w	r0, #4
 8008bba:	e7f1      	b.n	8008ba0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008bbc:	f06f 0003 	mvn.w	r0, #3
 8008bc0:	e7ee      	b.n	8008ba0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bc2:	f06f 0004 	mvn.w	r0, #4
 8008bc6:	e7eb      	b.n	8008ba0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bc8:	f06f 0004 	mvn.w	r0, #4
 8008bcc:	e7e8      	b.n	8008ba0 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bce:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008bd2:	e7e5      	b.n	8008ba0 <OSPI_NOR_EnterDOPIMode+0xa8>
 8008bd4:	24003884 	.word	0x24003884
 8008bd8:	2400387c 	.word	0x2400387c

08008bdc <MX_OSPI_NOR_Init>:
{
 8008bdc:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <MX_OSPI_NOR_Init+0x4c>)
 8008be0:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 8008be2:	2304      	movs	r3, #4
 8008be4:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8008be6:	2300      	movs	r3, #0
 8008be8:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8008bea:	680a      	ldr	r2, [r1, #0]
 8008bec:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8008bee:	2202      	movs	r2, #2
 8008bf0:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8008bf2:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8008bf4:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8008bf6:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8008bf8:	684a      	ldr	r2, [r1, #4]
 8008bfa:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8008bfc:	688a      	ldr	r2, [r1, #8]
 8008bfe:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8008c00:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8008c02:	2308      	movs	r3, #8
 8008c04:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8008c06:	68cb      	ldr	r3, [r1, #12]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d005      	beq.n	8008c18 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008c10:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8008c12:	f002 fb63 	bl	800b2dc <HAL_OSPI_Init>
}
 8008c16:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8008c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c1c:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8008c1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c22:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008c24:	e7f5      	b.n	8008c12 <MX_OSPI_NOR_Init+0x36>
 8008c26:	bf00      	nop
 8008c28:	52005000 	.word	0x52005000

08008c2c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008c2c:	bb38      	cbnz	r0, 8008c7e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8008c32:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008c34:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008c38:	789b      	ldrb	r3, [r3, #2]
 8008c3a:	b983      	cbnz	r3, 8008c5e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8008c3c:	4b14      	ldr	r3, [pc, #80]	; (8008c90 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008c3e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008c42:	2201      	movs	r2, #1
 8008c44:	7859      	ldrb	r1, [r3, #1]
 8008c46:	4b13      	ldr	r3, [pc, #76]	; (8008c94 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 8008c48:	205c      	movs	r0, #92	; 0x5c
 8008c4a:	fb00 3004 	mla	r0, r0, r4, r3
 8008c4e:	f7fe ffb1 	bl	8007bb4 <MX25LM51245G_EnableMemoryMappedModeSTR>
 8008c52:	b9b8      	cbnz	r0, 8008c84 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8008c54:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008c56:	2202      	movs	r2, #2
 8008c58:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 8008c5c:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008c60:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008c64:	7859      	ldrb	r1, [r3, #1]
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 8008c68:	205c      	movs	r0, #92	; 0x5c
 8008c6a:	fb00 3004 	mla	r0, r0, r4, r3
 8008c6e:	f7ff f80d 	bl	8007c8c <MX25LM51245G_EnableMemoryMappedModeDTR>
 8008c72:	b950      	cbnz	r0, 8008c8a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8008c74:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008c76:	2202      	movs	r2, #2
 8008c78:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 8008c7c:	e7ee      	b.n	8008c5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 8008c7e:	f06f 0001 	mvn.w	r0, #1
}
 8008c82:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c84:	f06f 0004 	mvn.w	r0, #4
 8008c88:	e7e8      	b.n	8008c5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c8a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008c8e:	e7e5      	b.n	8008c5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 8008c90:	2400387c 	.word	0x2400387c
 8008c94:	24003884 	.word	0x24003884

08008c98 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008c98:	b990      	cbnz	r0, 8008cc0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8008ca0:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d10e      	bne.n	8008cc6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8008ca8:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 8008caa:	205c      	movs	r0, #92	; 0x5c
 8008cac:	fb00 3004 	mla	r0, r0, r4, r3
 8008cb0:	f002 facc 	bl	800b24c <HAL_OSPI_Abort>
 8008cb4:	b950      	cbnz	r0, 8008ccc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8008cb6:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 8008cbe:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008cc0:	f06f 0001 	mvn.w	r0, #1
}
 8008cc4:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8008cc6:	f06f 001a 	mvn.w	r0, #26
 8008cca:	e7f8      	b.n	8008cbe <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 8008ccc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008cd0:	e7f5      	b.n	8008cbe <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 8008cd2:	bf00      	nop
 8008cd4:	2400387c 	.word	0x2400387c
 8008cd8:	24003884 	.word	0x24003884

08008cdc <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008cdc:	bb08      	cbnz	r0, 8008d22 <BSP_OSPI_NOR_DeInit+0x46>
{
 8008cde:	b510      	push	{r4, lr}
 8008ce0:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8008ce2:	4b13      	ldr	r3, [pc, #76]	; (8008d30 <BSP_OSPI_NOR_DeInit+0x54>)
 8008ce4:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d013      	beq.n	8008d14 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8008cec:	4b10      	ldr	r3, [pc, #64]	; (8008d30 <BSP_OSPI_NOR_DeInit+0x54>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8008cf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cf8:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8008cfa:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <BSP_OSPI_NOR_DeInit+0x58>)
 8008cfe:	225c      	movs	r2, #92	; 0x5c
 8008d00:	fb02 3404 	mla	r4, r2, r4, r3
 8008d04:	4620      	mov	r0, r4
 8008d06:	f7ff fde3 	bl	80088d0 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f001 ffec 	bl	800ace8 <HAL_OSPI_DeInit>
 8008d10:	b950      	cbnz	r0, 8008d28 <BSP_OSPI_NOR_DeInit+0x4c>
}
 8008d12:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8008d14:	f7ff ffc0 	bl	8008c98 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d0e7      	beq.n	8008cec <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d1c:	f06f 0004 	mvn.w	r0, #4
 8008d20:	e7f7      	b.n	8008d12 <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8008d22:	f06f 0001 	mvn.w	r0, #1
}
 8008d26:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 8008d28:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008d2c:	e7f1      	b.n	8008d12 <BSP_OSPI_NOR_DeInit+0x36>
 8008d2e:	bf00      	nop
 8008d30:	2400387c 	.word	0x2400387c
 8008d34:	24003884 	.word	0x24003884

08008d38 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d141      	bne.n	8008dc0 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	460d      	mov	r5, r1
 8008d40:	4616      	mov	r6, r2
 8008d42:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8008d44:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008d46:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d03b      	beq.n	8008dc6 <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8008d4e:	4b1f      	ldr	r3, [pc, #124]	; (8008dcc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008d50:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008d54:	785b      	ldrb	r3, [r3, #1]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d00b      	beq.n	8008d72 <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8008d5a:	2901      	cmp	r1, #1
 8008d5c:	d025      	beq.n	8008daa <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 8008d5e:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8008d60:	4b1a      	ldr	r3, [pc, #104]	; (8008dcc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8008d68:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008d6c:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8008d6e:	70a6      	strb	r6, [r4, #2]
}
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8008d72:	2901      	cmp	r1, #1
 8008d74:	d105      	bne.n	8008d82 <BSP_OSPI_NOR_ConfigFlash+0x4a>
 8008d76:	4b15      	ldr	r3, [pc, #84]	; (8008dcc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008d78:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008d7c:	789b      	ldrb	r3, [r3, #2]
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01c      	beq.n	8008dbc <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8008d82:	4620      	mov	r0, r4
 8008d84:	f7ff fdf6 	bl	8008974 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	bf08      	it	eq
 8008d8c:	2d01      	cmpeq	r5, #1
 8008d8e:	d10f      	bne.n	8008db0 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8008d90:	4b0e      	ldr	r3, [pc, #56]	; (8008dcc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008d92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d96:	789b      	ldrb	r3, [r3, #2]
 8008d98:	b91b      	cbnz	r3, 8008da2 <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f7ff feac 	bl	8008af8 <OSPI_NOR_EnterDOPIMode>
 8008da0:	e006      	b.n	8008db0 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8008da2:	4620      	mov	r0, r4
 8008da4:	f7ff fe44 	bl	8008a30 <OSPI_NOR_EnterSOPIMode>
 8008da8:	e002      	b.n	8008db0 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8008daa:	b922      	cbnz	r2, 8008db6 <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8008dac:	f7ff fe40 	bl	8008a30 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d1dd      	bne.n	8008d70 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8008db4:	e7d4      	b.n	8008d60 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8008db6:	f7ff fe9f 	bl	8008af8 <OSPI_NOR_EnterDOPIMode>
 8008dba:	e7f9      	b.n	8008db0 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e7cf      	b.n	8008d60 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 8008dc0:	f06f 0001 	mvn.w	r0, #1
}
 8008dc4:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8008dc6:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8008dca:	e7d1      	b.n	8008d70 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8008dcc:	2400387c 	.word	0x2400387c

08008dd0 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d13f      	bne.n	8008e54 <BSP_OSPI_NOR_Init+0x84>
{
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	b08e      	sub	sp, #56	; 0x38
 8008dd8:	460d      	mov	r5, r1
 8008dda:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8008ddc:	4b23      	ldr	r3, [pc, #140]	; (8008e6c <BSP_OSPI_NOR_Init+0x9c>)
 8008dde:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008de2:	b113      	cbz	r3, 8008dea <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8008de4:	2000      	movs	r0, #0
}
 8008de6:	b00e      	add	sp, #56	; 0x38
 8008de8:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8008dea:	4e21      	ldr	r6, [pc, #132]	; (8008e70 <BSP_OSPI_NOR_Init+0xa0>)
 8008dec:	235c      	movs	r3, #92	; 0x5c
 8008dee:	fb03 6600 	mla	r6, r3, r0, r6
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff fc0e 	bl	8008614 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8008df8:	a805      	add	r0, sp, #20
 8008dfa:	f7fe fe43 	bl	8007a84 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8008e02:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e04:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008e08:	b313      	cbz	r3, 8008e50 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8008e0a:	fab3 f383 	clz	r3, r3
 8008e0e:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8008e14:	786b      	ldrb	r3, [r5, #1]
 8008e16:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8008e18:	a901      	add	r1, sp, #4
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7ff fede 	bl	8008bdc <MX_OSPI_NOR_Init>
 8008e20:	b9d8      	cbnz	r0, 8008e5a <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8008e22:	4620      	mov	r0, r4
 8008e24:	f7ff fd04 	bl	8008830 <OSPI_NOR_ResetMemory>
 8008e28:	b9d0      	cbnz	r0, 8008e60 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008e2a:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <BSP_OSPI_NOR_Init+0x9c>)
 8008e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e30:	789a      	ldrb	r2, [r3, #2]
 8008e32:	7859      	ldrb	r1, [r3, #1]
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7fe fe3e 	bl	8007ab6 <MX25LM51245G_AutoPollingMemReady>
 8008e3a:	b9a0      	cbnz	r0, 8008e66 <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8008e3c:	786a      	ldrb	r2, [r5, #1]
 8008e3e:	7829      	ldrb	r1, [r5, #0]
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff ff79 	bl	8008d38 <BSP_OSPI_NOR_ConfigFlash>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d0cd      	beq.n	8008de6 <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e4a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008e4e:	e7ca      	b.n	8008de6 <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 8008e50:	2320      	movs	r3, #32
 8008e52:	e7dc      	b.n	8008e0e <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 8008e54:	f06f 0001 	mvn.w	r0, #1
}
 8008e58:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 8008e5a:	f06f 0003 	mvn.w	r0, #3
 8008e5e:	e7c2      	b.n	8008de6 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e60:	f06f 0004 	mvn.w	r0, #4
 8008e64:	e7bf      	b.n	8008de6 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e66:	f06f 0004 	mvn.w	r0, #4
 8008e6a:	e7bc      	b.n	8008de6 <BSP_OSPI_NOR_Init+0x16>
 8008e6c:	2400387c 	.word	0x2400387c
 8008e70:	24003884 	.word	0x24003884

08008e74 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8008e74:	b510      	push	{r4, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8008e7e:	2370      	movs	r3, #112	; 0x70
 8008e80:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 8008e84:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <FT5336_Probe+0x70>)
 8008e86:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8008e88:	4b17      	ldr	r3, [pc, #92]	; (8008ee8 <FT5336_Probe+0x74>)
 8008e8a:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8008e8c:	4b17      	ldr	r3, [pc, #92]	; (8008eec <FT5336_Probe+0x78>)
 8008e8e:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8008e90:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <FT5336_Probe+0x7c>)
 8008e92:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8008e94:	4b17      	ldr	r3, [pc, #92]	; (8008ef4 <FT5336_Probe+0x80>)
 8008e96:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8008e98:	a902      	add	r1, sp, #8
 8008e9a:	4817      	ldr	r0, [pc, #92]	; (8008ef8 <FT5336_Probe+0x84>)
 8008e9c:	f7fe fd50 	bl	8007940 <FT5336_RegisterBusIO>
 8008ea0:	b998      	cbnz	r0, 8008eca <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8008ea2:	a901      	add	r1, sp, #4
 8008ea4:	4814      	ldr	r0, [pc, #80]	; (8008ef8 <FT5336_Probe+0x84>)
 8008ea6:	f7fe fc8d 	bl	80077c4 <FT5336_ReadID>
 8008eaa:	b988      	cbnz	r0, 8008ed0 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8008eac:	9b01      	ldr	r3, [sp, #4]
 8008eae:	2b51      	cmp	r3, #81	; 0x51
 8008eb0:	d111      	bne.n	8008ed6 <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8008eb2:	4811      	ldr	r0, [pc, #68]	; (8008ef8 <FT5336_Probe+0x84>)
 8008eb4:	4b11      	ldr	r3, [pc, #68]	; (8008efc <FT5336_Probe+0x88>)
 8008eb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8008eba:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <FT5336_Probe+0x8c>)
 8008ebc:	4a11      	ldr	r2, [pc, #68]	; (8008f04 <FT5336_Probe+0x90>)
 8008ebe:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4798      	blx	r3
 8008ec4:	b950      	cbnz	r0, 8008edc <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8008ec6:	b008      	add	sp, #32
 8008ec8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 8008eca:	f06f 0007 	mvn.w	r0, #7
 8008ece:	e7fa      	b.n	8008ec6 <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ed0:	f06f 0004 	mvn.w	r0, #4
 8008ed4:	e7f7      	b.n	8008ec6 <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ed6:	f06f 0006 	mvn.w	r0, #6
 8008eda:	e7f4      	b.n	8008ec6 <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008edc:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008ee0:	e7f1      	b.n	8008ec6 <FT5336_Probe+0x52>
 8008ee2:	bf00      	nop
 8008ee4:	08008555 	.word	0x08008555
 8008ee8:	080084e5 	.word	0x080084e5
 8008eec:	080085dd 	.word	0x080085dd
 8008ef0:	080085ad 	.word	0x080085ad
 8008ef4:	0800860d 	.word	0x0800860d
 8008ef8:	240038e0 	.word	0x240038e0
 8008efc:	24003908 	.word	0x24003908
 8008f00:	24000040 	.word	0x24000040
 8008f04:	2400392c 	.word	0x2400392c

08008f08 <BSP_TS_Init>:
{
 8008f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f0a:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d150      	bne.n	8008fb2 <BSP_TS_Init+0xaa>
 8008f10:	460c      	mov	r4, r1
 8008f12:	4605      	mov	r5, r0
 8008f14:	680b      	ldr	r3, [r1, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d04e      	beq.n	8008fb8 <BSP_TS_Init+0xb0>
 8008f1a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8008f1e:	d84e      	bhi.n	8008fbe <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008f20:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	d04e      	beq.n	8008fc4 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008f26:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8008f2a:	d84e      	bhi.n	8008fca <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8008f2c:	68c9      	ldr	r1, [r1, #12]
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	bf28      	it	cs
 8008f32:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008f34:	4299      	cmp	r1, r3
 8008f36:	d84b      	bhi.n	8008fd0 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8008f38:	f7ff ff9c 	bl	8008e74 <FT5336_Probe>
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d149      	bne.n	8008fd6 <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8008f42:	6820      	ldr	r0, [r4, #0]
 8008f44:	4925      	ldr	r1, [pc, #148]	; (8008fdc <BSP_TS_Init+0xd4>)
 8008f46:	016a      	lsls	r2, r5, #5
 8008f48:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 8008f4c:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8008f4e:	6862      	ldr	r2, [r4, #4]
 8008f50:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8008f52:	68a2      	ldr	r2, [r4, #8]
 8008f54:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8008f56:	68e2      	ldr	r2, [r4, #12]
 8008f58:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008f5a:	4b21      	ldr	r3, [pc, #132]	; (8008fe0 <BSP_TS_Init+0xd8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	a901      	add	r1, sp, #4
 8008f62:	4a20      	ldr	r2, [pc, #128]	; (8008fe4 <BSP_TS_Init+0xdc>)
 8008f64:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8008f68:	4798      	blx	r3
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	db1e      	blt.n	8008fac <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8008f6e:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <BSP_TS_Init+0xd4>)
 8008f70:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8008f74:	9a02      	ldr	r2, [sp, #8]
 8008f76:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8008f78:	9a03      	ldr	r2, [sp, #12]
 8008f7a:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8008f7c:	462b      	mov	r3, r5
 8008f7e:	b113      	cbz	r3, 8008f86 <BSP_TS_Init+0x7e>
}
 8008f80:	4630      	mov	r0, r6
 8008f82:	b005      	add	sp, #20
 8008f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	68e1      	ldr	r1, [r4, #12]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	3201      	adds	r2, #1
 8008f8e:	4913      	ldr	r1, [pc, #76]	; (8008fdc <BSP_TS_Init+0xd4>)
 8008f90:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 8008f94:	3006      	adds	r0, #6
 8008f96:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	68e7      	ldr	r7, [r4, #12]
 8008f9e:	443a      	add	r2, r7
 8008fa0:	3201      	adds	r2, #1
 8008fa2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008fa6:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8008fa8:	3301      	adds	r3, #1
 8008faa:	e7e8      	b.n	8008f7e <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fac:	f06f 0604 	mvn.w	r6, #4
 8008fb0:	e7e6      	b.n	8008f80 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 8008fb2:	f06f 0601 	mvn.w	r6, #1
 8008fb6:	e7e3      	b.n	8008f80 <BSP_TS_Init+0x78>
 8008fb8:	f06f 0601 	mvn.w	r6, #1
 8008fbc:	e7e0      	b.n	8008f80 <BSP_TS_Init+0x78>
 8008fbe:	f06f 0601 	mvn.w	r6, #1
 8008fc2:	e7dd      	b.n	8008f80 <BSP_TS_Init+0x78>
 8008fc4:	f06f 0601 	mvn.w	r6, #1
 8008fc8:	e7da      	b.n	8008f80 <BSP_TS_Init+0x78>
 8008fca:	f06f 0601 	mvn.w	r6, #1
 8008fce:	e7d7      	b.n	8008f80 <BSP_TS_Init+0x78>
 8008fd0:	f06f 0601 	mvn.w	r6, #1
 8008fd4:	e7d4      	b.n	8008f80 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 8008fd6:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 8008fda:	e7d1      	b.n	8008f80 <BSP_TS_Init+0x78>
 8008fdc:	2400390c 	.word	0x2400390c
 8008fe0:	2400392c 	.word	0x2400392c
 8008fe4:	24003908 	.word	0x24003908

08008fe8 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d178      	bne.n	80090de <BSP_TS_GetState+0xf6>
{
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8008ff4:	4b3b      	ldr	r3, [pc, #236]	; (80090e4 <BSP_TS_GetState+0xfc>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	a901      	add	r1, sp, #4
 8008ffc:	4a3a      	ldr	r2, [pc, #232]	; (80090e8 <BSP_TS_GetState+0x100>)
 8008ffe:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8009002:	4798      	blx	r3
 8009004:	2800      	cmp	r0, #0
 8009006:	db66      	blt.n	80090d6 <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 8009008:	9e01      	ldr	r6, [sp, #4]
 800900a:	2e00      	cmp	r6, #0
 800900c:	d059      	beq.n	80090c2 <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 800900e:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 8009010:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8009012:	4b36      	ldr	r3, [pc, #216]	; (80090ec <BSP_TS_GetState+0x104>)
 8009014:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8009018:	6899      	ldr	r1, [r3, #8]
 800901a:	f011 0f08 	tst.w	r1, #8
 800901e:	d141      	bne.n	80090a4 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 8009020:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 8009022:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8009024:	f011 0f02 	tst.w	r1, #2
 8009028:	d005      	beq.n	8009036 <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800902a:	4b30      	ldr	r3, [pc, #192]	; (80090ec <BSP_TS_GetState+0x104>)
 800902c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8009036:	f011 0f04 	tst.w	r1, #4
 800903a:	d005      	beq.n	8009048 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800903c:	4a2b      	ldr	r2, [pc, #172]	; (80090ec <BSP_TS_GetState+0x104>)
 800903e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 8009042:	6952      	ldr	r2, [r2, #20]
 8009044:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8009048:	4a28      	ldr	r2, [pc, #160]	; (80090ec <BSP_TS_GetState+0x104>)
 800904a:	0168      	lsls	r0, r5, #5
 800904c:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 8009050:	5810      	ldr	r0, [r2, r0]
 8009052:	fb00 f303 	mul.w	r3, r0, r3
 8009056:	690a      	ldr	r2, [r1, #16]
 8009058:	fbb3 f3f2 	udiv	r3, r3, r2
 800905c:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800905e:	684a      	ldr	r2, [r1, #4]
 8009060:	fb0c f202 	mul.w	r2, ip, r2
 8009064:	6948      	ldr	r0, [r1, #20]
 8009066:	fbb2 f2f0 	udiv	r2, r2, r0
 800906a:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 800906c:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800906e:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8009070:	4283      	cmp	r3, r0
 8009072:	d91a      	bls.n	80090aa <BSP_TS_GetState+0xc2>
 8009074:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8009076:	491d      	ldr	r1, [pc, #116]	; (80090ec <BSP_TS_GetState+0x104>)
 8009078:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800907c:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800907e:	428a      	cmp	r2, r1
 8009080:	d915      	bls.n	80090ae <BSP_TS_GetState+0xc6>
 8009082:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8009084:	4919      	ldr	r1, [pc, #100]	; (80090ec <BSP_TS_GetState+0x104>)
 8009086:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800908a:	68c9      	ldr	r1, [r1, #12]
 800908c:	42b1      	cmp	r1, r6
 800908e:	d301      	bcc.n	8009094 <BSP_TS_GetState+0xac>
 8009090:	4291      	cmp	r1, r2
 8009092:	d20e      	bcs.n	80090b2 <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8009094:	4a15      	ldr	r2, [pc, #84]	; (80090ec <BSP_TS_GetState+0x104>)
 8009096:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 800909a:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800909c:	68a3      	ldr	r3, [r4, #8]
 800909e:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 80090a0:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80090a2:	e01a      	b.n	80090da <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 80090a4:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 80090a6:	4603      	mov	r3, r0
 80090a8:	e7bc      	b.n	8009024 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80090aa:	1ac6      	subs	r6, r0, r3
 80090ac:	e7e3      	b.n	8009076 <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80090ae:	1a8a      	subs	r2, r1, r2
 80090b0:	e7e8      	b.n	8009084 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80090b2:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80090b4:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <BSP_TS_GetState+0x104>)
 80090b6:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 80090ba:	69eb      	ldr	r3, [r5, #28]
 80090bc:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 80090be:	2000      	movs	r0, #0
 80090c0:	e00b      	b.n	80090da <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 80090c2:	2000      	movs	r0, #0
 80090c4:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <BSP_TS_GetState+0x104>)
 80090c8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 80090cc:	69ab      	ldr	r3, [r5, #24]
 80090ce:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80090d0:	69eb      	ldr	r3, [r5, #28]
 80090d2:	60a3      	str	r3, [r4, #8]
 80090d4:	e001      	b.n	80090da <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80090d6:	f06f 0004 	mvn.w	r0, #4
}
 80090da:	b004      	add	sp, #16
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80090de:	f06f 0001 	mvn.w	r0, #1
}
 80090e2:	4770      	bx	lr
 80090e4:	2400392c 	.word	0x2400392c
 80090e8:	24003908 	.word	0x24003908
 80090ec:	2400390c 	.word	0x2400390c

080090f0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80090f0:	4a18      	ldr	r2, [pc, #96]	; (8009154 <SystemInit+0x64>)
 80090f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80090f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80090fe:	4b16      	ldr	r3, [pc, #88]	; (8009158 <SystemInit+0x68>)
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	f042 0201 	orr.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009108:	2200      	movs	r2, #0
 800910a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	4913      	ldr	r1, [pc, #76]	; (800915c <SystemInit+0x6c>)
 8009110:	4001      	ands	r1, r0
 8009112:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8009114:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8009116:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8009118:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800911a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800911c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800911e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8009122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009124:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8009126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009128:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800912a:	6819      	ldr	r1, [r3, #0]
 800912c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009130:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009132:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009134:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <SystemInit+0x70>)
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <SystemInit+0x74>)
 800913a:	4013      	ands	r3, r2
 800913c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009140:	d203      	bcs.n	800914a <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009142:	4b09      	ldr	r3, [pc, #36]	; (8009168 <SystemInit+0x78>)
 8009144:	2201      	movs	r2, #1
 8009146:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800914a:	4b02      	ldr	r3, [pc, #8]	; (8009154 <SystemInit+0x64>)
 800914c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009150:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009152:	4770      	bx	lr
 8009154:	e000ed00 	.word	0xe000ed00
 8009158:	58024400 	.word	0x58024400
 800915c:	eaf6ed7f 	.word	0xeaf6ed7f
 8009160:	5c001000 	.word	0x5c001000
 8009164:	ffff0000 	.word	0xffff0000
 8009168:	51008000 	.word	0x51008000

0800916c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800916c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800916e:	2003      	movs	r0, #3
 8009170:	f000 f850 	bl	8009214 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009174:	f002 fc92 	bl	800ba9c <HAL_RCC_GetSysClockFreq>
 8009178:	490f      	ldr	r1, [pc, #60]	; (80091b8 <HAL_Init+0x4c>)
 800917a:	698b      	ldr	r3, [r1, #24]
 800917c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009180:	4a0e      	ldr	r2, [pc, #56]	; (80091bc <HAL_Init+0x50>)
 8009182:	5cd3      	ldrb	r3, [r2, r3]
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800918a:	698b      	ldr	r3, [r1, #24]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	5cd3      	ldrb	r3, [r2, r3]
 8009192:	f003 031f 	and.w	r3, r3, #31
 8009196:	fa20 f303 	lsr.w	r3, r0, r3
 800919a:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <HAL_Init+0x54>)
 800919c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <HAL_Init+0x58>)
 80091a0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80091a2:	2001      	movs	r0, #1
 80091a4:	f7fa f846 	bl	8003234 <HAL_InitTick>
 80091a8:	b110      	cbz	r0, 80091b0 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80091aa:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80091ac:	4620      	mov	r0, r4
 80091ae:	bd10      	pop	{r4, pc}
 80091b0:	4604      	mov	r4, r0
  HAL_MspInit();
 80091b2:	f7f9 fdf3 	bl	8002d9c <HAL_MspInit>
  return HAL_OK;
 80091b6:	e7f9      	b.n	80091ac <HAL_Init+0x40>
 80091b8:	58024400 	.word	0x58024400
 80091bc:	08023370 	.word	0x08023370
 80091c0:	24000074 	.word	0x24000074
 80091c4:	24000070 	.word	0x24000070

080091c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80091c8:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <HAL_IncTick+0x10>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	4a03      	ldr	r2, [pc, #12]	; (80091dc <HAL_IncTick+0x14>)
 80091ce:	6811      	ldr	r1, [r2, #0]
 80091d0:	440b      	add	r3, r1
 80091d2:	6013      	str	r3, [r2, #0]
}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	24000078 	.word	0x24000078
 80091dc:	24003930 	.word	0x24003930

080091e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80091e0:	4b01      	ldr	r3, [pc, #4]	; (80091e8 <HAL_GetTick+0x8>)
 80091e2:	6818      	ldr	r0, [r3, #0]
}
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	24003930 	.word	0x24003930

080091ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80091f0:	f7ff fff6 	bl	80091e0 <HAL_GetTick>
 80091f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80091fa:	d002      	beq.n	8009202 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80091fc:	4b04      	ldr	r3, [pc, #16]	; (8009210 <HAL_Delay+0x24>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009202:	f7ff ffed 	bl	80091e0 <HAL_GetTick>
 8009206:	1b40      	subs	r0, r0, r5
 8009208:	42a0      	cmp	r0, r4
 800920a:	d3fa      	bcc.n	8009202 <HAL_Delay+0x16>
  {
  }
}
 800920c:	bd38      	pop	{r3, r4, r5, pc}
 800920e:	bf00      	nop
 8009210:	24000078 	.word	0x24000078

08009214 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009214:	4906      	ldr	r1, [pc, #24]	; (8009230 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8009216:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009218:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009220:	0200      	lsls	r0, r0, #8
 8009222:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009226:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8009228:	4a02      	ldr	r2, [pc, #8]	; (8009234 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800922a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800922c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800922e:	4770      	bx	lr
 8009230:	e000ed00 	.word	0xe000ed00
 8009234:	05fa0000 	.word	0x05fa0000

08009238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009238:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800923a:	4b17      	ldr	r3, [pc, #92]	; (8009298 <HAL_NVIC_SetPriority+0x60>)
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009242:	f1c3 0c07 	rsb	ip, r3, #7
 8009246:	f1bc 0f04 	cmp.w	ip, #4
 800924a:	bf28      	it	cs
 800924c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009250:	f103 0e04 	add.w	lr, r3, #4
 8009254:	f1be 0f06 	cmp.w	lr, #6
 8009258:	d914      	bls.n	8009284 <HAL_NVIC_SetPriority+0x4c>
 800925a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800925c:	f04f 3eff 	mov.w	lr, #4294967295
 8009260:	fa0e fc0c 	lsl.w	ip, lr, ip
 8009264:	ea21 010c 	bic.w	r1, r1, ip
 8009268:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800926a:	fa0e f303 	lsl.w	r3, lr, r3
 800926e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009272:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8009274:	2800      	cmp	r0, #0
 8009276:	db07      	blt.n	8009288 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009278:	0109      	lsls	r1, r1, #4
 800927a:	b2c9      	uxtb	r1, r1
 800927c:	4b07      	ldr	r3, [pc, #28]	; (800929c <HAL_NVIC_SetPriority+0x64>)
 800927e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009280:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009284:	2300      	movs	r3, #0
 8009286:	e7e9      	b.n	800925c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009288:	f000 000f 	and.w	r0, r0, #15
 800928c:	0109      	lsls	r1, r1, #4
 800928e:	b2c9      	uxtb	r1, r1
 8009290:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <HAL_NVIC_SetPriority+0x68>)
 8009292:	5419      	strb	r1, [r3, r0]
 8009294:	e7f4      	b.n	8009280 <HAL_NVIC_SetPriority+0x48>
 8009296:	bf00      	nop
 8009298:	e000ed00 	.word	0xe000ed00
 800929c:	e000e400 	.word	0xe000e400
 80092a0:	e000ed14 	.word	0xe000ed14

080092a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80092a4:	2800      	cmp	r0, #0
 80092a6:	db07      	blt.n	80092b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092a8:	f000 021f 	and.w	r2, r0, #31
 80092ac:	0940      	lsrs	r0, r0, #5
 80092ae:	2301      	movs	r3, #1
 80092b0:	4093      	lsls	r3, r2
 80092b2:	4a02      	ldr	r2, [pc, #8]	; (80092bc <HAL_NVIC_EnableIRQ+0x18>)
 80092b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	e000e100 	.word	0xe000e100

080092c0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80092c0:	2800      	cmp	r0, #0
 80092c2:	db0c      	blt.n	80092de <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092c4:	f000 021f 	and.w	r2, r0, #31
 80092c8:	0940      	lsrs	r0, r0, #5
 80092ca:	2301      	movs	r3, #1
 80092cc:	4093      	lsls	r3, r2
 80092ce:	3020      	adds	r0, #32
 80092d0:	4a03      	ldr	r2, [pc, #12]	; (80092e0 <HAL_NVIC_DisableIRQ+0x20>)
 80092d2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80092d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80092da:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80092de:	4770      	bx	lr
 80092e0:	e000e100 	.word	0xe000e100

080092e4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80092e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80092e8:	4b04      	ldr	r3, [pc, #16]	; (80092fc <HAL_MPU_Disable+0x18>)
 80092ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80092f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	e000ed00 	.word	0xe000ed00

08009300 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009300:	f040 0001 	orr.w	r0, r0, #1
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <HAL_MPU_Enable+0x1c>)
 8009306:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800930a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800930c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009310:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009312:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009316:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800931a:	4770      	bx	lr
 800931c:	e000ed00 	.word	0xe000ed00

08009320 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009320:	7842      	ldrb	r2, [r0, #1]
 8009322:	4b16      	ldr	r3, [pc, #88]	; (800937c <HAL_MPU_ConfigRegion+0x5c>)
 8009324:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8009328:	7803      	ldrb	r3, [r0, #0]
 800932a:	b1fb      	cbz	r3, 800936c <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800932c:	6843      	ldr	r3, [r0, #4]
 800932e:	4a13      	ldr	r2, [pc, #76]	; (800937c <HAL_MPU_ConfigRegion+0x5c>)
 8009330:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009334:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009336:	7ac3      	ldrb	r3, [r0, #11]
 8009338:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800933a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800933e:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009340:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009344:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009346:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800934a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800934c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009350:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009356:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009358:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800935c:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800935e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009362:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009364:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009366:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800936a:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800936c:	4b03      	ldr	r3, [pc, #12]	; (800937c <HAL_MPU_ConfigRegion+0x5c>)
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8009374:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	e000ed00 	.word	0xe000ed00

08009380 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009380:	2800      	cmp	r0, #0
 8009382:	d038      	beq.n	80093f6 <HAL_CRC_Init+0x76>
{
 8009384:	b510      	push	{r4, lr}
 8009386:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009388:	7f43      	ldrb	r3, [r0, #29]
 800938a:	b31b      	cbz	r3, 80093d4 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800938c:	2302      	movs	r3, #2
 800938e:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009390:	7923      	ldrb	r3, [r4, #4]
 8009392:	bb1b      	cbnz	r3, 80093dc <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	4a19      	ldr	r2, [pc, #100]	; (80093fc <HAL_CRC_Init+0x7c>)
 8009398:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800939a:	6822      	ldr	r2, [r4, #0]
 800939c:	6893      	ldr	r3, [r2, #8]
 800939e:	f023 0318 	bic.w	r3, r3, #24
 80093a2:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80093a4:	7963      	ldrb	r3, [r4, #5]
 80093a6:	bb13      	cbnz	r3, 80093ee <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	f04f 32ff 	mov.w	r2, #4294967295
 80093ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80093b0:	6822      	ldr	r2, [r4, #0]
 80093b2:	6893      	ldr	r3, [r2, #8]
 80093b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80093b8:	6961      	ldr	r1, [r4, #20]
 80093ba:	430b      	orrs	r3, r1
 80093bc:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	6893      	ldr	r3, [r2, #8]
 80093c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093c6:	69a1      	ldr	r1, [r4, #24]
 80093c8:	430b      	orrs	r3, r1
 80093ca:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80093cc:	2301      	movs	r3, #1
 80093ce:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80093d0:	2000      	movs	r0, #0
}
 80093d2:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80093d4:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80093d6:	f7f9 fcfb 	bl	8002dd0 <HAL_CRC_MspInit>
 80093da:	e7d7      	b.n	800938c <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80093dc:	68e2      	ldr	r2, [r4, #12]
 80093de:	68a1      	ldr	r1, [r4, #8]
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 f80d 	bl	8009400 <HAL_CRCEx_Polynomial_Set>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0dc      	beq.n	80093a4 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80093ea:	2001      	movs	r0, #1
 80093ec:	e7f1      	b.n	80093d2 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	6922      	ldr	r2, [r4, #16]
 80093f2:	611a      	str	r2, [r3, #16]
 80093f4:	e7dc      	b.n	80093b0 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 80093f6:	2001      	movs	r0, #1
}
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	04c11db7 	.word	0x04c11db7

08009400 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009400:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009402:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009404:	461c      	mov	r4, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	b134      	cbz	r4, 8009418 <HAL_CRCEx_Polynomial_Set+0x18>
 800940a:	f003 0c1f 	and.w	ip, r3, #31
 800940e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8009412:	f01c 0f01 	tst.w	ip, #1
 8009416:	d0f5      	beq.n	8009404 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8009418:	2a18      	cmp	r2, #24
 800941a:	d822      	bhi.n	8009462 <HAL_CRCEx_Polynomial_Set+0x62>
 800941c:	e8df f002 	tbb	[pc, r2]
 8009420:	2121210f 	.word	0x2121210f
 8009424:	21212121 	.word	0x21212121
 8009428:	2121211d 	.word	0x2121211d
 800942c:	21212121 	.word	0x21212121
 8009430:	21212119 	.word	0x21212119
 8009434:	21212121 	.word	0x21212121
 8009438:	0d          	.byte	0x0d
 8009439:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800943a:	2b06      	cmp	r3, #6
 800943c:	d815      	bhi.n	800946a <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800943e:	6803      	ldr	r3, [r0, #0]
 8009440:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009442:	6801      	ldr	r1, [r0, #0]
 8009444:	688b      	ldr	r3, [r1, #8]
 8009446:	f023 0318 	bic.w	r3, r3, #24
 800944a:	431a      	orrs	r2, r3
 800944c:	608a      	str	r2, [r1, #8]
 800944e:	2000      	movs	r0, #0
 8009450:	e008      	b.n	8009464 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8009452:	2b07      	cmp	r3, #7
 8009454:	d9f3      	bls.n	800943e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8009456:	2001      	movs	r0, #1
 8009458:	e004      	b.n	8009464 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 800945a:	2b0f      	cmp	r3, #15
 800945c:	d9ef      	bls.n	800943e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800945e:	2001      	movs	r0, #1
 8009460:	e000      	b.n	8009464 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8009462:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8009464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009468:	4770      	bx	lr
        status =   HAL_ERROR;
 800946a:	2001      	movs	r0, #1
 800946c:	e7fa      	b.n	8009464 <HAL_CRCEx_Polynomial_Set+0x64>
	...

08009470 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009470:	2800      	cmp	r0, #0
 8009472:	f000 8129 	beq.w	80096c8 <HAL_DMA_Abort_IT+0x258>
{
 8009476:	b508      	push	{r3, lr}
 8009478:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800947a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b02      	cmp	r3, #2
 8009482:	d003      	beq.n	800948c <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009484:	2380      	movs	r3, #128	; 0x80
 8009486:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8009488:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800948a:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800948c:	6803      	ldr	r3, [r0, #0]
 800948e:	4890      	ldr	r0, [pc, #576]	; (80096d0 <HAL_DMA_Abort_IT+0x260>)
 8009490:	4990      	ldr	r1, [pc, #576]	; (80096d4 <HAL_DMA_Abort_IT+0x264>)
 8009492:	428b      	cmp	r3, r1
 8009494:	bf18      	it	ne
 8009496:	4283      	cmpne	r3, r0
 8009498:	bf0c      	ite	eq
 800949a:	2101      	moveq	r1, #1
 800949c:	2100      	movne	r1, #0
 800949e:	d066      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094a0:	3030      	adds	r0, #48	; 0x30
 80094a2:	4283      	cmp	r3, r0
 80094a4:	d063      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094a6:	3018      	adds	r0, #24
 80094a8:	4283      	cmp	r3, r0
 80094aa:	d060      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094ac:	3018      	adds	r0, #24
 80094ae:	4283      	cmp	r3, r0
 80094b0:	d05d      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094b2:	3018      	adds	r0, #24
 80094b4:	4283      	cmp	r3, r0
 80094b6:	d05a      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094b8:	3018      	adds	r0, #24
 80094ba:	4283      	cmp	r3, r0
 80094bc:	d057      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094be:	3018      	adds	r0, #24
 80094c0:	4283      	cmp	r3, r0
 80094c2:	d054      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094c4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80094c8:	4283      	cmp	r3, r0
 80094ca:	d050      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094cc:	3018      	adds	r0, #24
 80094ce:	4283      	cmp	r3, r0
 80094d0:	d04d      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094d2:	3018      	adds	r0, #24
 80094d4:	4283      	cmp	r3, r0
 80094d6:	d04a      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094d8:	3018      	adds	r0, #24
 80094da:	4283      	cmp	r3, r0
 80094dc:	d047      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094de:	3018      	adds	r0, #24
 80094e0:	4283      	cmp	r3, r0
 80094e2:	d044      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094e4:	3018      	adds	r0, #24
 80094e6:	4283      	cmp	r3, r0
 80094e8:	d041      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094ea:	3018      	adds	r0, #24
 80094ec:	4283      	cmp	r3, r0
 80094ee:	d03e      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
 80094f0:	3018      	adds	r0, #24
 80094f2:	4283      	cmp	r3, r0
 80094f4:	d03b      	beq.n	800956e <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80094f6:	6819      	ldr	r1, [r3, #0]
 80094f8:	f021 010e 	bic.w	r1, r1, #14
 80094fc:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 80094fe:	6813      	ldr	r3, [r2, #0]
 8009500:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8009504:	4973      	ldr	r1, [pc, #460]	; (80096d4 <HAL_DMA_Abort_IT+0x264>)
 8009506:	428b      	cmp	r3, r1
 8009508:	bf18      	it	ne
 800950a:	4283      	cmpne	r3, r0
 800950c:	d06a      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 800950e:	4972      	ldr	r1, [pc, #456]	; (80096d8 <HAL_DMA_Abort_IT+0x268>)
 8009510:	428b      	cmp	r3, r1
 8009512:	d067      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009514:	3118      	adds	r1, #24
 8009516:	428b      	cmp	r3, r1
 8009518:	d064      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 800951a:	3118      	adds	r1, #24
 800951c:	428b      	cmp	r3, r1
 800951e:	d061      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009520:	3118      	adds	r1, #24
 8009522:	428b      	cmp	r3, r1
 8009524:	d05e      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009526:	3118      	adds	r1, #24
 8009528:	428b      	cmp	r3, r1
 800952a:	d05b      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 800952c:	3118      	adds	r1, #24
 800952e:	428b      	cmp	r3, r1
 8009530:	d058      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009532:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8009536:	428b      	cmp	r3, r1
 8009538:	d054      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 800953a:	3118      	adds	r1, #24
 800953c:	428b      	cmp	r3, r1
 800953e:	d051      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009540:	3118      	adds	r1, #24
 8009542:	428b      	cmp	r3, r1
 8009544:	d04e      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009546:	3118      	adds	r1, #24
 8009548:	428b      	cmp	r3, r1
 800954a:	d04b      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 800954c:	3118      	adds	r1, #24
 800954e:	428b      	cmp	r3, r1
 8009550:	d048      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009552:	3118      	adds	r1, #24
 8009554:	428b      	cmp	r3, r1
 8009556:	d045      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009558:	3118      	adds	r1, #24
 800955a:	428b      	cmp	r3, r1
 800955c:	d042      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 800955e:	3118      	adds	r1, #24
 8009560:	428b      	cmp	r3, r1
 8009562:	d03f      	beq.n	80095e4 <HAL_DMA_Abort_IT+0x174>
 8009564:	6819      	ldr	r1, [r3, #0]
 8009566:	f021 0101 	bic.w	r1, r1, #1
 800956a:	6019      	str	r1, [r3, #0]
 800956c:	e03e      	b.n	80095ec <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 800956e:	2004      	movs	r0, #4
 8009570:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009574:	bb81      	cbnz	r1, 80095d8 <HAL_DMA_Abort_IT+0x168>
 8009576:	4a58      	ldr	r2, [pc, #352]	; (80096d8 <HAL_DMA_Abort_IT+0x268>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d02d      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 800957c:	3218      	adds	r2, #24
 800957e:	4293      	cmp	r3, r2
 8009580:	d02a      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 8009582:	3218      	adds	r2, #24
 8009584:	4293      	cmp	r3, r2
 8009586:	d027      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 8009588:	3218      	adds	r2, #24
 800958a:	4293      	cmp	r3, r2
 800958c:	d024      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 800958e:	3218      	adds	r2, #24
 8009590:	4293      	cmp	r3, r2
 8009592:	d021      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 8009594:	3218      	adds	r2, #24
 8009596:	4293      	cmp	r3, r2
 8009598:	d01e      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 800959a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800959e:	4293      	cmp	r3, r2
 80095a0:	d01a      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 80095a2:	3218      	adds	r2, #24
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d017      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 80095a8:	3218      	adds	r2, #24
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d014      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 80095ae:	3218      	adds	r2, #24
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d011      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 80095b4:	3218      	adds	r2, #24
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00e      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 80095ba:	3218      	adds	r2, #24
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00b      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 80095c0:	3218      	adds	r2, #24
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d008      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 80095c6:	3218      	adds	r2, #24
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d005      	beq.n	80095d8 <HAL_DMA_Abort_IT+0x168>
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	f022 0201 	bic.w	r2, r2, #1
 80095d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80095d4:	2000      	movs	r0, #0
 80095d6:	e758      	b.n	800948a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	f022 0201 	bic.w	r2, r2, #1
 80095de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80095e0:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 80095e2:	e752      	b.n	800948a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80095e4:	6819      	ldr	r1, [r3, #0]
 80095e6:	f021 0101 	bic.w	r1, r1, #1
 80095ea:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095ec:	6813      	ldr	r3, [r2, #0]
 80095ee:	4838      	ldr	r0, [pc, #224]	; (80096d0 <HAL_DMA_Abort_IT+0x260>)
 80095f0:	4938      	ldr	r1, [pc, #224]	; (80096d4 <HAL_DMA_Abort_IT+0x264>)
 80095f2:	428b      	cmp	r3, r1
 80095f4:	bf18      	it	ne
 80095f6:	4283      	cmpne	r3, r0
 80095f8:	d042      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 80095fa:	3118      	adds	r1, #24
 80095fc:	428b      	cmp	r3, r1
 80095fe:	d03f      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009600:	3118      	adds	r1, #24
 8009602:	428b      	cmp	r3, r1
 8009604:	d03c      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009606:	3118      	adds	r1, #24
 8009608:	428b      	cmp	r3, r1
 800960a:	d039      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 800960c:	3118      	adds	r1, #24
 800960e:	428b      	cmp	r3, r1
 8009610:	d036      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009612:	3118      	adds	r1, #24
 8009614:	428b      	cmp	r3, r1
 8009616:	d033      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009618:	3118      	adds	r1, #24
 800961a:	428b      	cmp	r3, r1
 800961c:	d030      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 800961e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8009622:	428b      	cmp	r3, r1
 8009624:	d02c      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009626:	3118      	adds	r1, #24
 8009628:	428b      	cmp	r3, r1
 800962a:	d029      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 800962c:	3118      	adds	r1, #24
 800962e:	428b      	cmp	r3, r1
 8009630:	d026      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009632:	3118      	adds	r1, #24
 8009634:	428b      	cmp	r3, r1
 8009636:	d023      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009638:	3118      	adds	r1, #24
 800963a:	428b      	cmp	r3, r1
 800963c:	d020      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 800963e:	3118      	adds	r1, #24
 8009640:	428b      	cmp	r3, r1
 8009642:	d01d      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009644:	3118      	adds	r1, #24
 8009646:	428b      	cmp	r3, r1
 8009648:	d01a      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 800964a:	3118      	adds	r1, #24
 800964c:	428b      	cmp	r3, r1
 800964e:	d017      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009650:	4922      	ldr	r1, [pc, #136]	; (80096dc <HAL_DMA_Abort_IT+0x26c>)
 8009652:	428b      	cmp	r3, r1
 8009654:	d014      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009656:	3114      	adds	r1, #20
 8009658:	428b      	cmp	r3, r1
 800965a:	d011      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 800965c:	3114      	adds	r1, #20
 800965e:	428b      	cmp	r3, r1
 8009660:	d00e      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009662:	3114      	adds	r1, #20
 8009664:	428b      	cmp	r3, r1
 8009666:	d00b      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009668:	3114      	adds	r1, #20
 800966a:	428b      	cmp	r3, r1
 800966c:	d008      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 800966e:	3114      	adds	r1, #20
 8009670:	428b      	cmp	r3, r1
 8009672:	d005      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 8009674:	3114      	adds	r1, #20
 8009676:	428b      	cmp	r3, r1
 8009678:	d002      	beq.n	8009680 <HAL_DMA_Abort_IT+0x210>
 800967a:	3114      	adds	r1, #20
 800967c:	428b      	cmp	r3, r1
 800967e:	d117      	bne.n	80096b0 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009680:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8009682:	680b      	ldr	r3, [r1, #0]
 8009684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009688:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800968a:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800968c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800968e:	f003 011f 	and.w	r1, r3, #31
 8009692:	2301      	movs	r3, #1
 8009694:	408b      	lsls	r3, r1
 8009696:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009698:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800969a:	6e91      	ldr	r1, [r2, #104]	; 0x68
 800969c:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800969e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80096a0:	b133      	cbz	r3, 80096b0 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80096a2:	6819      	ldr	r1, [r3, #0]
 80096a4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80096a8:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096aa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80096ac:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80096ae:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80096b0:	2301      	movs	r3, #1
 80096b2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80096b6:	2300      	movs	r3, #0
 80096b8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80096bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80096be:	b12b      	cbz	r3, 80096cc <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
  return HAL_OK;
 80096c4:	2000      	movs	r0, #0
 80096c6:	e6e0      	b.n	800948a <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 80096c8:	2001      	movs	r0, #1
}
 80096ca:	4770      	bx	lr
  return HAL_OK;
 80096cc:	2000      	movs	r0, #0
 80096ce:	e6dc      	b.n	800948a <HAL_DMA_Abort_IT+0x1a>
 80096d0:	40020010 	.word	0x40020010
 80096d4:	40020028 	.word	0x40020028
 80096d8:	40020040 	.word	0x40020040
 80096dc:	58025408 	.word	0x58025408

080096e0 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d037      	beq.n	8009754 <HAL_DMA2D_Init+0x74>
{
 80096e4:	b510      	push	{r4, lr}
 80096e6:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80096e8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d02c      	beq.n	800974a <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80096f0:	2302      	movs	r3, #2
 80096f2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80096f6:	6821      	ldr	r1, [r4, #0]
 80096f8:	680a      	ldr	r2, [r1, #0]
 80096fa:	4b17      	ldr	r3, [pc, #92]	; (8009758 <HAL_DMA2D_Init+0x78>)
 80096fc:	4013      	ands	r3, r2
 80096fe:	6862      	ldr	r2, [r4, #4]
 8009700:	69e0      	ldr	r0, [r4, #28]
 8009702:	4302      	orrs	r2, r0
 8009704:	4313      	orrs	r3, r2
 8009706:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8009708:	6821      	ldr	r1, [r4, #0]
 800970a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800970c:	4b13      	ldr	r3, [pc, #76]	; (800975c <HAL_DMA2D_Init+0x7c>)
 800970e:	4013      	ands	r3, r2
 8009710:	68a2      	ldr	r2, [r4, #8]
 8009712:	69a0      	ldr	r0, [r4, #24]
 8009714:	4302      	orrs	r2, r0
 8009716:	4313      	orrs	r3, r2
 8009718:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800971e:	4b10      	ldr	r3, [pc, #64]	; (8009760 <HAL_DMA2D_Init+0x80>)
 8009720:	400b      	ands	r3, r1
 8009722:	68e1      	ldr	r1, [r4, #12]
 8009724:	430b      	orrs	r3, r1
 8009726:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8009728:	6821      	ldr	r1, [r4, #0]
 800972a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800972c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009730:	6920      	ldr	r0, [r4, #16]
 8009732:	6962      	ldr	r2, [r4, #20]
 8009734:	0552      	lsls	r2, r2, #21
 8009736:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800973a:	4313      	orrs	r3, r2
 800973c:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800973e:	2000      	movs	r0, #0
 8009740:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009742:	2301      	movs	r3, #1
 8009744:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8009748:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800974a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800974e:	f7f9 fb59 	bl	8002e04 <HAL_DMA2D_MspInit>
 8009752:	e7cd      	b.n	80096f0 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8009754:	2001      	movs	r0, #1
}
 8009756:	4770      	bx	lr
 8009758:	fff8ffbf 	.word	0xfff8ffbf
 800975c:	fffffef8 	.word	0xfffffef8
 8009760:	ffff0000 	.word	0xffff0000

08009764 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8009764:	4770      	bx	lr

08009766 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8009766:	4770      	bx	lr

08009768 <HAL_DMA2D_IRQHandler>:
{
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800976c:	6803      	ldr	r3, [r0, #0]
 800976e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8009770:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8009772:	f015 0f01 	tst.w	r5, #1
 8009776:	d016      	beq.n	80097a6 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8009778:	f416 7f80 	tst.w	r6, #256	; 0x100
 800977c:	d013      	beq.n	80097a6 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009784:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8009786:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009788:	f043 0301 	orr.w	r3, r3, #1
 800978c:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800978e:	6803      	ldr	r3, [r0, #0]
 8009790:	2201      	movs	r2, #1
 8009792:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009794:	2304      	movs	r3, #4
 8009796:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800979a:	2300      	movs	r3, #0
 800979c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80097a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80097a2:	b103      	cbz	r3, 80097a6 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 80097a4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80097a6:	f015 0f20 	tst.w	r5, #32
 80097aa:	d018      	beq.n	80097de <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80097ac:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80097b0:	d015      	beq.n	80097de <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80097b2:	6822      	ldr	r2, [r4, #0]
 80097b4:	6813      	ldr	r3, [r2, #0]
 80097b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097ba:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	2220      	movs	r2, #32
 80097c0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80097c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097c4:	f043 0302 	orr.w	r3, r3, #2
 80097c8:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80097ca:	2304      	movs	r3, #4
 80097cc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80097d0:	2300      	movs	r3, #0
 80097d2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80097d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d8:	b10b      	cbz	r3, 80097de <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 80097da:	4620      	mov	r0, r4
 80097dc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80097de:	f015 0f08 	tst.w	r5, #8
 80097e2:	d018      	beq.n	8009816 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80097e4:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80097e8:	d015      	beq.n	8009816 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	6813      	ldr	r3, [r2, #0]
 80097ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097f2:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	2208      	movs	r2, #8
 80097f8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80097fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097fc:	f043 0304 	orr.w	r3, r3, #4
 8009800:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009802:	2304      	movs	r3, #4
 8009804:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8009808:	2300      	movs	r3, #0
 800980a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800980e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009810:	b10b      	cbz	r3, 8009816 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8009812:	4620      	mov	r0, r4
 8009814:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8009816:	f015 0f04 	tst.w	r5, #4
 800981a:	d002      	beq.n	8009822 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800981c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8009820:	d120      	bne.n	8009864 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8009822:	f015 0f02 	tst.w	r5, #2
 8009826:	d016      	beq.n	8009856 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8009828:	f416 7f00 	tst.w	r6, #512	; 0x200
 800982c:	d013      	beq.n	8009856 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800982e:	6822      	ldr	r2, [r4, #0]
 8009830:	6813      	ldr	r3, [r2, #0]
 8009832:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009836:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	2202      	movs	r2, #2
 800983c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800983e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009840:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009842:	2301      	movs	r3, #1
 8009844:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8009848:	2300      	movs	r3, #0
 800984a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800984e:	6a23      	ldr	r3, [r4, #32]
 8009850:	b10b      	cbz	r3, 8009856 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8009852:	4620      	mov	r0, r4
 8009854:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8009856:	f015 0f10 	tst.w	r5, #16
 800985a:	d002      	beq.n	8009862 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800985c:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8009860:	d10c      	bne.n	800987c <HAL_DMA2D_IRQHandler+0x114>
}
 8009862:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8009864:	6822      	ldr	r2, [r4, #0]
 8009866:	6813      	ldr	r3, [r2, #0]
 8009868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800986c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	2204      	movs	r2, #4
 8009872:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8009874:	4620      	mov	r0, r4
 8009876:	f7ff ff75 	bl	8009764 <HAL_DMA2D_LineEventCallback>
 800987a:	e7d2      	b.n	8009822 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800987c:	6822      	ldr	r2, [r4, #0]
 800987e:	6813      	ldr	r3, [r2, #0]
 8009880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009884:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	2210      	movs	r2, #16
 800988a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800988c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800988e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009890:	2301      	movs	r3, #1
 8009892:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8009896:	2300      	movs	r3, #0
 8009898:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800989c:	4620      	mov	r0, r4
 800989e:	f7ff ff62 	bl	8009766 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80098a2:	e7de      	b.n	8009862 <HAL_DMA2D_IRQHandler+0xfa>

080098a4 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80098a4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d074      	beq.n	8009996 <HAL_DMA2D_ConfigLayer+0xf2>
{
 80098ac:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80098ae:	2301      	movs	r3, #1
 80098b0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80098b4:	2302      	movs	r3, #2
 80098b6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80098ba:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80098be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80098c2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80098c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80098c6:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80098ca:	6b95      	ldr	r5, [r2, #56]	; 0x38
 80098cc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80098d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80098d2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80098d6:	f1a4 0209 	sub.w	r2, r4, #9
 80098da:	2a01      	cmp	r2, #1
 80098dc:	d921      	bls.n	8009922 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80098de:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80098e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80098e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80098ec:	bb61      	cbnz	r1, 8009948 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80098ee:	6804      	ldr	r4, [r0, #0]
 80098f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80098f2:	4a2a      	ldr	r2, [pc, #168]	; (800999c <HAL_DMA2D_ConfigLayer+0xf8>)
 80098f4:	402a      	ands	r2, r5
 80098f6:	4313      	orrs	r3, r2
 80098f8:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80098fa:	6802      	ldr	r2, [r0, #0]
 80098fc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8009900:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009904:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009906:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990a:	3b09      	subs	r3, #9
 800990c:	2b01      	cmp	r3, #1
 800990e:	d911      	bls.n	8009934 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009910:	2301      	movs	r3, #1
 8009912:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009916:	2300      	movs	r3, #0
 8009918:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 800991c:	4618      	mov	r0, r3
}
 800991e:	bc30      	pop	{r4, r5}
 8009920:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009922:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8009926:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800992a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800992c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009930:	4313      	orrs	r3, r2
 8009932:	e7db      	b.n	80098ec <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8009934:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009938:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800993c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800993e:	6802      	ldr	r2, [r0, #0]
 8009940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009944:	6293      	str	r3, [r2, #40]	; 0x28
 8009946:	e7e3      	b.n	8009910 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8009948:	2c0b      	cmp	r4, #11
 800994a:	d01b      	beq.n	8009984 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800994c:	4d14      	ldr	r5, [pc, #80]	; (80099a0 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800994e:	6804      	ldr	r4, [r0, #0]
 8009950:	69e2      	ldr	r2, [r4, #28]
 8009952:	ea22 0205 	bic.w	r2, r2, r5
 8009956:	4313      	orrs	r3, r2
 8009958:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800995a:	6802      	ldr	r2, [r0, #0]
 800995c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8009960:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009964:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009966:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	3b09      	subs	r3, #9
 800996c:	2b01      	cmp	r3, #1
 800996e:	d8cf      	bhi.n	8009910 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8009970:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009974:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009978:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800997a:	6802      	ldr	r2, [r0, #0]
 800997c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009980:	6213      	str	r3, [r2, #32]
 8009982:	e7c5      	b.n	8009910 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8009984:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8009988:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800998c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800998e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 8009992:	4d04      	ldr	r5, [pc, #16]	; (80099a4 <HAL_DMA2D_ConfigLayer+0x100>)
 8009994:	e7db      	b.n	800994e <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 8009996:	2002      	movs	r0, #2
}
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	00ccfff0 	.word	0x00ccfff0
 80099a0:	ff33000f 	.word	0xff33000f
 80099a4:	ff3f000f 	.word	0xff3f000f

080099a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099aa:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80099ac:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80099ae:	e06b      	b.n	8009a88 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80099b0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80099b2:	005e      	lsls	r6, r3, #1
 80099b4:	2403      	movs	r4, #3
 80099b6:	40b4      	lsls	r4, r6
 80099b8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099bc:	68cc      	ldr	r4, [r1, #12]
 80099be:	40b4      	lsls	r4, r6
 80099c0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80099c2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099c4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80099c6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80099ca:	684c      	ldr	r4, [r1, #4]
 80099cc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80099d0:	409c      	lsls	r4, r3
 80099d2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80099d6:	6044      	str	r4, [r0, #4]
 80099d8:	e068      	b.n	8009aac <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80099da:	08dd      	lsrs	r5, r3, #3
 80099dc:	3508      	adds	r5, #8
 80099de:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80099e2:	f003 0407 	and.w	r4, r3, #7
 80099e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80099ea:	240f      	movs	r4, #15
 80099ec:	fa04 f40c 	lsl.w	r4, r4, ip
 80099f0:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80099f4:	690c      	ldr	r4, [r1, #16]
 80099f6:	fa04 f40c 	lsl.w	r4, r4, ip
 80099fa:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80099fe:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8009a02:	e06b      	b.n	8009adc <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009a04:	2409      	movs	r4, #9
 8009a06:	e000      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009a08:	2400      	movs	r4, #0
 8009a0a:	fa04 f40e 	lsl.w	r4, r4, lr
 8009a0e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009a10:	f10c 0c02 	add.w	ip, ip, #2
 8009a14:	4d69      	ldr	r5, [pc, #420]	; (8009bbc <HAL_GPIO_Init+0x214>)
 8009a16:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009a1a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8009a1e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8009a20:	43d4      	mvns	r4, r2
 8009a22:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009a26:	684f      	ldr	r7, [r1, #4]
 8009a28:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8009a2c:	d001      	beq.n	8009a32 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8009a2e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8009a32:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8009a36:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8009a38:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8009a3a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009a3e:	684f      	ldr	r7, [r1, #4]
 8009a40:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8009a44:	d001      	beq.n	8009a4a <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8009a46:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8009a4a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8009a4e:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009a50:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8009a54:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009a58:	684f      	ldr	r7, [r1, #4]
 8009a5a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8009a5e:	d001      	beq.n	8009a64 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8009a60:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009a64:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8009a68:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009a6c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8009a70:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a72:	684e      	ldr	r6, [r1, #4]
 8009a74:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8009a78:	d001      	beq.n	8009a7e <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8009a7a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a82:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8009a86:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a88:	680a      	ldr	r2, [r1, #0]
 8009a8a:	fa32 f403 	lsrs.w	r4, r2, r3
 8009a8e:	f000 8092 	beq.w	8009bb6 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009a92:	f04f 0c01 	mov.w	ip, #1
 8009a96:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8009a9a:	ea1c 0202 	ands.w	r2, ip, r2
 8009a9e:	d0f2      	beq.n	8009a86 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009aa0:	684c      	ldr	r4, [r1, #4]
 8009aa2:	f004 0403 	and.w	r4, r4, #3
 8009aa6:	3c01      	subs	r4, #1
 8009aa8:	2c01      	cmp	r4, #1
 8009aaa:	d981      	bls.n	80099b0 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009aac:	684c      	ldr	r4, [r1, #4]
 8009aae:	f004 0403 	and.w	r4, r4, #3
 8009ab2:	2c03      	cmp	r4, #3
 8009ab4:	d00c      	beq.n	8009ad0 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8009ab6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009ab8:	005d      	lsls	r5, r3, #1
 8009aba:	f04f 0c03 	mov.w	ip, #3
 8009abe:	fa0c fc05 	lsl.w	ip, ip, r5
 8009ac2:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009ac6:	688c      	ldr	r4, [r1, #8]
 8009ac8:	40ac      	lsls	r4, r5
 8009aca:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8009ace:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ad0:	684c      	ldr	r4, [r1, #4]
 8009ad2:	f004 0403 	and.w	r4, r4, #3
 8009ad6:	2c02      	cmp	r4, #2
 8009ad8:	f43f af7f 	beq.w	80099da <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8009adc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009ade:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8009ae2:	f04f 0c03 	mov.w	ip, #3
 8009ae6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009aea:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009aee:	684c      	ldr	r4, [r1, #4]
 8009af0:	f004 0403 	and.w	r4, r4, #3
 8009af4:	fa04 f40e 	lsl.w	r4, r4, lr
 8009af8:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8009afc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009afe:	684c      	ldr	r4, [r1, #4]
 8009b00:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8009b04:	d0bf      	beq.n	8009a86 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b06:	4c2e      	ldr	r4, [pc, #184]	; (8009bc0 <HAL_GPIO_Init+0x218>)
 8009b08:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 8009b0c:	f045 0502 	orr.w	r5, r5, #2
 8009b10:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 8009b14:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 8009b18:	f004 0402 	and.w	r4, r4, #2
 8009b1c:	9401      	str	r4, [sp, #4]
 8009b1e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009b20:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8009b24:	f10c 0502 	add.w	r5, ip, #2
 8009b28:	4c24      	ldr	r4, [pc, #144]	; (8009bbc <HAL_GPIO_Init+0x214>)
 8009b2a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b2e:	f003 0403 	and.w	r4, r3, #3
 8009b32:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8009b36:	240f      	movs	r4, #15
 8009b38:	fa04 f40e 	lsl.w	r4, r4, lr
 8009b3c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009b40:	4c20      	ldr	r4, [pc, #128]	; (8009bc4 <HAL_GPIO_Init+0x21c>)
 8009b42:	42a0      	cmp	r0, r4
 8009b44:	f43f af60 	beq.w	8009a08 <HAL_GPIO_Init+0x60>
 8009b48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b4c:	42a0      	cmp	r0, r4
 8009b4e:	d022      	beq.n	8009b96 <HAL_GPIO_Init+0x1ee>
 8009b50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b54:	42a0      	cmp	r0, r4
 8009b56:	d020      	beq.n	8009b9a <HAL_GPIO_Init+0x1f2>
 8009b58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b5c:	42a0      	cmp	r0, r4
 8009b5e:	d01e      	beq.n	8009b9e <HAL_GPIO_Init+0x1f6>
 8009b60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b64:	42a0      	cmp	r0, r4
 8009b66:	d01c      	beq.n	8009ba2 <HAL_GPIO_Init+0x1fa>
 8009b68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b6c:	42a0      	cmp	r0, r4
 8009b6e:	d01a      	beq.n	8009ba6 <HAL_GPIO_Init+0x1fe>
 8009b70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b74:	42a0      	cmp	r0, r4
 8009b76:	d018      	beq.n	8009baa <HAL_GPIO_Init+0x202>
 8009b78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b7c:	42a0      	cmp	r0, r4
 8009b7e:	d016      	beq.n	8009bae <HAL_GPIO_Init+0x206>
 8009b80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b84:	42a0      	cmp	r0, r4
 8009b86:	d014      	beq.n	8009bb2 <HAL_GPIO_Init+0x20a>
 8009b88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009b8c:	42a0      	cmp	r0, r4
 8009b8e:	f43f af39 	beq.w	8009a04 <HAL_GPIO_Init+0x5c>
 8009b92:	240a      	movs	r4, #10
 8009b94:	e739      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009b96:	2401      	movs	r4, #1
 8009b98:	e737      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009b9a:	2402      	movs	r4, #2
 8009b9c:	e735      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009b9e:	2403      	movs	r4, #3
 8009ba0:	e733      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009ba2:	2404      	movs	r4, #4
 8009ba4:	e731      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009ba6:	2405      	movs	r4, #5
 8009ba8:	e72f      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009baa:	2406      	movs	r4, #6
 8009bac:	e72d      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009bae:	2407      	movs	r4, #7
 8009bb0:	e72b      	b.n	8009a0a <HAL_GPIO_Init+0x62>
 8009bb2:	2408      	movs	r4, #8
 8009bb4:	e729      	b.n	8009a0a <HAL_GPIO_Init+0x62>
  }
}
 8009bb6:	b003      	add	sp, #12
 8009bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	58000400 	.word	0x58000400
 8009bc0:	58024400 	.word	0x58024400
 8009bc4:	58020000 	.word	0x58020000

08009bc8 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8009bc8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009bca:	fa31 f203 	lsrs.w	r2, r1, r3
 8009bce:	f000 809d 	beq.w	8009d0c <HAL_GPIO_DeInit+0x144>
{
 8009bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd4:	e02e      	b.n	8009c34 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009bd6:	2509      	movs	r5, #9
 8009bd8:	e000      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009bda:	2500      	movs	r5, #0
 8009bdc:	fa05 fc0c 	lsl.w	ip, r5, ip
 8009be0:	45a4      	cmp	ip, r4
 8009be2:	d072      	beq.n	8009cca <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009be4:	6804      	ldr	r4, [r0, #0]
 8009be6:	005d      	lsls	r5, r3, #1
 8009be8:	f04f 0c03 	mov.w	ip, #3
 8009bec:	fa0c fc05 	lsl.w	ip, ip, r5
 8009bf0:	ea44 040c 	orr.w	r4, r4, ip
 8009bf4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009bf6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8009bfa:	f10e 0e08 	add.w	lr, lr, #8
 8009bfe:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8009c02:	f003 0507 	and.w	r5, r3, #7
 8009c06:	00ae      	lsls	r6, r5, #2
 8009c08:	250f      	movs	r5, #15
 8009c0a:	40b5      	lsls	r5, r6
 8009c0c:	ea24 0405 	bic.w	r4, r4, r5
 8009c10:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009c14:	68c4      	ldr	r4, [r0, #12]
 8009c16:	ea24 040c 	bic.w	r4, r4, ip
 8009c1a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c1c:	6844      	ldr	r4, [r0, #4]
 8009c1e:	ea24 0202 	bic.w	r2, r4, r2
 8009c22:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c24:	6882      	ldr	r2, [r0, #8]
 8009c26:	ea22 020c 	bic.w	r2, r2, ip
 8009c2a:	6082      	str	r2, [r0, #8]
    }

    position++;
 8009c2c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8009c2e:	fa31 f203 	lsrs.w	r2, r1, r3
 8009c32:	d06a      	beq.n	8009d0a <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009c34:	2201      	movs	r2, #1
 8009c36:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8009c38:	ea12 0e01 	ands.w	lr, r2, r1
 8009c3c:	d0f6      	beq.n	8009c2c <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009c3e:	089e      	lsrs	r6, r3, #2
 8009c40:	1cb5      	adds	r5, r6, #2
 8009c42:	4c33      	ldr	r4, [pc, #204]	; (8009d10 <HAL_GPIO_DeInit+0x148>)
 8009c44:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009c48:	f003 0c03 	and.w	ip, r3, #3
 8009c4c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8009c50:	250f      	movs	r5, #15
 8009c52:	fa05 f70c 	lsl.w	r7, r5, ip
 8009c56:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009c58:	4d2e      	ldr	r5, [pc, #184]	; (8009d14 <HAL_GPIO_DeInit+0x14c>)
 8009c5a:	42a8      	cmp	r0, r5
 8009c5c:	d0bd      	beq.n	8009bda <HAL_GPIO_DeInit+0x12>
 8009c5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c62:	42a8      	cmp	r0, r5
 8009c64:	d021      	beq.n	8009caa <HAL_GPIO_DeInit+0xe2>
 8009c66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c6a:	42a8      	cmp	r0, r5
 8009c6c:	d01f      	beq.n	8009cae <HAL_GPIO_DeInit+0xe6>
 8009c6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c72:	42a8      	cmp	r0, r5
 8009c74:	d01d      	beq.n	8009cb2 <HAL_GPIO_DeInit+0xea>
 8009c76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c7a:	42a8      	cmp	r0, r5
 8009c7c:	d01b      	beq.n	8009cb6 <HAL_GPIO_DeInit+0xee>
 8009c7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c82:	42a8      	cmp	r0, r5
 8009c84:	d019      	beq.n	8009cba <HAL_GPIO_DeInit+0xf2>
 8009c86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c8a:	42a8      	cmp	r0, r5
 8009c8c:	d017      	beq.n	8009cbe <HAL_GPIO_DeInit+0xf6>
 8009c8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c92:	42a8      	cmp	r0, r5
 8009c94:	d015      	beq.n	8009cc2 <HAL_GPIO_DeInit+0xfa>
 8009c96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c9a:	42a8      	cmp	r0, r5
 8009c9c:	d013      	beq.n	8009cc6 <HAL_GPIO_DeInit+0xfe>
 8009c9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ca2:	42a8      	cmp	r0, r5
 8009ca4:	d097      	beq.n	8009bd6 <HAL_GPIO_DeInit+0xe>
 8009ca6:	250a      	movs	r5, #10
 8009ca8:	e798      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009caa:	2501      	movs	r5, #1
 8009cac:	e796      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009cae:	2502      	movs	r5, #2
 8009cb0:	e794      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009cb2:	2503      	movs	r5, #3
 8009cb4:	e792      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009cb6:	2504      	movs	r5, #4
 8009cb8:	e790      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009cba:	2505      	movs	r5, #5
 8009cbc:	e78e      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009cbe:	2506      	movs	r5, #6
 8009cc0:	e78c      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009cc2:	2507      	movs	r5, #7
 8009cc4:	e78a      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
 8009cc6:	2508      	movs	r5, #8
 8009cc8:	e788      	b.n	8009bdc <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009cca:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8009cce:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8009cd2:	ea25 050e 	bic.w	r5, r5, lr
 8009cd6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009cda:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8009cde:	ea25 050e 	bic.w	r5, r5, lr
 8009ce2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8009ce6:	6865      	ldr	r5, [r4, #4]
 8009ce8:	ea25 050e 	bic.w	r5, r5, lr
 8009cec:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009cee:	6825      	ldr	r5, [r4, #0]
 8009cf0:	ea25 050e 	bic.w	r5, r5, lr
 8009cf4:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009cf6:	f8df c018 	ldr.w	ip, [pc, #24]	; 8009d10 <HAL_GPIO_DeInit+0x148>
 8009cfa:	1cb4      	adds	r4, r6, #2
 8009cfc:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8009d00:	ea25 0507 	bic.w	r5, r5, r7
 8009d04:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8009d08:	e76c      	b.n	8009be4 <HAL_GPIO_DeInit+0x1c>
  }
}
 8009d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	58000400 	.word	0x58000400
 8009d14:	58020000 	.word	0x58020000

08009d18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009d18:	6903      	ldr	r3, [r0, #16]
 8009d1a:	4219      	tst	r1, r3
 8009d1c:	d001      	beq.n	8009d22 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8009d1e:	2001      	movs	r0, #1
 8009d20:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d22:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8009d24:	4770      	bx	lr

08009d26 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d26:	b10a      	cbz	r2, 8009d2c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d28:	6181      	str	r1, [r0, #24]
 8009d2a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009d2c:	0409      	lsls	r1, r1, #16
 8009d2e:	6181      	str	r1, [r0, #24]
  }
}
 8009d30:	4770      	bx	lr

08009d32 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009d32:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d34:	ea01 0203 	and.w	r2, r1, r3
 8009d38:	ea21 0103 	bic.w	r1, r1, r3
 8009d3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d40:	6181      	str	r1, [r0, #24]
}
 8009d42:	4770      	bx	lr

08009d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009d44:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d4e:	4203      	tst	r3, r0
 8009d50:	d100      	bne.n	8009d54 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8009d52:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d58:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009d5c:	f7f9 f814 	bl	8002d88 <HAL_GPIO_EXTI_Callback>
}
 8009d60:	e7f7      	b.n	8009d52 <HAL_GPIO_EXTI_IRQHandler+0xe>

08009d62 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009d62:	6803      	ldr	r3, [r0, #0]
 8009d64:	699a      	ldr	r2, [r3, #24]
 8009d66:	f012 0f02 	tst.w	r2, #2
 8009d6a:	d001      	beq.n	8009d70 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d70:	6803      	ldr	r3, [r0, #0]
 8009d72:	699a      	ldr	r2, [r3, #24]
 8009d74:	f012 0f01 	tst.w	r2, #1
 8009d78:	d103      	bne.n	8009d82 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009d7a:	699a      	ldr	r2, [r3, #24]
 8009d7c:	f042 0201 	orr.w	r2, r2, #1
 8009d80:	619a      	str	r2, [r3, #24]
  }
}
 8009d82:	4770      	bx	lr

08009d84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d84:	b410      	push	{r4}
 8009d86:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d88:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009d8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d90:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d92:	4321      	orrs	r1, r4
 8009d94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d98:	6802      	ldr	r2, [r0, #0]
 8009d9a:	6853      	ldr	r3, [r2, #4]
 8009d9c:	0d64      	lsrs	r4, r4, #21
 8009d9e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8009da2:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8009da6:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8009daa:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8009dae:	f044 0403 	orr.w	r4, r4, #3
 8009db2:	ea23 0404 	bic.w	r4, r3, r4
 8009db6:	4321      	orrs	r1, r4
 8009db8:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <I2C_IsErrorOccurred>:
{
 8009dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8009dc6:	6803      	ldr	r3, [r0, #0]
 8009dc8:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009dca:	f017 0710 	ands.w	r7, r7, #16
 8009dce:	d04e      	beq.n	8009e6e <I2C_IsErrorOccurred+0xae>
 8009dd0:	460e      	mov	r6, r1
 8009dd2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dd4:	2210      	movs	r2, #16
 8009dd6:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009dd8:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	6998      	ldr	r0, [r3, #24]
 8009dde:	f010 0f20 	tst.w	r0, #32
 8009de2:	d13d      	bne.n	8009e60 <I2C_IsErrorOccurred+0xa0>
 8009de4:	2d00      	cmp	r5, #0
 8009de6:	d13b      	bne.n	8009e60 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8009de8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009dec:	d0f5      	beq.n	8009dda <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009dee:	f7ff f9f7 	bl	80091e0 <HAL_GetTick>
 8009df2:	eba0 0008 	sub.w	r0, r0, r8
 8009df6:	42b0      	cmp	r0, r6
 8009df8:	d801      	bhi.n	8009dfe <I2C_IsErrorOccurred+0x3e>
 8009dfa:	2e00      	cmp	r6, #0
 8009dfc:	d1ed      	bne.n	8009dda <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009dfe:	6821      	ldr	r1, [r4, #0]
 8009e00:	684a      	ldr	r2, [r1, #4]
 8009e02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8009e06:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009e0a:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009e0c:	6988      	ldr	r0, [r1, #24]
 8009e0e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8009e12:	d004      	beq.n	8009e1e <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8009e14:	3b20      	subs	r3, #32
 8009e16:	bf18      	it	ne
 8009e18:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8009e1a:	b902      	cbnz	r2, 8009e1e <I2C_IsErrorOccurred+0x5e>
 8009e1c:	b9c3      	cbnz	r3, 8009e50 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	f013 0f20 	tst.w	r3, #32
 8009e26:	d1d8      	bne.n	8009dda <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009e28:	f7ff f9da 	bl	80091e0 <HAL_GetTick>
 8009e2c:	eba0 0008 	sub.w	r0, r0, r8
 8009e30:	2819      	cmp	r0, #25
 8009e32:	d9f4      	bls.n	8009e1e <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009e36:	f043 0320 	orr.w	r3, r3, #32
 8009e3a:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009e3c:	2320      	movs	r3, #32
 8009e3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e42:	2300      	movs	r3, #0
 8009e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8009e48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8009e4c:	2501      	movs	r5, #1
 8009e4e:	e7e6      	b.n	8009e1e <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009e50:	684b      	ldr	r3, [r1, #4]
 8009e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e56:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8009e58:	f7ff f9c2 	bl	80091e0 <HAL_GetTick>
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	e7de      	b.n	8009e1e <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8009e60:	2d00      	cmp	r5, #0
 8009e62:	d140      	bne.n	8009ee6 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e64:	2220      	movs	r2, #32
 8009e66:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8009e68:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8009e6a:	2501      	movs	r5, #1
 8009e6c:	e000      	b.n	8009e70 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8009e6e:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8009e70:	6822      	ldr	r2, [r4, #0]
 8009e72:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009e74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009e78:	d005      	beq.n	8009e86 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8009e7a:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e82:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8009e84:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e86:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009e8a:	d006      	beq.n	8009e9a <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8009e8c:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e96:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8009e98:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009e9e:	d024      	beq.n	8009eea <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ea0:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eaa:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8009eac:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f7ff ff57 	bl	8009d62 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009eb4:	6822      	ldr	r2, [r4, #0]
 8009eb6:	6853      	ldr	r3, [r2, #4]
 8009eb8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8009ebc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8009ec0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009ec4:	f023 0301 	bic.w	r3, r3, #1
 8009ec8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8009eca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009ecc:	431f      	orrs	r7, r3
 8009ece:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8009edc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8009ee6:	2704      	movs	r7, #4
 8009ee8:	e7c2      	b.n	8009e70 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 8009eea:	2d00      	cmp	r5, #0
 8009eec:	d0f8      	beq.n	8009ee0 <I2C_IsErrorOccurred+0x120>
 8009eee:	e7de      	b.n	8009eae <I2C_IsErrorOccurred+0xee>

08009ef0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	f013 0f02 	tst.w	r3, #2
 8009f00:	d11d      	bne.n	8009f3e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f02:	4632      	mov	r2, r6
 8009f04:	4629      	mov	r1, r5
 8009f06:	4620      	mov	r0, r4
 8009f08:	f7ff ff5a 	bl	8009dc0 <I2C_IsErrorOccurred>
 8009f0c:	b9c8      	cbnz	r0, 8009f42 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8009f0e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009f12:	d0f1      	beq.n	8009ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f14:	f7ff f964 	bl	80091e0 <HAL_GetTick>
 8009f18:	1b80      	subs	r0, r0, r6
 8009f1a:	42a8      	cmp	r0, r5
 8009f1c:	d801      	bhi.n	8009f22 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	d1ea      	bne.n	8009ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009f24:	f043 0320 	orr.w	r3, r3, #32
 8009f28:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f2a:	2320      	movs	r3, #32
 8009f2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f30:	2300      	movs	r3, #0
 8009f32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009f36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	e000      	b.n	8009f40 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8009f3e:	2000      	movs	r0, #0
}
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009f42:	2001      	movs	r0, #1
 8009f44:	e7fc      	b.n	8009f40 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08009f46 <I2C_WaitOnFlagUntilTimeout>:
{
 8009f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	4688      	mov	r8, r1
 8009f4e:	4617      	mov	r7, r2
 8009f50:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f52:	6834      	ldr	r4, [r6, #0]
 8009f54:	69a4      	ldr	r4, [r4, #24]
 8009f56:	ea38 0304 	bics.w	r3, r8, r4
 8009f5a:	bf0c      	ite	eq
 8009f5c:	f04f 0c01 	moveq.w	ip, #1
 8009f60:	f04f 0c00 	movne.w	ip, #0
 8009f64:	45bc      	cmp	ip, r7
 8009f66:	d118      	bne.n	8009f9a <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8009f68:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009f6c:	d0f1      	beq.n	8009f52 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f6e:	f7ff f937 	bl	80091e0 <HAL_GetTick>
 8009f72:	9b06      	ldr	r3, [sp, #24]
 8009f74:	1ac0      	subs	r0, r0, r3
 8009f76:	42a8      	cmp	r0, r5
 8009f78:	d801      	bhi.n	8009f7e <I2C_WaitOnFlagUntilTimeout+0x38>
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	d1e9      	bne.n	8009f52 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f7e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8009f80:	f043 0320 	orr.w	r3, r3, #32
 8009f84:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f86:	2320      	movs	r3, #32
 8009f88:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009f92:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8009f96:	2001      	movs	r0, #1
 8009f98:	e000      	b.n	8009f9c <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8009f9a:	2000      	movs	r0, #0
}
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009fa0 <I2C_RequestMemoryWrite>:
{
 8009fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	4690      	mov	r8, r2
 8009faa:	461d      	mov	r5, r3
 8009fac:	9e08      	ldr	r6, [sp, #32]
 8009fae:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009fb0:	4b19      	ldr	r3, [pc, #100]	; (800a018 <I2C_RequestMemoryWrite+0x78>)
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009fb8:	b2ea      	uxtb	r2, r5
 8009fba:	f7ff fee3 	bl	8009d84 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fbe:	463a      	mov	r2, r7
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7ff ff94 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009fc8:	b9f8      	cbnz	r0, 800a00a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009fca:	2d01      	cmp	r5, #1
 8009fcc:	d10e      	bne.n	8009fec <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	fa5f f288 	uxtb.w	r2, r8
 8009fd4:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009fd6:	9700      	str	r7, [sp, #0]
 8009fd8:	4633      	mov	r3, r6
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2180      	movs	r1, #128	; 0x80
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f7ff ffb1 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 8009fe4:	b9a8      	cbnz	r0, 800a012 <I2C_RequestMemoryWrite+0x72>
}
 8009fe6:	b002      	add	sp, #8
 8009fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8009ff2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ff4:	463a      	mov	r2, r7
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f7ff ff79 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ffe:	b930      	cbnz	r0, 800a00e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	fa5f f288 	uxtb.w	r2, r8
 800a006:	629a      	str	r2, [r3, #40]	; 0x28
 800a008:	e7e5      	b.n	8009fd6 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800a00a:	2001      	movs	r0, #1
 800a00c:	e7eb      	b.n	8009fe6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800a00e:	2001      	movs	r0, #1
 800a010:	e7e9      	b.n	8009fe6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800a012:	2001      	movs	r0, #1
 800a014:	e7e7      	b.n	8009fe6 <I2C_RequestMemoryWrite+0x46>
 800a016:	bf00      	nop
 800a018:	80002000 	.word	0x80002000

0800a01c <I2C_RequestMemoryRead>:
{
 800a01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	4604      	mov	r4, r0
 800a024:	4690      	mov	r8, r2
 800a026:	461d      	mov	r5, r3
 800a028:	9e08      	ldr	r6, [sp, #32]
 800a02a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a02c:	4b18      	ldr	r3, [pc, #96]	; (800a090 <I2C_RequestMemoryRead+0x74>)
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	2300      	movs	r3, #0
 800a032:	b2ea      	uxtb	r2, r5
 800a034:	f7ff fea6 	bl	8009d84 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a038:	463a      	mov	r2, r7
 800a03a:	4631      	mov	r1, r6
 800a03c:	4620      	mov	r0, r4
 800a03e:	f7ff ff57 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a042:	b9f8      	cbnz	r0, 800a084 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a044:	2d01      	cmp	r5, #1
 800a046:	d10e      	bne.n	800a066 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	fa5f f288 	uxtb.w	r2, r8
 800a04e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a050:	9700      	str	r7, [sp, #0]
 800a052:	4633      	mov	r3, r6
 800a054:	2200      	movs	r2, #0
 800a056:	2140      	movs	r1, #64	; 0x40
 800a058:	4620      	mov	r0, r4
 800a05a:	f7ff ff74 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 800a05e:	b9a8      	cbnz	r0, 800a08c <I2C_RequestMemoryRead+0x70>
}
 800a060:	b002      	add	sp, #8
 800a062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800a06c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a06e:	463a      	mov	r2, r7
 800a070:	4631      	mov	r1, r6
 800a072:	4620      	mov	r0, r4
 800a074:	f7ff ff3c 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a078:	b930      	cbnz	r0, 800a088 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	fa5f f288 	uxtb.w	r2, r8
 800a080:	629a      	str	r2, [r3, #40]	; 0x28
 800a082:	e7e5      	b.n	800a050 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800a084:	2001      	movs	r0, #1
 800a086:	e7eb      	b.n	800a060 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800a088:	2001      	movs	r0, #1
 800a08a:	e7e9      	b.n	800a060 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800a08c:	2001      	movs	r0, #1
 800a08e:	e7e7      	b.n	800a060 <I2C_RequestMemoryRead+0x44>
 800a090:	80002000 	.word	0x80002000

0800a094 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	4605      	mov	r5, r0
 800a098:	460c      	mov	r4, r1
 800a09a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	f013 0f20 	tst.w	r3, #32
 800a0a4:	d11a      	bne.n	800a0dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	f7ff fe88 	bl	8009dc0 <I2C_IsErrorOccurred>
 800a0b0:	b9b0      	cbnz	r0, 800a0e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0b2:	f7ff f895 	bl	80091e0 <HAL_GetTick>
 800a0b6:	1b80      	subs	r0, r0, r6
 800a0b8:	42a0      	cmp	r0, r4
 800a0ba:	d801      	bhi.n	800a0c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800a0bc:	2c00      	cmp	r4, #0
 800a0be:	d1ed      	bne.n	800a09c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a0c2:	f043 0320 	orr.w	r3, r3, #32
 800a0c6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a0d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800a0d8:	2001      	movs	r0, #1
}
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e7fc      	b.n	800a0da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	e7fa      	b.n	800a0da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800a0e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d057      	beq.n	800a198 <HAL_I2C_Init+0xb4>
{
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a0ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d041      	beq.n	800a178 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0f4:	2324      	movs	r3, #36	; 0x24
 800a0f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a0fa:	6822      	ldr	r2, [r4, #0]
 800a0fc:	6813      	ldr	r3, [r2, #0]
 800a0fe:	f023 0301 	bic.w	r3, r3, #1
 800a102:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a104:	6863      	ldr	r3, [r4, #4]
 800a106:	6822      	ldr	r2, [r4, #0]
 800a108:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800a10c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a10e:	6822      	ldr	r2, [r4, #0]
 800a110:	6893      	ldr	r3, [r2, #8]
 800a112:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a116:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a118:	68e3      	ldr	r3, [r4, #12]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d031      	beq.n	800a182 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a11e:	68a3      	ldr	r3, [r4, #8]
 800a120:	6822      	ldr	r2, [r4, #0]
 800a122:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800a126:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a128:	68e3      	ldr	r3, [r4, #12]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d02f      	beq.n	800a18e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a12e:	6822      	ldr	r2, [r4, #0]
 800a130:	6851      	ldr	r1, [r2, #4]
 800a132:	4b1a      	ldr	r3, [pc, #104]	; (800a19c <HAL_I2C_Init+0xb8>)
 800a134:	430b      	orrs	r3, r1
 800a136:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a138:	6822      	ldr	r2, [r4, #0]
 800a13a:	68d3      	ldr	r3, [r2, #12]
 800a13c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a140:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	6962      	ldr	r2, [r4, #20]
 800a146:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a148:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a14a:	6822      	ldr	r2, [r4, #0]
 800a14c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a150:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a152:	69e3      	ldr	r3, [r4, #28]
 800a154:	6a21      	ldr	r1, [r4, #32]
 800a156:	6822      	ldr	r2, [r4, #0]
 800a158:	430b      	orrs	r3, r1
 800a15a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a15c:	6822      	ldr	r2, [r4, #0]
 800a15e:	6813      	ldr	r3, [r2, #0]
 800a160:	f043 0301 	orr.w	r3, r3, #1
 800a164:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a166:	2000      	movs	r0, #0
 800a168:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a16a:	2320      	movs	r3, #32
 800a16c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a170:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a172:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800a176:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800a178:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800a17c:	f7f8 fe66 	bl	8002e4c <HAL_I2C_MspInit>
 800a180:	e7b8      	b.n	800a0f4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a182:	68a3      	ldr	r3, [r4, #8]
 800a184:	6822      	ldr	r2, [r4, #0]
 800a186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a18a:	6093      	str	r3, [r2, #8]
 800a18c:	e7cc      	b.n	800a128 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a194:	605a      	str	r2, [r3, #4]
 800a196:	e7ca      	b.n	800a12e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800a198:	2001      	movs	r0, #1
}
 800a19a:	4770      	bx	lr
 800a19c:	02008000 	.word	0x02008000

0800a1a0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800a1a0:	b1a8      	cbz	r0, 800a1ce <HAL_I2C_DeInit+0x2e>
{
 800a1a2:	b510      	push	{r4, lr}
 800a1a4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a1a6:	2324      	movs	r3, #36	; 0x24
 800a1a8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a1ac:	6802      	ldr	r2, [r0, #0]
 800a1ae:	6813      	ldr	r3, [r2, #0]
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800a1b6:	f7f8 fe95 	bl	8002ee4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a1be:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1c2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1c4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 800a1c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800a1cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a1ce:	2001      	movs	r0, #1
}
 800a1d0:	4770      	bx	lr

0800a1d2 <HAL_I2C_Mem_Write>:
{
 800a1d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	460d      	mov	r5, r1
 800a1da:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800a1de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e0:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800a1e4:	b2c9      	uxtb	r1, r1
 800a1e6:	2920      	cmp	r1, #32
 800a1e8:	f040 80bc 	bne.w	800a364 <HAL_I2C_Mem_Write+0x192>
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	4690      	mov	r8, r2
 800a1f0:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800a1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1f4:	f1ba 0f00 	cmp.w	sl, #0
 800a1f8:	bf18      	it	ne
 800a1fa:	2b00      	cmpne	r3, #0
 800a1fc:	d016      	beq.n	800a22c <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 800a1fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a202:	2b01      	cmp	r3, #1
 800a204:	f000 80b2 	beq.w	800a36c <HAL_I2C_Mem_Write+0x19a>
 800a208:	f04f 0b01 	mov.w	fp, #1
 800a20c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a210:	f7fe ffe6 	bl	80091e0 <HAL_GetTick>
 800a214:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a216:	9000      	str	r0, [sp, #0]
 800a218:	2319      	movs	r3, #25
 800a21a:	465a      	mov	r2, fp
 800a21c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a220:	4620      	mov	r0, r4
 800a222:	f7ff fe90 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 800a226:	b130      	cbz	r0, 800a236 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800a228:	2001      	movs	r0, #1
 800a22a:	e09c      	b.n	800a366 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a22c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a230:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800a232:	2001      	movs	r0, #1
 800a234:	e097      	b.n	800a366 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a236:	2321      	movs	r3, #33	; 0x21
 800a238:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a23c:	2340      	movs	r3, #64	; 0x40
 800a23e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a242:	2300      	movs	r3, #0
 800a244:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800a246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a248:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800a24a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a24e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a250:	9601      	str	r6, [sp, #4]
 800a252:	9700      	str	r7, [sp, #0]
 800a254:	464b      	mov	r3, r9
 800a256:	4642      	mov	r2, r8
 800a258:	4629      	mov	r1, r5
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7ff fea0 	bl	8009fa0 <I2C_RequestMemoryWrite>
 800a260:	b970      	cbnz	r0, 800a280 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a262:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a264:	b29b      	uxth	r3, r3
 800a266:	2bff      	cmp	r3, #255	; 0xff
 800a268:	d90f      	bls.n	800a28a <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a26a:	22ff      	movs	r2, #255	; 0xff
 800a26c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a26e:	2300      	movs	r3, #0
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a276:	4629      	mov	r1, r5
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff fd83 	bl	8009d84 <I2C_TransferConfig>
 800a27e:	e021      	b.n	800a2c4 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800a280:	2300      	movs	r3, #0
 800a282:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a286:	4658      	mov	r0, fp
 800a288:	e06d      	b.n	800a366 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800a28a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a28c:	b292      	uxth	r2, r2
 800a28e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a290:	2300      	movs	r3, #0
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a298:	b2d2      	uxtb	r2, r2
 800a29a:	4629      	mov	r1, r5
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7ff fd71 	bl	8009d84 <I2C_TransferConfig>
 800a2a2:	e00f      	b.n	800a2c4 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800a2a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a2a6:	b292      	uxth	r2, r2
 800a2a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f7ff fd64 	bl	8009d84 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a2bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d033      	beq.n	800a32c <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2c4:	4632      	mov	r2, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f7ff fe11 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d14e      	bne.n	800a370 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a2d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	7812      	ldrb	r2, [r2, #0]
 800a2d8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2dc:	3301      	adds	r3, #1
 800a2de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a2e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a2ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a2f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a2f4:	b292      	uxth	r2, r2
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	d0e0      	beq.n	800a2bc <HAL_I2C_Mem_Write+0xea>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1de      	bne.n	800a2bc <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a2fe:	9600      	str	r6, [sp, #0]
 800a300:	463b      	mov	r3, r7
 800a302:	2200      	movs	r2, #0
 800a304:	2180      	movs	r1, #128	; 0x80
 800a306:	4620      	mov	r0, r4
 800a308:	f7ff fe1d 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 800a30c:	bb90      	cbnz	r0, 800a374 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a30e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a310:	b29b      	uxth	r3, r3
 800a312:	2bff      	cmp	r3, #255	; 0xff
 800a314:	d9c6      	bls.n	800a2a4 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a316:	22ff      	movs	r2, #255	; 0xff
 800a318:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a31a:	2300      	movs	r3, #0
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a322:	4629      	mov	r1, r5
 800a324:	4620      	mov	r0, r4
 800a326:	f7ff fd2d 	bl	8009d84 <I2C_TransferConfig>
 800a32a:	e7c7      	b.n	800a2bc <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a32c:	4632      	mov	r2, r6
 800a32e:	4639      	mov	r1, r7
 800a330:	4620      	mov	r0, r4
 800a332:	f7ff feaf 	bl	800a094 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a336:	b9f8      	cbnz	r0, 800a378 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	2220      	movs	r2, #32
 800a33c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a33e:	6821      	ldr	r1, [r4, #0]
 800a340:	684b      	ldr	r3, [r1, #4]
 800a342:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800a346:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800a34a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800a34e:	f023 0301 	bic.w	r3, r3, #1
 800a352:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a354:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a358:	2300      	movs	r3, #0
 800a35a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800a35e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800a362:	e000      	b.n	800a366 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800a364:	2002      	movs	r0, #2
}
 800a366:	b003      	add	sp, #12
 800a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a36c:	2002      	movs	r0, #2
 800a36e:	e7fa      	b.n	800a366 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800a370:	2001      	movs	r0, #1
 800a372:	e7f8      	b.n	800a366 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800a374:	2001      	movs	r0, #1
 800a376:	e7f6      	b.n	800a366 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800a378:	2001      	movs	r0, #1
 800a37a:	e7f4      	b.n	800a366 <HAL_I2C_Mem_Write+0x194>

0800a37c <HAL_I2C_Mem_Read>:
{
 800a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	b083      	sub	sp, #12
 800a382:	460d      	mov	r5, r1
 800a384:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800a388:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a38a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800a38e:	b2c9      	uxtb	r1, r1
 800a390:	2920      	cmp	r1, #32
 800a392:	f040 80bd 	bne.w	800a510 <HAL_I2C_Mem_Read+0x194>
 800a396:	4604      	mov	r4, r0
 800a398:	4690      	mov	r8, r2
 800a39a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800a39c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a39e:	f1ba 0f00 	cmp.w	sl, #0
 800a3a2:	bf18      	it	ne
 800a3a4:	2b00      	cmpne	r3, #0
 800a3a6:	d016      	beq.n	800a3d6 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 800a3a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	f000 80b3 	beq.w	800a518 <HAL_I2C_Mem_Read+0x19c>
 800a3b2:	f04f 0b01 	mov.w	fp, #1
 800a3b6:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a3ba:	f7fe ff11 	bl	80091e0 <HAL_GetTick>
 800a3be:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a3c0:	9000      	str	r0, [sp, #0]
 800a3c2:	2319      	movs	r3, #25
 800a3c4:	465a      	mov	r2, fp
 800a3c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7ff fdbb 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 800a3d0:	b130      	cbz	r0, 800a3e0 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e09d      	b.n	800a512 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a3d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3da:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800a3dc:	2001      	movs	r0, #1
 800a3de:	e098      	b.n	800a512 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a3e0:	2322      	movs	r3, #34	; 0x22
 800a3e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a3e6:	2340      	movs	r3, #64	; 0x40
 800a3e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800a3f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800a3f4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a3f8:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3fa:	9601      	str	r6, [sp, #4]
 800a3fc:	9700      	str	r7, [sp, #0]
 800a3fe:	464b      	mov	r3, r9
 800a400:	4642      	mov	r2, r8
 800a402:	4629      	mov	r1, r5
 800a404:	4620      	mov	r0, r4
 800a406:	f7ff fe09 	bl	800a01c <I2C_RequestMemoryRead>
 800a40a:	b970      	cbnz	r0, 800a42a <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a40c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2bff      	cmp	r3, #255	; 0xff
 800a412:	d90f      	bls.n	800a434 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a418:	4b43      	ldr	r3, [pc, #268]	; (800a528 <HAL_I2C_Mem_Read+0x1ac>)
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a420:	4629      	mov	r1, r5
 800a422:	4620      	mov	r0, r4
 800a424:	f7ff fcae 	bl	8009d84 <I2C_TransferConfig>
 800a428:	e021      	b.n	800a46e <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800a42a:	2300      	movs	r3, #0
 800a42c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a430:	4658      	mov	r0, fp
 800a432:	e06e      	b.n	800a512 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800a434:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a436:	b292      	uxth	r2, r2
 800a438:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a43a:	4b3b      	ldr	r3, [pc, #236]	; (800a528 <HAL_I2C_Mem_Read+0x1ac>)
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a442:	b2d2      	uxtb	r2, r2
 800a444:	4629      	mov	r1, r5
 800a446:	4620      	mov	r0, r4
 800a448:	f7ff fc9c 	bl	8009d84 <I2C_TransferConfig>
 800a44c:	e00f      	b.n	800a46e <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800a44e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a450:	b292      	uxth	r2, r2
 800a452:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a454:	2300      	movs	r3, #0
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a45c:	b2d2      	uxtb	r2, r2
 800a45e:	4629      	mov	r1, r5
 800a460:	4620      	mov	r0, r4
 800a462:	f7ff fc8f 	bl	8009d84 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a466:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a468:	b29b      	uxth	r3, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d034      	beq.n	800a4d8 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a46e:	9600      	str	r6, [sp, #0]
 800a470:	463b      	mov	r3, r7
 800a472:	2200      	movs	r2, #0
 800a474:	2104      	movs	r1, #4
 800a476:	4620      	mov	r0, r4
 800a478:	f7ff fd65 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d14d      	bne.n	800a51c <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a486:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48a:	3301      	adds	r3, #1
 800a48c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800a48e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a490:	3a01      	subs	r2, #1
 800a492:	b292      	uxth	r2, r2
 800a494:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a496:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a4a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d0de      	beq.n	800a466 <HAL_I2C_Mem_Read+0xea>
 800a4a8:	2a00      	cmp	r2, #0
 800a4aa:	d1dc      	bne.n	800a466 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a4ac:	9600      	str	r6, [sp, #0]
 800a4ae:	463b      	mov	r3, r7
 800a4b0:	2180      	movs	r1, #128	; 0x80
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f7ff fd47 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 800a4b8:	bb90      	cbnz	r0, 800a520 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	2bff      	cmp	r3, #255	; 0xff
 800a4c0:	d9c5      	bls.n	800a44e <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4c2:	22ff      	movs	r2, #255	; 0xff
 800a4c4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7ff fc57 	bl	8009d84 <I2C_TransferConfig>
 800a4d6:	e7c6      	b.n	800a466 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4d8:	4632      	mov	r2, r6
 800a4da:	4639      	mov	r1, r7
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f7ff fdd9 	bl	800a094 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a4e2:	b9f8      	cbnz	r0, 800a524 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a4ea:	6821      	ldr	r1, [r4, #0]
 800a4ec:	684b      	ldr	r3, [r1, #4]
 800a4ee:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800a4f2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800a4f6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800a4fa:	f023 0301 	bic.w	r3, r3, #1
 800a4fe:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a500:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a504:	2300      	movs	r3, #0
 800a506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800a50a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800a50e:	e000      	b.n	800a512 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800a510:	2002      	movs	r0, #2
}
 800a512:	b003      	add	sp, #12
 800a514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a518:	2002      	movs	r0, #2
 800a51a:	e7fa      	b.n	800a512 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 800a51c:	2001      	movs	r0, #1
 800a51e:	e7f8      	b.n	800a512 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 800a520:	2001      	movs	r0, #1
 800a522:	e7f6      	b.n	800a512 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800a524:	2001      	movs	r0, #1
 800a526:	e7f4      	b.n	800a512 <HAL_I2C_Mem_Read+0x196>
 800a528:	80002400 	.word	0x80002400

0800a52c <HAL_I2C_GetState>:
  return hi2c->State;
 800a52c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800a530:	4770      	bx	lr

0800a532 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800a532:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800a534:	4770      	bx	lr

0800a536 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a536:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	d124      	bne.n	800a58a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a540:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a544:	2b01      	cmp	r3, #1
 800a546:	d022      	beq.n	800a58e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800a548:	2301      	movs	r3, #1
 800a54a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a54e:	2324      	movs	r3, #36	; 0x24
 800a550:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a554:	6802      	ldr	r2, [r0, #0]
 800a556:	6813      	ldr	r3, [r2, #0]
 800a558:	f023 0301 	bic.w	r3, r3, #1
 800a55c:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a55e:	6802      	ldr	r2, [r0, #0]
 800a560:	6813      	ldr	r3, [r2, #0]
 800a562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a566:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a568:	6802      	ldr	r2, [r0, #0]
 800a56a:	6813      	ldr	r3, [r2, #0]
 800a56c:	4319      	orrs	r1, r3
 800a56e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a570:	6802      	ldr	r2, [r0, #0]
 800a572:	6813      	ldr	r3, [r2, #0]
 800a574:	f043 0301 	orr.w	r3, r3, #1
 800a578:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a57a:	2320      	movs	r3, #32
 800a57c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a580:	2300      	movs	r3, #0
 800a582:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800a586:	4618      	mov	r0, r3
 800a588:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800a58a:	2002      	movs	r0, #2
 800a58c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800a58e:	2002      	movs	r0, #2
  }
}
 800a590:	4770      	bx	lr

0800a592 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a592:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b20      	cmp	r3, #32
 800a59a:	d122      	bne.n	800a5e2 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a59c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d020      	beq.n	800a5e6 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a5aa:	2324      	movs	r3, #36	; 0x24
 800a5ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a5b0:	6802      	ldr	r2, [r0, #0]
 800a5b2:	6813      	ldr	r3, [r2, #0]
 800a5b4:	f023 0301 	bic.w	r3, r3, #1
 800a5b8:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a5ba:	6802      	ldr	r2, [r0, #0]
 800a5bc:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a5be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a5c2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a5c6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a5c8:	6802      	ldr	r2, [r0, #0]
 800a5ca:	6813      	ldr	r3, [r2, #0]
 800a5cc:	f043 0301 	orr.w	r3, r3, #1
 800a5d0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5d2:	2320      	movs	r3, #32
 800a5d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800a5de:	4618      	mov	r0, r3
 800a5e0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800a5e2:	2002      	movs	r0, #2
 800a5e4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800a5e6:	2002      	movs	r0, #2
  }
}
 800a5e8:	4770      	bx	lr
	...

0800a5ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a5ee:	684d      	ldr	r5, [r1, #4]
 800a5f0:	6804      	ldr	r4, [r0, #0]
 800a5f2:	68e3      	ldr	r3, [r4, #12]
 800a5f4:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800a5f8:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a5fa:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 800a5fe:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800a602:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800a606:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a60a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a60e:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a610:	6804      	ldr	r4, [r0, #0]
 800a612:	68e6      	ldr	r6, [r4, #12]
 800a614:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a618:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a61a:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a61c:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a620:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a624:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a628:	68cd      	ldr	r5, [r1, #12]
 800a62a:	6804      	ldr	r4, [r0, #0]
 800a62c:	68e3      	ldr	r3, [r4, #12]
 800a62e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a632:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a634:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 800a638:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 800a63c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a640:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a644:	688b      	ldr	r3, [r1, #8]
 800a646:	6804      	ldr	r4, [r0, #0]
 800a648:	68e6      	ldr	r6, [r4, #12]
 800a64a:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800a64e:	4473      	add	r3, lr
 800a650:	3301      	adds	r3, #1
 800a652:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800a656:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a65a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a65e:	6803      	ldr	r3, [r0, #0]
 800a660:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a664:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800a668:	f024 0407 	bic.w	r4, r4, #7
 800a66c:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a670:	6803      	ldr	r3, [r0, #0]
 800a672:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a676:	690c      	ldr	r4, [r1, #16]
 800a678:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a67c:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a680:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a684:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a686:	6804      	ldr	r4, [r0, #0]
 800a688:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800a68c:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 800a690:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a694:	2400      	movs	r4, #0
 800a696:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a69a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800a69e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800a6a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a6a6:	6806      	ldr	r6, [r0, #0]
 800a6a8:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 800a6ac:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800a6b0:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 800a6b4:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a6b8:	6803      	ldr	r3, [r0, #0]
 800a6ba:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a6be:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 800a6c2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800a6c6:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a6ca:	6803      	ldr	r3, [r0, #0]
 800a6cc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a6d0:	694d      	ldr	r5, [r1, #20]
 800a6d2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a6d6:	6803      	ldr	r3, [r0, #0]
 800a6d8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a6dc:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800a6e0:	4d2e      	ldr	r5, [pc, #184]	; (800a79c <LTDC_SetConfig+0x1b0>)
 800a6e2:	4035      	ands	r5, r6
 800a6e4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a6e8:	6a0d      	ldr	r5, [r1, #32]
 800a6ea:	6803      	ldr	r3, [r0, #0]
 800a6ec:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a6f0:	69ce      	ldr	r6, [r1, #28]
 800a6f2:	4335      	orrs	r5, r6
 800a6f4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a6f8:	6803      	ldr	r3, [r0, #0]
 800a6fa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a6fe:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800a702:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a706:	6803      	ldr	r3, [r0, #0]
 800a708:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800a70c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a70e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a712:	690b      	ldr	r3, [r1, #16]
 800a714:	b16b      	cbz	r3, 800a732 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a716:	2b01      	cmp	r3, #1
 800a718:	d039      	beq.n	800a78e <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	bf18      	it	ne
 800a71e:	2b04      	cmpne	r3, #4
 800a720:	d037      	beq.n	800a792 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a722:	2b03      	cmp	r3, #3
 800a724:	d037      	beq.n	800a796 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a726:	2b07      	cmp	r3, #7
 800a728:	d001      	beq.n	800a72e <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800a72a:	2501      	movs	r5, #1
 800a72c:	e002      	b.n	800a734 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800a72e:	2502      	movs	r5, #2
 800a730:	e000      	b.n	800a734 <LTDC_SetConfig+0x148>
    tmp = 4U;
 800a732:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a734:	6802      	ldr	r2, [r0, #0]
 800a736:	4462      	add	r2, ip
 800a738:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800a73c:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800a740:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a744:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800a746:	fb05 f402 	mul.w	r4, r5, r2
 800a74a:	684b      	ldr	r3, [r1, #4]
 800a74c:	680a      	ldr	r2, [r1, #0]
 800a74e:	1a9b      	subs	r3, r3, r2
 800a750:	fb05 f303 	mul.w	r3, r5, r3
 800a754:	3307      	adds	r3, #7
 800a756:	6802      	ldr	r2, [r0, #0]
 800a758:	4462      	add	r2, ip
 800a75a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a75e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a762:	6803      	ldr	r3, [r0, #0]
 800a764:	4463      	add	r3, ip
 800a766:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800a76a:	4a0d      	ldr	r2, [pc, #52]	; (800a7a0 <LTDC_SetConfig+0x1b4>)
 800a76c:	4022      	ands	r2, r4
 800a76e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a772:	6803      	ldr	r3, [r0, #0]
 800a774:	4463      	add	r3, ip
 800a776:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a778:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a77c:	6803      	ldr	r3, [r0, #0]
 800a77e:	449c      	add	ip, r3
 800a780:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 800a784:	f043 0301 	orr.w	r3, r3, #1
 800a788:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 800a78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800a78e:	2503      	movs	r5, #3
 800a790:	e7d0      	b.n	800a734 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800a792:	2502      	movs	r5, #2
 800a794:	e7ce      	b.n	800a734 <LTDC_SetConfig+0x148>
 800a796:	2502      	movs	r5, #2
 800a798:	e7cc      	b.n	800a734 <LTDC_SetConfig+0x148>
 800a79a:	bf00      	nop
 800a79c:	fffff8f8 	.word	0xfffff8f8
 800a7a0:	fffff800 	.word	0xfffff800

0800a7a4 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d072      	beq.n	800a88e <HAL_LTDC_Init+0xea>
{
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a7ac:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d067      	beq.n	800a884 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	6993      	ldr	r3, [r2, #24]
 800a7be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7c2:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a7c4:	6821      	ldr	r1, [r4, #0]
 800a7c6:	698a      	ldr	r2, [r1, #24]
 800a7c8:	6863      	ldr	r3, [r4, #4]
 800a7ca:	68a0      	ldr	r0, [r4, #8]
 800a7cc:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a7ce:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a7d0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a7d2:	6920      	ldr	r0, [r4, #16]
 800a7d4:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a7da:	6821      	ldr	r1, [r4, #0]
 800a7dc:	688a      	ldr	r2, [r1, #8]
 800a7de:	4b2d      	ldr	r3, [pc, #180]	; (800a894 <HAL_LTDC_Init+0xf0>)
 800a7e0:	401a      	ands	r2, r3
 800a7e2:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a7e4:	6820      	ldr	r0, [r4, #0]
 800a7e6:	6882      	ldr	r2, [r0, #8]
 800a7e8:	69a1      	ldr	r1, [r4, #24]
 800a7ea:	6965      	ldr	r5, [r4, #20]
 800a7ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a7f4:	6821      	ldr	r1, [r4, #0]
 800a7f6:	68ca      	ldr	r2, [r1, #12]
 800a7f8:	401a      	ands	r2, r3
 800a7fa:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a7fc:	6820      	ldr	r0, [r4, #0]
 800a7fe:	68c2      	ldr	r2, [r0, #12]
 800a800:	6a21      	ldr	r1, [r4, #32]
 800a802:	69e5      	ldr	r5, [r4, #28]
 800a804:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a808:	430a      	orrs	r2, r1
 800a80a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a80c:	6821      	ldr	r1, [r4, #0]
 800a80e:	690a      	ldr	r2, [r1, #16]
 800a810:	401a      	ands	r2, r3
 800a812:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	6902      	ldr	r2, [r0, #16]
 800a818:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a81a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a81c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a820:	430a      	orrs	r2, r1
 800a822:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a824:	6821      	ldr	r1, [r4, #0]
 800a826:	694a      	ldr	r2, [r1, #20]
 800a828:	4013      	ands	r3, r2
 800a82a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a82c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a82e:	6821      	ldr	r1, [r4, #0]
 800a830:	694b      	ldr	r3, [r1, #20]
 800a832:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a834:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a838:	4313      	orrs	r3, r2
 800a83a:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a83c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a840:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a844:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a846:	6821      	ldr	r1, [r4, #0]
 800a848:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a84a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a84e:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a850:	6821      	ldr	r1, [r4, #0]
 800a852:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a854:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a858:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800a85c:	4303      	orrs	r3, r0
 800a85e:	4313      	orrs	r3, r2
 800a860:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a866:	f043 0306 	orr.w	r3, r3, #6
 800a86a:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	6993      	ldr	r3, [r2, #24]
 800a870:	f043 0301 	orr.w	r3, r3, #1
 800a874:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a876:	2000      	movs	r0, #0
 800a878:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800a87c:	2301      	movs	r3, #1
 800a87e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800a882:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800a884:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800a888:	f7f8 fb4c 	bl	8002f24 <HAL_LTDC_MspInit>
 800a88c:	e792      	b.n	800a7b4 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800a88e:	2001      	movs	r0, #1
}
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	f000f800 	.word	0xf000f800

0800a898 <HAL_LTDC_ErrorCallback>:
}
 800a898:	4770      	bx	lr

0800a89a <HAL_LTDC_ReloadEventCallback>:
}
 800a89a:	4770      	bx	lr

0800a89c <HAL_LTDC_IRQHandler>:
{
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a8a0:	6803      	ldr	r3, [r0, #0]
 800a8a2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a8a4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a8a6:	f015 0f04 	tst.w	r5, #4
 800a8aa:	d002      	beq.n	800a8b2 <HAL_LTDC_IRQHandler+0x16>
 800a8ac:	f016 0f04 	tst.w	r6, #4
 800a8b0:	d112      	bne.n	800a8d8 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a8b2:	f015 0f02 	tst.w	r5, #2
 800a8b6:	d002      	beq.n	800a8be <HAL_LTDC_IRQHandler+0x22>
 800a8b8:	f016 0f02 	tst.w	r6, #2
 800a8bc:	d121      	bne.n	800a902 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a8be:	f015 0f01 	tst.w	r5, #1
 800a8c2:	d002      	beq.n	800a8ca <HAL_LTDC_IRQHandler+0x2e>
 800a8c4:	f016 0f01 	tst.w	r6, #1
 800a8c8:	d132      	bne.n	800a930 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a8ca:	f015 0f08 	tst.w	r5, #8
 800a8ce:	d002      	beq.n	800a8d6 <HAL_LTDC_IRQHandler+0x3a>
 800a8d0:	f016 0f08 	tst.w	r6, #8
 800a8d4:	d13d      	bne.n	800a952 <HAL_LTDC_IRQHandler+0xb6>
}
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a8d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8da:	f022 0204 	bic.w	r2, r2, #4
 800a8de:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a8e0:	6803      	ldr	r3, [r0, #0]
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a8e6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800a8ea:	f043 0301 	orr.w	r3, r3, #1
 800a8ee:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a8f2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800a8fc:	f7ff ffcc 	bl	800a898 <HAL_LTDC_ErrorCallback>
 800a900:	e7d7      	b.n	800a8b2 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a902:	6822      	ldr	r2, [r4, #0]
 800a904:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a906:	f023 0302 	bic.w	r3, r3, #2
 800a90a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	2202      	movs	r2, #2
 800a910:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a912:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800a916:	4313      	orrs	r3, r2
 800a918:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a91c:	2304      	movs	r3, #4
 800a91e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800a922:	2300      	movs	r3, #0
 800a924:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800a928:	4620      	mov	r0, r4
 800a92a:	f7ff ffb5 	bl	800a898 <HAL_LTDC_ErrorCallback>
 800a92e:	e7c6      	b.n	800a8be <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a930:	6822      	ldr	r2, [r4, #0]
 800a932:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a934:	f023 0301 	bic.w	r3, r3, #1
 800a938:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a93a:	6822      	ldr	r2, [r4, #0]
 800a93c:	2301      	movs	r3, #1
 800a93e:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800a940:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800a944:	2300      	movs	r3, #0
 800a946:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800a94a:	4620      	mov	r0, r4
 800a94c:	f7f7 fb88 	bl	8002060 <HAL_LTDC_LineEventCallback>
 800a950:	e7bb      	b.n	800a8ca <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a956:	f023 0308 	bic.w	r3, r3, #8
 800a95a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	2208      	movs	r2, #8
 800a960:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800a962:	2301      	movs	r3, #1
 800a964:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800a968:	2300      	movs	r3, #0
 800a96a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a96e:	4620      	mov	r0, r4
 800a970:	f7ff ff93 	bl	800a89a <HAL_LTDC_ReloadEventCallback>
}
 800a974:	e7af      	b.n	800a8d6 <HAL_LTDC_IRQHandler+0x3a>

0800a976 <HAL_LTDC_ConfigLayer>:
{
 800a976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800a978:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d02c      	beq.n	800a9da <HAL_LTDC_ConfigLayer+0x64>
 800a980:	4604      	mov	r4, r0
 800a982:	460d      	mov	r5, r1
 800a984:	4616      	mov	r6, r2
 800a986:	2701      	movs	r7, #1
 800a988:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a98c:	2302      	movs	r3, #2
 800a98e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a992:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800a996:	fb0c 0c02 	mla	ip, ip, r2, r0
 800a99a:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800a99e:	468e      	mov	lr, r1
 800a9a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a9a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a9ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a9b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9b8:	f8de 3000 	ldr.w	r3, [lr]
 800a9bc:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f7ff fe11 	bl	800a5ec <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a9ce:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800a9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800a9da:	2002      	movs	r0, #2
 800a9dc:	e7fc      	b.n	800a9d8 <HAL_LTDC_ConfigLayer+0x62>
	...

0800a9e0 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800a9e0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d01a      	beq.n	800aa1e <HAL_LTDC_ProgramLineEvent+0x3e>
{
 800a9e8:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a9f6:	6804      	ldr	r4, [r0, #0]
 800a9f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9fa:	f023 0301 	bic.w	r3, r3, #1
 800a9fe:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800aa00:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <HAL_LTDC_ProgramLineEvent+0x44>)
 800aa02:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800aa04:	6801      	ldr	r1, [r0, #0]
 800aa06:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800aa0c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800aa10:	2300      	movs	r3, #0
 800aa12:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800aa16:	4618      	mov	r0, r3
}
 800aa18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa1c:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800aa1e:	2002      	movs	r0, #2
}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	50001000 	.word	0x50001000

0800aa28 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 800aa2c:	f7fe fbd8 	bl	80091e0 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800aa30:	2c00      	cmp	r4, #0
 800aa32:	d035      	beq.n	800aaa0 <HAL_MDMA_Abort+0x78>
 800aa34:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800aa36:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d006      	beq.n	800aa4e <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800aa40:	2380      	movs	r3, #128	; 0x80
 800aa42:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800aa44:	2300      	movs	r3, #0
 800aa46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 800aa4a:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800aa4e:	6822      	ldr	r2, [r4, #0]
 800aa50:	68d3      	ldr	r3, [r2, #12]
 800aa52:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800aa56:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 800aa58:	6822      	ldr	r2, [r4, #0]
 800aa5a:	68d3      	ldr	r3, [r2, #12]
 800aa5c:	f023 0301 	bic.w	r3, r3, #1
 800aa60:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	68da      	ldr	r2, [r3, #12]
 800aa66:	f012 0f01 	tst.w	r2, #1
 800aa6a:	d010      	beq.n	800aa8e <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800aa6c:	f7fe fbb8 	bl	80091e0 <HAL_GetTick>
 800aa70:	1b43      	subs	r3, r0, r5
 800aa72:	2b05      	cmp	r3, #5
 800aa74:	d9f5      	bls.n	800aa62 <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800aa76:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800aa78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa7c:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800aa84:	2303      	movs	r3, #3
 800aa86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	e7de      	b.n	800aa4c <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800aa8e:	221f      	movs	r2, #31
 800aa90:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 800aa92:	2000      	movs	r0, #0
 800aa94:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800aa9e:	e7d5      	b.n	800aa4c <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	e7d3      	b.n	800aa4c <HAL_MDMA_Abort+0x24>

0800aaa4 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800aaa4:	b190      	cbz	r0, 800aacc <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800aaa6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d003      	beq.n	800aab8 <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800aab0:	2380      	movs	r3, #128	; 0x80
 800aab2:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 800aab4:	2001      	movs	r0, #1
 800aab6:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800aab8:	2304      	movs	r3, #4
 800aaba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800aabe:	6802      	ldr	r2, [r0, #0]
 800aac0:	68d3      	ldr	r3, [r2, #12]
 800aac2:	f023 0301 	bic.w	r3, r3, #1
 800aac6:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800aac8:	2000      	movs	r0, #0
 800aaca:	4770      	bx	lr
    return HAL_ERROR;
 800aacc:	2001      	movs	r0, #1
}
 800aace:	4770      	bx	lr

0800aad0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800aad2:	6802      	ldr	r2, [r0, #0]
 800aad4:	6813      	ldr	r3, [r2, #0]
 800aad6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800aada:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800aadc:	6883      	ldr	r3, [r0, #8]
 800aade:	b933      	cbnz	r3, 800aaee <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800aae0:	6802      	ldr	r2, [r0, #0]
 800aae2:	6813      	ldr	r3, [r2, #0]
 800aae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae8:	684c      	ldr	r4, [r1, #4]
 800aaea:	4323      	orrs	r3, r4
 800aaec:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800aaee:	680b      	ldr	r3, [r1, #0]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d04d      	beq.n	800ab90 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d055      	beq.n	800aba4 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800aaf8:	6803      	ldr	r3, [r0, #0]
 800aafa:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800aafe:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800ab02:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800ab06:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800ab0a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800ab0c:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800ab0e:	432c      	orrs	r4, r5
 800ab10:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800ab12:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800ab14:	b15c      	cbz	r4, 800ab2e <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800ab16:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800ab18:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800ab1a:	6813      	ldr	r3, [r2, #0]
 800ab1c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800ab20:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800ab22:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800ab24:	432c      	orrs	r4, r5
 800ab26:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800ab28:	432c      	orrs	r4, r5
 800ab2a:	4323      	orrs	r3, r4
 800ab2c:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800ab2e:	f8de 3000 	ldr.w	r3, [lr]
 800ab32:	f023 031f 	bic.w	r3, r3, #31
 800ab36:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800ab38:	4323      	orrs	r3, r4
 800ab3a:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ab3e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800ab40:	b12b      	cbz	r3, 800ab4e <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800ab42:	680b      	ldr	r3, [r1, #0]
 800ab44:	b91b      	cbnz	r3, 800ab4e <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800ab46:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800ab48:	6804      	ldr	r4, [r0, #0]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800ab4e:	68cb      	ldr	r3, [r1, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d073      	beq.n	800ac3c <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800ab54:	69cc      	ldr	r4, [r1, #28]
 800ab56:	2c00      	cmp	r4, #0
 800ab58:	d048      	beq.n	800abec <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ab5a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800ab5c:	b365      	cbz	r5, 800abb8 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800ab5e:	6817      	ldr	r7, [r2, #0]
 800ab60:	4e48      	ldr	r6, [pc, #288]	; (800ac84 <OSPI_ConfigCmd+0x1b4>)
 800ab62:	403e      	ands	r6, r7
 800ab64:	694f      	ldr	r7, [r1, #20]
 800ab66:	433b      	orrs	r3, r7
 800ab68:	690f      	ldr	r7, [r1, #16]
 800ab6a:	433b      	orrs	r3, r7
 800ab6c:	431c      	orrs	r4, r3
 800ab6e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800ab70:	431c      	orrs	r4, r3
 800ab72:	6a0b      	ldr	r3, [r1, #32]
 800ab74:	431c      	orrs	r4, r3
 800ab76:	432c      	orrs	r4, r5
 800ab78:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800ab7a:	432c      	orrs	r4, r5
 800ab7c:	4334      	orrs	r4, r6
 800ab7e:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800ab80:	688b      	ldr	r3, [r1, #8]
 800ab82:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800ab86:	6803      	ldr	r3, [r0, #0]
 800ab88:	698a      	ldr	r2, [r1, #24]
 800ab8a:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800ab8c:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800ab8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 800ab90:	6803      	ldr	r3, [r0, #0]
 800ab92:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800ab96:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800ab9a:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 800ab9e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800aba2:	e7b2      	b.n	800ab0a <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 800aba4:	6803      	ldr	r3, [r0, #0]
 800aba6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800abaa:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800abae:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 800abb2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800abb6:	e7a8      	b.n	800ab0a <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800abb8:	6816      	ldr	r6, [r2, #0]
 800abba:	4d33      	ldr	r5, [pc, #204]	; (800ac88 <OSPI_ConfigCmd+0x1b8>)
 800abbc:	4035      	ands	r5, r6
 800abbe:	694e      	ldr	r6, [r1, #20]
 800abc0:	4333      	orrs	r3, r6
 800abc2:	690e      	ldr	r6, [r1, #16]
 800abc4:	4333      	orrs	r3, r6
 800abc6:	431c      	orrs	r4, r3
 800abc8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800abca:	431c      	orrs	r4, r3
 800abcc:	6a0b      	ldr	r3, [r1, #32]
 800abce:	431c      	orrs	r4, r3
 800abd0:	432c      	orrs	r4, r5
 800abd2:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800abd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800abd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abda:	d1d1      	bne.n	800ab80 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800abdc:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800abde:	2b08      	cmp	r3, #8
 800abe0:	d1ce      	bne.n	800ab80 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800abe2:	6813      	ldr	r3, [r2, #0]
 800abe4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	e7c9      	b.n	800ab80 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800abec:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800abee:	b184      	cbz	r4, 800ac12 <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800abf0:	6815      	ldr	r5, [r2, #0]
 800abf2:	4826      	ldr	r0, [pc, #152]	; (800ac8c <OSPI_ConfigCmd+0x1bc>)
 800abf4:	4028      	ands	r0, r5
 800abf6:	694d      	ldr	r5, [r1, #20]
 800abf8:	432b      	orrs	r3, r5
 800abfa:	690d      	ldr	r5, [r1, #16]
 800abfc:	432b      	orrs	r3, r5
 800abfe:	431c      	orrs	r4, r3
 800ac00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac02:	431c      	orrs	r4, r3
 800ac04:	4304      	orrs	r4, r0
 800ac06:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 800ac08:	688b      	ldr	r3, [r1, #8]
 800ac0a:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 800ac0e:	2000      	movs	r0, #0
 800ac10:	e7bd      	b.n	800ab8e <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800ac12:	6814      	ldr	r4, [r2, #0]
 800ac14:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800ac18:	694d      	ldr	r5, [r1, #20]
 800ac1a:	432b      	orrs	r3, r5
 800ac1c:	690d      	ldr	r5, [r1, #16]
 800ac1e:	432b      	orrs	r3, r5
 800ac20:	4323      	orrs	r3, r4
 800ac22:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ac24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ac26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac2a:	d1ed      	bne.n	800ac08 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800ac2c:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ac2e:	2b08      	cmp	r3, #8
 800ac30:	d1ea      	bne.n	800ac08 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800ac32:	6813      	ldr	r3, [r2, #0]
 800ac34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac38:	6013      	str	r3, [r2, #0]
 800ac3a:	e7e5      	b.n	800ac08 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800ac3c:	69cb      	ldr	r3, [r1, #28]
 800ac3e:	b1e3      	cbz	r3, 800ac7a <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ac40:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800ac42:	b184      	cbz	r4, 800ac66 <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800ac44:	6816      	ldr	r6, [r2, #0]
 800ac46:	4d12      	ldr	r5, [pc, #72]	; (800ac90 <OSPI_ConfigCmd+0x1c0>)
 800ac48:	4035      	ands	r5, r6
 800ac4a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800ac4c:	4333      	orrs	r3, r6
 800ac4e:	6a0e      	ldr	r6, [r1, #32]
 800ac50:	4333      	orrs	r3, r6
 800ac52:	4323      	orrs	r3, r4
 800ac54:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800ac56:	4323      	orrs	r3, r4
 800ac58:	432b      	orrs	r3, r5
 800ac5a:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 800ac5c:	6803      	ldr	r3, [r0, #0]
 800ac5e:	698a      	ldr	r2, [r1, #24]
 800ac60:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800ac62:	2000      	movs	r0, #0
 800ac64:	e793      	b.n	800ab8e <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800ac66:	6814      	ldr	r4, [r2, #0]
 800ac68:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800ac6c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800ac6e:	432b      	orrs	r3, r5
 800ac70:	6a0d      	ldr	r5, [r1, #32]
 800ac72:	432b      	orrs	r3, r5
 800ac74:	4323      	orrs	r3, r4
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	e7f0      	b.n	800ac5c <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800ac7a:	2308      	movs	r3, #8
 800ac7c:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 800ac7e:	2001      	movs	r0, #1
 800ac80:	e785      	b.n	800ab8e <OSPI_ConfigCmd+0xbe>
 800ac82:	bf00      	nop
 800ac84:	f0ffc0c0 	.word	0xf0ffc0c0
 800ac88:	ffffc0c0 	.word	0xffffc0c0
 800ac8c:	f0ffffc0 	.word	0xf0ffffc0
 800ac90:	f0ffc0ff 	.word	0xf0ffc0ff

0800ac94 <OSPI_WaitFlagStateUntilTimeout>:
{
 800ac94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac98:	4605      	mov	r5, r0
 800ac9a:	460f      	mov	r7, r1
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	4699      	mov	r9, r3
 800aca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800aca4:	682c      	ldr	r4, [r5, #0]
 800aca6:	6a24      	ldr	r4, [r4, #32]
 800aca8:	423c      	tst	r4, r7
 800acaa:	bf14      	ite	ne
 800acac:	f04f 0c01 	movne.w	ip, #1
 800acb0:	f04f 0c00 	moveq.w	ip, #0
 800acb4:	45b4      	cmp	ip, r6
 800acb6:	d014      	beq.n	800ace2 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800acb8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800acbc:	d0f2      	beq.n	800aca4 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acbe:	f7fe fa8f 	bl	80091e0 <HAL_GetTick>
 800acc2:	eba0 0009 	sub.w	r0, r0, r9
 800acc6:	4540      	cmp	r0, r8
 800acc8:	d802      	bhi.n	800acd0 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800acca:	f1b8 0f00 	cmp.w	r8, #0
 800acce:	d1e9      	bne.n	800aca4 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800acd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd4:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800acd6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800acd8:	f043 0301 	orr.w	r3, r3, #1
 800acdc:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 800acde:	2001      	movs	r0, #1
 800ace0:	e000      	b.n	800ace4 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 800ace2:	2000      	movs	r0, #0
}
 800ace4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ace8 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 800ace8:	b180      	cbz	r0, 800ad0c <HAL_OSPI_DeInit+0x24>
{
 800acea:	b510      	push	{r4, lr}
 800acec:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 800acee:	6802      	ldr	r2, [r0, #0]
 800acf0:	6813      	ldr	r3, [r2, #0]
 800acf2:	f023 0301 	bic.w	r3, r3, #1
 800acf6:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800acf8:	6802      	ldr	r2, [r0, #0]
 800acfa:	6893      	ldr	r3, [r2, #8]
 800acfc:	f023 0302 	bic.w	r3, r3, #2
 800ad00:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 800ad02:	f7f8 f9ed 	bl	80030e0 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800ad06:	2000      	movs	r0, #0
 800ad08:	6520      	str	r0, [r4, #80]	; 0x50
}
 800ad0a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800ad0c:	2001      	movs	r0, #1
}
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_OSPI_Command>:
{
 800ad10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	4604      	mov	r4, r0
 800ad18:	4688      	mov	r8, r1
 800ad1a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800ad1c:	f7fe fa60 	bl	80091e0 <HAL_GetTick>
 800ad20:	4606      	mov	r6, r0
  state = hospi->State;
 800ad22:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800ad24:	2d02      	cmp	r5, #2
 800ad26:	d009      	beq.n	800ad3c <HAL_OSPI_Command+0x2c>
 800ad28:	2d14      	cmp	r5, #20
 800ad2a:	d024      	beq.n	800ad76 <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800ad2c:	2d24      	cmp	r5, #36	; 0x24
 800ad2e:	d028      	beq.n	800ad82 <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800ad30:	2310      	movs	r3, #16
 800ad32:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800ad34:	2001      	movs	r0, #1
}
 800ad36:	b002      	add	sp, #8
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800ad3c:	68e3      	ldr	r3, [r4, #12]
 800ad3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad42:	d0f1      	beq.n	800ad28 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ad44:	9700      	str	r7, [sp, #0]
 800ad46:	4633      	mov	r3, r6
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2120      	movs	r1, #32
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f7ff ffa1 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d1ef      	bne.n	800ad36 <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800ad56:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800ad58:	4641      	mov	r1, r8
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f7ff feb8 	bl	800aad0 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d1e8      	bne.n	800ad36 <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800ad64:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800ad68:	b193      	cbz	r3, 800ad90 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800ad6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad6e:	b9d3      	cbnz	r3, 800ada6 <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800ad70:	2304      	movs	r3, #4
 800ad72:	6523      	str	r3, [r4, #80]	; 0x50
 800ad74:	e7df      	b.n	800ad36 <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800ad76:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800ad7a:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d8d5      	bhi.n	800ad2c <HAL_OSPI_Command+0x1c>
 800ad80:	e7e0      	b.n	800ad44 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800ad82:	f8d8 3000 	ldr.w	r3, [r8]
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	bf18      	it	ne
 800ad8a:	2b01      	cmpne	r3, #1
 800ad8c:	d1d0      	bne.n	800ad30 <HAL_OSPI_Command+0x20>
 800ad8e:	e7d9      	b.n	800ad44 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800ad90:	9700      	str	r7, [sp, #0]
 800ad92:	4633      	mov	r3, r6
 800ad94:	2201      	movs	r2, #1
 800ad96:	2102      	movs	r1, #2
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f7ff ff7b 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	2202      	movs	r2, #2
 800ada2:	625a      	str	r2, [r3, #36]	; 0x24
 800ada4:	e7c7      	b.n	800ad36 <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d007      	beq.n	800adba <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d1c3      	bne.n	800ad36 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800adae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800adb0:	2b14      	cmp	r3, #20
 800adb2:	d00b      	beq.n	800adcc <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800adb4:	2324      	movs	r3, #36	; 0x24
 800adb6:	6523      	str	r3, [r4, #80]	; 0x50
 800adb8:	e7bd      	b.n	800ad36 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800adba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800adbc:	2b24      	cmp	r3, #36	; 0x24
 800adbe:	d002      	beq.n	800adc6 <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800adc0:	2314      	movs	r3, #20
 800adc2:	6523      	str	r3, [r4, #80]	; 0x50
 800adc4:	e7b7      	b.n	800ad36 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800adc6:	2304      	movs	r3, #4
 800adc8:	6523      	str	r3, [r4, #80]	; 0x50
 800adca:	e7b4      	b.n	800ad36 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800adcc:	2304      	movs	r3, #4
 800adce:	6523      	str	r3, [r4, #80]	; 0x50
 800add0:	e7b1      	b.n	800ad36 <HAL_OSPI_Command+0x26>

0800add2 <HAL_OSPI_Transmit>:
{
 800add2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	4604      	mov	r4, r0
 800adda:	4688      	mov	r8, r1
 800addc:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800adde:	f7fe f9ff 	bl	80091e0 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800ade2:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 800ade4:	f1b8 0f00 	cmp.w	r8, #0
 800ade8:	d00a      	beq.n	800ae00 <HAL_OSPI_Transmit+0x2e>
 800adea:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800adec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800adee:	2b04      	cmp	r3, #4
 800adf0:	d00a      	beq.n	800ae08 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800adf2:	2310      	movs	r3, #16
 800adf4:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	b002      	add	sp, #8
 800adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800ae00:	2308      	movs	r3, #8
 800ae02:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e7f7      	b.n	800adf8 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800ae08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800ae0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ae10:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800ae12:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800ae1c:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800ae1e:	9600      	str	r6, [sp, #0]
 800ae20:	462b      	mov	r3, r5
 800ae22:	2201      	movs	r2, #1
 800ae24:	2104      	movs	r1, #4
 800ae26:	4620      	mov	r0, r4
 800ae28:	f7ff ff34 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b960      	cbnz	r0, 800ae4a <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800ae30:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ae32:	7812      	ldrb	r2, [r2, #0]
 800ae34:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 800ae38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ae3a:	3101      	adds	r1, #1
 800ae3c:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800ae3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ae40:	3901      	subs	r1, #1
 800ae42:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800ae44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ae46:	2a00      	cmp	r2, #0
 800ae48:	d1e9      	bne.n	800ae1e <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1d4      	bne.n	800adf8 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800ae4e:	9600      	str	r6, [sp, #0]
 800ae50:	462b      	mov	r3, r5
 800ae52:	2201      	movs	r2, #1
 800ae54:	2102      	movs	r1, #2
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7ff ff1c 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d1ca      	bne.n	800adf8 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800ae62:	6821      	ldr	r1, [r4, #0]
 800ae64:	2202      	movs	r2, #2
 800ae66:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800ae68:	6522      	str	r2, [r4, #80]	; 0x50
 800ae6a:	e7c5      	b.n	800adf8 <HAL_OSPI_Transmit+0x26>

0800ae6c <HAL_OSPI_Receive>:
{
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	4604      	mov	r4, r0
 800ae74:	4688      	mov	r8, r1
 800ae76:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800ae78:	f7fe f9b2 	bl	80091e0 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800ae7c:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 800ae7e:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800ae80:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 800ae84:	f1b8 0f00 	cmp.w	r8, #0
 800ae88:	d00a      	beq.n	800aea0 <HAL_OSPI_Receive+0x34>
 800ae8a:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800ae8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	d00a      	beq.n	800aea8 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800ae92:	2310      	movs	r3, #16
 800ae94:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	b002      	add	sp, #8
 800ae9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800aea0:	2308      	movs	r3, #8
 800aea2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e7f7      	b.n	800ae98 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800aea8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800aeaa:	3301      	adds	r3, #1
 800aeac:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800aeae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800aeb0:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800aeb2:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800aeb6:	682b      	ldr	r3, [r5, #0]
 800aeb8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800aebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aec0:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800aec2:	68e3      	ldr	r3, [r4, #12]
 800aec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aec8:	d007      	beq.n	800aeda <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800aed0:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 800aed4:	d02a      	beq.n	800af2c <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800aed6:	649a      	str	r2, [r3, #72]	; 0x48
 800aed8:	e001      	b.n	800aede <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800aede:	9700      	str	r7, [sp, #0]
 800aee0:	4633      	mov	r3, r6
 800aee2:	2201      	movs	r2, #1
 800aee4:	2106      	movs	r1, #6
 800aee6:	4620      	mov	r0, r4
 800aee8:	f7ff fed4 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800aeec:	4603      	mov	r3, r0
 800aeee:	b960      	cbnz	r0, 800af0a <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800aef0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aef2:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 800aef6:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800aef8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800aefa:	3101      	adds	r1, #1
 800aefc:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800aefe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af00:	3901      	subs	r1, #1
 800af02:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800af04:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800af06:	2a00      	cmp	r2, #0
 800af08:	d1e9      	bne.n	800aede <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1c4      	bne.n	800ae98 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800af0e:	9700      	str	r7, [sp, #0]
 800af10:	4633      	mov	r3, r6
 800af12:	2201      	movs	r2, #1
 800af14:	2102      	movs	r1, #2
 800af16:	4620      	mov	r0, r4
 800af18:	f7ff febc 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800af1c:	4603      	mov	r3, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	d1ba      	bne.n	800ae98 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800af22:	6821      	ldr	r1, [r4, #0]
 800af24:	2202      	movs	r2, #2
 800af26:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800af28:	6522      	str	r2, [r4, #80]	; 0x50
 800af2a:	e7b5      	b.n	800ae98 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800af2c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 800af30:	e7d5      	b.n	800aede <HAL_OSPI_Receive+0x72>

0800af32 <HAL_OSPI_AutoPolling>:
{
 800af32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af36:	b083      	sub	sp, #12
 800af38:	4604      	mov	r4, r0
 800af3a:	460d      	mov	r5, r1
 800af3c:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800af3e:	f7fe f94f 	bl	80091e0 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800af42:	6821      	ldr	r1, [r4, #0]
 800af44:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800af46:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800af4a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800af4c:	2904      	cmp	r1, #4
 800af4e:	d005      	beq.n	800af5c <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800af50:	2310      	movs	r3, #16
 800af52:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800af54:	2001      	movs	r0, #1
}
 800af56:	b003      	add	sp, #12
 800af58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5c:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800af5e:	68eb      	ldr	r3, [r5, #12]
 800af60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af64:	d1f4      	bne.n	800af50 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800af66:	f8cd 9000 	str.w	r9, [sp]
 800af6a:	4603      	mov	r3, r0
 800af6c:	2200      	movs	r2, #0
 800af6e:	2120      	movs	r1, #32
 800af70:	4620      	mov	r0, r4
 800af72:	f7ff fe8f 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800af76:	2800      	cmp	r0, #0
 800af78:	d1ed      	bne.n	800af56 <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	682a      	ldr	r2, [r5, #0]
 800af7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800af82:	6823      	ldr	r3, [r4, #0]
 800af84:	686a      	ldr	r2, [r5, #4]
 800af86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	692a      	ldr	r2, [r5, #16]
 800af8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800af92:	6821      	ldr	r1, [r4, #0]
 800af94:	680b      	ldr	r3, [r1, #0]
 800af96:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800af9a:	68aa      	ldr	r2, [r5, #8]
 800af9c:	68e8      	ldr	r0, [r5, #12]
 800af9e:	4302      	orrs	r2, r0
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800afa6:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800afa8:	68e3      	ldr	r3, [r4, #12]
 800afaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afae:	d007      	beq.n	800afc0 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800afb6:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800afba:	d013      	beq.n	800afe4 <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800afbc:	649f      	str	r7, [r3, #72]	; 0x48
 800afbe:	e001      	b.n	800afc4 <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800afc4:	f8cd 9000 	str.w	r9, [sp]
 800afc8:	4643      	mov	r3, r8
 800afca:	2201      	movs	r2, #1
 800afcc:	2108      	movs	r1, #8
 800afce:	4620      	mov	r0, r4
 800afd0:	f7ff fe60 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d1be      	bne.n	800af56 <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	2208      	movs	r2, #8
 800afdc:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800afde:	2302      	movs	r3, #2
 800afe0:	6523      	str	r3, [r4, #80]	; 0x50
 800afe2:	e7b8      	b.n	800af56 <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800afe4:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 800afe8:	e7ec      	b.n	800afc4 <HAL_OSPI_AutoPolling+0x92>
	...

0800afec <HAL_OSPI_MemoryMapped>:
{
 800afec:	b530      	push	{r4, r5, lr}
 800afee:	b083      	sub	sp, #12
 800aff0:	4604      	mov	r4, r0
 800aff2:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800aff4:	f7fe f8f4 	bl	80091e0 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800aff8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800affa:	2b04      	cmp	r3, #4
 800affc:	d004      	beq.n	800b008 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800affe:	2310      	movs	r3, #16
 800b000:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800b002:	2001      	movs	r0, #1
}
 800b004:	b003      	add	sp, #12
 800b006:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	4603      	mov	r3, r0
 800b00e:	2200      	movs	r2, #0
 800b010:	2120      	movs	r1, #32
 800b012:	4620      	mov	r0, r4
 800b014:	f7ff fe3e 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b018:	2800      	cmp	r0, #0
 800b01a:	d1f3      	bne.n	800b004 <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800b01c:	2388      	movs	r3, #136	; 0x88
 800b01e:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	2b08      	cmp	r3, #8
 800b024:	d009      	beq.n	800b03a <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800b026:	6822      	ldr	r2, [r4, #0]
 800b028:	6811      	ldr	r1, [r2, #0]
 800b02a:	4b0a      	ldr	r3, [pc, #40]	; (800b054 <HAL_OSPI_MemoryMapped+0x68>)
 800b02c:	400b      	ands	r3, r1
 800b02e:	6829      	ldr	r1, [r5, #0]
 800b030:	430b      	orrs	r3, r1
 800b032:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	e7e4      	b.n	800b004 <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	686a      	ldr	r2, [r5, #4]
 800b03e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	2210      	movs	r2, #16
 800b046:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800b048:	6822      	ldr	r2, [r4, #0]
 800b04a:	6813      	ldr	r3, [r2, #0]
 800b04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	e7e8      	b.n	800b026 <HAL_OSPI_MemoryMapped+0x3a>
 800b054:	cffffff7 	.word	0xcffffff7

0800b058 <HAL_OSPI_ErrorCallback>:
}
 800b058:	4770      	bx	lr

0800b05a <HAL_OSPI_AbortCpltCallback>:
}
 800b05a:	4770      	bx	lr

0800b05c <OSPI_DMAAbortCplt>:
{
 800b05c:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800b05e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800b064:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b06a:	d116      	bne.n	800b09a <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b06c:	6803      	ldr	r3, [r0, #0]
 800b06e:	6a1a      	ldr	r2, [r3, #32]
 800b070:	f012 0f20 	tst.w	r2, #32
 800b074:	d00c      	beq.n	800b090 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b076:	2202      	movs	r2, #2
 800b078:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800b07a:	6802      	ldr	r2, [r0, #0]
 800b07c:	6813      	ldr	r3, [r2, #0]
 800b07e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b082:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b084:	6802      	ldr	r2, [r0, #0]
 800b086:	6813      	ldr	r3, [r2, #0]
 800b088:	f043 0302 	orr.w	r3, r3, #2
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	e008      	b.n	800b0a2 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 800b090:	2302      	movs	r3, #2
 800b092:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800b094:	f7ff ffe1 	bl	800b05a <HAL_OSPI_AbortCpltCallback>
 800b098:	e003      	b.n	800b0a2 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800b09a:	2302      	movs	r3, #2
 800b09c:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800b09e:	f7ff ffdb 	bl	800b058 <HAL_OSPI_ErrorCallback>
}
 800b0a2:	bd08      	pop	{r3, pc}

0800b0a4 <HAL_OSPI_FifoThresholdCallback>:
}
 800b0a4:	4770      	bx	lr

0800b0a6 <HAL_OSPI_CmdCpltCallback>:
}
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_OSPI_RxCpltCallback>:
}
 800b0a8:	4770      	bx	lr

0800b0aa <HAL_OSPI_TxCpltCallback>:
}
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_OSPI_StatusMatchCallback>:
}
 800b0ac:	4770      	bx	lr

0800b0ae <HAL_OSPI_TimeOutCallback>:
}
 800b0ae:	4770      	bx	lr

0800b0b0 <HAL_OSPI_IRQHandler>:
{
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b0b4:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 800b0b6:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 800b0b8:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 800b0ba:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800b0bc:	f013 0f04 	tst.w	r3, #4
 800b0c0:	d027      	beq.n	800b112 <HAL_OSPI_IRQHandler+0x62>
 800b0c2:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800b0c6:	d024      	beq.n	800b112 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800b0c8:	2818      	cmp	r0, #24
 800b0ca:	d00c      	beq.n	800b0e6 <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b0cc:	2828      	cmp	r0, #40	; 0x28
 800b0ce:	d015      	beq.n	800b0fc <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 800b0d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b0d2:	b923      	cbnz	r3, 800b0de <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800b0d4:	6822      	ldr	r2, [r4, #0]
 800b0d6:	6813      	ldr	r3, [r2, #0]
 800b0d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0dc:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7ff ffe0 	bl	800b0a4 <HAL_OSPI_FifoThresholdCallback>
}
 800b0e4:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800b0e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 800b0ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800b0f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0fa:	e7e9      	b.n	800b0d0 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b0fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0fe:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800b102:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800b104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b106:	3301      	adds	r3, #1
 800b108:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800b10a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b10c:	3b01      	subs	r3, #1
 800b10e:	64a3      	str	r3, [r4, #72]	; 0x48
 800b110:	e7de      	b.n	800b0d0 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800b112:	f013 0f02 	tst.w	r3, #2
 800b116:	d044      	beq.n	800b1a2 <HAL_OSPI_IRQHandler+0xf2>
 800b118:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800b11c:	d041      	beq.n	800b1a2 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b11e:	2828      	cmp	r0, #40	; 0x28
 800b120:	d014      	beq.n	800b14c <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800b122:	2102      	movs	r1, #2
 800b124:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800b126:	6822      	ldr	r2, [r4, #0]
 800b128:	6813      	ldr	r3, [r2, #0]
 800b12a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800b12e:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800b130:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800b132:	2818      	cmp	r0, #24
 800b134:	d029      	beq.n	800b18a <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800b136:	2808      	cmp	r0, #8
 800b138:	d02b      	beq.n	800b192 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800b13a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b13e:	d1d1      	bne.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800b140:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b142:	bb53      	cbnz	r3, 800b19a <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 800b144:	4620      	mov	r0, r4
 800b146:	f7ff ff88 	bl	800b05a <HAL_OSPI_AbortCpltCallback>
 800b14a:	e7cb      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800b14c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b14e:	b169      	cbz	r1, 800b16c <HAL_OSPI_IRQHandler+0xbc>
 800b150:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 800b154:	d00a      	beq.n	800b16c <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b158:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800b15c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800b15e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b160:	3301      	adds	r3, #1
 800b162:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 800b164:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b166:	3b01      	subs	r3, #1
 800b168:	64a3      	str	r3, [r4, #72]	; 0x48
 800b16a:	e7bb      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 800b16c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1b8      	bne.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800b172:	2102      	movs	r1, #2
 800b174:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	6813      	ldr	r3, [r2, #0]
 800b17a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800b17e:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 800b180:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 800b182:	4620      	mov	r0, r4
 800b184:	f7ff ff90 	bl	800b0a8 <HAL_OSPI_RxCpltCallback>
 800b188:	e7ac      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800b18a:	4620      	mov	r0, r4
 800b18c:	f7ff ff8d 	bl	800b0aa <HAL_OSPI_TxCpltCallback>
 800b190:	e7a8      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 800b192:	4620      	mov	r0, r4
 800b194:	f7ff ff87 	bl	800b0a6 <HAL_OSPI_CmdCpltCallback>
 800b198:	e7a4      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800b19a:	4620      	mov	r0, r4
 800b19c:	f7ff ff5c 	bl	800b058 <HAL_OSPI_ErrorCallback>
 800b1a0:	e7a0      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800b1a2:	f013 0f08 	tst.w	r3, #8
 800b1a6:	d013      	beq.n	800b1d0 <HAL_OSPI_IRQHandler+0x120>
 800b1a8:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 800b1ac:	d010      	beq.n	800b1d0 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800b1ae:	2308      	movs	r3, #8
 800b1b0:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800b1ba:	d005      	beq.n	800b1c8 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b1c2:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f7ff ff6f 	bl	800b0ac <HAL_OSPI_StatusMatchCallback>
 800b1ce:	e789      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800b1d0:	f013 0f01 	tst.w	r3, #1
 800b1d4:	d029      	beq.n	800b22a <HAL_OSPI_IRQHandler+0x17a>
 800b1d6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800b1da:	d026      	beq.n	800b22a <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800b1e0:	6822      	ldr	r2, [r4, #0]
 800b1e2:	6813      	ldr	r3, [r2, #0]
 800b1e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b1e8:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	f012 0f04 	tst.w	r2, #4
 800b1f6:	d012      	beq.n	800b21e <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	f022 0204 	bic.w	r2, r2, #4
 800b1fe:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800b200:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b202:	4a11      	ldr	r2, [pc, #68]	; (800b248 <HAL_OSPI_IRQHandler+0x198>)
 800b204:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800b206:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b208:	f7ff fc4c 	bl	800aaa4 <HAL_MDMA_Abort_IT>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f43f af69 	beq.w	800b0e4 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 800b212:	2302      	movs	r3, #2
 800b214:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 800b216:	4620      	mov	r0, r4
 800b218:	f7ff ff1e 	bl	800b058 <HAL_OSPI_ErrorCallback>
 800b21c:	e762      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 800b21e:	2302      	movs	r3, #2
 800b220:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 800b222:	4620      	mov	r0, r4
 800b224:	f7ff ff18 	bl	800b058 <HAL_OSPI_ErrorCallback>
 800b228:	e75c      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800b22a:	f013 0f10 	tst.w	r3, #16
 800b22e:	f43f af59 	beq.w	800b0e4 <HAL_OSPI_IRQHandler+0x34>
 800b232:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b236:	f43f af55 	beq.w	800b0e4 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800b23a:	2310      	movs	r3, #16
 800b23c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 800b23e:	4620      	mov	r0, r4
 800b240:	f7ff ff35 	bl	800b0ae <HAL_OSPI_TimeOutCallback>
}
 800b244:	e74e      	b.n	800b0e4 <HAL_OSPI_IRQHandler+0x34>
 800b246:	bf00      	nop
 800b248:	0800b05d 	.word	0x0800b05d

0800b24c <HAL_OSPI_Abort>:
{
 800b24c:	b530      	push	{r4, r5, lr}
 800b24e:	b083      	sub	sp, #12
 800b250:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b252:	f7fd ffc5 	bl	80091e0 <HAL_GetTick>
  state = hospi->State;
 800b256:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800b258:	f012 0f0c 	tst.w	r2, #12
 800b25c:	d036      	beq.n	800b2cc <HAL_OSPI_Abort+0x80>
 800b25e:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	f012 0f04 	tst.w	r2, #4
 800b268:	d108      	bne.n	800b27c <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800b26a:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	6a1a      	ldr	r2, [r3, #32]
 800b270:	f012 0f20 	tst.w	r2, #32
 800b274:	d10e      	bne.n	800b294 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 800b276:	2302      	movs	r3, #2
 800b278:	6523      	str	r3, [r4, #80]	; 0x50
 800b27a:	e02a      	b.n	800b2d2 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	f022 0204 	bic.w	r2, r2, #4
 800b282:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 800b284:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b286:	f7ff fbcf 	bl	800aa28 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d0ee      	beq.n	800b26c <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800b28e:	2304      	movs	r3, #4
 800b290:	6563      	str	r3, [r4, #84]	; 0x54
 800b292:	e7eb      	b.n	800b26c <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	f042 0202 	orr.w	r2, r2, #2
 800b29a:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800b29c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	462b      	mov	r3, r5
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	2102      	movs	r1, #2
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7ff fcf4 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b2ac:	b988      	cbnz	r0, 800b2d2 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b2b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2120      	movs	r1, #32
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f7ff fce8 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b2c4:	b928      	cbnz	r0, 800b2d2 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 800b2c6:	2302      	movs	r3, #2
 800b2c8:	6523      	str	r3, [r4, #80]	; 0x50
 800b2ca:	e002      	b.n	800b2d2 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b2cc:	2310      	movs	r3, #16
 800b2ce:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800b2d0:	2001      	movs	r0, #1
}
 800b2d2:	b003      	add	sp, #12
 800b2d4:	bd30      	pop	{r4, r5, pc}

0800b2d6 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 800b2d6:	6581      	str	r1, [r0, #88]	; 0x58
}
 800b2d8:	2000      	movs	r0, #0
 800b2da:	4770      	bx	lr

0800b2dc <HAL_OSPI_Init>:
{
 800b2dc:	b530      	push	{r4, r5, lr}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b2e2:	f7fd ff7d 	bl	80091e0 <HAL_GetTick>
  if (hospi == NULL)
 800b2e6:	2c00      	cmp	r4, #0
 800b2e8:	d077      	beq.n	800b3da <HAL_OSPI_Init+0xfe>
 800b2ea:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800b2f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b2f2:	b113      	cbz	r3, 800b2fa <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 800b2f4:	2000      	movs	r0, #0
}
 800b2f6:	b003      	add	sp, #12
 800b2f8:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f7f7 fea6 	bl	800304c <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800b300:	f241 3188 	movw	r1, #5000	; 0x1388
 800b304:	4620      	mov	r0, r4
 800b306:	f7ff ffe6 	bl	800b2d6 <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800b30a:	6820      	ldr	r0, [r4, #0]
 800b30c:	6882      	ldr	r2, [r0, #8]
 800b30e:	4b34      	ldr	r3, [pc, #208]	; (800b3e0 <HAL_OSPI_Init+0x104>)
 800b310:	4013      	ands	r3, r2
 800b312:	68e2      	ldr	r2, [r4, #12]
 800b314:	6921      	ldr	r1, [r4, #16]
 800b316:	3901      	subs	r1, #1
 800b318:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b31c:	6961      	ldr	r1, [r4, #20]
 800b31e:	3901      	subs	r1, #1
 800b320:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b326:	430a      	orrs	r2, r1
 800b328:	69e1      	ldr	r1, [r4, #28]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	4313      	orrs	r3, r2
 800b32e:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800b330:	6822      	ldr	r2, [r4, #0]
 800b332:	68d3      	ldr	r3, [r2, #12]
 800b334:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800b338:	6a21      	ldr	r1, [r4, #32]
 800b33a:	430b      	orrs	r3, r1
 800b33c:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b33e:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800b340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b342:	6822      	ldr	r2, [r4, #0]
 800b344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b348:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b34e:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800b350:	6821      	ldr	r1, [r4, #0]
 800b352:	680b      	ldr	r3, [r1, #0]
 800b354:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800b358:	6862      	ldr	r2, [r4, #4]
 800b35a:	3a01      	subs	r2, #1
 800b35c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b360:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	462b      	mov	r3, r5
 800b368:	2200      	movs	r2, #0
 800b36a:	2120      	movs	r1, #32
 800b36c:	4620      	mov	r0, r4
 800b36e:	f7ff fc91 	bl	800ac94 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b372:	2800      	cmp	r0, #0
 800b374:	d1bf      	bne.n	800b2f6 <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800b376:	6821      	ldr	r1, [r4, #0]
 800b378:	68cb      	ldr	r3, [r1, #12]
 800b37a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b37e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b380:	3a01      	subs	r2, #1
 800b382:	4313      	orrs	r3, r2
 800b384:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800b386:	6822      	ldr	r2, [r4, #0]
 800b388:	6813      	ldr	r3, [r2, #0]
 800b38a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b38e:	68a1      	ldr	r1, [r4, #8]
 800b390:	430b      	orrs	r3, r1
 800b392:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800b394:	6821      	ldr	r1, [r4, #0]
 800b396:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800b39a:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 800b39e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b3a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800b3a2:	432a      	orrs	r2, r5
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800b3aa:	6822      	ldr	r2, [r4, #0]
 800b3ac:	6813      	ldr	r3, [r2, #0]
 800b3ae:	f043 0301 	orr.w	r3, r3, #1
 800b3b2:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800b3b4:	69a3      	ldr	r3, [r4, #24]
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d006      	beq.n	800b3c8 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b3ba:	68e3      	ldr	r3, [r4, #12]
 800b3bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3c0:	d008      	beq.n	800b3d4 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	6523      	str	r3, [r4, #80]	; 0x50
 800b3c6:	e796      	b.n	800b2f6 <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b3c8:	6822      	ldr	r2, [r4, #0]
 800b3ca:	6893      	ldr	r3, [r2, #8]
 800b3cc:	f043 0302 	orr.w	r3, r3, #2
 800b3d0:	6093      	str	r3, [r2, #8]
 800b3d2:	e7f2      	b.n	800b3ba <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	6523      	str	r3, [r4, #80]	; 0x50
 800b3d8:	e78d      	b.n	800b2f6 <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 800b3da:	2001      	movs	r0, #1
 800b3dc:	e78b      	b.n	800b2f6 <HAL_OSPI_Init+0x1a>
 800b3de:	bf00      	nop
 800b3e0:	f8e0f8f4 	.word	0xf8e0f8f4

0800b3e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b3e8:	4b22      	ldr	r3, [pc, #136]	; (800b474 <HAL_PWREx_ConfigSupply+0x90>)
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	f003 0307 	and.w	r3, r3, #7
 800b3f0:	2b06      	cmp	r3, #6
 800b3f2:	d007      	beq.n	800b404 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b3f4:	4b1f      	ldr	r3, [pc, #124]	; (800b474 <HAL_PWREx_ConfigSupply+0x90>)
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3fc:	4283      	cmp	r3, r0
 800b3fe:	d036      	beq.n	800b46e <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b400:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800b402:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b404:	4a1b      	ldr	r2, [pc, #108]	; (800b474 <HAL_PWREx_ConfigSupply+0x90>)
 800b406:	68d3      	ldr	r3, [r2, #12]
 800b408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b40c:	4303      	orrs	r3, r0
 800b40e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800b410:	f7fd fee6 	bl	80091e0 <HAL_GetTick>
 800b414:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b416:	4b17      	ldr	r3, [pc, #92]	; (800b474 <HAL_PWREx_ConfigSupply+0x90>)
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b41e:	d107      	bne.n	800b430 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b420:	f7fd fede 	bl	80091e0 <HAL_GetTick>
 800b424:	1b43      	subs	r3, r0, r5
 800b426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b42a:	d9f4      	bls.n	800b416 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 800b42c:	2001      	movs	r0, #1
 800b42e:	e7e8      	b.n	800b402 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b430:	2c2e      	cmp	r4, #46	; 0x2e
 800b432:	bf18      	it	ne
 800b434:	2c1e      	cmpne	r4, #30
 800b436:	d008      	beq.n	800b44a <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800b438:	2c2d      	cmp	r4, #45	; 0x2d
 800b43a:	bf14      	ite	ne
 800b43c:	2300      	movne	r3, #0
 800b43e:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b440:	2c1d      	cmp	r4, #29
 800b442:	d002      	beq.n	800b44a <HAL_PWREx_ConfigSupply+0x66>
 800b444:	b90b      	cbnz	r3, 800b44a <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 800b446:	2000      	movs	r0, #0
 800b448:	e7db      	b.n	800b402 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 800b44a:	f7fd fec9 	bl	80091e0 <HAL_GetTick>
 800b44e:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b450:	4b08      	ldr	r3, [pc, #32]	; (800b474 <HAL_PWREx_ConfigSupply+0x90>)
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b458:	d107      	bne.n	800b46a <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b45a:	f7fd fec1 	bl	80091e0 <HAL_GetTick>
 800b45e:	1b00      	subs	r0, r0, r4
 800b460:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b464:	d9f4      	bls.n	800b450 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 800b466:	2001      	movs	r0, #1
 800b468:	e7cb      	b.n	800b402 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 800b46a:	2000      	movs	r0, #0
 800b46c:	e7c9      	b.n	800b402 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 800b46e:	2000      	movs	r0, #0
 800b470:	e7c7      	b.n	800b402 <HAL_PWREx_ConfigSupply+0x1e>
 800b472:	bf00      	nop
 800b474:	58024800 	.word	0x58024800

0800b478 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b478:	2800      	cmp	r0, #0
 800b47a:	f000 82f0 	beq.w	800ba5e <HAL_RCC_OscConfig+0x5e6>
{
 800b47e:	b538      	push	{r3, r4, r5, lr}
 800b480:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b482:	6803      	ldr	r3, [r0, #0]
 800b484:	f013 0f01 	tst.w	r3, #1
 800b488:	d029      	beq.n	800b4de <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b48a:	4aa1      	ldr	r2, [pc, #644]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b48c:	6913      	ldr	r3, [r2, #16]
 800b48e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b492:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b494:	2b10      	cmp	r3, #16
 800b496:	d019      	beq.n	800b4cc <HAL_RCC_OscConfig+0x54>
 800b498:	2b18      	cmp	r3, #24
 800b49a:	d013      	beq.n	800b4c4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b49c:	6863      	ldr	r3, [r4, #4]
 800b49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4a2:	d043      	beq.n	800b52c <HAL_RCC_OscConfig+0xb4>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d158      	bne.n	800b55a <HAL_RCC_OscConfig+0xe2>
 800b4a8:	4b99      	ldr	r3, [pc, #612]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	e038      	b.n	800b536 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b4c4:	f002 0203 	and.w	r2, r2, #3
 800b4c8:	2a02      	cmp	r2, #2
 800b4ca:	d1e7      	bne.n	800b49c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4cc:	4b90      	ldr	r3, [pc, #576]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b4d4:	d003      	beq.n	800b4de <HAL_RCC_OscConfig+0x66>
 800b4d6:	6863      	ldr	r3, [r4, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 82c2 	beq.w	800ba62 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f013 0f02 	tst.w	r3, #2
 800b4e4:	f000 80a2 	beq.w	800b62c <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4e8:	4a89      	ldr	r2, [pc, #548]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b4ea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b4ee:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800b4f2:	d074      	beq.n	800b5de <HAL_RCC_OscConfig+0x166>
 800b4f4:	2b18      	cmp	r3, #24
 800b4f6:	d06f      	beq.n	800b5d8 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b4f8:	68e3      	ldr	r3, [r4, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 80c3 	beq.w	800b686 <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b500:	4983      	ldr	r1, [pc, #524]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b502:	680a      	ldr	r2, [r1, #0]
 800b504:	f022 0219 	bic.w	r2, r2, #25
 800b508:	4313      	orrs	r3, r2
 800b50a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b50c:	f7fd fe68 	bl	80091e0 <HAL_GetTick>
 800b510:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b512:	4b7f      	ldr	r3, [pc, #508]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f013 0f04 	tst.w	r3, #4
 800b51a:	f040 80ab 	bne.w	800b674 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b51e:	f7fd fe5f 	bl	80091e0 <HAL_GetTick>
 800b522:	1b40      	subs	r0, r0, r5
 800b524:	2802      	cmp	r0, #2
 800b526:	d9f4      	bls.n	800b512 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 800b528:	2003      	movs	r0, #3
 800b52a:	e2a1      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b52c:	4a78      	ldr	r2, [pc, #480]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b52e:	6813      	ldr	r3, [r2, #0]
 800b530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b534:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b536:	6863      	ldr	r3, [r4, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d03e      	beq.n	800b5ba <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 800b53c:	f7fd fe50 	bl	80091e0 <HAL_GetTick>
 800b540:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b542:	4b73      	ldr	r3, [pc, #460]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b54a:	d1c8      	bne.n	800b4de <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b54c:	f7fd fe48 	bl	80091e0 <HAL_GetTick>
 800b550:	1b40      	subs	r0, r0, r5
 800b552:	2864      	cmp	r0, #100	; 0x64
 800b554:	d9f5      	bls.n	800b542 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800b556:	2003      	movs	r0, #3
 800b558:	e28a      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b55a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b55e:	d010      	beq.n	800b582 <HAL_RCC_OscConfig+0x10a>
 800b560:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800b564:	d01b      	beq.n	800b59e <HAL_RCC_OscConfig+0x126>
 800b566:	4b6a      	ldr	r3, [pc, #424]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	e7d9      	b.n	800b536 <HAL_RCC_OscConfig+0xbe>
 800b582:	4b63      	ldr	r3, [pc, #396]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	e7cb      	b.n	800b536 <HAL_RCC_OscConfig+0xbe>
 800b59e:	4b5c      	ldr	r3, [pc, #368]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	e7bd      	b.n	800b536 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800b5ba:	f7fd fe11 	bl	80091e0 <HAL_GetTick>
 800b5be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b5c0:	4b53      	ldr	r3, [pc, #332]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b5c8:	d089      	beq.n	800b4de <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b5ca:	f7fd fe09 	bl	80091e0 <HAL_GetTick>
 800b5ce:	1b40      	subs	r0, r0, r5
 800b5d0:	2864      	cmp	r0, #100	; 0x64
 800b5d2:	d9f5      	bls.n	800b5c0 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 800b5d4:	2003      	movs	r0, #3
 800b5d6:	e24b      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b5d8:	f012 0f03 	tst.w	r2, #3
 800b5dc:	d18c      	bne.n	800b4f8 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5de:	4b4c      	ldr	r3, [pc, #304]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f013 0f04 	tst.w	r3, #4
 800b5e6:	d003      	beq.n	800b5f0 <HAL_RCC_OscConfig+0x178>
 800b5e8:	68e3      	ldr	r3, [r4, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f000 823b 	beq.w	800ba66 <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b5f0:	4a47      	ldr	r2, [pc, #284]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b5f2:	6813      	ldr	r3, [r2, #0]
 800b5f4:	f023 0319 	bic.w	r3, r3, #25
 800b5f8:	68e1      	ldr	r1, [r4, #12]
 800b5fa:	430b      	orrs	r3, r1
 800b5fc:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 800b5fe:	f7fd fdef 	bl	80091e0 <HAL_GetTick>
 800b602:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b604:	4b42      	ldr	r3, [pc, #264]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f013 0f04 	tst.w	r3, #4
 800b60c:	d106      	bne.n	800b61c <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b60e:	f7fd fde7 	bl	80091e0 <HAL_GetTick>
 800b612:	1b40      	subs	r0, r0, r5
 800b614:	2802      	cmp	r0, #2
 800b616:	d9f5      	bls.n	800b604 <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 800b618:	2003      	movs	r0, #3
 800b61a:	e229      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b61c:	4a3c      	ldr	r2, [pc, #240]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b61e:	6853      	ldr	r3, [r2, #4]
 800b620:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b624:	6921      	ldr	r1, [r4, #16]
 800b626:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b62a:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	f013 0f10 	tst.w	r3, #16
 800b632:	d051      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b634:	4a36      	ldr	r2, [pc, #216]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b636:	6913      	ldr	r3, [r2, #16]
 800b638:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b63c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b63e:	2b08      	cmp	r3, #8
 800b640:	d039      	beq.n	800b6b6 <HAL_RCC_OscConfig+0x23e>
 800b642:	2b18      	cmp	r3, #24
 800b644:	d033      	beq.n	800b6ae <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b646:	69e3      	ldr	r3, [r4, #28]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d06c      	beq.n	800b726 <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b64c:	4a30      	ldr	r2, [pc, #192]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b64e:	6813      	ldr	r3, [r2, #0]
 800b650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b656:	f7fd fdc3 	bl	80091e0 <HAL_GetTick>
 800b65a:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b65c:	4b2c      	ldr	r3, [pc, #176]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b664:	d156      	bne.n	800b714 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b666:	f7fd fdbb 	bl	80091e0 <HAL_GetTick>
 800b66a:	1b40      	subs	r0, r0, r5
 800b66c:	2802      	cmp	r0, #2
 800b66e:	d9f5      	bls.n	800b65c <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 800b670:	2003      	movs	r0, #3
 800b672:	e1fd      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b674:	4a26      	ldr	r2, [pc, #152]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b676:	6853      	ldr	r3, [r2, #4]
 800b678:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b67c:	6921      	ldr	r1, [r4, #16]
 800b67e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b682:	6053      	str	r3, [r2, #4]
 800b684:	e7d2      	b.n	800b62c <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 800b686:	4a22      	ldr	r2, [pc, #136]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b688:	6813      	ldr	r3, [r2, #0]
 800b68a:	f023 0301 	bic.w	r3, r3, #1
 800b68e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b690:	f7fd fda6 	bl	80091e0 <HAL_GetTick>
 800b694:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b696:	4b1e      	ldr	r3, [pc, #120]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f013 0f04 	tst.w	r3, #4
 800b69e:	d0c5      	beq.n	800b62c <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b6a0:	f7fd fd9e 	bl	80091e0 <HAL_GetTick>
 800b6a4:	1b40      	subs	r0, r0, r5
 800b6a6:	2802      	cmp	r0, #2
 800b6a8:	d9f5      	bls.n	800b696 <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 800b6aa:	2003      	movs	r0, #3
 800b6ac:	e1e0      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b6ae:	f002 0203 	and.w	r2, r2, #3
 800b6b2:	2a01      	cmp	r2, #1
 800b6b4:	d1c7      	bne.n	800b646 <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b6b6:	4b16      	ldr	r3, [pc, #88]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b6be:	d003      	beq.n	800b6c8 <HAL_RCC_OscConfig+0x250>
 800b6c0:	69e3      	ldr	r3, [r4, #28]
 800b6c2:	2b80      	cmp	r3, #128	; 0x80
 800b6c4:	f040 81d1 	bne.w	800ba6a <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b6c8:	4a11      	ldr	r2, [pc, #68]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b6ca:	68d3      	ldr	r3, [r2, #12]
 800b6cc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b6d0:	6a21      	ldr	r1, [r4, #32]
 800b6d2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b6d6:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	f013 0f08 	tst.w	r3, #8
 800b6de:	d04a      	beq.n	800b776 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b6e0:	6963      	ldr	r3, [r4, #20]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d033      	beq.n	800b74e <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6e6:	4a0a      	ldr	r2, [pc, #40]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b6e8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800b6ea:	f043 0301 	orr.w	r3, r3, #1
 800b6ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6f0:	f7fd fd76 	bl	80091e0 <HAL_GetTick>
 800b6f4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6f6:	4b06      	ldr	r3, [pc, #24]	; (800b710 <HAL_RCC_OscConfig+0x298>)
 800b6f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6fa:	f013 0f02 	tst.w	r3, #2
 800b6fe:	d13a      	bne.n	800b776 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b700:	f7fd fd6e 	bl	80091e0 <HAL_GetTick>
 800b704:	1b40      	subs	r0, r0, r5
 800b706:	2802      	cmp	r0, #2
 800b708:	d9f5      	bls.n	800b6f6 <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 800b70a:	2003      	movs	r0, #3
 800b70c:	e1b0      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800b70e:	bf00      	nop
 800b710:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b714:	4a8c      	ldr	r2, [pc, #560]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b716:	68d3      	ldr	r3, [r2, #12]
 800b718:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b71c:	6a21      	ldr	r1, [r4, #32]
 800b71e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b722:	60d3      	str	r3, [r2, #12]
 800b724:	e7d8      	b.n	800b6d8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 800b726:	4a88      	ldr	r2, [pc, #544]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b728:	6813      	ldr	r3, [r2, #0]
 800b72a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b72e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b730:	f7fd fd56 	bl	80091e0 <HAL_GetTick>
 800b734:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b736:	4b84      	ldr	r3, [pc, #528]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b73e:	d0cb      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b740:	f7fd fd4e 	bl	80091e0 <HAL_GetTick>
 800b744:	1b40      	subs	r0, r0, r5
 800b746:	2802      	cmp	r0, #2
 800b748:	d9f5      	bls.n	800b736 <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 800b74a:	2003      	movs	r0, #3
 800b74c:	e190      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b74e:	4a7e      	ldr	r2, [pc, #504]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b750:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800b752:	f023 0301 	bic.w	r3, r3, #1
 800b756:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b758:	f7fd fd42 	bl	80091e0 <HAL_GetTick>
 800b75c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b75e:	4b7a      	ldr	r3, [pc, #488]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b762:	f013 0f02 	tst.w	r3, #2
 800b766:	d006      	beq.n	800b776 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b768:	f7fd fd3a 	bl	80091e0 <HAL_GetTick>
 800b76c:	1b40      	subs	r0, r0, r5
 800b76e:	2802      	cmp	r0, #2
 800b770:	d9f5      	bls.n	800b75e <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 800b772:	2003      	movs	r0, #3
 800b774:	e17c      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	f013 0f20 	tst.w	r3, #32
 800b77c:	d029      	beq.n	800b7d2 <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b77e:	69a3      	ldr	r3, [r4, #24]
 800b780:	b19b      	cbz	r3, 800b7aa <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b782:	4a71      	ldr	r2, [pc, #452]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b784:	6813      	ldr	r3, [r2, #0]
 800b786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b78a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b78c:	f7fd fd28 	bl	80091e0 <HAL_GetTick>
 800b790:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b792:	4b6d      	ldr	r3, [pc, #436]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b79a:	d11a      	bne.n	800b7d2 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b79c:	f7fd fd20 	bl	80091e0 <HAL_GetTick>
 800b7a0:	1b40      	subs	r0, r0, r5
 800b7a2:	2802      	cmp	r0, #2
 800b7a4:	d9f5      	bls.n	800b792 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 800b7a6:	2003      	movs	r0, #3
 800b7a8:	e162      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b7aa:	4a67      	ldr	r2, [pc, #412]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b7ac:	6813      	ldr	r3, [r2, #0]
 800b7ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b7b4:	f7fd fd14 	bl	80091e0 <HAL_GetTick>
 800b7b8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b7ba:	4b63      	ldr	r3, [pc, #396]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b7c2:	d006      	beq.n	800b7d2 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b7c4:	f7fd fd0c 	bl	80091e0 <HAL_GetTick>
 800b7c8:	1b40      	subs	r0, r0, r5
 800b7ca:	2802      	cmp	r0, #2
 800b7cc:	d9f5      	bls.n	800b7ba <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 800b7ce:	2003      	movs	r0, #3
 800b7d0:	e14e      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	f013 0f04 	tst.w	r3, #4
 800b7d8:	d122      	bne.n	800b820 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 8146 	beq.w	800ba6e <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b7e2:	4a59      	ldr	r2, [pc, #356]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b7e4:	6912      	ldr	r2, [r2, #16]
 800b7e6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800b7ea:	2a18      	cmp	r2, #24
 800b7ec:	f000 810e 	beq.w	800ba0c <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	f000 8094 	beq.w	800b91e <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7f6:	4a54      	ldr	r2, [pc, #336]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b7f8:	6813      	ldr	r3, [r2, #0]
 800b7fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b800:	f7fd fcee 	bl	80091e0 <HAL_GetTick>
 800b804:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b806:	4b50      	ldr	r3, [pc, #320]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b80e:	f000 80fb 	beq.w	800ba08 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b812:	f7fd fce5 	bl	80091e0 <HAL_GetTick>
 800b816:	1b00      	subs	r0, r0, r4
 800b818:	2802      	cmp	r0, #2
 800b81a:	d9f4      	bls.n	800b806 <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 800b81c:	2003      	movs	r0, #3
 800b81e:	e127      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 800b820:	4a4a      	ldr	r2, [pc, #296]	; (800b94c <HAL_RCC_OscConfig+0x4d4>)
 800b822:	6813      	ldr	r3, [r2, #0]
 800b824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b828:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800b82a:	f7fd fcd9 	bl	80091e0 <HAL_GetTick>
 800b82e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b830:	4b46      	ldr	r3, [pc, #280]	; (800b94c <HAL_RCC_OscConfig+0x4d4>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b838:	d106      	bne.n	800b848 <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b83a:	f7fd fcd1 	bl	80091e0 <HAL_GetTick>
 800b83e:	1b40      	subs	r0, r0, r5
 800b840:	2864      	cmp	r0, #100	; 0x64
 800b842:	d9f5      	bls.n	800b830 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 800b844:	2003      	movs	r0, #3
 800b846:	e113      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b848:	68a3      	ldr	r3, [r4, #8]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d00e      	beq.n	800b86c <HAL_RCC_OscConfig+0x3f4>
 800b84e:	bb33      	cbnz	r3, 800b89e <HAL_RCC_OscConfig+0x426>
 800b850:	4b3d      	ldr	r3, [pc, #244]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b854:	f022 0201 	bic.w	r2, r2, #1
 800b858:	671a      	str	r2, [r3, #112]	; 0x70
 800b85a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b85c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b860:	671a      	str	r2, [r3, #112]	; 0x70
 800b862:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b864:	f022 0204 	bic.w	r2, r2, #4
 800b868:	671a      	str	r2, [r3, #112]	; 0x70
 800b86a:	e004      	b.n	800b876 <HAL_RCC_OscConfig+0x3fe>
 800b86c:	4a36      	ldr	r2, [pc, #216]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b86e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b870:	f043 0301 	orr.w	r3, r3, #1
 800b874:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b876:	68a3      	ldr	r3, [r4, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d03e      	beq.n	800b8fa <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 800b87c:	f7fd fcb0 	bl	80091e0 <HAL_GetTick>
 800b880:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b882:	4b31      	ldr	r3, [pc, #196]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b886:	f013 0f02 	tst.w	r3, #2
 800b88a:	d1a6      	bne.n	800b7da <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b88c:	f7fd fca8 	bl	80091e0 <HAL_GetTick>
 800b890:	1b40      	subs	r0, r0, r5
 800b892:	f241 3388 	movw	r3, #5000	; 0x1388
 800b896:	4298      	cmp	r0, r3
 800b898:	d9f3      	bls.n	800b882 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800b89a:	2003      	movs	r0, #3
 800b89c:	e0e8      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b89e:	2b05      	cmp	r3, #5
 800b8a0:	d00f      	beq.n	800b8c2 <HAL_RCC_OscConfig+0x44a>
 800b8a2:	2b85      	cmp	r3, #133	; 0x85
 800b8a4:	d01b      	beq.n	800b8de <HAL_RCC_OscConfig+0x466>
 800b8a6:	4b28      	ldr	r3, [pc, #160]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b8a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8aa:	f022 0201 	bic.w	r2, r2, #1
 800b8ae:	671a      	str	r2, [r3, #112]	; 0x70
 800b8b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8b2:	f022 0204 	bic.w	r2, r2, #4
 800b8b6:	671a      	str	r2, [r3, #112]	; 0x70
 800b8b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8be:	671a      	str	r2, [r3, #112]	; 0x70
 800b8c0:	e7d9      	b.n	800b876 <HAL_RCC_OscConfig+0x3fe>
 800b8c2:	4b21      	ldr	r3, [pc, #132]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b8c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8c6:	f042 0204 	orr.w	r2, r2, #4
 800b8ca:	671a      	str	r2, [r3, #112]	; 0x70
 800b8cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8d2:	671a      	str	r2, [r3, #112]	; 0x70
 800b8d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8d6:	f042 0201 	orr.w	r2, r2, #1
 800b8da:	671a      	str	r2, [r3, #112]	; 0x70
 800b8dc:	e7cb      	b.n	800b876 <HAL_RCC_OscConfig+0x3fe>
 800b8de:	4b1a      	ldr	r3, [pc, #104]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b8e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8e2:	f042 0204 	orr.w	r2, r2, #4
 800b8e6:	671a      	str	r2, [r3, #112]	; 0x70
 800b8e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8ee:	671a      	str	r2, [r3, #112]	; 0x70
 800b8f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8f2:	f042 0201 	orr.w	r2, r2, #1
 800b8f6:	671a      	str	r2, [r3, #112]	; 0x70
 800b8f8:	e7bd      	b.n	800b876 <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 800b8fa:	f7fd fc71 	bl	80091e0 <HAL_GetTick>
 800b8fe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b900:	4b11      	ldr	r3, [pc, #68]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b904:	f013 0f02 	tst.w	r3, #2
 800b908:	f43f af67 	beq.w	800b7da <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b90c:	f7fd fc68 	bl	80091e0 <HAL_GetTick>
 800b910:	1b40      	subs	r0, r0, r5
 800b912:	f241 3388 	movw	r3, #5000	; 0x1388
 800b916:	4298      	cmp	r0, r3
 800b918:	d9f2      	bls.n	800b900 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 800b91a:	2003      	movs	r0, #3
 800b91c:	e0a8      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 800b91e:	4a0a      	ldr	r2, [pc, #40]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b920:	6813      	ldr	r3, [r2, #0]
 800b922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b926:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b928:	f7fd fc5a 	bl	80091e0 <HAL_GetTick>
 800b92c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b92e:	4b06      	ldr	r3, [pc, #24]	; (800b948 <HAL_RCC_OscConfig+0x4d0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b936:	d00b      	beq.n	800b950 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b938:	f7fd fc52 	bl	80091e0 <HAL_GetTick>
 800b93c:	1b40      	subs	r0, r0, r5
 800b93e:	2802      	cmp	r0, #2
 800b940:	d9f5      	bls.n	800b92e <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800b942:	2003      	movs	r0, #3
 800b944:	e094      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800b946:	bf00      	nop
 800b948:	58024400 	.word	0x58024400
 800b94c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b950:	4b4f      	ldr	r3, [pc, #316]	; (800ba90 <HAL_RCC_OscConfig+0x618>)
 800b952:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b954:	4a4f      	ldr	r2, [pc, #316]	; (800ba94 <HAL_RCC_OscConfig+0x61c>)
 800b956:	400a      	ands	r2, r1
 800b958:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b95a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b95c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800b960:	430a      	orrs	r2, r1
 800b962:	629a      	str	r2, [r3, #40]	; 0x28
 800b964:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b966:	3a01      	subs	r2, #1
 800b968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b96e:	3901      	subs	r1, #1
 800b970:	0249      	lsls	r1, r1, #9
 800b972:	b289      	uxth	r1, r1
 800b974:	430a      	orrs	r2, r1
 800b976:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b978:	3901      	subs	r1, #1
 800b97a:	0409      	lsls	r1, r1, #16
 800b97c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800b980:	430a      	orrs	r2, r1
 800b982:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b984:	3901      	subs	r1, #1
 800b986:	0609      	lsls	r1, r1, #24
 800b988:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800b98c:	430a      	orrs	r2, r1
 800b98e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800b990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b992:	f022 0201 	bic.w	r2, r2, #1
 800b996:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b99a:	4a3f      	ldr	r2, [pc, #252]	; (800ba98 <HAL_RCC_OscConfig+0x620>)
 800b99c:	400a      	ands	r2, r1
 800b99e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b9a0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800b9a4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	f022 020c 	bic.w	r2, r2, #12
 800b9ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b4:	f022 0202 	bic.w	r2, r2, #2
 800b9b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b9c4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b9cc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b9d4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800b9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d8:	f042 0201 	orr.w	r2, r2, #1
 800b9dc:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b9e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b9e6:	f7fd fbfb 	bl	80091e0 <HAL_GetTick>
 800b9ea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9ec:	4b28      	ldr	r3, [pc, #160]	; (800ba90 <HAL_RCC_OscConfig+0x618>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b9f4:	d106      	bne.n	800ba04 <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9f6:	f7fd fbf3 	bl	80091e0 <HAL_GetTick>
 800b9fa:	1b00      	subs	r0, r0, r4
 800b9fc:	2802      	cmp	r0, #2
 800b9fe:	d9f5      	bls.n	800b9ec <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 800ba00:	2003      	movs	r0, #3
 800ba02:	e035      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800ba04:	2000      	movs	r0, #0
 800ba06:	e033      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e031      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ba0c:	4920      	ldr	r1, [pc, #128]	; (800ba90 <HAL_RCC_OscConfig+0x618>)
 800ba0e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba10:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d02d      	beq.n	800ba72 <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba16:	f002 0303 	and.w	r3, r2, #3
 800ba1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba1c:	428b      	cmp	r3, r1
 800ba1e:	d12a      	bne.n	800ba76 <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba20:	f3c2 1205 	ubfx	r2, r2, #4, #6
 800ba24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d127      	bne.n	800ba7a <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba2a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800ba2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ba30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d123      	bne.n	800ba7e <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba36:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800ba3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba3c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d11f      	bne.n	800ba82 <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba42:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800ba46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d11b      	bne.n	800ba86 <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ba4e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800ba52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba56:	4298      	cmp	r0, r3
 800ba58:	d117      	bne.n	800ba8a <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e008      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 800ba5e:	2001      	movs	r0, #1
}
 800ba60:	4770      	bx	lr
        return HAL_ERROR;
 800ba62:	2001      	movs	r0, #1
 800ba64:	e004      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800ba66:	2001      	movs	r0, #1
 800ba68:	e002      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	e000      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 800ba6e:	2000      	movs	r0, #0
}
 800ba70:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800ba72:	2001      	movs	r0, #1
 800ba74:	e7fc      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800ba76:	2001      	movs	r0, #1
 800ba78:	e7fa      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800ba7a:	2001      	movs	r0, #1
 800ba7c:	e7f8      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800ba7e:	2001      	movs	r0, #1
 800ba80:	e7f6      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800ba82:	2001      	movs	r0, #1
 800ba84:	e7f4      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800ba86:	2001      	movs	r0, #1
 800ba88:	e7f2      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	e7f0      	b.n	800ba70 <HAL_RCC_OscConfig+0x5f8>
 800ba8e:	bf00      	nop
 800ba90:	58024400 	.word	0x58024400
 800ba94:	fffffc0c 	.word	0xfffffc0c
 800ba98:	ffff0007 	.word	0xffff0007

0800ba9c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba9c:	4b74      	ldr	r3, [pc, #464]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baa4:	2b10      	cmp	r3, #16
 800baa6:	f000 80de 	beq.w	800bc66 <HAL_RCC_GetSysClockFreq+0x1ca>
 800baaa:	2b18      	cmp	r3, #24
 800baac:	d010      	beq.n	800bad0 <HAL_RCC_GetSysClockFreq+0x34>
 800baae:	b10b      	cbz	r3, 800bab4 <HAL_RCC_GetSysClockFreq+0x18>
 800bab0:	4870      	ldr	r0, [pc, #448]	; (800bc74 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800bab2:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bab4:	4b6e      	ldr	r3, [pc, #440]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f013 0f20 	tst.w	r3, #32
 800babc:	f000 80d5 	beq.w	800bc6a <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bac0:	4b6b      	ldr	r3, [pc, #428]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bac2:	6818      	ldr	r0, [r3, #0]
 800bac4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800bac8:	4b6b      	ldr	r3, [pc, #428]	; (800bc78 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800baca:	fa23 f000 	lsr.w	r0, r3, r0
 800bace:	4770      	bx	lr
{
 800bad0:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bad2:	4a67      	ldr	r2, [pc, #412]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bad4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bad6:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bada:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800badc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bae0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bae2:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bae6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800bae8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800baec:	fb0c f303 	mul.w	r3, ip, r3
 800baf0:	ee07 3a90 	vmov	s15, r3
 800baf4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 800baf8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800bafc:	f000 8093 	beq.w	800bc26 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 800bb00:	2901      	cmp	r1, #1
 800bb02:	d065      	beq.n	800bbd0 <HAL_RCC_GetSysClockFreq+0x134>
 800bb04:	2902      	cmp	r1, #2
 800bb06:	f000 8091 	beq.w	800bc2c <HAL_RCC_GetSysClockFreq+0x190>
 800bb0a:	b1e1      	cbz	r1, 800bb46 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb0c:	ee07 0a10 	vmov	s14, r0
 800bb10:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bb14:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800bc7c <HAL_RCC_GetSysClockFreq+0x1e0>
 800bb18:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bb1c:	4b54      	ldr	r3, [pc, #336]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb24:	ee06 3a90 	vmov	s13, r3
 800bb28:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bb2c:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800bc80 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bb30:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bb34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb40:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800bb44:	e060      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb46:	6813      	ldr	r3, [r2, #0]
 800bb48:	f013 0f20 	tst.w	r3, #32
 800bb4c:	d023      	beq.n	800bb96 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb4e:	4611      	mov	r1, r2
 800bb50:	6812      	ldr	r2, [r2, #0]
 800bb52:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800bb56:	4b48      	ldr	r3, [pc, #288]	; (800bc78 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800bb58:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb5a:	ee07 3a10 	vmov	s14, r3
 800bb5e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bb62:	ee07 0a10 	vmov	s14, r0
 800bb66:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800bb6a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800bb6e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800bb70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb74:	ee06 3a90 	vmov	s13, r3
 800bb78:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bb7c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800bc80 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bb80:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bb84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb94:	e038      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb96:	ee07 0a10 	vmov	s14, r0
 800bb9a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bb9e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800bc84 <HAL_RCC_GetSysClockFreq+0x1e8>
 800bba2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bba6:	4b32      	ldr	r3, [pc, #200]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbae:	ee06 3a90 	vmov	s13, r3
 800bbb2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bbb6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800bc80 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bbba:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbce:	e01b      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbd0:	ee07 0a10 	vmov	s14, r0
 800bbd4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bbd8:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800bc7c <HAL_RCC_GetSysClockFreq+0x1e0>
 800bbdc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bbe0:	4b23      	ldr	r3, [pc, #140]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe8:	ee06 3a90 	vmov	s13, r3
 800bbec:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bbf0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800bc80 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bbf4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bbf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc04:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bc08:	4b19      	ldr	r3, [pc, #100]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bc10:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bc12:	ee07 3a90 	vmov	s15, r3
 800bc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bc1e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800bc22:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800bc26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc2a:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc2c:	ee07 0a10 	vmov	s14, r0
 800bc30:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bc34:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800bc88 <HAL_RCC_GetSysClockFreq+0x1ec>
 800bc38:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bc3c:	4b0c      	ldr	r3, [pc, #48]	; (800bc70 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc44:	ee06 3a90 	vmov	s13, r3
 800bc48:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bc4c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800bc80 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bc50:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bc54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc60:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800bc64:	e7d0      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800bc66:	4809      	ldr	r0, [pc, #36]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800bc68:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bc6a:	4803      	ldr	r0, [pc, #12]	; (800bc78 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	58024400 	.word	0x58024400
 800bc74:	003d0900 	.word	0x003d0900
 800bc78:	03d09000 	.word	0x03d09000
 800bc7c:	4a742400 	.word	0x4a742400
 800bc80:	39000000 	.word	0x39000000
 800bc84:	4c742400 	.word	0x4c742400
 800bc88:	4bb71b00 	.word	0x4bb71b00
 800bc8c:	016e3600 	.word	0x016e3600

0800bc90 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800bc90:	2800      	cmp	r0, #0
 800bc92:	f000 8132 	beq.w	800befa <HAL_RCC_ClockConfig+0x26a>
{
 800bc96:	b570      	push	{r4, r5, r6, lr}
 800bc98:	460d      	mov	r5, r1
 800bc9a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bc9c:	4b9b      	ldr	r3, [pc, #620]	; (800bf0c <HAL_RCC_ClockConfig+0x27c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 030f 	and.w	r3, r3, #15
 800bca4:	428b      	cmp	r3, r1
 800bca6:	d20b      	bcs.n	800bcc0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bca8:	4a98      	ldr	r2, [pc, #608]	; (800bf0c <HAL_RCC_ClockConfig+0x27c>)
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	f023 030f 	bic.w	r3, r3, #15
 800bcb0:	430b      	orrs	r3, r1
 800bcb2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcb4:	6813      	ldr	r3, [r2, #0]
 800bcb6:	f003 030f 	and.w	r3, r3, #15
 800bcba:	428b      	cmp	r3, r1
 800bcbc:	f040 811f 	bne.w	800befe <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	f013 0f04 	tst.w	r3, #4
 800bcc6:	d00c      	beq.n	800bce2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800bcc8:	6922      	ldr	r2, [r4, #16]
 800bcca:	4b91      	ldr	r3, [pc, #580]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d905      	bls.n	800bce2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bcd6:	498e      	ldr	r1, [pc, #568]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bcd8:	698b      	ldr	r3, [r1, #24]
 800bcda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcde:	431a      	orrs	r2, r3
 800bce0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	f013 0f08 	tst.w	r3, #8
 800bce8:	d00c      	beq.n	800bd04 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800bcea:	6962      	ldr	r2, [r4, #20]
 800bcec:	4b88      	ldr	r3, [pc, #544]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bcee:	69db      	ldr	r3, [r3, #28]
 800bcf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d905      	bls.n	800bd04 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bcf8:	4985      	ldr	r1, [pc, #532]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bcfa:	69cb      	ldr	r3, [r1, #28]
 800bcfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd00:	431a      	orrs	r2, r3
 800bd02:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd04:	6823      	ldr	r3, [r4, #0]
 800bd06:	f013 0f10 	tst.w	r3, #16
 800bd0a:	d00c      	beq.n	800bd26 <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800bd0c:	69a2      	ldr	r2, [r4, #24]
 800bd0e:	4b80      	ldr	r3, [pc, #512]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bd10:	69db      	ldr	r3, [r3, #28]
 800bd12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d905      	bls.n	800bd26 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd1a:	497d      	ldr	r1, [pc, #500]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bd1c:	69cb      	ldr	r3, [r1, #28]
 800bd1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bd22:	431a      	orrs	r2, r3
 800bd24:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	f013 0f20 	tst.w	r3, #32
 800bd2c:	d00c      	beq.n	800bd48 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800bd2e:	69e2      	ldr	r2, [r4, #28]
 800bd30:	4b77      	ldr	r3, [pc, #476]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d905      	bls.n	800bd48 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bd3c:	4974      	ldr	r1, [pc, #464]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bd3e:	6a0b      	ldr	r3, [r1, #32]
 800bd40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd44:	431a      	orrs	r2, r3
 800bd46:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	f013 0f02 	tst.w	r3, #2
 800bd4e:	d00c      	beq.n	800bd6a <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800bd50:	68e2      	ldr	r2, [r4, #12]
 800bd52:	4b6f      	ldr	r3, [pc, #444]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	f003 030f 	and.w	r3, r3, #15
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d905      	bls.n	800bd6a <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd5e:	496c      	ldr	r1, [pc, #432]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bd60:	698b      	ldr	r3, [r1, #24]
 800bd62:	f023 030f 	bic.w	r3, r3, #15
 800bd66:	431a      	orrs	r2, r3
 800bd68:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	f013 0f01 	tst.w	r3, #1
 800bd70:	d041      	beq.n	800bdf6 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bd72:	4a67      	ldr	r2, [pc, #412]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bd74:	6993      	ldr	r3, [r2, #24]
 800bd76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bd7a:	68a1      	ldr	r1, [r4, #8]
 800bd7c:	430b      	orrs	r3, r1
 800bd7e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd80:	6863      	ldr	r3, [r4, #4]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d00a      	beq.n	800bd9c <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d027      	beq.n	800bdda <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d02c      	beq.n	800bde8 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd8e:	4a60      	ldr	r2, [pc, #384]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bd90:	6812      	ldr	r2, [r2, #0]
 800bd92:	f012 0f04 	tst.w	r2, #4
 800bd96:	d106      	bne.n	800bda6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800bd98:	2001      	movs	r0, #1
 800bd9a:	e0ad      	b.n	800bef8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd9c:	6812      	ldr	r2, [r2, #0]
 800bd9e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800bda2:	f000 80ae 	beq.w	800bf02 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bda6:	495a      	ldr	r1, [pc, #360]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bda8:	690a      	ldr	r2, [r1, #16]
 800bdaa:	f022 0207 	bic.w	r2, r2, #7
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800bdb2:	f7fd fa15 	bl	80091e0 <HAL_GetTick>
 800bdb6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdb8:	4b55      	ldr	r3, [pc, #340]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdc0:	6862      	ldr	r2, [r4, #4]
 800bdc2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800bdc6:	d016      	beq.n	800bdf6 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdc8:	f7fd fa0a 	bl	80091e0 <HAL_GetTick>
 800bdcc:	1b80      	subs	r0, r0, r6
 800bdce:	f241 3388 	movw	r3, #5000	; 0x1388
 800bdd2:	4298      	cmp	r0, r3
 800bdd4:	d9f0      	bls.n	800bdb8 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 800bdd6:	2003      	movs	r0, #3
 800bdd8:	e08e      	b.n	800bef8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bdda:	4a4d      	ldr	r2, [pc, #308]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bddc:	6812      	ldr	r2, [r2, #0]
 800bdde:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800bde2:	d1e0      	bne.n	800bda6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800bde4:	2001      	movs	r0, #1
 800bde6:	e087      	b.n	800bef8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bde8:	4a49      	ldr	r2, [pc, #292]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bdea:	6812      	ldr	r2, [r2, #0]
 800bdec:	f412 7f80 	tst.w	r2, #256	; 0x100
 800bdf0:	d1d9      	bne.n	800bda6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800bdf2:	2001      	movs	r0, #1
 800bdf4:	e080      	b.n	800bef8 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	f013 0f02 	tst.w	r3, #2
 800bdfc:	d00c      	beq.n	800be18 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800bdfe:	68e2      	ldr	r2, [r4, #12]
 800be00:	4b43      	ldr	r3, [pc, #268]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	f003 030f 	and.w	r3, r3, #15
 800be08:	429a      	cmp	r2, r3
 800be0a:	d205      	bcs.n	800be18 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be0c:	4940      	ldr	r1, [pc, #256]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800be0e:	698b      	ldr	r3, [r1, #24]
 800be10:	f023 030f 	bic.w	r3, r3, #15
 800be14:	431a      	orrs	r2, r3
 800be16:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800be18:	4b3c      	ldr	r3, [pc, #240]	; (800bf0c <HAL_RCC_ClockConfig+0x27c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 030f 	and.w	r3, r3, #15
 800be20:	42ab      	cmp	r3, r5
 800be22:	d90a      	bls.n	800be3a <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be24:	4a39      	ldr	r2, [pc, #228]	; (800bf0c <HAL_RCC_ClockConfig+0x27c>)
 800be26:	6813      	ldr	r3, [r2, #0]
 800be28:	f023 030f 	bic.w	r3, r3, #15
 800be2c:	432b      	orrs	r3, r5
 800be2e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be30:	6813      	ldr	r3, [r2, #0]
 800be32:	f003 030f 	and.w	r3, r3, #15
 800be36:	42ab      	cmp	r3, r5
 800be38:	d165      	bne.n	800bf06 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	f013 0f04 	tst.w	r3, #4
 800be40:	d00c      	beq.n	800be5c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800be42:	6922      	ldr	r2, [r4, #16]
 800be44:	4b32      	ldr	r3, [pc, #200]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800be46:	699b      	ldr	r3, [r3, #24]
 800be48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d205      	bcs.n	800be5c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be50:	492f      	ldr	r1, [pc, #188]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800be52:	698b      	ldr	r3, [r1, #24]
 800be54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be58:	431a      	orrs	r2, r3
 800be5a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	f013 0f08 	tst.w	r3, #8
 800be62:	d00c      	beq.n	800be7e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800be64:	6962      	ldr	r2, [r4, #20]
 800be66:	4b2a      	ldr	r3, [pc, #168]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be6e:	429a      	cmp	r2, r3
 800be70:	d205      	bcs.n	800be7e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be72:	4927      	ldr	r1, [pc, #156]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800be74:	69cb      	ldr	r3, [r1, #28]
 800be76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be7a:	431a      	orrs	r2, r3
 800be7c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	f013 0f10 	tst.w	r3, #16
 800be84:	d00c      	beq.n	800bea0 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800be86:	69a2      	ldr	r2, [r4, #24]
 800be88:	4b21      	ldr	r3, [pc, #132]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800be8a:	69db      	ldr	r3, [r3, #28]
 800be8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be90:	429a      	cmp	r2, r3
 800be92:	d205      	bcs.n	800bea0 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be94:	491e      	ldr	r1, [pc, #120]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800be96:	69cb      	ldr	r3, [r1, #28]
 800be98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800be9c:	431a      	orrs	r2, r3
 800be9e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	f013 0f20 	tst.w	r3, #32
 800bea6:	d00c      	beq.n	800bec2 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800bea8:	69e2      	ldr	r2, [r4, #28]
 800beaa:	4b19      	ldr	r3, [pc, #100]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d205      	bcs.n	800bec2 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800beb6:	4916      	ldr	r1, [pc, #88]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800beb8:	6a0b      	ldr	r3, [r1, #32]
 800beba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bebe:	431a      	orrs	r2, r3
 800bec0:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800bec2:	f7ff fdeb 	bl	800ba9c <HAL_RCC_GetSysClockFreq>
 800bec6:	4912      	ldr	r1, [pc, #72]	; (800bf10 <HAL_RCC_ClockConfig+0x280>)
 800bec8:	698b      	ldr	r3, [r1, #24]
 800beca:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800bece:	4a11      	ldr	r2, [pc, #68]	; (800bf14 <HAL_RCC_ClockConfig+0x284>)
 800bed0:	5cd3      	ldrb	r3, [r2, r3]
 800bed2:	f003 031f 	and.w	r3, r3, #31
 800bed6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800bed8:	698b      	ldr	r3, [r1, #24]
 800beda:	f003 030f 	and.w	r3, r3, #15
 800bede:	5cd3      	ldrb	r3, [r2, r3]
 800bee0:	f003 031f 	and.w	r3, r3, #31
 800bee4:	fa20 f303 	lsr.w	r3, r0, r3
 800bee8:	4a0b      	ldr	r2, [pc, #44]	; (800bf18 <HAL_RCC_ClockConfig+0x288>)
 800beea:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800beec:	4b0b      	ldr	r3, [pc, #44]	; (800bf1c <HAL_RCC_ClockConfig+0x28c>)
 800beee:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800bef0:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <HAL_RCC_ClockConfig+0x290>)
 800bef2:	6818      	ldr	r0, [r3, #0]
 800bef4:	f7f7 f99e 	bl	8003234 <HAL_InitTick>
}
 800bef8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800befa:	2001      	movs	r0, #1
}
 800befc:	4770      	bx	lr
      return HAL_ERROR;
 800befe:	2001      	movs	r0, #1
 800bf00:	e7fa      	b.n	800bef8 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800bf02:	2001      	movs	r0, #1
 800bf04:	e7f8      	b.n	800bef8 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800bf06:	2001      	movs	r0, #1
 800bf08:	e7f6      	b.n	800bef8 <HAL_RCC_ClockConfig+0x268>
 800bf0a:	bf00      	nop
 800bf0c:	52002000 	.word	0x52002000
 800bf10:	58024400 	.word	0x58024400
 800bf14:	08023370 	.word	0x08023370
 800bf18:	24000074 	.word	0x24000074
 800bf1c:	24000070 	.word	0x24000070
 800bf20:	2400007c 	.word	0x2400007c

0800bf24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf24:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800bf26:	f7ff fdb9 	bl	800ba9c <HAL_RCC_GetSysClockFreq>
 800bf2a:	4a0b      	ldr	r2, [pc, #44]	; (800bf58 <HAL_RCC_GetHCLKFreq+0x34>)
 800bf2c:	6993      	ldr	r3, [r2, #24]
 800bf2e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800bf32:	490a      	ldr	r1, [pc, #40]	; (800bf5c <HAL_RCC_GetHCLKFreq+0x38>)
 800bf34:	5ccb      	ldrb	r3, [r1, r3]
 800bf36:	f003 031f 	and.w	r3, r3, #31
 800bf3a:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800bf3e:	6992      	ldr	r2, [r2, #24]
 800bf40:	f002 020f 	and.w	r2, r2, #15
 800bf44:	5c88      	ldrb	r0, [r1, r2]
 800bf46:	f000 001f 	and.w	r0, r0, #31
 800bf4a:	fa23 f000 	lsr.w	r0, r3, r0
 800bf4e:	4a04      	ldr	r2, [pc, #16]	; (800bf60 <HAL_RCC_GetHCLKFreq+0x3c>)
 800bf50:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bf52:	4a04      	ldr	r2, [pc, #16]	; (800bf64 <HAL_RCC_GetHCLKFreq+0x40>)
 800bf54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800bf56:	bd08      	pop	{r3, pc}
 800bf58:	58024400 	.word	0x58024400
 800bf5c:	08023370 	.word	0x08023370
 800bf60:	24000074 	.word	0x24000074
 800bf64:	24000070 	.word	0x24000070

0800bf68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf68:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800bf6a:	f7ff ffdb 	bl	800bf24 <HAL_RCC_GetHCLKFreq>
 800bf6e:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800bf76:	4a04      	ldr	r2, [pc, #16]	; (800bf88 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf78:	5cd3      	ldrb	r3, [r2, r3]
 800bf7a:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800bf7e:	40d8      	lsrs	r0, r3
 800bf80:	bd08      	pop	{r3, pc}
 800bf82:	bf00      	nop
 800bf84:	58024400 	.word	0x58024400
 800bf88:	08023370 	.word	0x08023370

0800bf8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bf8c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800bf8e:	f7ff ffc9 	bl	800bf24 <HAL_RCC_GetHCLKFreq>
 800bf92:	4b05      	ldr	r3, [pc, #20]	; (800bfa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800bf9a:	4a04      	ldr	r2, [pc, #16]	; (800bfac <HAL_RCC_GetPCLK2Freq+0x20>)
 800bf9c:	5cd3      	ldrb	r3, [r2, r3]
 800bf9e:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800bfa2:	40d8      	lsrs	r0, r3
 800bfa4:	bd08      	pop	{r3, pc}
 800bfa6:	bf00      	nop
 800bfa8:	58024400 	.word	0x58024400
 800bfac:	08023370 	.word	0x08023370

0800bfb0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800bfb0:	233f      	movs	r3, #63	; 0x3f
 800bfb2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bfb4:	4b11      	ldr	r3, [pc, #68]	; (800bffc <HAL_RCC_GetClockConfig+0x4c>)
 800bfb6:	691a      	ldr	r2, [r3, #16]
 800bfb8:	f002 0207 	and.w	r2, r2, #7
 800bfbc:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800bfbe:	699a      	ldr	r2, [r3, #24]
 800bfc0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800bfc4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800bfc6:	699a      	ldr	r2, [r3, #24]
 800bfc8:	f002 020f 	and.w	r2, r2, #15
 800bfcc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800bfce:	699a      	ldr	r2, [r3, #24]
 800bfd0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800bfd4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800bfd6:	69da      	ldr	r2, [r3, #28]
 800bfd8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800bfdc:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800bfde:	69da      	ldr	r2, [r3, #28]
 800bfe0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800bfe4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800bfe6:	6a1b      	ldr	r3, [r3, #32]
 800bfe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfec:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bfee:	4b04      	ldr	r3, [pc, #16]	; (800c000 <HAL_RCC_GetClockConfig+0x50>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 030f 	and.w	r3, r3, #15
 800bff6:	600b      	str	r3, [r1, #0]
}
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	58024400 	.word	0x58024400
 800c000:	52002000 	.word	0x52002000

0800c004 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c004:	4b40      	ldr	r3, [pc, #256]	; (800c108 <RCCEx_PLL2_Config+0x104>)
 800c006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c008:	f003 0303 	and.w	r3, r3, #3
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d079      	beq.n	800c104 <RCCEx_PLL2_Config+0x100>
{
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	4605      	mov	r5, r0
 800c014:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c016:	4a3c      	ldr	r2, [pc, #240]	; (800c108 <RCCEx_PLL2_Config+0x104>)
 800c018:	6813      	ldr	r3, [r2, #0]
 800c01a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c01e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c020:	f7fd f8de 	bl	80091e0 <HAL_GetTick>
 800c024:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c026:	4b38      	ldr	r3, [pc, #224]	; (800c108 <RCCEx_PLL2_Config+0x104>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c02e:	d006      	beq.n	800c03e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c030:	f7fd f8d6 	bl	80091e0 <HAL_GetTick>
 800c034:	1b03      	subs	r3, r0, r4
 800c036:	2b02      	cmp	r3, #2
 800c038:	d9f5      	bls.n	800c026 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800c03a:	2003      	movs	r0, #3

  }


  return status;
}
 800c03c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c03e:	4b32      	ldr	r3, [pc, #200]	; (800c108 <RCCEx_PLL2_Config+0x104>)
 800c040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c042:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800c046:	6829      	ldr	r1, [r5, #0]
 800c048:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800c04c:	629a      	str	r2, [r3, #40]	; 0x28
 800c04e:	686a      	ldr	r2, [r5, #4]
 800c050:	3a01      	subs	r2, #1
 800c052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c056:	68a9      	ldr	r1, [r5, #8]
 800c058:	3901      	subs	r1, #1
 800c05a:	0249      	lsls	r1, r1, #9
 800c05c:	b289      	uxth	r1, r1
 800c05e:	430a      	orrs	r2, r1
 800c060:	68e9      	ldr	r1, [r5, #12]
 800c062:	3901      	subs	r1, #1
 800c064:	0409      	lsls	r1, r1, #16
 800c066:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800c06a:	430a      	orrs	r2, r1
 800c06c:	6929      	ldr	r1, [r5, #16]
 800c06e:	3901      	subs	r1, #1
 800c070:	0609      	lsls	r1, r1, #24
 800c072:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800c076:	430a      	orrs	r2, r1
 800c078:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c080:	6969      	ldr	r1, [r5, #20]
 800c082:	430a      	orrs	r2, r1
 800c084:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c088:	f022 0220 	bic.w	r2, r2, #32
 800c08c:	69a9      	ldr	r1, [r5, #24]
 800c08e:	430a      	orrs	r2, r1
 800c090:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c094:	f022 0210 	bic.w	r2, r2, #16
 800c098:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c09a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c09c:	4a1b      	ldr	r2, [pc, #108]	; (800c10c <RCCEx_PLL2_Config+0x108>)
 800c09e:	400a      	ands	r2, r1
 800c0a0:	69e9      	ldr	r1, [r5, #28]
 800c0a2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c0a6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0aa:	f042 0210 	orr.w	r2, r2, #16
 800c0ae:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800c0b0:	b9c6      	cbnz	r6, 800c0e4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800c0bc:	4a12      	ldr	r2, [pc, #72]	; (800c108 <RCCEx_PLL2_Config+0x104>)
 800c0be:	6813      	ldr	r3, [r2, #0]
 800c0c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c0c6:	f7fd f88b 	bl	80091e0 <HAL_GetTick>
 800c0ca:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0cc:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <RCCEx_PLL2_Config+0x104>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c0d4:	d114      	bne.n	800c100 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c0d6:	f7fd f883 	bl	80091e0 <HAL_GetTick>
 800c0da:	1b00      	subs	r0, r0, r4
 800c0dc:	2802      	cmp	r0, #2
 800c0de:	d9f5      	bls.n	800c0cc <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 800c0e0:	2003      	movs	r0, #3
 800c0e2:	e7ab      	b.n	800c03c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800c0e4:	2e01      	cmp	r6, #1
 800c0e6:	d005      	beq.n	800c0f4 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c0e8:	4a07      	ldr	r2, [pc, #28]	; (800c108 <RCCEx_PLL2_Config+0x104>)
 800c0ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c0ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0f2:	e7e3      	b.n	800c0bc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c0f4:	4a04      	ldr	r2, [pc, #16]	; (800c108 <RCCEx_PLL2_Config+0x104>)
 800c0f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c0f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0fe:	e7dd      	b.n	800c0bc <RCCEx_PLL2_Config+0xb8>
  return status;
 800c100:	2000      	movs	r0, #0
 800c102:	e79b      	b.n	800c03c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800c104:	2001      	movs	r0, #1
}
 800c106:	4770      	bx	lr
 800c108:	58024400 	.word	0x58024400
 800c10c:	ffff0007 	.word	0xffff0007

0800c110 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c110:	4b40      	ldr	r3, [pc, #256]	; (800c214 <RCCEx_PLL3_Config+0x104>)
 800c112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c114:	f003 0303 	and.w	r3, r3, #3
 800c118:	2b03      	cmp	r3, #3
 800c11a:	d079      	beq.n	800c210 <RCCEx_PLL3_Config+0x100>
{
 800c11c:	b570      	push	{r4, r5, r6, lr}
 800c11e:	4605      	mov	r5, r0
 800c120:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c122:	4a3c      	ldr	r2, [pc, #240]	; (800c214 <RCCEx_PLL3_Config+0x104>)
 800c124:	6813      	ldr	r3, [r2, #0]
 800c126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c12a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c12c:	f7fd f858 	bl	80091e0 <HAL_GetTick>
 800c130:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c132:	4b38      	ldr	r3, [pc, #224]	; (800c214 <RCCEx_PLL3_Config+0x104>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c13a:	d006      	beq.n	800c14a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c13c:	f7fd f850 	bl	80091e0 <HAL_GetTick>
 800c140:	1b03      	subs	r3, r0, r4
 800c142:	2b02      	cmp	r3, #2
 800c144:	d9f5      	bls.n	800c132 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800c146:	2003      	movs	r0, #3

  }


  return status;
}
 800c148:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c14a:	4b32      	ldr	r3, [pc, #200]	; (800c214 <RCCEx_PLL3_Config+0x104>)
 800c14c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c14e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800c152:	6829      	ldr	r1, [r5, #0]
 800c154:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c158:	629a      	str	r2, [r3, #40]	; 0x28
 800c15a:	686a      	ldr	r2, [r5, #4]
 800c15c:	3a01      	subs	r2, #1
 800c15e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c162:	68a9      	ldr	r1, [r5, #8]
 800c164:	3901      	subs	r1, #1
 800c166:	0249      	lsls	r1, r1, #9
 800c168:	b289      	uxth	r1, r1
 800c16a:	430a      	orrs	r2, r1
 800c16c:	68e9      	ldr	r1, [r5, #12]
 800c16e:	3901      	subs	r1, #1
 800c170:	0409      	lsls	r1, r1, #16
 800c172:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800c176:	430a      	orrs	r2, r1
 800c178:	6929      	ldr	r1, [r5, #16]
 800c17a:	3901      	subs	r1, #1
 800c17c:	0609      	lsls	r1, r1, #24
 800c17e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800c182:	430a      	orrs	r2, r1
 800c184:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c188:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c18c:	6969      	ldr	r1, [r5, #20]
 800c18e:	430a      	orrs	r2, r1
 800c190:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c194:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c198:	69a9      	ldr	r1, [r5, #24]
 800c19a:	430a      	orrs	r2, r1
 800c19c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1a4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c1a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c1a8:	4a1b      	ldr	r2, [pc, #108]	; (800c218 <RCCEx_PLL3_Config+0x108>)
 800c1aa:	400a      	ands	r2, r1
 800c1ac:	69e9      	ldr	r1, [r5, #28]
 800c1ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c1b2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1ba:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800c1bc:	b9c6      	cbnz	r6, 800c1f0 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c1be:	461a      	mov	r2, r3
 800c1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c1c6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 800c1c8:	4a12      	ldr	r2, [pc, #72]	; (800c214 <RCCEx_PLL3_Config+0x104>)
 800c1ca:	6813      	ldr	r3, [r2, #0]
 800c1cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1d0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c1d2:	f7fd f805 	bl	80091e0 <HAL_GetTick>
 800c1d6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1d8:	4b0e      	ldr	r3, [pc, #56]	; (800c214 <RCCEx_PLL3_Config+0x104>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c1e0:	d114      	bne.n	800c20c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c1e2:	f7fc fffd 	bl	80091e0 <HAL_GetTick>
 800c1e6:	1b00      	subs	r0, r0, r4
 800c1e8:	2802      	cmp	r0, #2
 800c1ea:	d9f5      	bls.n	800c1d8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800c1ec:	2003      	movs	r0, #3
 800c1ee:	e7ab      	b.n	800c148 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800c1f0:	2e01      	cmp	r6, #1
 800c1f2:	d005      	beq.n	800c200 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c1f4:	4a07      	ldr	r2, [pc, #28]	; (800c214 <RCCEx_PLL3_Config+0x104>)
 800c1f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c1f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1fe:	e7e3      	b.n	800c1c8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c200:	4a04      	ldr	r2, [pc, #16]	; (800c214 <RCCEx_PLL3_Config+0x104>)
 800c202:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c208:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c20a:	e7dd      	b.n	800c1c8 <RCCEx_PLL3_Config+0xb8>
  return status;
 800c20c:	2000      	movs	r0, #0
 800c20e:	e79b      	b.n	800c148 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 800c210:	2001      	movs	r0, #1
}
 800c212:	4770      	bx	lr
 800c214:	58024400 	.word	0x58024400
 800c218:	ffff0007 	.word	0xffff0007

0800c21c <HAL_RCCEx_PeriphCLKConfig>:
{
 800c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c220:	6803      	ldr	r3, [r0, #0]
 800c222:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c226:	d030      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c228:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800c22a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c22e:	d026      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800c230:	d80e      	bhi.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800c232:	b1eb      	cbz	r3, 800c270 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800c234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c238:	d107      	bne.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c23a:	2102      	movs	r1, #2
 800c23c:	3004      	adds	r0, #4
 800c23e:	f7ff fee1 	bl	800c004 <RCCEx_PLL2_Config>
 800c242:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c244:	b145      	cbz	r5, 800c258 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c246:	462e      	mov	r6, r5
 800c248:	e021      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c24a:	2601      	movs	r6, #1
 800c24c:	4635      	mov	r5, r6
 800c24e:	e01e      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800c250:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c254:	d109      	bne.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800c256:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c258:	4a99      	ldr	r2, [pc, #612]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c25a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c25c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c260:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800c262:	430b      	orrs	r3, r1
 800c264:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c266:	2600      	movs	r6, #0
 800c268:	e011      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c26a:	2601      	movs	r6, #1
 800c26c:	4635      	mov	r5, r6
 800c26e:	e00e      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c270:	4a93      	ldr	r2, [pc, #588]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c272:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c278:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c27a:	2500      	movs	r5, #0
 800c27c:	e7ec      	b.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c27e:	2102      	movs	r1, #2
 800c280:	3024      	adds	r0, #36	; 0x24
 800c282:	f7ff ff45 	bl	800c110 <RCCEx_PLL3_Config>
 800c286:	4605      	mov	r5, r0
      break;
 800c288:	e7dc      	b.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c28a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c28c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c294:	d026      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c296:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c298:	2b04      	cmp	r3, #4
 800c29a:	d81f      	bhi.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800c29c:	e8df f003 	tbb	[pc, r3]
 800c2a0:	08171103 	.word	0x08171103
 800c2a4:	08          	.byte	0x08
 800c2a5:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2a6:	4a86      	ldr	r2, [pc, #536]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c2a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c2aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c2b0:	b9bd      	cbnz	r5, 800c2e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2b2:	4a83      	ldr	r2, [pc, #524]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c2b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c2b6:	f023 0307 	bic.w	r3, r3, #7
 800c2ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	6513      	str	r3, [r2, #80]	; 0x50
 800c2c0:	e010      	b.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	1d20      	adds	r0, r4, #4
 800c2c6:	f7ff fe9d 	bl	800c004 <RCCEx_PLL2_Config>
 800c2ca:	4605      	mov	r5, r0
      break;
 800c2cc:	e7f0      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c2d4:	f7ff ff1c 	bl	800c110 <RCCEx_PLL3_Config>
 800c2d8:	4605      	mov	r5, r0
      break;
 800c2da:	e7e9      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c2dc:	2601      	movs	r6, #1
 800c2de:	4635      	mov	r5, r6
 800c2e0:	e000      	b.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800c2e2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800c2ea:	d01d      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 800c2ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2ee:	2b80      	cmp	r3, #128	; 0x80
 800c2f0:	d039      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800c2f2:	d80b      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800c2f4:	b38b      	cbz	r3, 800c35a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800c2f6:	2b40      	cmp	r3, #64	; 0x40
 800c2f8:	d105      	bne.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	1d20      	adds	r0, r4, #4
 800c2fe:	f7ff fe81 	bl	800c004 <RCCEx_PLL2_Config>
 800c302:	4605      	mov	r5, r0
      break;
 800c304:	e008      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 800c306:	2601      	movs	r6, #1
 800c308:	4635      	mov	r5, r6
 800c30a:	e00d      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800c30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c310:	d002      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800c312:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c316:	d11b      	bne.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 800c318:	bb65      	cbnz	r5, 800c374 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800c31a:	4a69      	ldr	r2, [pc, #420]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c31c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c31e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800c322:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c324:	430b      	orrs	r3, r1
 800c326:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800c32e:	d035      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 800c330:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c336:	d057      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c338:	d821      	bhi.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x162>
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d04e      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c33e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c342:	d119      	bne.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c344:	2100      	movs	r1, #0
 800c346:	1d20      	adds	r0, r4, #4
 800c348:	f7ff fe5c 	bl	800c004 <RCCEx_PLL2_Config>
 800c34c:	4605      	mov	r5, r0
      break;
 800c34e:	e01c      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 800c350:	2bc0      	cmp	r3, #192	; 0xc0
 800c352:	d0e1      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800c354:	2601      	movs	r6, #1
 800c356:	4635      	mov	r5, r6
 800c358:	e7e6      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c35a:	4a59      	ldr	r2, [pc, #356]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c35c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c35e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c362:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c364:	e7d8      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c366:	2100      	movs	r1, #0
 800c368:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c36c:	f7ff fed0 	bl	800c110 <RCCEx_PLL3_Config>
 800c370:	4605      	mov	r5, r0
      break;
 800c372:	e7d1      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800c374:	462e      	mov	r6, r5
 800c376:	e7d7      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 800c378:	2601      	movs	r6, #1
 800c37a:	4635      	mov	r5, r6
 800c37c:	e00e      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c37e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c382:	d002      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c384:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c388:	d122      	bne.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800c38a:	2d00      	cmp	r5, #0
 800c38c:	d133      	bne.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800c38e:	4a4c      	ldr	r2, [pc, #304]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c390:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c392:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800c396:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c398:	430b      	orrs	r3, r1
 800c39a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c3a2:	d031      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 800c3a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c3a6:	2b20      	cmp	r3, #32
 800c3a8:	d041      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800c3aa:	d829      	bhi.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c3ac:	b133      	cbz	r3, 800c3bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800c3ae:	2b10      	cmp	r3, #16
 800c3b0:	d123      	bne.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3b2:	4a43      	ldr	r2, [pc, #268]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c3b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c3b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c3bc:	2d00      	cmp	r5, #0
 800c3be:	d13c      	bne.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c3c0:	4a3f      	ldr	r2, [pc, #252]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c3c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c3c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c3c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c3ca:	430b      	orrs	r3, r1
 800c3cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c3ce:	e01b      	b.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 800c3d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c3d4:	d0d9      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c3d6:	2601      	movs	r6, #1
 800c3d8:	4635      	mov	r5, r6
 800c3da:	e7df      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3dc:	4a38      	ldr	r2, [pc, #224]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c3de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c3e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3e4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c3e6:	e7d0      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c3ee:	f7ff fe8f 	bl	800c110 <RCCEx_PLL3_Config>
 800c3f2:	4605      	mov	r5, r0
      break;
 800c3f4:	e7c9      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c3f6:	462e      	mov	r6, r5
 800c3f8:	e7d0      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 800c3fa:	2601      	movs	r6, #1
 800c3fc:	4635      	mov	r5, r6
 800c3fe:	e003      	b.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800c400:	2b30      	cmp	r3, #48	; 0x30
 800c402:	d0db      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800c404:	2601      	movs	r6, #1
 800c406:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800c40e:	d039      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c410:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c416:	d02d      	beq.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800c418:	d814      	bhi.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800c41a:	b32b      	cbz	r3, 800c468 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800c41c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c420:	d10d      	bne.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c422:	2100      	movs	r1, #0
 800c424:	1d20      	adds	r0, r4, #4
 800c426:	f7ff fded 	bl	800c004 <RCCEx_PLL2_Config>
 800c42a:	4605      	mov	r5, r0
      break;
 800c42c:	e010      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c42e:	2102      	movs	r1, #2
 800c430:	1d20      	adds	r0, r4, #4
 800c432:	f7ff fde7 	bl	800c004 <RCCEx_PLL2_Config>
 800c436:	4605      	mov	r5, r0
      break;
 800c438:	e7c0      	b.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800c43a:	462e      	mov	r6, r5
 800c43c:	e7e4      	b.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c43e:	2601      	movs	r6, #1
 800c440:	4635      	mov	r5, r6
 800c442:	e01f      	b.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800c444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c448:	d002      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c44a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c44e:	d108      	bne.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 800c450:	b9bd      	cbnz	r5, 800c482 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c452:	4a1b      	ldr	r2, [pc, #108]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c454:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c45a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800c45c:	430b      	orrs	r3, r1
 800c45e:	6513      	str	r3, [r2, #80]	; 0x50
 800c460:	e010      	b.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c462:	2601      	movs	r6, #1
 800c464:	4635      	mov	r5, r6
 800c466:	e00d      	b.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c468:	4a15      	ldr	r2, [pc, #84]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c46a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c46c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c470:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c472:	e7ed      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c474:	2100      	movs	r1, #0
 800c476:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c47a:	f7ff fe49 	bl	800c110 <RCCEx_PLL3_Config>
 800c47e:	4605      	mov	r5, r0
      break;
 800c480:	e7e6      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c482:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c48a:	d026      	beq.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800c48c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c48e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c492:	d037      	beq.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800c494:	d816      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c496:	b13b      	cbz	r3, 800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c49c:	d10d      	bne.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c49e:	2101      	movs	r1, #1
 800c4a0:	1d20      	adds	r0, r4, #4
 800c4a2:	f7ff fdaf 	bl	800c004 <RCCEx_PLL2_Config>
 800c4a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c4a8:	bb9d      	cbnz	r5, 800c512 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c4aa:	4a05      	ldr	r2, [pc, #20]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c4ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c4ae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c4b2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c4b4:	430b      	orrs	r3, r1
 800c4b6:	6513      	str	r3, [r2, #80]	; 0x50
 800c4b8:	e00f      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800c4ba:	2601      	movs	r6, #1
 800c4bc:	4635      	mov	r5, r6
 800c4be:	e00c      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800c4c0:	58024400 	.word	0x58024400
 800c4c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4c8:	d0ee      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c4ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4ce:	d0eb      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c4d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c4d4:	d0e8      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c4d6:	2601      	movs	r6, #1
 800c4d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c4e0:	d025      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800c4e2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800c4e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4ea:	d04c      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800c4ec:	d816      	bhi.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d03c      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c4f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4f6:	d10e      	bne.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	1d20      	adds	r0, r4, #4
 800c4fc:	f7ff fd82 	bl	800c004 <RCCEx_PLL2_Config>
 800c500:	4605      	mov	r5, r0
      break;
 800c502:	e033      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c504:	2101      	movs	r1, #1
 800c506:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c50a:	f7ff fe01 	bl	800c110 <RCCEx_PLL3_Config>
 800c50e:	4605      	mov	r5, r0
      break;
 800c510:	e7ca      	b.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c512:	462e      	mov	r6, r5
 800c514:	e7e1      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 800c516:	2601      	movs	r6, #1
 800c518:	4635      	mov	r5, r6
 800c51a:	e008      	b.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800c51c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c520:	d024      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c522:	d91d      	bls.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c524:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c528:	d020      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c52a:	2601      	movs	r6, #1
 800c52c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c534:	d009      	beq.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 800c536:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c53c:	d02c      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800c53e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c542:	d037      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800c544:	b36b      	cbz	r3, 800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800c546:	2601      	movs	r6, #1
 800c548:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800c550:	d045      	beq.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 800c552:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c554:	2b03      	cmp	r3, #3
 800c556:	d86d      	bhi.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c558:	e8df f003 	tbb	[pc, r3]
 800c55c:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 800c560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c564:	d002      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c56a:	d109      	bne.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 800c56c:	b995      	cbnz	r5, 800c594 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c56e:	4a8c      	ldr	r2, [pc, #560]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c570:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c572:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c576:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800c57a:	430b      	orrs	r3, r1
 800c57c:	6593      	str	r3, [r2, #88]	; 0x58
 800c57e:	e7d6      	b.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800c580:	2601      	movs	r6, #1
 800c582:	4635      	mov	r5, r6
 800c584:	e7d3      	b.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c586:	2101      	movs	r1, #1
 800c588:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c58c:	f7ff fdc0 	bl	800c110 <RCCEx_PLL3_Config>
 800c590:	4605      	mov	r5, r0
      break;
 800c592:	e7eb      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c594:	462e      	mov	r6, r5
 800c596:	e7ca      	b.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c598:	4a81      	ldr	r2, [pc, #516]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c59a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c59c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c5a2:	b96d      	cbnz	r5, 800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c5a4:	4a7e      	ldr	r2, [pc, #504]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c5a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c5a8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c5ac:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c5ae:	430b      	orrs	r3, r1
 800c5b0:	6513      	str	r3, [r2, #80]	; 0x50
 800c5b2:	e7ca      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	1d20      	adds	r0, r4, #4
 800c5b8:	f7ff fd24 	bl	800c004 <RCCEx_PLL2_Config>
 800c5bc:	4605      	mov	r5, r0
      break;
 800c5be:	e7f0      	b.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800c5c0:	462e      	mov	r6, r5
 800c5c2:	e7c2      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5c4:	4a76      	ldr	r2, [pc, #472]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c5c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c5c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c5ce:	bba5      	cbnz	r5, 800c63a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c5d0:	4a73      	ldr	r2, [pc, #460]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c5d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c5d4:	f023 0303 	bic.w	r3, r3, #3
 800c5d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c5da:	430b      	orrs	r3, r1
 800c5dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800c5e4:	d12b      	bne.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	f013 0f01 	tst.w	r3, #1
 800c5ec:	f000 80a3 	beq.w	800c736 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800c5f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c5f4:	2b28      	cmp	r3, #40	; 0x28
 800c5f6:	f200 809c 	bhi.w	800c732 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800c5fa:	e8df f003 	tbb	[pc, r3]
 800c5fe:	9a89      	.short	0x9a89
 800c600:	9a9a9a9a 	.word	0x9a9a9a9a
 800c604:	9a849a9a 	.word	0x9a849a9a
 800c608:	9a9a9a9a 	.word	0x9a9a9a9a
 800c60c:	9a939a9a 	.word	0x9a939a9a
 800c610:	9a9a9a9a 	.word	0x9a9a9a9a
 800c614:	9a899a9a 	.word	0x9a899a9a
 800c618:	9a9a9a9a 	.word	0x9a9a9a9a
 800c61c:	9a899a9a 	.word	0x9a899a9a
 800c620:	9a9a9a9a 	.word	0x9a9a9a9a
 800c624:	9a9a      	.short	0x9a9a
 800c626:	89          	.byte	0x89
 800c627:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c628:	2102      	movs	r1, #2
 800c62a:	1d20      	adds	r0, r4, #4
 800c62c:	f7ff fcea 	bl	800c004 <RCCEx_PLL2_Config>
 800c630:	4605      	mov	r5, r0
      break;
 800c632:	e7cc      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 800c634:	2601      	movs	r6, #1
 800c636:	4635      	mov	r5, r6
 800c638:	e7d1      	b.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800c63a:	462e      	mov	r6, r5
 800c63c:	e7cf      	b.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c63e:	4a59      	ldr	r2, [pc, #356]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800c640:	6813      	ldr	r3, [r2, #0]
 800c642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c646:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c648:	f7fc fdca 	bl	80091e0 <HAL_GetTick>
 800c64c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c64e:	4b55      	ldr	r3, [pc, #340]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c656:	d105      	bne.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c658:	f7fc fdc2 	bl	80091e0 <HAL_GetTick>
 800c65c:	1bc0      	subs	r0, r0, r7
 800c65e:	2864      	cmp	r0, #100	; 0x64
 800c660:	d9f5      	bls.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 800c662:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 800c664:	2d00      	cmp	r5, #0
 800c666:	d14a      	bne.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c668:	4b4d      	ldr	r3, [pc, #308]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c66c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800c670:	4053      	eors	r3, r2
 800c672:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c676:	d00c      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c678:	4b49      	ldr	r3, [pc, #292]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c67a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c67c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c680:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c682:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800c686:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c688:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c68a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800c68e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800c690:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c692:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c69a:	d015      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 800c69c:	bb8d      	cbnz	r5, 800c702 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c69e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c6a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c6a6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c6aa:	d01e      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800c6ac:	4a3c      	ldr	r2, [pc, #240]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c6ae:	6913      	ldr	r3, [r2, #16]
 800c6b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c6b4:	6113      	str	r3, [r2, #16]
 800c6b6:	493a      	ldr	r1, [pc, #232]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c6b8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800c6ba:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800c6be:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	670b      	str	r3, [r1, #112]	; 0x70
 800c6c6:	e78e      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 800c6c8:	f7fc fd8a 	bl	80091e0 <HAL_GetTick>
 800c6cc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c6ce:	4b34      	ldr	r3, [pc, #208]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d2:	f013 0f02 	tst.w	r3, #2
 800c6d6:	d1e1      	bne.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6d8:	f7fc fd82 	bl	80091e0 <HAL_GetTick>
 800c6dc:	1bc0      	subs	r0, r0, r7
 800c6de:	f241 3388 	movw	r3, #5000	; 0x1388
 800c6e2:	4298      	cmp	r0, r3
 800c6e4:	d9f3      	bls.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 800c6e6:	2503      	movs	r5, #3
 800c6e8:	e7d8      	b.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c6ea:	482d      	ldr	r0, [pc, #180]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c6ec:	6902      	ldr	r2, [r0, #16]
 800c6ee:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800c6f2:	492d      	ldr	r1, [pc, #180]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800c6f4:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	6103      	str	r3, [r0, #16]
 800c6fc:	e7db      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 800c6fe:	462e      	mov	r6, r5
 800c700:	e771      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 800c702:	462e      	mov	r6, r5
 800c704:	e76f      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c706:	2101      	movs	r1, #1
 800c708:	1d20      	adds	r0, r4, #4
 800c70a:	f7ff fc7b 	bl	800c004 <RCCEx_PLL2_Config>
 800c70e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c710:	b9ed      	cbnz	r5, 800c74e <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c712:	4a23      	ldr	r2, [pc, #140]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c714:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c716:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800c71a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c71e:	430b      	orrs	r3, r1
 800c720:	6553      	str	r3, [r2, #84]	; 0x54
 800c722:	e008      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c724:	2101      	movs	r1, #1
 800c726:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c72a:	f7ff fcf1 	bl	800c110 <RCCEx_PLL3_Config>
 800c72e:	4605      	mov	r5, r0
      break;
 800c730:	e7ee      	b.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 800c732:	2601      	movs	r6, #1
 800c734:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	f013 0f02 	tst.w	r3, #2
 800c73c:	d016      	beq.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c73e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c740:	2b05      	cmp	r3, #5
 800c742:	d827      	bhi.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x578>
 800c744:	e8df f003 	tbb	[pc, r3]
 800c748:	0a1f050a 	.word	0x0a1f050a
 800c74c:	0a0a      	.short	0x0a0a
 800c74e:	462e      	mov	r6, r5
 800c750:	e7f1      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c752:	2101      	movs	r1, #1
 800c754:	1d20      	adds	r0, r4, #4
 800c756:	f7ff fc55 	bl	800c004 <RCCEx_PLL2_Config>
 800c75a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c75c:	b9ed      	cbnz	r5, 800c79a <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c75e:	4a10      	ldr	r2, [pc, #64]	; (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c760:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c762:	f023 0307 	bic.w	r3, r3, #7
 800c766:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c768:	430b      	orrs	r3, r1
 800c76a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	f013 0f04 	tst.w	r3, #4
 800c772:	d029      	beq.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c774:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c778:	2b05      	cmp	r3, #5
 800c77a:	d84a      	bhi.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800c77c:	e8df f003 	tbb	[pc, r3]
 800c780:	1b42161b 	.word	0x1b42161b
 800c784:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c786:	2101      	movs	r1, #1
 800c788:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c78c:	f7ff fcc0 	bl	800c110 <RCCEx_PLL3_Config>
 800c790:	4605      	mov	r5, r0
      break;
 800c792:	e7e3      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c794:	2601      	movs	r6, #1
 800c796:	4635      	mov	r5, r6
 800c798:	e7e8      	b.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c79a:	462e      	mov	r6, r5
 800c79c:	e7e6      	b.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c79e:	bf00      	nop
 800c7a0:	58024400 	.word	0x58024400
 800c7a4:	58024800 	.word	0x58024800
 800c7a8:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	1d20      	adds	r0, r4, #4
 800c7b0:	f7ff fc28 	bl	800c004 <RCCEx_PLL2_Config>
 800c7b4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c7b6:	bb7d      	cbnz	r5, 800c818 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c7b8:	4aa9      	ldr	r2, [pc, #676]	; (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c7ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c7bc:	f023 0307 	bic.w	r3, r3, #7
 800c7c0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c7c8:	6823      	ldr	r3, [r4, #0]
 800c7ca:	f013 0f20 	tst.w	r3, #32
 800c7ce:	d033      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c7d0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c7d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7d8:	d04c      	beq.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800c7da:	d822      	bhi.n	800c822 <HAL_RCCEx_PeriphCLKConfig+0x606>
 800c7dc:	b13b      	cbz	r3, 800c7ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c7de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7e2:	d11b      	bne.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	1d20      	adds	r0, r4, #4
 800c7e8:	f7ff fc0c 	bl	800c004 <RCCEx_PLL2_Config>
 800c7ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c7ee:	2d00      	cmp	r5, #0
 800c7f0:	d147      	bne.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c7f2:	4a9b      	ldr	r2, [pc, #620]	; (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c7f4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c7f6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c7fa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c7fe:	430b      	orrs	r3, r1
 800c800:	6553      	str	r3, [r2, #84]	; 0x54
 800c802:	e019      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c804:	2101      	movs	r1, #1
 800c806:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c80a:	f7ff fc81 	bl	800c110 <RCCEx_PLL3_Config>
 800c80e:	4605      	mov	r5, r0
      break;
 800c810:	e7d1      	b.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c812:	2601      	movs	r6, #1
 800c814:	4635      	mov	r5, r6
 800c816:	e7d7      	b.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800c818:	462e      	mov	r6, r5
 800c81a:	e7d5      	b.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c81c:	2601      	movs	r6, #1
 800c81e:	4635      	mov	r5, r6
 800c820:	e00a      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800c822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c826:	d0e2      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c82c:	d0df      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c82e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c832:	d0dc      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c834:	2601      	movs	r6, #1
 800c836:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c83e:	d030      	beq.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c840:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800c844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c848:	d04b      	beq.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800c84a:	d81f      	bhi.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x670>
 800c84c:	b13b      	cbz	r3, 800c85e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c84e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c852:	d118      	bne.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c854:	2100      	movs	r1, #0
 800c856:	1d20      	adds	r0, r4, #4
 800c858:	f7ff fbd4 	bl	800c004 <RCCEx_PLL2_Config>
 800c85c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c85e:	2d00      	cmp	r5, #0
 800c860:	d146      	bne.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c862:	4a7f      	ldr	r2, [pc, #508]	; (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c864:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c866:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800c86a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800c86e:	430b      	orrs	r3, r1
 800c870:	6593      	str	r3, [r2, #88]	; 0x58
 800c872:	e016      	b.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c874:	2102      	movs	r1, #2
 800c876:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c87a:	f7ff fc49 	bl	800c110 <RCCEx_PLL3_Config>
 800c87e:	4605      	mov	r5, r0
      break;
 800c880:	e7b5      	b.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c882:	462e      	mov	r6, r5
 800c884:	e7d8      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c886:	2601      	movs	r6, #1
 800c888:	4635      	mov	r5, r6
 800c88a:	e00a      	b.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x686>
 800c88c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c890:	d0e5      	beq.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c892:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c896:	d0e2      	beq.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c898:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c89c:	d0df      	beq.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c89e:	2601      	movs	r6, #1
 800c8a0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8a8:	d032      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c8aa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c8ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8b2:	f000 80a2 	beq.w	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800c8b6:	d820      	bhi.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800c8b8:	b13b      	cbz	r3, 800c8ca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800c8ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8be:	d119      	bne.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	1d20      	adds	r0, r4, #4
 800c8c4:	f7ff fb9e 	bl	800c004 <RCCEx_PLL2_Config>
 800c8c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c8ca:	2d00      	cmp	r5, #0
 800c8cc:	f040 809c 	bne.w	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c8d0:	4a63      	ldr	r2, [pc, #396]	; (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c8d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c8d4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c8d8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800c8dc:	430b      	orrs	r3, r1
 800c8de:	6593      	str	r3, [r2, #88]	; 0x58
 800c8e0:	e016      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c8e2:	2102      	movs	r1, #2
 800c8e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c8e8:	f7ff fc12 	bl	800c110 <RCCEx_PLL3_Config>
 800c8ec:	4605      	mov	r5, r0
      break;
 800c8ee:	e7b6      	b.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c8f0:	462e      	mov	r6, r5
 800c8f2:	e7d6      	b.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c8f4:	2601      	movs	r6, #1
 800c8f6:	4635      	mov	r5, r6
 800c8f8:	e00a      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800c8fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8fe:	d0e4      	beq.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800c900:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c904:	d0e1      	beq.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800c906:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c90a:	d0de      	beq.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800c90c:	2601      	movs	r6, #1
 800c90e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	f013 0f08 	tst.w	r3, #8
 800c916:	d00c      	beq.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c918:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800c91c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c920:	d074      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c922:	4a4f      	ldr	r2, [pc, #316]	; (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c924:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c926:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c92a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c92e:	430b      	orrs	r3, r1
 800c930:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	f013 0f10 	tst.w	r3, #16
 800c938:	d00c      	beq.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c93a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800c93e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c942:	d06c      	beq.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c944:	4a46      	ldr	r2, [pc, #280]	; (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c946:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c94c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800c950:	430b      	orrs	r3, r1
 800c952:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800c95a:	d00b      	beq.n	800c974 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 800c95c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800c960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c964:	d073      	beq.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800c966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c96a:	d066      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d05f      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800c970:	2601      	movs	r6, #1
 800c972:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800c97a:	d00c      	beq.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 800c97c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c984:	d07d      	beq.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x866>
 800c986:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c98a:	d070      	beq.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c98c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c990:	d068      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800c992:	2601      	movs	r6, #1
 800c994:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800c99c:	d008      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 800c99e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d077      	beq.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x878>
 800c9a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9a8:	f000 8082 	beq.w	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800c9ac:	2601      	movs	r6, #1
 800c9ae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c9b6:	f040 8083 	bne.w	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c9c0:	f000 808b 	beq.w	800cada <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 800c9c4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c9c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9cc:	f000 80c9 	beq.w	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800c9d0:	f240 8080 	bls.w	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d8:	d003      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800c9da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9de:	f040 80be 	bne.w	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 800c9e2:	2d00      	cmp	r5, #0
 800c9e4:	f040 80c3 	bne.w	800cb6e <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c9e8:	4a1d      	ldr	r2, [pc, #116]	; (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c9ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c9ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9f0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800c9f4:	430b      	orrs	r3, r1
 800c9f6:	6553      	str	r3, [r2, #84]	; 0x54
 800c9f8:	e06f      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c9fa:	2102      	movs	r1, #2
 800c9fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ca00:	f7ff fb86 	bl	800c110 <RCCEx_PLL3_Config>
 800ca04:	4605      	mov	r5, r0
      break;
 800ca06:	e760      	b.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800ca08:	462e      	mov	r6, r5
 800ca0a:	e781      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ca0c:	2102      	movs	r1, #2
 800ca0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ca12:	f7ff fb7d 	bl	800c110 <RCCEx_PLL3_Config>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d083      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800ca1a:	2601      	movs	r6, #1
 800ca1c:	e781      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ca1e:	2102      	movs	r1, #2
 800ca20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ca24:	f7ff fb74 	bl	800c110 <RCCEx_PLL3_Config>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d08b      	beq.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 800ca2c:	2601      	movs	r6, #1
 800ca2e:	e789      	b.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ca30:	2100      	movs	r1, #0
 800ca32:	1d20      	adds	r0, r4, #4
 800ca34:	f7ff fae6 	bl	800c004 <RCCEx_PLL2_Config>
 800ca38:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ca3a:	b97d      	cbnz	r5, 800ca5c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ca3c:	4a08      	ldr	r2, [pc, #32]	; (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ca3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ca40:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ca44:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800ca48:	430b      	orrs	r3, r1
 800ca4a:	6593      	str	r3, [r2, #88]	; 0x58
 800ca4c:	e792      	b.n	800c974 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ca4e:	2102      	movs	r1, #2
 800ca50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ca54:	f7ff fb5c 	bl	800c110 <RCCEx_PLL3_Config>
 800ca58:	4605      	mov	r5, r0
      break;
 800ca5a:	e7ee      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800ca5c:	462e      	mov	r6, r5
 800ca5e:	e789      	b.n	800c974 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800ca60:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca64:	4a47      	ldr	r2, [pc, #284]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800ca66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ca68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800ca6e:	b97d      	cbnz	r5, 800ca90 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca70:	4a44      	ldr	r2, [pc, #272]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800ca72:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ca74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ca78:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800ca7c:	430b      	orrs	r3, r1
 800ca7e:	6553      	str	r3, [r2, #84]	; 0x54
 800ca80:	e789      	b.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca82:	2101      	movs	r1, #1
 800ca84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ca88:	f7ff fb42 	bl	800c110 <RCCEx_PLL3_Config>
 800ca8c:	4605      	mov	r5, r0
      break;
 800ca8e:	e7ee      	b.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ca90:	462e      	mov	r6, r5
 800ca92:	e780      	b.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca94:	4a3b      	ldr	r2, [pc, #236]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800ca96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ca98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800ca9e:	b96d      	cbnz	r5, 800cabc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800caa0:	4a38      	ldr	r2, [pc, #224]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800caa2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800caa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caa8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800caaa:	430b      	orrs	r3, r1
 800caac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800caae:	e77f      	b.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cab0:	2102      	movs	r1, #2
 800cab2:	1d20      	adds	r0, r4, #4
 800cab4:	f7ff faa6 	bl	800c004 <RCCEx_PLL2_Config>
 800cab8:	4605      	mov	r5, r0
      break;
 800caba:	e7f0      	b.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0x882>
 800cabc:	462e      	mov	r6, r5
 800cabe:	e777      	b.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cac0:	2102      	movs	r1, #2
 800cac2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cac6:	f7ff fb23 	bl	800c110 <RCCEx_PLL3_Config>
 800caca:	2800      	cmp	r0, #0
 800cacc:	f43f af75 	beq.w	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 800cad0:	2601      	movs	r6, #1
 800cad2:	e772      	b.n	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d084      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800cad8:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800cae0:	d006      	beq.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cae2:	4a28      	ldr	r2, [pc, #160]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cae4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800caea:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800caec:	430b      	orrs	r3, r1
 800caee:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800caf6:	d006      	beq.n	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800caf8:	4a22      	ldr	r2, [pc, #136]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cafa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cafc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb00:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800cb02:	430b      	orrs	r3, r1
 800cb04:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800cb0c:	d006      	beq.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800cb0e:	4a1d      	ldr	r2, [pc, #116]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cb10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cb12:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800cb16:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cb22:	d009      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb24:	4b17      	ldr	r3, [pc, #92]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cb26:	691a      	ldr	r2, [r3, #16]
 800cb28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb2c:	611a      	str	r2, [r3, #16]
 800cb2e:	691a      	ldr	r2, [r3, #16]
 800cb30:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800cb34:	430a      	orrs	r2, r1
 800cb36:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	db19      	blt.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800cb44:	d007      	beq.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cb46:	4a0f      	ldr	r2, [pc, #60]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cb48:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cb4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800cb4e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800cb52:	430b      	orrs	r3, r1
 800cb54:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800cb56:	b106      	cbz	r6, 800cb5a <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800cb58:	2601      	movs	r6, #1
}
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800cb5e:	2601      	movs	r6, #1
 800cb60:	e7bb      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb62:	4a08      	ldr	r2, [pc, #32]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cb64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cb66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb6a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800cb6c:	e739      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800cb6e:	462e      	mov	r6, r5
 800cb70:	e7b3      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cb72:	4a04      	ldr	r2, [pc, #16]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cb74:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800cb76:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800cb7a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800cb7c:	430b      	orrs	r3, r1
 800cb7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb80:	e7dd      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x922>
 800cb82:	bf00      	nop
 800cb84:	58024400 	.word	0x58024400

0800cb88 <SPI_RxISR_8BIT>:
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800cb88:	6802      	ldr	r2, [r0, #0]
 800cb8a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cb8c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800cb90:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb92:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cb94:	3301      	adds	r3, #1
 800cb96:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800cb98:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800cba6:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	b923      	cbnz	r3, 800cbb8 <SPI_RxISR_8BIT+0x30>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800cbae:	6802      	ldr	r2, [r0, #0]
 800cbb0:	6913      	ldr	r3, [r2, #16]
 800cbb2:	f023 0301 	bic.w	r3, r3, #1
 800cbb6:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cbb8:	4770      	bx	lr

0800cbba <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cbba:	6802      	ldr	r2, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cbbc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cbbe:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800cbc0:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbc2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cbc4:	3302      	adds	r3, #2
 800cbc6:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800cbc8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800cbd6:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	b923      	cbnz	r3, 800cbe8 <SPI_RxISR_16BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800cbde:	6802      	ldr	r2, [r0, #0]
 800cbe0:	6913      	ldr	r3, [r2, #16]
 800cbe2:	f023 0301 	bic.w	r3, r3, #1
 800cbe6:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cbe8:	4770      	bx	lr

0800cbea <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800cbea:	6802      	ldr	r2, [r0, #0]
 800cbec:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cbee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cbf0:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800cbf2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800cbf8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800cc06:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	b923      	cbnz	r3, 800cc18 <SPI_RxISR_32BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800cc0e:	6802      	ldr	r2, [r0, #0]
 800cc10:	6913      	ldr	r3, [r2, #16]
 800cc12:	f023 0301 	bic.w	r3, r3, #1
 800cc16:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cc18:	4770      	bx	lr

0800cc1a <SPI_TxISR_8BIT>:
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800cc1a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cc1c:	6803      	ldr	r3, [r0, #0]
 800cc1e:	7812      	ldrb	r2, [r2, #0]
 800cc20:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800cc24:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cc26:	3301      	adds	r3, #1
 800cc28:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800cc2a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	3b01      	subs	r3, #1
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800cc38:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	b923      	cbnz	r3, 800cc4a <SPI_TxISR_8BIT+0x30>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800cc40:	6802      	ldr	r2, [r0, #0]
 800cc42:	6913      	ldr	r3, [r2, #16]
 800cc44:	f023 0302 	bic.w	r3, r3, #2
 800cc48:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cc4a:	4770      	bx	lr

0800cc4c <SPI_TxISR_16BIT>:
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cc4c:	6803      	ldr	r3, [r0, #0]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cc4e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cc50:	8812      	ldrh	r2, [r2, #0]
 800cc52:	841a      	strh	r2, [r3, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc54:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cc56:	3302      	adds	r3, #2
 800cc58:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800cc5a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	3b01      	subs	r3, #1
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800cc68:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	b923      	cbnz	r3, 800cc7a <SPI_TxISR_16BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800cc70:	6802      	ldr	r2, [r0, #0]
 800cc72:	6913      	ldr	r3, [r2, #16]
 800cc74:	f023 0302 	bic.w	r3, r3, #2
 800cc78:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cc7a:	4770      	bx	lr

0800cc7c <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cc7c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cc7e:	6803      	ldr	r3, [r0, #0]
 800cc80:	6812      	ldr	r2, [r2, #0]
 800cc82:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800cc84:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cc86:	3304      	adds	r3, #4
 800cc88:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800cc8a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	3b01      	subs	r3, #1
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800cc98:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	b923      	cbnz	r3, 800ccaa <SPI_TxISR_32BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800cca0:	6802      	ldr	r2, [r0, #0]
 800cca2:	6913      	ldr	r3, [r2, #16]
 800cca4:	f023 0302 	bic.w	r3, r3, #2
 800cca8:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800ccaa:	4770      	bx	lr

0800ccac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ccac:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800ccae:	6802      	ldr	r2, [r0, #0]
 800ccb0:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ccb2:	6991      	ldr	r1, [r2, #24]
 800ccb4:	f041 0108 	orr.w	r1, r1, #8
 800ccb8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ccba:	6801      	ldr	r1, [r0, #0]
 800ccbc:	698a      	ldr	r2, [r1, #24]
 800ccbe:	f042 0210 	orr.w	r2, r2, #16
 800ccc2:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccc4:	6801      	ldr	r1, [r0, #0]
 800ccc6:	680a      	ldr	r2, [r1, #0]
 800ccc8:	f022 0201 	bic.w	r2, r2, #1
 800cccc:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ccce:	6801      	ldr	r1, [r0, #0]
 800ccd0:	690c      	ldr	r4, [r1, #16]
 800ccd2:	4a29      	ldr	r2, [pc, #164]	; (800cd78 <SPI_CloseTransfer+0xcc>)
 800ccd4:	4022      	ands	r2, r4
 800ccd6:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ccd8:	6801      	ldr	r1, [r0, #0]
 800ccda:	688a      	ldr	r2, [r1, #8]
 800ccdc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cce0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cce2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800cce6:	b2d2      	uxtb	r2, r2
 800cce8:	2a04      	cmp	r2, #4
 800ccea:	d00d      	beq.n	800cd08 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ccec:	f013 0f20 	tst.w	r3, #32
 800ccf0:	d00a      	beq.n	800cd08 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ccf2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ccf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ccfa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ccfe:	6801      	ldr	r1, [r0, #0]
 800cd00:	698a      	ldr	r2, [r1, #24]
 800cd02:	f042 0220 	orr.w	r2, r2, #32
 800cd06:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cd08:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800cd0c:	b2d2      	uxtb	r2, r2
 800cd0e:	2a03      	cmp	r2, #3
 800cd10:	d00d      	beq.n	800cd2e <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cd12:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cd16:	d00a      	beq.n	800cd2e <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cd18:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800cd1c:	f042 0204 	orr.w	r2, r2, #4
 800cd20:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd24:	6801      	ldr	r1, [r0, #0]
 800cd26:	698a      	ldr	r2, [r1, #24]
 800cd28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd2c:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cd2e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800cd32:	d00a      	beq.n	800cd4a <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cd34:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800cd38:	f042 0201 	orr.w	r2, r2, #1
 800cd3c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cd40:	6801      	ldr	r1, [r0, #0]
 800cd42:	698a      	ldr	r2, [r1, #24]
 800cd44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd48:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cd4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cd4e:	d00a      	beq.n	800cd66 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cd50:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800cd54:	f043 0308 	orr.w	r3, r3, #8
 800cd58:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cd5c:	6802      	ldr	r2, [r0, #0]
 800cd5e:	6993      	ldr	r3, [r2, #24]
 800cd60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd64:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cd6c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800cd70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	fffffc90 	.word	0xfffffc90

0800cd7c <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cd7c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cd7e:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cd80:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cd82:	3008      	adds	r0, #8
 800cd84:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800cd86:	fb03 0000 	mla	r0, r3, r0, r0
 800cd8a:	4770      	bx	lr

0800cd8c <SPI_WaitOnFlagUntilTimeout>:
{
 800cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd90:	4607      	mov	r7, r0
 800cd92:	460e      	mov	r6, r1
 800cd94:	4615      	mov	r5, r2
 800cd96:	4698      	mov	r8, r3
 800cd98:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cd9a:	e000      	b.n	800cd9e <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd9c:	b1c4      	cbz	r4, 800cdd0 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	ea36 0303 	bics.w	r3, r6, r3
 800cda6:	bf0c      	ite	eq
 800cda8:	f04f 0c01 	moveq.w	ip, #1
 800cdac:	f04f 0c00 	movne.w	ip, #0
 800cdb0:	45ac      	cmp	ip, r5
 800cdb2:	d10a      	bne.n	800cdca <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdb4:	f7fc fa14 	bl	80091e0 <HAL_GetTick>
 800cdb8:	eba0 0008 	sub.w	r0, r0, r8
 800cdbc:	42a0      	cmp	r0, r4
 800cdbe:	d3ed      	bcc.n	800cd9c <SPI_WaitOnFlagUntilTimeout+0x10>
 800cdc0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cdc4:	d0ea      	beq.n	800cd9c <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 800cdc6:	2003      	movs	r0, #3
 800cdc8:	e000      	b.n	800cdcc <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800cdca:	2000      	movs	r0, #0
}
 800cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 800cdd0:	2003      	movs	r0, #3
 800cdd2:	e7fb      	b.n	800cdcc <SPI_WaitOnFlagUntilTimeout+0x40>

0800cdd4 <HAL_SPI_Init>:
  if (hspi == NULL)
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	f000 80a3 	beq.w	800cf20 <HAL_SPI_Init+0x14c>
{
 800cdda:	b570      	push	{r4, r5, r6, lr}
 800cddc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdde:	2300      	movs	r3, #0
 800cde0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cde2:	6805      	ldr	r5, [r0, #0]
 800cde4:	4b52      	ldr	r3, [pc, #328]	; (800cf30 <HAL_SPI_Init+0x15c>)
 800cde6:	4e53      	ldr	r6, [pc, #332]	; (800cf34 <HAL_SPI_Init+0x160>)
 800cde8:	429d      	cmp	r5, r3
 800cdea:	bf18      	it	ne
 800cdec:	42b5      	cmpne	r5, r6
 800cdee:	bf14      	ite	ne
 800cdf0:	2601      	movne	r6, #1
 800cdf2:	2600      	moveq	r6, #0
 800cdf4:	d007      	beq.n	800ce06 <HAL_SPI_Init+0x32>
 800cdf6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800cdfa:	429d      	cmp	r5, r3
 800cdfc:	d003      	beq.n	800ce06 <HAL_SPI_Init+0x32>
 800cdfe:	68c3      	ldr	r3, [r0, #12]
 800ce00:	2b0f      	cmp	r3, #15
 800ce02:	f200 808f 	bhi.w	800cf24 <HAL_SPI_Init+0x150>
  packet_length = SPI_GetPacketSize(hspi);
 800ce06:	4620      	mov	r0, r4
 800ce08:	f7ff ffb8 	bl	800cd7c <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce0c:	b12e      	cbz	r6, 800ce1a <HAL_SPI_Init+0x46>
 800ce0e:	4b4a      	ldr	r3, [pc, #296]	; (800cf38 <HAL_SPI_Init+0x164>)
 800ce10:	429d      	cmp	r5, r3
 800ce12:	d002      	beq.n	800ce1a <HAL_SPI_Init+0x46>
 800ce14:	2808      	cmp	r0, #8
 800ce16:	f200 8087 	bhi.w	800cf28 <HAL_SPI_Init+0x154>
 800ce1a:	4a45      	ldr	r2, [pc, #276]	; (800cf30 <HAL_SPI_Init+0x15c>)
 800ce1c:	4b45      	ldr	r3, [pc, #276]	; (800cf34 <HAL_SPI_Init+0x160>)
 800ce1e:	429d      	cmp	r5, r3
 800ce20:	bf18      	it	ne
 800ce22:	4295      	cmpne	r5, r2
 800ce24:	d003      	beq.n	800ce2e <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce2a:	429d      	cmp	r5, r3
 800ce2c:	d101      	bne.n	800ce32 <HAL_SPI_Init+0x5e>
 800ce2e:	2810      	cmp	r0, #16
 800ce30:	d87c      	bhi.n	800cf2c <HAL_SPI_Init+0x158>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce32:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d059      	beq.n	800ceee <HAL_SPI_Init+0x11a>
  hspi->State = HAL_SPI_STATE_BUSY;
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800ce40:	6822      	ldr	r2, [r4, #0]
 800ce42:	6813      	ldr	r3, [r2, #0]
 800ce44:	f023 0301 	bic.w	r3, r3, #1
 800ce48:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce4a:	6821      	ldr	r1, [r4, #0]
 800ce4c:	688a      	ldr	r2, [r1, #8]
 800ce4e:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce52:	69a3      	ldr	r3, [r4, #24]
 800ce54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce58:	d04f      	beq.n	800cefa <HAL_SPI_Init+0x126>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ce5a:	69e3      	ldr	r3, [r4, #28]
 800ce5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ce5e:	430b      	orrs	r3, r1
 800ce60:	4313      	orrs	r3, r2
 800ce62:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ce64:	4313      	orrs	r3, r2
 800ce66:	68e1      	ldr	r1, [r4, #12]
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	430b      	orrs	r3, r1
 800ce6c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ce6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ce72:	4313      	orrs	r3, r2
 800ce74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ce76:	4313      	orrs	r3, r2
 800ce78:	69a2      	ldr	r2, [r4, #24]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	6922      	ldr	r2, [r4, #16]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	6962      	ldr	r2, [r4, #20]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	6a22      	ldr	r2, [r4, #32]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	6862      	ldr	r2, [r4, #4]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	68a2      	ldr	r2, [r4, #8]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ce96:	4313      	orrs	r3, r2
 800ce98:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ce9a:	6822      	ldr	r2, [r4, #0]
 800ce9c:	430b      	orrs	r3, r1
 800ce9e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cea0:	6863      	ldr	r3, [r4, #4]
 800cea2:	b96b      	cbnz	r3, 800cec0 <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cea4:	6822      	ldr	r2, [r4, #0]
 800cea6:	6893      	ldr	r3, [r2, #8]
 800cea8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800ceac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ceb0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ceb2:	6822      	ldr	r2, [r4, #0]
 800ceb4:	6893      	ldr	r3, [r2, #8]
 800ceb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ceba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cebe:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cec0:	6822      	ldr	r2, [r4, #0]
 800cec2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cec4:	f023 0301 	bic.w	r3, r3, #1
 800cec8:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ceca:	6863      	ldr	r3, [r4, #4]
 800cecc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800ced0:	d006      	beq.n	800cee0 <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ced2:	6822      	ldr	r2, [r4, #0]
 800ced4:	68d3      	ldr	r3, [r2, #12]
 800ced6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ceda:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800cedc:	430b      	orrs	r3, r1
 800cede:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cee0:	2000      	movs	r0, #0
 800cee2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cee6:	2301      	movs	r3, #1
 800cee8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800ceec:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800ceee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800cef2:	4620      	mov	r0, r4
 800cef4:	f7f6 f910 	bl	8003118 <HAL_SPI_MspInit>
 800cef8:	e79f      	b.n	800ce3a <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cefa:	6863      	ldr	r3, [r4, #4]
 800cefc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf00:	d006      	beq.n	800cf10 <HAL_SPI_Init+0x13c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1a9      	bne.n	800ce5a <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cf06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf0c:	d1a5      	bne.n	800ce5a <HAL_SPI_Init+0x86>
 800cf0e:	e002      	b.n	800cf16 <HAL_SPI_Init+0x142>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d1f5      	bne.n	800cf02 <HAL_SPI_Init+0x12e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cf16:	680b      	ldr	r3, [r1, #0]
 800cf18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cf1c:	600b      	str	r3, [r1, #0]
 800cf1e:	e79c      	b.n	800ce5a <HAL_SPI_Init+0x86>
    return HAL_ERROR;
 800cf20:	2001      	movs	r0, #1
}
 800cf22:	4770      	bx	lr
    return HAL_ERROR;
 800cf24:	2001      	movs	r0, #1
 800cf26:	e7e1      	b.n	800ceec <HAL_SPI_Init+0x118>
    return HAL_ERROR;
 800cf28:	2001      	movs	r0, #1
 800cf2a:	e7df      	b.n	800ceec <HAL_SPI_Init+0x118>
 800cf2c:	2001      	movs	r0, #1
 800cf2e:	e7dd      	b.n	800ceec <HAL_SPI_Init+0x118>
 800cf30:	40013000 	.word	0x40013000
 800cf34:	40003800 	.word	0x40003800
 800cf38:	40003c00 	.word	0x40003c00

0800cf3c <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800cf3c:	b198      	cbz	r0, 800cf66 <HAL_SPI_DeInit+0x2a>
{
 800cf3e:	b510      	push	{r4, lr}
 800cf40:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800cf42:	2302      	movs	r3, #2
 800cf44:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800cf48:	6802      	ldr	r2, [r0, #0]
 800cf4a:	6813      	ldr	r3, [r2, #0]
 800cf4c:	f023 0301 	bic.w	r3, r3, #1
 800cf50:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800cf52:	f7f6 f94d 	bl	80031f0 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf56:	2000      	movs	r0, #0
 800cf58:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800cf5c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 800cf60:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800cf64:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800cf66:	2001      	movs	r0, #1
}
 800cf68:	4770      	bx	lr

0800cf6a <HAL_SPI_TransmitReceive>:
{
 800cf6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	461d      	mov	r5, r3
 800cf72:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cf74:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 800cf78:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	f000 8179 	beq.w	800d274 <HAL_SPI_TransmitReceive+0x30a>
 800cf82:	4604      	mov	r4, r0
 800cf84:	4688      	mov	r8, r1
 800cf86:	4691      	mov	r9, r2
 800cf88:	2301      	movs	r3, #1
 800cf8a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800cf8e:	f7fc f927 	bl	80091e0 <HAL_GetTick>
 800cf92:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800cf94:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800cf98:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800cf9a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d007      	beq.n	800cfb0 <HAL_SPI_TransmitReceive+0x46>
 800cfa0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800cfa4:	d13d      	bne.n	800d022 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800cfa6:	68a2      	ldr	r2, [r4, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800cfa8:	2a00      	cmp	r2, #0
 800cfaa:	d13a      	bne.n	800d022 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	d138      	bne.n	800d022 <HAL_SPI_TransmitReceive+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cfb0:	f1b9 0f00 	cmp.w	r9, #0
 800cfb4:	bf18      	it	ne
 800cfb6:	f1b8 0f00 	cmpne.w	r8, #0
 800cfba:	d039      	beq.n	800d030 <HAL_SPI_TransmitReceive+0xc6>
 800cfbc:	2d00      	cmp	r5, #0
 800cfbe:	d037      	beq.n	800d030 <HAL_SPI_TransmitReceive+0xc6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cfc0:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b04      	cmp	r3, #4
 800cfc8:	d002      	beq.n	800cfd0 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cfca:	2305      	movs	r3, #5
 800cfcc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cfd6:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 800cfda:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800cfde:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cfe2:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800cfe6:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800cfea:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800cfee:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cff0:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cff2:	6822      	ldr	r2, [r4, #0]
 800cff4:	6851      	ldr	r1, [r2, #4]
 800cff6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800cffa:	400b      	ands	r3, r1
 800cffc:	432b      	orrs	r3, r5
 800cffe:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800d000:	6822      	ldr	r2, [r4, #0]
 800d002:	6813      	ldr	r3, [r2, #0]
 800d004:	f043 0301 	orr.w	r3, r3, #1
 800d008:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d00a:	6863      	ldr	r3, [r4, #4]
 800d00c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d010:	d013      	beq.n	800d03a <HAL_SPI_TransmitReceive+0xd0>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d012:	68e3      	ldr	r3, [r4, #12]
 800d014:	2b0f      	cmp	r3, #15
 800d016:	d868      	bhi.n	800d0ea <HAL_SPI_TransmitReceive+0x180>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d018:	2b07      	cmp	r3, #7
 800d01a:	f200 80bb 	bhi.w	800d194 <HAL_SPI_TransmitReceive+0x22a>
  initial_RxXferCount = Size;
 800d01e:	46a8      	mov	r8, r5
 800d020:	e0c4      	b.n	800d1ac <HAL_SPI_TransmitReceive+0x242>
    __HAL_UNLOCK(hspi);
 800d022:	2300      	movs	r3, #0
 800d024:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800d028:	2002      	movs	r0, #2
}
 800d02a:	b002      	add	sp, #8
 800d02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800d030:	2300      	movs	r3, #0
 800d032:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800d036:	2001      	movs	r0, #1
 800d038:	e7f7      	b.n	800d02a <HAL_SPI_TransmitReceive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d03a:	6822      	ldr	r2, [r4, #0]
 800d03c:	6813      	ldr	r3, [r2, #0]
 800d03e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	e7e5      	b.n	800d012 <HAL_SPI_TransmitReceive+0xa8>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	6959      	ldr	r1, [r3, #20]
 800d04a:	f248 0208 	movw	r2, #32776	; 0x8008
 800d04e:	4211      	tst	r1, r2
 800d050:	d013      	beq.n	800d07a <HAL_SPI_TransmitReceive+0x110>
 800d052:	f1b8 0f00 	cmp.w	r8, #0
 800d056:	d010      	beq.n	800d07a <HAL_SPI_TransmitReceive+0x110>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d058:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05c:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d05e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d060:	3304      	adds	r3, #4
 800d062:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800d064:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d068:	b29b      	uxth	r3, r3
 800d06a:	3b01      	subs	r3, #1
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d072:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800d076:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d07a:	f7fc f8b1 	bl	80091e0 <HAL_GetTick>
 800d07e:	1bc0      	subs	r0, r0, r7
 800d080:	42b0      	cmp	r0, r6
 800d082:	d302      	bcc.n	800d08a <HAL_SPI_TransmitReceive+0x120>
 800d084:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d088:	d11e      	bne.n	800d0c8 <HAL_SPI_TransmitReceive+0x15e>
 800d08a:	b1ee      	cbz	r6, 800d0c8 <HAL_SPI_TransmitReceive+0x15e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d08c:	ea45 0308 	orr.w	r3, r5, r8
 800d090:	b29b      	uxth	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	f000 80d2 	beq.w	800d23c <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	695a      	ldr	r2, [r3, #20]
 800d09c:	f012 0f02 	tst.w	r2, #2
 800d0a0:	d0d1      	beq.n	800d046 <HAL_SPI_TransmitReceive+0xdc>
 800d0a2:	2d00      	cmp	r5, #0
 800d0a4:	d0cf      	beq.n	800d046 <HAL_SPI_TransmitReceive+0xdc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d0a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d0a8:	6812      	ldr	r2, [r2, #0]
 800d0aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d0ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800d0b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d0c0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800d0c4:	b2ad      	uxth	r5, r5
 800d0c6:	e7be      	b.n	800d046 <HAL_SPI_TransmitReceive+0xdc>
        SPI_CloseTransfer(hspi);
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f7ff fdef 	bl	800ccac <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d0d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800d0e6:	2003      	movs	r0, #3
 800d0e8:	e79f      	b.n	800d02a <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800d0ea:	46a8      	mov	r8, r5
 800d0ec:	e7ce      	b.n	800d08c <HAL_SPI_TransmitReceive+0x122>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0ee:	f7fc f877 	bl	80091e0 <HAL_GetTick>
 800d0f2:	1bc0      	subs	r0, r0, r7
 800d0f4:	42b0      	cmp	r0, r6
 800d0f6:	d302      	bcc.n	800d0fe <HAL_SPI_TransmitReceive+0x194>
 800d0f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d0fc:	d139      	bne.n	800d172 <HAL_SPI_TransmitReceive+0x208>
 800d0fe:	2e00      	cmp	r6, #0
 800d100:	d037      	beq.n	800d172 <HAL_SPI_TransmitReceive+0x208>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d102:	ea45 0308 	orr.w	r3, r5, r8
 800d106:	b29b      	uxth	r3, r3
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 8097 	beq.w	800d23c <HAL_SPI_TransmitReceive+0x2d2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	f013 0f02 	tst.w	r3, #2
 800d116:	d011      	beq.n	800d13c <HAL_SPI_TransmitReceive+0x1d2>
 800d118:	b185      	cbz	r5, 800d13c <HAL_SPI_TransmitReceive+0x1d2>
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d11a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	f8aa 3020 	strh.w	r3, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d122:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d124:	3302      	adds	r3, #2
 800d126:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800d128:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	3b01      	subs	r3, #1
 800d130:	b29b      	uxth	r3, r3
 800d132:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d136:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800d13a:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d13c:	6823      	ldr	r3, [r4, #0]
 800d13e:	695b      	ldr	r3, [r3, #20]
 800d140:	f013 0f01 	tst.w	r3, #1
 800d144:	d0d3      	beq.n	800d0ee <HAL_SPI_TransmitReceive+0x184>
 800d146:	f1b8 0f00 	cmp.w	r8, #0
 800d14a:	d0d0      	beq.n	800d0ee <HAL_SPI_TransmitReceive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d14c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d14e:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 800d152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d156:	3302      	adds	r3, #2
 800d158:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d15a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d15e:	b29b      	uxth	r3, r3
 800d160:	3b01      	subs	r3, #1
 800d162:	b29b      	uxth	r3, r3
 800d164:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d168:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800d16c:	fa1f f888 	uxth.w	r8, r8
 800d170:	e7bd      	b.n	800d0ee <HAL_SPI_TransmitReceive+0x184>
        SPI_CloseTransfer(hspi);
 800d172:	4620      	mov	r0, r4
 800d174:	f7ff fd9a 	bl	800ccac <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800d178:	2300      	movs	r3, #0
 800d17a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d17e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d186:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d18a:	2301      	movs	r3, #1
 800d18c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800d190:	2003      	movs	r0, #3
 800d192:	e74a      	b.n	800d02a <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800d194:	46a8      	mov	r8, r5
 800d196:	e7b4      	b.n	800d102 <HAL_SPI_TransmitReceive+0x198>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d198:	f7fc f822 	bl	80091e0 <HAL_GetTick>
 800d19c:	1bc0      	subs	r0, r0, r7
 800d19e:	42b0      	cmp	r0, r6
 800d1a0:	d302      	bcc.n	800d1a8 <HAL_SPI_TransmitReceive+0x23e>
 800d1a2:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d1a6:	d138      	bne.n	800d21a <HAL_SPI_TransmitReceive+0x2b0>
 800d1a8:	2e00      	cmp	r6, #0
 800d1aa:	d036      	beq.n	800d21a <HAL_SPI_TransmitReceive+0x2b0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d1ac:	ea45 0308 	orr.w	r3, r5, r8
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d042      	beq.n	800d23c <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	695a      	ldr	r2, [r3, #20]
 800d1ba:	f012 0f02 	tst.w	r2, #2
 800d1be:	d011      	beq.n	800d1e4 <HAL_SPI_TransmitReceive+0x27a>
 800d1c0:	b185      	cbz	r5, 800d1e4 <HAL_SPI_TransmitReceive+0x27a>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d1c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d1c4:	7812      	ldrb	r2, [r2, #0]
 800d1c6:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d1ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800d1d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d1de:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800d1e2:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	695a      	ldr	r2, [r3, #20]
 800d1e8:	f012 0f01 	tst.w	r2, #1
 800d1ec:	d0d4      	beq.n	800d198 <HAL_SPI_TransmitReceive+0x22e>
 800d1ee:	f1b8 0f00 	cmp.w	r8, #0
 800d1f2:	d0d1      	beq.n	800d198 <HAL_SPI_TransmitReceive+0x22e>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1fa:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1fe:	3301      	adds	r3, #1
 800d200:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d202:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d206:	b29b      	uxth	r3, r3
 800d208:	3b01      	subs	r3, #1
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d210:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800d214:	fa1f f888 	uxth.w	r8, r8
 800d218:	e7be      	b.n	800d198 <HAL_SPI_TransmitReceive+0x22e>
        SPI_CloseTransfer(hspi);
 800d21a:	4620      	mov	r0, r4
 800d21c:	f7ff fd46 	bl	800ccac <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800d220:	2300      	movs	r3, #0
 800d222:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d226:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d22a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d22e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d232:	2301      	movs	r3, #1
 800d234:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800d238:	2003      	movs	r0, #3
 800d23a:	e6f6      	b.n	800d02a <HAL_SPI_TransmitReceive+0xc0>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d23c:	9600      	str	r6, [sp, #0]
 800d23e:	463b      	mov	r3, r7
 800d240:	2200      	movs	r2, #0
 800d242:	2108      	movs	r1, #8
 800d244:	4620      	mov	r0, r4
 800d246:	f7ff fda1 	bl	800cd8c <SPI_WaitOnFlagUntilTimeout>
 800d24a:	b128      	cbz	r0, 800d258 <HAL_SPI_TransmitReceive+0x2ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d24c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d250:	f043 0320 	orr.w	r3, r3, #32
 800d254:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800d258:	4620      	mov	r0, r4
 800d25a:	f7ff fd27 	bl	800ccac <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800d25e:	2300      	movs	r3, #0
 800d260:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800d264:	2301      	movs	r3, #1
 800d266:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d26a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d26e:	b91b      	cbnz	r3, 800d278 <HAL_SPI_TransmitReceive+0x30e>
  return errorcode;
 800d270:	2000      	movs	r0, #0
 800d272:	e6da      	b.n	800d02a <HAL_SPI_TransmitReceive+0xc0>
  __HAL_LOCK(hspi);
 800d274:	2002      	movs	r0, #2
 800d276:	e6d8      	b.n	800d02a <HAL_SPI_TransmitReceive+0xc0>
    return HAL_ERROR;
 800d278:	2001      	movs	r0, #1
 800d27a:	e6d6      	b.n	800d02a <HAL_SPI_TransmitReceive+0xc0>

0800d27c <HAL_SPI_Receive>:
{
 800d27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d280:	b082      	sub	sp, #8
 800d282:	4604      	mov	r4, r0
 800d284:	468a      	mov	sl, r1
 800d286:	4691      	mov	r9, r2
 800d288:	461d      	mov	r5, r3
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d28a:	f8d0 8000 	ldr.w	r8, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d28e:	6843      	ldr	r3, [r0, #4]
 800d290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d294:	d042      	beq.n	800d31c <HAL_SPI_Receive+0xa0>
  __HAL_LOCK(hspi);
 800d296:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	f000 810c 	beq.w	800d4b8 <HAL_SPI_Receive+0x23c>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800d2a6:	f7fb ff9b 	bl	80091e0 <HAL_GetTick>
 800d2aa:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d2ac:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 800d2b0:	b2f6      	uxtb	r6, r6
 800d2b2:	2e01      	cmp	r6, #1
 800d2b4:	d13f      	bne.n	800d336 <HAL_SPI_Receive+0xba>
  if ((pData == NULL) || (Size == 0UL))
 800d2b6:	f1b9 0f00 	cmp.w	r9, #0
 800d2ba:	bf18      	it	ne
 800d2bc:	f1ba 0f00 	cmpne.w	sl, #0
 800d2c0:	d041      	beq.n	800d346 <HAL_SPI_Receive+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d2c2:	2304      	movs	r3, #4
 800d2c4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d2ce:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d2d2:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d2d6:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800d2da:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d2dc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d2e0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d2e4:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d2e6:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2e8:	68a3      	ldr	r3, [r4, #8]
 800d2ea:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d2ee:	d02e      	beq.n	800d34e <HAL_SPI_Receive+0xd2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d2f0:	6823      	ldr	r3, [r4, #0]
 800d2f2:	6859      	ldr	r1, [r3, #4]
 800d2f4:	4a71      	ldr	r2, [pc, #452]	; (800d4bc <HAL_SPI_Receive+0x240>)
 800d2f6:	400a      	ands	r2, r1
 800d2f8:	ea49 0202 	orr.w	r2, r9, r2
 800d2fc:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800d2fe:	6822      	ldr	r2, [r4, #0]
 800d300:	6813      	ldr	r3, [r2, #0]
 800d302:	f043 0301 	orr.w	r3, r3, #1
 800d306:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d308:	6863      	ldr	r3, [r4, #4]
 800d30a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d30e:	d024      	beq.n	800d35a <HAL_SPI_Receive+0xde>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d310:	68e3      	ldr	r3, [r4, #12]
 800d312:	2b0f      	cmp	r3, #15
 800d314:	d830      	bhi.n	800d378 <HAL_SPI_Receive+0xfc>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d316:	2b07      	cmp	r3, #7
 800d318:	d862      	bhi.n	800d3e0 <HAL_SPI_Receive+0x164>
 800d31a:	e094      	b.n	800d446 <HAL_SPI_Receive+0x1ca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d31c:	6883      	ldr	r3, [r0, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1b9      	bne.n	800d296 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d322:	2304      	movs	r3, #4
 800d324:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d328:	9500      	str	r5, [sp, #0]
 800d32a:	4613      	mov	r3, r2
 800d32c:	460a      	mov	r2, r1
 800d32e:	f7ff fe1c 	bl	800cf6a <HAL_SPI_TransmitReceive>
 800d332:	4606      	mov	r6, r0
 800d334:	e003      	b.n	800d33e <HAL_SPI_Receive+0xc2>
    __HAL_UNLOCK(hspi);
 800d336:	2300      	movs	r3, #0
 800d338:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800d33c:	2602      	movs	r6, #2
}
 800d33e:	4630      	mov	r0, r6
 800d340:	b002      	add	sp, #8
 800d342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800d346:	2300      	movs	r3, #0
 800d348:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800d34c:	e7f7      	b.n	800d33e <HAL_SPI_Receive+0xc2>
    SPI_1LINE_RX(hspi);
 800d34e:	6822      	ldr	r2, [r4, #0]
 800d350:	6813      	ldr	r3, [r2, #0]
 800d352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d356:	6013      	str	r3, [r2, #0]
 800d358:	e7ca      	b.n	800d2f0 <HAL_SPI_Receive+0x74>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d35a:	6822      	ldr	r2, [r4, #0]
 800d35c:	6813      	ldr	r3, [r2, #0]
 800d35e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d362:	6013      	str	r3, [r2, #0]
 800d364:	e7d4      	b.n	800d310 <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d366:	f7fb ff3b 	bl	80091e0 <HAL_GetTick>
 800d36a:	1bc0      	subs	r0, r0, r7
 800d36c:	42a8      	cmp	r0, r5
 800d36e:	d302      	bcc.n	800d376 <HAL_SPI_Receive+0xfa>
 800d370:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d374:	d11a      	bne.n	800d3ac <HAL_SPI_Receive+0x130>
 800d376:	b1cd      	cbz	r5, 800d3ac <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0UL)
 800d378:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f000 808a 	beq.w	800d498 <HAL_SPI_Receive+0x21c>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d384:	6823      	ldr	r3, [r4, #0]
 800d386:	6959      	ldr	r1, [r3, #20]
 800d388:	f248 0208 	movw	r2, #32776	; 0x8008
 800d38c:	4211      	tst	r1, r2
 800d38e:	d0ea      	beq.n	800d366 <HAL_SPI_Receive+0xea>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d390:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d394:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d398:	3304      	adds	r3, #4
 800d39a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d39c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800d3a0:	b292      	uxth	r2, r2
 800d3a2:	3a01      	subs	r2, #1
 800d3a4:	b292      	uxth	r2, r2
 800d3a6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800d3aa:	e7e5      	b.n	800d378 <HAL_SPI_Receive+0xfc>
          SPI_CloseTransfer(hspi);
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f7ff fc7d 	bl	800ccac <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3b8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d3bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800d3ca:	2603      	movs	r6, #3
 800d3cc:	e7b7      	b.n	800d33e <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3ce:	f7fb ff07 	bl	80091e0 <HAL_GetTick>
 800d3d2:	1bc0      	subs	r0, r0, r7
 800d3d4:	42a8      	cmp	r0, r5
 800d3d6:	d302      	bcc.n	800d3de <HAL_SPI_Receive+0x162>
 800d3d8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d3dc:	d119      	bne.n	800d412 <HAL_SPI_Receive+0x196>
 800d3de:	b1c5      	cbz	r5, 800d412 <HAL_SPI_Receive+0x196>
    while (hspi->RxXferCount > 0UL)
 800d3e0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d056      	beq.n	800d498 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	f013 0f01 	tst.w	r3, #1
 800d3f2:	d0ec      	beq.n	800d3ce <HAL_SPI_Receive+0x152>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d3f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3f6:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800d3fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d3fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3fe:	3302      	adds	r3, #2
 800d400:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d402:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d406:	b29b      	uxth	r3, r3
 800d408:	3b01      	subs	r3, #1
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800d410:	e7e6      	b.n	800d3e0 <HAL_SPI_Receive+0x164>
          SPI_CloseTransfer(hspi);
 800d412:	4620      	mov	r0, r4
 800d414:	f7ff fc4a 	bl	800ccac <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800d418:	2300      	movs	r3, #0
 800d41a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d41e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d426:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d42a:	2301      	movs	r3, #1
 800d42c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800d430:	2603      	movs	r6, #3
 800d432:	e784      	b.n	800d33e <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d434:	f7fb fed4 	bl	80091e0 <HAL_GetTick>
 800d438:	1bc0      	subs	r0, r0, r7
 800d43a:	42a8      	cmp	r0, r5
 800d43c:	d302      	bcc.n	800d444 <HAL_SPI_Receive+0x1c8>
 800d43e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d442:	d118      	bne.n	800d476 <HAL_SPI_Receive+0x1fa>
 800d444:	b1bd      	cbz	r5, 800d476 <HAL_SPI_Receive+0x1fa>
    while (hspi->RxXferCount > 0UL)
 800d446:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	b323      	cbz	r3, 800d498 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	695a      	ldr	r2, [r3, #20]
 800d452:	f012 0f01 	tst.w	r2, #1
 800d456:	d0ed      	beq.n	800d434 <HAL_SPI_Receive+0x1b8>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d458:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d45a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d45e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d462:	3301      	adds	r3, #1
 800d464:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d466:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	3b01      	subs	r3, #1
 800d46e:	b29b      	uxth	r3, r3
 800d470:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800d474:	e7e7      	b.n	800d446 <HAL_SPI_Receive+0x1ca>
          SPI_CloseTransfer(hspi);
 800d476:	4620      	mov	r0, r4
 800d478:	f7ff fc18 	bl	800ccac <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800d47c:	2300      	movs	r3, #0
 800d47e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d482:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d48a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d48e:	2301      	movs	r3, #1
 800d490:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800d494:	2603      	movs	r6, #3
 800d496:	e752      	b.n	800d33e <HAL_SPI_Receive+0xc2>
  SPI_CloseTransfer(hspi);
 800d498:	4620      	mov	r0, r4
 800d49a:	f7ff fc07 	bl	800ccac <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f47f af45 	bne.w	800d33e <HAL_SPI_Receive+0xc2>
  return errorcode;
 800d4b4:	2600      	movs	r6, #0
 800d4b6:	e742      	b.n	800d33e <HAL_SPI_Receive+0xc2>
  __HAL_LOCK(hspi);
 800d4b8:	2602      	movs	r6, #2
 800d4ba:	e740      	b.n	800d33e <HAL_SPI_Receive+0xc2>
 800d4bc:	ffff0000 	.word	0xffff0000

0800d4c0 <HAL_SPI_Transmit_IT>:
  __HAL_LOCK(hspi);
 800d4c0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d060      	beq.n	800d58a <HAL_SPI_Transmit_IT+0xca>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if ((pData == NULL) || (Size == 0UL))
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	bf18      	it	ne
 800d4d2:	2900      	cmpne	r1, #0
 800d4d4:	d03b      	beq.n	800d54e <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d4d6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d13b      	bne.n	800d558 <HAL_SPI_Transmit_IT+0x98>
{
 800d4e0:	b410      	push	{r4}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d4ee:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d4f0:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d4f4:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800d4f8:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d4fa:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d4fe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800d502:	6703      	str	r3, [r0, #112]	; 0x70
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d504:	68c3      	ldr	r3, [r0, #12]
 800d506:	2b0f      	cmp	r3, #15
 800d508:	d92b      	bls.n	800d562 <HAL_SPI_Transmit_IT+0xa2>
    hspi->TxISR = SPI_TxISR_32BIT;
 800d50a:	4b21      	ldr	r3, [pc, #132]	; (800d590 <HAL_SPI_Transmit_IT+0xd0>)
 800d50c:	6743      	str	r3, [r0, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d50e:	6883      	ldr	r3, [r0, #8]
 800d510:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d514:	d02d      	beq.n	800d572 <HAL_SPI_Transmit_IT+0xb2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d516:	6801      	ldr	r1, [r0, #0]
 800d518:	684c      	ldr	r4, [r1, #4]
 800d51a:	4b1e      	ldr	r3, [pc, #120]	; (800d594 <HAL_SPI_Transmit_IT+0xd4>)
 800d51c:	4023      	ands	r3, r4
 800d51e:	431a      	orrs	r2, r3
 800d520:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800d522:	6802      	ldr	r2, [r0, #0]
 800d524:	6813      	ldr	r3, [r2, #0]
 800d526:	f043 0301 	orr.w	r3, r3, #1
 800d52a:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800d52c:	6802      	ldr	r2, [r0, #0]
 800d52e:	6911      	ldr	r1, [r2, #16]
 800d530:	f240 732a 	movw	r3, #1834	; 0x72a
 800d534:	430b      	orrs	r3, r1
 800d536:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d538:	6843      	ldr	r3, [r0, #4]
 800d53a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d53e:	d01e      	beq.n	800d57e <HAL_SPI_Transmit_IT+0xbe>
  __HAL_UNLOCK(hspi);
 800d540:	2300      	movs	r3, #0
 800d542:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800d546:	4618      	mov	r0, r3
}
 800d548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d54c:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800d54e:	2300      	movs	r3, #0
 800d550:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800d554:	2001      	movs	r0, #1
 800d556:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800d558:	2300      	movs	r3, #0
 800d55a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800d55e:	2002      	movs	r0, #2
 800d560:	4770      	bx	lr
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d562:	2b07      	cmp	r3, #7
 800d564:	d902      	bls.n	800d56c <HAL_SPI_Transmit_IT+0xac>
    hspi->TxISR = SPI_TxISR_16BIT;
 800d566:	4b0c      	ldr	r3, [pc, #48]	; (800d598 <HAL_SPI_Transmit_IT+0xd8>)
 800d568:	6743      	str	r3, [r0, #116]	; 0x74
 800d56a:	e7d0      	b.n	800d50e <HAL_SPI_Transmit_IT+0x4e>
    hspi->TxISR = SPI_TxISR_8BIT;
 800d56c:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <HAL_SPI_Transmit_IT+0xdc>)
 800d56e:	6743      	str	r3, [r0, #116]	; 0x74
 800d570:	e7cd      	b.n	800d50e <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 800d572:	6801      	ldr	r1, [r0, #0]
 800d574:	680b      	ldr	r3, [r1, #0]
 800d576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d57a:	600b      	str	r3, [r1, #0]
 800d57c:	e7cb      	b.n	800d516 <HAL_SPI_Transmit_IT+0x56>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d57e:	6802      	ldr	r2, [r0, #0]
 800d580:	6813      	ldr	r3, [r2, #0]
 800d582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d586:	6013      	str	r3, [r2, #0]
 800d588:	e7da      	b.n	800d540 <HAL_SPI_Transmit_IT+0x80>
  __HAL_LOCK(hspi);
 800d58a:	2002      	movs	r0, #2
}
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	0800cc7d 	.word	0x0800cc7d
 800d594:	ffff0000 	.word	0xffff0000
 800d598:	0800cc4d 	.word	0x0800cc4d
 800d59c:	0800cc1b 	.word	0x0800cc1b

0800d5a0 <HAL_SPI_TransmitReceive_IT>:
{
 800d5a0:	b430      	push	{r4, r5}
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d5a2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hspi);
 800d5a4:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 800d5a8:	f1bc 0f01 	cmp.w	ip, #1
 800d5ac:	f000 8101 	beq.w	800d7b2 <HAL_SPI_TransmitReceive_IT+0x212>
 800d5b0:	f04f 0c01 	mov.w	ip, #1
 800d5b4:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80
  tmp_state  = hspi->State;
 800d5b8:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
 800d5bc:	fa5f fc8c 	uxtb.w	ip, ip
  tmp_mode   = hspi->Init.Mode;
 800d5c0:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d5c2:	f1bc 0f01 	cmp.w	ip, #1
 800d5c6:	d008      	beq.n	800d5da <HAL_SPI_TransmitReceive_IT+0x3a>
 800d5c8:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800d5cc:	d136      	bne.n	800d63c <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d5ce:	6885      	ldr	r5, [r0, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800d5d0:	2d00      	cmp	r5, #0
 800d5d2:	d133      	bne.n	800d63c <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d5d4:	f1bc 0f04 	cmp.w	ip, #4
 800d5d8:	d130      	bne.n	800d63c <HAL_SPI_TransmitReceive_IT+0x9c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d5da:	2a00      	cmp	r2, #0
 800d5dc:	bf18      	it	ne
 800d5de:	2900      	cmpne	r1, #0
 800d5e0:	d032      	beq.n	800d648 <HAL_SPI_TransmitReceive_IT+0xa8>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d030      	beq.n	800d648 <HAL_SPI_TransmitReceive_IT+0xa8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5e6:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800d5ea:	b2ed      	uxtb	r5, r5
 800d5ec:	2d04      	cmp	r5, #4
 800d5ee:	d002      	beq.n	800d5f6 <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d5f0:	2505      	movs	r5, #5
 800d5f2:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5f6:	2500      	movs	r5, #0
 800d5f8:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d5fc:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d5fe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d602:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d606:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d608:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d60c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 800d610:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d614:	b292      	uxth	r2, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d616:	68c1      	ldr	r1, [r0, #12]
 800d618:	290f      	cmp	r1, #15
 800d61a:	d91a      	bls.n	800d652 <HAL_SPI_TransmitReceive_IT+0xb2>
    hspi->TxISR     = SPI_TxISR_32BIT;
 800d61c:	4966      	ldr	r1, [pc, #408]	; (800d7b8 <HAL_SPI_TransmitReceive_IT+0x218>)
 800d61e:	6741      	str	r1, [r0, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800d620:	4966      	ldr	r1, [pc, #408]	; (800d7bc <HAL_SPI_TransmitReceive_IT+0x21c>)
 800d622:	6701      	str	r1, [r0, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d624:	6865      	ldr	r5, [r4, #4]
 800d626:	4966      	ldr	r1, [pc, #408]	; (800d7c0 <HAL_SPI_TransmitReceive_IT+0x220>)
 800d628:	4029      	ands	r1, r5
 800d62a:	430b      	orrs	r3, r1
 800d62c:	6063      	str	r3, [r4, #4]
  __HAL_SPI_ENABLE(hspi);
 800d62e:	6801      	ldr	r1, [r0, #0]
 800d630:	680b      	ldr	r3, [r1, #0]
 800d632:	f043 0301 	orr.w	r3, r3, #1
 800d636:	600b      	str	r3, [r1, #0]
  uint32_t max_fifo_length = 0UL;
 800d638:	2100      	movs	r1, #0
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800d63a:	e041      	b.n	800d6c0 <HAL_SPI_TransmitReceive_IT+0x120>
    __HAL_UNLOCK(hspi);
 800d63c:	2300      	movs	r3, #0
 800d63e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800d642:	2002      	movs	r0, #2
}
 800d644:	bc30      	pop	{r4, r5}
 800d646:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800d648:	2300      	movs	r3, #0
 800d64a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800d64e:	2001      	movs	r0, #1
 800d650:	e7f8      	b.n	800d644 <HAL_SPI_TransmitReceive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d652:	2907      	cmp	r1, #7
 800d654:	d904      	bls.n	800d660 <HAL_SPI_TransmitReceive_IT+0xc0>
    hspi->RxISR     = SPI_RxISR_16BIT;
 800d656:	495b      	ldr	r1, [pc, #364]	; (800d7c4 <HAL_SPI_TransmitReceive_IT+0x224>)
 800d658:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800d65a:	495b      	ldr	r1, [pc, #364]	; (800d7c8 <HAL_SPI_TransmitReceive_IT+0x228>)
 800d65c:	6741      	str	r1, [r0, #116]	; 0x74
 800d65e:	e7e1      	b.n	800d624 <HAL_SPI_TransmitReceive_IT+0x84>
    hspi->RxISR     = SPI_RxISR_8BIT;
 800d660:	495a      	ldr	r1, [pc, #360]	; (800d7cc <HAL_SPI_TransmitReceive_IT+0x22c>)
 800d662:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800d664:	495a      	ldr	r1, [pc, #360]	; (800d7d0 <HAL_SPI_TransmitReceive_IT+0x230>)
 800d666:	6741      	str	r1, [r0, #116]	; 0x74
 800d668:	e7dc      	b.n	800d624 <HAL_SPI_TransmitReceive_IT+0x84>
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d66a:	2b07      	cmp	r3, #7
 800d66c:	d945      	bls.n	800d6fa <HAL_SPI_TransmitReceive_IT+0x15a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d66e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d672:	b29b      	uxth	r3, r3
 800d674:	2b01      	cmp	r3, #1
 800d676:	d912      	bls.n	800d69e <HAL_SPI_TransmitReceive_IT+0xfe>
 800d678:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d67a:	b183      	cbz	r3, 800d69e <HAL_SPI_TransmitReceive_IT+0xfe>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d67c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d682:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d684:	3304      	adds	r3, #4
 800d686:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d688:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	3b02      	subs	r3, #2
 800d690:	b29b      	uxth	r3, r3
 800d692:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d696:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d69a:	b292      	uxth	r2, r2
 800d69c:	e00f      	b.n	800d6be <HAL_SPI_TransmitReceive_IT+0x11e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d69e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d6a6:	3302      	adds	r3, #2
 800d6a8:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800d6aa:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d6b8:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d6bc:	b292      	uxth	r2, r2
      max_fifo_length++;
 800d6be:	3101      	adds	r1, #1
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800d6c0:	6805      	ldr	r5, [r0, #0]
 800d6c2:	696b      	ldr	r3, [r5, #20]
 800d6c4:	f013 0f02 	tst.w	r3, #2
 800d6c8:	d05f      	beq.n	800d78a <HAL_SPI_TransmitReceive_IT+0x1ea>
 800d6ca:	2a00      	cmp	r2, #0
 800d6cc:	d05d      	beq.n	800d78a <HAL_SPI_TransmitReceive_IT+0x1ea>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 800d6ce:	290f      	cmp	r1, #15
 800d6d0:	d856      	bhi.n	800d780 <HAL_SPI_TransmitReceive_IT+0x1e0>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d6d2:	68c3      	ldr	r3, [r0, #12]
 800d6d4:	2b0f      	cmp	r3, #15
 800d6d6:	d9c8      	bls.n	800d66a <HAL_SPI_TransmitReceive_IT+0xca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d6d8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	622b      	str	r3, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d6de:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	65c3      	str	r3, [r0, #92]	; 0x5c
        hspi->TxXferCount--;
 800d6e4:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 800d6f2:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d6f6:	b292      	uxth	r2, r2
 800d6f8:	e7e1      	b.n	800d6be <HAL_SPI_TransmitReceive_IT+0x11e>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d6fa:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	2b03      	cmp	r3, #3
 800d702:	d913      	bls.n	800d72c <HAL_SPI_TransmitReceive_IT+0x18c>
 800d704:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d706:	2b40      	cmp	r3, #64	; 0x40
 800d708:	d910      	bls.n	800d72c <HAL_SPI_TransmitReceive_IT+0x18c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d70a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d710:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d712:	3304      	adds	r3, #4
 800d714:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d716:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	3b04      	subs	r3, #4
 800d71e:	b29b      	uxth	r3, r3
 800d720:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d724:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d728:	b292      	uxth	r2, r2
 800d72a:	e7c8      	b.n	800d6be <HAL_SPI_TransmitReceive_IT+0x11e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d72c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d730:	b29b      	uxth	r3, r3
 800d732:	2b01      	cmp	r3, #1
 800d734:	d912      	bls.n	800d75c <HAL_SPI_TransmitReceive_IT+0x1bc>
 800d736:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d738:	b183      	cbz	r3, 800d75c <HAL_SPI_TransmitReceive_IT+0x1bc>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d73a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d740:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d742:	3302      	adds	r3, #2
 800d744:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d746:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	3b02      	subs	r3, #2
 800d74e:	b29b      	uxth	r3, r3
 800d750:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d754:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d758:	b292      	uxth	r2, r2
 800d75a:	e7b0      	b.n	800d6be <HAL_SPI_TransmitReceive_IT+0x11e>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d75c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d764:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d766:	3301      	adds	r3, #1
 800d768:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800d76a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d76e:	b29b      	uxth	r3, r3
 800d770:	3b01      	subs	r3, #1
 800d772:	b29b      	uxth	r3, r3
 800d774:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d778:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d77c:	b292      	uxth	r2, r2
 800d77e:	e79e      	b.n	800d6be <HAL_SPI_TransmitReceive_IT+0x11e>
      __HAL_UNLOCK(hspi);
 800d780:	2300      	movs	r3, #0
 800d782:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      return errorcode;
 800d786:	2002      	movs	r0, #2
 800d788:	e75c      	b.n	800d644 <HAL_SPI_TransmitReceive_IT+0xa4>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 800d78a:	692a      	ldr	r2, [r5, #16]
 800d78c:	f240 736c 	movw	r3, #1900	; 0x76c
 800d790:	4313      	orrs	r3, r2
 800d792:	612b      	str	r3, [r5, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d794:	6843      	ldr	r3, [r0, #4]
 800d796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d79a:	d004      	beq.n	800d7a6 <HAL_SPI_TransmitReceive_IT+0x206>
  __HAL_UNLOCK(hspi);
 800d79c:	2300      	movs	r3, #0
 800d79e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	e74e      	b.n	800d644 <HAL_SPI_TransmitReceive_IT+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d7a6:	6802      	ldr	r2, [r0, #0]
 800d7a8:	6813      	ldr	r3, [r2, #0]
 800d7aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	e7f4      	b.n	800d79c <HAL_SPI_TransmitReceive_IT+0x1fc>
  __HAL_LOCK(hspi);
 800d7b2:	2002      	movs	r0, #2
 800d7b4:	e746      	b.n	800d644 <HAL_SPI_TransmitReceive_IT+0xa4>
 800d7b6:	bf00      	nop
 800d7b8:	0800cc7d 	.word	0x0800cc7d
 800d7bc:	0800cbeb 	.word	0x0800cbeb
 800d7c0:	ffff0000 	.word	0xffff0000
 800d7c4:	0800cbbb 	.word	0x0800cbbb
 800d7c8:	0800cc4d 	.word	0x0800cc4d
 800d7cc:	0800cb89 	.word	0x0800cb89
 800d7d0:	0800cc1b 	.word	0x0800cc1b

0800d7d4 <HAL_SPI_Receive_IT>:
{
 800d7d4:	b510      	push	{r4, lr}
 800d7d6:	4684      	mov	ip, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d7d8:	6884      	ldr	r4, [r0, #8]
 800d7da:	b91c      	cbnz	r4, 800d7e4 <HAL_SPI_Receive_IT+0x10>
 800d7dc:	6843      	ldr	r3, [r0, #4]
 800d7de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d7e2:	d04a      	beq.n	800d87a <HAL_SPI_Receive_IT+0xa6>
  __HAL_LOCK(hspi);
 800d7e4:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d06f      	beq.n	800d8cc <HAL_SPI_Receive_IT+0xf8>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800d7f2:	f89c 0081 	ldrb.w	r0, [ip, #129]	; 0x81
 800d7f6:	b2c0      	uxtb	r0, r0
 800d7f8:	4298      	cmp	r0, r3
 800d7fa:	d146      	bne.n	800d88a <HAL_SPI_Receive_IT+0xb6>
  if ((pData == NULL) || (Size == 0UL))
 800d7fc:	2a00      	cmp	r2, #0
 800d7fe:	bf18      	it	ne
 800d800:	2900      	cmpne	r1, #0
 800d802:	d047      	beq.n	800d894 <HAL_SPI_Receive_IT+0xc0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d804:	2304      	movs	r3, #4
 800d806:	f88c 3081 	strb.w	r3, [ip, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d80a:	2300      	movs	r3, #0
 800d80c:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d810:	f8cc 1064 	str.w	r1, [ip, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d814:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d818:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800d81c:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d820:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d824:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->TxISR       = NULL;
 800d828:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d82c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800d830:	2b0f      	cmp	r3, #15
 800d832:	d933      	bls.n	800d89c <HAL_SPI_Receive_IT+0xc8>
    hspi->RxISR = SPI_RxISR_32BIT;
 800d834:	4b26      	ldr	r3, [pc, #152]	; (800d8d0 <HAL_SPI_Receive_IT+0xfc>)
 800d836:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d83a:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
 800d83e:	d037      	beq.n	800d8b0 <HAL_SPI_Receive_IT+0xdc>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d840:	f8dc 1000 	ldr.w	r1, [ip]
 800d844:	6848      	ldr	r0, [r1, #4]
 800d846:	4b23      	ldr	r3, [pc, #140]	; (800d8d4 <HAL_SPI_Receive_IT+0x100>)
 800d848:	4003      	ands	r3, r0
 800d84a:	431a      	orrs	r2, r3
 800d84c:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800d84e:	f8dc 2000 	ldr.w	r2, [ip]
 800d852:	6813      	ldr	r3, [r2, #0]
 800d854:	f043 0301 	orr.w	r3, r3, #1
 800d858:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800d85a:	f8dc 2000 	ldr.w	r2, [ip]
 800d85e:	6911      	ldr	r1, [r2, #16]
 800d860:	f240 7349 	movw	r3, #1865	; 0x749
 800d864:	430b      	orrs	r3, r1
 800d866:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d868:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d86c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d870:	d025      	beq.n	800d8be <HAL_SPI_Receive_IT+0xea>
  __HAL_UNLOCK(hspi);
 800d872:	2000      	movs	r0, #0
 800d874:	f88c 0080 	strb.w	r0, [ip, #128]	; 0x80
}
 800d878:	bd10      	pop	{r4, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d87a:	2304      	movs	r3, #4
 800d87c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800d880:	4613      	mov	r3, r2
 800d882:	460a      	mov	r2, r1
 800d884:	f7ff fe8c 	bl	800d5a0 <HAL_SPI_TransmitReceive_IT>
 800d888:	e7f6      	b.n	800d878 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800d88a:	2300      	movs	r3, #0
 800d88c:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800d890:	2002      	movs	r0, #2
 800d892:	e7f1      	b.n	800d878 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800d894:	2300      	movs	r3, #0
 800d896:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800d89a:	e7ed      	b.n	800d878 <HAL_SPI_Receive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d89c:	2b07      	cmp	r3, #7
 800d89e:	d903      	bls.n	800d8a8 <HAL_SPI_Receive_IT+0xd4>
    hspi->RxISR = SPI_RxISR_16BIT;
 800d8a0:	4b0d      	ldr	r3, [pc, #52]	; (800d8d8 <HAL_SPI_Receive_IT+0x104>)
 800d8a2:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800d8a6:	e7c8      	b.n	800d83a <HAL_SPI_Receive_IT+0x66>
    hspi->RxISR = SPI_RxISR_8BIT;
 800d8a8:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <HAL_SPI_Receive_IT+0x108>)
 800d8aa:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800d8ae:	e7c4      	b.n	800d83a <HAL_SPI_Receive_IT+0x66>
    SPI_1LINE_RX(hspi);
 800d8b0:	f8dc 1000 	ldr.w	r1, [ip]
 800d8b4:	680b      	ldr	r3, [r1, #0]
 800d8b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8ba:	600b      	str	r3, [r1, #0]
 800d8bc:	e7c0      	b.n	800d840 <HAL_SPI_Receive_IT+0x6c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d8be:	f8dc 2000 	ldr.w	r2, [ip]
 800d8c2:	6813      	ldr	r3, [r2, #0]
 800d8c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	e7d2      	b.n	800d872 <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 800d8cc:	2002      	movs	r0, #2
 800d8ce:	e7d3      	b.n	800d878 <HAL_SPI_Receive_IT+0xa4>
 800d8d0:	0800cbeb 	.word	0x0800cbeb
 800d8d4:	ffff0000 	.word	0xffff0000
 800d8d8:	0800cbbb 	.word	0x0800cbbb
 800d8dc:	0800cb89 	.word	0x0800cb89

0800d8e0 <HAL_SPI_TxRxCpltCallback>:
}
 800d8e0:	4770      	bx	lr

0800d8e2 <HAL_SPI_ErrorCallback>:
}
 800d8e2:	4770      	bx	lr

0800d8e4 <HAL_SPI_IRQHandler>:
{
 800d8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800d8ea:	6806      	ldr	r6, [r0, #0]
 800d8ec:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800d8f0:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800d8f4:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d8f8:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800d8fc:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800d900:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d902:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800d906:	2b04      	cmp	r3, #4
 800d908:	d03b      	beq.n	800d982 <HAL_SPI_IRQHandler+0x9e>
  uint32_t handled  = 0UL;
 800d90a:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d90c:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800d910:	f1b8 0f01 	cmp.w	r8, #1
 800d914:	d03c      	beq.n	800d990 <HAL_SPI_IRQHandler+0xac>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d916:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800d91a:	2a02      	cmp	r2, #2
 800d91c:	d03d      	beq.n	800d99a <HAL_SPI_IRQHandler+0xb6>
  if (handled != 0UL)
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d13e      	bne.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d922:	f015 0f08 	tst.w	r5, #8
 800d926:	d071      	beq.n	800da0c <HAL_SPI_IRQHandler+0x128>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d928:	6822      	ldr	r2, [r4, #0]
 800d92a:	6993      	ldr	r3, [r2, #24]
 800d92c:	f043 0308 	orr.w	r3, r3, #8
 800d930:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d932:	6822      	ldr	r2, [r4, #0]
 800d934:	6993      	ldr	r3, [r2, #24]
 800d936:	f043 0310 	orr.w	r3, r3, #16
 800d93a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d93c:	6822      	ldr	r2, [r4, #0]
 800d93e:	6993      	ldr	r3, [r2, #24]
 800d940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d944:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d946:	6822      	ldr	r2, [r4, #0]
 800d948:	6913      	ldr	r3, [r2, #16]
 800d94a:	f023 0308 	bic.w	r3, r3, #8
 800d94e:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800d958:	d033      	beq.n	800d9c2 <HAL_SPI_IRQHandler+0xde>
    SPI_CloseTransfer(hspi);
 800d95a:	4620      	mov	r0, r4
 800d95c:	f7ff f9a6 	bl	800ccac <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800d960:	2301      	movs	r3, #1
 800d962:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d966:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d142      	bne.n	800d9f4 <HAL_SPI_IRQHandler+0x110>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d96e:	2f05      	cmp	r7, #5
 800d970:	d044      	beq.n	800d9fc <HAL_SPI_IRQHandler+0x118>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d972:	2f04      	cmp	r7, #4
 800d974:	d046      	beq.n	800da04 <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d976:	2f03      	cmp	r7, #3
 800d978:	d112      	bne.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxCpltCallback(hspi);
 800d97a:	4620      	mov	r0, r4
 800d97c:	f7f5 f954 	bl	8002c28 <HAL_SPI_TxCpltCallback>
    return;
 800d980:	e00e      	b.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
    hspi->TxISR(hspi);
 800d982:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800d984:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d986:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d988:	4620      	mov	r0, r4
 800d98a:	4798      	blx	r3
    handled = 1UL;
 800d98c:	2301      	movs	r3, #1
 800d98e:	e7bd      	b.n	800d90c <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800d990:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d992:	4620      	mov	r0, r4
 800d994:	4798      	blx	r3
    handled = 1UL;
 800d996:	4643      	mov	r3, r8
 800d998:	e7bd      	b.n	800d916 <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 800d99a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d99c:	4620      	mov	r0, r4
 800d99e:	4798      	blx	r3
}
 800d9a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9a4:	2b07      	cmp	r3, #7
 800d9a6:	d91c      	bls.n	800d9e2 <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d9a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9aa:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800d9ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d9ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9b0:	3302      	adds	r3, #2
 800d9b2:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d9b4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800d9c2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0c6      	beq.n	800d95a <HAL_SPI_IRQHandler+0x76>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d9cc:	68e3      	ldr	r3, [r4, #12]
 800d9ce:	2b0f      	cmp	r3, #15
 800d9d0:	d9e8      	bls.n	800d9a4 <HAL_SPI_IRQHandler+0xc0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d9d2:	6822      	ldr	r2, [r4, #0]
 800d9d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d9d8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d9da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9dc:	3304      	adds	r3, #4
 800d9de:	6663      	str	r3, [r4, #100]	; 0x64
 800d9e0:	e7e8      	b.n	800d9b4 <HAL_SPI_IRQHandler+0xd0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d9e2:	6822      	ldr	r2, [r4, #0]
 800d9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9e6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800d9ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d9ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	6663      	str	r3, [r4, #100]	; 0x64
 800d9f2:	e7df      	b.n	800d9b4 <HAL_SPI_IRQHandler+0xd0>
      HAL_SPI_ErrorCallback(hspi);
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f7ff ff74 	bl	800d8e2 <HAL_SPI_ErrorCallback>
      return;
 800d9fa:	e7d1      	b.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxRxCpltCallback(hspi);
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f7ff ff6f 	bl	800d8e0 <HAL_SPI_TxRxCpltCallback>
 800da02:	e7cd      	b.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_RxCpltCallback(hspi);
 800da04:	4620      	mov	r0, r4
 800da06:	f7f5 f905 	bl	8002c14 <HAL_SPI_RxCpltCallback>
 800da0a:	e7c9      	b.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800da0c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800da10:	d002      	beq.n	800da18 <HAL_SPI_IRQHandler+0x134>
 800da12:	f01a 0f08 	tst.w	sl, #8
 800da16:	d173      	bne.n	800db00 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800da18:	f415 7f58 	tst.w	r5, #864	; 0x360
 800da1c:	d0c0      	beq.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800da1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800da22:	d00a      	beq.n	800da3a <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800da24:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800da28:	f043 0304 	orr.w	r3, r3, #4
 800da2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da30:	6822      	ldr	r2, [r4, #0]
 800da32:	6993      	ldr	r3, [r2, #24]
 800da34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da38:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800da3a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800da3e:	d00a      	beq.n	800da56 <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800da40:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800da44:	f043 0301 	orr.w	r3, r3, #1
 800da48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800da4c:	6822      	ldr	r2, [r4, #0]
 800da4e:	6993      	ldr	r3, [r2, #24]
 800da50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da54:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800da56:	f415 7f80 	tst.w	r5, #256	; 0x100
 800da5a:	d00a      	beq.n	800da72 <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800da5c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800da60:	f043 0308 	orr.w	r3, r3, #8
 800da64:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800da68:	6822      	ldr	r2, [r4, #0]
 800da6a:	6993      	ldr	r3, [r2, #24]
 800da6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da70:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800da72:	f015 0f20 	tst.w	r5, #32
 800da76:	d00a      	beq.n	800da8e <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800da78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800da7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800da84:	6822      	ldr	r2, [r4, #0]
 800da86:	6993      	ldr	r3, [r2, #24]
 800da88:	f043 0320 	orr.w	r3, r3, #32
 800da8c:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da8e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800da92:	2b00      	cmp	r3, #0
 800da94:	d084      	beq.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE(hspi);
 800da96:	6822      	ldr	r2, [r4, #0]
 800da98:	6813      	ldr	r3, [r2, #0]
 800da9a:	f023 0301 	bic.w	r3, r3, #1
 800da9e:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800daa0:	6822      	ldr	r2, [r4, #0]
 800daa2:	6911      	ldr	r1, [r2, #16]
 800daa4:	4b1d      	ldr	r3, [pc, #116]	; (800db1c <HAL_SPI_IRQHandler+0x238>)
 800daa6:	400b      	ands	r3, r1
 800daa8:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800daaa:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 800daae:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 800dab2:	d12b      	bne.n	800db0c <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dab4:	6822      	ldr	r2, [r4, #0]
 800dab6:	6893      	ldr	r3, [r2, #8]
 800dab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800dabc:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800dabe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800dac0:	b15b      	cbz	r3, 800dada <HAL_SPI_IRQHandler+0x1f6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800dac2:	4a17      	ldr	r2, [pc, #92]	; (800db20 <HAL_SPI_IRQHandler+0x23c>)
 800dac4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dac6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800dac8:	f7fb fcd2 	bl	8009470 <HAL_DMA_Abort_IT>
 800dacc:	b128      	cbz	r0, 800dada <HAL_SPI_IRQHandler+0x1f6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dace:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800dad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dad6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800dada:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f43f af5f 	beq.w	800d9a0 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dae2:	4a0f      	ldr	r2, [pc, #60]	; (800db20 <HAL_SPI_IRQHandler+0x23c>)
 800dae4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dae6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800dae8:	f7fb fcc2 	bl	8009470 <HAL_DMA_Abort_IT>
 800daec:	2800      	cmp	r0, #0
 800daee:	f43f af57 	beq.w	800d9a0 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800daf2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800daf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dafa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800dafe:	e74f      	b.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800db00:	6822      	ldr	r2, [r4, #0]
 800db02:	6993      	ldr	r3, [r2, #24]
 800db04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800db08:	6193      	str	r3, [r2, #24]
    return;
 800db0a:	e749      	b.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 800db0c:	2301      	movs	r3, #1
 800db0e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800db12:	4620      	mov	r0, r4
 800db14:	f7ff fee5 	bl	800d8e2 <HAL_SPI_ErrorCallback>
    return;
 800db18:	e742      	b.n	800d9a0 <HAL_SPI_IRQHandler+0xbc>
 800db1a:	bf00      	nop
 800db1c:	fffffc94 	.word	0xfffffc94
 800db20:	0800db25 	.word	0x0800db25

0800db24 <SPI_DMAAbortOnError>:
{
 800db24:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db26:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800db28:	2300      	movs	r3, #0
 800db2a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800db2e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800db32:	2301      	movs	r3, #1
 800db34:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800db38:	f7ff fed3 	bl	800d8e2 <HAL_SPI_ErrorCallback>
}
 800db3c:	bd08      	pop	{r3, pc}

0800db3e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800db3e:	4770      	bx	lr

0800db40 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800db44:	b2db      	uxtb	r3, r3
 800db46:	2b01      	cmp	r3, #1
 800db48:	d13a      	bne.n	800dbc0 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db4a:	2302      	movs	r3, #2
 800db4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db50:	6802      	ldr	r2, [r0, #0]
 800db52:	68d3      	ldr	r3, [r2, #12]
 800db54:	f043 0301 	orr.w	r3, r3, #1
 800db58:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db5a:	6803      	ldr	r3, [r0, #0]
 800db5c:	4a1a      	ldr	r2, [pc, #104]	; (800dbc8 <HAL_TIM_Base_Start_IT+0x88>)
 800db5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db62:	bf18      	it	ne
 800db64:	4293      	cmpne	r3, r2
 800db66:	d01d      	beq.n	800dba4 <HAL_TIM_Base_Start_IT+0x64>
 800db68:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d019      	beq.n	800dba4 <HAL_TIM_Base_Start_IT+0x64>
 800db70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db74:	4293      	cmp	r3, r2
 800db76:	d015      	beq.n	800dba4 <HAL_TIM_Base_Start_IT+0x64>
 800db78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d011      	beq.n	800dba4 <HAL_TIM_Base_Start_IT+0x64>
 800db80:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800db84:	4293      	cmp	r3, r2
 800db86:	d00d      	beq.n	800dba4 <HAL_TIM_Base_Start_IT+0x64>
 800db88:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d009      	beq.n	800dba4 <HAL_TIM_Base_Start_IT+0x64>
 800db90:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800db94:	4293      	cmp	r3, r2
 800db96:	d005      	beq.n	800dba4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	f042 0201 	orr.w	r2, r2, #1
 800db9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dba0:	2000      	movs	r0, #0
 800dba2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dba4:	6899      	ldr	r1, [r3, #8]
 800dba6:	4a09      	ldr	r2, [pc, #36]	; (800dbcc <HAL_TIM_Base_Start_IT+0x8c>)
 800dba8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbaa:	2a06      	cmp	r2, #6
 800dbac:	bf18      	it	ne
 800dbae:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800dbb2:	d007      	beq.n	800dbc4 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	f042 0201 	orr.w	r2, r2, #1
 800dbba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	4770      	bx	lr
    return HAL_ERROR;
 800dbc0:	2001      	movs	r0, #1
 800dbc2:	4770      	bx	lr
  return HAL_OK;
 800dbc4:	2000      	movs	r0, #0
}
 800dbc6:	4770      	bx	lr
 800dbc8:	40010000 	.word	0x40010000
 800dbcc:	00010007 	.word	0x00010007

0800dbd0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dbd0:	4770      	bx	lr

0800dbd2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dbd2:	4770      	bx	lr

0800dbd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dbd4:	4770      	bx	lr

0800dbd6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_TIM_IRQHandler>:
{
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbdc:	6803      	ldr	r3, [r0, #0]
 800dbde:	691a      	ldr	r2, [r3, #16]
 800dbe0:	f012 0f02 	tst.w	r2, #2
 800dbe4:	d011      	beq.n	800dc0a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dbe6:	68da      	ldr	r2, [r3, #12]
 800dbe8:	f012 0f02 	tst.w	r2, #2
 800dbec:	d00d      	beq.n	800dc0a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dbee:	f06f 0202 	mvn.w	r2, #2
 800dbf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbf8:	6803      	ldr	r3, [r0, #0]
 800dbfa:	699b      	ldr	r3, [r3, #24]
 800dbfc:	f013 0f03 	tst.w	r3, #3
 800dc00:	d079      	beq.n	800dcf6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800dc02:	f7ff ffe6 	bl	800dbd2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc06:	2300      	movs	r3, #0
 800dc08:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	691a      	ldr	r2, [r3, #16]
 800dc0e:	f012 0f04 	tst.w	r2, #4
 800dc12:	d012      	beq.n	800dc3a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc14:	68da      	ldr	r2, [r3, #12]
 800dc16:	f012 0f04 	tst.w	r2, #4
 800dc1a:	d00e      	beq.n	800dc3a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc1c:	f06f 0204 	mvn.w	r2, #4
 800dc20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc22:	2302      	movs	r3, #2
 800dc24:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	699b      	ldr	r3, [r3, #24]
 800dc2a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dc2e:	d068      	beq.n	800dd02 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc30:	4620      	mov	r0, r4
 800dc32:	f7ff ffce 	bl	800dbd2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc36:	2300      	movs	r3, #0
 800dc38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	691a      	ldr	r2, [r3, #16]
 800dc3e:	f012 0f08 	tst.w	r2, #8
 800dc42:	d012      	beq.n	800dc6a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc44:	68da      	ldr	r2, [r3, #12]
 800dc46:	f012 0f08 	tst.w	r2, #8
 800dc4a:	d00e      	beq.n	800dc6a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc4c:	f06f 0208 	mvn.w	r2, #8
 800dc50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc52:	2304      	movs	r3, #4
 800dc54:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	69db      	ldr	r3, [r3, #28]
 800dc5a:	f013 0f03 	tst.w	r3, #3
 800dc5e:	d057      	beq.n	800dd10 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc60:	4620      	mov	r0, r4
 800dc62:	f7ff ffb6 	bl	800dbd2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc66:	2300      	movs	r3, #0
 800dc68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	691a      	ldr	r2, [r3, #16]
 800dc6e:	f012 0f10 	tst.w	r2, #16
 800dc72:	d012      	beq.n	800dc9a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dc74:	68da      	ldr	r2, [r3, #12]
 800dc76:	f012 0f10 	tst.w	r2, #16
 800dc7a:	d00e      	beq.n	800dc9a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc7c:	f06f 0210 	mvn.w	r2, #16
 800dc80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc82:	2308      	movs	r3, #8
 800dc84:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	69db      	ldr	r3, [r3, #28]
 800dc8a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dc8e:	d046      	beq.n	800dd1e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7ff ff9e 	bl	800dbd2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc96:	2300      	movs	r3, #0
 800dc98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	691a      	ldr	r2, [r3, #16]
 800dc9e:	f012 0f01 	tst.w	r2, #1
 800dca2:	d003      	beq.n	800dcac <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dca4:	68da      	ldr	r2, [r3, #12]
 800dca6:	f012 0f01 	tst.w	r2, #1
 800dcaa:	d13f      	bne.n	800dd2c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	691a      	ldr	r2, [r3, #16]
 800dcb0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800dcb4:	d003      	beq.n	800dcbe <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcb6:	68da      	ldr	r2, [r3, #12]
 800dcb8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800dcbc:	d13d      	bne.n	800dd3a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	691a      	ldr	r2, [r3, #16]
 800dcc2:	f412 7f80 	tst.w	r2, #256	; 0x100
 800dcc6:	d003      	beq.n	800dcd0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcc8:	68da      	ldr	r2, [r3, #12]
 800dcca:	f012 0f80 	tst.w	r2, #128	; 0x80
 800dcce:	d13b      	bne.n	800dd48 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dcd0:	6823      	ldr	r3, [r4, #0]
 800dcd2:	691a      	ldr	r2, [r3, #16]
 800dcd4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800dcd8:	d003      	beq.n	800dce2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dcda:	68da      	ldr	r2, [r3, #12]
 800dcdc:	f012 0f40 	tst.w	r2, #64	; 0x40
 800dce0:	d139      	bne.n	800dd56 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	691a      	ldr	r2, [r3, #16]
 800dce6:	f012 0f20 	tst.w	r2, #32
 800dcea:	d003      	beq.n	800dcf4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dcec:	68da      	ldr	r2, [r3, #12]
 800dcee:	f012 0f20 	tst.w	r2, #32
 800dcf2:	d137      	bne.n	800dd64 <HAL_TIM_IRQHandler+0x18c>
}
 800dcf4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcf6:	f7ff ff6b 	bl	800dbd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f7ff ff6a 	bl	800dbd4 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd00:	e781      	b.n	800dc06 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd02:	4620      	mov	r0, r4
 800dd04:	f7ff ff64 	bl	800dbd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f7ff ff63 	bl	800dbd4 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd0e:	e792      	b.n	800dc36 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd10:	4620      	mov	r0, r4
 800dd12:	f7ff ff5d 	bl	800dbd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7ff ff5c 	bl	800dbd4 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd1c:	e7a3      	b.n	800dc66 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f7ff ff56 	bl	800dbd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd24:	4620      	mov	r0, r4
 800dd26:	f7ff ff55 	bl	800dbd4 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd2a:	e7b4      	b.n	800dc96 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd2c:	f06f 0201 	mvn.w	r2, #1
 800dd30:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd32:	4620      	mov	r0, r4
 800dd34:	f7f4 fd10 	bl	8002758 <HAL_TIM_PeriodElapsedCallback>
 800dd38:	e7b8      	b.n	800dcac <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dd3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800dd40:	4620      	mov	r0, r4
 800dd42:	f000 f8ca 	bl	800deda <HAL_TIMEx_BreakCallback>
 800dd46:	e7ba      	b.n	800dcbe <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f000 f8c4 	bl	800dedc <HAL_TIMEx_Break2Callback>
 800dd54:	e7bc      	b.n	800dcd0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dd5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f7ff ff3a 	bl	800dbd6 <HAL_TIM_TriggerCallback>
 800dd62:	e7be      	b.n	800dce2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd64:	f06f 0220 	mvn.w	r2, #32
 800dd68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f000 f8b4 	bl	800ded8 <HAL_TIMEx_CommutCallback>
}
 800dd70:	e7c0      	b.n	800dcf4 <HAL_TIM_IRQHandler+0x11c>
	...

0800dd74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dd74:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd76:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd78:	4a39      	ldr	r2, [pc, #228]	; (800de60 <TIM_Base_SetConfig+0xec>)
 800dd7a:	4290      	cmp	r0, r2
 800dd7c:	bf14      	ite	ne
 800dd7e:	f04f 0e00 	movne.w	lr, #0
 800dd82:	f04f 0e01 	moveq.w	lr, #1
 800dd86:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800dd8a:	bf14      	ite	ne
 800dd8c:	4672      	movne	r2, lr
 800dd8e:	f04e 0201 	orreq.w	r2, lr, #1
 800dd92:	b9aa      	cbnz	r2, 800ddc0 <TIM_Base_SetConfig+0x4c>
 800dd94:	4c33      	ldr	r4, [pc, #204]	; (800de64 <TIM_Base_SetConfig+0xf0>)
 800dd96:	42a0      	cmp	r0, r4
 800dd98:	bf14      	ite	ne
 800dd9a:	2400      	movne	r4, #0
 800dd9c:	2401      	moveq	r4, #1
 800dd9e:	4d32      	ldr	r5, [pc, #200]	; (800de68 <TIM_Base_SetConfig+0xf4>)
 800dda0:	42a8      	cmp	r0, r5
 800dda2:	d00d      	beq.n	800ddc0 <TIM_Base_SetConfig+0x4c>
 800dda4:	b964      	cbnz	r4, 800ddc0 <TIM_Base_SetConfig+0x4c>
 800dda6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800ddaa:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800ddae:	42a0      	cmp	r0, r4
 800ddb0:	bf14      	ite	ne
 800ddb2:	2400      	movne	r4, #0
 800ddb4:	2401      	moveq	r4, #1
 800ddb6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800ddba:	42a8      	cmp	r0, r5
 800ddbc:	d000      	beq.n	800ddc0 <TIM_Base_SetConfig+0x4c>
 800ddbe:	b11c      	cbz	r4, 800ddc8 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ddc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ddc4:	684c      	ldr	r4, [r1, #4]
 800ddc6:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddc8:	bb12      	cbnz	r2, 800de10 <TIM_Base_SetConfig+0x9c>
 800ddca:	4a26      	ldr	r2, [pc, #152]	; (800de64 <TIM_Base_SetConfig+0xf0>)
 800ddcc:	4290      	cmp	r0, r2
 800ddce:	bf14      	ite	ne
 800ddd0:	2200      	movne	r2, #0
 800ddd2:	2201      	moveq	r2, #1
 800ddd4:	4c24      	ldr	r4, [pc, #144]	; (800de68 <TIM_Base_SetConfig+0xf4>)
 800ddd6:	42a0      	cmp	r0, r4
 800ddd8:	d01a      	beq.n	800de10 <TIM_Base_SetConfig+0x9c>
 800ddda:	b9ca      	cbnz	r2, 800de10 <TIM_Base_SetConfig+0x9c>
 800dddc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800dde0:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800dde4:	4290      	cmp	r0, r2
 800dde6:	bf14      	ite	ne
 800dde8:	2200      	movne	r2, #0
 800ddea:	2201      	moveq	r2, #1
 800ddec:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800ddf0:	42a0      	cmp	r0, r4
 800ddf2:	d00d      	beq.n	800de10 <TIM_Base_SetConfig+0x9c>
 800ddf4:	b962      	cbnz	r2, 800de10 <TIM_Base_SetConfig+0x9c>
 800ddf6:	4a1d      	ldr	r2, [pc, #116]	; (800de6c <TIM_Base_SetConfig+0xf8>)
 800ddf8:	4290      	cmp	r0, r2
 800ddfa:	bf14      	ite	ne
 800ddfc:	2200      	movne	r2, #0
 800ddfe:	2201      	moveq	r2, #1
 800de00:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800de04:	42a0      	cmp	r0, r4
 800de06:	d003      	beq.n	800de10 <TIM_Base_SetConfig+0x9c>
 800de08:	b912      	cbnz	r2, 800de10 <TIM_Base_SetConfig+0x9c>
 800de0a:	4a19      	ldr	r2, [pc, #100]	; (800de70 <TIM_Base_SetConfig+0xfc>)
 800de0c:	4290      	cmp	r0, r2
 800de0e:	d104      	bne.n	800de1a <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de10:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de14:	68cb      	ldr	r3, [r1, #12]
 800de16:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de1e:	694a      	ldr	r2, [r1, #20]
 800de20:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800de22:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de24:	688a      	ldr	r2, [r1, #8]
 800de26:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de28:	680a      	ldr	r2, [r1, #0]
 800de2a:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de2c:	4a11      	ldr	r2, [pc, #68]	; (800de74 <TIM_Base_SetConfig+0x100>)
 800de2e:	4290      	cmp	r0, r2
 800de30:	bf14      	ite	ne
 800de32:	4673      	movne	r3, lr
 800de34:	f04e 0301 	orreq.w	r3, lr, #1
 800de38:	b963      	cbnz	r3, 800de54 <TIM_Base_SetConfig+0xe0>
 800de3a:	4b0c      	ldr	r3, [pc, #48]	; (800de6c <TIM_Base_SetConfig+0xf8>)
 800de3c:	4298      	cmp	r0, r3
 800de3e:	bf14      	ite	ne
 800de40:	2300      	movne	r3, #0
 800de42:	2301      	moveq	r3, #1
 800de44:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800de48:	4290      	cmp	r0, r2
 800de4a:	d003      	beq.n	800de54 <TIM_Base_SetConfig+0xe0>
 800de4c:	b913      	cbnz	r3, 800de54 <TIM_Base_SetConfig+0xe0>
 800de4e:	4b08      	ldr	r3, [pc, #32]	; (800de70 <TIM_Base_SetConfig+0xfc>)
 800de50:	4298      	cmp	r0, r3
 800de52:	d101      	bne.n	800de58 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de54:	690b      	ldr	r3, [r1, #16]
 800de56:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de58:	2301      	movs	r3, #1
 800de5a:	6143      	str	r3, [r0, #20]
}
 800de5c:	bd30      	pop	{r4, r5, pc}
 800de5e:	bf00      	nop
 800de60:	40010000 	.word	0x40010000
 800de64:	40000800 	.word	0x40000800
 800de68:	40000400 	.word	0x40000400
 800de6c:	40014400 	.word	0x40014400
 800de70:	40014800 	.word	0x40014800
 800de74:	40010400 	.word	0x40010400

0800de78 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800de78:	b360      	cbz	r0, 800ded4 <HAL_TIM_Base_Init+0x5c>
{
 800de7a:	b510      	push	{r4, lr}
 800de7c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800de7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800de82:	b313      	cbz	r3, 800deca <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800de84:	2302      	movs	r3, #2
 800de86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de8a:	4621      	mov	r1, r4
 800de8c:	f851 0b04 	ldr.w	r0, [r1], #4
 800de90:	f7ff ff70 	bl	800dd74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de94:	2301      	movs	r3, #1
 800de96:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800de9e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800dea2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dea6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800deaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800deae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800deb2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800deb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800deba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800debe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800dec2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800dec6:	2000      	movs	r0, #0
}
 800dec8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800deca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800dece:	f7ff fe36 	bl	800db3e <HAL_TIM_Base_MspInit>
 800ded2:	e7d7      	b.n	800de84 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800ded4:	2001      	movs	r0, #1
}
 800ded6:	4770      	bx	lr

0800ded8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ded8:	4770      	bx	lr

0800deda <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800deda:	4770      	bx	lr

0800dedc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dedc:	4770      	bx	lr

0800dede <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dede:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800dee0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dee4:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dee6:	f001 ff6f 	bl	800fdc8 <xTaskGetSchedulerState>
 800deea:	2801      	cmp	r0, #1
 800deec:	d100      	bne.n	800def0 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800deee:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800def0:	f000 fc70 	bl	800e7d4 <xPortSysTickHandler>
}
 800def4:	e7fb      	b.n	800deee <SysTick_Handler+0x10>
	...

0800def8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800def8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800defc:	b92b      	cbnz	r3, 800df0a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800defe:	4b06      	ldr	r3, [pc, #24]	; (800df18 <osKernelInitialize+0x20>)
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	b928      	cbnz	r0, 800df10 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800df04:	2201      	movs	r2, #1
 800df06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800df08:	4770      	bx	lr
    stat = osErrorISR;
 800df0a:	f06f 0005 	mvn.w	r0, #5
 800df0e:	4770      	bx	lr
    } else {
      stat = osError;
 800df10:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	24003bf0 	.word	0x24003bf0

0800df1c <osKernelStart>:
 800df1c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800df20:	b973      	cbnz	r3, 800df40 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800df22:	4b0a      	ldr	r3, [pc, #40]	; (800df4c <osKernelStart+0x30>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b01      	cmp	r3, #1
 800df28:	d10d      	bne.n	800df46 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800df2a:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df2c:	2400      	movs	r4, #0
 800df2e:	4b08      	ldr	r3, [pc, #32]	; (800df50 <osKernelStart+0x34>)
 800df30:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800df32:	4b06      	ldr	r3, [pc, #24]	; (800df4c <osKernelStart+0x30>)
 800df34:	2202      	movs	r2, #2
 800df36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800df38:	f001 fcbc 	bl	800f8b4 <vTaskStartScheduler>
      stat = osOK;
 800df3c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800df3e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800df40:	f06f 0005 	mvn.w	r0, #5
 800df44:	4770      	bx	lr
      stat = osError;
 800df46:	f04f 30ff 	mov.w	r0, #4294967295
}
 800df4a:	4770      	bx	lr
 800df4c:	24003bf0 	.word	0x24003bf0
 800df50:	e000ed00 	.word	0xe000ed00

0800df54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800df54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df56:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800df58:	2400      	movs	r4, #0
 800df5a:	9405      	str	r4, [sp, #20]
 800df5c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800df60:	bb74      	cbnz	r4, 800dfc0 <osThreadNew+0x6c>
 800df62:	b368      	cbz	r0, 800dfc0 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800df64:	b322      	cbz	r2, 800dfb0 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800df66:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800df68:	6993      	ldr	r3, [r2, #24]
 800df6a:	b903      	cbnz	r3, 800df6e <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800df6c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800df6e:	1e5c      	subs	r4, r3, #1
 800df70:	2c37      	cmp	r4, #55	; 0x37
 800df72:	d849      	bhi.n	800e008 <osThreadNew+0xb4>
 800df74:	6854      	ldr	r4, [r2, #4]
 800df76:	f014 0f01 	tst.w	r4, #1
 800df7a:	d147      	bne.n	800e00c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800df7c:	6956      	ldr	r6, [r2, #20]
 800df7e:	b16e      	cbz	r6, 800df9c <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800df80:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800df84:	6894      	ldr	r4, [r2, #8]
 800df86:	b12c      	cbz	r4, 800df94 <osThreadNew+0x40>
 800df88:	68d7      	ldr	r7, [r2, #12]
 800df8a:	2fbb      	cmp	r7, #187	; 0xbb
 800df8c:	d902      	bls.n	800df94 <osThreadNew+0x40>
 800df8e:	6917      	ldr	r7, [r2, #16]
 800df90:	b107      	cbz	r7, 800df94 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800df92:	b9c6      	cbnz	r6, 800dfc6 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800df94:	b12c      	cbz	r4, 800dfa2 <osThreadNew+0x4e>
    mem  = -1;
 800df96:	f04f 34ff 	mov.w	r4, #4294967295
 800df9a:	e00e      	b.n	800dfba <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800df9c:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800dfa0:	e7f0      	b.n	800df84 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dfa2:	68d4      	ldr	r4, [r2, #12]
 800dfa4:	b98c      	cbnz	r4, 800dfca <osThreadNew+0x76>
 800dfa6:	6914      	ldr	r4, [r2, #16]
 800dfa8:	b194      	cbz	r4, 800dfd0 <osThreadNew+0x7c>
    mem  = -1;
 800dfaa:	f04f 34ff 	mov.w	r4, #4294967295
 800dfae:	e004      	b.n	800dfba <osThreadNew+0x66>
    name = NULL;
 800dfb0:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800dfb2:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800dfb4:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800dfb6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800dfba:	2c01      	cmp	r4, #1
 800dfbc:	d00a      	beq.n	800dfd4 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800dfbe:	b1ac      	cbz	r4, 800dfec <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dfc0:	9805      	ldr	r0, [sp, #20]
}
 800dfc2:	b007      	add	sp, #28
 800dfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800dfc6:	2401      	movs	r4, #1
 800dfc8:	e7f7      	b.n	800dfba <osThreadNew+0x66>
    mem  = -1;
 800dfca:	f04f 34ff 	mov.w	r4, #4294967295
 800dfce:	e7f4      	b.n	800dfba <osThreadNew+0x66>
          mem = 0;
 800dfd0:	2400      	movs	r4, #0
 800dfd2:	e7f2      	b.n	800dfba <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dfd4:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dfd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dfd8:	9202      	str	r2, [sp, #8]
 800dfda:	9401      	str	r4, [sp, #4]
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	4662      	mov	r2, ip
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	f001 fbf6 	bl	800f7d4 <xTaskCreateStatic>
 800dfe8:	9005      	str	r0, [sp, #20]
 800dfea:	e7e9      	b.n	800dfc0 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dfec:	aa05      	add	r2, sp, #20
 800dfee:	9201      	str	r2, [sp, #4]
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	460b      	mov	r3, r1
 800dff4:	fa1f f28c 	uxth.w	r2, ip
 800dff8:	4629      	mov	r1, r5
 800dffa:	f001 fc26 	bl	800f84a <xTaskCreate>
 800dffe:	2801      	cmp	r0, #1
 800e000:	d0de      	beq.n	800dfc0 <osThreadNew+0x6c>
            hTask = NULL;
 800e002:	2300      	movs	r3, #0
 800e004:	9305      	str	r3, [sp, #20]
 800e006:	e7db      	b.n	800dfc0 <osThreadNew+0x6c>
        return (NULL);
 800e008:	2000      	movs	r0, #0
 800e00a:	e7da      	b.n	800dfc2 <osThreadNew+0x6e>
 800e00c:	2000      	movs	r0, #0
 800e00e:	e7d8      	b.n	800dfc2 <osThreadNew+0x6e>

0800e010 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e010:	b570      	push	{r4, r5, r6, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d14d      	bne.n	800e0b8 <osSemaphoreNew+0xa8>
 800e01c:	460e      	mov	r6, r1
 800e01e:	4614      	mov	r4, r2
 800e020:	4288      	cmp	r0, r1
 800e022:	bf34      	ite	cc
 800e024:	2300      	movcc	r3, #0
 800e026:	2301      	movcs	r3, #1
 800e028:	2800      	cmp	r0, #0
 800e02a:	d049      	beq.n	800e0c0 <osSemaphoreNew+0xb0>
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d047      	beq.n	800e0c0 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800e030:	b14a      	cbz	r2, 800e046 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e032:	6895      	ldr	r5, [r2, #8]
 800e034:	b115      	cbz	r5, 800e03c <osSemaphoreNew+0x2c>
 800e036:	68d3      	ldr	r3, [r2, #12]
 800e038:	2b4f      	cmp	r3, #79	; 0x4f
 800e03a:	d814      	bhi.n	800e066 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e03c:	2d00      	cmp	r5, #0
 800e03e:	d141      	bne.n	800e0c4 <osSemaphoreNew+0xb4>
 800e040:	68e3      	ldr	r3, [r4, #12]
 800e042:	b10b      	cbz	r3, 800e048 <osSemaphoreNew+0x38>
 800e044:	e039      	b.n	800e0ba <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800e046:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800e048:	2801      	cmp	r0, #1
 800e04a:	d00e      	beq.n	800e06a <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800e04c:	bb73      	cbnz	r3, 800e0ac <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e04e:	4631      	mov	r1, r6
 800e050:	f000 fe39 	bl	800ecc6 <xQueueCreateCountingSemaphore>
 800e054:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e056:	b385      	cbz	r5, 800e0ba <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800e058:	b104      	cbz	r4, 800e05c <osSemaphoreNew+0x4c>
          name = attr->name;
 800e05a:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e05c:	4621      	mov	r1, r4
 800e05e:	4628      	mov	r0, r5
 800e060:	f001 f9aa 	bl	800f3b8 <vQueueAddToRegistry>
 800e064:	e029      	b.n	800e0ba <osSemaphoreNew+0xaa>
        mem = 1;
 800e066:	2301      	movs	r3, #1
 800e068:	e7ee      	b.n	800e048 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800e06a:	b9b3      	cbnz	r3, 800e09a <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800e06c:	2203      	movs	r2, #3
 800e06e:	2100      	movs	r1, #0
 800e070:	2001      	movs	r0, #1
 800e072:	f000 fde1 	bl	800ec38 <xQueueGenericCreate>
 800e076:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e078:	2d00      	cmp	r5, #0
 800e07a:	bf18      	it	ne
 800e07c:	2e00      	cmpne	r6, #0
 800e07e:	d0ea      	beq.n	800e056 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e080:	2300      	movs	r3, #0
 800e082:	461a      	mov	r2, r3
 800e084:	4619      	mov	r1, r3
 800e086:	4628      	mov	r0, r5
 800e088:	f000 fe3b 	bl	800ed02 <xQueueGenericSend>
 800e08c:	2801      	cmp	r0, #1
 800e08e:	d0e2      	beq.n	800e056 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800e090:	4628      	mov	r0, r5
 800e092:	f001 f9bb 	bl	800f40c <vQueueDelete>
            hSemaphore = NULL;
 800e096:	2500      	movs	r5, #0
 800e098:	e00f      	b.n	800e0ba <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e09a:	68a3      	ldr	r3, [r4, #8]
 800e09c:	2203      	movs	r2, #3
 800e09e:	9200      	str	r2, [sp, #0]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	4611      	mov	r1, r2
 800e0a4:	f000 fd75 	bl	800eb92 <xQueueGenericCreateStatic>
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	e7e5      	b.n	800e078 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e0ac:	68a2      	ldr	r2, [r4, #8]
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	f000 fde6 	bl	800ec80 <xQueueCreateCountingSemaphoreStatic>
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	e7ce      	b.n	800e056 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800e0b8:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	b002      	add	sp, #8
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800e0c0:	2500      	movs	r5, #0
 800e0c2:	e7fa      	b.n	800e0ba <osSemaphoreNew+0xaa>
 800e0c4:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800e0c6:	e7f8      	b.n	800e0ba <osSemaphoreNew+0xaa>

0800e0c8 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e0c8:	b320      	cbz	r0, 800e114 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e0ca:	b510      	push	{r4, lr}
 800e0cc:	b082      	sub	sp, #8
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e0d4:	b1b3      	cbz	r3, 800e104 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800e0d6:	bb01      	cbnz	r1, 800e11a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800e0d8:	2100      	movs	r1, #0
 800e0da:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e0dc:	aa01      	add	r2, sp, #4
 800e0de:	f001 f916 	bl	800f30e <xQueueReceiveFromISR>
 800e0e2:	2801      	cmp	r0, #1
 800e0e4:	d11c      	bne.n	800e120 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800e0e6:	9801      	ldr	r0, [sp, #4]
 800e0e8:	b150      	cbz	r0, 800e100 <osSemaphoreAcquire+0x38>
 800e0ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e0fe:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e100:	b002      	add	sp, #8
 800e102:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e104:	f001 f830 	bl	800f168 <xQueueSemaphoreTake>
 800e108:	2801      	cmp	r0, #1
 800e10a:	d00c      	beq.n	800e126 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800e10c:	b16c      	cbz	r4, 800e12a <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800e10e:	f06f 0001 	mvn.w	r0, #1
 800e112:	e7f5      	b.n	800e100 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800e114:	f06f 0003 	mvn.w	r0, #3
}
 800e118:	4770      	bx	lr
      stat = osErrorParameter;
 800e11a:	f06f 0003 	mvn.w	r0, #3
 800e11e:	e7ef      	b.n	800e100 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800e120:	f06f 0002 	mvn.w	r0, #2
 800e124:	e7ec      	b.n	800e100 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800e126:	2000      	movs	r0, #0
 800e128:	e7ea      	b.n	800e100 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800e12a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800e12e:	e7e7      	b.n	800e100 <osSemaphoreAcquire+0x38>

0800e130 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e130:	b320      	cbz	r0, 800e17c <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e132:	b500      	push	{lr}
 800e134:	b083      	sub	sp, #12
 800e136:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e13a:	b1a3      	cbz	r3, 800e166 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800e13c:	2300      	movs	r3, #0
 800e13e:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e140:	a901      	add	r1, sp, #4
 800e142:	f000 ff09 	bl	800ef58 <xQueueGiveFromISR>
 800e146:	2801      	cmp	r0, #1
 800e148:	d11b      	bne.n	800e182 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800e14a:	9801      	ldr	r0, [sp, #4]
 800e14c:	b198      	cbz	r0, 800e176 <osSemaphoreRelease+0x46>
 800e14e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e156:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e162:	2000      	movs	r0, #0
 800e164:	e007      	b.n	800e176 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e166:	2300      	movs	r3, #0
 800e168:	461a      	mov	r2, r3
 800e16a:	4619      	mov	r1, r3
 800e16c:	f000 fdc9 	bl	800ed02 <xQueueGenericSend>
 800e170:	2801      	cmp	r0, #1
 800e172:	d109      	bne.n	800e188 <osSemaphoreRelease+0x58>
  stat = osOK;
 800e174:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800e176:	b003      	add	sp, #12
 800e178:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800e17c:	f06f 0003 	mvn.w	r0, #3
}
 800e180:	4770      	bx	lr
      stat = osErrorResource;
 800e182:	f06f 0002 	mvn.w	r0, #2
 800e186:	e7f6      	b.n	800e176 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800e188:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800e18c:	e7f3      	b.n	800e176 <osSemaphoreRelease+0x46>

0800e18e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e18e:	b570      	push	{r4, r5, r6, lr}
 800e190:	b082      	sub	sp, #8
 800e192:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e196:	2b00      	cmp	r3, #0
 800e198:	d13d      	bne.n	800e216 <osMessageQueueNew+0x88>
 800e19a:	4614      	mov	r4, r2
 800e19c:	1e0b      	subs	r3, r1, #0
 800e19e:	bf18      	it	ne
 800e1a0:	2301      	movne	r3, #1
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d03b      	beq.n	800e21e <osMessageQueueNew+0x90>
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d039      	beq.n	800e21e <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 800e1aa:	b36a      	cbz	r2, 800e208 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e1ac:	6893      	ldr	r3, [r2, #8]
 800e1ae:	b14b      	cbz	r3, 800e1c4 <osMessageQueueNew+0x36>
 800e1b0:	68d2      	ldr	r2, [r2, #12]
 800e1b2:	2a4f      	cmp	r2, #79	; 0x4f
 800e1b4:	d906      	bls.n	800e1c4 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e1b6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e1b8:	b122      	cbz	r2, 800e1c4 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e1ba:	fb01 f500 	mul.w	r5, r1, r0
 800e1be:	6966      	ldr	r6, [r4, #20]
 800e1c0:	42ae      	cmp	r6, r5
 800e1c2:	d21b      	bcs.n	800e1fc <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e1c4:	b173      	cbz	r3, 800e1e4 <osMessageQueueNew+0x56>
    mem = -1;
 800e1c6:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800e1ca:	bb53      	cbnz	r3, 800e222 <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f000 fd33 	bl	800ec38 <xQueueGenericCreate>
 800e1d2:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e1d4:	b305      	cbz	r5, 800e218 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 800e1d6:	b104      	cbz	r4, 800e1da <osMessageQueueNew+0x4c>
        name = attr->name;
 800e1d8:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800e1da:	4621      	mov	r1, r4
 800e1dc:	4628      	mov	r0, r5
 800e1de:	f001 f8eb 	bl	800f3b8 <vQueueAddToRegistry>
 800e1e2:	e019      	b.n	800e218 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e1e4:	68e3      	ldr	r3, [r4, #12]
 800e1e6:	b98b      	cbnz	r3, 800e20c <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e1e8:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e1ea:	b113      	cbz	r3, 800e1f2 <osMessageQueueNew+0x64>
    mem = -1;
 800e1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f0:	e7eb      	b.n	800e1ca <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e1f2:	6963      	ldr	r3, [r4, #20]
 800e1f4:	b16b      	cbz	r3, 800e212 <osMessageQueueNew+0x84>
    mem = -1;
 800e1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fa:	e7e6      	b.n	800e1ca <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e1fc:	2500      	movs	r5, #0
 800e1fe:	9500      	str	r5, [sp, #0]
 800e200:	f000 fcc7 	bl	800eb92 <xQueueGenericCreateStatic>
 800e204:	4605      	mov	r5, r0
 800e206:	e7e5      	b.n	800e1d4 <osMessageQueueNew+0x46>
      mem = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	e7de      	b.n	800e1ca <osMessageQueueNew+0x3c>
    mem = -1;
 800e20c:	f04f 33ff 	mov.w	r3, #4294967295
 800e210:	e7db      	b.n	800e1ca <osMessageQueueNew+0x3c>
          mem = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	e7d9      	b.n	800e1ca <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800e216:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800e218:	4628      	mov	r0, r5
 800e21a:	b002      	add	sp, #8
 800e21c:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800e21e:	2500      	movs	r5, #0
 800e220:	e7fa      	b.n	800e218 <osMessageQueueNew+0x8a>
 800e222:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800e224:	e7f8      	b.n	800e218 <osMessageQueueNew+0x8a>

0800e226 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e226:	b510      	push	{r4, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	461c      	mov	r4, r3
 800e22c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e230:	b1d3      	cbz	r3, 800e268 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e232:	2900      	cmp	r1, #0
 800e234:	bf18      	it	ne
 800e236:	2800      	cmpne	r0, #0
 800e238:	d024      	beq.n	800e284 <osMessageQueuePut+0x5e>
 800e23a:	bb34      	cbnz	r4, 800e28a <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e240:	aa01      	add	r2, sp, #4
 800e242:	f000 fe22 	bl	800ee8a <xQueueGenericSendFromISR>
 800e246:	2801      	cmp	r0, #1
 800e248:	d122      	bne.n	800e290 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800e24a:	9801      	ldr	r0, [sp, #4]
 800e24c:	b150      	cbz	r0, 800e264 <osMessageQueuePut+0x3e>
 800e24e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e256:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e262:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e264:	b002      	add	sp, #8
 800e266:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e268:	2900      	cmp	r1, #0
 800e26a:	bf18      	it	ne
 800e26c:	2800      	cmpne	r0, #0
 800e26e:	d012      	beq.n	800e296 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e270:	2300      	movs	r3, #0
 800e272:	4622      	mov	r2, r4
 800e274:	f000 fd45 	bl	800ed02 <xQueueGenericSend>
 800e278:	2801      	cmp	r0, #1
 800e27a:	d00f      	beq.n	800e29c <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 800e27c:	b184      	cbz	r4, 800e2a0 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 800e27e:	f06f 0001 	mvn.w	r0, #1
 800e282:	e7ef      	b.n	800e264 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e284:	f06f 0003 	mvn.w	r0, #3
 800e288:	e7ec      	b.n	800e264 <osMessageQueuePut+0x3e>
 800e28a:	f06f 0003 	mvn.w	r0, #3
 800e28e:	e7e9      	b.n	800e264 <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 800e290:	f06f 0002 	mvn.w	r0, #2
 800e294:	e7e6      	b.n	800e264 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e296:	f06f 0003 	mvn.w	r0, #3
 800e29a:	e7e3      	b.n	800e264 <osMessageQueuePut+0x3e>
  stat = osOK;
 800e29c:	2000      	movs	r0, #0
 800e29e:	e7e1      	b.n	800e264 <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800e2a0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800e2a4:	e7de      	b.n	800e264 <osMessageQueuePut+0x3e>

0800e2a6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e2a6:	b510      	push	{r4, lr}
 800e2a8:	b082      	sub	sp, #8
 800e2aa:	461c      	mov	r4, r3
 800e2ac:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e2b0:	b1d3      	cbz	r3, 800e2e8 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e2b2:	2900      	cmp	r1, #0
 800e2b4:	bf18      	it	ne
 800e2b6:	2800      	cmpne	r0, #0
 800e2b8:	d023      	beq.n	800e302 <osMessageQueueGet+0x5c>
 800e2ba:	bb2c      	cbnz	r4, 800e308 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e2c0:	aa01      	add	r2, sp, #4
 800e2c2:	f001 f824 	bl	800f30e <xQueueReceiveFromISR>
 800e2c6:	2801      	cmp	r0, #1
 800e2c8:	d121      	bne.n	800e30e <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800e2ca:	9801      	ldr	r0, [sp, #4]
 800e2cc:	b150      	cbz	r0, 800e2e4 <osMessageQueueGet+0x3e>
 800e2ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e2e2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e2e4:	b002      	add	sp, #8
 800e2e6:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e2e8:	2900      	cmp	r1, #0
 800e2ea:	bf18      	it	ne
 800e2ec:	2800      	cmpne	r0, #0
 800e2ee:	d011      	beq.n	800e314 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e2f0:	4622      	mov	r2, r4
 800e2f2:	f000 fe8a 	bl	800f00a <xQueueReceive>
 800e2f6:	2801      	cmp	r0, #1
 800e2f8:	d00f      	beq.n	800e31a <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 800e2fa:	b184      	cbz	r4, 800e31e <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 800e2fc:	f06f 0001 	mvn.w	r0, #1
 800e300:	e7f0      	b.n	800e2e4 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800e302:	f06f 0003 	mvn.w	r0, #3
 800e306:	e7ed      	b.n	800e2e4 <osMessageQueueGet+0x3e>
 800e308:	f06f 0003 	mvn.w	r0, #3
 800e30c:	e7ea      	b.n	800e2e4 <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800e30e:	f06f 0002 	mvn.w	r0, #2
 800e312:	e7e7      	b.n	800e2e4 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800e314:	f06f 0003 	mvn.w	r0, #3
 800e318:	e7e4      	b.n	800e2e4 <osMessageQueueGet+0x3e>
  stat = osOK;
 800e31a:	2000      	movs	r0, #0
 800e31c:	e7e2      	b.n	800e2e4 <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800e31e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800e322:	e7df      	b.n	800e2e4 <osMessageQueueGet+0x3e>

0800e324 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e324:	4b03      	ldr	r3, [pc, #12]	; (800e334 <vApplicationGetIdleTaskMemory+0x10>)
 800e326:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e328:	4b03      	ldr	r3, [pc, #12]	; (800e338 <vApplicationGetIdleTaskMemory+0x14>)
 800e32a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e32c:	2380      	movs	r3, #128	; 0x80
 800e32e:	6013      	str	r3, [r2, #0]
}
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	24003b34 	.word	0x24003b34
 800e338:	24003934 	.word	0x24003934

0800e33c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e33c:	4b03      	ldr	r3, [pc, #12]	; (800e34c <vApplicationGetTimerTaskMemory+0x10>)
 800e33e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e340:	4b03      	ldr	r3, [pc, #12]	; (800e350 <vApplicationGetTimerTaskMemory+0x14>)
 800e342:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e344:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e348:	6013      	str	r3, [r2, #0]
}
 800e34a:	4770      	bx	lr
 800e34c:	24003ff4 	.word	0x24003ff4
 800e350:	24003bf4 	.word	0x24003bf4

0800e354 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e354:	4a12      	ldr	r2, [pc, #72]	; (800e3a0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e356:	f012 0f07 	tst.w	r2, #7
 800e35a:	d01e      	beq.n	800e39a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e35c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e35e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e362:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800e366:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e368:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e36a:	480e      	ldr	r0, [pc, #56]	; (800e3a4 <prvHeapInit+0x50>)
 800e36c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e36e:	2100      	movs	r1, #0
 800e370:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e372:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e374:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e376:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e37a:	480b      	ldr	r0, [pc, #44]	; (800e3a8 <prvHeapInit+0x54>)
 800e37c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e37e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e380:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e382:	1a99      	subs	r1, r3, r2
 800e384:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e386:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e388:	4b08      	ldr	r3, [pc, #32]	; (800e3ac <prvHeapInit+0x58>)
 800e38a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e38c:	4b08      	ldr	r3, [pc, #32]	; (800e3b0 <prvHeapInit+0x5c>)
 800e38e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e390:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <prvHeapInit+0x60>)
 800e392:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e396:	601a      	str	r2, [r3, #0]
}
 800e398:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e39a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e39e:	e7e4      	b.n	800e36a <prvHeapInit+0x16>
 800e3a0:	240040b4 	.word	0x240040b4
 800e3a4:	2400c0c8 	.word	0x2400c0c8
 800e3a8:	240040b0 	.word	0x240040b0
 800e3ac:	2400c0bc 	.word	0x2400c0bc
 800e3b0:	2400c0b8 	.word	0x2400c0b8
 800e3b4:	2400c0b4 	.word	0x2400c0b4

0800e3b8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e3b8:	4b16      	ldr	r3, [pc, #88]	; (800e414 <prvInsertBlockIntoFreeList+0x5c>)
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4283      	cmp	r3, r0
 800e3c0:	d3fb      	bcc.n	800e3ba <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3c2:	6851      	ldr	r1, [r2, #4]
 800e3c4:	eb02 0c01 	add.w	ip, r2, r1
 800e3c8:	4584      	cmp	ip, r0
 800e3ca:	d009      	beq.n	800e3e0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e3cc:	6841      	ldr	r1, [r0, #4]
 800e3ce:	eb00 0c01 	add.w	ip, r0, r1
 800e3d2:	4563      	cmp	r3, ip
 800e3d4:	d009      	beq.n	800e3ea <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3d6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3d8:	4290      	cmp	r0, r2
 800e3da:	d019      	beq.n	800e410 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3dc:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800e3de:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3e0:	6840      	ldr	r0, [r0, #4]
 800e3e2:	4401      	add	r1, r0
 800e3e4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	e7f0      	b.n	800e3cc <prvInsertBlockIntoFreeList+0x14>
{
 800e3ea:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3ec:	4c0a      	ldr	r4, [pc, #40]	; (800e418 <prvInsertBlockIntoFreeList+0x60>)
 800e3ee:	6824      	ldr	r4, [r4, #0]
 800e3f0:	42a3      	cmp	r3, r4
 800e3f2:	d00b      	beq.n	800e40c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	4419      	add	r1, r3
 800e3f8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3fa:	6813      	ldr	r3, [r2, #0]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800e400:	4290      	cmp	r0, r2
 800e402:	d000      	beq.n	800e406 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e404:	6010      	str	r0, [r2, #0]
	}
}
 800e406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e40a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e40c:	6004      	str	r4, [r0, #0]
 800e40e:	e7f7      	b.n	800e400 <prvInsertBlockIntoFreeList+0x48>
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	2400c0c8 	.word	0x2400c0c8
 800e418:	240040b0 	.word	0x240040b0

0800e41c <pvPortMalloc>:
{
 800e41c:	b570      	push	{r4, r5, r6, lr}
 800e41e:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800e420:	f001 fa9e 	bl	800f960 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e424:	4b36      	ldr	r3, [pc, #216]	; (800e500 <pvPortMalloc+0xe4>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	b1a3      	cbz	r3, 800e454 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e42a:	4b36      	ldr	r3, [pc, #216]	; (800e504 <pvPortMalloc+0xe8>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	421d      	tst	r5, r3
 800e430:	d14e      	bne.n	800e4d0 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800e432:	b135      	cbz	r5, 800e442 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800e434:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e436:	f015 0f07 	tst.w	r5, #7
 800e43a:	d002      	beq.n	800e442 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e43c:	f025 0507 	bic.w	r5, r5, #7
 800e440:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e442:	2d00      	cmp	r5, #0
 800e444:	d046      	beq.n	800e4d4 <pvPortMalloc+0xb8>
 800e446:	4b30      	ldr	r3, [pc, #192]	; (800e508 <pvPortMalloc+0xec>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	42ab      	cmp	r3, r5
 800e44c:	d351      	bcc.n	800e4f2 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800e44e:	4a2f      	ldr	r2, [pc, #188]	; (800e50c <pvPortMalloc+0xf0>)
 800e450:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e452:	e004      	b.n	800e45e <pvPortMalloc+0x42>
			prvHeapInit();
 800e454:	f7ff ff7e 	bl	800e354 <prvHeapInit>
 800e458:	e7e7      	b.n	800e42a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800e45a:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e45c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e45e:	6863      	ldr	r3, [r4, #4]
 800e460:	42ab      	cmp	r3, r5
 800e462:	d202      	bcs.n	800e46a <pvPortMalloc+0x4e>
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1f7      	bne.n	800e45a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800e46a:	4b25      	ldr	r3, [pc, #148]	; (800e500 <pvPortMalloc+0xe4>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	42a3      	cmp	r3, r4
 800e470:	d041      	beq.n	800e4f6 <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e472:	6816      	ldr	r6, [r2, #0]
 800e474:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e47a:	6863      	ldr	r3, [r4, #4]
 800e47c:	1b5b      	subs	r3, r3, r5
 800e47e:	2b10      	cmp	r3, #16
 800e480:	d910      	bls.n	800e4a4 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e482:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e484:	f010 0f07 	tst.w	r0, #7
 800e488:	d008      	beq.n	800e49c <pvPortMalloc+0x80>
 800e48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48e:	f383 8811 	msr	BASEPRI, r3
 800e492:	f3bf 8f6f 	isb	sy
 800e496:	f3bf 8f4f 	dsb	sy
 800e49a:	e7fe      	b.n	800e49a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e49c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e49e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4a0:	f7ff ff8a 	bl	800e3b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4a4:	6862      	ldr	r2, [r4, #4]
 800e4a6:	4918      	ldr	r1, [pc, #96]	; (800e508 <pvPortMalloc+0xec>)
 800e4a8:	680b      	ldr	r3, [r1, #0]
 800e4aa:	1a9b      	subs	r3, r3, r2
 800e4ac:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e4ae:	4918      	ldr	r1, [pc, #96]	; (800e510 <pvPortMalloc+0xf4>)
 800e4b0:	6809      	ldr	r1, [r1, #0]
 800e4b2:	428b      	cmp	r3, r1
 800e4b4:	d201      	bcs.n	800e4ba <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e4b6:	4916      	ldr	r1, [pc, #88]	; (800e510 <pvPortMalloc+0xf4>)
 800e4b8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e4ba:	4b12      	ldr	r3, [pc, #72]	; (800e504 <pvPortMalloc+0xe8>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800e4c6:	4a13      	ldr	r2, [pc, #76]	; (800e514 <pvPortMalloc+0xf8>)
 800e4c8:	6813      	ldr	r3, [r2, #0]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	6013      	str	r3, [r2, #0]
 800e4ce:	e002      	b.n	800e4d6 <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800e4d0:	2600      	movs	r6, #0
 800e4d2:	e000      	b.n	800e4d6 <pvPortMalloc+0xba>
 800e4d4:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800e4d6:	f001 fadd 	bl	800fa94 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4da:	f016 0f07 	tst.w	r6, #7
 800e4de:	d00c      	beq.n	800e4fa <pvPortMalloc+0xde>
 800e4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	e7fe      	b.n	800e4f0 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800e4f2:	2600      	movs	r6, #0
 800e4f4:	e7ef      	b.n	800e4d6 <pvPortMalloc+0xba>
 800e4f6:	2600      	movs	r6, #0
 800e4f8:	e7ed      	b.n	800e4d6 <pvPortMalloc+0xba>
}
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	bd70      	pop	{r4, r5, r6, pc}
 800e4fe:	bf00      	nop
 800e500:	240040b0 	.word	0x240040b0
 800e504:	2400c0b4 	.word	0x2400c0b4
 800e508:	2400c0b8 	.word	0x2400c0b8
 800e50c:	2400c0c8 	.word	0x2400c0c8
 800e510:	2400c0bc 	.word	0x2400c0bc
 800e514:	2400c0c0 	.word	0x2400c0c0

0800e518 <vPortFree>:
	if( pv != NULL )
 800e518:	2800      	cmp	r0, #0
 800e51a:	d034      	beq.n	800e586 <vPortFree+0x6e>
{
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800e520:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e524:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e528:	4a17      	ldr	r2, [pc, #92]	; (800e588 <vPortFree+0x70>)
 800e52a:	6812      	ldr	r2, [r2, #0]
 800e52c:	4213      	tst	r3, r2
 800e52e:	d108      	bne.n	800e542 <vPortFree+0x2a>
 800e530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e534:	f383 8811 	msr	BASEPRI, r3
 800e538:	f3bf 8f6f 	isb	sy
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	e7fe      	b.n	800e540 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e542:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e546:	b141      	cbz	r1, 800e55a <vPortFree+0x42>
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	e7fe      	b.n	800e558 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e55a:	ea23 0302 	bic.w	r3, r3, r2
 800e55e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e562:	f001 f9fd 	bl	800f960 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e566:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e56a:	4a08      	ldr	r2, [pc, #32]	; (800e58c <vPortFree+0x74>)
 800e56c:	6813      	ldr	r3, [r2, #0]
 800e56e:	440b      	add	r3, r1
 800e570:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e572:	4628      	mov	r0, r5
 800e574:	f7ff ff20 	bl	800e3b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e578:	4a05      	ldr	r2, [pc, #20]	; (800e590 <vPortFree+0x78>)
 800e57a:	6813      	ldr	r3, [r2, #0]
 800e57c:	3301      	adds	r3, #1
 800e57e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e580:	f001 fa88 	bl	800fa94 <xTaskResumeAll>
}
 800e584:	bd38      	pop	{r3, r4, r5, pc}
 800e586:	4770      	bx	lr
 800e588:	2400c0b4 	.word	0x2400c0b4
 800e58c:	2400c0b8 	.word	0x2400c0b8
 800e590:	2400c0c4 	.word	0x2400c0c4

0800e594 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e594:	f100 0308 	add.w	r3, r0, #8
 800e598:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e59a:	f04f 32ff 	mov.w	r2, #4294967295
 800e59e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5a0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5a2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e5a8:	4770      	bx	lr

0800e5aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e5ae:	4770      	bx	lr

0800e5b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e5b0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e5b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e5b4:	689a      	ldr	r2, [r3, #8]
 800e5b6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e5b8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e5ba:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e5bc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e5be:	6803      	ldr	r3, [r0, #0]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	6003      	str	r3, [r0, #0]
}
 800e5c4:	4770      	bx	lr

0800e5c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5c6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e5c8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e5ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e5ce:	d011      	beq.n	800e5f4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e5d0:	f100 0308 	add.w	r3, r0, #8
 800e5d4:	461c      	mov	r4, r3
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	42aa      	cmp	r2, r5
 800e5dc:	d9fa      	bls.n	800e5d4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e5de:	6863      	ldr	r3, [r4, #4]
 800e5e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e5e2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e5e4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e5e6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e5e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e5ea:	6803      	ldr	r3, [r0, #0]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	6003      	str	r3, [r0, #0]
}
 800e5f0:	bc30      	pop	{r4, r5}
 800e5f2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800e5f4:	6904      	ldr	r4, [r0, #16]
 800e5f6:	e7f2      	b.n	800e5de <vListInsert+0x18>

0800e5f8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e5f8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e5fa:	6841      	ldr	r1, [r0, #4]
 800e5fc:	6882      	ldr	r2, [r0, #8]
 800e5fe:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e600:	6841      	ldr	r1, [r0, #4]
 800e602:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	4282      	cmp	r2, r0
 800e608:	d006      	beq.n	800e618 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e60a:	2200      	movs	r2, #0
 800e60c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	3a01      	subs	r2, #1
 800e612:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e614:	6818      	ldr	r0, [r3, #0]
}
 800e616:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e618:	6882      	ldr	r2, [r0, #8]
 800e61a:	605a      	str	r2, [r3, #4]
 800e61c:	e7f5      	b.n	800e60a <uxListRemove+0x12>
	...

0800e620 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e620:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e622:	2300      	movs	r3, #0
 800e624:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e626:	4b0d      	ldr	r3, [pc, #52]	; (800e65c <prvTaskExitError+0x3c>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e62e:	d008      	beq.n	800e642 <prvTaskExitError+0x22>
 800e630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	e7fe      	b.n	800e640 <prvTaskExitError+0x20>
 800e642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e652:	9b01      	ldr	r3, [sp, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d0fc      	beq.n	800e652 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e658:	b002      	add	sp, #8
 800e65a:	4770      	bx	lr
 800e65c:	24000080 	.word	0x24000080

0800e660 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e660:	4808      	ldr	r0, [pc, #32]	; (800e684 <prvPortStartFirstTask+0x24>)
 800e662:	6800      	ldr	r0, [r0, #0]
 800e664:	6800      	ldr	r0, [r0, #0]
 800e666:	f380 8808 	msr	MSP, r0
 800e66a:	f04f 0000 	mov.w	r0, #0
 800e66e:	f380 8814 	msr	CONTROL, r0
 800e672:	b662      	cpsie	i
 800e674:	b661      	cpsie	f
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	df00      	svc	0
 800e680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e682:	0000      	.short	0x0000
 800e684:	e000ed08 	.word	0xe000ed08

0800e688 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e688:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e698 <vPortEnableVFP+0x10>
 800e68c:	6801      	ldr	r1, [r0, #0]
 800e68e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e692:	6001      	str	r1, [r0, #0]
 800e694:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e696:	0000      	.short	0x0000
 800e698:	e000ed88 	.word	0xe000ed88

0800e69c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e69c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e6a0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e6a4:	f021 0101 	bic.w	r1, r1, #1
 800e6a8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e6ac:	4b05      	ldr	r3, [pc, #20]	; (800e6c4 <pxPortInitialiseStack+0x28>)
 800e6ae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6b2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e6b6:	f06f 0302 	mvn.w	r3, #2
 800e6ba:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800e6be:	3844      	subs	r0, #68	; 0x44
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	0800e621 	.word	0x0800e621
	...

0800e6d0 <SVC_Handler>:
	__asm volatile (
 800e6d0:	4b07      	ldr	r3, [pc, #28]	; (800e6f0 <pxCurrentTCBConst2>)
 800e6d2:	6819      	ldr	r1, [r3, #0]
 800e6d4:	6808      	ldr	r0, [r1, #0]
 800e6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6da:	f380 8809 	msr	PSP, r0
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f04f 0000 	mov.w	r0, #0
 800e6e6:	f380 8811 	msr	BASEPRI, r0
 800e6ea:	4770      	bx	lr
 800e6ec:	f3af 8000 	nop.w

0800e6f0 <pxCurrentTCBConst2>:
 800e6f0:	2400c118 	.word	0x2400c118

0800e6f4 <vPortEnterCritical>:
 800e6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f8:	f383 8811 	msr	BASEPRI, r3
 800e6fc:	f3bf 8f6f 	isb	sy
 800e700:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e704:	4a0b      	ldr	r2, [pc, #44]	; (800e734 <vPortEnterCritical+0x40>)
 800e706:	6813      	ldr	r3, [r2, #0]
 800e708:	3301      	adds	r3, #1
 800e70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d000      	beq.n	800e712 <vPortEnterCritical+0x1e>
}
 800e710:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e712:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e716:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800e71a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e71e:	d0f7      	beq.n	800e710 <vPortEnterCritical+0x1c>
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	e7fe      	b.n	800e730 <vPortEnterCritical+0x3c>
 800e732:	bf00      	nop
 800e734:	24000080 	.word	0x24000080

0800e738 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e738:	4b09      	ldr	r3, [pc, #36]	; (800e760 <vPortExitCritical+0x28>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	b943      	cbnz	r3, 800e750 <vPortExitCritical+0x18>
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	e7fe      	b.n	800e74e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e750:	3b01      	subs	r3, #1
 800e752:	4a03      	ldr	r2, [pc, #12]	; (800e760 <vPortExitCritical+0x28>)
 800e754:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e756:	b90b      	cbnz	r3, 800e75c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e758:	f383 8811 	msr	BASEPRI, r3
}
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	24000080 	.word	0x24000080
	...

0800e770 <PendSV_Handler>:
	__asm volatile
 800e770:	f3ef 8009 	mrs	r0, PSP
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	4b15      	ldr	r3, [pc, #84]	; (800e7d0 <pxCurrentTCBConst>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	f01e 0f10 	tst.w	lr, #16
 800e780:	bf08      	it	eq
 800e782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78a:	6010      	str	r0, [r2, #0]
 800e78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e794:	f380 8811 	msr	BASEPRI, r0
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f001 f9f4 	bl	800fb8c <vTaskSwitchContext>
 800e7a4:	f04f 0000 	mov.w	r0, #0
 800e7a8:	f380 8811 	msr	BASEPRI, r0
 800e7ac:	bc09      	pop	{r0, r3}
 800e7ae:	6819      	ldr	r1, [r3, #0]
 800e7b0:	6808      	ldr	r0, [r1, #0]
 800e7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b6:	f01e 0f10 	tst.w	lr, #16
 800e7ba:	bf08      	it	eq
 800e7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7c0:	f380 8809 	msr	PSP, r0
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	f3af 8000 	nop.w

0800e7d0 <pxCurrentTCBConst>:
 800e7d0:	2400c118 	.word	0x2400c118

0800e7d4 <xPortSysTickHandler>:
{
 800e7d4:	b508      	push	{r3, lr}
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e7e6:	f001 f8c9 	bl	800f97c <xTaskIncrementTick>
 800e7ea:	b128      	cbz	r0, 800e7f8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	f383 8811 	msr	BASEPRI, r3
}
 800e7fe:	bd08      	pop	{r3, pc}

0800e800 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e800:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e804:	2300      	movs	r3, #0
 800e806:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e808:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e80a:	4b05      	ldr	r3, [pc, #20]	; (800e820 <vPortSetupTimerInterrupt+0x20>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4905      	ldr	r1, [pc, #20]	; (800e824 <vPortSetupTimerInterrupt+0x24>)
 800e810:	fba1 1303 	umull	r1, r3, r1, r3
 800e814:	099b      	lsrs	r3, r3, #6
 800e816:	3b01      	subs	r3, #1
 800e818:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e81a:	2307      	movs	r3, #7
 800e81c:	6113      	str	r3, [r2, #16]
}
 800e81e:	4770      	bx	lr
 800e820:	24000070 	.word	0x24000070
 800e824:	10624dd3 	.word	0x10624dd3

0800e828 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e828:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e82c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e830:	4b3d      	ldr	r3, [pc, #244]	; (800e928 <xPortStartScheduler+0x100>)
 800e832:	429a      	cmp	r2, r3
 800e834:	d01c      	beq.n	800e870 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e836:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e83a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e83e:	4b3b      	ldr	r3, [pc, #236]	; (800e92c <xPortStartScheduler+0x104>)
 800e840:	429a      	cmp	r2, r3
 800e842:	d01e      	beq.n	800e882 <xPortStartScheduler+0x5a>
{
 800e844:	b530      	push	{r4, r5, lr}
 800e846:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e848:	4b39      	ldr	r3, [pc, #228]	; (800e930 <xPortStartScheduler+0x108>)
 800e84a:	781a      	ldrb	r2, [r3, #0]
 800e84c:	b2d2      	uxtb	r2, r2
 800e84e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e850:	22ff      	movs	r2, #255	; 0xff
 800e852:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	b2db      	uxtb	r3, r3
 800e858:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e85c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e860:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e864:	4a33      	ldr	r2, [pc, #204]	; (800e934 <xPortStartScheduler+0x10c>)
 800e866:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e868:	4b33      	ldr	r3, [pc, #204]	; (800e938 <xPortStartScheduler+0x110>)
 800e86a:	2207      	movs	r2, #7
 800e86c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e86e:	e01b      	b.n	800e8a8 <xPortStartScheduler+0x80>
	__asm volatile
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e880:	e7fe      	b.n	800e880 <xPortStartScheduler+0x58>
 800e882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e892:	e7fe      	b.n	800e892 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800e894:	4a28      	ldr	r2, [pc, #160]	; (800e938 <xPortStartScheduler+0x110>)
 800e896:	6813      	ldr	r3, [r2, #0]
 800e898:	3b01      	subs	r3, #1
 800e89a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e89c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e8ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e8b0:	d1f0      	bne.n	800e894 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8b2:	4b21      	ldr	r3, [pc, #132]	; (800e938 <xPortStartScheduler+0x110>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d008      	beq.n	800e8cc <xPortStartScheduler+0xa4>
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	e7fe      	b.n	800e8ca <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e8cc:	021b      	lsls	r3, r3, #8
 800e8ce:	4a1a      	ldr	r2, [pc, #104]	; (800e938 <xPortStartScheduler+0x110>)
 800e8d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8d6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e8d8:	9b01      	ldr	r3, [sp, #4]
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	4a14      	ldr	r2, [pc, #80]	; (800e930 <xPortStartScheduler+0x108>)
 800e8de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e8e0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800e8e4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800e8e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e8ec:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e8f0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800e8f4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e8f8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800e8fc:	f7ff ff80 	bl	800e800 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e900:	2500      	movs	r5, #0
 800e902:	4b0e      	ldr	r3, [pc, #56]	; (800e93c <xPortStartScheduler+0x114>)
 800e904:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e906:	f7ff febf 	bl	800e688 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e90a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800e90e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e912:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800e916:	f7ff fea3 	bl	800e660 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e91a:	f001 f937 	bl	800fb8c <vTaskSwitchContext>
	prvTaskExitError();
 800e91e:	f7ff fe7f 	bl	800e620 <prvTaskExitError>
}
 800e922:	4628      	mov	r0, r5
 800e924:	b003      	add	sp, #12
 800e926:	bd30      	pop	{r4, r5, pc}
 800e928:	410fc271 	.word	0x410fc271
 800e92c:	410fc270 	.word	0x410fc270
 800e930:	e000e400 	.word	0xe000e400
 800e934:	2400c0d0 	.word	0x2400c0d0
 800e938:	2400c0d4 	.word	0x2400c0d4
 800e93c:	24000080 	.word	0x24000080

0800e940 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e940:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e944:	2b0f      	cmp	r3, #15
 800e946:	d90f      	bls.n	800e968 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e948:	4a11      	ldr	r2, [pc, #68]	; (800e990 <vPortValidateInterruptPriority+0x50>)
 800e94a:	5c9b      	ldrb	r3, [r3, r2]
 800e94c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e94e:	4a11      	ldr	r2, [pc, #68]	; (800e994 <vPortValidateInterruptPriority+0x54>)
 800e950:	7812      	ldrb	r2, [r2, #0]
 800e952:	429a      	cmp	r2, r3
 800e954:	d908      	bls.n	800e968 <vPortValidateInterruptPriority+0x28>
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	f383 8811 	msr	BASEPRI, r3
 800e95e:	f3bf 8f6f 	isb	sy
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	e7fe      	b.n	800e966 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e968:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e96c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800e970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e974:	4a08      	ldr	r2, [pc, #32]	; (800e998 <vPortValidateInterruptPriority+0x58>)
 800e976:	6812      	ldr	r2, [r2, #0]
 800e978:	4293      	cmp	r3, r2
 800e97a:	d908      	bls.n	800e98e <vPortValidateInterruptPriority+0x4e>
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	e7fe      	b.n	800e98c <vPortValidateInterruptPriority+0x4c>
	}
 800e98e:	4770      	bx	lr
 800e990:	e000e3f0 	.word	0xe000e3f0
 800e994:	2400c0d0 	.word	0x2400c0d0
 800e998:	2400c0d4 	.word	0x2400c0d4

0800e99c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e99c:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e99e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e9a0:	b118      	cbz	r0, 800e9aa <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a4:	6818      	ldr	r0, [r3, #0]
 800e9a6:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800e9aa:	4770      	bx	lr

0800e9ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e9ac:	b510      	push	{r4, lr}
 800e9ae:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e9b0:	f7ff fea0 	bl	800e6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e9b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e9b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d004      	beq.n	800e9c6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800e9bc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800e9be:	f7ff febb 	bl	800e738 <vPortExitCritical>

	return xReturn;
}
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800e9c6:	2401      	movs	r4, #1
 800e9c8:	e7f9      	b.n	800e9be <prvIsQueueFull+0x12>

0800e9ca <prvIsQueueEmpty>:
{
 800e9ca:	b510      	push	{r4, lr}
 800e9cc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e9ce:	f7ff fe91 	bl	800e6f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e9d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9d4:	b923      	cbnz	r3, 800e9e0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800e9d6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800e9d8:	f7ff feae 	bl	800e738 <vPortExitCritical>
}
 800e9dc:	4620      	mov	r0, r4
 800e9de:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800e9e0:	2400      	movs	r4, #0
 800e9e2:	e7f9      	b.n	800e9d8 <prvIsQueueEmpty+0xe>

0800e9e4 <prvCopyDataToQueue>:
{
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9ea:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e9ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e9ee:	b95a      	cbnz	r2, 800ea08 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9f0:	6803      	ldr	r3, [r0, #0]
 800e9f2:	b11b      	cbz	r3, 800e9fc <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800e9f4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e9f6:	3601      	adds	r6, #1
 800e9f8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800e9fa:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e9fc:	6880      	ldr	r0, [r0, #8]
 800e9fe:	f001 fa3f 	bl	800fe80 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	60a3      	str	r3, [r4, #8]
 800ea06:	e7f6      	b.n	800e9f6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800ea08:	b96d      	cbnz	r5, 800ea26 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea0a:	6840      	ldr	r0, [r0, #4]
 800ea0c:	f011 fe80 	bl	8020710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ea12:	6863      	ldr	r3, [r4, #4]
 800ea14:	4413      	add	r3, r2
 800ea16:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea18:	68a2      	ldr	r2, [r4, #8]
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d319      	bcc.n	800ea52 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800ea22:	4628      	mov	r0, r5
 800ea24:	e7e7      	b.n	800e9f6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea26:	68c0      	ldr	r0, [r0, #12]
 800ea28:	f011 fe72 	bl	8020710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ea2e:	4251      	negs	r1, r2
 800ea30:	68e3      	ldr	r3, [r4, #12]
 800ea32:	1a9b      	subs	r3, r3, r2
 800ea34:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea36:	6822      	ldr	r2, [r4, #0]
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d202      	bcs.n	800ea42 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea3c:	68a3      	ldr	r3, [r4, #8]
 800ea3e:	440b      	add	r3, r1
 800ea40:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ea42:	2d02      	cmp	r5, #2
 800ea44:	d001      	beq.n	800ea4a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800ea46:	2000      	movs	r0, #0
 800ea48:	e7d5      	b.n	800e9f6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea4a:	b126      	cbz	r6, 800ea56 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800ea4c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800ea4e:	2000      	movs	r0, #0
 800ea50:	e7d1      	b.n	800e9f6 <prvCopyDataToQueue+0x12>
 800ea52:	4628      	mov	r0, r5
 800ea54:	e7cf      	b.n	800e9f6 <prvCopyDataToQueue+0x12>
 800ea56:	2000      	movs	r0, #0
 800ea58:	e7cd      	b.n	800e9f6 <prvCopyDataToQueue+0x12>

0800ea5a <prvCopyDataFromQueue>:
{
 800ea5a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ea5e:	b16a      	cbz	r2, 800ea7c <prvCopyDataFromQueue+0x22>
{
 800ea60:	b510      	push	{r4, lr}
 800ea62:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea64:	68d9      	ldr	r1, [r3, #12]
 800ea66:	4411      	add	r1, r2
 800ea68:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea6a:	689c      	ldr	r4, [r3, #8]
 800ea6c:	42a1      	cmp	r1, r4
 800ea6e:	d301      	bcc.n	800ea74 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ea70:	6819      	ldr	r1, [r3, #0]
 800ea72:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea74:	68d9      	ldr	r1, [r3, #12]
 800ea76:	f011 fe4b 	bl	8020710 <memcpy>
}
 800ea7a:	bd10      	pop	{r4, pc}
 800ea7c:	4770      	bx	lr

0800ea7e <prvUnlockQueue>:
{
 800ea7e:	b538      	push	{r3, r4, r5, lr}
 800ea80:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800ea82:	f7ff fe37 	bl	800e6f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ea86:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800ea8a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea8c:	e001      	b.n	800ea92 <prvUnlockQueue+0x14>
			--cTxLock;
 800ea8e:	3c01      	subs	r4, #1
 800ea90:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea92:	2c00      	cmp	r4, #0
 800ea94:	dd0a      	ble.n	800eaac <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea98:	b143      	cbz	r3, 800eaac <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea9a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800ea9e:	f001 f8f9 	bl	800fc94 <xTaskRemoveFromEventList>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	d0f3      	beq.n	800ea8e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800eaa6:	f001 f989 	bl	800fdbc <vTaskMissedYield>
 800eaaa:	e7f0      	b.n	800ea8e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800eaac:	23ff      	movs	r3, #255	; 0xff
 800eaae:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800eab2:	f7ff fe41 	bl	800e738 <vPortExitCritical>
	taskENTER_CRITICAL();
 800eab6:	f7ff fe1d 	bl	800e6f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800eaba:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800eabe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eac0:	e001      	b.n	800eac6 <prvUnlockQueue+0x48>
				--cRxLock;
 800eac2:	3c01      	subs	r4, #1
 800eac4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eac6:	2c00      	cmp	r4, #0
 800eac8:	dd0a      	ble.n	800eae0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaca:	692b      	ldr	r3, [r5, #16]
 800eacc:	b143      	cbz	r3, 800eae0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eace:	f105 0010 	add.w	r0, r5, #16
 800ead2:	f001 f8df 	bl	800fc94 <xTaskRemoveFromEventList>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d0f3      	beq.n	800eac2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800eada:	f001 f96f 	bl	800fdbc <vTaskMissedYield>
 800eade:	e7f0      	b.n	800eac2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800eae0:	23ff      	movs	r3, #255	; 0xff
 800eae2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800eae6:	f7ff fe27 	bl	800e738 <vPortExitCritical>
}
 800eaea:	bd38      	pop	{r3, r4, r5, pc}

0800eaec <xQueueGenericReset>:
{
 800eaec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800eaee:	b1e0      	cbz	r0, 800eb2a <xQueueGenericReset+0x3e>
 800eaf0:	460d      	mov	r5, r1
 800eaf2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800eaf4:	f7ff fdfe 	bl	800e6f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eaf8:	6823      	ldr	r3, [r4, #0]
 800eafa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eafc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eafe:	fb01 3002 	mla	r0, r1, r2, r3
 800eb02:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eb04:	2000      	movs	r0, #0
 800eb06:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb08:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb0a:	3a01      	subs	r2, #1
 800eb0c:	fb02 3301 	mla	r3, r2, r1, r3
 800eb10:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eb12:	23ff      	movs	r3, #255	; 0xff
 800eb14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eb18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800eb1c:	b9fd      	cbnz	r5, 800eb5e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb1e:	6923      	ldr	r3, [r4, #16]
 800eb20:	b963      	cbnz	r3, 800eb3c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800eb22:	f7ff fe09 	bl	800e738 <vPortExitCritical>
}
 800eb26:	2001      	movs	r0, #1
 800eb28:	bd38      	pop	{r3, r4, r5, pc}
 800eb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800eb3a:	e7fe      	b.n	800eb3a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb3c:	f104 0010 	add.w	r0, r4, #16
 800eb40:	f001 f8a8 	bl	800fc94 <xTaskRemoveFromEventList>
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d0ec      	beq.n	800eb22 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800eb48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800eb4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb50:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800eb54:	f3bf 8f4f 	dsb	sy
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	e7e1      	b.n	800eb22 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb5e:	f104 0010 	add.w	r0, r4, #16
 800eb62:	f7ff fd17 	bl	800e594 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800eb6a:	f7ff fd13 	bl	800e594 <vListInitialise>
 800eb6e:	e7d8      	b.n	800eb22 <xQueueGenericReset+0x36>

0800eb70 <prvInitialiseNewQueue>:
{
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	461d      	mov	r5, r3
 800eb74:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800eb76:	460b      	mov	r3, r1
 800eb78:	b949      	cbnz	r1, 800eb8e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eb7a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800eb7c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eb7e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eb80:	2101      	movs	r1, #1
 800eb82:	4620      	mov	r0, r4
 800eb84:	f7ff ffb2 	bl	800eaec <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800eb88:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800eb8c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eb8e:	6022      	str	r2, [r4, #0]
 800eb90:	e7f4      	b.n	800eb7c <prvInitialiseNewQueue+0xc>

0800eb92 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb92:	b940      	cbnz	r0, 800eba6 <xQueueGenericCreateStatic+0x14>
 800eb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	e7fe      	b.n	800eba4 <xQueueGenericCreateStatic+0x12>
	{
 800eba6:	b510      	push	{r4, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800ebac:	b183      	cbz	r3, 800ebd0 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ebae:	1e0b      	subs	r3, r1, #0
 800ebb0:	bf18      	it	ne
 800ebb2:	2301      	movne	r3, #1
 800ebb4:	2a00      	cmp	r2, #0
 800ebb6:	bf08      	it	eq
 800ebb8:	f043 0301 	orreq.w	r3, r3, #1
 800ebbc:	b98b      	cbnz	r3, 800ebe2 <xQueueGenericCreateStatic+0x50>
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	e7fe      	b.n	800ebce <xQueueGenericCreateStatic+0x3c>
 800ebd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800ebe0:	e7fe      	b.n	800ebe0 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebe2:	fab1 f381 	clz	r3, r1
 800ebe6:	095b      	lsrs	r3, r3, #5
 800ebe8:	2a00      	cmp	r2, #0
 800ebea:	bf18      	it	ne
 800ebec:	f043 0301 	orrne.w	r3, r3, #1
 800ebf0:	b943      	cbnz	r3, 800ec04 <xQueueGenericCreateStatic+0x72>
 800ebf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	e7fe      	b.n	800ec02 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ec04:	2350      	movs	r3, #80	; 0x50
 800ec06:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ec08:	9b03      	ldr	r3, [sp, #12]
 800ec0a:	2b50      	cmp	r3, #80	; 0x50
 800ec0c:	d008      	beq.n	800ec20 <xQueueGenericCreateStatic+0x8e>
 800ec0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	e7fe      	b.n	800ec1e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec20:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec22:	2301      	movs	r3, #1
 800ec24:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec28:	9400      	str	r4, [sp, #0]
 800ec2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ec2e:	f7ff ff9f 	bl	800eb70 <prvInitialiseNewQueue>
	}
 800ec32:	4620      	mov	r0, r4
 800ec34:	b004      	add	sp, #16
 800ec36:	bd10      	pop	{r4, pc}

0800ec38 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec38:	b940      	cbnz	r0, 800ec4c <xQueueGenericCreate+0x14>
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	e7fe      	b.n	800ec4a <xQueueGenericCreate+0x12>
	{
 800ec4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	460d      	mov	r5, r1
 800ec52:	4614      	mov	r4, r2
 800ec54:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec56:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ec5a:	3050      	adds	r0, #80	; 0x50
 800ec5c:	f7ff fbde 	bl	800e41c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ec60:	4607      	mov	r7, r0
 800ec62:	b150      	cbz	r0, 800ec7a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ec64:	2300      	movs	r3, #0
 800ec66:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec6a:	9000      	str	r0, [sp, #0]
 800ec6c:	4623      	mov	r3, r4
 800ec6e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800ec72:	4629      	mov	r1, r5
 800ec74:	4630      	mov	r0, r6
 800ec76:	f7ff ff7b 	bl	800eb70 <prvInitialiseNewQueue>
	}
 800ec7a:	4638      	mov	r0, r7
 800ec7c:	b003      	add	sp, #12
 800ec7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec80 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800ec80:	b940      	cbnz	r0, 800ec94 <xQueueCreateCountingSemaphoreStatic+0x14>
 800ec82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec86:	f383 8811 	msr	BASEPRI, r3
 800ec8a:	f3bf 8f6f 	isb	sy
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	e7fe      	b.n	800ec92 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800ec94:	b510      	push	{r4, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800ec9a:	4288      	cmp	r0, r1
 800ec9c:	d208      	bcs.n	800ecb0 <xQueueCreateCountingSemaphoreStatic+0x30>
 800ec9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca2:	f383 8811 	msr	BASEPRI, r3
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	f3bf 8f4f 	dsb	sy
 800ecae:	e7fe      	b.n	800ecae <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	4611      	mov	r1, r2
 800ecba:	f7ff ff6a 	bl	800eb92 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ecbe:	b100      	cbz	r0, 800ecc2 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ecc0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ecc2:	b002      	add	sp, #8
 800ecc4:	bd10      	pop	{r4, pc}

0800ecc6 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800ecc6:	b940      	cbnz	r0, 800ecda <xQueueCreateCountingSemaphore+0x14>
 800ecc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eccc:	f383 8811 	msr	BASEPRI, r3
 800ecd0:	f3bf 8f6f 	isb	sy
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	e7fe      	b.n	800ecd8 <xQueueCreateCountingSemaphore+0x12>
	{
 800ecda:	b510      	push	{r4, lr}
 800ecdc:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800ecde:	4288      	cmp	r0, r1
 800ece0:	d208      	bcs.n	800ecf4 <xQueueCreateCountingSemaphore+0x2e>
 800ece2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece6:	f383 8811 	msr	BASEPRI, r3
 800ecea:	f3bf 8f6f 	isb	sy
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	e7fe      	b.n	800ecf2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	f7ff ff9e 	bl	800ec38 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ecfc:	b100      	cbz	r0, 800ed00 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ecfe:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ed00:	bd10      	pop	{r4, pc}

0800ed02 <xQueueGenericSend>:
{
 800ed02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed04:	b085      	sub	sp, #20
 800ed06:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ed08:	b188      	cbz	r0, 800ed2e <xQueueGenericSend+0x2c>
 800ed0a:	460f      	mov	r7, r1
 800ed0c:	461d      	mov	r5, r3
 800ed0e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed10:	b1b1      	cbz	r1, 800ed40 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed12:	2d02      	cmp	r5, #2
 800ed14:	d120      	bne.n	800ed58 <xQueueGenericSend+0x56>
 800ed16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d01d      	beq.n	800ed58 <xQueueGenericSend+0x56>
 800ed1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	e7fe      	b.n	800ed2c <xQueueGenericSend+0x2a>
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ed3e:	e7fe      	b.n	800ed3e <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d0e5      	beq.n	800ed12 <xQueueGenericSend+0x10>
 800ed46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4a:	f383 8811 	msr	BASEPRI, r3
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	e7fe      	b.n	800ed56 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed58:	f001 f836 	bl	800fdc8 <xTaskGetSchedulerState>
 800ed5c:	4606      	mov	r6, r0
 800ed5e:	b958      	cbnz	r0, 800ed78 <xQueueGenericSend+0x76>
 800ed60:	9b01      	ldr	r3, [sp, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d048      	beq.n	800edf8 <xQueueGenericSend+0xf6>
 800ed66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6a:	f383 8811 	msr	BASEPRI, r3
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	e7fe      	b.n	800ed76 <xQueueGenericSend+0x74>
 800ed78:	2600      	movs	r6, #0
 800ed7a:	e03d      	b.n	800edf8 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed7c:	462a      	mov	r2, r5
 800ed7e:	4639      	mov	r1, r7
 800ed80:	4620      	mov	r0, r4
 800ed82:	f7ff fe2f 	bl	800e9e4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed88:	b97b      	cbnz	r3, 800edaa <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800ed8a:	b148      	cbz	r0, 800eda0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800ed8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ed90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ed98:	f3bf 8f4f 	dsb	sy
 800ed9c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800eda0:	f7ff fcca 	bl	800e738 <vPortExitCritical>
				return pdPASS;
 800eda4:	2001      	movs	r0, #1
}
 800eda6:	b005      	add	sp, #20
 800eda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edaa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800edae:	f000 ff71 	bl	800fc94 <xTaskRemoveFromEventList>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d0f4      	beq.n	800eda0 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800edb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800edba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	f3bf 8f6f 	isb	sy
 800edca:	e7e9      	b.n	800eda0 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800edcc:	f7ff fcb4 	bl	800e738 <vPortExitCritical>
					return errQUEUE_FULL;
 800edd0:	2000      	movs	r0, #0
 800edd2:	e7e8      	b.n	800eda6 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800edd4:	a802      	add	r0, sp, #8
 800edd6:	f000 ffa3 	bl	800fd20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800edda:	2601      	movs	r6, #1
 800eddc:	e019      	b.n	800ee12 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800edde:	2300      	movs	r3, #0
 800ede0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ede4:	e021      	b.n	800ee2a <xQueueGenericSend+0x128>
 800ede6:	2300      	movs	r3, #0
 800ede8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edec:	e023      	b.n	800ee36 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800edee:	4620      	mov	r0, r4
 800edf0:	f7ff fe45 	bl	800ea7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800edf4:	f000 fe4e 	bl	800fa94 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800edf8:	f7ff fc7c 	bl	800e6f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edfc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800edfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d3bb      	bcc.n	800ed7c <xQueueGenericSend+0x7a>
 800ee04:	2d02      	cmp	r5, #2
 800ee06:	d0b9      	beq.n	800ed7c <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee08:	9b01      	ldr	r3, [sp, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d0de      	beq.n	800edcc <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800ee0e:	2e00      	cmp	r6, #0
 800ee10:	d0e0      	beq.n	800edd4 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800ee12:	f7ff fc91 	bl	800e738 <vPortExitCritical>
		vTaskSuspendAll();
 800ee16:	f000 fda3 	bl	800f960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee1a:	f7ff fc6b 	bl	800e6f4 <vPortEnterCritical>
 800ee1e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ee22:	b252      	sxtb	r2, r2
 800ee24:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee28:	d0d9      	beq.n	800edde <xQueueGenericSend+0xdc>
 800ee2a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800ee2e:	b252      	sxtb	r2, r2
 800ee30:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee34:	d0d7      	beq.n	800ede6 <xQueueGenericSend+0xe4>
 800ee36:	f7ff fc7f 	bl	800e738 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee3a:	a901      	add	r1, sp, #4
 800ee3c:	a802      	add	r0, sp, #8
 800ee3e:	f000 ff7b 	bl	800fd38 <xTaskCheckForTimeOut>
 800ee42:	b9d8      	cbnz	r0, 800ee7c <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee44:	4620      	mov	r0, r4
 800ee46:	f7ff fdb1 	bl	800e9ac <prvIsQueueFull>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0cf      	beq.n	800edee <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee4e:	9901      	ldr	r1, [sp, #4]
 800ee50:	f104 0010 	add.w	r0, r4, #16
 800ee54:	f000 feea 	bl	800fc2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f7ff fe10 	bl	800ea7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee5e:	f000 fe19 	bl	800fa94 <xTaskResumeAll>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d1c8      	bne.n	800edf8 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800ee66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	e7bd      	b.n	800edf8 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f7ff fdfe 	bl	800ea7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee82:	f000 fe07 	bl	800fa94 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ee86:	2000      	movs	r0, #0
 800ee88:	e78d      	b.n	800eda6 <xQueueGenericSend+0xa4>

0800ee8a <xQueueGenericSendFromISR>:
{
 800ee8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ee8e:	b190      	cbz	r0, 800eeb6 <xQueueGenericSendFromISR+0x2c>
 800ee90:	460f      	mov	r7, r1
 800ee92:	4616      	mov	r6, r2
 800ee94:	461c      	mov	r4, r3
 800ee96:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee98:	b1b1      	cbz	r1, 800eec8 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee9a:	2c02      	cmp	r4, #2
 800ee9c:	d120      	bne.n	800eee0 <xQueueGenericSendFromISR+0x56>
 800ee9e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d01d      	beq.n	800eee0 <xQueueGenericSendFromISR+0x56>
 800eea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	e7fe      	b.n	800eeb4 <xQueueGenericSendFromISR+0x2a>
 800eeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeba:	f383 8811 	msr	BASEPRI, r3
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800eec6:	e7fe      	b.n	800eec6 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eec8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d0e5      	beq.n	800ee9a <xQueueGenericSendFromISR+0x10>
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	e7fe      	b.n	800eede <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eee0:	f7ff fd2e 	bl	800e940 <vPortValidateInterruptPriority>
	__asm volatile
 800eee4:	f3ef 8911 	mrs	r9, BASEPRI
 800eee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeec:	f383 8811 	msr	BASEPRI, r3
 800eef0:	f3bf 8f6f 	isb	sy
 800eef4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eef8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800eefa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d306      	bcc.n	800ef0e <xQueueGenericSendFromISR+0x84>
 800ef00:	2c02      	cmp	r4, #2
 800ef02:	d004      	beq.n	800ef0e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800ef04:	2000      	movs	r0, #0
	__asm volatile
 800ef06:	f389 8811 	msr	BASEPRI, r9
}
 800ef0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef0e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800ef12:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef16:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef18:	4622      	mov	r2, r4
 800ef1a:	4639      	mov	r1, r7
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	f7ff fd61 	bl	800e9e4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800ef22:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ef26:	d006      	beq.n	800ef36 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ef28:	f108 0301 	add.w	r3, r8, #1
 800ef2c:	b25b      	sxtb	r3, r3
 800ef2e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800ef32:	2001      	movs	r0, #1
 800ef34:	e7e7      	b.n	800ef06 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef38:	b90b      	cbnz	r3, 800ef3e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800ef3a:	2001      	movs	r0, #1
 800ef3c:	e7e3      	b.n	800ef06 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef3e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800ef42:	f000 fea7 	bl	800fc94 <xTaskRemoveFromEventList>
 800ef46:	b118      	cbz	r0, 800ef50 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800ef48:	b126      	cbz	r6, 800ef54 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef4a:	2001      	movs	r0, #1
 800ef4c:	6030      	str	r0, [r6, #0]
 800ef4e:	e7da      	b.n	800ef06 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800ef50:	2001      	movs	r0, #1
 800ef52:	e7d8      	b.n	800ef06 <xQueueGenericSendFromISR+0x7c>
 800ef54:	2001      	movs	r0, #1
 800ef56:	e7d6      	b.n	800ef06 <xQueueGenericSendFromISR+0x7c>

0800ef58 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800ef58:	b168      	cbz	r0, 800ef76 <xQueueGiveFromISR+0x1e>
{
 800ef5a:	b570      	push	{r4, r5, r6, lr}
 800ef5c:	460c      	mov	r4, r1
 800ef5e:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef60:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ef62:	b18b      	cbz	r3, 800ef88 <xQueueGiveFromISR+0x30>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	e7fe      	b.n	800ef74 <xQueueGiveFromISR+0x1c>
 800ef76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7a:	f383 8811 	msr	BASEPRI, r3
 800ef7e:	f3bf 8f6f 	isb	sy
 800ef82:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ef86:	e7fe      	b.n	800ef86 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ef88:	6803      	ldr	r3, [r0, #0]
 800ef8a:	b1eb      	cbz	r3, 800efc8 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef8c:	f7ff fcd8 	bl	800e940 <vPortValidateInterruptPriority>
	__asm volatile
 800ef90:	f3ef 8611 	mrs	r6, BASEPRI
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efa4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800efa6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d926      	bls.n	800effa <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800efac:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800efb0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800efb2:	3201      	adds	r2, #1
 800efb4:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800efb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efba:	d011      	beq.n	800efe0 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800efbc:	3301      	adds	r3, #1
 800efbe:	b25b      	sxtb	r3, r3
 800efc0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800efc4:	2001      	movs	r0, #1
 800efc6:	e019      	b.n	800effc <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800efc8:	6883      	ldr	r3, [r0, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d0de      	beq.n	800ef8c <xQueueGiveFromISR+0x34>
	__asm volatile
 800efce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	e7fe      	b.n	800efde <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efe0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800efe2:	b90b      	cbnz	r3, 800efe8 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800efe4:	2001      	movs	r0, #1
 800efe6:	e009      	b.n	800effc <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efe8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800efec:	f000 fe52 	bl	800fc94 <xTaskRemoveFromEventList>
 800eff0:	b138      	cbz	r0, 800f002 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800eff2:	b144      	cbz	r4, 800f006 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eff4:	2001      	movs	r0, #1
 800eff6:	6020      	str	r0, [r4, #0]
 800eff8:	e000      	b.n	800effc <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800effa:	2000      	movs	r0, #0
	__asm volatile
 800effc:	f386 8811 	msr	BASEPRI, r6
}
 800f000:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800f002:	2001      	movs	r0, #1
 800f004:	e7fa      	b.n	800effc <xQueueGiveFromISR+0xa4>
 800f006:	2001      	movs	r0, #1
 800f008:	e7f8      	b.n	800effc <xQueueGiveFromISR+0xa4>

0800f00a <xQueueReceive>:
{
 800f00a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f00c:	b085      	sub	sp, #20
 800f00e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f010:	b190      	cbz	r0, 800f038 <xQueueReceive+0x2e>
 800f012:	460f      	mov	r7, r1
 800f014:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f016:	b1c1      	cbz	r1, 800f04a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f018:	f000 fed6 	bl	800fdc8 <xTaskGetSchedulerState>
 800f01c:	4606      	mov	r6, r0
 800f01e:	bb00      	cbnz	r0, 800f062 <xQueueReceive+0x58>
 800f020:	9b01      	ldr	r3, [sp, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d05e      	beq.n	800f0e4 <xQueueReceive+0xda>
	__asm volatile
 800f026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02a:	f383 8811 	msr	BASEPRI, r3
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	f3bf 8f4f 	dsb	sy
 800f036:	e7fe      	b.n	800f036 <xQueueReceive+0x2c>
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800f048:	e7fe      	b.n	800f048 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f04a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d0e3      	beq.n	800f018 <xQueueReceive+0xe>
 800f050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	e7fe      	b.n	800f060 <xQueueReceive+0x56>
 800f062:	2600      	movs	r6, #0
 800f064:	e03e      	b.n	800f0e4 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f066:	4639      	mov	r1, r7
 800f068:	4620      	mov	r0, r4
 800f06a:	f7ff fcf6 	bl	800ea5a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f06e:	3d01      	subs	r5, #1
 800f070:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f072:	6923      	ldr	r3, [r4, #16]
 800f074:	b923      	cbnz	r3, 800f080 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800f076:	f7ff fb5f 	bl	800e738 <vPortExitCritical>
				return pdPASS;
 800f07a:	2001      	movs	r0, #1
}
 800f07c:	b005      	add	sp, #20
 800f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f080:	f104 0010 	add.w	r0, r4, #16
 800f084:	f000 fe06 	bl	800fc94 <xTaskRemoveFromEventList>
 800f088:	2800      	cmp	r0, #0
 800f08a:	d0f4      	beq.n	800f076 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800f08c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f094:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	e7e9      	b.n	800f076 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800f0a2:	f7ff fb49 	bl	800e738 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	e7e8      	b.n	800f07c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0aa:	a802      	add	r0, sp, #8
 800f0ac:	f000 fe38 	bl	800fd20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0b0:	2601      	movs	r6, #1
 800f0b2:	e021      	b.n	800f0f8 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f0ba:	e029      	b.n	800f110 <xQueueReceive+0x106>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0c2:	e02b      	b.n	800f11c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f7ff fcda 	bl	800ea7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0ca:	f000 fce3 	bl	800fa94 <xTaskResumeAll>
 800f0ce:	e009      	b.n	800f0e4 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f7ff fcd4 	bl	800ea7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0d6:	f000 fcdd 	bl	800fa94 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f7ff fc75 	bl	800e9ca <prvIsQueueEmpty>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	d13f      	bne.n	800f164 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800f0e4:	f7ff fb06 	bl	800e6f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0ea:	2d00      	cmp	r5, #0
 800f0ec:	d1bb      	bne.n	800f066 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0ee:	9b01      	ldr	r3, [sp, #4]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d0d6      	beq.n	800f0a2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800f0f4:	2e00      	cmp	r6, #0
 800f0f6:	d0d8      	beq.n	800f0aa <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800f0f8:	f7ff fb1e 	bl	800e738 <vPortExitCritical>
		vTaskSuspendAll();
 800f0fc:	f000 fc30 	bl	800f960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f100:	f7ff faf8 	bl	800e6f4 <vPortEnterCritical>
 800f104:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f108:	b25b      	sxtb	r3, r3
 800f10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f10e:	d0d1      	beq.n	800f0b4 <xQueueReceive+0xaa>
 800f110:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f114:	b25b      	sxtb	r3, r3
 800f116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11a:	d0cf      	beq.n	800f0bc <xQueueReceive+0xb2>
 800f11c:	f7ff fb0c 	bl	800e738 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f120:	a901      	add	r1, sp, #4
 800f122:	a802      	add	r0, sp, #8
 800f124:	f000 fe08 	bl	800fd38 <xTaskCheckForTimeOut>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1d1      	bne.n	800f0d0 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f12c:	4620      	mov	r0, r4
 800f12e:	f7ff fc4c 	bl	800e9ca <prvIsQueueEmpty>
 800f132:	2800      	cmp	r0, #0
 800f134:	d0c6      	beq.n	800f0c4 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f136:	9901      	ldr	r1, [sp, #4]
 800f138:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f13c:	f000 fd76 	bl	800fc2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f140:	4620      	mov	r0, r4
 800f142:	f7ff fc9c 	bl	800ea7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f146:	f000 fca5 	bl	800fa94 <xTaskResumeAll>
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d1ca      	bne.n	800f0e4 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800f14e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f156:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	e7bf      	b.n	800f0e4 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800f164:	2000      	movs	r0, #0
 800f166:	e789      	b.n	800f07c <xQueueReceive+0x72>

0800f168 <xQueueSemaphoreTake>:
{
 800f168:	b570      	push	{r4, r5, r6, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f16e:	b158      	cbz	r0, 800f188 <xQueueSemaphoreTake+0x20>
 800f170:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800f172:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f174:	b18b      	cbz	r3, 800f19a <xQueueSemaphoreTake+0x32>
 800f176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	e7fe      	b.n	800f186 <xQueueSemaphoreTake+0x1e>
 800f188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800f198:	e7fe      	b.n	800f198 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f19a:	f000 fe15 	bl	800fdc8 <xTaskGetSchedulerState>
 800f19e:	4605      	mov	r5, r0
 800f1a0:	b950      	cbnz	r0, 800f1b8 <xQueueSemaphoreTake+0x50>
 800f1a2:	9b01      	ldr	r3, [sp, #4]
 800f1a4:	b15b      	cbz	r3, 800f1be <xQueueSemaphoreTake+0x56>
 800f1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	e7fe      	b.n	800f1b6 <xQueueSemaphoreTake+0x4e>
 800f1b8:	2600      	movs	r6, #0
 800f1ba:	4635      	mov	r5, r6
 800f1bc:	e055      	b.n	800f26a <xQueueSemaphoreTake+0x102>
 800f1be:	4606      	mov	r6, r0
 800f1c0:	e053      	b.n	800f26a <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	b13b      	cbz	r3, 800f1da <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1ca:	6923      	ldr	r3, [r4, #16]
 800f1cc:	b94b      	cbnz	r3, 800f1e2 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800f1ce:	f7ff fab3 	bl	800e738 <vPortExitCritical>
				return pdPASS;
 800f1d2:	2601      	movs	r6, #1
}
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	b004      	add	sp, #16
 800f1d8:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f1da:	f000 fee9 	bl	800ffb0 <pvTaskIncrementMutexHeldCount>
 800f1de:	60a0      	str	r0, [r4, #8]
 800f1e0:	e7f3      	b.n	800f1ca <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1e2:	f104 0010 	add.w	r0, r4, #16
 800f1e6:	f000 fd55 	bl	800fc94 <xTaskRemoveFromEventList>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d0ef      	beq.n	800f1ce <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800f1ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f1fa:	f3bf 8f4f 	dsb	sy
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	e7e4      	b.n	800f1ce <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f204:	b146      	cbz	r6, 800f218 <xQueueSemaphoreTake+0xb0>
 800f206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	e7fe      	b.n	800f216 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800f218:	f7ff fa8e 	bl	800e738 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f21c:	e7da      	b.n	800f1d4 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f21e:	a802      	add	r0, sp, #8
 800f220:	f000 fd7e 	bl	800fd20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f224:	2501      	movs	r5, #1
 800f226:	e02a      	b.n	800f27e <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800f228:	2300      	movs	r3, #0
 800f22a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f22e:	e032      	b.n	800f296 <xQueueSemaphoreTake+0x12e>
 800f230:	2300      	movs	r3, #0
 800f232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f236:	e034      	b.n	800f2a2 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800f238:	f7ff fa5c 	bl	800e6f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f23c:	68a0      	ldr	r0, [r4, #8]
 800f23e:	f000 fdd3 	bl	800fde8 <xTaskPriorityInherit>
 800f242:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800f244:	f7ff fa78 	bl	800e738 <vPortExitCritical>
 800f248:	e03b      	b.n	800f2c2 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800f24a:	4620      	mov	r0, r4
 800f24c:	f7ff fc17 	bl	800ea7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f250:	f000 fc20 	bl	800fa94 <xTaskResumeAll>
 800f254:	e009      	b.n	800f26a <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800f256:	4620      	mov	r0, r4
 800f258:	f7ff fc11 	bl	800ea7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f25c:	f000 fc1a 	bl	800fa94 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f260:	4620      	mov	r0, r4
 800f262:	f7ff fbb2 	bl	800e9ca <prvIsQueueEmpty>
 800f266:	2800      	cmp	r0, #0
 800f268:	d142      	bne.n	800f2f0 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800f26a:	f7ff fa43 	bl	800e6f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f26e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f270:	2b00      	cmp	r3, #0
 800f272:	d1a6      	bne.n	800f1c2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f274:	9b01      	ldr	r3, [sp, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d0c4      	beq.n	800f204 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800f27a:	2d00      	cmp	r5, #0
 800f27c:	d0cf      	beq.n	800f21e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800f27e:	f7ff fa5b 	bl	800e738 <vPortExitCritical>
		vTaskSuspendAll();
 800f282:	f000 fb6d 	bl	800f960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f286:	f7ff fa35 	bl	800e6f4 <vPortEnterCritical>
 800f28a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f28e:	b25b      	sxtb	r3, r3
 800f290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f294:	d0c8      	beq.n	800f228 <xQueueSemaphoreTake+0xc0>
 800f296:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f29a:	b25b      	sxtb	r3, r3
 800f29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a0:	d0c6      	beq.n	800f230 <xQueueSemaphoreTake+0xc8>
 800f2a2:	f7ff fa49 	bl	800e738 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2a6:	a901      	add	r1, sp, #4
 800f2a8:	a802      	add	r0, sp, #8
 800f2aa:	f000 fd45 	bl	800fd38 <xTaskCheckForTimeOut>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d1d1      	bne.n	800f256 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	f7ff fb89 	bl	800e9ca <prvIsQueueEmpty>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d0c6      	beq.n	800f24a <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2bc:	6823      	ldr	r3, [r4, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d0ba      	beq.n	800f238 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2c2:	9901      	ldr	r1, [sp, #4]
 800f2c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f2c8:	f000 fcb0 	bl	800fc2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f7ff fbd6 	bl	800ea7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2d2:	f000 fbdf 	bl	800fa94 <xTaskResumeAll>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d1c7      	bne.n	800f26a <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800f2da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	f3bf 8f6f 	isb	sy
 800f2ee:	e7bc      	b.n	800f26a <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800f2f0:	b90e      	cbnz	r6, 800f2f6 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800f2f2:	2600      	movs	r6, #0
 800f2f4:	e76e      	b.n	800f1d4 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800f2f6:	f7ff f9fd 	bl	800e6f4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f7ff fb4e 	bl	800e99c <prvGetDisinheritPriorityAfterTimeout>
 800f300:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f302:	68a0      	ldr	r0, [r4, #8]
 800f304:	f000 fe04 	bl	800ff10 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800f308:	f7ff fa16 	bl	800e738 <vPortExitCritical>
 800f30c:	e7f1      	b.n	800f2f2 <xQueueSemaphoreTake+0x18a>

0800f30e <xQueueReceiveFromISR>:
{
 800f30e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800f312:	b1b0      	cbz	r0, 800f342 <xQueueReceiveFromISR+0x34>
 800f314:	460d      	mov	r5, r1
 800f316:	4616      	mov	r6, r2
 800f318:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f31a:	b1d9      	cbz	r1, 800f354 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f31c:	f7ff fb10 	bl	800e940 <vPortValidateInterruptPriority>
	__asm volatile
 800f320:	f3ef 8811 	mrs	r8, BASEPRI
 800f324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f334:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f336:	b9cf      	cbnz	r7, 800f36c <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800f338:	2000      	movs	r0, #0
	__asm volatile
 800f33a:	f388 8811 	msr	BASEPRI, r8
}
 800f33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800f352:	e7fe      	b.n	800f352 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f354:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f356:	2b00      	cmp	r3, #0
 800f358:	d0e0      	beq.n	800f31c <xQueueReceiveFromISR+0xe>
 800f35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35e:	f383 8811 	msr	BASEPRI, r3
 800f362:	f3bf 8f6f 	isb	sy
 800f366:	f3bf 8f4f 	dsb	sy
 800f36a:	e7fe      	b.n	800f36a <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800f36c:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800f370:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f374:	4629      	mov	r1, r5
 800f376:	4620      	mov	r0, r4
 800f378:	f7ff fb6f 	bl	800ea5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f37c:	3f01      	subs	r7, #1
 800f37e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800f380:	f1b9 3fff 	cmp.w	r9, #4294967295
 800f384:	d006      	beq.n	800f394 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f386:	f109 0301 	add.w	r3, r9, #1
 800f38a:	b25b      	sxtb	r3, r3
 800f38c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f390:	2001      	movs	r0, #1
 800f392:	e7d2      	b.n	800f33a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f394:	6923      	ldr	r3, [r4, #16]
 800f396:	b90b      	cbnz	r3, 800f39c <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800f398:	2001      	movs	r0, #1
 800f39a:	e7ce      	b.n	800f33a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f39c:	f104 0010 	add.w	r0, r4, #16
 800f3a0:	f000 fc78 	bl	800fc94 <xTaskRemoveFromEventList>
 800f3a4:	b118      	cbz	r0, 800f3ae <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800f3a6:	b126      	cbz	r6, 800f3b2 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f3a8:	2001      	movs	r0, #1
 800f3aa:	6030      	str	r0, [r6, #0]
 800f3ac:	e7c5      	b.n	800f33a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800f3ae:	2001      	movs	r0, #1
 800f3b0:	e7c3      	b.n	800f33a <xQueueReceiveFromISR+0x2c>
 800f3b2:	2001      	movs	r0, #1
 800f3b4:	e7c1      	b.n	800f33a <xQueueReceiveFromISR+0x2c>
	...

0800f3b8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	2b07      	cmp	r3, #7
 800f3bc:	d80c      	bhi.n	800f3d8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f3be:	4a07      	ldr	r2, [pc, #28]	; (800f3dc <vQueueAddToRegistry+0x24>)
 800f3c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f3c4:	b10a      	cbz	r2, 800f3ca <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	e7f7      	b.n	800f3ba <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f3ca:	4a04      	ldr	r2, [pc, #16]	; (800f3dc <vQueueAddToRegistry+0x24>)
 800f3cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f3d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f3d4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f3d6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	2400c0d8 	.word	0x2400c0d8

0800f3e0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	2b07      	cmp	r3, #7
 800f3e4:	d80f      	bhi.n	800f406 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f3e6:	4a08      	ldr	r2, [pc, #32]	; (800f408 <vQueueUnregisterQueue+0x28>)
 800f3e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f3ec:	6852      	ldr	r2, [r2, #4]
 800f3ee:	4282      	cmp	r2, r0
 800f3f0:	d001      	beq.n	800f3f6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	e7f5      	b.n	800f3e2 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f3f6:	4a04      	ldr	r2, [pc, #16]	; (800f408 <vQueueUnregisterQueue+0x28>)
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f3fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f402:	6059      	str	r1, [r3, #4]
				break;
 800f404:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f406:	4770      	bx	lr
 800f408:	2400c0d8 	.word	0x2400c0d8

0800f40c <vQueueDelete>:
	configASSERT( pxQueue );
 800f40c:	b138      	cbz	r0, 800f41e <vQueueDelete+0x12>
{
 800f40e:	b510      	push	{r4, lr}
 800f410:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800f412:	f7ff ffe5 	bl	800f3e0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f416:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f41a:	b14b      	cbz	r3, 800f430 <vQueueDelete+0x24>
}
 800f41c:	bd10      	pop	{r4, pc}
 800f41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f422:	f383 8811 	msr	BASEPRI, r3
 800f426:	f3bf 8f6f 	isb	sy
 800f42a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800f42e:	e7fe      	b.n	800f42e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800f430:	4620      	mov	r0, r4
 800f432:	f7ff f871 	bl	800e518 <vPortFree>
}
 800f436:	e7f1      	b.n	800f41c <vQueueDelete+0x10>

0800f438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f438:	b570      	push	{r4, r5, r6, lr}
 800f43a:	4604      	mov	r4, r0
 800f43c:	460d      	mov	r5, r1
 800f43e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f440:	f7ff f958 	bl	800e6f4 <vPortEnterCritical>
 800f444:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f448:	b25b      	sxtb	r3, r3
 800f44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44e:	d00d      	beq.n	800f46c <vQueueWaitForMessageRestricted+0x34>
 800f450:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f454:	b25b      	sxtb	r3, r3
 800f456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f45a:	d00b      	beq.n	800f474 <vQueueWaitForMessageRestricted+0x3c>
 800f45c:	f7ff f96c 	bl	800e738 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f462:	b15b      	cbz	r3, 800f47c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f464:	4620      	mov	r0, r4
 800f466:	f7ff fb0a 	bl	800ea7e <prvUnlockQueue>
	}
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f46c:	2300      	movs	r3, #0
 800f46e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f472:	e7ed      	b.n	800f450 <vQueueWaitForMessageRestricted+0x18>
 800f474:	2300      	movs	r3, #0
 800f476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f47a:	e7ef      	b.n	800f45c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f47c:	4632      	mov	r2, r6
 800f47e:	4629      	mov	r1, r5
 800f480:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f484:	f000 fbea 	bl	800fc5c <vTaskPlaceOnEventListRestricted>
 800f488:	e7ec      	b.n	800f464 <vQueueWaitForMessageRestricted+0x2c>
	...

0800f48c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f48c:	4b08      	ldr	r3, [pc, #32]	; (800f4b0 <prvResetNextTaskUnblockTime+0x24>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	b923      	cbnz	r3, 800f49e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f494:	4b07      	ldr	r3, [pc, #28]	; (800f4b4 <prvResetNextTaskUnblockTime+0x28>)
 800f496:	f04f 32ff 	mov.w	r2, #4294967295
 800f49a:	601a      	str	r2, [r3, #0]
 800f49c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f49e:	4b04      	ldr	r3, [pc, #16]	; (800f4b0 <prvResetNextTaskUnblockTime+0x24>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	4b02      	ldr	r3, [pc, #8]	; (800f4b4 <prvResetNextTaskUnblockTime+0x28>)
 800f4aa:	601a      	str	r2, [r3, #0]
	}
}
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	2400c11c 	.word	0x2400c11c
 800f4b4:	2400c5c4 	.word	0x2400c5c4

0800f4b8 <prvInitialiseNewTask>:
{
 800f4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4bc:	4680      	mov	r8, r0
 800f4be:	460d      	mov	r5, r1
 800f4c0:	4617      	mov	r7, r2
 800f4c2:	4699      	mov	r9, r3
 800f4c4:	9e08      	ldr	r6, [sp, #32]
 800f4c6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f4ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f4cc:	0092      	lsls	r2, r2, #2
 800f4ce:	21a5      	movs	r1, #165	; 0xa5
 800f4d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f4d2:	f011 f92b 	bl	802072c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f4d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f4d8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800f4dc:	443a      	add	r2, r7
 800f4de:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f4e2:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800f4e6:	2d00      	cmp	r5, #0
 800f4e8:	d043      	beq.n	800f572 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f4ea:	f04f 0c00 	mov.w	ip, #0
 800f4ee:	f1bc 0f0f 	cmp.w	ip, #15
 800f4f2:	d80b      	bhi.n	800f50c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f4f4:	f815 200c 	ldrb.w	r2, [r5, ip]
 800f4f8:	eb04 030c 	add.w	r3, r4, ip
 800f4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800f500:	f815 300c 	ldrb.w	r3, [r5, ip]
 800f504:	b113      	cbz	r3, 800f50c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f506:	f10c 0c01 	add.w	ip, ip, #1
 800f50a:	e7f0      	b.n	800f4ee <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f50c:	2300      	movs	r3, #0
 800f50e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f512:	2e37      	cmp	r6, #55	; 0x37
 800f514:	d900      	bls.n	800f518 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f516:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800f518:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800f51a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f51c:	2500      	movs	r5, #0
 800f51e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f520:	1d20      	adds	r0, r4, #4
 800f522:	f7ff f842 	bl	800e5aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f526:	f104 0018 	add.w	r0, r4, #24
 800f52a:	f7ff f83e 	bl	800e5aa <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f52e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f530:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800f534:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f536:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800f538:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f53c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f540:	2260      	movs	r2, #96	; 0x60
 800f542:	4629      	mov	r1, r5
 800f544:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800f548:	f011 f8f0 	bl	802072c <memset>
 800f54c:	4b0b      	ldr	r3, [pc, #44]	; (800f57c <prvInitialiseNewTask+0xc4>)
 800f54e:	65a3      	str	r3, [r4, #88]	; 0x58
 800f550:	4b0b      	ldr	r3, [pc, #44]	; (800f580 <prvInitialiseNewTask+0xc8>)
 800f552:	65e3      	str	r3, [r4, #92]	; 0x5c
 800f554:	4b0b      	ldr	r3, [pc, #44]	; (800f584 <prvInitialiseNewTask+0xcc>)
 800f556:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f558:	464a      	mov	r2, r9
 800f55a:	4641      	mov	r1, r8
 800f55c:	4638      	mov	r0, r7
 800f55e:	f7ff f89d 	bl	800e69c <pxPortInitialiseStack>
 800f562:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800f564:	f1ba 0f00 	cmp.w	sl, #0
 800f568:	d001      	beq.n	800f56e <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f56a:	f8ca 4000 	str.w	r4, [sl]
}
 800f56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f572:	2300      	movs	r3, #0
 800f574:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800f578:	e7cb      	b.n	800f512 <prvInitialiseNewTask+0x5a>
 800f57a:	bf00      	nop
 800f57c:	08023d60 	.word	0x08023d60
 800f580:	08023d80 	.word	0x08023d80
 800f584:	08023d40 	.word	0x08023d40

0800f588 <prvInitialiseTaskLists>:
{
 800f588:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f58a:	2400      	movs	r4, #0
 800f58c:	e007      	b.n	800f59e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f58e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800f592:	0093      	lsls	r3, r2, #2
 800f594:	480e      	ldr	r0, [pc, #56]	; (800f5d0 <prvInitialiseTaskLists+0x48>)
 800f596:	4418      	add	r0, r3
 800f598:	f7fe fffc 	bl	800e594 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f59c:	3401      	adds	r4, #1
 800f59e:	2c37      	cmp	r4, #55	; 0x37
 800f5a0:	d9f5      	bls.n	800f58e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800f5a2:	4d0c      	ldr	r5, [pc, #48]	; (800f5d4 <prvInitialiseTaskLists+0x4c>)
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	f7fe fff5 	bl	800e594 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f5aa:	4c0b      	ldr	r4, [pc, #44]	; (800f5d8 <prvInitialiseTaskLists+0x50>)
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f7fe fff1 	bl	800e594 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f5b2:	480a      	ldr	r0, [pc, #40]	; (800f5dc <prvInitialiseTaskLists+0x54>)
 800f5b4:	f7fe ffee 	bl	800e594 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f5b8:	4809      	ldr	r0, [pc, #36]	; (800f5e0 <prvInitialiseTaskLists+0x58>)
 800f5ba:	f7fe ffeb 	bl	800e594 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f5be:	4809      	ldr	r0, [pc, #36]	; (800f5e4 <prvInitialiseTaskLists+0x5c>)
 800f5c0:	f7fe ffe8 	bl	800e594 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f5c4:	4b08      	ldr	r3, [pc, #32]	; (800f5e8 <prvInitialiseTaskLists+0x60>)
 800f5c6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f5c8:	4b08      	ldr	r3, [pc, #32]	; (800f5ec <prvInitialiseTaskLists+0x64>)
 800f5ca:	601c      	str	r4, [r3, #0]
}
 800f5cc:	bd38      	pop	{r3, r4, r5, pc}
 800f5ce:	bf00      	nop
 800f5d0:	2400c124 	.word	0x2400c124
 800f5d4:	2400c598 	.word	0x2400c598
 800f5d8:	2400c5ac 	.word	0x2400c5ac
 800f5dc:	2400c5d0 	.word	0x2400c5d0
 800f5e0:	2400c5fc 	.word	0x2400c5fc
 800f5e4:	2400c5e8 	.word	0x2400c5e8
 800f5e8:	2400c11c 	.word	0x2400c11c
 800f5ec:	2400c120 	.word	0x2400c120

0800f5f0 <prvAddNewTaskToReadyList>:
{
 800f5f0:	b510      	push	{r4, lr}
 800f5f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800f5f4:	f7ff f87e 	bl	800e6f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800f5f8:	4a22      	ldr	r2, [pc, #136]	; (800f684 <prvAddNewTaskToReadyList+0x94>)
 800f5fa:	6813      	ldr	r3, [r2, #0]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f600:	4b21      	ldr	r3, [pc, #132]	; (800f688 <prvAddNewTaskToReadyList+0x98>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	b15b      	cbz	r3, 800f61e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800f606:	4b21      	ldr	r3, [pc, #132]	; (800f68c <prvAddNewTaskToReadyList+0x9c>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	b96b      	cbnz	r3, 800f628 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f60c:	4b1e      	ldr	r3, [pc, #120]	; (800f688 <prvAddNewTaskToReadyList+0x98>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f612:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f614:	429a      	cmp	r2, r3
 800f616:	d807      	bhi.n	800f628 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800f618:	4b1b      	ldr	r3, [pc, #108]	; (800f688 <prvAddNewTaskToReadyList+0x98>)
 800f61a:	601c      	str	r4, [r3, #0]
 800f61c:	e004      	b.n	800f628 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800f61e:	4b1a      	ldr	r3, [pc, #104]	; (800f688 <prvAddNewTaskToReadyList+0x98>)
 800f620:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f622:	6813      	ldr	r3, [r2, #0]
 800f624:	2b01      	cmp	r3, #1
 800f626:	d029      	beq.n	800f67c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800f628:	4a19      	ldr	r2, [pc, #100]	; (800f690 <prvAddNewTaskToReadyList+0xa0>)
 800f62a:	6813      	ldr	r3, [r2, #0]
 800f62c:	3301      	adds	r3, #1
 800f62e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f630:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800f632:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f634:	4b17      	ldr	r3, [pc, #92]	; (800f694 <prvAddNewTaskToReadyList+0xa4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4298      	cmp	r0, r3
 800f63a:	d901      	bls.n	800f640 <prvAddNewTaskToReadyList+0x50>
 800f63c:	4b15      	ldr	r3, [pc, #84]	; (800f694 <prvAddNewTaskToReadyList+0xa4>)
 800f63e:	6018      	str	r0, [r3, #0]
 800f640:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f644:	1d21      	adds	r1, r4, #4
 800f646:	4b14      	ldr	r3, [pc, #80]	; (800f698 <prvAddNewTaskToReadyList+0xa8>)
 800f648:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f64c:	f7fe ffb0 	bl	800e5b0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800f650:	f7ff f872 	bl	800e738 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800f654:	4b0d      	ldr	r3, [pc, #52]	; (800f68c <prvAddNewTaskToReadyList+0x9c>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	b17b      	cbz	r3, 800f67a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f65a:	4b0b      	ldr	r3, [pc, #44]	; (800f688 <prvAddNewTaskToReadyList+0x98>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f660:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f662:	429a      	cmp	r2, r3
 800f664:	d209      	bcs.n	800f67a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800f666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f66e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	f3bf 8f6f 	isb	sy
}
 800f67a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800f67c:	f7ff ff84 	bl	800f588 <prvInitialiseTaskLists>
 800f680:	e7d2      	b.n	800f628 <prvAddNewTaskToReadyList+0x38>
 800f682:	bf00      	nop
 800f684:	2400c584 	.word	0x2400c584
 800f688:	2400c118 	.word	0x2400c118
 800f68c:	2400c5e4 	.word	0x2400c5e4
 800f690:	2400c590 	.word	0x2400c590
 800f694:	2400c594 	.word	0x2400c594
 800f698:	2400c124 	.word	0x2400c124

0800f69c <prvDeleteTCB>:
	{
 800f69c:	b510      	push	{r4, lr}
 800f69e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f6a0:	3054      	adds	r0, #84	; 0x54
 800f6a2:	f011 fc27 	bl	8020ef4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f6a6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800f6aa:	b163      	cbz	r3, 800f6c6 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d011      	beq.n	800f6d4 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d00e      	beq.n	800f6d2 <prvDeleteTCB+0x36>
 800f6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	e7fe      	b.n	800f6c4 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800f6c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f6c8:	f7fe ff26 	bl	800e518 <vPortFree>
				vPortFree( pxTCB );
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f7fe ff23 	bl	800e518 <vPortFree>
	}
 800f6d2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	f7fe ff1f 	bl	800e518 <vPortFree>
 800f6da:	e7fa      	b.n	800f6d2 <prvDeleteTCB+0x36>

0800f6dc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6dc:	4b0f      	ldr	r3, [pc, #60]	; (800f71c <prvCheckTasksWaitingTermination+0x40>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	b1d3      	cbz	r3, 800f718 <prvCheckTasksWaitingTermination+0x3c>
{
 800f6e2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800f6e4:	f7ff f806 	bl	800e6f4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6e8:	4b0d      	ldr	r3, [pc, #52]	; (800f720 <prvCheckTasksWaitingTermination+0x44>)
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6ee:	1d20      	adds	r0, r4, #4
 800f6f0:	f7fe ff82 	bl	800e5f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6f4:	4a0b      	ldr	r2, [pc, #44]	; (800f724 <prvCheckTasksWaitingTermination+0x48>)
 800f6f6:	6813      	ldr	r3, [r2, #0]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6fc:	4a07      	ldr	r2, [pc, #28]	; (800f71c <prvCheckTasksWaitingTermination+0x40>)
 800f6fe:	6813      	ldr	r3, [r2, #0]
 800f700:	3b01      	subs	r3, #1
 800f702:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800f704:	f7ff f818 	bl	800e738 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800f708:	4620      	mov	r0, r4
 800f70a:	f7ff ffc7 	bl	800f69c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f70e:	4b03      	ldr	r3, [pc, #12]	; (800f71c <prvCheckTasksWaitingTermination+0x40>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1e6      	bne.n	800f6e4 <prvCheckTasksWaitingTermination+0x8>
}
 800f716:	bd10      	pop	{r4, pc}
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	2400c588 	.word	0x2400c588
 800f720:	2400c5fc 	.word	0x2400c5fc
 800f724:	2400c584 	.word	0x2400c584

0800f728 <prvIdleTask>:
{
 800f728:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800f72a:	f7ff ffd7 	bl	800f6dc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f72e:	4b07      	ldr	r3, [pc, #28]	; (800f74c <prvIdleTask+0x24>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b01      	cmp	r3, #1
 800f734:	d9f9      	bls.n	800f72a <prvIdleTask+0x2>
				taskYIELD();
 800f736:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f73e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f742:	f3bf 8f4f 	dsb	sy
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	e7ee      	b.n	800f72a <prvIdleTask+0x2>
 800f74c:	2400c124 	.word	0x2400c124

0800f750 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f750:	b570      	push	{r4, r5, r6, lr}
 800f752:	4604      	mov	r4, r0
 800f754:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f756:	4b19      	ldr	r3, [pc, #100]	; (800f7bc <prvAddCurrentTaskToDelayedList+0x6c>)
 800f758:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f75a:	4b19      	ldr	r3, [pc, #100]	; (800f7c0 <prvAddCurrentTaskToDelayedList+0x70>)
 800f75c:	6818      	ldr	r0, [r3, #0]
 800f75e:	3004      	adds	r0, #4
 800f760:	f7fe ff4a 	bl	800e5f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f764:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f768:	bf14      	ite	ne
 800f76a:	2300      	movne	r3, #0
 800f76c:	2301      	moveq	r3, #1
 800f76e:	2d00      	cmp	r5, #0
 800f770:	bf08      	it	eq
 800f772:	2300      	moveq	r3, #0
 800f774:	b96b      	cbnz	r3, 800f792 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f776:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f778:	4b11      	ldr	r3, [pc, #68]	; (800f7c0 <prvAddCurrentTaskToDelayedList+0x70>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800f77e:	42a6      	cmp	r6, r4
 800f780:	d90e      	bls.n	800f7a0 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f782:	4b10      	ldr	r3, [pc, #64]	; (800f7c4 <prvAddCurrentTaskToDelayedList+0x74>)
 800f784:	6818      	ldr	r0, [r3, #0]
 800f786:	4b0e      	ldr	r3, [pc, #56]	; (800f7c0 <prvAddCurrentTaskToDelayedList+0x70>)
 800f788:	6819      	ldr	r1, [r3, #0]
 800f78a:	3104      	adds	r1, #4
 800f78c:	f7fe ff1b 	bl	800e5c6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f790:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f792:	4b0b      	ldr	r3, [pc, #44]	; (800f7c0 <prvAddCurrentTaskToDelayedList+0x70>)
 800f794:	6819      	ldr	r1, [r3, #0]
 800f796:	3104      	adds	r1, #4
 800f798:	480b      	ldr	r0, [pc, #44]	; (800f7c8 <prvAddCurrentTaskToDelayedList+0x78>)
 800f79a:	f7fe ff09 	bl	800e5b0 <vListInsertEnd>
 800f79e:	e7f7      	b.n	800f790 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7a0:	4b0a      	ldr	r3, [pc, #40]	; (800f7cc <prvAddCurrentTaskToDelayedList+0x7c>)
 800f7a2:	6818      	ldr	r0, [r3, #0]
 800f7a4:	4b06      	ldr	r3, [pc, #24]	; (800f7c0 <prvAddCurrentTaskToDelayedList+0x70>)
 800f7a6:	6819      	ldr	r1, [r3, #0]
 800f7a8:	3104      	adds	r1, #4
 800f7aa:	f7fe ff0c 	bl	800e5c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f7ae:	4b08      	ldr	r3, [pc, #32]	; (800f7d0 <prvAddCurrentTaskToDelayedList+0x80>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	42a3      	cmp	r3, r4
 800f7b4:	d9ec      	bls.n	800f790 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800f7b6:	4b06      	ldr	r3, [pc, #24]	; (800f7d0 <prvAddCurrentTaskToDelayedList+0x80>)
 800f7b8:	601c      	str	r4, [r3, #0]
}
 800f7ba:	e7e9      	b.n	800f790 <prvAddCurrentTaskToDelayedList+0x40>
 800f7bc:	2400c610 	.word	0x2400c610
 800f7c0:	2400c118 	.word	0x2400c118
 800f7c4:	2400c120 	.word	0x2400c120
 800f7c8:	2400c5e8 	.word	0x2400c5e8
 800f7cc:	2400c11c 	.word	0x2400c11c
 800f7d0:	2400c5c4 	.word	0x2400c5c4

0800f7d4 <xTaskCreateStatic>:
	{
 800f7d4:	b530      	push	{r4, r5, lr}
 800f7d6:	b087      	sub	sp, #28
 800f7d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800f7da:	b17c      	cbz	r4, 800f7fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f7dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7de:	b1b5      	cbz	r5, 800f80e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800f7e0:	25bc      	movs	r5, #188	; 0xbc
 800f7e2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f7e4:	9d04      	ldr	r5, [sp, #16]
 800f7e6:	2dbc      	cmp	r5, #188	; 0xbc
 800f7e8:	d01a      	beq.n	800f820 <xTaskCreateStatic+0x4c>
 800f7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	e7fe      	b.n	800f7fa <xTaskCreateStatic+0x26>
 800f7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f800:	f383 8811 	msr	BASEPRI, r3
 800f804:	f3bf 8f6f 	isb	sy
 800f808:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800f80c:	e7fe      	b.n	800f80c <xTaskCreateStatic+0x38>
 800f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800f81e:	e7fe      	b.n	800f81e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f820:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f824:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f826:	2402      	movs	r4, #2
 800f828:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f82c:	2400      	movs	r4, #0
 800f82e:	9403      	str	r4, [sp, #12]
 800f830:	9502      	str	r5, [sp, #8]
 800f832:	ac05      	add	r4, sp, #20
 800f834:	9401      	str	r4, [sp, #4]
 800f836:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f838:	9400      	str	r4, [sp, #0]
 800f83a:	f7ff fe3d 	bl	800f4b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f83e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f840:	f7ff fed6 	bl	800f5f0 <prvAddNewTaskToReadyList>
	}
 800f844:	9805      	ldr	r0, [sp, #20]
 800f846:	b007      	add	sp, #28
 800f848:	bd30      	pop	{r4, r5, pc}

0800f84a <xTaskCreate>:
	{
 800f84a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f84e:	b085      	sub	sp, #20
 800f850:	4607      	mov	r7, r0
 800f852:	4688      	mov	r8, r1
 800f854:	4614      	mov	r4, r2
 800f856:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f858:	0090      	lsls	r0, r2, #2
 800f85a:	f7fe fddf 	bl	800e41c <pvPortMalloc>
			if( pxStack != NULL )
 800f85e:	b300      	cbz	r0, 800f8a2 <xTaskCreate+0x58>
 800f860:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f862:	20bc      	movs	r0, #188	; 0xbc
 800f864:	f7fe fdda 	bl	800e41c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800f868:	4605      	mov	r5, r0
 800f86a:	b1b0      	cbz	r0, 800f89a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800f86c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800f870:	b1e5      	cbz	r5, 800f8ac <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f872:	2300      	movs	r3, #0
 800f874:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f878:	9303      	str	r3, [sp, #12]
 800f87a:	9502      	str	r5, [sp, #8]
 800f87c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f87e:	9301      	str	r3, [sp, #4]
 800f880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	4633      	mov	r3, r6
 800f886:	4622      	mov	r2, r4
 800f888:	4641      	mov	r1, r8
 800f88a:	4638      	mov	r0, r7
 800f88c:	f7ff fe14 	bl	800f4b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f890:	4628      	mov	r0, r5
 800f892:	f7ff fead 	bl	800f5f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f896:	2001      	movs	r0, #1
 800f898:	e005      	b.n	800f8a6 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800f89a:	4648      	mov	r0, r9
 800f89c:	f7fe fe3c 	bl	800e518 <vPortFree>
 800f8a0:	e7e6      	b.n	800f870 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f8a2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800f8a6:	b005      	add	sp, #20
 800f8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800f8b0:	e7f9      	b.n	800f8a6 <xTaskCreate+0x5c>
	...

0800f8b4 <vTaskStartScheduler>:
{
 800f8b4:	b510      	push	{r4, lr}
 800f8b6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f8b8:	2400      	movs	r4, #0
 800f8ba:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f8bc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f8be:	aa07      	add	r2, sp, #28
 800f8c0:	a906      	add	r1, sp, #24
 800f8c2:	a805      	add	r0, sp, #20
 800f8c4:	f7fe fd2e 	bl	800e324 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f8c8:	9b05      	ldr	r3, [sp, #20]
 800f8ca:	9302      	str	r3, [sp, #8]
 800f8cc:	9b06      	ldr	r3, [sp, #24]
 800f8ce:	9301      	str	r3, [sp, #4]
 800f8d0:	9400      	str	r4, [sp, #0]
 800f8d2:	4623      	mov	r3, r4
 800f8d4:	9a07      	ldr	r2, [sp, #28]
 800f8d6:	491a      	ldr	r1, [pc, #104]	; (800f940 <vTaskStartScheduler+0x8c>)
 800f8d8:	481a      	ldr	r0, [pc, #104]	; (800f944 <vTaskStartScheduler+0x90>)
 800f8da:	f7ff ff7b 	bl	800f7d4 <xTaskCreateStatic>
 800f8de:	4b1a      	ldr	r3, [pc, #104]	; (800f948 <vTaskStartScheduler+0x94>)
 800f8e0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800f8e2:	b140      	cbz	r0, 800f8f6 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800f8e4:	f000 fbe2 	bl	80100ac <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f8e8:	2801      	cmp	r0, #1
 800f8ea:	d006      	beq.n	800f8fa <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f8ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f8f0:	d01d      	beq.n	800f92e <vTaskStartScheduler+0x7a>
}
 800f8f2:	b008      	add	sp, #32
 800f8f4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	e7f6      	b.n	800f8e8 <vTaskStartScheduler+0x34>
 800f8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fe:	f383 8811 	msr	BASEPRI, r3
 800f902:	f3bf 8f6f 	isb	sy
 800f906:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f90a:	4b10      	ldr	r3, [pc, #64]	; (800f94c <vTaskStartScheduler+0x98>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	3354      	adds	r3, #84	; 0x54
 800f910:	4a0f      	ldr	r2, [pc, #60]	; (800f950 <vTaskStartScheduler+0x9c>)
 800f912:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800f914:	4b0f      	ldr	r3, [pc, #60]	; (800f954 <vTaskStartScheduler+0xa0>)
 800f916:	f04f 32ff 	mov.w	r2, #4294967295
 800f91a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f91c:	4b0e      	ldr	r3, [pc, #56]	; (800f958 <vTaskStartScheduler+0xa4>)
 800f91e:	2201      	movs	r2, #1
 800f920:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f922:	4b0e      	ldr	r3, [pc, #56]	; (800f95c <vTaskStartScheduler+0xa8>)
 800f924:	2200      	movs	r2, #0
 800f926:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800f928:	f7fe ff7e 	bl	800e828 <xPortStartScheduler>
 800f92c:	e7e1      	b.n	800f8f2 <vTaskStartScheduler+0x3e>
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f93e:	e7fe      	b.n	800f93e <vTaskStartScheduler+0x8a>
 800f940:	08023380 	.word	0x08023380
 800f944:	0800f729 	.word	0x0800f729
 800f948:	2400c5c0 	.word	0x2400c5c0
 800f94c:	2400c118 	.word	0x2400c118
 800f950:	240000dc 	.word	0x240000dc
 800f954:	2400c5c4 	.word	0x2400c5c4
 800f958:	2400c5e4 	.word	0x2400c5e4
 800f95c:	2400c610 	.word	0x2400c610

0800f960 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f960:	4a02      	ldr	r2, [pc, #8]	; (800f96c <vTaskSuspendAll+0xc>)
 800f962:	6813      	ldr	r3, [r2, #0]
 800f964:	3301      	adds	r3, #1
 800f966:	6013      	str	r3, [r2, #0]
}
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	2400c58c 	.word	0x2400c58c

0800f970 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f970:	4b01      	ldr	r3, [pc, #4]	; (800f978 <xTaskGetTickCount+0x8>)
 800f972:	6818      	ldr	r0, [r3, #0]
}
 800f974:	4770      	bx	lr
 800f976:	bf00      	nop
 800f978:	2400c610 	.word	0x2400c610

0800f97c <xTaskIncrementTick>:
{
 800f97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f97e:	4b3a      	ldr	r3, [pc, #232]	; (800fa68 <xTaskIncrementTick+0xec>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d169      	bne.n	800fa5a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f986:	4b39      	ldr	r3, [pc, #228]	; (800fa6c <xTaskIncrementTick+0xf0>)
 800f988:	681d      	ldr	r5, [r3, #0]
 800f98a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800f98c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f98e:	b9c5      	cbnz	r5, 800f9c2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800f990:	4b37      	ldr	r3, [pc, #220]	; (800fa70 <xTaskIncrementTick+0xf4>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	b143      	cbz	r3, 800f9aa <xTaskIncrementTick+0x2e>
 800f998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99c:	f383 8811 	msr	BASEPRI, r3
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	f3bf 8f4f 	dsb	sy
 800f9a8:	e7fe      	b.n	800f9a8 <xTaskIncrementTick+0x2c>
 800f9aa:	4a31      	ldr	r2, [pc, #196]	; (800fa70 <xTaskIncrementTick+0xf4>)
 800f9ac:	6811      	ldr	r1, [r2, #0]
 800f9ae:	4b31      	ldr	r3, [pc, #196]	; (800fa74 <xTaskIncrementTick+0xf8>)
 800f9b0:	6818      	ldr	r0, [r3, #0]
 800f9b2:	6010      	str	r0, [r2, #0]
 800f9b4:	6019      	str	r1, [r3, #0]
 800f9b6:	4a30      	ldr	r2, [pc, #192]	; (800fa78 <xTaskIncrementTick+0xfc>)
 800f9b8:	6813      	ldr	r3, [r2, #0]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	6013      	str	r3, [r2, #0]
 800f9be:	f7ff fd65 	bl	800f48c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f9c2:	4b2e      	ldr	r3, [pc, #184]	; (800fa7c <xTaskIncrementTick+0x100>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	42ab      	cmp	r3, r5
 800f9c8:	d93d      	bls.n	800fa46 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800f9ca:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f9cc:	4b2c      	ldr	r3, [pc, #176]	; (800fa80 <xTaskIncrementTick+0x104>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f9d6:	009a      	lsls	r2, r3, #2
 800f9d8:	4b2a      	ldr	r3, [pc, #168]	; (800fa84 <xTaskIncrementTick+0x108>)
 800f9da:	589b      	ldr	r3, [r3, r2]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d900      	bls.n	800f9e2 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800f9e0:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800f9e2:	4b29      	ldr	r3, [pc, #164]	; (800fa88 <xTaskIncrementTick+0x10c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d03c      	beq.n	800fa64 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800f9ea:	2701      	movs	r7, #1
	return xSwitchRequired;
 800f9ec:	e03a      	b.n	800fa64 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800f9ee:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9f0:	4b1f      	ldr	r3, [pc, #124]	; (800fa70 <xTaskIncrementTick+0xf4>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	b343      	cbz	r3, 800fa4a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9f8:	4b1d      	ldr	r3, [pc, #116]	; (800fa70 <xTaskIncrementTick+0xf4>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fa00:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800fa02:	429d      	cmp	r5, r3
 800fa04:	d326      	bcc.n	800fa54 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa06:	1d26      	adds	r6, r4, #4
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f7fe fdf5 	bl	800e5f8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fa10:	b11b      	cbz	r3, 800fa1a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa12:	f104 0018 	add.w	r0, r4, #24
 800fa16:	f7fe fdef 	bl	800e5f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa1c:	4a1b      	ldr	r2, [pc, #108]	; (800fa8c <xTaskIncrementTick+0x110>)
 800fa1e:	6812      	ldr	r2, [r2, #0]
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d901      	bls.n	800fa28 <xTaskIncrementTick+0xac>
 800fa24:	4a19      	ldr	r2, [pc, #100]	; (800fa8c <xTaskIncrementTick+0x110>)
 800fa26:	6013      	str	r3, [r2, #0]
 800fa28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fa2c:	009a      	lsls	r2, r3, #2
 800fa2e:	4631      	mov	r1, r6
 800fa30:	4814      	ldr	r0, [pc, #80]	; (800fa84 <xTaskIncrementTick+0x108>)
 800fa32:	4410      	add	r0, r2
 800fa34:	f7fe fdbc 	bl	800e5b0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fa3a:	4b11      	ldr	r3, [pc, #68]	; (800fa80 <xTaskIncrementTick+0x104>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d2d4      	bcs.n	800f9ee <xTaskIncrementTick+0x72>
 800fa44:	e7d4      	b.n	800f9f0 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800fa46:	2700      	movs	r7, #0
 800fa48:	e7d2      	b.n	800f9f0 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa4a:	4b0c      	ldr	r3, [pc, #48]	; (800fa7c <xTaskIncrementTick+0x100>)
 800fa4c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa50:	601a      	str	r2, [r3, #0]
					break;
 800fa52:	e7bb      	b.n	800f9cc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800fa54:	4a09      	ldr	r2, [pc, #36]	; (800fa7c <xTaskIncrementTick+0x100>)
 800fa56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fa58:	e7b8      	b.n	800f9cc <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800fa5a:	4a0d      	ldr	r2, [pc, #52]	; (800fa90 <xTaskIncrementTick+0x114>)
 800fa5c:	6813      	ldr	r3, [r2, #0]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800fa62:	2700      	movs	r7, #0
}
 800fa64:	4638      	mov	r0, r7
 800fa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa68:	2400c58c 	.word	0x2400c58c
 800fa6c:	2400c610 	.word	0x2400c610
 800fa70:	2400c11c 	.word	0x2400c11c
 800fa74:	2400c120 	.word	0x2400c120
 800fa78:	2400c5c8 	.word	0x2400c5c8
 800fa7c:	2400c5c4 	.word	0x2400c5c4
 800fa80:	2400c118 	.word	0x2400c118
 800fa84:	2400c124 	.word	0x2400c124
 800fa88:	2400c614 	.word	0x2400c614
 800fa8c:	2400c594 	.word	0x2400c594
 800fa90:	2400c5cc 	.word	0x2400c5cc

0800fa94 <xTaskResumeAll>:
{
 800fa94:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800fa96:	4b35      	ldr	r3, [pc, #212]	; (800fb6c <xTaskResumeAll+0xd8>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	b943      	cbnz	r3, 800faae <xTaskResumeAll+0x1a>
 800fa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa0:	f383 8811 	msr	BASEPRI, r3
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	e7fe      	b.n	800faac <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800faae:	f7fe fe21 	bl	800e6f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fab2:	4b2e      	ldr	r3, [pc, #184]	; (800fb6c <xTaskResumeAll+0xd8>)
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	3a01      	subs	r2, #1
 800fab8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d14f      	bne.n	800fb60 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fac0:	4b2b      	ldr	r3, [pc, #172]	; (800fb70 <xTaskResumeAll+0xdc>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	b90b      	cbnz	r3, 800faca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800fac6:	2400      	movs	r4, #0
 800fac8:	e04b      	b.n	800fb62 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800faca:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800facc:	4b29      	ldr	r3, [pc, #164]	; (800fb74 <xTaskResumeAll+0xe0>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	b31b      	cbz	r3, 800fb1a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fad2:	4b28      	ldr	r3, [pc, #160]	; (800fb74 <xTaskResumeAll+0xe0>)
 800fad4:	68db      	ldr	r3, [r3, #12]
 800fad6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fad8:	f104 0018 	add.w	r0, r4, #24
 800fadc:	f7fe fd8c 	bl	800e5f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fae0:	1d25      	adds	r5, r4, #4
 800fae2:	4628      	mov	r0, r5
 800fae4:	f7fe fd88 	bl	800e5f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fae8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800faea:	4b23      	ldr	r3, [pc, #140]	; (800fb78 <xTaskResumeAll+0xe4>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4298      	cmp	r0, r3
 800faf0:	d901      	bls.n	800faf6 <xTaskResumeAll+0x62>
 800faf2:	4b21      	ldr	r3, [pc, #132]	; (800fb78 <xTaskResumeAll+0xe4>)
 800faf4:	6018      	str	r0, [r3, #0]
 800faf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800fafa:	4629      	mov	r1, r5
 800fafc:	4b1f      	ldr	r3, [pc, #124]	; (800fb7c <xTaskResumeAll+0xe8>)
 800fafe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fb02:	f7fe fd55 	bl	800e5b0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fb08:	4b1d      	ldr	r3, [pc, #116]	; (800fb80 <xTaskResumeAll+0xec>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d3dc      	bcc.n	800facc <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800fb12:	4b1c      	ldr	r3, [pc, #112]	; (800fb84 <xTaskResumeAll+0xf0>)
 800fb14:	2201      	movs	r2, #1
 800fb16:	601a      	str	r2, [r3, #0]
 800fb18:	e7d8      	b.n	800facc <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800fb1a:	b10c      	cbz	r4, 800fb20 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800fb1c:	f7ff fcb6 	bl	800f48c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb20:	4b19      	ldr	r3, [pc, #100]	; (800fb88 <xTaskResumeAll+0xf4>)
 800fb22:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800fb24:	b984      	cbnz	r4, 800fb48 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800fb26:	4b17      	ldr	r3, [pc, #92]	; (800fb84 <xTaskResumeAll+0xf0>)
 800fb28:	681c      	ldr	r4, [r3, #0]
 800fb2a:	b1d4      	cbz	r4, 800fb62 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800fb2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fb30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fb38:	f3bf 8f4f 	dsb	sy
 800fb3c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800fb40:	2401      	movs	r4, #1
 800fb42:	e00e      	b.n	800fb62 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb44:	3c01      	subs	r4, #1
 800fb46:	d007      	beq.n	800fb58 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800fb48:	f7ff ff18 	bl	800f97c <xTaskIncrementTick>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d0f9      	beq.n	800fb44 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800fb50:	4b0c      	ldr	r3, [pc, #48]	; (800fb84 <xTaskResumeAll+0xf0>)
 800fb52:	2201      	movs	r2, #1
 800fb54:	601a      	str	r2, [r3, #0]
 800fb56:	e7f5      	b.n	800fb44 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800fb58:	4b0b      	ldr	r3, [pc, #44]	; (800fb88 <xTaskResumeAll+0xf4>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	601a      	str	r2, [r3, #0]
 800fb5e:	e7e2      	b.n	800fb26 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800fb60:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fb62:	f7fe fde9 	bl	800e738 <vPortExitCritical>
}
 800fb66:	4620      	mov	r0, r4
 800fb68:	bd38      	pop	{r3, r4, r5, pc}
 800fb6a:	bf00      	nop
 800fb6c:	2400c58c 	.word	0x2400c58c
 800fb70:	2400c584 	.word	0x2400c584
 800fb74:	2400c5d0 	.word	0x2400c5d0
 800fb78:	2400c594 	.word	0x2400c594
 800fb7c:	2400c124 	.word	0x2400c124
 800fb80:	2400c118 	.word	0x2400c118
 800fb84:	2400c614 	.word	0x2400c614
 800fb88:	2400c5cc 	.word	0x2400c5cc

0800fb8c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb8c:	4b21      	ldr	r3, [pc, #132]	; (800fc14 <vTaskSwitchContext+0x88>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	b11b      	cbz	r3, 800fb9a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800fb92:	4b21      	ldr	r3, [pc, #132]	; (800fc18 <vTaskSwitchContext+0x8c>)
 800fb94:	2201      	movs	r2, #1
 800fb96:	601a      	str	r2, [r3, #0]
 800fb98:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800fb9a:	4b1f      	ldr	r3, [pc, #124]	; (800fc18 <vTaskSwitchContext+0x8c>)
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fba0:	4b1e      	ldr	r3, [pc, #120]	; (800fc1c <vTaskSwitchContext+0x90>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800fba8:	008a      	lsls	r2, r1, #2
 800fbaa:	491d      	ldr	r1, [pc, #116]	; (800fc20 <vTaskSwitchContext+0x94>)
 800fbac:	588a      	ldr	r2, [r1, r2]
 800fbae:	b95a      	cbnz	r2, 800fbc8 <vTaskSwitchContext+0x3c>
 800fbb0:	b10b      	cbz	r3, 800fbb6 <vTaskSwitchContext+0x2a>
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	e7f6      	b.n	800fba4 <vTaskSwitchContext+0x18>
 800fbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbba:	f383 8811 	msr	BASEPRI, r3
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f3bf 8f4f 	dsb	sy
 800fbc6:	e7fe      	b.n	800fbc6 <vTaskSwitchContext+0x3a>
 800fbc8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800fbcc:	0082      	lsls	r2, r0, #2
 800fbce:	440a      	add	r2, r1
 800fbd0:	6850      	ldr	r0, [r2, #4]
 800fbd2:	6840      	ldr	r0, [r0, #4]
 800fbd4:	6050      	str	r0, [r2, #4]
 800fbd6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800fbda:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800fbde:	3208      	adds	r2, #8
 800fbe0:	4411      	add	r1, r2
 800fbe2:	4288      	cmp	r0, r1
 800fbe4:	d00f      	beq.n	800fc06 <vTaskSwitchContext+0x7a>
 800fbe6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800fbea:	0091      	lsls	r1, r2, #2
 800fbec:	4a0c      	ldr	r2, [pc, #48]	; (800fc20 <vTaskSwitchContext+0x94>)
 800fbee:	440a      	add	r2, r1
 800fbf0:	6852      	ldr	r2, [r2, #4]
 800fbf2:	68d1      	ldr	r1, [r2, #12]
 800fbf4:	4a0b      	ldr	r2, [pc, #44]	; (800fc24 <vTaskSwitchContext+0x98>)
 800fbf6:	6011      	str	r1, [r2, #0]
 800fbf8:	4908      	ldr	r1, [pc, #32]	; (800fc1c <vTaskSwitchContext+0x90>)
 800fbfa:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fbfc:	6813      	ldr	r3, [r2, #0]
 800fbfe:	3354      	adds	r3, #84	; 0x54
 800fc00:	4a09      	ldr	r2, [pc, #36]	; (800fc28 <vTaskSwitchContext+0x9c>)
 800fc02:	6013      	str	r3, [r2, #0]
}
 800fc04:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc06:	6840      	ldr	r0, [r0, #4]
 800fc08:	4662      	mov	r2, ip
 800fc0a:	0091      	lsls	r1, r2, #2
 800fc0c:	4a04      	ldr	r2, [pc, #16]	; (800fc20 <vTaskSwitchContext+0x94>)
 800fc0e:	440a      	add	r2, r1
 800fc10:	6050      	str	r0, [r2, #4]
 800fc12:	e7e8      	b.n	800fbe6 <vTaskSwitchContext+0x5a>
 800fc14:	2400c58c 	.word	0x2400c58c
 800fc18:	2400c614 	.word	0x2400c614
 800fc1c:	2400c594 	.word	0x2400c594
 800fc20:	2400c124 	.word	0x2400c124
 800fc24:	2400c118 	.word	0x2400c118
 800fc28:	240000dc 	.word	0x240000dc

0800fc2c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800fc2c:	b158      	cbz	r0, 800fc46 <vTaskPlaceOnEventList+0x1a>
{
 800fc2e:	b510      	push	{r4, lr}
 800fc30:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc32:	4a09      	ldr	r2, [pc, #36]	; (800fc58 <vTaskPlaceOnEventList+0x2c>)
 800fc34:	6811      	ldr	r1, [r2, #0]
 800fc36:	3118      	adds	r1, #24
 800fc38:	f7fe fcc5 	bl	800e5c6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fc3c:	2101      	movs	r1, #1
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f7ff fd86 	bl	800f750 <prvAddCurrentTaskToDelayedList>
}
 800fc44:	bd10      	pop	{r4, pc}
 800fc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800fc56:	e7fe      	b.n	800fc56 <vTaskPlaceOnEventList+0x2a>
 800fc58:	2400c118 	.word	0x2400c118

0800fc5c <vTaskPlaceOnEventListRestricted>:
	{
 800fc5c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800fc5e:	b170      	cbz	r0, 800fc7e <vTaskPlaceOnEventListRestricted+0x22>
 800fc60:	460d      	mov	r5, r1
 800fc62:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc64:	4a0a      	ldr	r2, [pc, #40]	; (800fc90 <vTaskPlaceOnEventListRestricted+0x34>)
 800fc66:	6811      	ldr	r1, [r2, #0]
 800fc68:	3118      	adds	r1, #24
 800fc6a:	f7fe fca1 	bl	800e5b0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800fc6e:	b10c      	cbz	r4, 800fc74 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800fc70:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fc74:	4621      	mov	r1, r4
 800fc76:	4628      	mov	r0, r5
 800fc78:	f7ff fd6a 	bl	800f750 <prvAddCurrentTaskToDelayedList>
	}
 800fc7c:	bd38      	pop	{r3, r4, r5, pc}
 800fc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc82:	f383 8811 	msr	BASEPRI, r3
 800fc86:	f3bf 8f6f 	isb	sy
 800fc8a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800fc8e:	e7fe      	b.n	800fc8e <vTaskPlaceOnEventListRestricted+0x32>
 800fc90:	2400c118 	.word	0x2400c118

0800fc94 <xTaskRemoveFromEventList>:
{
 800fc94:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc96:	68c3      	ldr	r3, [r0, #12]
 800fc98:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800fc9a:	b324      	cbz	r4, 800fce6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc9c:	f104 0518 	add.w	r5, r4, #24
 800fca0:	4628      	mov	r0, r5
 800fca2:	f7fe fca9 	bl	800e5f8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fca6:	4b18      	ldr	r3, [pc, #96]	; (800fd08 <xTaskRemoveFromEventList+0x74>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	bb2b      	cbnz	r3, 800fcf8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fcac:	1d25      	adds	r5, r4, #4
 800fcae:	4628      	mov	r0, r5
 800fcb0:	f7fe fca2 	bl	800e5f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fcb4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fcb6:	4b15      	ldr	r3, [pc, #84]	; (800fd0c <xTaskRemoveFromEventList+0x78>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4298      	cmp	r0, r3
 800fcbc:	d901      	bls.n	800fcc2 <xTaskRemoveFromEventList+0x2e>
 800fcbe:	4b13      	ldr	r3, [pc, #76]	; (800fd0c <xTaskRemoveFromEventList+0x78>)
 800fcc0:	6018      	str	r0, [r3, #0]
 800fcc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	4b11      	ldr	r3, [pc, #68]	; (800fd10 <xTaskRemoveFromEventList+0x7c>)
 800fcca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fcce:	f7fe fc6f 	bl	800e5b0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fcd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fcd4:	4b0f      	ldr	r3, [pc, #60]	; (800fd14 <xTaskRemoveFromEventList+0x80>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d911      	bls.n	800fd02 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800fcde:	2001      	movs	r0, #1
 800fce0:	4b0d      	ldr	r3, [pc, #52]	; (800fd18 <xTaskRemoveFromEventList+0x84>)
 800fce2:	6018      	str	r0, [r3, #0]
}
 800fce4:	bd38      	pop	{r3, r4, r5, pc}
 800fce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcea:	f383 8811 	msr	BASEPRI, r3
 800fcee:	f3bf 8f6f 	isb	sy
 800fcf2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800fcf6:	e7fe      	b.n	800fcf6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	4808      	ldr	r0, [pc, #32]	; (800fd1c <xTaskRemoveFromEventList+0x88>)
 800fcfc:	f7fe fc58 	bl	800e5b0 <vListInsertEnd>
 800fd00:	e7e7      	b.n	800fcd2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800fd02:	2000      	movs	r0, #0
	return xReturn;
 800fd04:	e7ee      	b.n	800fce4 <xTaskRemoveFromEventList+0x50>
 800fd06:	bf00      	nop
 800fd08:	2400c58c 	.word	0x2400c58c
 800fd0c:	2400c594 	.word	0x2400c594
 800fd10:	2400c124 	.word	0x2400c124
 800fd14:	2400c118 	.word	0x2400c118
 800fd18:	2400c614 	.word	0x2400c614
 800fd1c:	2400c5d0 	.word	0x2400c5d0

0800fd20 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd20:	4b03      	ldr	r3, [pc, #12]	; (800fd30 <vTaskInternalSetTimeOutState+0x10>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd26:	4b03      	ldr	r3, [pc, #12]	; (800fd34 <vTaskInternalSetTimeOutState+0x14>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6043      	str	r3, [r0, #4]
}
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop
 800fd30:	2400c5c8 	.word	0x2400c5c8
 800fd34:	2400c610 	.word	0x2400c610

0800fd38 <xTaskCheckForTimeOut>:
{
 800fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800fd3a:	b1c8      	cbz	r0, 800fd70 <xTaskCheckForTimeOut+0x38>
 800fd3c:	460c      	mov	r4, r1
 800fd3e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800fd40:	b1f9      	cbz	r1, 800fd82 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800fd42:	f7fe fcd7 	bl	800e6f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fd46:	4b1b      	ldr	r3, [pc, #108]	; (800fdb4 <xTaskCheckForTimeOut+0x7c>)
 800fd48:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fd4a:	686b      	ldr	r3, [r5, #4]
 800fd4c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800fd4e:	6822      	ldr	r2, [r4, #0]
 800fd50:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd54:	d026      	beq.n	800fda4 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd56:	4e18      	ldr	r6, [pc, #96]	; (800fdb8 <xTaskCheckForTimeOut+0x80>)
 800fd58:	6836      	ldr	r6, [r6, #0]
 800fd5a:	682f      	ldr	r7, [r5, #0]
 800fd5c:	42b7      	cmp	r7, r6
 800fd5e:	d001      	beq.n	800fd64 <xTaskCheckForTimeOut+0x2c>
 800fd60:	428b      	cmp	r3, r1
 800fd62:	d924      	bls.n	800fdae <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd64:	4282      	cmp	r2, r0
 800fd66:	d815      	bhi.n	800fd94 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800fd6c:	2401      	movs	r4, #1
 800fd6e:	e01a      	b.n	800fda6 <xTaskCheckForTimeOut+0x6e>
 800fd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800fd80:	e7fe      	b.n	800fd80 <xTaskCheckForTimeOut+0x48>
 800fd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800fd92:	e7fe      	b.n	800fd92 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800fd94:	1a5b      	subs	r3, r3, r1
 800fd96:	4413      	add	r3, r2
 800fd98:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f7ff ffc0 	bl	800fd20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fda0:	2400      	movs	r4, #0
 800fda2:	e000      	b.n	800fda6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800fda4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fda6:	f7fe fcc7 	bl	800e738 <vPortExitCritical>
}
 800fdaa:	4620      	mov	r0, r4
 800fdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800fdae:	2401      	movs	r4, #1
 800fdb0:	e7f9      	b.n	800fda6 <xTaskCheckForTimeOut+0x6e>
 800fdb2:	bf00      	nop
 800fdb4:	2400c610 	.word	0x2400c610
 800fdb8:	2400c5c8 	.word	0x2400c5c8

0800fdbc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fdbc:	4b01      	ldr	r3, [pc, #4]	; (800fdc4 <vTaskMissedYield+0x8>)
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	601a      	str	r2, [r3, #0]
}
 800fdc2:	4770      	bx	lr
 800fdc4:	2400c614 	.word	0x2400c614

0800fdc8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fdc8:	4b05      	ldr	r3, [pc, #20]	; (800fde0 <xTaskGetSchedulerState+0x18>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	b133      	cbz	r3, 800fddc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdce:	4b05      	ldr	r3, [pc, #20]	; (800fde4 <xTaskGetSchedulerState+0x1c>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	b10b      	cbz	r3, 800fdd8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800fdd4:	2000      	movs	r0, #0
	}
 800fdd6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800fdd8:	2002      	movs	r0, #2
 800fdda:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fddc:	2001      	movs	r0, #1
 800fdde:	4770      	bx	lr
 800fde0:	2400c5e4 	.word	0x2400c5e4
 800fde4:	2400c58c 	.word	0x2400c58c

0800fde8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d03e      	beq.n	800fe6a <xTaskPriorityInherit+0x82>
	{
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fdf0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fdf2:	4a20      	ldr	r2, [pc, #128]	; (800fe74 <xTaskPriorityInherit+0x8c>)
 800fdf4:	6812      	ldr	r2, [r2, #0]
 800fdf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d22e      	bcs.n	800fe5a <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fdfc:	6982      	ldr	r2, [r0, #24]
 800fdfe:	2a00      	cmp	r2, #0
 800fe00:	db05      	blt.n	800fe0e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe02:	4a1c      	ldr	r2, [pc, #112]	; (800fe74 <xTaskPriorityInherit+0x8c>)
 800fe04:	6812      	ldr	r2, [r2, #0]
 800fe06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fe08:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800fe0c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fe0e:	6961      	ldr	r1, [r4, #20]
 800fe10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fe14:	4a18      	ldr	r2, [pc, #96]	; (800fe78 <xTaskPriorityInherit+0x90>)
 800fe16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe1a:	4299      	cmp	r1, r3
 800fe1c:	d005      	beq.n	800fe2a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe1e:	4b15      	ldr	r3, [pc, #84]	; (800fe74 <xTaskPriorityInherit+0x8c>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe24:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800fe26:	2001      	movs	r0, #1
	}
 800fe28:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe2a:	1d25      	adds	r5, r4, #4
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f7fe fbe3 	bl	800e5f8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe32:	4b10      	ldr	r3, [pc, #64]	; (800fe74 <xTaskPriorityInherit+0x8c>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fe38:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fe3a:	4b10      	ldr	r3, [pc, #64]	; (800fe7c <xTaskPriorityInherit+0x94>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4298      	cmp	r0, r3
 800fe40:	d901      	bls.n	800fe46 <xTaskPriorityInherit+0x5e>
 800fe42:	4b0e      	ldr	r3, [pc, #56]	; (800fe7c <xTaskPriorityInherit+0x94>)
 800fe44:	6018      	str	r0, [r3, #0]
 800fe46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	4b0a      	ldr	r3, [pc, #40]	; (800fe78 <xTaskPriorityInherit+0x90>)
 800fe4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe52:	f7fe fbad 	bl	800e5b0 <vListInsertEnd>
				xReturn = pdTRUE;
 800fe56:	2001      	movs	r0, #1
 800fe58:	e7e6      	b.n	800fe28 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fe5a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800fe5c:	4b05      	ldr	r3, [pc, #20]	; (800fe74 <xTaskPriorityInherit+0x8c>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d303      	bcc.n	800fe6e <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800fe66:	2000      	movs	r0, #0
 800fe68:	e7de      	b.n	800fe28 <xTaskPriorityInherit+0x40>
 800fe6a:	2000      	movs	r0, #0
	}
 800fe6c:	4770      	bx	lr
					xReturn = pdTRUE;
 800fe6e:	2001      	movs	r0, #1
		return xReturn;
 800fe70:	e7da      	b.n	800fe28 <xTaskPriorityInherit+0x40>
 800fe72:	bf00      	nop
 800fe74:	2400c118 	.word	0x2400c118
 800fe78:	2400c124 	.word	0x2400c124
 800fe7c:	2400c594 	.word	0x2400c594

0800fe80 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d03b      	beq.n	800fefc <xTaskPriorityDisinherit+0x7c>
	{
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800fe88:	4b1e      	ldr	r3, [pc, #120]	; (800ff04 <xTaskPriorityDisinherit+0x84>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	4283      	cmp	r3, r0
 800fe8e:	d008      	beq.n	800fea2 <xTaskPriorityDisinherit+0x22>
 800fe90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe94:	f383 8811 	msr	BASEPRI, r3
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	e7fe      	b.n	800fea0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800fea2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fea4:	b943      	cbnz	r3, 800feb8 <xTaskPriorityDisinherit+0x38>
 800fea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feaa:	f383 8811 	msr	BASEPRI, r3
 800feae:	f3bf 8f6f 	isb	sy
 800feb2:	f3bf 8f4f 	dsb	sy
 800feb6:	e7fe      	b.n	800feb6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800feb8:	3b01      	subs	r3, #1
 800feba:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800febc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800febe:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800fec0:	4291      	cmp	r1, r2
 800fec2:	d01d      	beq.n	800ff00 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fec4:	b10b      	cbz	r3, 800feca <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800fec6:	2000      	movs	r0, #0
	}
 800fec8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800feca:	1d05      	adds	r5, r0, #4
 800fecc:	4628      	mov	r0, r5
 800fece:	f7fe fb93 	bl	800e5f8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fed2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800fed4:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fed6:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800feda:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fedc:	4b0a      	ldr	r3, [pc, #40]	; (800ff08 <xTaskPriorityDisinherit+0x88>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4298      	cmp	r0, r3
 800fee2:	d901      	bls.n	800fee8 <xTaskPriorityDisinherit+0x68>
 800fee4:	4b08      	ldr	r3, [pc, #32]	; (800ff08 <xTaskPriorityDisinherit+0x88>)
 800fee6:	6018      	str	r0, [r3, #0]
 800fee8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800feec:	4629      	mov	r1, r5
 800feee:	4b07      	ldr	r3, [pc, #28]	; (800ff0c <xTaskPriorityDisinherit+0x8c>)
 800fef0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fef4:	f7fe fb5c 	bl	800e5b0 <vListInsertEnd>
					xReturn = pdTRUE;
 800fef8:	2001      	movs	r0, #1
 800fefa:	e7e5      	b.n	800fec8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800fefc:	2000      	movs	r0, #0
	}
 800fefe:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800ff00:	2000      	movs	r0, #0
 800ff02:	e7e1      	b.n	800fec8 <xTaskPriorityDisinherit+0x48>
 800ff04:	2400c118 	.word	0x2400c118
 800ff08:	2400c594 	.word	0x2400c594
 800ff0c:	2400c124 	.word	0x2400c124

0800ff10 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800ff10:	2800      	cmp	r0, #0
 800ff12:	d046      	beq.n	800ffa2 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800ff18:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ff1a:	b943      	cbnz	r3, 800ff2e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800ff1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	e7fe      	b.n	800ff2c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ff2e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800ff30:	428a      	cmp	r2, r1
 800ff32:	d200      	bcs.n	800ff36 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ff34:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ff36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ff38:	4291      	cmp	r1, r2
 800ff3a:	d001      	beq.n	800ff40 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d000      	beq.n	800ff42 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800ff40:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800ff42:	4b18      	ldr	r3, [pc, #96]	; (800ffa4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	42a3      	cmp	r3, r4
 800ff48:	d022      	beq.n	800ff90 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800ff4a:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff4c:	69a3      	ldr	r3, [r4, #24]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	db02      	blt.n	800ff58 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff52:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ff56:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ff58:	6962      	ldr	r2, [r4, #20]
 800ff5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ff5e:	4b12      	ldr	r3, [pc, #72]	; (800ffa8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ff60:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ff64:	428a      	cmp	r2, r1
 800ff66:	d1eb      	bne.n	800ff40 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff68:	1d25      	adds	r5, r4, #4
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	f7fe fb44 	bl	800e5f8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ff70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ff72:	4b0e      	ldr	r3, [pc, #56]	; (800ffac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4298      	cmp	r0, r3
 800ff78:	d901      	bls.n	800ff7e <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800ff7a:	4b0c      	ldr	r3, [pc, #48]	; (800ffac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800ff7c:	6018      	str	r0, [r3, #0]
 800ff7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ff82:	4629      	mov	r1, r5
 800ff84:	4b08      	ldr	r3, [pc, #32]	; (800ffa8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ff86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ff8a:	f7fe fb11 	bl	800e5b0 <vListInsertEnd>
	}
 800ff8e:	e7d7      	b.n	800ff40 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff94:	f383 8811 	msr	BASEPRI, r3
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800ffa0:	e7fe      	b.n	800ffa0 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800ffa2:	4770      	bx	lr
 800ffa4:	2400c118 	.word	0x2400c118
 800ffa8:	2400c124 	.word	0x2400c124
 800ffac:	2400c594 	.word	0x2400c594

0800ffb0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ffb0:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <pvTaskIncrementMutexHeldCount+0x18>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	b123      	cbz	r3, 800ffc0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ffb6:	4b04      	ldr	r3, [pc, #16]	; (800ffc8 <pvTaskIncrementMutexHeldCount+0x18>)
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800ffc0:	4b01      	ldr	r3, [pc, #4]	; (800ffc8 <pvTaskIncrementMutexHeldCount+0x18>)
 800ffc2:	6818      	ldr	r0, [r3, #0]
	}
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	2400c118 	.word	0x2400c118

0800ffcc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ffcc:	4b06      	ldr	r3, [pc, #24]	; (800ffe8 <prvGetNextExpireTime+0x1c>)
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	6813      	ldr	r3, [r2, #0]
 800ffd2:	b92b      	cbnz	r3, 800ffe0 <prvGetNextExpireTime+0x14>
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ffd8:	b923      	cbnz	r3, 800ffe4 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffda:	68d3      	ldr	r3, [r2, #12]
 800ffdc:	6818      	ldr	r0, [r3, #0]
 800ffde:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	e7f8      	b.n	800ffd6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ffe4:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800ffe6:	4770      	bx	lr
 800ffe8:	2400c618 	.word	0x2400c618

0800ffec <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ffec:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ffee:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fff0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fff2:	4291      	cmp	r1, r2
 800fff4:	d80c      	bhi.n	8010010 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fff6:	1ad2      	subs	r2, r2, r3
 800fff8:	6983      	ldr	r3, [r0, #24]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d301      	bcc.n	8010002 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fffe:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8010000:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010002:	1d01      	adds	r1, r0, #4
 8010004:	4b0b      	ldr	r3, [pc, #44]	; (8010034 <prvInsertTimerInActiveList+0x48>)
 8010006:	6818      	ldr	r0, [r3, #0]
 8010008:	f7fe fadd 	bl	800e5c6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801000c:	2000      	movs	r0, #0
 801000e:	e7f7      	b.n	8010000 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010010:	429a      	cmp	r2, r3
 8010012:	bf2c      	ite	cs
 8010014:	2200      	movcs	r2, #0
 8010016:	2201      	movcc	r2, #1
 8010018:	4299      	cmp	r1, r3
 801001a:	bf38      	it	cc
 801001c:	2200      	movcc	r2, #0
 801001e:	b10a      	cbz	r2, 8010024 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 8010020:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010022:	e7ed      	b.n	8010000 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010024:	1d01      	adds	r1, r0, #4
 8010026:	4b04      	ldr	r3, [pc, #16]	; (8010038 <prvInsertTimerInActiveList+0x4c>)
 8010028:	6818      	ldr	r0, [r3, #0]
 801002a:	f7fe facc 	bl	800e5c6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801002e:	2000      	movs	r0, #0
 8010030:	e7e6      	b.n	8010000 <prvInsertTimerInActiveList+0x14>
 8010032:	bf00      	nop
 8010034:	2400c61c 	.word	0x2400c61c
 8010038:	2400c618 	.word	0x2400c618

0801003c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801003c:	b530      	push	{r4, r5, lr}
 801003e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010040:	f7fe fb58 	bl	800e6f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010044:	4b11      	ldr	r3, [pc, #68]	; (801008c <prvCheckForValidListAndQueue+0x50>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	b11b      	cbz	r3, 8010052 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801004a:	f7fe fb75 	bl	800e738 <vPortExitCritical>
}
 801004e:	b003      	add	sp, #12
 8010050:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8010052:	4d0f      	ldr	r5, [pc, #60]	; (8010090 <prvCheckForValidListAndQueue+0x54>)
 8010054:	4628      	mov	r0, r5
 8010056:	f7fe fa9d 	bl	800e594 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801005a:	4c0e      	ldr	r4, [pc, #56]	; (8010094 <prvCheckForValidListAndQueue+0x58>)
 801005c:	4620      	mov	r0, r4
 801005e:	f7fe fa99 	bl	800e594 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010062:	4b0d      	ldr	r3, [pc, #52]	; (8010098 <prvCheckForValidListAndQueue+0x5c>)
 8010064:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010066:	4b0d      	ldr	r3, [pc, #52]	; (801009c <prvCheckForValidListAndQueue+0x60>)
 8010068:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801006a:	2300      	movs	r3, #0
 801006c:	9300      	str	r3, [sp, #0]
 801006e:	4b0c      	ldr	r3, [pc, #48]	; (80100a0 <prvCheckForValidListAndQueue+0x64>)
 8010070:	4a0c      	ldr	r2, [pc, #48]	; (80100a4 <prvCheckForValidListAndQueue+0x68>)
 8010072:	2110      	movs	r1, #16
 8010074:	200a      	movs	r0, #10
 8010076:	f7fe fd8c 	bl	800eb92 <xQueueGenericCreateStatic>
 801007a:	4b04      	ldr	r3, [pc, #16]	; (801008c <prvCheckForValidListAndQueue+0x50>)
 801007c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801007e:	2800      	cmp	r0, #0
 8010080:	d0e3      	beq.n	801004a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010082:	4909      	ldr	r1, [pc, #36]	; (80100a8 <prvCheckForValidListAndQueue+0x6c>)
 8010084:	f7ff f998 	bl	800f3b8 <vQueueAddToRegistry>
 8010088:	e7df      	b.n	801004a <prvCheckForValidListAndQueue+0xe>
 801008a:	bf00      	nop
 801008c:	2400c73c 	.word	0x2400c73c
 8010090:	2400c6c0 	.word	0x2400c6c0
 8010094:	2400c6d4 	.word	0x2400c6d4
 8010098:	2400c618 	.word	0x2400c618
 801009c:	2400c61c 	.word	0x2400c61c
 80100a0:	2400c6ec 	.word	0x2400c6ec
 80100a4:	2400c620 	.word	0x2400c620
 80100a8:	08023388 	.word	0x08023388

080100ac <xTimerCreateTimerTask>:
{
 80100ac:	b510      	push	{r4, lr}
 80100ae:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80100b0:	f7ff ffc4 	bl	801003c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80100b4:	4b12      	ldr	r3, [pc, #72]	; (8010100 <xTimerCreateTimerTask+0x54>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	b1cb      	cbz	r3, 80100ee <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80100ba:	2400      	movs	r4, #0
 80100bc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80100be:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80100c0:	aa07      	add	r2, sp, #28
 80100c2:	a906      	add	r1, sp, #24
 80100c4:	a805      	add	r0, sp, #20
 80100c6:	f7fe f939 	bl	800e33c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80100ca:	9b05      	ldr	r3, [sp, #20]
 80100cc:	9302      	str	r3, [sp, #8]
 80100ce:	9b06      	ldr	r3, [sp, #24]
 80100d0:	9301      	str	r3, [sp, #4]
 80100d2:	2302      	movs	r3, #2
 80100d4:	9300      	str	r3, [sp, #0]
 80100d6:	4623      	mov	r3, r4
 80100d8:	9a07      	ldr	r2, [sp, #28]
 80100da:	490a      	ldr	r1, [pc, #40]	; (8010104 <xTimerCreateTimerTask+0x58>)
 80100dc:	480a      	ldr	r0, [pc, #40]	; (8010108 <xTimerCreateTimerTask+0x5c>)
 80100de:	f7ff fb79 	bl	800f7d4 <xTaskCreateStatic>
 80100e2:	4b0a      	ldr	r3, [pc, #40]	; (801010c <xTimerCreateTimerTask+0x60>)
 80100e4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80100e6:	b110      	cbz	r0, 80100ee <xTimerCreateTimerTask+0x42>
}
 80100e8:	2001      	movs	r0, #1
 80100ea:	b008      	add	sp, #32
 80100ec:	bd10      	pop	{r4, pc}
 80100ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80100fe:	e7fe      	b.n	80100fe <xTimerCreateTimerTask+0x52>
 8010100:	2400c73c 	.word	0x2400c73c
 8010104:	08023390 	.word	0x08023390
 8010108:	08010415 	.word	0x08010415
 801010c:	2400c740 	.word	0x2400c740

08010110 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8010110:	b1b8      	cbz	r0, 8010142 <xTimerGenericCommand+0x32>
 8010112:	469c      	mov	ip, r3
 8010114:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8010116:	4818      	ldr	r0, [pc, #96]	; (8010178 <xTimerGenericCommand+0x68>)
 8010118:	6800      	ldr	r0, [r0, #0]
 801011a:	b358      	cbz	r0, 8010174 <xTimerGenericCommand+0x64>
{
 801011c:	b500      	push	{lr}
 801011e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8010120:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010122:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010124:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010126:	2905      	cmp	r1, #5
 8010128:	dc1c      	bgt.n	8010164 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801012a:	f7ff fe4d 	bl	800fdc8 <xTaskGetSchedulerState>
 801012e:	2802      	cmp	r0, #2
 8010130:	d010      	beq.n	8010154 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010132:	2300      	movs	r3, #0
 8010134:	461a      	mov	r2, r3
 8010136:	4669      	mov	r1, sp
 8010138:	480f      	ldr	r0, [pc, #60]	; (8010178 <xTimerGenericCommand+0x68>)
 801013a:	6800      	ldr	r0, [r0, #0]
 801013c:	f7fe fde1 	bl	800ed02 <xQueueGenericSend>
 8010140:	e015      	b.n	801016e <xTimerGenericCommand+0x5e>
 8010142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010146:	f383 8811 	msr	BASEPRI, r3
 801014a:	f3bf 8f6f 	isb	sy
 801014e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8010152:	e7fe      	b.n	8010152 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010154:	2300      	movs	r3, #0
 8010156:	9a06      	ldr	r2, [sp, #24]
 8010158:	4669      	mov	r1, sp
 801015a:	4807      	ldr	r0, [pc, #28]	; (8010178 <xTimerGenericCommand+0x68>)
 801015c:	6800      	ldr	r0, [r0, #0]
 801015e:	f7fe fdd0 	bl	800ed02 <xQueueGenericSend>
 8010162:	e004      	b.n	801016e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010164:	2300      	movs	r3, #0
 8010166:	4662      	mov	r2, ip
 8010168:	4669      	mov	r1, sp
 801016a:	f7fe fe8e 	bl	800ee8a <xQueueGenericSendFromISR>
}
 801016e:	b005      	add	sp, #20
 8010170:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8010174:	2000      	movs	r0, #0
}
 8010176:	4770      	bx	lr
 8010178:	2400c73c 	.word	0x2400c73c

0801017c <prvSwitchTimerLists>:
{
 801017c:	b570      	push	{r4, r5, r6, lr}
 801017e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010180:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <prvSwitchTimerLists+0x74>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	b362      	cbz	r2, 80101e2 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801018c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801018e:	1d25      	adds	r5, r4, #4
 8010190:	4628      	mov	r0, r5
 8010192:	f7fe fa31 	bl	800e5f8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010196:	6a23      	ldr	r3, [r4, #32]
 8010198:	4620      	mov	r0, r4
 801019a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801019c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80101a0:	f013 0f04 	tst.w	r3, #4
 80101a4:	d0ec      	beq.n	8010180 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80101a6:	69a3      	ldr	r3, [r4, #24]
 80101a8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80101aa:	429e      	cmp	r6, r3
 80101ac:	d207      	bcs.n	80101be <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80101ae:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80101b0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101b2:	4629      	mov	r1, r5
 80101b4:	4b0e      	ldr	r3, [pc, #56]	; (80101f0 <prvSwitchTimerLists+0x74>)
 80101b6:	6818      	ldr	r0, [r3, #0]
 80101b8:	f7fe fa05 	bl	800e5c6 <vListInsert>
 80101bc:	e7e0      	b.n	8010180 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80101be:	2100      	movs	r1, #0
 80101c0:	9100      	str	r1, [sp, #0]
 80101c2:	460b      	mov	r3, r1
 80101c4:	4632      	mov	r2, r6
 80101c6:	4620      	mov	r0, r4
 80101c8:	f7ff ffa2 	bl	8010110 <xTimerGenericCommand>
				configASSERT( xResult );
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d1d7      	bne.n	8010180 <prvSwitchTimerLists+0x4>
 80101d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	e7fe      	b.n	80101e0 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 80101e2:	4a04      	ldr	r2, [pc, #16]	; (80101f4 <prvSwitchTimerLists+0x78>)
 80101e4:	6810      	ldr	r0, [r2, #0]
 80101e6:	4902      	ldr	r1, [pc, #8]	; (80101f0 <prvSwitchTimerLists+0x74>)
 80101e8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80101ea:	6013      	str	r3, [r2, #0]
}
 80101ec:	b002      	add	sp, #8
 80101ee:	bd70      	pop	{r4, r5, r6, pc}
 80101f0:	2400c618 	.word	0x2400c618
 80101f4:	2400c61c 	.word	0x2400c61c

080101f8 <prvSampleTimeNow>:
{
 80101f8:	b538      	push	{r3, r4, r5, lr}
 80101fa:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80101fc:	f7ff fbb8 	bl	800f970 <xTaskGetTickCount>
 8010200:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8010202:	4b07      	ldr	r3, [pc, #28]	; (8010220 <prvSampleTimeNow+0x28>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4283      	cmp	r3, r0
 8010208:	d805      	bhi.n	8010216 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801020a:	2300      	movs	r3, #0
 801020c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801020e:	4b04      	ldr	r3, [pc, #16]	; (8010220 <prvSampleTimeNow+0x28>)
 8010210:	601c      	str	r4, [r3, #0]
}
 8010212:	4620      	mov	r0, r4
 8010214:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8010216:	f7ff ffb1 	bl	801017c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801021a:	2301      	movs	r3, #1
 801021c:	602b      	str	r3, [r5, #0]
 801021e:	e7f6      	b.n	801020e <prvSampleTimeNow+0x16>
 8010220:	2400c6e8 	.word	0x2400c6e8

08010224 <prvProcessExpiredTimer>:
{
 8010224:	b570      	push	{r4, r5, r6, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	4606      	mov	r6, r0
 801022a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801022c:	4917      	ldr	r1, [pc, #92]	; (801028c <prvProcessExpiredTimer+0x68>)
 801022e:	6809      	ldr	r1, [r1, #0]
 8010230:	68c9      	ldr	r1, [r1, #12]
 8010232:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010234:	1d20      	adds	r0, r4, #4
 8010236:	f7fe f9df 	bl	800e5f8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801023a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 801023e:	f01c 0f04 	tst.w	ip, #4
 8010242:	d108      	bne.n	8010256 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010244:	f02c 0c01 	bic.w	ip, ip, #1
 8010248:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801024c:	6a23      	ldr	r3, [r4, #32]
 801024e:	4620      	mov	r0, r4
 8010250:	4798      	blx	r3
}
 8010252:	b002      	add	sp, #8
 8010254:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010256:	69a1      	ldr	r1, [r4, #24]
 8010258:	4633      	mov	r3, r6
 801025a:	462a      	mov	r2, r5
 801025c:	4431      	add	r1, r6
 801025e:	4620      	mov	r0, r4
 8010260:	f7ff fec4 	bl	800ffec <prvInsertTimerInActiveList>
 8010264:	2800      	cmp	r0, #0
 8010266:	d0f1      	beq.n	801024c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010268:	2100      	movs	r1, #0
 801026a:	9100      	str	r1, [sp, #0]
 801026c:	460b      	mov	r3, r1
 801026e:	4632      	mov	r2, r6
 8010270:	4620      	mov	r0, r4
 8010272:	f7ff ff4d 	bl	8010110 <xTimerGenericCommand>
			configASSERT( xResult );
 8010276:	2800      	cmp	r0, #0
 8010278:	d1e8      	bne.n	801024c <prvProcessExpiredTimer+0x28>
 801027a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027e:	f383 8811 	msr	BASEPRI, r3
 8010282:	f3bf 8f6f 	isb	sy
 8010286:	f3bf 8f4f 	dsb	sy
 801028a:	e7fe      	b.n	801028a <prvProcessExpiredTimer+0x66>
 801028c:	2400c618 	.word	0x2400c618

08010290 <prvProcessTimerOrBlockTask>:
{
 8010290:	b570      	push	{r4, r5, r6, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	4606      	mov	r6, r0
 8010296:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8010298:	f7ff fb62 	bl	800f960 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801029c:	a801      	add	r0, sp, #4
 801029e:	f7ff ffab 	bl	80101f8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80102a2:	9b01      	ldr	r3, [sp, #4]
 80102a4:	bb3b      	cbnz	r3, 80102f6 <prvProcessTimerOrBlockTask+0x66>
 80102a6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80102a8:	42b0      	cmp	r0, r6
 80102aa:	bf28      	it	cs
 80102ac:	2c00      	cmpcs	r4, #0
 80102ae:	d019      	beq.n	80102e4 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 80102b0:	b124      	cbz	r4, 80102bc <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80102b2:	4a13      	ldr	r2, [pc, #76]	; (8010300 <prvProcessTimerOrBlockTask+0x70>)
 80102b4:	6812      	ldr	r2, [r2, #0]
 80102b6:	6812      	ldr	r2, [r2, #0]
 80102b8:	b9da      	cbnz	r2, 80102f2 <prvProcessTimerOrBlockTask+0x62>
 80102ba:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80102bc:	4622      	mov	r2, r4
 80102be:	1b71      	subs	r1, r6, r5
 80102c0:	4b10      	ldr	r3, [pc, #64]	; (8010304 <prvProcessTimerOrBlockTask+0x74>)
 80102c2:	6818      	ldr	r0, [r3, #0]
 80102c4:	f7ff f8b8 	bl	800f438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80102c8:	f7ff fbe4 	bl	800fa94 <xTaskResumeAll>
 80102cc:	b9a8      	cbnz	r0, 80102fa <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 80102ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80102d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	f3bf 8f6f 	isb	sy
 80102e2:	e00a      	b.n	80102fa <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 80102e4:	f7ff fbd6 	bl	800fa94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80102e8:	4629      	mov	r1, r5
 80102ea:	4630      	mov	r0, r6
 80102ec:	f7ff ff9a 	bl	8010224 <prvProcessExpiredTimer>
 80102f0:	e003      	b.n	80102fa <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80102f2:	461c      	mov	r4, r3
 80102f4:	e7e2      	b.n	80102bc <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 80102f6:	f7ff fbcd 	bl	800fa94 <xTaskResumeAll>
}
 80102fa:	b002      	add	sp, #8
 80102fc:	bd70      	pop	{r4, r5, r6, pc}
 80102fe:	bf00      	nop
 8010300:	2400c61c 	.word	0x2400c61c
 8010304:	2400c73c 	.word	0x2400c73c

08010308 <prvProcessReceivedCommands>:
{
 8010308:	b510      	push	{r4, lr}
 801030a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801030c:	e002      	b.n	8010314 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801030e:	9b04      	ldr	r3, [sp, #16]
 8010310:	2b00      	cmp	r3, #0
 8010312:	da0f      	bge.n	8010334 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010314:	2200      	movs	r2, #0
 8010316:	a904      	add	r1, sp, #16
 8010318:	4b3d      	ldr	r3, [pc, #244]	; (8010410 <prvProcessReceivedCommands+0x108>)
 801031a:	6818      	ldr	r0, [r3, #0]
 801031c:	f7fe fe75 	bl	800f00a <xQueueReceive>
 8010320:	2800      	cmp	r0, #0
 8010322:	d073      	beq.n	801040c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010324:	9b04      	ldr	r3, [sp, #16]
 8010326:	2b00      	cmp	r3, #0
 8010328:	daf1      	bge.n	801030e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801032a:	9907      	ldr	r1, [sp, #28]
 801032c:	9806      	ldr	r0, [sp, #24]
 801032e:	9b05      	ldr	r3, [sp, #20]
 8010330:	4798      	blx	r3
 8010332:	e7ec      	b.n	801030e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010334:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010336:	6963      	ldr	r3, [r4, #20]
 8010338:	b113      	cbz	r3, 8010340 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801033a:	1d20      	adds	r0, r4, #4
 801033c:	f7fe f95c 	bl	800e5f8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010340:	a803      	add	r0, sp, #12
 8010342:	f7ff ff59 	bl	80101f8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010346:	9b04      	ldr	r3, [sp, #16]
 8010348:	2b09      	cmp	r3, #9
 801034a:	d8e3      	bhi.n	8010314 <prvProcessReceivedCommands+0xc>
 801034c:	e8df f003 	tbb	[pc, r3]
 8010350:	30050505 	.word	0x30050505
 8010354:	05055037 	.word	0x05055037
 8010358:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801035a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801035e:	f043 0301 	orr.w	r3, r3, #1
 8010362:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010366:	9b05      	ldr	r3, [sp, #20]
 8010368:	69a1      	ldr	r1, [r4, #24]
 801036a:	4602      	mov	r2, r0
 801036c:	4419      	add	r1, r3
 801036e:	4620      	mov	r0, r4
 8010370:	f7ff fe3c 	bl	800ffec <prvInsertTimerInActiveList>
 8010374:	2800      	cmp	r0, #0
 8010376:	d0cd      	beq.n	8010314 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010378:	6a23      	ldr	r3, [r4, #32]
 801037a:	4620      	mov	r0, r4
 801037c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801037e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010382:	f013 0f04 	tst.w	r3, #4
 8010386:	d0c5      	beq.n	8010314 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010388:	69a2      	ldr	r2, [r4, #24]
 801038a:	2100      	movs	r1, #0
 801038c:	9100      	str	r1, [sp, #0]
 801038e:	460b      	mov	r3, r1
 8010390:	9805      	ldr	r0, [sp, #20]
 8010392:	4402      	add	r2, r0
 8010394:	4620      	mov	r0, r4
 8010396:	f7ff febb 	bl	8010110 <xTimerGenericCommand>
							configASSERT( xResult );
 801039a:	2800      	cmp	r0, #0
 801039c:	d1ba      	bne.n	8010314 <prvProcessReceivedCommands+0xc>
 801039e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a2:	f383 8811 	msr	BASEPRI, r3
 80103a6:	f3bf 8f6f 	isb	sy
 80103aa:	f3bf 8f4f 	dsb	sy
 80103ae:	e7fe      	b.n	80103ae <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80103b4:	f023 0301 	bic.w	r3, r3, #1
 80103b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 80103bc:	e7aa      	b.n	8010314 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80103be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80103c2:	f043 0301 	orr.w	r3, r3, #1
 80103c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80103ca:	9905      	ldr	r1, [sp, #20]
 80103cc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80103ce:	b131      	cbz	r1, 80103de <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80103d0:	4603      	mov	r3, r0
 80103d2:	4602      	mov	r2, r0
 80103d4:	4401      	add	r1, r0
 80103d6:	4620      	mov	r0, r4
 80103d8:	f7ff fe08 	bl	800ffec <prvInsertTimerInActiveList>
					break;
 80103dc:	e79a      	b.n	8010314 <prvProcessReceivedCommands+0xc>
 80103de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e2:	f383 8811 	msr	BASEPRI, r3
 80103e6:	f3bf 8f6f 	isb	sy
 80103ea:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80103ee:	e7fe      	b.n	80103ee <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80103f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80103f4:	f013 0f02 	tst.w	r3, #2
 80103f8:	d004      	beq.n	8010404 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103fa:	f023 0301 	bic.w	r3, r3, #1
 80103fe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8010402:	e787      	b.n	8010314 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8010404:	4620      	mov	r0, r4
 8010406:	f7fe f887 	bl	800e518 <vPortFree>
 801040a:	e783      	b.n	8010314 <prvProcessReceivedCommands+0xc>
}
 801040c:	b008      	add	sp, #32
 801040e:	bd10      	pop	{r4, pc}
 8010410:	2400c73c 	.word	0x2400c73c

08010414 <prvTimerTask>:
{
 8010414:	b500      	push	{lr}
 8010416:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010418:	a801      	add	r0, sp, #4
 801041a:	f7ff fdd7 	bl	800ffcc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801041e:	9901      	ldr	r1, [sp, #4]
 8010420:	f7ff ff36 	bl	8010290 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8010424:	f7ff ff70 	bl	8010308 <prvProcessReceivedCommands>
	for( ;; )
 8010428:	e7f6      	b.n	8010418 <prvTimerTask+0x4>

0801042a <net_aton>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
int32_t net_aton(const char_t *ptr, net_ip_addr_t *addr)
{
 801042a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801042c:	b085      	sub	sp, #20
 801042e:	4684      	mov	ip, r0
 8010430:	460e      	mov	r6, r1
  uint32_t parts[4];
  uint32_t *pp = parts;
  int32_t ret = 1;
  int32_t done;

  c0 = *cp;
 8010432:	7803      	ldrb	r3, [r0, #0]
  done = 0;
 8010434:	2000      	movs	r0, #0
  int32_t ret = 1;
 8010436:	2501      	movs	r5, #1
  uint32_t *pp = parts;
 8010438:	466c      	mov	r4, sp
  uint32_t val = 0;
 801043a:	4601      	mov	r1, r0
 801043c:	e03e      	b.n	80104bc <net_aton+0x92>
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
        {
          ret = 0;
 801043e:	4605      	mov	r5, r0
          done = 1;
 8010440:	2001      	movs	r0, #1
 8010442:	e03b      	b.n	80104bc <net_aton+0x92>
      ret = 0;
 8010444:	4605      	mov	r5, r0
      done = 1;
 8010446:	2001      	movs	r0, #1
 8010448:	e038      	b.n	80104bc <net_aton+0x92>
        ++cp;
 801044a:	f10c 0201 	add.w	r2, ip, #1
        c0 = (char_t) * cp;
 801044e:	f89c 3001 	ldrb.w	r3, [ip, #1]
        if ((c0 == (char_t) 'x') || (c0 == (char_t) 'X'))
 8010452:	2b58      	cmp	r3, #88	; 0x58
 8010454:	bf18      	it	ne
 8010456:	2b78      	cmpne	r3, #120	; 0x78
 8010458:	d106      	bne.n	8010468 <net_aton+0x3e>
          c0 = (char_t) * cp;
 801045a:	f89c 3002 	ldrb.w	r3, [ip, #2]
          ++cp;
 801045e:	f10c 0c02 	add.w	ip, ip, #2
          base = 16;
 8010462:	f04f 0e10 	mov.w	lr, #16
 8010466:	e033      	b.n	80104d0 <net_aton+0xa6>
        ++cp;
 8010468:	4694      	mov	ip, r2
          base = 8;
 801046a:	f04f 0e08 	mov.w	lr, #8
 801046e:	e02f      	b.n	80104d0 <net_aton+0xa6>
          val = (val * base) + (uint32_t)c0 - (uint32_t) '0';
 8010470:	fb0e 3101 	mla	r1, lr, r1, r3
 8010474:	3930      	subs	r1, #48	; 0x30
          c0 = (char_t) * cp;
 8010476:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
        if (NET_ISDIGIT(c0))
 801047a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801047e:	b2d2      	uxtb	r2, r2
 8010480:	2a09      	cmp	r2, #9
 8010482:	d9f5      	bls.n	8010470 <net_aton+0x46>
        else if ((base == 16U) && NET_ISXDIGIT(c0))
 8010484:	f1be 0f10 	cmp.w	lr, #16
 8010488:	d115      	bne.n	80104b6 <net_aton+0x8c>
 801048a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801048e:	b2d2      	uxtb	r2, r2
 8010490:	2a05      	cmp	r2, #5
 8010492:	d904      	bls.n	801049e <net_aton+0x74>
 8010494:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 8010498:	b2ff      	uxtb	r7, r7
 801049a:	2f05      	cmp	r7, #5
 801049c:	d80b      	bhi.n	80104b6 <net_aton+0x8c>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 801049e:	0109      	lsls	r1, r1, #4
 80104a0:	2a19      	cmp	r2, #25
 80104a2:	d806      	bhi.n	80104b2 <net_aton+0x88>
 80104a4:	2261      	movs	r2, #97	; 0x61
 80104a6:	1a9b      	subs	r3, r3, r2
 80104a8:	330a      	adds	r3, #10
 80104aa:	4319      	orrs	r1, r3
          c0 = (char_t) * cp;
 80104ac:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80104b0:	e7e3      	b.n	801047a <net_aton+0x50>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 80104b2:	2241      	movs	r2, #65	; 0x41
 80104b4:	e7f7      	b.n	80104a6 <net_aton+0x7c>
      if (c0 == '.')
 80104b6:	2b2e      	cmp	r3, #46	; 0x2e
 80104b8:	d00c      	beq.n	80104d4 <net_aton+0xaa>
          c0 = (char_t) * cp;
        }
      }
      else
      {
        done = 1;
 80104ba:	2001      	movs	r0, #1
    if (done == 1)
 80104bc:	b9a0      	cbnz	r0, 80104e8 <net_aton+0xbe>
    if (!NET_ISDIGIT(c0))
 80104be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80104c2:	b2d2      	uxtb	r2, r2
 80104c4:	2a09      	cmp	r2, #9
 80104c6:	d8bd      	bhi.n	8010444 <net_aton+0x1a>
      if (c0 == '0')
 80104c8:	2b30      	cmp	r3, #48	; 0x30
 80104ca:	d0be      	beq.n	801044a <net_aton+0x20>
      base = 10;
 80104cc:	f04f 0e0a 	mov.w	lr, #10
          base = 8;
 80104d0:	2100      	movs	r1, #0
 80104d2:	e7d2      	b.n	801047a <net_aton+0x50>
        if (pp >= (parts + 3))
 80104d4:	aa03      	add	r2, sp, #12
 80104d6:	4294      	cmp	r4, r2
 80104d8:	d2b1      	bcs.n	801043e <net_aton+0x14>
          *pp = val;
 80104da:	f844 1b04 	str.w	r1, [r4], #4
          c0 = (char_t) * cp;
 80104de:	f89c 3001 	ldrb.w	r3, [ip, #1]
          ++cp;
 80104e2:	f10c 0c01 	add.w	ip, ip, #1
 80104e6:	e7e9      	b.n	80104bc <net_aton+0x92>
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (char_t)'\0') && (NET_ISSPACE((c0)) == false))
 80104e8:	b19b      	cbz	r3, 8010512 <net_aton+0xe8>
 80104ea:	2b0c      	cmp	r3, #12
 80104ec:	bf18      	it	ne
 80104ee:	2b20      	cmpne	r3, #32
 80104f0:	d00f      	beq.n	8010512 <net_aton+0xe8>
 80104f2:	2b0d      	cmp	r3, #13
 80104f4:	bf14      	ite	ne
 80104f6:	2200      	movne	r2, #0
 80104f8:	2201      	moveq	r2, #1
 80104fa:	2b0a      	cmp	r3, #10
 80104fc:	d009      	beq.n	8010512 <net_aton+0xe8>
 80104fe:	b942      	cbnz	r2, 8010512 <net_aton+0xe8>
 8010500:	2b0b      	cmp	r3, #11
 8010502:	bf14      	ite	ne
 8010504:	2200      	movne	r2, #0
 8010506:	2201      	moveq	r2, #1
 8010508:	2b09      	cmp	r3, #9
 801050a:	d002      	beq.n	8010512 <net_aton+0xe8>
 801050c:	b90a      	cbnz	r2, 8010512 <net_aton+0xe8>
  {
    ret = 0;
 801050e:	2500      	movs	r5, #0
 8010510:	e011      	b.n	8010536 <net_aton+0x10c>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 8010512:	466b      	mov	r3, sp
 8010514:	1ae3      	subs	r3, r4, r3
 8010516:	109b      	asrs	r3, r3, #2
 8010518:	2b03      	cmp	r3, #3
 801051a:	d834      	bhi.n	8010586 <net_aton+0x15c>
 801051c:	e8df f003 	tbb	[pc, r3]
 8010520:	180e0209 	.word	0x180e0209

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 8010524:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8010528:	d300      	bcc.n	801052c <net_aton+0x102>
        {
          ret = 0;
 801052a:	2500      	movs	r5, #0
        }
        val |= parts[0] << 24;
 801052c:	9b00      	ldr	r3, [sp, #0]
 801052e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        ret = 0;
        break;
    }
  }

  if (ret == 1)
 8010532:	2d01      	cmp	r5, #1
 8010534:	d018      	beq.n	8010568 <net_aton+0x13e>
    {
      addr->addr = NET_HTONL(val);
    }
  }
  return ret;
}
 8010536:	4628      	mov	r0, r5
 8010538:	b005      	add	sp, #20
 801053a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (val > 0xffffU)
 801053c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8010540:	d223      	bcs.n	801058a <net_aton+0x160>
        val |= (parts[0] << 24) | (parts[1] << 16);
 8010542:	9b01      	ldr	r3, [sp, #4]
 8010544:	041b      	lsls	r3, r3, #16
 8010546:	9a00      	ldr	r2, [sp, #0]
 8010548:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801054c:	4319      	orrs	r1, r3
        break;
 801054e:	e7f0      	b.n	8010532 <net_aton+0x108>
        if (val > 0xffU)
 8010550:	29ff      	cmp	r1, #255	; 0xff
 8010552:	d81c      	bhi.n	801058e <net_aton+0x164>
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8010554:	9b01      	ldr	r3, [sp, #4]
 8010556:	041b      	lsls	r3, r3, #16
 8010558:	9a00      	ldr	r2, [sp, #0]
 801055a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801055e:	9a02      	ldr	r2, [sp, #8]
 8010560:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010564:	4319      	orrs	r1, r3
        break;
 8010566:	e7e4      	b.n	8010532 <net_aton+0x108>
    if (addr != NULL)
 8010568:	2e00      	cmp	r6, #0
 801056a:	d0e4      	beq.n	8010536 <net_aton+0x10c>
      addr->addr = NET_HTONL(val);
 801056c:	0a0b      	lsrs	r3, r1, #8
 801056e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010572:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8010576:	020a      	lsls	r2, r1, #8
 8010578:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801057c:	4313      	orrs	r3, r2
 801057e:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8010582:	6031      	str	r1, [r6, #0]
 8010584:	e7d7      	b.n	8010536 <net_aton+0x10c>
    switch (pp - parts + 1)
 8010586:	2500      	movs	r5, #0
 8010588:	e7d5      	b.n	8010536 <net_aton+0x10c>
          ret = 0;
 801058a:	2500      	movs	r5, #0
 801058c:	e7d3      	b.n	8010536 <net_aton+0x10c>
          ret = 0;
 801058e:	2500      	movs	r5, #0
  return ret;
 8010590:	e7d1      	b.n	8010536 <net_aton+0x10c>

08010592 <net_get_ip_addr>:
  /*cstat -MISRAC2012-Rule-11.3 Cast */
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
  /*cstat +MISRAC2012-Rule-11.3 Cast */
  NET_COPY(ipaddr, addrv);
  return ipaddr;
}
 8010592:	6840      	ldr	r0, [r0, #4]
 8010594:	4770      	bx	lr
	...

08010598 <net_wifi_string_to_security>:
/**
  * @brief  Convert a string to a security enum value
  * @param  sec is a pointer to a string
  */
uint32_t net_wifi_string_to_security(char_t *sec)
{
 8010598:	b538      	push	{r3, r4, r5, lr}
 801059a:	4604      	mov	r4, r0
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
  if (strcmp(sec, "Open") == 0)
 801059c:	493d      	ldr	r1, [pc, #244]	; (8010694 <net_wifi_string_to_security+0xfc>)
 801059e:	f7ef fea7 	bl	80002f0 <strcmp>
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d071      	beq.n	801068a <net_wifi_string_to_security+0xf2>
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
 80105a6:	f04f 35ff 	mov.w	r5, #4294967295
  {
    ret = NET_WIFI_SM_OPEN;
  }
  if (strcmp(sec, "WEP-shared") == 0)
 80105aa:	493b      	ldr	r1, [pc, #236]	; (8010698 <net_wifi_string_to_security+0x100>)
 80105ac:	4620      	mov	r0, r4
 80105ae:	f7ef fe9f 	bl	80002f0 <strcmp>
 80105b2:	b908      	cbnz	r0, 80105b8 <net_wifi_string_to_security+0x20>
  {
    ret = NET_WIFI_SM_WEP_SHARED;
 80105b4:	f248 0501 	movw	r5, #32769	; 0x8001
  }
  if (strcmp(sec, "WPA-TKIP") == 0)
 80105b8:	4938      	ldr	r1, [pc, #224]	; (801069c <net_wifi_string_to_security+0x104>)
 80105ba:	4620      	mov	r0, r4
 80105bc:	f7ef fe98 	bl	80002f0 <strcmp>
 80105c0:	b900      	cbnz	r0, 80105c4 <net_wifi_string_to_security+0x2c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_PSK;
 80105c2:	4d37      	ldr	r5, [pc, #220]	; (80106a0 <net_wifi_string_to_security+0x108>)
  }
  if (strcmp(sec, "WPA-Mixed") == 0)
 80105c4:	4937      	ldr	r1, [pc, #220]	; (80106a4 <net_wifi_string_to_security+0x10c>)
 80105c6:	4620      	mov	r0, r4
 80105c8:	f7ef fe92 	bl	80002f0 <strcmp>
 80105cc:	b900      	cbnz	r0, 80105d0 <net_wifi_string_to_security+0x38>
  {
    ret = NET_WIFI_SM_WPA_MIXED_PSK;
 80105ce:	4d36      	ldr	r5, [pc, #216]	; (80106a8 <net_wifi_string_to_security+0x110>)
  }
  if (strcmp(sec, "WPA2-AES") == 0)
 80105d0:	4936      	ldr	r1, [pc, #216]	; (80106ac <net_wifi_string_to_security+0x114>)
 80105d2:	4620      	mov	r0, r4
 80105d4:	f7ef fe8c 	bl	80002f0 <strcmp>
 80105d8:	b900      	cbnz	r0, 80105dc <net_wifi_string_to_security+0x44>
  {
    ret = NET_WIFI_SM_WPA2_AES_PSK;
 80105da:	4d35      	ldr	r5, [pc, #212]	; (80106b0 <net_wifi_string_to_security+0x118>)
  }
  if (strcmp(sec, "WPA2-TKIP") == 0)
 80105dc:	4935      	ldr	r1, [pc, #212]	; (80106b4 <net_wifi_string_to_security+0x11c>)
 80105de:	4620      	mov	r0, r4
 80105e0:	f7ef fe86 	bl	80002f0 <strcmp>
 80105e4:	b900      	cbnz	r0, 80105e8 <net_wifi_string_to_security+0x50>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 80105e6:	4d34      	ldr	r5, [pc, #208]	; (80106b8 <net_wifi_string_to_security+0x120>)
  }
  if (strcmp(sec, "WPA2-Mixed") == 0)
 80105e8:	4934      	ldr	r1, [pc, #208]	; (80106bc <net_wifi_string_to_security+0x124>)
 80105ea:	4620      	mov	r0, r4
 80105ec:	f7ef fe80 	bl	80002f0 <strcmp>
 80105f0:	b900      	cbnz	r0, 80105f4 <net_wifi_string_to_security+0x5c>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 80105f2:	4d33      	ldr	r5, [pc, #204]	; (80106c0 <net_wifi_string_to_security+0x128>)
  }
  if (strcmp(sec, "WPA2-DBT") == 0)
 80105f4:	4933      	ldr	r1, [pc, #204]	; (80106c4 <net_wifi_string_to_security+0x12c>)
 80105f6:	4620      	mov	r0, r4
 80105f8:	f7ef fe7a 	bl	80002f0 <strcmp>
 80105fc:	b900      	cbnz	r0, 8010600 <net_wifi_string_to_security+0x68>
  {
    ret = NET_WIFI_SM_WPA2_FBT_PSK;
 80105fe:	4d32      	ldr	r5, [pc, #200]	; (80106c8 <net_wifi_string_to_security+0x130>)
  }
  if (strcmp(sec, "WPA3") == 0)
 8010600:	4932      	ldr	r1, [pc, #200]	; (80106cc <net_wifi_string_to_security+0x134>)
 8010602:	4620      	mov	r0, r4
 8010604:	f7ef fe74 	bl	80002f0 <strcmp>
 8010608:	b900      	cbnz	r0, 801060c <net_wifi_string_to_security+0x74>
  {
    ret = NET_WIFI_SM_WPA3_SAE;
 801060a:	4d31      	ldr	r5, [pc, #196]	; (80106d0 <net_wifi_string_to_security+0x138>)
  }
  if (strcmp(sec, "WPA3-WPA2") == 0)
 801060c:	4931      	ldr	r1, [pc, #196]	; (80106d4 <net_wifi_string_to_security+0x13c>)
 801060e:	4620      	mov	r0, r4
 8010610:	f7ef fe6e 	bl	80002f0 <strcmp>
 8010614:	b900      	cbnz	r0, 8010618 <net_wifi_string_to_security+0x80>
  {
    ret = NET_WIFI_SM_WPA3_WPA2_PSK;
 8010616:	4d30      	ldr	r5, [pc, #192]	; (80106d8 <net_wifi_string_to_security+0x140>)
  }

  if (strcmp(sec, "WPA-TKIP-Ent") == 0)
 8010618:	4930      	ldr	r1, [pc, #192]	; (80106dc <net_wifi_string_to_security+0x144>)
 801061a:	4620      	mov	r0, r4
 801061c:	f7ef fe68 	bl	80002f0 <strcmp>
 8010620:	b900      	cbnz	r0, 8010624 <net_wifi_string_to_security+0x8c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_ENT;
 8010622:	4d2f      	ldr	r5, [pc, #188]	; (80106e0 <net_wifi_string_to_security+0x148>)
  }
  if (strcmp(sec, "WPA-AES-Ent") == 0)
 8010624:	492f      	ldr	r1, [pc, #188]	; (80106e4 <net_wifi_string_to_security+0x14c>)
 8010626:	4620      	mov	r0, r4
 8010628:	f7ef fe62 	bl	80002f0 <strcmp>
 801062c:	b900      	cbnz	r0, 8010630 <net_wifi_string_to_security+0x98>
  {
    ret = NET_WIFI_SM_WPA_AES_ENT;
 801062e:	4d2e      	ldr	r5, [pc, #184]	; (80106e8 <net_wifi_string_to_security+0x150>)
  }
  if (strcmp(sec, "WPA2-TKIP-Ent") == 0)
 8010630:	492e      	ldr	r1, [pc, #184]	; (80106ec <net_wifi_string_to_security+0x154>)
 8010632:	4620      	mov	r0, r4
 8010634:	f7ef fe5c 	bl	80002f0 <strcmp>
 8010638:	b900      	cbnz	r0, 801063c <net_wifi_string_to_security+0xa4>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_ENT;
 801063a:	4d2d      	ldr	r5, [pc, #180]	; (80106f0 <net_wifi_string_to_security+0x158>)
  }
  if (strcmp(sec, "WPA2-AES-Ent") == 0)
 801063c:	492d      	ldr	r1, [pc, #180]	; (80106f4 <net_wifi_string_to_security+0x15c>)
 801063e:	4620      	mov	r0, r4
 8010640:	f7ef fe56 	bl	80002f0 <strcmp>
 8010644:	b900      	cbnz	r0, 8010648 <net_wifi_string_to_security+0xb0>
  {
    ret = NET_WIFI_SM_WPA2_AES_ENT;
 8010646:	4d2c      	ldr	r5, [pc, #176]	; (80106f8 <net_wifi_string_to_security+0x160>)
  }
  if (strcmp(sec, "WPA2-Mixed-Ent") == 0)
 8010648:	492c      	ldr	r1, [pc, #176]	; (80106fc <net_wifi_string_to_security+0x164>)
 801064a:	4620      	mov	r0, r4
 801064c:	f7ef fe50 	bl	80002f0 <strcmp>
 8010650:	b900      	cbnz	r0, 8010654 <net_wifi_string_to_security+0xbc>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_ENT;
 8010652:	4d2b      	ldr	r5, [pc, #172]	; (8010700 <net_wifi_string_to_security+0x168>)
  }
  if (strcmp(sec, "WPA-FBT-Ent") == 0)
 8010654:	492b      	ldr	r1, [pc, #172]	; (8010704 <net_wifi_string_to_security+0x16c>)
 8010656:	4620      	mov	r0, r4
 8010658:	f7ef fe4a 	bl	80002f0 <strcmp>
 801065c:	b900      	cbnz	r0, 8010660 <net_wifi_string_to_security+0xc8>
  {
    ret = NET_WIFI_SM_WPA2_FBT_ENT;
 801065e:	4d2a      	ldr	r5, [pc, #168]	; (8010708 <net_wifi_string_to_security+0x170>)
  }
  if (strcmp(sec, "IBS") == 0)
 8010660:	492a      	ldr	r1, [pc, #168]	; (801070c <net_wifi_string_to_security+0x174>)
 8010662:	4620      	mov	r0, r4
 8010664:	f7ef fe44 	bl	80002f0 <strcmp>
 8010668:	b908      	cbnz	r0, 801066e <net_wifi_string_to_security+0xd6>
  {
    ret = NET_WIFI_SM_IBSS_OPEN;
 801066a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  }
  if (strcmp(sec, "WPS") == 0)
 801066e:	4928      	ldr	r1, [pc, #160]	; (8010710 <net_wifi_string_to_security+0x178>)
 8010670:	4620      	mov	r0, r4
 8010672:	f7ef fe3d 	bl	80002f0 <strcmp>
 8010676:	b908      	cbnz	r0, 801067c <net_wifi_string_to_security+0xe4>
  {
    ret = NET_WIFI_SM_WPS_OPEN;
 8010678:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  }
  if (strcmp(sec, "WPS-AES") == 0)
 801067c:	4925      	ldr	r1, [pc, #148]	; (8010714 <net_wifi_string_to_security+0x17c>)
 801067e:	4620      	mov	r0, r4
 8010680:	f7ef fe36 	bl	80002f0 <strcmp>
 8010684:	b118      	cbz	r0, 801068e <net_wifi_string_to_security+0xf6>
  {
    ret = NET_WIFI_SM_WPS_SECURE;
  }

  return ret;
}
 8010686:	4628      	mov	r0, r5
 8010688:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_WIFI_SM_OPEN;
 801068a:	2500      	movs	r5, #0
 801068c:	e78d      	b.n	80105aa <net_wifi_string_to_security+0x12>
    ret = NET_WIFI_SM_WPS_SECURE;
 801068e:	4d22      	ldr	r5, [pc, #136]	; (8010718 <net_wifi_string_to_security+0x180>)
  return ret;
 8010690:	e7f9      	b.n	8010686 <net_wifi_string_to_security+0xee>
 8010692:	bf00      	nop
 8010694:	08023114 	.word	0x08023114
 8010698:	080233a0 	.word	0x080233a0
 801069c:	080233ac 	.word	0x080233ac
 80106a0:	00200002 	.word	0x00200002
 80106a4:	080233b8 	.word	0x080233b8
 80106a8:	00200006 	.word	0x00200006
 80106ac:	080233c4 	.word	0x080233c4
 80106b0:	00400004 	.word	0x00400004
 80106b4:	080233d0 	.word	0x080233d0
 80106b8:	00400002 	.word	0x00400002
 80106bc:	08023470 	.word	0x08023470
 80106c0:	00400006 	.word	0x00400006
 80106c4:	0802347c 	.word	0x0802347c
 80106c8:	40400004 	.word	0x40400004
 80106cc:	080233f4 	.word	0x080233f4
 80106d0:	01000004 	.word	0x01000004
 80106d4:	080233fc 	.word	0x080233fc
 80106d8:	01400004 	.word	0x01400004
 80106dc:	08023408 	.word	0x08023408
 80106e0:	02200002 	.word	0x02200002
 80106e4:	08023418 	.word	0x08023418
 80106e8:	02200004 	.word	0x02200004
 80106ec:	08023424 	.word	0x08023424
 80106f0:	02400002 	.word	0x02400002
 80106f4:	08023434 	.word	0x08023434
 80106f8:	02400004 	.word	0x02400004
 80106fc:	08023444 	.word	0x08023444
 8010700:	02400006 	.word	0x02400006
 8010704:	08023454 	.word	0x08023454
 8010708:	42400004 	.word	0x42400004
 801070c:	08023460 	.word	0x08023460
 8010710:	08023464 	.word	0x08023464
 8010714:	08023468 	.word	0x08023468
 8010718:	10000004 	.word	0x10000004

0801071c <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
   * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char_t *ssid)
{
 801071c:	b570      	push	{r4, r5, r6, lr}
 801071e:	460d      	mov	r5, r1
 8010720:	4614      	mov	r4, r2
  int32_t ret = NET_OK;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8010722:	f000 f861 	bl	80107e8 <netif_check>
  if (pnetif == NULL)
 8010726:	b150      	cbz	r0, 801073e <net_wifi_scan+0x22>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8010728:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 801072c:	7811      	ldrb	r1, [r2, #0]
 801072e:	b949      	cbnz	r1, 8010744 <net_wifi_scan+0x28>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 8010730:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010732:	6816      	ldr	r6, [r2, #0]
 8010734:	4622      	mov	r2, r4
 8010736:	4629      	mov	r1, r5
 8010738:	47b0      	blx	r6
 801073a:	b930      	cbnz	r0, 801074a <net_wifi_scan+0x2e>
      ret = NET_ERROR_GENERIC;
    }
  }

  return ret;
}
 801073c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 801073e:	f06f 0003 	mvn.w	r0, #3
 8010742:	e7fb      	b.n	801073c <net_wifi_scan+0x20>
    ret = NET_ERROR_PARAMETER;
 8010744:	f06f 0003 	mvn.w	r0, #3
 8010748:	e7f8      	b.n	801073c <net_wifi_scan+0x20>
      ret = NET_ERROR_GENERIC;
 801074a:	f06f 001c 	mvn.w	r0, #28
  return ret;
 801074e:	e7f5      	b.n	801073c <net_wifi_scan+0x20>

08010750 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 8010750:	b570      	push	{r4, r5, r6, lr}
 8010752:	460d      	mov	r5, r1
 8010754:	4614      	mov	r4, r2
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8010756:	f000 f847 	bl	80107e8 <netif_check>
  if (pnetif == NULL)
 801075a:	b148      	cbz	r0, 8010770 <net_wifi_get_scan_results+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 801075c:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8010760:	7811      	ldrb	r1, [r2, #0]
 8010762:	b941      	cbnz	r1, 8010776 <net_wifi_get_scan_results+0x26>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 8010764:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010766:	6856      	ldr	r6, [r2, #4]
 8010768:	4622      	mov	r2, r4
 801076a:	4629      	mov	r1, r5
 801076c:	47b0      	blx	r6
  }
  return ret;
}
 801076e:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 8010770:	f06f 0003 	mvn.w	r0, #3
 8010774:	e7fb      	b.n	801076e <net_wifi_get_scan_results+0x1e>
    ret = NET_ERROR_PARAMETER;
 8010776:	f06f 0003 	mvn.w	r0, #3
  return ret;
 801077a:	e7f8      	b.n	801076e <net_wifi_get_scan_results+0x1e>

0801077c <net_wifi_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
  pnetif->pdrv->extension.wifi->credentials = credentials;
 801077c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8010780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010782:	6159      	str	r1, [r3, #20]
  return NET_OK;
}
 8010784:	2000      	movs	r0, #0
 8010786:	4770      	bx	lr

08010788 <netif_add_to_list>:
#endif /* IO */

static void netif_add_to_list(net_if_handle_t *pnetif)
{
  LOCK_NETIF_LIST();
  if (net_if_list == NULL)
 8010788:	4b05      	ldr	r3, [pc, #20]	; (80107a0 <netif_add_to_list+0x18>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	b12b      	cbz	r3, 801079a <netif_add_to_list+0x12>
  else
  {
    /*add it to end of the list*/
    net_if_handle_t *plastnetif;
    plastnetif = net_if_list;
    while (plastnetif->next != NULL)
 801078e:	461a      	mov	r2, r3
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d1fb      	bne.n	801078e <netif_add_to_list+0x6>
    {
      plastnetif = plastnetif->next;
    }
    plastnetif->next = pnetif;
 8010796:	6010      	str	r0, [r2, #0]
  }
  UNLOCK_NETIF_LIST();
}
 8010798:	4770      	bx	lr
    net_if_list = pnetif;
 801079a:	4b01      	ldr	r3, [pc, #4]	; (80107a0 <netif_add_to_list+0x18>)
 801079c:	6018      	str	r0, [r3, #0]
 801079e:	4770      	bx	lr
 80107a0:	2400c744 	.word	0x2400c744

080107a4 <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 80107a4:	b510      	push	{r4, lr}
 80107a6:	b082      	sub	sp, #8
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 80107a8:	2300      	movs	r3, #0
 80107aa:	9300      	str	r3, [sp, #0]
  NET_ZERO(ipaddr);
 80107ac:	9301      	str	r3, [sp, #4]
  if (addr != NULL)
 80107ae:	b110      	cbz	r0, 80107b6 <net_if_find+0x12>
  {
    ipaddr = net_get_ip_addr(addr);
 80107b0:	f7ff feef 	bl	8010592 <net_get_ip_addr>
 80107b4:	9001      	str	r0, [sp, #4]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 80107b6:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <net_if_find+0x40>)
 80107b8:	681c      	ldr	r4, [r3, #0]

  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 80107ba:	2204      	movs	r2, #4
 80107bc:	4669      	mov	r1, sp
 80107be:	eb0d 0002 	add.w	r0, sp, r2
 80107c2:	f00f ff95 	bl	80206f0 <memcmp>
 80107c6:	b148      	cbz	r0, 80107dc <net_if_find+0x38>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 80107c8:	2204      	movs	r2, #4
 80107ca:	eb0d 0102 	add.w	r1, sp, r2
 80107ce:	18a0      	adds	r0, r4, r2
 80107d0:	f00f ff8e 	bl	80206f0 <memcmp>
 80107d4:	b110      	cbz	r0, 80107dc <net_if_find+0x38>
      {
        break;
      }
      ptr = ptr->next;
 80107d6:	6824      	ldr	r4, [r4, #0]
    } while (ptr != NULL);
 80107d8:	2c00      	cmp	r4, #0
 80107da:	d1f5      	bne.n	80107c8 <net_if_find+0x24>
  }
  UNLOCK_NETIF_LIST();
  return ptr;
}
 80107dc:	4620      	mov	r0, r4
 80107de:	b002      	add	sp, #8
 80107e0:	bd10      	pop	{r4, pc}
 80107e2:	bf00      	nop
 80107e4:	2400c744 	.word	0x2400c744

080107e8 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 80107e8:	b508      	push	{r3, lr}
  net_if_handle_t *pnetif = pnetif_in;
  if (pnetif == NULL)
 80107ea:	b100      	cbz	r0, 80107ee <netif_check+0x6>
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
}
 80107ec:	bd08      	pop	{r3, pc}
    pnetif = net_if_find(NULL);
 80107ee:	2000      	movs	r0, #0
 80107f0:	f7ff ffd8 	bl	80107a4 <net_if_find>
    if (pnetif == NULL)
 80107f4:	e7fa      	b.n	80107ec <netif_check+0x4>

080107f6 <net_if_wait_state>:
  * @retval 0 in case of success, an error code otherwise
  */
extern uint32_t HAL_GetTick(void);

int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 80107f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f8:	4604      	mov	r4, r0
 80107fa:	460d      	mov	r5, r1
 80107fc:	4617      	mov	r7, r2
  int32_t  ret = NET_OK;
  __IO net_state_t      *p;
  p = &pnetif->state;

  uint32_t start_time = HAL_GetTick();
 80107fe:	f7f8 fcef 	bl	80091e0 <HAL_GetTick>
 8010802:	4606      	mov	r6, r0
  while (*p != state)
 8010804:	e005      	b.n	8010812 <net_if_wait_state+0x1c>
    if (HAL_GetTick() >= (start_time + timeout))
    {
      ret = NET_TIMEOUT;
      break;
    }
    WAIT_STATE_CHANGE(timeout);
 8010806:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 801080a:	695b      	ldr	r3, [r3, #20]
 801080c:	210a      	movs	r1, #10
 801080e:	4620      	mov	r0, r4
 8010810:	4798      	blx	r3
  while (*p != state)
 8010812:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 8010816:	b2db      	uxtb	r3, r3
 8010818:	42ab      	cmp	r3, r5
 801081a:	d007      	beq.n	801082c <net_if_wait_state+0x36>
    if (HAL_GetTick() >= (start_time + timeout))
 801081c:	f7f8 fce0 	bl	80091e0 <HAL_GetTick>
 8010820:	19f3      	adds	r3, r6, r7
 8010822:	4298      	cmp	r0, r3
 8010824:	d3ef      	bcc.n	8010806 <net_if_wait_state+0x10>
      ret = NET_TIMEOUT;
 8010826:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret;
 801082a:	e000      	b.n	801082e <net_if_wait_state+0x38>
  int32_t  ret = NET_OK;
 801082c:	2000      	movs	r0, #0

}
 801082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010830 <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void  *event_data)
{
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8010830:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010834:	b128      	cbz	r0, 8010842 <net_if_notify+0x12>
{
 8010836:	b510      	push	{r4, lr}
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8010838:	6804      	ldr	r4, [r0, #0]
 801083a:	b10c      	cbz	r4, 8010840 <net_if_notify+0x10>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 801083c:	6840      	ldr	r0, [r0, #4]
 801083e:	47a0      	blx	r4
  }
}
 8010840:	bd10      	pop	{r4, pc}
 8010842:	4770      	bx	lr

08010844 <net_if_init>:
    net_init_locks();
    net_initialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (pnetif != NULL)
 8010844:	b168      	cbz	r0, 8010862 <net_if_init+0x1e>
{
 8010846:	b538      	push	{r3, r4, r5, lr}
 8010848:	460d      	mov	r5, r1
 801084a:	4604      	mov	r4, r0
  {
    pnetif->event_handler = event_handler;
 801084c:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    pnetif->state = NET_STATE_INITIALIZED;
 8010850:	2301      	movs	r3, #1
 8010852:	f880 30ea 	strb.w	r3, [r0, #234]	; 0xea
    netif_add_to_list(pnetif);
 8010856:	f7ff ff97 	bl	8010788 <netif_add_to_list>
    ret = (*driver_init)(pnetif);
 801085a:	4620      	mov	r0, r4
 801085c:	47a8      	blx	r5
    if (NET_OK != ret)
 801085e:	b918      	cbnz	r0, 8010868 <net_if_init+0x24>
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
  }
  return ret;
}
 8010860:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 8010862:	f06f 0003 	mvn.w	r0, #3
}
 8010866:	4770      	bx	lr
      ret = NET_ERROR_INTERFACE_FAILURE;
 8010868:	f06f 0010 	mvn.w	r0, #16
  return ret;
 801086c:	e7f8      	b.n	8010860 <net_if_init+0x1c>

0801086e <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 801086e:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 8010870:	2101      	movs	r1, #1
 8010872:	f000 f8ab 	bl	80109cc <net_state_manage_event>
}
 8010876:	bd08      	pop	{r3, pc}

08010878 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 8010878:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 801087a:	2102      	movs	r1, #2
 801087c:	f000 f8a6 	bl	80109cc <net_state_manage_event>
}
 8010880:	bd08      	pop	{r3, pc}

08010882 <net_if_disconnect>:
  * @brief  Disconnect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_disconnect(net_if_handle_t *pnetif)
{
 8010882:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_DISCONNECT);
 8010884:	2103      	movs	r1, #3
 8010886:	f000 f8a1 	bl	80109cc <net_state_manage_event>
}
 801088a:	bd08      	pop	{r3, pc}

0801088c <set_state>:
  "NET_STATE_CONNECTION_LOST",
};
#endif /* DEBUGSTATE */

static void   set_state(net_if_handle_t *pnetif, net_state_t state)
{
 801088c:	b508      	push	{r3, lr}
 801088e:	460a      	mov	r2, r1
  pnetif->state = state;
 8010890:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 8010894:	2300      	movs	r3, #0
 8010896:	4619      	mov	r1, r3
 8010898:	f7ff ffca 	bl	8010830 <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 801089c:	bd08      	pop	{r3, pc}

0801089e <net_state_initialized>:


static  int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 801089e:	b538      	push	{r3, r4, r5, lr}
 80108a0:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 80108a2:	2901      	cmp	r1, #1
 80108a4:	d004      	beq.n	80108b0 <net_state_initialized+0x12>
 80108a6:	2905      	cmp	r1, #5
 80108a8:	d010      	beq.n	80108cc <net_state_initialized+0x2e>
 80108aa:	2500      	movs	r5, #0

    default:
      break;
  }
  return ret;
}
 80108ac:	4628      	mov	r0, r5
 80108ae:	bd38      	pop	{r3, r4, r5, pc}
      set_state(pnetif, NET_STATE_STARTING);
 80108b0:	2102      	movs	r1, #2
 80108b2:	f7ff ffeb 	bl	801088c <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 80108b6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	4620      	mov	r0, r4
 80108be:	4798      	blx	r3
      if (NET_OK != ret)
 80108c0:	4605      	mov	r5, r0
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d0f2      	beq.n	80108ac <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 80108c6:	f06f 0510 	mvn.w	r5, #16
 80108ca:	e7ef      	b.n	80108ac <net_state_initialized+0xe>
      ret = pnetif->pdrv->if_deinit(pnetif);
 80108cc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	4798      	blx	r3
 80108d4:	4605      	mov	r5, r0
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 80108d6:	2100      	movs	r1, #0
 80108d8:	4620      	mov	r0, r4
 80108da:	f7ff ffd7 	bl	801088c <set_state>
      if (NET_OK != ret)
 80108de:	2d00      	cmp	r5, #0
 80108e0:	d0e4      	beq.n	80108ac <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 80108e2:	f06f 0510 	mvn.w	r5, #16
  return ret;
 80108e6:	e7e1      	b.n	80108ac <net_state_initialized+0xe>

080108e8 <net_state_starting>:

static  int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t  event)
{
  int32_t       ret = NET_OK;
  switch (event)
 80108e8:	2907      	cmp	r1, #7
 80108ea:	d001      	beq.n	80108f0 <net_state_starting+0x8>

    default:
      break;
  }
  return ret;
}
 80108ec:	2000      	movs	r0, #0
 80108ee:	4770      	bx	lr
{
 80108f0:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 80108f2:	2103      	movs	r1, #3
 80108f4:	f7ff ffca 	bl	801088c <set_state>
}
 80108f8:	2000      	movs	r0, #0
 80108fa:	bd08      	pop	{r3, pc}

080108fc <net_state_ready>:

static  int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 80108fc:	b510      	push	{r4, lr}
 80108fe:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8010900:	2902      	cmp	r1, #2
 8010902:	d003      	beq.n	801090c <net_state_ready+0x10>
 8010904:	2904      	cmp	r1, #4
 8010906:	d00e      	beq.n	8010926 <net_state_ready+0x2a>
 8010908:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 801090a:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_CONNECTING);
 801090c:	2104      	movs	r1, #4
 801090e:	f7ff ffbd 	bl	801088c <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 8010912:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010916:	699b      	ldr	r3, [r3, #24]
 8010918:	4620      	mov	r0, r4
 801091a:	4798      	blx	r3
      if (NET_OK != ret)
 801091c:	2800      	cmp	r0, #0
 801091e:	d0f4      	beq.n	801090a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8010920:	f06f 0010 	mvn.w	r0, #16
 8010924:	e7f1      	b.n	801090a <net_state_ready+0xe>
      set_state(pnetif, NET_STATE_STOPPING);
 8010926:	2106      	movs	r1, #6
 8010928:	f7ff ffb0 	bl	801088c <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 801092c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010930:	691b      	ldr	r3, [r3, #16]
 8010932:	4620      	mov	r0, r4
 8010934:	4798      	blx	r3
      if (NET_OK != ret)
 8010936:	2800      	cmp	r0, #0
 8010938:	d0e7      	beq.n	801090a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 801093a:	f06f 0010 	mvn.w	r0, #16
  return ret;
 801093e:	e7e4      	b.n	801090a <net_state_ready+0xe>

08010940 <net_state_connecting>:

static  int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t  event)
{
 8010940:	b508      	push	{r3, lr}
  int32_t       ret = NET_OK;
  switch (event)
 8010942:	2903      	cmp	r1, #3
 8010944:	d006      	beq.n	8010954 <net_state_connecting+0x14>
 8010946:	290a      	cmp	r1, #10
 8010948:	d102      	bne.n	8010950 <net_state_connecting+0x10>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 801094a:	2105      	movs	r1, #5
 801094c:	f7ff ff9e 	bl	801088c <set_state>

    default:
      break;
  }
  return ret;
}
 8010950:	2000      	movs	r0, #0
 8010952:	bd08      	pop	{r3, pc}
      set_state(pnetif, NET_STATE_READY);
 8010954:	2103      	movs	r1, #3
 8010956:	f7ff ff99 	bl	801088c <set_state>
      break;
 801095a:	e7f9      	b.n	8010950 <net_state_connecting+0x10>

0801095c <net_state_connected>:

static  int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 801095c:	b510      	push	{r4, lr}
 801095e:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8010960:	2903      	cmp	r1, #3
 8010962:	d003      	beq.n	801096c <net_state_connected+0x10>
 8010964:	2909      	cmp	r1, #9
 8010966:	d00e      	beq.n	8010986 <net_state_connected+0x2a>
 8010968:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 801096a:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_DISCONNECTING);
 801096c:	2107      	movs	r1, #7
 801096e:	f7ff ff8d 	bl	801088c <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 8010972:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010976:	69db      	ldr	r3, [r3, #28]
 8010978:	4620      	mov	r0, r4
 801097a:	4798      	blx	r3
      if (NET_OK != ret)
 801097c:	2800      	cmp	r0, #0
 801097e:	d0f4      	beq.n	801096a <net_state_connected+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8010980:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8010984:	e7f1      	b.n	801096a <net_state_connected+0xe>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 8010986:	2108      	movs	r1, #8
 8010988:	f7ff ff80 	bl	801088c <set_state>
  int32_t       ret = NET_OK;
 801098c:	2000      	movs	r0, #0
      break;
 801098e:	e7ec      	b.n	801096a <net_state_connected+0xe>

08010990 <net_state_disconnecting>:

static  int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8010990:	2907      	cmp	r1, #7
 8010992:	d001      	beq.n	8010998 <net_state_disconnecting+0x8>

    default:
      break;
  }
  return ret;
}
 8010994:	2000      	movs	r0, #0
 8010996:	4770      	bx	lr
{
 8010998:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 801099a:	2103      	movs	r1, #3
 801099c:	f7ff ff76 	bl	801088c <set_state>
}
 80109a0:	2000      	movs	r0, #0
 80109a2:	bd08      	pop	{r3, pc}

080109a4 <net_state_connection_lost>:
}

static  int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 80109a4:	2908      	cmp	r1, #8
 80109a6:	d001      	beq.n	80109ac <net_state_connection_lost+0x8>

    default:
      break;
  }
  return ret;
}
 80109a8:	2000      	movs	r0, #0
 80109aa:	4770      	bx	lr
{
 80109ac:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_CONNECTED);
 80109ae:	2105      	movs	r1, #5
 80109b0:	f7ff ff6c 	bl	801088c <set_state>
}
 80109b4:	2000      	movs	r0, #0
 80109b6:	bd08      	pop	{r3, pc}

080109b8 <net_state_stopping>:
  switch (event)
 80109b8:	2906      	cmp	r1, #6
 80109ba:	d001      	beq.n	80109c0 <net_state_stopping+0x8>
}
 80109bc:	2000      	movs	r0, #0
 80109be:	4770      	bx	lr
{
 80109c0:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_INITIALIZED);
 80109c2:	2101      	movs	r1, #1
 80109c4:	f7ff ff62 	bl	801088c <set_state>
}
 80109c8:	2000      	movs	r0, #0
 80109ca:	bd08      	pop	{r3, pc}

080109cc <net_state_manage_event>:




int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 80109cc:	b510      	push	{r4, lr}
 80109ce:	460c      	mov	r4, r1
  int32_t       ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 80109d0:	f7ff ff0a 	bl	80107e8 <netif_check>
  if (pnetif == NULL)
 80109d4:	b350      	cbz	r0, 8010a2c <net_state_manage_event+0x60>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 80109d6:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 80109da:	3b01      	subs	r3, #1
 80109dc:	2b07      	cmp	r3, #7
 80109de:	d828      	bhi.n	8010a32 <net_state_manage_event+0x66>
 80109e0:	e8df f003 	tbb	[pc, r3]
 80109e4:	100c0804 	.word	0x100c0804
 80109e8:	1c182014 	.word	0x1c182014
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 80109ec:	4621      	mov	r1, r4
 80109ee:	f7ff ff56 	bl	801089e <net_state_initialized>
        ret = NET_ERROR_INVALID_STATE;
        break;
    }
  }
  return ret;
}
 80109f2:	bd10      	pop	{r4, pc}
        ret = net_state_starting(pnetif, event);
 80109f4:	4621      	mov	r1, r4
 80109f6:	f7ff ff77 	bl	80108e8 <net_state_starting>
        break;
 80109fa:	e7fa      	b.n	80109f2 <net_state_manage_event+0x26>
        ret = net_state_ready(pnetif, event);
 80109fc:	4621      	mov	r1, r4
 80109fe:	f7ff ff7d 	bl	80108fc <net_state_ready>
        break;
 8010a02:	e7f6      	b.n	80109f2 <net_state_manage_event+0x26>
        ret = net_state_connecting(pnetif, event);
 8010a04:	4621      	mov	r1, r4
 8010a06:	f7ff ff9b 	bl	8010940 <net_state_connecting>
        break;
 8010a0a:	e7f2      	b.n	80109f2 <net_state_manage_event+0x26>
        ret = net_state_connected(pnetif, event);
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	f7ff ffa5 	bl	801095c <net_state_connected>
        break;
 8010a12:	e7ee      	b.n	80109f2 <net_state_manage_event+0x26>
        ret = net_state_disconnecting(pnetif, event);
 8010a14:	4621      	mov	r1, r4
 8010a16:	f7ff ffbb 	bl	8010990 <net_state_disconnecting>
        break;
 8010a1a:	e7ea      	b.n	80109f2 <net_state_manage_event+0x26>
        ret = net_state_connection_lost(pnetif, event);
 8010a1c:	4621      	mov	r1, r4
 8010a1e:	f7ff ffc1 	bl	80109a4 <net_state_connection_lost>
        break;
 8010a22:	e7e6      	b.n	80109f2 <net_state_manage_event+0x26>
        ret = net_state_stopping(pnetif, event);
 8010a24:	4621      	mov	r1, r4
 8010a26:	f7ff ffc7 	bl	80109b8 <net_state_stopping>
        break;
 8010a2a:	e7e2      	b.n	80109f2 <net_state_manage_event+0x26>
    ret = NET_ERROR_PARAMETER;
 8010a2c:	f06f 0003 	mvn.w	r0, #3
 8010a30:	e7df      	b.n	80109f2 <net_state_manage_event+0x26>
    switch (pnetif->state)
 8010a32:	f06f 001b 	mvn.w	r0, #27
  return ret;
 8010a36:	e7dc      	b.n	80109f2 <net_state_manage_event+0x26>

08010a38 <castcontext>:
{
  /*cstat -MISRAC2012-Rule-11.5 */
  return (ES_WIFIObject_t *)context;
  /*cstat +MISRAC2012-Rule-11.5 */

}
 8010a38:	4770      	bx	lr

08010a3a <cast2sockaddr_in>:
{
  /*cstat -MISRAC2012-Rule-11.3 -MISRAC2012-Rule-11.8 */
  return (sockaddr_in_t *) addr;
  /*cstat +MISRAC2012-Rule-11.3 +MISRAC2012-Rule-11.8 */

}
 8010a3a:	4770      	bx	lr

08010a3c <es_wifi_socket>:
static int32_t es_wifi_socket(int32_t domain, int32_t type, int32_t protocol_in)
{
  int32_t ret = NET_OK;
  int32_t protocol = protocol_in;

  if (domain != NET_AF_INET)
 8010a3c:	2802      	cmp	r0, #2
 8010a3e:	d13b      	bne.n	8010ab8 <es_wifi_socket+0x7c>
    ret = NET_ERROR_UNSUPPORTED;
  }
  else
  {
    /* currently only SOCK_DGRAM and SOCK_STREAM are supported */
    if ((type != (int32_t) NET_SOCK_STREAM) && (type != (int32_t) NET_SOCK_DGRAM))
 8010a40:	1e4b      	subs	r3, r1, #1
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d83b      	bhi.n	8010abe <es_wifi_socket+0x82>
      ret = NET_ERROR_UNSUPPORTED;
    }
    else
    {
      /* Only support PROT_IP/TCP/UDP/IPV4 are supported */
      if ((protocol != NET_IPPROTO_TCP) && (protocol != NET_IPPROTO_UDP))
 8010a46:	2a06      	cmp	r2, #6
 8010a48:	bf18      	it	ne
 8010a4a:	2a11      	cmpne	r2, #17
 8010a4c:	d004      	beq.n	8010a58 <es_wifi_socket+0x1c>
      {
        if (type == (int32_t) NET_SOCK_STREAM)
 8010a4e:	2901      	cmp	r1, #1
 8010a50:	d030      	beq.n	8010ab4 <es_wifi_socket+0x78>
        {
          protocol = NET_IPPROTO_TCP;
        }
        /*cstat -MISRAC2012-Rule-14.3_a */
        else if (type == (int32_t) NET_SOCK_DGRAM)
 8010a52:	2902      	cmp	r1, #2
 8010a54:	d113      	bne.n	8010a7e <es_wifi_socket+0x42>
          /*cstat +MISRAC2012-Rule-14.3_a */
        {
          protocol = NET_IPPROTO_UDP;
 8010a56:	2211      	movs	r2, #17
 8010a58:	2000      	movs	r0, #0

  if (ret == NET_OK)
  {
    ret = NET_ERROR_INVALID_SOCKET;

    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8010a5a:	2803      	cmp	r0, #3
 8010a5c:	dc32      	bgt.n	8010ac4 <es_wifi_socket+0x88>
{
 8010a5e:	b410      	push	{r4}
    {
      if (WifiChannel[i].status == WIFI_FREE_SOCKET)
 8010a60:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010a64:	4c19      	ldr	r4, [pc, #100]	; (8010acc <es_wifi_socket+0x90>)
 8010a66:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010a6a:	785b      	ldrb	r3, [r3, #1]
 8010a6c:	b153      	cbz	r3, 8010a84 <es_wifi_socket+0x48>
    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8010a6e:	3001      	adds	r0, #1
 8010a70:	2803      	cmp	r0, #3
 8010a72:	ddf5      	ble.n	8010a60 <es_wifi_socket+0x24>
    ret = NET_ERROR_INVALID_SOCKET;
 8010a74:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return ret;
}
 8010a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a7c:	4770      	bx	lr
          ret = NET_ERROR_UNSUPPORTED;
 8010a7e:	f06f 0002 	mvn.w	r0, #2
 8010a82:	4770      	bx	lr
        WifiChannel[i].status = WIFI_ALLOCATED_SOCKET;
 8010a84:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010a88:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010a8c:	2401      	movs	r4, #1
 8010a8e:	705c      	strb	r4, [r3, #1]
        if (type == (int32_t) NET_SOCK_DGRAM)
 8010a90:	2902      	cmp	r1, #2
 8010a92:	d007      	beq.n	8010aa4 <es_wifi_socket+0x68>
        WifiChannel[i].protocol        = (uint8_t) protocol;
 8010a94:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010a98:	4c0c      	ldr	r4, [pc, #48]	; (8010acc <es_wifi_socket+0x90>)
 8010a9a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010a9e:	709a      	strb	r2, [r3, #2]
        WifiChannel[i].type            = (uint8_t) type;
 8010aa0:	70d9      	strb	r1, [r3, #3]
        break;
 8010aa2:	e7e9      	b.n	8010a78 <es_wifi_socket+0x3c>
          WifiChannel[i].status |= WIFI_SEND_OK | WIFI_RECV_OK;
 8010aa4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010aa8:	4c08      	ldr	r4, [pc, #32]	; (8010acc <es_wifi_socket+0x90>)
 8010aaa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010aae:	240d      	movs	r4, #13
 8010ab0:	705c      	strb	r4, [r3, #1]
 8010ab2:	e7ef      	b.n	8010a94 <es_wifi_socket+0x58>
          protocol = NET_IPPROTO_TCP;
 8010ab4:	2206      	movs	r2, #6
 8010ab6:	e7cf      	b.n	8010a58 <es_wifi_socket+0x1c>
    ret = NET_ERROR_UNSUPPORTED;
 8010ab8:	f06f 0002 	mvn.w	r0, #2
 8010abc:	4770      	bx	lr
      ret = NET_ERROR_UNSUPPORTED;
 8010abe:	f06f 0002 	mvn.w	r0, #2
  return ret;
 8010ac2:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 8010ac4:	f06f 0005 	mvn.w	r0, #5
}
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	2400c748 	.word	0x2400c748

08010ad0 <es_wifi_bind>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
static int32_t es_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 8010ad0:	b570      	push	{r4, r5, r6, lr}
 8010ad2:	4604      	mov	r4, r0
  int32_t ret;
  sockaddr_in_t *source;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8010ad4:	2803      	cmp	r0, #3
 8010ad6:	d826      	bhi.n	8010b26 <es_wifi_bind+0x56>
 8010ad8:	4608      	mov	r0, r1
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    /* STREAM sockets cannot be bound after connection. */
    if ((WifiChannel [sock].status == WIFI_ALLOCATED_SOCKET)
 8010ada:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8010ade:	4d18      	ldr	r5, [pc, #96]	; (8010b40 <es_wifi_bind+0x70>)
 8010ae0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8010ae4:	785d      	ldrb	r5, [r3, #1]
 8010ae6:	2d01      	cmp	r5, #1
 8010ae8:	d00a      	beq.n	8010b00 <es_wifi_bind+0x30>
        || (((WifiChannel [sock].status & WIFI_ALLOCATED_SOCKET) != 0U)
 8010aea:	f015 0f01 	tst.w	r5, #1
 8010aee:	d01d      	beq.n	8010b2c <es_wifi_bind+0x5c>
            && ((uint8_t) WifiChannel [sock].type == (uint8_t) NET_SOCK_DGRAM)))
 8010af0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8010af4:	4e12      	ldr	r6, [pc, #72]	; (8010b40 <es_wifi_bind+0x70>)
 8010af6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8010afa:	78db      	ldrb	r3, [r3, #3]
 8010afc:	2b02      	cmp	r3, #2
 8010afe:	d118      	bne.n	8010b32 <es_wifi_bind+0x62>
    {
      if (addrlen == sizeof(sockaddr_in_t))
 8010b00:	2a10      	cmp	r2, #16
 8010b02:	d119      	bne.n	8010b38 <es_wifi_bind+0x68>
      {
        source = cast2sockaddr_in(addr);
 8010b04:	f7ff ff99 	bl	8010a3a <cast2sockaddr_in>
        WifiChannel [sock].localport = NET_NTOHS(source->sin_port);
 8010b08:	8841      	ldrh	r1, [r0, #2]
 8010b0a:	ba49      	rev16	r1, r1
 8010b0c:	4b0c      	ldr	r3, [pc, #48]	; (8010b40 <es_wifi_bind+0x70>)
 8010b0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8010b12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010b16:	8091      	strh	r1, [r2, #4]
        WifiChannel [sock].localaddress = source->sin_addr.s_addr;
 8010b18:	6841      	ldr	r1, [r0, #4]
 8010b1a:	6091      	str	r1, [r2, #8]
        WifiChannel [sock].status |= WIFI_BIND_SOCKET;
 8010b1c:	f045 0502 	orr.w	r5, r5, #2
 8010b20:	7055      	strb	r5, [r2, #1]
        ret = NET_OK;
 8010b22:	2000      	movs	r0, #0
    {
      ret = NET_ERROR_INVALID_SOCKET;
    }
  }
  return ret;
}
 8010b24:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 8010b26:	f06f 0005 	mvn.w	r0, #5
 8010b2a:	e7fb      	b.n	8010b24 <es_wifi_bind+0x54>
      ret = NET_ERROR_INVALID_SOCKET;
 8010b2c:	f06f 0005 	mvn.w	r0, #5
 8010b30:	e7f8      	b.n	8010b24 <es_wifi_bind+0x54>
 8010b32:	f06f 0005 	mvn.w	r0, #5
 8010b36:	e7f5      	b.n	8010b24 <es_wifi_bind+0x54>
        ret = NET_ERROR_PARAMETER;
 8010b38:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8010b3c:	e7f2      	b.n	8010b24 <es_wifi_bind+0x54>
 8010b3e:	bf00      	nop
 8010b40:	2400c748 	.word	0x2400c748

08010b44 <es_wifi_shutdown>:
  * @retval socket status
  */
static int32_t es_wifi_shutdown(int32_t sock, int32_t mode)
{
  int32_t       ret;
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8010b44:	2803      	cmp	r0, #3
 8010b46:	d82f      	bhi.n	8010ba8 <es_wifi_shutdown+0x64>
  {
    ret =  NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    if ((WifiChannel[sock].status &  WIFI_CONNECTED_SOCKET) != 0U)
 8010b48:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010b4c:	4a19      	ldr	r2, [pc, #100]	; (8010bb4 <es_wifi_shutdown+0x70>)
 8010b4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b52:	785b      	ldrb	r3, [r3, #1]
 8010b54:	f013 0f10 	tst.w	r3, #16
 8010b58:	d029      	beq.n	8010bae <es_wifi_shutdown+0x6a>
{
 8010b5a:	b410      	push	{r4}
    {
      if (mode == NET_SHUTDOWN_R)
 8010b5c:	b939      	cbnz	r1, 8010b6e <es_wifi_shutdown+0x2a>
      {
        WifiChannel[sock].status &=  ~WIFI_RECV_OK;
 8010b5e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010b62:	4c14      	ldr	r4, [pc, #80]	; (8010bb4 <es_wifi_shutdown+0x70>)
 8010b64:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8010b68:	f023 0308 	bic.w	r3, r3, #8
 8010b6c:	7053      	strb	r3, [r2, #1]
      }
      if (mode == NET_SHUTDOWN_W)
 8010b6e:	2901      	cmp	r1, #1
 8010b70:	d005      	beq.n	8010b7e <es_wifi_shutdown+0x3a>
      {
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
      }
      if (mode == NET_SHUTDOWN_RW)
 8010b72:	2902      	cmp	r1, #2
 8010b74:	d00d      	beq.n	8010b92 <es_wifi_shutdown+0x4e>
      {
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
      }
    }
    ret = NET_OK;
 8010b76:	2000      	movs	r0, #0
  }
  return ret;
}
 8010b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b7c:	4770      	bx	lr
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
 8010b7e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010b82:	4a0c      	ldr	r2, [pc, #48]	; (8010bb4 <es_wifi_shutdown+0x70>)
 8010b84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b88:	785a      	ldrb	r2, [r3, #1]
 8010b8a:	f022 0204 	bic.w	r2, r2, #4
 8010b8e:	705a      	strb	r2, [r3, #1]
 8010b90:	e7ef      	b.n	8010b72 <es_wifi_shutdown+0x2e>
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
 8010b92:	4b08      	ldr	r3, [pc, #32]	; (8010bb4 <es_wifi_shutdown+0x70>)
 8010b94:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010b98:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010b9c:	7853      	ldrb	r3, [r2, #1]
 8010b9e:	f023 030c 	bic.w	r3, r3, #12
 8010ba2:	7053      	strb	r3, [r2, #1]
    ret = NET_OK;
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	e7e7      	b.n	8010b78 <es_wifi_shutdown+0x34>
    ret =  NET_ERROR_INVALID_SOCKET;
 8010ba8:	f06f 0005 	mvn.w	r0, #5
 8010bac:	4770      	bx	lr
    ret = NET_OK;
 8010bae:	2000      	movs	r0, #0
}
 8010bb0:	4770      	bx	lr
 8010bb2:	bf00      	nop
 8010bb4:	2400c748 	.word	0x2400c748

08010bb8 <conv_to_net_security>:


static uint32_t conv_to_net_security(ES_WIFI_SecurityType_t     sec)
{
  uint32_t ret;
  switch (sec)
 8010bb8:	2805      	cmp	r0, #5
 8010bba:	d80e      	bhi.n	8010bda <conv_to_net_security+0x22>
 8010bbc:	e8df f000 	tbb	[pc, r0]
 8010bc0:	07051003 	.word	0x07051003
 8010bc4:	0b09      	.short	0x0b09
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	4770      	bx	lr
      break;
    case ES_WIFI_SEC_WEP:
      ret = NET_WIFI_SM_WEP_PSK;
      break;
    case ES_WIFI_SEC_WPA:
      ret = NET_WIFI_SM_WPA_MIXED_PSK;
 8010bca:	4806      	ldr	r0, [pc, #24]	; (8010be4 <conv_to_net_security+0x2c>)
      break;
 8010bcc:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8010bce:	4806      	ldr	r0, [pc, #24]	; (8010be8 <conv_to_net_security+0x30>)
      break;
 8010bd0:	4770      	bx	lr
    case ES_WIFI_SEC_WPA_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8010bd2:	4805      	ldr	r0, [pc, #20]	; (8010be8 <conv_to_net_security+0x30>)
      break;
 8010bd4:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2_TKIP:
      ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 8010bd6:	4805      	ldr	r0, [pc, #20]	; (8010bec <conv_to_net_security+0x34>)
      break;
 8010bd8:	4770      	bx	lr
    default :
      ret = NET_WIFI_SM_UNKNOWN;
 8010bda:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 8010bde:	4770      	bx	lr
      ret = NET_WIFI_SM_WEP_PSK;
 8010be0:	2001      	movs	r0, #1

  }
  return ret;
}
 8010be2:	4770      	bx	lr
 8010be4:	00200006 	.word	0x00200006
 8010be8:	00400006 	.word	0x00400006
 8010bec:	00400002 	.word	0x00400002

08010bf0 <es_wifi_setsockopt>:
  bool          *optbool = (bool *)optvalue;
  /*cstat +MISRAC2012-Rule-11.8 +MISRAC2012-Rule-11.5  */

  (void) level;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8010bf0:	2803      	cmp	r0, #3
 8010bf2:	d83e      	bhi.n	8010c72 <es_wifi_setsockopt+0x82>
  {
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    switch (optname)
 8010bf4:	f241 0105 	movw	r1, #4101	; 0x1005
 8010bf8:	428a      	cmp	r2, r1
 8010bfa:	d013      	beq.n	8010c24 <es_wifi_setsockopt+0x34>
 8010bfc:	dc05      	bgt.n	8010c0a <es_wifi_setsockopt+0x1a>
 8010bfe:	2a04      	cmp	r2, #4
 8010c00:	d028      	beq.n	8010c54 <es_wifi_setsockopt+0x64>
 8010c02:	2a0e      	cmp	r2, #14
 8010c04:	d138      	bne.n	8010c78 <es_wifi_setsockopt+0x88>
        }
        break;

      case  NET_SO_TLS_CERT_PROF:
        NET_DBG_ERROR("Ignore this option because it embedded inside Inventek Wifi module and can not be changed\n");
        ret =  NET_OK;
 8010c06:	2000      	movs	r0, #0
 8010c08:	4770      	bx	lr
    switch (optname)
 8010c0a:	f241 0106 	movw	r1, #4102	; 0x1006
 8010c0e:	428a      	cmp	r2, r1
 8010c10:	d135      	bne.n	8010c7e <es_wifi_setsockopt+0x8e>
        WifiChannel[sock].recvtimeout = * optint32;
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010c18:	4b1e      	ldr	r3, [pc, #120]	; (8010c94 <es_wifi_setsockopt+0xa4>)
 8010c1a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010c1e:	6182      	str	r2, [r0, #24]
        ret = NET_OK;
 8010c20:	2000      	movs	r0, #0
        break;
 8010c22:	4770      	bx	lr
        WifiChannel[sock].sendtimeout = *optint32;
 8010c24:	6819      	ldr	r1, [r3, #0]
 8010c26:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010c2a:	4a1a      	ldr	r2, [pc, #104]	; (8010c94 <es_wifi_setsockopt+0xa4>)
 8010c2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c30:	6159      	str	r1, [r3, #20]
        if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_UDP)
 8010c32:	789b      	ldrb	r3, [r3, #2]
 8010c34:	2b11      	cmp	r3, #17
 8010c36:	d001      	beq.n	8010c3c <es_wifi_setsockopt+0x4c>
        ret = NET_OK;
 8010c38:	2000      	movs	r0, #0
 8010c3a:	4770      	bx	lr
          if (WifiChannel[sock].sendtimeout > NET_UDP_MAX_SEND_BLOCK_TO)
 8010c3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010c40:	dd20      	ble.n	8010c84 <es_wifi_setsockopt+0x94>
            WifiChannel[sock].sendtimeout = NET_UDP_MAX_SEND_BLOCK_TO;
 8010c42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010c46:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c4e:	6143      	str	r3, [r0, #20]
        ret = NET_OK;
 8010c50:	2000      	movs	r0, #0
 8010c52:	4770      	bx	lr
        if (sizeof(bool) != optlen)
 8010c54:	9a00      	ldr	r2, [sp, #0]
 8010c56:	2a01      	cmp	r2, #1
 8010c58:	d116      	bne.n	8010c88 <es_wifi_setsockopt+0x98>
          if (*optbool == false)
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	b9bb      	cbnz	r3, 8010c8e <es_wifi_setsockopt+0x9e>
            WifiChannel[sock].sendtimeout = 1;
 8010c5e:	4b0d      	ldr	r3, [pc, #52]	; (8010c94 <es_wifi_setsockopt+0xa4>)
 8010c60:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010c64:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010c68:	2101      	movs	r1, #1
 8010c6a:	6151      	str	r1, [r2, #20]
            WifiChannel[sock].recvtimeout = 1;
 8010c6c:	6191      	str	r1, [r2, #24]
          ret =  NET_OK;
 8010c6e:	2000      	movs	r0, #0
 8010c70:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 8010c72:	f06f 0005 	mvn.w	r0, #5
 8010c76:	4770      	bx	lr
    switch (optname)
 8010c78:	f06f 0003 	mvn.w	r0, #3
 8010c7c:	4770      	bx	lr
 8010c7e:	f06f 0003 	mvn.w	r0, #3
 8010c82:	4770      	bx	lr
        ret = NET_OK;
 8010c84:	2000      	movs	r0, #0
 8010c86:	4770      	bx	lr
          ret = NET_ERROR_PARAMETER;
 8010c88:	f06f 0003 	mvn.w	r0, #3
 8010c8c:	4770      	bx	lr
          ret =  NET_OK;
 8010c8e:	2000      	movs	r0, #0
      default :
        break;
    }
  }
  return ret;
}
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	2400c748 	.word	0x2400c748

08010c98 <es_wifi_getsockopt>:
  (void) optname;
  (void) optvalue;
  (void) optlen;

  return NET_ERROR_UNSUPPORTED;
}
 8010c98:	f06f 0002 	mvn.w	r0, #2
 8010c9c:	4770      	bx	lr

08010c9e <es_wifi_scan>:
{
  (void) mode;
  (void) pnetif;
  (void) ssid;
  return 0;
}
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	4770      	bx	lr

08010ca2 <es_wifi_if_deinit>:
{
 8010ca2:	b538      	push	{r3, r4, r5, lr}
 8010ca4:	4604      	mov	r4, r0
  NET_FREE(pnetif->pdrv->extension.wifi);
 8010ca6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8010caa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8010cac:	f00f fd18 	bl	80206e0 <free>
  pnetif->pdrv->extension.wifi = NULL;
 8010cb0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010cb4:	2500      	movs	r5, #0
 8010cb6:	675d      	str	r5, [r3, #116]	; 0x74
  NET_FREE(pnetif->pdrv);
 8010cb8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8010cbc:	f00f fd10 	bl	80206e0 <free>
  pnetif->pdrv = NULL;
 8010cc0:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	bd38      	pop	{r3, r4, r5, pc}

08010cc8 <es_wifi_if_init>:
{
 8010cc8:	b570      	push	{r4, r5, r6, lr}
 8010cca:	4605      	mov	r5, r0
  net_if_drv_t *p = NET_MALLOC(sizeof(net_if_drv_t));
 8010ccc:	2084      	movs	r0, #132	; 0x84
 8010cce:	f00f fcff 	bl	80206d0 <malloc>
  if (p != NULL)
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d04c      	beq.n	8010d70 <es_wifi_if_init+0xa8>
 8010cd6:	4604      	mov	r4, r0
    p->if_class = NET_INTERFACE_CLASS_WIFI;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	7003      	strb	r3, [r0, #0]
    p->if_init = es_wifi_if_init;
 8010cdc:	4b26      	ldr	r3, [pc, #152]	; (8010d78 <es_wifi_if_init+0xb0>)
 8010cde:	6043      	str	r3, [r0, #4]
    p->if_deinit = es_wifi_if_deinit;
 8010ce0:	4b26      	ldr	r3, [pc, #152]	; (8010d7c <es_wifi_if_init+0xb4>)
 8010ce2:	6083      	str	r3, [r0, #8]
    p->if_start = es_wifi_if_start;
 8010ce4:	4b26      	ldr	r3, [pc, #152]	; (8010d80 <es_wifi_if_init+0xb8>)
 8010ce6:	60c3      	str	r3, [r0, #12]
    p->if_stop = es_wifi_if_stop;
 8010ce8:	4b26      	ldr	r3, [pc, #152]	; (8010d84 <es_wifi_if_init+0xbc>)
 8010cea:	6103      	str	r3, [r0, #16]
    p->if_connect = es_wifi_if_connect;
 8010cec:	4b26      	ldr	r3, [pc, #152]	; (8010d88 <es_wifi_if_init+0xc0>)
 8010cee:	6183      	str	r3, [r0, #24]
    p->if_disconnect = es_wifi_if_disconnect;
 8010cf0:	4b26      	ldr	r3, [pc, #152]	; (8010d8c <es_wifi_if_init+0xc4>)
 8010cf2:	61c3      	str	r3, [r0, #28]
    p->psocket = es_wifi_socket;
 8010cf4:	4b26      	ldr	r3, [pc, #152]	; (8010d90 <es_wifi_if_init+0xc8>)
 8010cf6:	6303      	str	r3, [r0, #48]	; 0x30
    p->pbind = es_wifi_bind;
 8010cf8:	4b26      	ldr	r3, [pc, #152]	; (8010d94 <es_wifi_if_init+0xcc>)
 8010cfa:	6343      	str	r3, [r0, #52]	; 0x34
    p->plisten = es_wifi_listen;
 8010cfc:	4b26      	ldr	r3, [pc, #152]	; (8010d98 <es_wifi_if_init+0xd0>)
 8010cfe:	6383      	str	r3, [r0, #56]	; 0x38
    p->paccept = es_wifi_accept;
 8010d00:	4b26      	ldr	r3, [pc, #152]	; (8010d9c <es_wifi_if_init+0xd4>)
 8010d02:	63c3      	str	r3, [r0, #60]	; 0x3c
    p->pconnect = es_wifi_connect;
 8010d04:	4b26      	ldr	r3, [pc, #152]	; (8010da0 <es_wifi_if_init+0xd8>)
 8010d06:	6403      	str	r3, [r0, #64]	; 0x40
    p->psend = es_wifi_send;
 8010d08:	4b26      	ldr	r3, [pc, #152]	; (8010da4 <es_wifi_if_init+0xdc>)
 8010d0a:	6443      	str	r3, [r0, #68]	; 0x44
    p->precv = es_wifi_recv;
 8010d0c:	4b26      	ldr	r3, [pc, #152]	; (8010da8 <es_wifi_if_init+0xe0>)
 8010d0e:	6483      	str	r3, [r0, #72]	; 0x48
    p->psendto = es_wifi_sendto;
 8010d10:	4b26      	ldr	r3, [pc, #152]	; (8010dac <es_wifi_if_init+0xe4>)
 8010d12:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->precvfrom = es_wifi_recvfrom;
 8010d14:	4b26      	ldr	r3, [pc, #152]	; (8010db0 <es_wifi_if_init+0xe8>)
 8010d16:	6503      	str	r3, [r0, #80]	; 0x50
    p->psetsockopt = es_wifi_setsockopt;
 8010d18:	4b26      	ldr	r3, [pc, #152]	; (8010db4 <es_wifi_if_init+0xec>)
 8010d1a:	6543      	str	r3, [r0, #84]	; 0x54
    p->pgetsockopt = es_wifi_getsockopt;
 8010d1c:	4b26      	ldr	r3, [pc, #152]	; (8010db8 <es_wifi_if_init+0xf0>)
 8010d1e:	6583      	str	r3, [r0, #88]	; 0x58
    p->pgetsockname = es_wifi_getsockname;
 8010d20:	4b26      	ldr	r3, [pc, #152]	; (8010dbc <es_wifi_if_init+0xf4>)
 8010d22:	65c3      	str	r3, [r0, #92]	; 0x5c
    p->pgetpeername = es_wifi_getpeername;
 8010d24:	4b26      	ldr	r3, [pc, #152]	; (8010dc0 <es_wifi_if_init+0xf8>)
 8010d26:	6603      	str	r3, [r0, #96]	; 0x60
    p->pclose = es_wifi_close;
 8010d28:	4b26      	ldr	r3, [pc, #152]	; (8010dc4 <es_wifi_if_init+0xfc>)
 8010d2a:	6643      	str	r3, [r0, #100]	; 0x64
    p->pshutdown = es_wifi_shutdown;
 8010d2c:	4b26      	ldr	r3, [pc, #152]	; (8010dc8 <es_wifi_if_init+0x100>)
 8010d2e:	6683      	str	r3, [r0, #104]	; 0x68
    p->pgethostbyname = es_wifi_gethostbyname;
 8010d30:	4b26      	ldr	r3, [pc, #152]	; (8010dcc <es_wifi_if_init+0x104>)
 8010d32:	66c3      	str	r3, [r0, #108]	; 0x6c
    p->pping = es_wifi_ping;
 8010d34:	4b26      	ldr	r3, [pc, #152]	; (8010dd0 <es_wifi_if_init+0x108>)
 8010d36:	6703      	str	r3, [r0, #112]	; 0x70
    pextwifi = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 8010d38:	2024      	movs	r0, #36	; 0x24
 8010d3a:	f00f fcc9 	bl	80206d0 <malloc>
    if (NULL == pextwifi)
 8010d3e:	4606      	mov	r6, r0
 8010d40:	b180      	cbz	r0, 8010d64 <es_wifi_if_init+0x9c>
      (void) memset(pextwifi, 0, sizeof(net_if_wifi_class_extension_t));
 8010d42:	2224      	movs	r2, #36	; 0x24
 8010d44:	2100      	movs	r1, #0
 8010d46:	f00f fcf1 	bl	802072c <memset>
      pnetif->pdrv = p;
 8010d4a:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
      p->extension.wifi = pextwifi;
 8010d4e:	6766      	str	r6, [r4, #116]	; 0x74
      p->extension.wifi->scan = es_wifi_scan;
 8010d50:	4b20      	ldr	r3, [pc, #128]	; (8010dd4 <es_wifi_if_init+0x10c>)
 8010d52:	6033      	str	r3, [r6, #0]
      p->extension.wifi->get_scan_results = es_wifi_get_scan_results;
 8010d54:	4b20      	ldr	r3, [pc, #128]	; (8010dd8 <es_wifi_if_init+0x110>)
 8010d56:	6073      	str	r3, [r6, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8010d58:	2106      	movs	r1, #6
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	f7ff fe36 	bl	80109cc <net_state_manage_event>
      ret = NET_OK;
 8010d60:	2000      	movs	r0, #0
}
 8010d62:	bd70      	pop	{r4, r5, r6, pc}
      NET_FREE(p);
 8010d64:	4620      	mov	r0, r4
 8010d66:	f00f fcbb 	bl	80206e0 <free>
      ret = NET_ERROR_NO_MEMORY;
 8010d6a:	f06f 0007 	mvn.w	r0, #7
 8010d6e:	e7f8      	b.n	8010d62 <es_wifi_if_init+0x9a>
    ret = NET_ERROR_NO_MEMORY;
 8010d70:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8010d74:	e7f5      	b.n	8010d62 <es_wifi_if_init+0x9a>
 8010d76:	bf00      	nop
 8010d78:	08010cc9 	.word	0x08010cc9
 8010d7c:	08010ca3 	.word	0x08010ca3
 8010d80:	0801177d 	.word	0x0801177d
 8010d84:	08010ddd 	.word	0x08010ddd
 8010d88:	0801198d 	.word	0x0801198d
 8010d8c:	0801175d 	.word	0x0801175d
 8010d90:	08010a3d 	.word	0x08010a3d
 8010d94:	08010ad1 	.word	0x08010ad1
 8010d98:	08011701 	.word	0x08011701
 8010d9c:	0801167d 	.word	0x0801167d
 8010da0:	080111c1 	.word	0x080111c1
 8010da4:	080115e9 	.word	0x080115e9
 8010da8:	08011551 	.word	0x08011551
 8010dac:	08011279 	.word	0x08011279
 8010db0:	080113fd 	.word	0x080113fd
 8010db4:	08010bf1 	.word	0x08010bf1
 8010db8:	08010c99 	.word	0x08010c99
 8010dbc:	080110d5 	.word	0x080110d5
 8010dc0:	08011031 	.word	0x08011031
 8010dc4:	08010f3d 	.word	0x08010f3d
 8010dc8:	08010b45 	.word	0x08010b45
 8010dcc:	08010eed 	.word	0x08010eed
 8010dd0:	08010eb5 	.word	0x08010eb5
 8010dd4:	08010c9f 	.word	0x08010c9f
 8010dd8:	08010de9 	.word	0x08010de9

08010ddc <es_wifi_if_stop>:
{
 8010ddc:	b508      	push	{r3, lr}
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8010dde:	2106      	movs	r1, #6
 8010de0:	f7ff fdf4 	bl	80109cc <net_state_manage_event>
}
 8010de4:	2000      	movs	r0, #0
 8010de6:	bd08      	pop	{r3, pc}

08010de8 <es_wifi_get_scan_results>:

static  int32_t es_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 8010de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dec:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8010df0:	4688      	mov	r8, r1
 8010df2:	4614      	mov	r4, r2
  int32_t ret;
  ES_WIFI_APs_t APs;
  ES_WIFI_AP_t *AP = &APs.AP[0];

  if (ES_WIFI_STATUS_OK == ES_WIFI_ListAccessPoints(castcontext(pnetif->pdrv->context), &APs))
 8010df4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8010df8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010dfa:	f7ff fe1d 	bl	8010a38 <castcontext>
 8010dfe:	a901      	add	r1, sp, #4
 8010e00:	f7f5 fe0c 	bl	8006a1c <ES_WIFI_ListAccessPoints>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d14f      	bne.n	8010ea8 <es_wifi_get_scan_results+0xc0>
  {
    if (APs.nbr > number)
 8010e08:	f89d 3374 	ldrb.w	r3, [sp, #884]	; 0x374
 8010e0c:	42a3      	cmp	r3, r4
 8010e0e:	d901      	bls.n	8010e14 <es_wifi_get_scan_results+0x2c>
    {
      APs.nbr = number;
 8010e10:	f88d 4374 	strb.w	r4, [sp, #884]	; 0x374
{
 8010e14:	2600      	movs	r6, #0
 8010e16:	ac01      	add	r4, sp, #4
 8010e18:	e03e      	b.n	8010e98 <es_wifi_get_scan_results+0xb0>
    }
    for (uint32_t i = 0; i < APs.nbr ; i++)
    {
      (void) memset((void *) &results[i], 0, sizeof(net_wifi_scan_bss_t));
 8010e1a:	2234      	movs	r2, #52	; 0x34
 8010e1c:	fb02 f706 	mul.w	r7, r2, r6
 8010e20:	eb08 0507 	add.w	r5, r8, r7
 8010e24:	2100      	movs	r1, #0
 8010e26:	4628      	mov	r0, r5
 8010e28:	f00f fc80 	bl	802072c <memset>
      (void) memcpy(results[i].ssid.value, AP->SSID, NET_WIFI_MAX_SSID_SIZE);
 8010e2c:	6821      	ldr	r1, [r4, #0]
 8010e2e:	6860      	ldr	r0, [r4, #4]
 8010e30:	68a2      	ldr	r2, [r4, #8]
 8010e32:	68e3      	ldr	r3, [r4, #12]
 8010e34:	f8c5 1001 	str.w	r1, [r5, #1]
 8010e38:	f8c5 0005 	str.w	r0, [r5, #5]
 8010e3c:	f8c5 2009 	str.w	r2, [r5, #9]
 8010e40:	f8c5 300d 	str.w	r3, [r5, #13]
 8010e44:	6921      	ldr	r1, [r4, #16]
 8010e46:	6960      	ldr	r0, [r4, #20]
 8010e48:	69a2      	ldr	r2, [r4, #24]
 8010e4a:	69e3      	ldr	r3, [r4, #28]
 8010e4c:	f8c5 1011 	str.w	r1, [r5, #17]
 8010e50:	f8c5 0015 	str.w	r0, [r5, #21]
 8010e54:	f8c5 2019 	str.w	r2, [r5, #25]
 8010e58:	f8c5 301d 	str.w	r3, [r5, #29]
      results[i].ssid.length = (uint8_t) strlen((char_t *) AP->SSID);
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f7ef fa51 	bl	8000304 <strlen>
 8010e62:	f808 0007 	strb.w	r0, [r8, r7]
      results[i].security = conv_to_net_security(AP->Security);
 8010e66:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8010e6a:	f7ff fea5 	bl	8010bb8 <conv_to_net_security>
 8010e6e:	62a8      	str	r0, [r5, #40]	; 0x28
      (void)  memcpy(&results[i].bssid, AP->MAC, NET_WIFI_MAC_ADDRESS_SIZE);
 8010e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e72:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
 8010e76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8010e78:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
      results[i].rssi = (int8_t)AP->RSSI;
 8010e7c:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 8010e80:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      results[i].channel = AP->Channel;
 8010e84:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8010e88:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      (void) memcpy(results[i].country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 8010e8c:	4b08      	ldr	r3, [pc, #32]	; (8010eb0 <es_wifi_get_scan_results+0xc8>)
 8010e8e:	6818      	ldr	r0, [r3, #0]
 8010e90:	f8c5 002d 	str.w	r0, [r5, #45]	; 0x2d
      AP++;
 8010e94:	342c      	adds	r4, #44	; 0x2c
    for (uint32_t i = 0; i < APs.nbr ; i++)
 8010e96:	3601      	adds	r6, #1
 8010e98:	f89d 0374 	ldrb.w	r0, [sp, #884]	; 0x374
 8010e9c:	42b0      	cmp	r0, r6
 8010e9e:	d8bc      	bhi.n	8010e1a <es_wifi_get_scan_results+0x32>
  else
  {
    ret = NET_ERROR_NO_CONNECTION;
  }
  return ret;
}
 8010ea0:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 8010ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8010ea8:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8010eac:	e7f8      	b.n	8010ea0 <es_wifi_get_scan_results+0xb8>
 8010eae:	bf00      	nop
 8010eb0:	08023488 	.word	0x08023488

08010eb4 <es_wifi_ping>:
{
 8010eb4:	b530      	push	{r4, r5, lr}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	4684      	mov	ip, r0
 8010eba:	4614      	mov	r4, r2
 8010ebc:	461d      	mov	r5, r3
  (void) memcpy(ipaddr, &addr->sa_data[2], 6);
 8010ebe:	6848      	ldr	r0, [r1, #4]
 8010ec0:	9002      	str	r0, [sp, #8]
 8010ec2:	890b      	ldrh	r3, [r1, #8]
 8010ec4:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (ES_WIFI_STATUS_OK == ES_WIFI_Ping(castcontext(pnetif->pdrv->context), ipaddr, (uint16_t) count, (uint16_t) delay,
 8010ec8:	f8dc 30ec 	ldr.w	r3, [ip, #236]	; 0xec
 8010ecc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010ece:	f7ff fdb3 	bl	8010a38 <castcontext>
 8010ed2:	9b08      	ldr	r3, [sp, #32]
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	b2ab      	uxth	r3, r5
 8010ed8:	b2a2      	uxth	r2, r4
 8010eda:	a902      	add	r1, sp, #8
 8010edc:	f7f5 ff48 	bl	8006d70 <ES_WIFI_Ping>
 8010ee0:	b908      	cbnz	r0, 8010ee6 <es_wifi_ping+0x32>
}
 8010ee2:	b005      	add	sp, #20
 8010ee4:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8010ee6:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8010eea:	e7fa      	b.n	8010ee2 <es_wifi_ping+0x2e>

08010eec <es_wifi_gethostbyname>:
  if (addr->sa_len < sizeof(sockaddr_in_t))
 8010eec:	780b      	ldrb	r3, [r1, #0]
 8010eee:	2b0f      	cmp	r3, #15
 8010ef0:	d91e      	bls.n	8010f30 <es_wifi_gethostbyname+0x44>
{
 8010ef2:	b530      	push	{r4, r5, lr}
 8010ef4:	b083      	sub	sp, #12
 8010ef6:	460c      	mov	r4, r1
 8010ef8:	4615      	mov	r5, r2
    if (ES_WIFI_STATUS_OK == ES_WIFI_DNS_LookUp(castcontext(pnetif->pdrv->context), (char_t *)name, ipaddr))
 8010efa:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8010efe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010f00:	f7ff fd9a 	bl	8010a38 <castcontext>
 8010f04:	466a      	mov	r2, sp
 8010f06:	4629      	mov	r1, r5
 8010f08:	f7f5 ff8e 	bl	8006e28 <ES_WIFI_DNS_LookUp>
 8010f0c:	b998      	cbnz	r0, 8010f36 <es_wifi_gethostbyname+0x4a>
      uint8_t len = addr->sa_len;
 8010f0e:	7825      	ldrb	r5, [r4, #0]
      sockaddr_in_t *saddr = cast2sockaddr_in(addr);
 8010f10:	4620      	mov	r0, r4
 8010f12:	f7ff fd92 	bl	8010a3a <cast2sockaddr_in>
 8010f16:	4604      	mov	r4, r0
      (void)  memset(saddr, 0, len);
 8010f18:	462a      	mov	r2, r5
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	f00f fc06 	bl	802072c <memset>
      saddr->sin_len = len;
 8010f20:	7025      	strb	r5, [r4, #0]
      saddr->sin_family = NET_AF_INET;
 8010f22:	2302      	movs	r3, #2
 8010f24:	7063      	strb	r3, [r4, #1]
      (void) memcpy(&(saddr->sin_addr), ipaddr, 4);
 8010f26:	9b00      	ldr	r3, [sp, #0]
 8010f28:	6063      	str	r3, [r4, #4]
      ret = NET_OK;
 8010f2a:	2000      	movs	r0, #0
}
 8010f2c:	b003      	add	sp, #12
 8010f2e:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 8010f30:	f06f 0003 	mvn.w	r0, #3
}
 8010f34:	4770      	bx	lr
      ret = NET_ERROR_DNS_FAILURE;
 8010f36:	f06f 0009 	mvn.w	r0, #9
  return ret;
 8010f3a:	e7f7      	b.n	8010f2c <es_wifi_gethostbyname+0x40>

08010f3c <es_wifi_close>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8010f3c:	2803      	cmp	r0, #3
 8010f3e:	d871      	bhi.n	8011024 <es_wifi_close+0xe8>
{
 8010f40:	b510      	push	{r4, lr}
 8010f42:	b086      	sub	sp, #24
 8010f44:	4604      	mov	r4, r0
    if ((WifiChannel [sock].status & WIFI_STARTED_SERVER_SOCKET) != 0U)
 8010f46:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010f4a:	4a38      	ldr	r2, [pc, #224]	; (801102c <es_wifi_close+0xf0>)
 8010f4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010f50:	785b      	ldrb	r3, [r3, #1]
 8010f52:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010f56:	d042      	beq.n	8010fde <es_wifi_close+0xa2>
      if (isaclone)
 8010f58:	b301      	cbz	r1, 8010f9c <es_wifi_close+0x60>
        if (ES_WIFI_CloseServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 8010f5a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010f5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f64:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8010f68:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010f6a:	f7ff fd65 	bl	8010a38 <castcontext>
 8010f6e:	4621      	mov	r1, r4
 8010f70:	f7f6 f952 	bl	8007218 <ES_WIFI_CloseServerConnection>
 8010f74:	b940      	cbnz	r0, 8010f88 <es_wifi_close+0x4c>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8010f76:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010f7a:	4b2c      	ldr	r3, [pc, #176]	; (801102c <es_wifi_close+0xf0>)
 8010f7c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010f80:	2000      	movs	r0, #0
 8010f82:	7060      	strb	r0, [r4, #1]
}
 8010f84:	b006      	add	sp, #24
 8010f86:	bd10      	pop	{r4, pc}
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8010f88:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010f8c:	4b27      	ldr	r3, [pc, #156]	; (801102c <es_wifi_close+0xf0>)
 8010f8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f92:	2200      	movs	r2, #0
 8010f94:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 8010f96:	f06f 0012 	mvn.w	r0, #18
 8010f9a:	e7f3      	b.n	8010f84 <es_wifi_close+0x48>
        if (ES_WIFI_StopServerSingleConn(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 8010f9c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010fa0:	4a22      	ldr	r2, [pc, #136]	; (801102c <es_wifi_close+0xf0>)
 8010fa2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8010fac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010fae:	f7ff fd43 	bl	8010a38 <castcontext>
 8010fb2:	4621      	mov	r1, r4
 8010fb4:	f7f6 f954 	bl	8007260 <ES_WIFI_StopServerSingleConn>
 8010fb8:	b938      	cbnz	r0, 8010fca <es_wifi_close+0x8e>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8010fba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010fbe:	4b1b      	ldr	r3, [pc, #108]	; (801102c <es_wifi_close+0xf0>)
 8010fc0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	7060      	strb	r0, [r4, #1]
          ret = NET_OK;
 8010fc8:	e7dc      	b.n	8010f84 <es_wifi_close+0x48>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8010fca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010fce:	4b17      	ldr	r3, [pc, #92]	; (801102c <es_wifi_close+0xf0>)
 8010fd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 8010fd8:	f06f 0012 	mvn.w	r0, #18
 8010fdc:	e7d2      	b.n	8010f84 <es_wifi_close+0x48>
      conn.Number = (uint8_t) sock;
 8010fde:	f88d 0006 	strb.w	r0, [sp, #6]
      if (ES_WIFI_StopClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn)
 8010fe2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010fe6:	4a11      	ldr	r2, [pc, #68]	; (801102c <es_wifi_close+0xf0>)
 8010fe8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8010ff2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010ff4:	f7ff fd20 	bl	8010a38 <castcontext>
 8010ff8:	a901      	add	r1, sp, #4
 8010ffa:	f7f5 ffd1 	bl	8006fa0 <ES_WIFI_StopClientConnection>
 8010ffe:	b148      	cbz	r0, 8011014 <es_wifi_close+0xd8>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8011000:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011004:	4b09      	ldr	r3, [pc, #36]	; (801102c <es_wifi_close+0xf0>)
 8011006:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801100a:	2300      	movs	r3, #0
 801100c:	7063      	strb	r3, [r4, #1]
        ret = NET_ERROR_SOCKET_FAILURE;
 801100e:	f06f 0012 	mvn.w	r0, #18
 8011012:	e7b7      	b.n	8010f84 <es_wifi_close+0x48>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8011014:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011018:	4b04      	ldr	r3, [pc, #16]	; (801102c <es_wifi_close+0xf0>)
 801101a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801101e:	2000      	movs	r0, #0
 8011020:	7060      	strb	r0, [r4, #1]
        ret = NET_OK;
 8011022:	e7af      	b.n	8010f84 <es_wifi_close+0x48>
    ret = NET_ERROR_INVALID_SOCKET;
 8011024:	f06f 0005 	mvn.w	r0, #5
}
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop
 801102c:	2400c748 	.word	0x2400c748

08011030 <es_wifi_getpeername>:
  if (*namelen < sizeof(sockaddr_in_t))
 8011030:	6813      	ldr	r3, [r2, #0]
 8011032:	2b0f      	cmp	r3, #15
 8011034:	d943      	bls.n	80110be <es_wifi_getpeername+0x8e>
{
 8011036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	4604      	mov	r4, r0
 801103e:	460e      	mov	r6, r1
 8011040:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= (int32_t) ESWIFI_MAX_CHANNEL_NBR))
 8011042:	2803      	cmp	r0, #3
 8011044:	d83e      	bhi.n	80110c4 <es_wifi_getpeername+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_PeerInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8011046:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80110d0 <es_wifi_getpeername+0xa0>
 801104a:	0087      	lsls	r7, r0, #2
 801104c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011050:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011056:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801105a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801105c:	f7ff fcec 	bl	8010a38 <castcontext>
 8011060:	443c      	add	r4, r7
 8011062:	f10d 0312 	add.w	r3, sp, #18
 8011066:	aa05      	add	r2, sp, #20
 8011068:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 801106c:	f7f6 fb24 	bl	80076b8 <ES_WIFI_PeerInfo>
 8011070:	bb58      	cbnz	r0, 80110ca <es_wifi_getpeername+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 8011072:	2400      	movs	r4, #0
 8011074:	9400      	str	r4, [sp, #0]
 8011076:	9401      	str	r4, [sp, #4]
 8011078:	9402      	str	r4, [sp, #8]
 801107a:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 801107c:	2302      	movs	r3, #2
 801107e:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 8011082:	9b05      	ldr	r3, [sp, #20]
 8011084:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 8011086:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801108a:	ba5b      	rev16	r3, r3
 801108c:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8011090:	2710      	movs	r7, #16
 8011092:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 8011096:	682a      	ldr	r2, [r5, #0]
 8011098:	4621      	mov	r1, r4
 801109a:	4630      	mov	r0, r6
 801109c:	f00f fb46 	bl	802072c <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 80110a0:	f89d 2000 	ldrb.w	r2, [sp]
 80110a4:	682b      	ldr	r3, [r5, #0]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	bf28      	it	cs
 80110aa:	461a      	movcs	r2, r3
 80110ac:	4669      	mov	r1, sp
 80110ae:	4630      	mov	r0, r6
 80110b0:	f00f fb2e 	bl	8020710 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 80110b4:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 80110b6:	4620      	mov	r0, r4
}
 80110b8:	b006      	add	sp, #24
 80110ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 80110be:	f06f 0003 	mvn.w	r0, #3
}
 80110c2:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 80110c4:	f06f 0005 	mvn.w	r0, #5
 80110c8:	e7f6      	b.n	80110b8 <es_wifi_getpeername+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 80110ca:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80110ce:	e7f3      	b.n	80110b8 <es_wifi_getpeername+0x88>
 80110d0:	2400c748 	.word	0x2400c748

080110d4 <es_wifi_getsockname>:
  if (*namelen < sizeof(sockaddr_in_t))
 80110d4:	6813      	ldr	r3, [r2, #0]
 80110d6:	2b0f      	cmp	r3, #15
 80110d8:	d943      	bls.n	8011162 <es_wifi_getsockname+0x8e>
{
 80110da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	4604      	mov	r4, r0
 80110e2:	460e      	mov	r6, r1
 80110e4:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80110e6:	2803      	cmp	r0, #3
 80110e8:	d83e      	bhi.n	8011168 <es_wifi_getsockname+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_SockInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 80110ea:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8011174 <es_wifi_getsockname+0xa0>
 80110ee:	0087      	lsls	r7, r0, #2
 80110f0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80110f4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80110f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80110fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011100:	f7ff fc9a 	bl	8010a38 <castcontext>
 8011104:	443c      	add	r4, r7
 8011106:	f10d 0312 	add.w	r3, sp, #18
 801110a:	aa05      	add	r2, sp, #20
 801110c:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 8011110:	f7f6 fa98 	bl	8007644 <ES_WIFI_SockInfo>
 8011114:	bb58      	cbnz	r0, 801116e <es_wifi_getsockname+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 8011116:	2400      	movs	r4, #0
 8011118:	9400      	str	r4, [sp, #0]
 801111a:	9401      	str	r4, [sp, #4]
 801111c:	9402      	str	r4, [sp, #8]
 801111e:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 8011120:	2302      	movs	r3, #2
 8011122:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 8011126:	9b05      	ldr	r3, [sp, #20]
 8011128:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 801112a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801112e:	ba5b      	rev16	r3, r3
 8011130:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8011134:	2710      	movs	r7, #16
 8011136:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 801113a:	682a      	ldr	r2, [r5, #0]
 801113c:	4621      	mov	r1, r4
 801113e:	4630      	mov	r0, r6
 8011140:	f00f faf4 	bl	802072c <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 8011144:	f89d 2000 	ldrb.w	r2, [sp]
 8011148:	682b      	ldr	r3, [r5, #0]
 801114a:	429a      	cmp	r2, r3
 801114c:	bf28      	it	cs
 801114e:	461a      	movcs	r2, r3
 8011150:	4669      	mov	r1, sp
 8011152:	4630      	mov	r0, r6
 8011154:	f00f fadc 	bl	8020710 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 8011158:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 801115a:	4620      	mov	r0, r4
}
 801115c:	b006      	add	sp, #24
 801115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 8011162:	f06f 0003 	mvn.w	r0, #3
}
 8011166:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 8011168:	f06f 0005 	mvn.w	r0, #5
 801116c:	e7f6      	b.n	801115c <es_wifi_getsockname+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 801116e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8011172:	e7f3      	b.n	801115c <es_wifi_getsockname+0x88>
 8011174:	2400c748 	.word	0x2400c748

08011178 <check_connection_lost>:
{
 8011178:	b510      	push	{r4, lr}
 801117a:	4604      	mov	r4, r0
  if (n <= 0)
 801117c:	2900      	cmp	r1, #0
 801117e:	dd04      	ble.n	801118a <check_connection_lost+0x12>
    if (NET_STATE_CONNECTION_LOST == pnetif->state)
 8011180:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 8011184:	2b08      	cmp	r3, #8
 8011186:	d014      	beq.n	80111b2 <check_connection_lost+0x3a>
}
 8011188:	bd10      	pop	{r4, pc}
    if (NET_STATE_CONNECTED == pnetif->state)
 801118a:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 801118e:	2b05      	cmp	r3, #5
 8011190:	d1fa      	bne.n	8011188 <check_connection_lost+0x10>
      if (ES_WIFI_IsConnected(castcontext(pnetif->pdrv->context)) == 0u)
 8011192:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011196:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011198:	f7ff fc4e 	bl	8010a38 <castcontext>
 801119c:	f7f5 fd16 	bl	8006bcc <ES_WIFI_IsConnected>
 80111a0:	2800      	cmp	r0, #0
 80111a2:	d1f1      	bne.n	8011188 <check_connection_lost+0x10>
        (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTION_LOST, NULL);
 80111a4:	2300      	movs	r3, #0
 80111a6:	2208      	movs	r2, #8
 80111a8:	4619      	mov	r1, r3
 80111aa:	4620      	mov	r0, r4
 80111ac:	f7ff fb40 	bl	8010830 <net_if_notify>
 80111b0:	e7ea      	b.n	8011188 <check_connection_lost+0x10>
      (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTED, NULL);
 80111b2:	2300      	movs	r3, #0
 80111b4:	2205      	movs	r2, #5
 80111b6:	4619      	mov	r1, r3
 80111b8:	f7ff fb3a 	bl	8010830 <net_if_notify>
}
 80111bc:	e7e4      	b.n	8011188 <check_connection_lost+0x10>
	...

080111c0 <es_wifi_connect>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80111c0:	2803      	cmp	r0, #3
 80111c2:	d854      	bhi.n	801126e <es_wifi_connect+0xae>
{
 80111c4:	b510      	push	{r4, lr}
 80111c6:	b086      	sub	sp, #24
 80111c8:	4604      	mov	r4, r0
    if (addrlen == sizeof(sockaddr_in_t))
 80111ca:	2a10      	cmp	r2, #16
 80111cc:	d003      	beq.n	80111d6 <es_wifi_connect+0x16>
      ret = NET_ERROR_PARAMETER;
 80111ce:	f06f 0003 	mvn.w	r0, #3
}
 80111d2:	b006      	add	sp, #24
 80111d4:	bd10      	pop	{r4, pc}
      dest = cast2sockaddr_in(addr);
 80111d6:	4608      	mov	r0, r1
 80111d8:	f7ff fc2f 	bl	8010a3a <cast2sockaddr_in>
      conn.Number = (uint8_t) sock;
 80111dc:	f88d 4006 	strb.w	r4, [sp, #6]
      conn.LocalPort = WifiChannel[sock].localport;
 80111e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80111e4:	4a23      	ldr	r2, [pc, #140]	; (8011274 <es_wifi_connect+0xb4>)
 80111e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80111ea:	889a      	ldrh	r2, [r3, #4]
 80111ec:	f8ad 200a 	strh.w	r2, [sp, #10]
      conn.RemotePort = NET_NTOHS(dest->sin_port);
 80111f0:	8842      	ldrh	r2, [r0, #2]
 80111f2:	ba52      	rev16	r2, r2
 80111f4:	f8ad 2008 	strh.w	r2, [sp, #8]
      NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 80111f8:	79c2      	ldrb	r2, [r0, #7]
 80111fa:	f88d 200f 	strb.w	r2, [sp, #15]
 80111fe:	7982      	ldrb	r2, [r0, #6]
 8011200:	f88d 200e 	strb.w	r2, [sp, #14]
 8011204:	7942      	ldrb	r2, [r0, #5]
 8011206:	f88d 200d 	strb.w	r2, [sp, #13]
 801120a:	7902      	ldrb	r2, [r0, #4]
 801120c:	f88d 200c 	strb.w	r2, [sp, #12]
      switch (WifiChannel[sock].protocol)
 8011210:	789b      	ldrb	r3, [r3, #2]
 8011212:	2b11      	cmp	r3, #17
 8011214:	d022      	beq.n	801125c <es_wifi_connect+0x9c>
 8011216:	2b24      	cmp	r3, #36	; 0x24
 8011218:	d023      	beq.n	8011262 <es_wifi_connect+0xa2>
 801121a:	2b06      	cmp	r3, #6
 801121c:	d002      	beq.n	8011224 <es_wifi_connect+0x64>
          ret = NET_ERROR_PARAMETER;
 801121e:	f06f 0003 	mvn.w	r0, #3
 8011222:	e7d6      	b.n	80111d2 <es_wifi_connect+0x12>
          conn.Type = ES_WIFI_TCP_CONNECTION;
 8011224:	2300      	movs	r3, #0
 8011226:	f88d 3004 	strb.w	r3, [sp, #4]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 801122a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801122e:	4a11      	ldr	r2, [pc, #68]	; (8011274 <es_wifi_connect+0xb4>)
 8011230:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011236:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801123a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801123c:	f7ff fbfc 	bl	8010a38 <castcontext>
 8011240:	a901      	add	r1, sp, #4
 8011242:	f7f5 fe15 	bl	8006e70 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 8011246:	b978      	cbnz	r0, 8011268 <es_wifi_connect+0xa8>
          WifiChannel[sock].status |= WIFI_CONNECTED_SOCKET_RW;
 8011248:	4b0a      	ldr	r3, [pc, #40]	; (8011274 <es_wifi_connect+0xb4>)
 801124a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801124e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011252:	7853      	ldrb	r3, [r2, #1]
 8011254:	f043 031c 	orr.w	r3, r3, #28
 8011258:	7053      	strb	r3, [r2, #1]
 801125a:	e7ba      	b.n	80111d2 <es_wifi_connect+0x12>
      switch (WifiChannel[sock].protocol)
 801125c:	f06f 0002 	mvn.w	r0, #2
 8011260:	e7b7      	b.n	80111d2 <es_wifi_connect+0x12>
 8011262:	f06f 0002 	mvn.w	r0, #2
 8011266:	e7b4      	b.n	80111d2 <es_wifi_connect+0x12>
          ret = NET_ERROR_SOCKET_FAILURE;
 8011268:	f06f 0012 	mvn.w	r0, #18
 801126c:	e7b1      	b.n	80111d2 <es_wifi_connect+0x12>
    ret = NET_ERROR_INVALID_SOCKET;
 801126e:	f06f 0005 	mvn.w	r0, #5
}
 8011272:	4770      	bx	lr
 8011274:	2400c748 	.word	0x2400c748

08011278 <es_wifi_sendto>:
{
 8011278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127c:	b08a      	sub	sp, #40	; 0x28
 801127e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  if ((flags != 0) || (to->sa_family != (uint8_t) NET_AF_INET))
 8011280:	2b00      	cmp	r3, #0
 8011282:	f040 80aa 	bne.w	80113da <es_wifi_sendto+0x162>
 8011286:	4604      	mov	r4, r0
 8011288:	460e      	mov	r6, r1
 801128a:	4615      	mov	r5, r2
 801128c:	787b      	ldrb	r3, [r7, #1]
 801128e:	2b02      	cmp	r3, #2
 8011290:	f040 80a6 	bne.w	80113e0 <es_wifi_sendto+0x168>
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011294:	2803      	cmp	r0, #3
 8011296:	f200 80a6 	bhi.w	80113e6 <es_wifi_sendto+0x16e>
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 801129a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801129e:	4a56      	ldr	r2, [pc, #344]	; (80113f8 <es_wifi_sendto+0x180>)
 80112a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80112a4:	789b      	ldrb	r3, [r3, #2]
 80112a6:	2b11      	cmp	r3, #17
 80112a8:	f040 80a0 	bne.w	80113ec <es_wifi_sendto+0x174>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 80112ac:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80112b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80112b4:	785b      	ldrb	r3, [r3, #1]
 80112b6:	f013 0f04 	tst.w	r3, #4
 80112ba:	f000 809a 	beq.w	80113f2 <es_wifi_sendto+0x17a>
    if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 80112be:	f013 0f20 	tst.w	r3, #32
 80112c2:	d102      	bne.n	80112ca <es_wifi_sendto+0x52>
      if (tolen == sizeof(sockaddr_in_t))
 80112c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112c6:	2b10      	cmp	r3, #16
 80112c8:	d04d      	beq.n	8011366 <es_wifi_sendto+0xee>
      if (len > ES_WIFI_PAYLOAD_SIZE)
 80112ca:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80112ce:	dd01      	ble.n	80112d4 <es_wifi_sendto+0x5c>
        len = ES_WIFI_PAYLOAD_SIZE;
 80112d0:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
      sockaddr_in_t *saddr = cast2sockaddr_in(to);
 80112d4:	4638      	mov	r0, r7
 80112d6:	f7ff fbb0 	bl	8010a3a <cast2sockaddr_in>
      remoteaddr = NET_NTOHL(saddr->sin_addr.s_addr);
 80112da:	6843      	ldr	r3, [r0, #4]
 80112dc:	0a1a      	lsrs	r2, r3, #8
 80112de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80112e2:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80112e6:	0219      	lsls	r1, r3, #8
 80112e8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80112ec:	430a      	orrs	r2, r1
 80112ee:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      uint32_t IPaddr = NET_NTOHL(remoteaddr);
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	0a11      	lsrs	r1, r2, #8
 80112f6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80112fa:	430b      	orrs	r3, r1
 80112fc:	0211      	lsls	r1, r2, #8
 80112fe:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8011302:	430b      	orrs	r3, r1
 8011304:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011308:	9305      	str	r3, [sp, #20]
      uint16_t Port = NET_NTOHS(saddr->sin_port);
 801130a:	8847      	ldrh	r7, [r0, #2]
 801130c:	ba7f      	rev16	r7, r7
 801130e:	b2bf      	uxth	r7, r7
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8011310:	eb04 0884 	add.w	r8, r4, r4, lsl #2
 8011314:	4b38      	ldr	r3, [pc, #224]	; (80113f8 <es_wifi_sendto+0x180>)
 8011316:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801131a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801131e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011322:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011324:	f7ff fb88 	bl	8010a38 <castcontext>
                                                  (uint32_t) WifiChannel[sock].sendtimeout,
 8011328:	f8d8 3014 	ldr.w	r3, [r8, #20]
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801132c:	9703      	str	r7, [sp, #12]
 801132e:	aa05      	add	r2, sp, #20
 8011330:	9202      	str	r2, [sp, #8]
 8011332:	9301      	str	r3, [sp, #4]
 8011334:	f10d 0312 	add.w	r3, sp, #18
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	b2ab      	uxth	r3, r5
 801133c:	4632      	mov	r2, r6
 801133e:	b2e1      	uxtb	r1, r4
 8011340:	f7f6 f80a 	bl	8007358 <ES_WIFI_SendDataTo>
 8011344:	2800      	cmp	r0, #0
 8011346:	d145      	bne.n	80113d4 <es_wifi_sendto+0x15c>
        ret = (int32_t) SentDatalen;
 8011348:	f8bd 5012 	ldrh.w	r5, [sp, #18]
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 801134c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011350:	4829      	ldr	r0, [pc, #164]	; (80113f8 <es_wifi_sendto+0x180>)
 8011352:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8011356:	4629      	mov	r1, r5
 8011358:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801135a:	f7ff ff0d 	bl	8011178 <check_connection_lost>
}
 801135e:	4628      	mov	r0, r5
 8011360:	b00a      	add	sp, #40	; 0x28
 8011362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dest = cast2sockaddr_in(to);
 8011366:	4638      	mov	r0, r7
 8011368:	f7ff fb67 	bl	8010a3a <cast2sockaddr_in>
        conn.Number = (uint8_t) sock;
 801136c:	f88d 4016 	strb.w	r4, [sp, #22]
        conn.LocalPort = WifiChannel[sock].localport;
 8011370:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011374:	4a20      	ldr	r2, [pc, #128]	; (80113f8 <es_wifi_sendto+0x180>)
 8011376:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801137a:	889a      	ldrh	r2, [r3, #4]
 801137c:	f8ad 201a 	strh.w	r2, [sp, #26]
        conn.RemotePort = NET_NTOHS(dest->sin_port);
 8011380:	8842      	ldrh	r2, [r0, #2]
 8011382:	ba52      	rev16	r2, r2
 8011384:	f8ad 2018 	strh.w	r2, [sp, #24]
        NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 8011388:	79c2      	ldrb	r2, [r0, #7]
 801138a:	f88d 201f 	strb.w	r2, [sp, #31]
 801138e:	7982      	ldrb	r2, [r0, #6]
 8011390:	f88d 201e 	strb.w	r2, [sp, #30]
 8011394:	7942      	ldrb	r2, [r0, #5]
 8011396:	f88d 201d 	strb.w	r2, [sp, #29]
 801139a:	7902      	ldrb	r2, [r0, #4]
 801139c:	f88d 201c 	strb.w	r2, [sp, #28]
        conn.Type = ES_WIFI_UDP_CONNECTION;
 80113a0:	2201      	movs	r2, #1
 80113a2:	f88d 2014 	strb.w	r2, [sp, #20]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 80113a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80113ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80113ae:	f7ff fb43 	bl	8010a38 <castcontext>
 80113b2:	a905      	add	r1, sp, #20
 80113b4:	f7f5 fd5c 	bl	8006e70 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 80113b8:	b948      	cbnz	r0, 80113ce <es_wifi_sendto+0x156>
          WifiChannel[sock].status |= WIFI_STARTED_CLIENT_SOCKET;
 80113ba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80113be:	4a0e      	ldr	r2, [pc, #56]	; (80113f8 <es_wifi_sendto+0x180>)
 80113c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80113c4:	785a      	ldrb	r2, [r3, #1]
 80113c6:	f042 0220 	orr.w	r2, r2, #32
 80113ca:	705a      	strb	r2, [r3, #1]
    if (ret == NET_OK)
 80113cc:	e77d      	b.n	80112ca <es_wifi_sendto+0x52>
          ret = NET_ERROR_SOCKET_FAILURE;
 80113ce:	f06f 0512 	mvn.w	r5, #18
 80113d2:	e7c4      	b.n	801135e <es_wifi_sendto+0xe6>
        ret = NET_ERROR_SOCKET_FAILURE;
 80113d4:	f06f 0512 	mvn.w	r5, #18
 80113d8:	e7b8      	b.n	801134c <es_wifi_sendto+0xd4>
    ret = NET_ERROR_UNSUPPORTED;
 80113da:	f06f 0502 	mvn.w	r5, #2
 80113de:	e7be      	b.n	801135e <es_wifi_sendto+0xe6>
 80113e0:	f06f 0502 	mvn.w	r5, #2
 80113e4:	e7bb      	b.n	801135e <es_wifi_sendto+0xe6>
    ret = NET_ERROR_INVALID_SOCKET;
 80113e6:	f06f 0505 	mvn.w	r5, #5
 80113ea:	e7b8      	b.n	801135e <es_wifi_sendto+0xe6>
    ret = NET_ERROR_SOCKET_FAILURE;
 80113ec:	f06f 0512 	mvn.w	r5, #18
 80113f0:	e7b5      	b.n	801135e <es_wifi_sendto+0xe6>
    ret =  NET_ERROR_SOCKET_FAILURE;
 80113f2:	f06f 0512 	mvn.w	r5, #18
  return ret;
 80113f6:	e7b2      	b.n	801135e <es_wifi_sendto+0xe6>
 80113f8:	2400c748 	.word	0x2400c748

080113fc <es_wifi_recvfrom>:
{
 80113fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011400:	b08a      	sub	sp, #40	; 0x28
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011402:	2803      	cmp	r0, #3
 8011404:	f200 8097 	bhi.w	8011536 <es_wifi_recvfrom+0x13a>
 8011408:	4604      	mov	r4, r0
 801140a:	4688      	mov	r8, r1
 801140c:	4615      	mov	r5, r2
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 801140e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011412:	4f4d      	ldr	r7, [pc, #308]	; (8011548 <es_wifi_recvfrom+0x14c>)
 8011414:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8011418:	7882      	ldrb	r2, [r0, #2]
 801141a:	2a11      	cmp	r2, #17
 801141c:	f040 808e 	bne.w	801153c <es_wifi_recvfrom+0x140>
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 8011420:	7842      	ldrb	r2, [r0, #1]
 8011422:	f012 0f08 	tst.w	r2, #8
 8011426:	f000 808c 	beq.w	8011542 <es_wifi_recvfrom+0x146>
    if (((uint8_t) flags & (uint8_t) NET_MSG_DONTWAIT) == 0U)
 801142a:	f013 0f08 	tst.w	r3, #8
 801142e:	d107      	bne.n	8011440 <es_wifi_recvfrom+0x44>
      timeout = (uint32_t) WifiChannel[sock].recvtimeout;
 8011430:	6986      	ldr	r6, [r0, #24]
    if (timeout > (uint32_t) ES_WIFI_MAX_SO_TIMEOUT)
 8011432:	f247 5330 	movw	r3, #30000	; 0x7530
 8011436:	429e      	cmp	r6, r3
 8011438:	d903      	bls.n	8011442 <es_wifi_recvfrom+0x46>
      ret = NET_ERROR_UNSUPPORTED;
 801143a:	f06f 0702 	mvn.w	r7, #2
  return ret;
 801143e:	e030      	b.n	80114a2 <es_wifi_recvfrom+0xa6>
  uint32_t timeout = 0;
 8011440:	2600      	movs	r6, #0
      if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 8011442:	f012 0f20 	tst.w	r2, #32
 8011446:	d030      	beq.n	80114aa <es_wifi_recvfrom+0xae>
        uint32_t IPaddr = 0;
 8011448:	2300      	movs	r3, #0
 801144a:	9305      	str	r3, [sp, #20]
        uint16_t port = 0;
 801144c:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (len > ES_WIFI_PAYLOAD_SIZE)
 8011450:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8011454:	dd01      	ble.n	801145a <es_wifi_recvfrom+0x5e>
          len = ES_WIFI_PAYLOAD_SIZE;
 8011456:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
        if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveDataFrom(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801145a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801145e:	4a3a      	ldr	r2, [pc, #232]	; (8011548 <es_wifi_recvfrom+0x14c>)
 8011460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011466:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801146a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801146c:	f7ff fae4 	bl	8010a38 <castcontext>
 8011470:	f10d 0312 	add.w	r3, sp, #18
 8011474:	9303      	str	r3, [sp, #12]
 8011476:	ab05      	add	r3, sp, #20
 8011478:	9302      	str	r3, [sp, #8]
 801147a:	9601      	str	r6, [sp, #4]
 801147c:	ab04      	add	r3, sp, #16
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	b2ab      	uxth	r3, r5
 8011482:	4642      	mov	r2, r8
 8011484:	b2e1      	uxtb	r1, r4
 8011486:	f7f6 f857 	bl	8007538 <ES_WIFI_ReceiveDataFrom>
 801148a:	b368      	cbz	r0, 80114e8 <es_wifi_recvfrom+0xec>
          ret = NET_ERROR_SOCKET_FAILURE;
 801148c:	f06f 0712 	mvn.w	r7, #18
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 8011490:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011494:	482c      	ldr	r0, [pc, #176]	; (8011548 <es_wifi_recvfrom+0x14c>)
 8011496:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 801149a:	4639      	mov	r1, r7
 801149c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801149e:	f7ff fe6b 	bl	8011178 <check_connection_lost>
}
 80114a2:	4638      	mov	r0, r7
 80114a4:	b00a      	add	sp, #40	; 0x28
 80114a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void) NET_ATON((const char_t *)"224.0.0.251", &ipaddr);
 80114aa:	a905      	add	r1, sp, #20
 80114ac:	4827      	ldr	r0, [pc, #156]	; (801154c <es_wifi_recvfrom+0x150>)
 80114ae:	f7fe ffbc 	bl	801042a <net_aton>
        NET_IPADDR_PORT_TO_SOCKADDR(&saddr, &ipaddr, 5353);
 80114b2:	2310      	movs	r3, #16
 80114b4:	f88d 3018 	strb.w	r3, [sp, #24]
 80114b8:	2202      	movs	r2, #2
 80114ba:	f88d 2019 	strb.w	r2, [sp, #25]
 80114be:	f64e 1214 	movw	r2, #59668	; 0xe914
 80114c2:	f8ad 201a 	strh.w	r2, [sp, #26]
 80114c6:	9a05      	ldr	r2, [sp, #20]
 80114c8:	9207      	str	r2, [sp, #28]
 80114ca:	2100      	movs	r1, #0
 80114cc:	9108      	str	r1, [sp, #32]
 80114ce:	9109      	str	r1, [sp, #36]	; 0x24
        ret = es_wifi_sendto(sock, NULL, 0, flags, &saddr, sizeof(sockaddr_in_t));
 80114d0:	9301      	str	r3, [sp, #4]
 80114d2:	ab06      	add	r3, sp, #24
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	460b      	mov	r3, r1
 80114d8:	460a      	mov	r2, r1
 80114da:	4620      	mov	r0, r4
 80114dc:	f7ff fecc 	bl	8011278 <es_wifi_sendto>
      if (ret == NET_OK)
 80114e0:	4607      	mov	r7, r0
 80114e2:	2800      	cmp	r0, #0
 80114e4:	d1d4      	bne.n	8011490 <es_wifi_recvfrom+0x94>
 80114e6:	e7af      	b.n	8011448 <es_wifi_recvfrom+0x4c>
          (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 80114e8:	2100      	movs	r1, #0
 80114ea:	9106      	str	r1, [sp, #24]
 80114ec:	9107      	str	r1, [sp, #28]
 80114ee:	9108      	str	r1, [sp, #32]
 80114f0:	9109      	str	r1, [sp, #36]	; 0x24
          saddr.sin_family = NET_AF_INET;
 80114f2:	2302      	movs	r3, #2
 80114f4:	f88d 3019 	strb.w	r3, [sp, #25]
          saddr.sin_addr.s_addr = IPaddr;
 80114f8:	9b05      	ldr	r3, [sp, #20]
 80114fa:	9307      	str	r3, [sp, #28]
          saddr.sin_port = NET_HTONS(port);
 80114fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011500:	ba5b      	rev16	r3, r3
 8011502:	f8ad 301a 	strh.w	r3, [sp, #26]
          saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8011506:	2510      	movs	r5, #16
 8011508:	f88d 5018 	strb.w	r5, [sp, #24]
          (void)  memset(from, 0, *fromlen);
 801150c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011512:	f00f f90b 	bl	802072c <memset>
          (void)  memcpy(from, &saddr, MIN((*fromlen), (saddr.sin_len)));
 8011516:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801151a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	429a      	cmp	r2, r3
 8011520:	bf28      	it	cs
 8011522:	461a      	movcs	r2, r3
 8011524:	a906      	add	r1, sp, #24
 8011526:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011528:	f00f f8f2 	bl	8020710 <memcpy>
          *fromlen = sizeof(sockaddr_in_t);
 801152c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801152e:	601d      	str	r5, [r3, #0]
          ret = (int32_t) ReceivedDatalen;
 8011530:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 8011534:	e7ac      	b.n	8011490 <es_wifi_recvfrom+0x94>
    ret = NET_ERROR_INVALID_SOCKET;
 8011536:	f06f 0705 	mvn.w	r7, #5
 801153a:	e7b2      	b.n	80114a2 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 801153c:	f06f 0712 	mvn.w	r7, #18
 8011540:	e7af      	b.n	80114a2 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 8011542:	f06f 0712 	mvn.w	r7, #18
 8011546:	e7ac      	b.n	80114a2 <es_wifi_recvfrom+0xa6>
 8011548:	2400c748 	.word	0x2400c748
 801154c:	0802348c 	.word	0x0802348c

08011550 <es_wifi_recv>:
{
 8011550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011552:	b085      	sub	sp, #20
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011554:	2803      	cmp	r0, #3
 8011556:	d83f      	bhi.n	80115d8 <es_wifi_recv+0x88>
 8011558:	4604      	mov	r4, r0
 801155a:	460e      	mov	r6, r1
 801155c:	4615      	mov	r5, r2
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 801155e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011562:	4920      	ldr	r1, [pc, #128]	; (80115e4 <es_wifi_recv+0x94>)
 8011564:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011568:	7852      	ldrb	r2, [r2, #1]
 801156a:	f012 0f08 	tst.w	r2, #8
 801156e:	d036      	beq.n	80115de <es_wifi_recv+0x8e>
    if (flags == (int32_t) NET_MSG_DONTWAIT)
 8011570:	2b08      	cmp	r3, #8
 8011572:	d02c      	beq.n	80115ce <es_wifi_recv+0x7e>
      timeout = (uint16_t) WifiChannel[sock].recvtimeout;
 8011574:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011578:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801157c:	8b1f      	ldrh	r7, [r3, #24]
    if (len > ES_WIFI_PAYLOAD_SIZE)
 801157e:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8011582:	dd01      	ble.n	8011588 <es_wifi_recv+0x38>
      len = ES_WIFI_PAYLOAD_SIZE;
 8011584:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8011588:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801158c:	4a15      	ldr	r2, [pc, #84]	; (80115e4 <es_wifi_recv+0x94>)
 801158e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011594:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011598:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801159a:	f7ff fa4d 	bl	8010a38 <castcontext>
 801159e:	9701      	str	r7, [sp, #4]
 80115a0:	f10d 030e 	add.w	r3, sp, #14
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	b2ab      	uxth	r3, r5
 80115a8:	4632      	mov	r2, r6
 80115aa:	b2e1      	uxtb	r1, r4
 80115ac:	f7f5 ff70 	bl	8007490 <ES_WIFI_ReceiveData>
 80115b0:	b978      	cbnz	r0, 80115d2 <es_wifi_recv+0x82>
      ret = (int32_t) ReceivedDatalen;
 80115b2:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 80115b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80115ba:	480a      	ldr	r0, [pc, #40]	; (80115e4 <es_wifi_recv+0x94>)
 80115bc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80115c0:	4629      	mov	r1, r5
 80115c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80115c4:	f7ff fdd8 	bl	8011178 <check_connection_lost>
}
 80115c8:	4628      	mov	r0, r5
 80115ca:	b005      	add	sp, #20
 80115cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      timeout = 0;
 80115ce:	2700      	movs	r7, #0
 80115d0:	e7d5      	b.n	801157e <es_wifi_recv+0x2e>
      ret = NET_ERROR_SOCKET_FAILURE;
 80115d2:	f06f 0512 	mvn.w	r5, #18
 80115d6:	e7ee      	b.n	80115b6 <es_wifi_recv+0x66>
    ret = NET_ERROR_INVALID_SOCKET;
 80115d8:	f06f 0505 	mvn.w	r5, #5
 80115dc:	e7f4      	b.n	80115c8 <es_wifi_recv+0x78>
    ret = NET_ERROR_SOCKET_FAILURE;
 80115de:	f06f 0512 	mvn.w	r5, #18
  return ret;
 80115e2:	e7f1      	b.n	80115c8 <es_wifi_recv+0x78>
 80115e4:	2400c748 	.word	0x2400c748

080115e8 <es_wifi_send>:
{
 80115e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115ea:	b085      	sub	sp, #20
  if (flags != 0)
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d139      	bne.n	8011664 <es_wifi_send+0x7c>
 80115f0:	4604      	mov	r4, r0
 80115f2:	460f      	mov	r7, r1
 80115f4:	4615      	mov	r5, r2
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80115f6:	2803      	cmp	r0, #3
 80115f8:	d837      	bhi.n	801166a <es_wifi_send+0x82>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 80115fa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80115fe:	4a1e      	ldr	r2, [pc, #120]	; (8011678 <es_wifi_send+0x90>)
 8011600:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011604:	785b      	ldrb	r3, [r3, #1]
 8011606:	f013 0f04 	tst.w	r3, #4
 801160a:	d031      	beq.n	8011670 <es_wifi_send+0x88>
    if (len > ES_WIFI_PAYLOAD_SIZE)
 801160c:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8011610:	dd01      	ble.n	8011616 <es_wifi_send+0x2e>
      len = ES_WIFI_PAYLOAD_SIZE;
 8011612:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8011616:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 801161a:	4b17      	ldr	r3, [pc, #92]	; (8011678 <es_wifi_send+0x90>)
 801161c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011620:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011622:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011626:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011628:	f7ff fa06 	bl	8010a38 <castcontext>
                                              (uint32_t) WifiChannel[sock].sendtimeout))
 801162c:	6973      	ldr	r3, [r6, #20]
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801162e:	9301      	str	r3, [sp, #4]
 8011630:	f10d 030e 	add.w	r3, sp, #14
 8011634:	9300      	str	r3, [sp, #0]
 8011636:	b2ab      	uxth	r3, r5
 8011638:	463a      	mov	r2, r7
 801163a:	b2e1      	uxtb	r1, r4
 801163c:	f7f5 fe32 	bl	80072a4 <ES_WIFI_SendData>
 8011640:	b968      	cbnz	r0, 801165e <es_wifi_send+0x76>
      ret = (int32_t) SentDatalen;
 8011642:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 8011646:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801164a:	480b      	ldr	r0, [pc, #44]	; (8011678 <es_wifi_send+0x90>)
 801164c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8011650:	4629      	mov	r1, r5
 8011652:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011654:	f7ff fd90 	bl	8011178 <check_connection_lost>
}
 8011658:	4628      	mov	r0, r5
 801165a:	b005      	add	sp, #20
 801165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = NET_ERROR_SOCKET_FAILURE;
 801165e:	f06f 0512 	mvn.w	r5, #18
 8011662:	e7f0      	b.n	8011646 <es_wifi_send+0x5e>
    ret = NET_ERROR_UNSUPPORTED;
 8011664:	f06f 0502 	mvn.w	r5, #2
 8011668:	e7f6      	b.n	8011658 <es_wifi_send+0x70>
    ret = NET_ERROR_INVALID_SOCKET;
 801166a:	f06f 0505 	mvn.w	r5, #5
 801166e:	e7f3      	b.n	8011658 <es_wifi_send+0x70>
    ret = NET_ERROR_SOCKET_FAILURE;
 8011670:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8011674:	e7f0      	b.n	8011658 <es_wifi_send+0x70>
 8011676:	bf00      	nop
 8011678:	2400c748 	.word	0x2400c748

0801167c <es_wifi_accept>:
{
 801167c:	b530      	push	{r4, r5, lr}
 801167e:	b087      	sub	sp, #28
 8011680:	4604      	mov	r4, r0
  sockaddr_in_t *addrin = cast2sockaddr_in(addr);
 8011682:	4608      	mov	r0, r1
 8011684:	f7ff f9d9 	bl	8010a3a <cast2sockaddr_in>
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011688:	2c03      	cmp	r4, #3
 801168a:	d834      	bhi.n	80116f6 <es_wifi_accept+0x7a>
 801168c:	4605      	mov	r5, r0
    conn.Number = (uint8_t) sock;
 801168e:	f88d 4006 	strb.w	r4, [sp, #6]
    status = ES_WIFI_WaitServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), 0, &conn);
 8011692:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011696:	4a19      	ldr	r2, [pc, #100]	; (80116fc <es_wifi_accept+0x80>)
 8011698:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801169e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80116a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80116a4:	f7ff f9c8 	bl	8010a38 <castcontext>
 80116a8:	aa01      	add	r2, sp, #4
 80116aa:	2100      	movs	r1, #0
 80116ac:	f7f5 fd06 	bl	80070bc <ES_WIFI_WaitServerConnection>
    if (ES_WIFI_STATUS_OK == status)
 80116b0:	b9e8      	cbnz	r0, 80116ee <es_wifi_accept+0x72>
      addrin->sin_port = NET_NTOHS(conn.RemotePort);
 80116b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80116b6:	ba5b      	rev16	r3, r3
 80116b8:	806b      	strh	r3, [r5, #2]
      addrin->sin_addr.s_addr = NET_ARTON(conn.RemoteIP);
 80116ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80116be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80116c2:	041b      	lsls	r3, r3, #16
 80116c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80116c8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80116cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80116d0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80116d4:	4313      	orrs	r3, r2
 80116d6:	606b      	str	r3, [r5, #4]
      WifiChannel [sock].status |= WIFI_CONNECTED_SOCKET_RW | WIFI_STARTED_SERVER_SOCKET ;
 80116d8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80116dc:	4b07      	ldr	r3, [pc, #28]	; (80116fc <es_wifi_accept+0x80>)
 80116de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116e2:	785a      	ldrb	r2, [r3, #1]
 80116e4:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 80116e8:	705a      	strb	r2, [r3, #1]
      ret = sock;
 80116ea:	4620      	mov	r0, r4
 80116ec:	e001      	b.n	80116f2 <es_wifi_accept+0x76>
      ret =  NET_ERROR_SOCKET_FAILURE;
 80116ee:	f06f 0012 	mvn.w	r0, #18
}
 80116f2:	b007      	add	sp, #28
 80116f4:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 80116f6:	f06f 0005 	mvn.w	r0, #5
  return ret;
 80116fa:	e7fa      	b.n	80116f2 <es_wifi_accept+0x76>
 80116fc:	2400c748 	.word	0x2400c748

08011700 <es_wifi_listen>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011700:	2803      	cmp	r0, #3
 8011702:	d826      	bhi.n	8011752 <es_wifi_listen+0x52>
{
 8011704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011708:	b086      	sub	sp, #24
 801170a:	4604      	mov	r4, r0
 801170c:	460f      	mov	r7, r1
    ES_WIFIObject_t  *pEsWifiObj = castcontext(WifiChannel[sock].pnetif->pdrv->context);
 801170e:	4d12      	ldr	r5, [pc, #72]	; (8011758 <es_wifi_listen+0x58>)
 8011710:	eb00 0680 	add.w	r6, r0, r0, lsl #2
 8011714:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8011718:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801171a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801171e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011720:	f7ff f98a 	bl	8010a38 <castcontext>
    conn.Number = (uint8_t) sock;
 8011724:	f88d 4006 	strb.w	r4, [sp, #6]
    conn.LocalPort = WifiChannel[sock].localport;
 8011728:	88b3      	ldrh	r3, [r6, #4]
 801172a:	f8ad 300a 	strh.w	r3, [sp, #10]
    conn.Type = ES_WIFI_UDP_CONNECTION;
 801172e:	2301      	movs	r3, #1
 8011730:	f88d 3004 	strb.w	r3, [sp, #4]
    if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_TCP)
 8011734:	78b3      	ldrb	r3, [r6, #2]
 8011736:	2b06      	cmp	r3, #6
 8011738:	d007      	beq.n	801174a <es_wifi_listen+0x4a>
    conn.Backlog = (uint8_t) backlog;
 801173a:	f88d 7014 	strb.w	r7, [sp, #20]
    ret = (int32_t) ES_WIFI_StartServerSingleConn(pEsWifiObj, &conn);
 801173e:	a901      	add	r1, sp, #4
 8011740:	f7f5 fc50 	bl	8006fe4 <ES_WIFI_StartServerSingleConn>
}
 8011744:	b006      	add	sp, #24
 8011746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      conn.Type = ES_WIFI_TCP_CONNECTION;
 801174a:	2300      	movs	r3, #0
 801174c:	f88d 3004 	strb.w	r3, [sp, #4]
 8011750:	e7f3      	b.n	801173a <es_wifi_listen+0x3a>
    ret = NET_ERROR_INVALID_SOCKET;
 8011752:	f06f 0005 	mvn.w	r0, #5
}
 8011756:	4770      	bx	lr
 8011758:	2400c748 	.word	0x2400c748

0801175c <es_wifi_if_disconnect>:
{
 801175c:	b510      	push	{r4, lr}
 801175e:	4604      	mov	r4, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8011760:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011764:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011766:	f7ff f967 	bl	8010a38 <castcontext>
  (void) ES_WIFI_Disconnect(pEsWifiObj);
 801176a:	f7f5 fa49 	bl	8006c00 <ES_WIFI_Disconnect>
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 801176e:	2107      	movs	r1, #7
 8011770:	4620      	mov	r0, r4
 8011772:	f7ff f92b 	bl	80109cc <net_state_manage_event>
}
 8011776:	2000      	movs	r0, #0
 8011778:	bd10      	pop	{r4, pc}
	...

0801177c <es_wifi_if_start>:
{
 801177c:	b570      	push	{r4, r5, r6, lr}
 801177e:	4604      	mov	r4, r0
  if (wifi_probe(&pnetif->pdrv->context) == NET_OK)
 8011780:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011784:	302c      	adds	r0, #44	; 0x2c
 8011786:	f7f1 fadd 	bl	8002d44 <wifi_probe>
 801178a:	2800      	cmp	r0, #0
 801178c:	d13f      	bne.n	801180e <es_wifi_if_start+0x92>
 801178e:	4605      	mov	r5, r0
    pEsWifiObj = castcontext(pnetif->pdrv->context);
 8011790:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011794:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011796:	f7ff f94f 	bl	8010a38 <castcontext>
 801179a:	4606      	mov	r6, r0
    if (ES_WIFI_STATUS_OK != ES_WIFI_Init(pEsWifiObj))
 801179c:	f7f5 f8fc 	bl	8006998 <ES_WIFI_Init>
 80117a0:	bbc0      	cbnz	r0, 8011814 <es_wifi_if_start+0x98>
      (void)strncpy(pnetif->DeviceName, (char_t *)pEsWifiObj->Product_Name, NET_DEVICE_NAME_LEN);
 80117a2:	2240      	movs	r2, #64	; 0x40
 80117a4:	f106 0168 	add.w	r1, r6, #104	; 0x68
 80117a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80117ac:	f00f fcc9 	bl	8021142 <strncpy>
      (void) strncpy(pnetif->DeviceID, (char_t *)pEsWifiObj->Product_ID, NET_DEVICE_ID_LEN);
 80117b0:	2240      	movs	r2, #64	; 0x40
 80117b2:	4631      	mov	r1, r6
 80117b4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80117b8:	f00f fcc3 	bl	8021142 <strncpy>
      (void) strncpy(pnetif->DeviceVer, (char_t *)pEsWifiObj->FW_Rev, NET_DEVICE_VER_LEN);
 80117bc:	2240      	movs	r2, #64	; 0x40
 80117be:	f106 0120 	add.w	r1, r6, #32
 80117c2:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80117c6:	f00f fcbc 	bl	8021142 <strncpy>
      (void) ES_WIFI_GetMACAddress(pEsWifiObj, pnetif->macaddr.mac);
 80117ca:	f104 01e4 	add.w	r1, r4, #228	; 0xe4
 80117ce:	4630      	mov	r0, r6
 80117d0:	f7f5 faac 	bl	8006d2c <ES_WIFI_GetMACAddress>
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 80117d4:	462b      	mov	r3, r5
 80117d6:	e012      	b.n	80117fe <es_wifi_if_start+0x82>
        WifiChannel[i].status          = WIFI_FREE_SOCKET;
 80117d8:	4910      	ldr	r1, [pc, #64]	; (801181c <es_wifi_if_start+0xa0>)
 80117da:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80117de:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 80117e2:	f04f 0c00 	mov.w	ip, #0
 80117e6:	f882 c001 	strb.w	ip, [r2, #1]
        WifiChannel[i].Number          = (uint8_t) i;
 80117ea:	f801 3030 	strb.w	r3, [r1, r0, lsl #3]
        WifiChannel[i].recvtimeout     = MIN((NET_SOCK_DEFAULT_RECEIVE_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 80117ee:	f247 5130 	movw	r1, #30000	; 0x7530
 80117f2:	6191      	str	r1, [r2, #24]
        WifiChannel[i].sendtimeout     = MIN((NET_SOCK_DEFAULT_SEND_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 80117f4:	6151      	str	r1, [r2, #20]
        WifiChannel[i].blocking        = 1; /* default blocking */
 80117f6:	2101      	movs	r1, #1
 80117f8:	6111      	str	r1, [r2, #16]
        WifiChannel[i].pnetif          = pnetif;
 80117fa:	6254      	str	r4, [r2, #36]	; 0x24
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 80117fc:	440b      	add	r3, r1
 80117fe:	2b03      	cmp	r3, #3
 8011800:	ddea      	ble.n	80117d8 <es_wifi_if_start+0x5c>
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8011802:	2107      	movs	r1, #7
 8011804:	4620      	mov	r0, r4
 8011806:	f7ff f8e1 	bl	80109cc <net_state_manage_event>
}
 801180a:	4628      	mov	r0, r5
 801180c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_DEVICE_ERROR;
 801180e:	f06f 050c 	mvn.w	r5, #12
 8011812:	e7fa      	b.n	801180a <es_wifi_if_start+0x8e>
      ret = NET_ERROR_INTERFACE_FAILURE;
 8011814:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8011818:	e7f7      	b.n	801180a <es_wifi_if_start+0x8e>
 801181a:	bf00      	nop
 801181c:	2400c748 	.word	0x2400c748

08011820 <es_wifi_driver>:
{
 8011820:	b508      	push	{r3, lr}
  return es_wifi_if_init(pnetif);
 8011822:	f7ff fa51 	bl	8010cc8 <es_wifi_if_init>
}
 8011826:	bd08      	pop	{r3, pc}

08011828 <GetESWifiSecurityType>:
  if (security == NET_WIFI_SM_OPEN)
 8011828:	4603      	mov	r3, r0
 801182a:	b1e8      	cbz	r0, 8011868 <GetESWifiSecurityType+0x40>
  ES_WIFI_SecurityType_t        ret = ES_WIFI_SEC_UNKNOWN;
 801182c:	20ff      	movs	r0, #255	; 0xff
  if (MATCH(security, NET_WEP_ENABLED))
 801182e:	f013 0f01 	tst.w	r3, #1
 8011832:	d000      	beq.n	8011836 <GetESWifiSecurityType+0xe>
    ret = ES_WIFI_SEC_WEP;
 8011834:	2001      	movs	r0, #1
  if (MATCH(security, NET_WIFI_SM_WPA_MIXED_PSK))
 8011836:	4a14      	ldr	r2, [pc, #80]	; (8011888 <GetESWifiSecurityType+0x60>)
 8011838:	439a      	bics	r2, r3
 801183a:	d017      	beq.n	801186c <GetESWifiSecurityType+0x44>
  if (MATCH(security, NET_WIFI_SM_WPA_TKIP_PSK))
 801183c:	4a13      	ldr	r2, [pc, #76]	; (801188c <GetESWifiSecurityType+0x64>)
 801183e:	439a      	bics	r2, r3
 8011840:	d016      	beq.n	8011870 <GetESWifiSecurityType+0x48>
  if (MATCH(security, NET_WIFI_SM_WPA_AES_PSK))
 8011842:	4a13      	ldr	r2, [pc, #76]	; (8011890 <GetESWifiSecurityType+0x68>)
 8011844:	439a      	bics	r2, r3
 8011846:	d015      	beq.n	8011874 <GetESWifiSecurityType+0x4c>
  if (MATCH(security, NET_WIFI_SM_WPA2_WPA_PSK))
 8011848:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801184c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8011850:	d012      	beq.n	8011878 <GetESWifiSecurityType+0x50>
  if (MATCH(security, NET_WIFI_SM_WPA2_TKIP_PSK))
 8011852:	4a10      	ldr	r2, [pc, #64]	; (8011894 <GetESWifiSecurityType+0x6c>)
 8011854:	439a      	bics	r2, r3
 8011856:	d011      	beq.n	801187c <GetESWifiSecurityType+0x54>
  if (MATCH(security, NET_WIFI_SM_WPA2_AES_PSK))
 8011858:	4a0f      	ldr	r2, [pc, #60]	; (8011898 <GetESWifiSecurityType+0x70>)
 801185a:	439a      	bics	r2, r3
 801185c:	d010      	beq.n	8011880 <GetESWifiSecurityType+0x58>
  if (MATCH(security, NET_WIFI_SM_WPA2_MIXED_PSK))
 801185e:	4a0f      	ldr	r2, [pc, #60]	; (801189c <GetESWifiSecurityType+0x74>)
 8011860:	ea32 0303 	bics.w	r3, r2, r3
 8011864:	d00e      	beq.n	8011884 <GetESWifiSecurityType+0x5c>
}
 8011866:	4770      	bx	lr
    ret = ES_WIFI_SEC_OPEN;
 8011868:	2000      	movs	r0, #0
 801186a:	e7e0      	b.n	801182e <GetESWifiSecurityType+0x6>
    ret = ES_WIFI_SEC_WPA;
 801186c:	2002      	movs	r0, #2
 801186e:	e7e5      	b.n	801183c <GetESWifiSecurityType+0x14>
    ret = ES_WIFI_SEC_WPA;
 8011870:	2002      	movs	r0, #2
 8011872:	e7e6      	b.n	8011842 <GetESWifiSecurityType+0x1a>
    ret = ES_WIFI_SEC_WPA;
 8011874:	2002      	movs	r0, #2
 8011876:	e7e7      	b.n	8011848 <GetESWifiSecurityType+0x20>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8011878:	2004      	movs	r0, #4
 801187a:	e7ea      	b.n	8011852 <GetESWifiSecurityType+0x2a>
    ret = ES_WIFI_SEC_WPA_WPA2;
 801187c:	2004      	movs	r0, #4
 801187e:	e7eb      	b.n	8011858 <GetESWifiSecurityType+0x30>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8011880:	2004      	movs	r0, #4
 8011882:	e7ec      	b.n	801185e <GetESWifiSecurityType+0x36>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8011884:	2004      	movs	r0, #4
 8011886:	e7ee      	b.n	8011866 <GetESWifiSecurityType+0x3e>
 8011888:	00200006 	.word	0x00200006
 801188c:	00200002 	.word	0x00200002
 8011890:	00200004 	.word	0x00200004
 8011894:	00400002 	.word	0x00400002
 8011898:	00400004 	.word	0x00400004
 801189c:	00400006 	.word	0x00400006

080118a0 <es_wifi_if_connect_sta>:
{
 80118a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118a2:	b083      	sub	sp, #12
 80118a4:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 80118a6:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
 80118aa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80118ac:	f7ff f8c4 	bl	8010a38 <castcontext>
 80118b0:	4604      	mov	r4, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 80118b2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80118b4:	695b      	ldr	r3, [r3, #20]
  ret = ES_WIFI_Connect(pEsWifiObj, credentials->ssid, credentials->psk,
 80118b6:	681e      	ldr	r6, [r3, #0]
 80118b8:	685f      	ldr	r7, [r3, #4]
 80118ba:	6898      	ldr	r0, [r3, #8]
 80118bc:	f7ff ffb4 	bl	8011828 <GetESWifiSecurityType>
 80118c0:	4603      	mov	r3, r0
 80118c2:	463a      	mov	r2, r7
 80118c4:	4631      	mov	r1, r6
 80118c6:	4620      	mov	r0, r4
 80118c8:	f7f5 f936 	bl	8006b38 <ES_WIFI_Connect>
  if (ret == ES_WIFI_STATUS_OK)
 80118cc:	4606      	mov	r6, r0
 80118ce:	b138      	cbz	r0, 80118e0 <es_wifi_if_connect_sta+0x40>
  if (ES_WIFI_STATUS_OK == ret)
 80118d0:	b91e      	cbnz	r6, 80118da <es_wifi_if_connect_sta+0x3a>
    if (pEsWifiObj->NetSettings.IsConnected != 0U)
 80118d2:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 80118d6:	b943      	cbnz	r3, 80118ea <es_wifi_if_connect_sta+0x4a>
      ret = ES_WIFI_STATUS_ERROR;
 80118d8:	2602      	movs	r6, #2
}
 80118da:	4630      	mov	r0, r6
 80118dc:	b003      	add	sp, #12
 80118de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = ES_WIFI_GetNetworkSettings(pEsWifiObj);
 80118e0:	4620      	mov	r0, r4
 80118e2:	f7f5 f99d 	bl	8006c20 <ES_WIFI_GetNetworkSettings>
 80118e6:	4606      	mov	r6, r0
 80118e8:	e7f2      	b.n	80118d0 <es_wifi_if_connect_sta+0x30>
      (void) memcpy(addr, pEsWifiObj->NetSettings.IP_Addr, 4);
 80118ea:	f8d4 20d5 	ldr.w	r2, [r4, #213]	; 0xd5
 80118ee:	9201      	str	r2, [sp, #4]
      pnetif->ipaddr.addr = NET_ARTON(addr);
 80118f0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80118f4:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
 80118f8:	430b      	orrs	r3, r1
 80118fa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80118fe:	430b      	orrs	r3, r1
 8011900:	b2d2      	uxtb	r2, r2
 8011902:	4313      	orrs	r3, r2
 8011904:	606b      	str	r3, [r5, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8011906:	210a      	movs	r1, #10
 8011908:	4628      	mov	r0, r5
 801190a:	f7ff f85f 	bl	80109cc <net_state_manage_event>
      ret = ES_WIFI_STATUS_OK;
 801190e:	e7e4      	b.n	80118da <es_wifi_if_connect_sta+0x3a>

08011910 <es_wifi_if_connect_ap>:
{
 8011910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011912:	b093      	sub	sp, #76	; 0x4c
 8011914:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8011916:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
 801191a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801191c:	f7ff f88c 	bl	8010a38 <castcontext>
 8011920:	4606      	mov	r6, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8011922:	6f64      	ldr	r4, [r4, #116]	; 0x74
 8011924:	6967      	ldr	r7, [r4, #20]
  (void) strncpy((char_t *) ApConfig.SSID, credentials->ssid, sizeof(ApConfig.SSID));
 8011926:	2221      	movs	r2, #33	; 0x21
 8011928:	6839      	ldr	r1, [r7, #0]
 801192a:	4668      	mov	r0, sp
 801192c:	f00f fc09 	bl	8021142 <strncpy>
  (void) strncpy((char_t *) ApConfig.Pass, credentials->psk, sizeof(ApConfig.SSID));
 8011930:	2221      	movs	r2, #33	; 0x21
 8011932:	6879      	ldr	r1, [r7, #4]
 8011934:	eb0d 0002 	add.w	r0, sp, r2
 8011938:	f00f fc03 	bl	8021142 <strncpy>
  ApConfig.Security = GetESWifiSecurityType(credentials->security_mode);
 801193c:	68b8      	ldr	r0, [r7, #8]
 801193e:	f7ff ff73 	bl	8011828 <GetESWifiSecurityType>
 8011942:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
  ApConfig.Channel = pnetif->pdrv->extension.wifi->access_channel;
 8011946:	7e63      	ldrb	r3, [r4, #25]
 8011948:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  ApConfig.MaxConnections = pnetif->pdrv->extension.wifi->max_connections;
 801194c:	7ea3      	ldrb	r3, [r4, #26]
 801194e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (pnetif->pdrv->extension.wifi->AP_hidden)
 8011952:	7ee3      	ldrb	r3, [r4, #27]
 8011954:	b15b      	cbz	r3, 801196e <es_wifi_if_connect_ap+0x5e>
    ApConfig.Hidden = 1;
 8011956:	2301      	movs	r3, #1
 8011958:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  ret = ES_WIFI_ActivateAP(pEsWifiObj, &ApConfig);
 801195c:	4669      	mov	r1, sp
 801195e:	4630      	mov	r0, r6
 8011960:	f7f5 f978 	bl	8006c54 <ES_WIFI_ActivateAP>
  if (ret == ES_WIFI_STATUS_OK)
 8011964:	4604      	mov	r4, r0
 8011966:	b130      	cbz	r0, 8011976 <es_wifi_if_connect_ap+0x66>
}
 8011968:	4620      	mov	r0, r4
 801196a:	b013      	add	sp, #76	; 0x4c
 801196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ApConfig.Hidden = 0;
 801196e:	2300      	movs	r3, #0
 8011970:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8011974:	e7f2      	b.n	801195c <es_wifi_if_connect_ap+0x4c>
    (void) NET_ATON("192.168.10.1", &(pnetif->ipaddr));
 8011976:	1d29      	adds	r1, r5, #4
 8011978:	4803      	ldr	r0, [pc, #12]	; (8011988 <es_wifi_if_connect_ap+0x78>)
 801197a:	f7fe fd56 	bl	801042a <net_aton>
    (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 801197e:	210a      	movs	r1, #10
 8011980:	4628      	mov	r0, r5
 8011982:	f7ff f823 	bl	80109cc <net_state_manage_event>
    ret = ES_WIFI_STATUS_OK;
 8011986:	e7ef      	b.n	8011968 <es_wifi_if_connect_ap+0x58>
 8011988:	08023498 	.word	0x08023498

0801198c <es_wifi_if_connect>:
{
 801198c:	b508      	push	{r3, lr}
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 801198e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011994:	7e1b      	ldrb	r3, [r3, #24]
 8011996:	b913      	cbnz	r3, 801199e <es_wifi_if_connect+0x12>
    ret =  es_wifi_if_connect_sta(pnetif);
 8011998:	f7ff ff82 	bl	80118a0 <es_wifi_if_connect_sta>
}
 801199c:	bd08      	pop	{r3, pc}
    ret =  es_wifi_if_connect_ap(pnetif);
 801199e:	f7ff ffb7 	bl	8011910 <es_wifi_if_connect_ap>
  return ret;
 80119a2:	e7fb      	b.n	801199c <es_wifi_if_connect+0x10>

080119a4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80119a4:	8880      	ldrh	r0, [r0, #4]
 80119a6:	4770      	bx	lr

080119a8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80119a8:	b570      	push	{r4, r5, r6, lr}
 80119aa:	6803      	ldr	r3, [r0, #0]
 80119ac:	460c      	mov	r4, r1
 80119ae:	2100      	movs	r1, #0
 80119b0:	4605      	mov	r5, r0
 80119b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119b4:	4798      	blx	r3
 80119b6:	4606      	mov	r6, r0
 80119b8:	682b      	ldr	r3, [r5, #0]
 80119ba:	4628      	mov	r0, r5
 80119bc:	1ba4      	subs	r4, r4, r6
 80119be:	6a1b      	ldr	r3, [r3, #32]
 80119c0:	b2a4      	uxth	r4, r4
 80119c2:	4798      	blx	r3
 80119c4:	fbb4 f0f0 	udiv	r0, r4, r0
 80119c8:	bd70      	pop	{r4, r5, r6, pc}

080119ca <_ZN8touchgfx17AbstractPartition5clearEv>:
 80119ca:	2300      	movs	r3, #0
 80119cc:	8083      	strh	r3, [r0, #4]
 80119ce:	4770      	bx	lr

080119d0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80119d0:	b510      	push	{r4, lr}
 80119d2:	6803      	ldr	r3, [r0, #0]
 80119d4:	4604      	mov	r4, r0
 80119d6:	8881      	ldrh	r1, [r0, #4]
 80119d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119da:	4798      	blx	r3
 80119dc:	88a3      	ldrh	r3, [r4, #4]
 80119de:	3301      	adds	r3, #1
 80119e0:	80a3      	strh	r3, [r4, #4]
 80119e2:	bd10      	pop	{r4, pc}

080119e4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80119e4:	6803      	ldr	r3, [r0, #0]
 80119e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e8:	4718      	bx	r3

080119ea <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80119ea:	4770      	bx	lr

080119ec <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80119ec:	4a02      	ldr	r2, [pc, #8]	; (80119f8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80119ee:	6002      	str	r2, [r0, #0]
 80119f0:	2200      	movs	r2, #0
 80119f2:	8082      	strh	r2, [r0, #4]
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop
 80119f8:	080234b0 	.word	0x080234b0

080119fc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80119fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80119fe:	2000      	movs	r0, #0
 8011a00:	b12b      	cbz	r3, 8011a0e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011a02:	b920      	cbnz	r0, 8011a0e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011a04:	1a5a      	subs	r2, r3, r1
 8011a06:	699b      	ldr	r3, [r3, #24]
 8011a08:	4250      	negs	r0, r2
 8011a0a:	4150      	adcs	r0, r2
 8011a0c:	e7f8      	b.n	8011a00 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011a0e:	4770      	bx	lr

08011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011a10:	2300      	movs	r3, #0
 8011a12:	6148      	str	r0, [r1, #20]
 8011a14:	618b      	str	r3, [r1, #24]
 8011a16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011a18:	b913      	cbnz	r3, 8011a20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011a1a:	6281      	str	r1, [r0, #40]	; 0x28
 8011a1c:	4770      	bx	lr
 8011a1e:	4613      	mov	r3, r2
 8011a20:	699a      	ldr	r2, [r3, #24]
 8011a22:	2a00      	cmp	r2, #0
 8011a24:	d1fb      	bne.n	8011a1e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011a26:	6199      	str	r1, [r3, #24]
 8011a28:	4770      	bx	lr

08011a2a <_ZN8touchgfx9Container9removeAllEv>:
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011a2e:	b123      	cbz	r3, 8011a3a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011a30:	6999      	ldr	r1, [r3, #24]
 8011a32:	6281      	str	r1, [r0, #40]	; 0x28
 8011a34:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011a38:	e7f8      	b.n	8011a2c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011a3a:	4770      	bx	lr

08011a3c <_ZN8touchgfx9Container6unlinkEv>:
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	6283      	str	r3, [r0, #40]	; 0x28
 8011a40:	4770      	bx	lr

08011a42 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011a42:	2200      	movs	r2, #0
 8011a44:	8002      	strh	r2, [r0, #0]
 8011a46:	8042      	strh	r2, [r0, #2]
 8011a48:	8082      	strh	r2, [r0, #4]
 8011a4a:	80c2      	strh	r2, [r0, #6]
 8011a4c:	4770      	bx	lr

08011a4e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011a4e:	b570      	push	{r4, r5, r6, lr}
 8011a50:	460d      	mov	r5, r1
 8011a52:	4616      	mov	r6, r2
 8011a54:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011a56:	b13c      	cbz	r4, 8011a68 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011a58:	6823      	ldr	r3, [r4, #0]
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	4632      	mov	r2, r6
 8011a5e:	4629      	mov	r1, r5
 8011a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a62:	4798      	blx	r3
 8011a64:	69a4      	ldr	r4, [r4, #24]
 8011a66:	e7f6      	b.n	8011a56 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011a68:	bd70      	pop	{r4, r5, r6, pc}

08011a6a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011a6a:	b538      	push	{r3, r4, r5, lr}
 8011a6c:	460d      	mov	r5, r1
 8011a6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011a70:	b134      	cbz	r4, 8011a80 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011a72:	682b      	ldr	r3, [r5, #0]
 8011a74:	4621      	mov	r1, r4
 8011a76:	4628      	mov	r0, r5
 8011a78:	689b      	ldr	r3, [r3, #8]
 8011a7a:	4798      	blx	r3
 8011a7c:	69a4      	ldr	r4, [r4, #24]
 8011a7e:	e7f7      	b.n	8011a70 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011a80:	bd38      	pop	{r3, r4, r5, pc}

08011a82 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8011a82:	b510      	push	{r4, lr}
 8011a84:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011a86:	b12c      	cbz	r4, 8011a94 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8011a88:	6823      	ldr	r3, [r4, #0]
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	699b      	ldr	r3, [r3, #24]
 8011a8e:	4798      	blx	r3
 8011a90:	69a4      	ldr	r4, [r4, #24]
 8011a92:	e7f8      	b.n	8011a86 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8011a94:	bd10      	pop	{r4, pc}

08011a96 <_ZN8touchgfx9ContainerD1Ev>:
 8011a96:	4770      	bx	lr

08011a98 <_ZN8touchgfx9ContainerD0Ev>:
 8011a98:	b510      	push	{r4, lr}
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	212c      	movs	r1, #44	; 0x2c
 8011a9e:	f00e fc80 	bl	80203a2 <_ZdlPvj>
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	bd10      	pop	{r4, pc}

08011aa6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011aa6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011aa8:	b19b      	cbz	r3, 8011ad2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011aaa:	428b      	cmp	r3, r1
 8011aac:	d109      	bne.n	8011ac2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011aae:	699a      	ldr	r2, [r3, #24]
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	6159      	str	r1, [r3, #20]
 8011ab4:	6282      	str	r2, [r0, #40]	; 0x28
 8011ab6:	b902      	cbnz	r2, 8011aba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011ab8:	4770      	bx	lr
 8011aba:	6199      	str	r1, [r3, #24]
 8011abc:	4770      	bx	lr
 8011abe:	4613      	mov	r3, r2
 8011ac0:	b13a      	cbz	r2, 8011ad2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011ac2:	699a      	ldr	r2, [r3, #24]
 8011ac4:	428a      	cmp	r2, r1
 8011ac6:	d1fa      	bne.n	8011abe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011ac8:	698a      	ldr	r2, [r1, #24]
 8011aca:	619a      	str	r2, [r3, #24]
 8011acc:	2300      	movs	r3, #0
 8011ace:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011ad2:	4770      	bx	lr

08011ad4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011ad4:	b410      	push	{r4}
 8011ad6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011ad8:	4604      	mov	r4, r0
 8011ada:	b92b      	cbnz	r3, 8011ae8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011adc:	6803      	ldr	r3, [r0, #0]
 8011ade:	4611      	mov	r1, r2
 8011ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ae6:	4718      	bx	r3
 8011ae8:	b941      	cbnz	r1, 8011afc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011aea:	6193      	str	r3, [r2, #24]
 8011aec:	6282      	str	r2, [r0, #40]	; 0x28
 8011aee:	6154      	str	r4, [r2, #20]
 8011af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011af4:	4770      	bx	lr
 8011af6:	4603      	mov	r3, r0
 8011af8:	2800      	cmp	r0, #0
 8011afa:	d0f9      	beq.n	8011af0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011afc:	4299      	cmp	r1, r3
 8011afe:	6998      	ldr	r0, [r3, #24]
 8011b00:	d1f9      	bne.n	8011af6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011b02:	6190      	str	r0, [r2, #24]
 8011b04:	618a      	str	r2, [r1, #24]
 8011b06:	e7f2      	b.n	8011aee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011b08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b0c:	461f      	mov	r7, r3
 8011b0e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011b12:	460d      	mov	r5, r1
 8011b14:	4616      	mov	r6, r2
 8011b16:	b103      	cbz	r3, 8011b1a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011b18:	6038      	str	r0, [r7, #0]
 8011b1a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011b1c:	b314      	cbz	r4, 8011b64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011b1e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011b22:	b1eb      	cbz	r3, 8011b60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011b24:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011b28:	428d      	cmp	r5, r1
 8011b2a:	db19      	blt.n	8011b60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011b2c:	b289      	uxth	r1, r1
 8011b2e:	8923      	ldrh	r3, [r4, #8]
 8011b30:	440b      	add	r3, r1
 8011b32:	b21b      	sxth	r3, r3
 8011b34:	429d      	cmp	r5, r3
 8011b36:	da13      	bge.n	8011b60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011b38:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011b3c:	4296      	cmp	r6, r2
 8011b3e:	db0f      	blt.n	8011b60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011b40:	b292      	uxth	r2, r2
 8011b42:	8963      	ldrh	r3, [r4, #10]
 8011b44:	4413      	add	r3, r2
 8011b46:	b21b      	sxth	r3, r3
 8011b48:	429e      	cmp	r6, r3
 8011b4a:	da09      	bge.n	8011b60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	1ab2      	subs	r2, r6, r2
 8011b50:	1a69      	subs	r1, r5, r1
 8011b52:	4620      	mov	r0, r4
 8011b54:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8011b58:	b212      	sxth	r2, r2
 8011b5a:	463b      	mov	r3, r7
 8011b5c:	b209      	sxth	r1, r1
 8011b5e:	47c0      	blx	r8
 8011b60:	69a4      	ldr	r4, [r4, #24]
 8011b62:	e7db      	b.n	8011b1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b6c:	4c6d      	ldr	r4, [pc, #436]	; (8011d24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011b6e:	b0a1      	sub	sp, #132	; 0x84
 8011b70:	4606      	mov	r6, r0
 8011b72:	6824      	ldr	r4, [r4, #0]
 8011b74:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011b76:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8011b7a:	2400      	movs	r4, #0
 8011b7c:	9303      	str	r3, [sp, #12]
 8011b7e:	802c      	strh	r4, [r5, #0]
 8011b80:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011b82:	802c      	strh	r4, [r5, #0]
 8011b84:	601c      	str	r4, [r3, #0]
 8011b86:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011b8a:	f7ff ffbd 	bl	8011b08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011b8e:	f1b9 0f03 	cmp.w	r9, #3
 8011b92:	f340 80c1 	ble.w	8011d18 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011b96:	4631      	mov	r1, r6
 8011b98:	a80c      	add	r0, sp, #48	; 0x30
 8011b9a:	f004 fe9f 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b9e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011ba2:	9306      	str	r3, [sp, #24]
 8011ba4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011ba8:	9307      	str	r3, [sp, #28]
 8011baa:	9b03      	ldr	r3, [sp, #12]
 8011bac:	f8d3 a000 	ldr.w	sl, [r3]
 8011bb0:	f1ba 0f00 	cmp.w	sl, #0
 8011bb4:	f000 80b3 	beq.w	8011d1e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011bb8:	4651      	mov	r1, sl
 8011bba:	a810      	add	r0, sp, #64	; 0x40
 8011bbc:	f004 fe8e 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011bc0:	2002      	movs	r0, #2
 8011bc2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8011bc6:	9b01      	ldr	r3, [sp, #4]
 8011bc8:	9a06      	ldr	r2, [sp, #24]
 8011bca:	fb91 f1f0 	sdiv	r1, r1, r0
 8011bce:	189d      	adds	r5, r3, r2
 8011bd0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011bd4:	9a07      	ldr	r2, [sp, #28]
 8011bd6:	4419      	add	r1, r3
 8011bd8:	9b02      	ldr	r3, [sp, #8]
 8011bda:	4413      	add	r3, r2
 8011bdc:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011be0:	1a6d      	subs	r5, r5, r1
 8011be2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011be6:	fb92 f2f0 	sdiv	r2, r2, r0
 8011bea:	440a      	add	r2, r1
 8011bec:	1a9b      	subs	r3, r3, r2
 8011bee:	435b      	muls	r3, r3
 8011bf0:	fb05 3505 	mla	r5, r5, r5, r3
 8011bf4:	4f4c      	ldr	r7, [pc, #304]	; (8011d28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011bf6:	ac10      	add	r4, sp, #64	; 0x40
 8011bf8:	f1b9 0f0c 	cmp.w	r9, #12
 8011bfc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c00:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c08:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011c10:	f04f 0303 	mov.w	r3, #3
 8011c14:	bfd8      	it	le
 8011c16:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011c1a:	f04f 0400 	mov.w	r4, #0
 8011c1e:	f8cd 9000 	str.w	r9, [sp]
 8011c22:	bfcc      	ite	gt
 8011c24:	4698      	movgt	r8, r3
 8011c26:	fb92 f8f3 	sdivle	r8, r2, r3
 8011c2a:	1c63      	adds	r3, r4, #1
 8011c2c:	aa10      	add	r2, sp, #64	; 0x40
 8011c2e:	f004 0401 	and.w	r4, r4, #1
 8011c32:	f04f 0b00 	mov.w	fp, #0
 8011c36:	9308      	str	r3, [sp, #32]
 8011c38:	9b00      	ldr	r3, [sp, #0]
 8011c3a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011c3e:	fb93 f3f8 	sdiv	r3, r3, r8
 8011c42:	3404      	adds	r4, #4
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	9304      	str	r3, [sp, #16]
 8011c48:	9a04      	ldr	r2, [sp, #16]
 8011c4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011c4e:	fb13 f302 	smulbb	r3, r3, r2
 8011c52:	9a01      	ldr	r2, [sp, #4]
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	1899      	adds	r1, r3, r2
 8011c58:	9305      	str	r3, [sp, #20]
 8011c5a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011c5e:	b209      	sxth	r1, r1
 8011c60:	4299      	cmp	r1, r3
 8011c62:	db4d      	blt.n	8011d00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011c64:	8932      	ldrh	r2, [r6, #8]
 8011c66:	4413      	add	r3, r2
 8011c68:	b21b      	sxth	r3, r3
 8011c6a:	4299      	cmp	r1, r3
 8011c6c:	da48      	bge.n	8011d00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011c6e:	9b04      	ldr	r3, [sp, #16]
 8011c70:	6827      	ldr	r7, [r4, #0]
 8011c72:	fb17 f703 	smulbb	r7, r7, r3
 8011c76:	9b02      	ldr	r3, [sp, #8]
 8011c78:	b2bf      	uxth	r7, r7
 8011c7a:	18fa      	adds	r2, r7, r3
 8011c7c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011c80:	b212      	sxth	r2, r2
 8011c82:	429a      	cmp	r2, r3
 8011c84:	db3c      	blt.n	8011d00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011c86:	8970      	ldrh	r0, [r6, #10]
 8011c88:	4403      	add	r3, r0
 8011c8a:	b21b      	sxth	r3, r3
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	da37      	bge.n	8011d00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011c90:	2300      	movs	r3, #0
 8011c92:	4630      	mov	r0, r6
 8011c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c96:	ab0b      	add	r3, sp, #44	; 0x2c
 8011c98:	f7ff ff36 	bl	8011b08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011c9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c9e:	b37a      	cbz	r2, 8011d00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011ca0:	4552      	cmp	r2, sl
 8011ca2:	d02d      	beq.n	8011d00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011ca4:	4611      	mov	r1, r2
 8011ca6:	a80e      	add	r0, sp, #56	; 0x38
 8011ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8011caa:	f004 fe17 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011cae:	f04f 0e02 	mov.w	lr, #2
 8011cb2:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011cb6:	9a06      	ldr	r2, [sp, #24]
 8011cb8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011cbc:	9b01      	ldr	r3, [sp, #4]
 8011cbe:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011cc2:	4413      	add	r3, r2
 8011cc4:	9a07      	ldr	r2, [sp, #28]
 8011cc6:	fb91 f1fe 	sdiv	r1, r1, lr
 8011cca:	fb9c fcfe 	sdiv	ip, ip, lr
 8011cce:	4401      	add	r1, r0
 8011cd0:	1a58      	subs	r0, r3, r1
 8011cd2:	9b02      	ldr	r3, [sp, #8]
 8011cd4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011cd8:	4413      	add	r3, r2
 8011cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cdc:	448c      	add	ip, r1
 8011cde:	eba3 030c 	sub.w	r3, r3, ip
 8011ce2:	435b      	muls	r3, r3
 8011ce4:	fb00 3300 	mla	r3, r0, r0, r3
 8011ce8:	42ab      	cmp	r3, r5
 8011cea:	d208      	bcs.n	8011cfe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cee:	461d      	mov	r5, r3
 8011cf0:	9803      	ldr	r0, [sp, #12]
 8011cf2:	6001      	str	r1, [r0, #0]
 8011cf4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011cf6:	9805      	ldr	r0, [sp, #20]
 8011cf8:	8008      	strh	r0, [r1, #0]
 8011cfa:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011cfc:	800f      	strh	r7, [r1, #0]
 8011cfe:	4692      	mov	sl, r2
 8011d00:	f10b 0b01 	add.w	fp, fp, #1
 8011d04:	3408      	adds	r4, #8
 8011d06:	f1bb 0f04 	cmp.w	fp, #4
 8011d0a:	d19d      	bne.n	8011c48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011d0c:	9b00      	ldr	r3, [sp, #0]
 8011d0e:	9c08      	ldr	r4, [sp, #32]
 8011d10:	444b      	add	r3, r9
 8011d12:	4544      	cmp	r4, r8
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	d188      	bne.n	8011c2a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011d18:	b021      	add	sp, #132	; 0x84
 8011d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1e:	f04f 35ff 	mov.w	r5, #4294967295
 8011d22:	e767      	b.n	8011bf4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8011d24:	2400c7f4 	.word	0x2400c7f4
 8011d28:	08021ad8 	.word	0x08021ad8

08011d2c <_ZN8touchgfx4RectaNERKS0_>:
 8011d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d30:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011d34:	888c      	ldrh	r4, [r1, #4]
 8011d36:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011d3a:	443c      	add	r4, r7
 8011d3c:	b2a4      	uxth	r4, r4
 8011d3e:	fa0f f884 	sxth.w	r8, r4
 8011d42:	45c1      	cmp	r9, r8
 8011d44:	da2f      	bge.n	8011da6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011d46:	8882      	ldrh	r2, [r0, #4]
 8011d48:	444a      	add	r2, r9
 8011d4a:	b292      	uxth	r2, r2
 8011d4c:	fa0f fe82 	sxth.w	lr, r2
 8011d50:	4577      	cmp	r7, lr
 8011d52:	da28      	bge.n	8011da6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011d54:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011d58:	88cb      	ldrh	r3, [r1, #6]
 8011d5a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011d5e:	442b      	add	r3, r5
 8011d60:	b21b      	sxth	r3, r3
 8011d62:	429e      	cmp	r6, r3
 8011d64:	da1f      	bge.n	8011da6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011d66:	88c3      	ldrh	r3, [r0, #6]
 8011d68:	4433      	add	r3, r6
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	fa0f fc83 	sxth.w	ip, r3
 8011d70:	4565      	cmp	r5, ip
 8011d72:	da18      	bge.n	8011da6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011d74:	454f      	cmp	r7, r9
 8011d76:	bfb8      	it	lt
 8011d78:	464f      	movlt	r7, r9
 8011d7a:	42b5      	cmp	r5, r6
 8011d7c:	bfb8      	it	lt
 8011d7e:	4635      	movlt	r5, r6
 8011d80:	45f0      	cmp	r8, lr
 8011d82:	bfd8      	it	le
 8011d84:	4622      	movle	r2, r4
 8011d86:	1bd2      	subs	r2, r2, r7
 8011d88:	8082      	strh	r2, [r0, #4]
 8011d8a:	884a      	ldrh	r2, [r1, #2]
 8011d8c:	88c9      	ldrh	r1, [r1, #6]
 8011d8e:	8007      	strh	r7, [r0, #0]
 8011d90:	440a      	add	r2, r1
 8011d92:	8045      	strh	r5, [r0, #2]
 8011d94:	b292      	uxth	r2, r2
 8011d96:	b211      	sxth	r1, r2
 8011d98:	458c      	cmp	ip, r1
 8011d9a:	bfa8      	it	ge
 8011d9c:	4613      	movge	r3, r2
 8011d9e:	1b5b      	subs	r3, r3, r5
 8011da0:	80c3      	strh	r3, [r0, #6]
 8011da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011da6:	2300      	movs	r3, #0
 8011da8:	8003      	strh	r3, [r0, #0]
 8011daa:	8043      	strh	r3, [r0, #2]
 8011dac:	8083      	strh	r3, [r0, #4]
 8011dae:	80c3      	strh	r3, [r0, #6]
 8011db0:	e7f7      	b.n	8011da2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08011db2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011db2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	dd06      	ble.n	8011dc8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011dba:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011dbe:	2800      	cmp	r0, #0
 8011dc0:	bfcc      	ite	gt
 8011dc2:	2000      	movgt	r0, #0
 8011dc4:	2001      	movle	r0, #1
 8011dc6:	4770      	bx	lr
 8011dc8:	2001      	movs	r0, #1
 8011dca:	4770      	bx	lr

08011dcc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011dd6:	8003      	strh	r3, [r0, #0]
 8011dd8:	8043      	strh	r3, [r0, #2]
 8011dda:	8083      	strh	r3, [r0, #4]
 8011ddc:	80c3      	strh	r3, [r0, #6]
 8011dde:	2d00      	cmp	r5, #0
 8011de0:	d040      	beq.n	8011e64 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011de2:	1d28      	adds	r0, r5, #4
 8011de4:	f7ff ffe5 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011de8:	b988      	cbnz	r0, 8011e0e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011dea:	4620      	mov	r0, r4
 8011dec:	f7ff ffe1 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011df0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011df4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011df8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011dfc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011e00:	b138      	cbz	r0, 8011e12 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011e02:	8022      	strh	r2, [r4, #0]
 8011e04:	8063      	strh	r3, [r4, #2]
 8011e06:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011e0a:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011e0e:	69ad      	ldr	r5, [r5, #24]
 8011e10:	e7e5      	b.n	8011dde <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011e12:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011e16:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011e1a:	4290      	cmp	r0, r2
 8011e1c:	4607      	mov	r7, r0
 8011e1e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011e22:	460e      	mov	r6, r1
 8011e24:	bfa8      	it	ge
 8011e26:	4617      	movge	r7, r2
 8011e28:	4299      	cmp	r1, r3
 8011e2a:	4472      	add	r2, lr
 8011e2c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011e30:	bfa8      	it	ge
 8011e32:	461e      	movge	r6, r3
 8011e34:	4440      	add	r0, r8
 8011e36:	4471      	add	r1, lr
 8011e38:	4463      	add	r3, ip
 8011e3a:	b200      	sxth	r0, r0
 8011e3c:	8027      	strh	r7, [r4, #0]
 8011e3e:	b212      	sxth	r2, r2
 8011e40:	8066      	strh	r6, [r4, #2]
 8011e42:	b209      	sxth	r1, r1
 8011e44:	b21b      	sxth	r3, r3
 8011e46:	4290      	cmp	r0, r2
 8011e48:	bfac      	ite	ge
 8011e4a:	ebc7 0200 	rsbge	r2, r7, r0
 8011e4e:	ebc7 0202 	rsblt	r2, r7, r2
 8011e52:	4299      	cmp	r1, r3
 8011e54:	bfac      	ite	ge
 8011e56:	ebc6 0301 	rsbge	r3, r6, r1
 8011e5a:	ebc6 0303 	rsblt	r3, r6, r3
 8011e5e:	80a2      	strh	r2, [r4, #4]
 8011e60:	80e3      	strh	r3, [r4, #6]
 8011e62:	e7d4      	b.n	8011e0e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011e64:	4620      	mov	r0, r4
 8011e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e6a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011e6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011e6e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011e72:	b383      	cbz	r3, 8011ed6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011e74:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011e76:	b374      	cbz	r4, 8011ed6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011e78:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011e7c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011e80:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011e84:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011e88:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011e8c:	b303      	cbz	r3, 8011ed0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011e8e:	4668      	mov	r0, sp
 8011e90:	1d21      	adds	r1, r4, #4
 8011e92:	f8ad 5000 	strh.w	r5, [sp]
 8011e96:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011e9a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8011e9e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8011ea2:	f7ff ff43 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8011ea6:	4668      	mov	r0, sp
 8011ea8:	f7ff ff83 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011eac:	b980      	cbnz	r0, 8011ed0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011eae:	f8bd 3000 	ldrh.w	r3, [sp]
 8011eb2:	4669      	mov	r1, sp
 8011eb4:	88a2      	ldrh	r2, [r4, #4]
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	1a9b      	subs	r3, r3, r2
 8011eba:	88e2      	ldrh	r2, [r4, #6]
 8011ebc:	f8ad 3000 	strh.w	r3, [sp]
 8011ec0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011ec4:	1a9b      	subs	r3, r3, r2
 8011ec6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011eca:	6823      	ldr	r3, [r4, #0]
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	4798      	blx	r3
 8011ed0:	69a4      	ldr	r4, [r4, #24]
 8011ed2:	2c00      	cmp	r4, #0
 8011ed4:	d1d8      	bne.n	8011e88 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8011ed6:	b002      	add	sp, #8
 8011ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011edc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8011edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ede:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011ee2:	460d      	mov	r5, r1
 8011ee4:	4616      	mov	r6, r2
 8011ee6:	b323      	cbz	r3, 8011f32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011ee8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011eea:	b314      	cbz	r4, 8011f32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011eec:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011ef0:	b1eb      	cbz	r3, 8011f2e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011ef2:	6828      	ldr	r0, [r5, #0]
 8011ef4:	466b      	mov	r3, sp
 8011ef6:	6869      	ldr	r1, [r5, #4]
 8011ef8:	c303      	stmia	r3!, {r0, r1}
 8011efa:	4668      	mov	r0, sp
 8011efc:	1d21      	adds	r1, r4, #4
 8011efe:	f7ff ff15 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8011f02:	4668      	mov	r0, sp
 8011f04:	f7ff ff55 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f08:	b988      	cbnz	r0, 8011f2e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011f0a:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f0e:	4669      	mov	r1, sp
 8011f10:	88a2      	ldrh	r2, [r4, #4]
 8011f12:	4620      	mov	r0, r4
 8011f14:	1a9b      	subs	r3, r3, r2
 8011f16:	88e2      	ldrh	r2, [r4, #6]
 8011f18:	f8ad 3000 	strh.w	r3, [sp]
 8011f1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011f20:	1a9b      	subs	r3, r3, r2
 8011f22:	4632      	mov	r2, r6
 8011f24:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011f28:	6823      	ldr	r3, [r4, #0]
 8011f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f2c:	4798      	blx	r3
 8011f2e:	69a4      	ldr	r4, [r4, #24]
 8011f30:	e7db      	b.n	8011eea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8011f32:	b002      	add	sp, #8
 8011f34:	bd70      	pop	{r4, r5, r6, pc}

08011f36 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8011f36:	4770      	bx	lr

08011f38 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8011f38:	4770      	bx	lr

08011f3a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8011f3a:	6803      	ldr	r3, [r0, #0]
 8011f3c:	b513      	push	{r0, r1, r4, lr}
 8011f3e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8011f42:	2300      	movs	r3, #0
 8011f44:	e9cd 3300 	strd	r3, r3, [sp]
 8011f48:	466b      	mov	r3, sp
 8011f4a:	47a0      	blx	r4
 8011f4c:	b002      	add	sp, #8
 8011f4e:	bd10      	pop	{r4, pc}

08011f50 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8011f50:	2301      	movs	r3, #1
 8011f52:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011f56:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8011f5a:	4770      	bx	lr

08011f5c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011f62:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8011f66:	4770      	bx	lr

08011f68 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8011f68:	6843      	ldr	r3, [r0, #4]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	725a      	strb	r2, [r3, #9]
 8011f6e:	6840      	ldr	r0, [r0, #4]
 8011f70:	6803      	ldr	r3, [r0, #0]
 8011f72:	691b      	ldr	r3, [r3, #16]
 8011f74:	4718      	bx	r3

08011f76 <_ZN8touchgfx3HAL8flushDMAEv>:
 8011f76:	6840      	ldr	r0, [r0, #4]
 8011f78:	6803      	ldr	r3, [r0, #0]
 8011f7a:	689b      	ldr	r3, [r3, #8]
 8011f7c:	4718      	bx	r3

08011f7e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8011f7e:	b530      	push	{r4, r5, lr}
 8011f80:	b08b      	sub	sp, #44	; 0x2c
 8011f82:	6804      	ldr	r4, [r0, #0]
 8011f84:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8011f88:	9509      	str	r5, [sp, #36]	; 0x24
 8011f8a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8011f8e:	9508      	str	r5, [sp, #32]
 8011f90:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8011f94:	9507      	str	r5, [sp, #28]
 8011f96:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8011f9a:	9506      	str	r5, [sp, #24]
 8011f9c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8011fa0:	9505      	str	r5, [sp, #20]
 8011fa2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8011fa6:	9504      	str	r5, [sp, #16]
 8011fa8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8011fac:	9503      	str	r5, [sp, #12]
 8011fae:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8011fb2:	9502      	str	r5, [sp, #8]
 8011fb4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011fb8:	e9cd 3500 	strd	r3, r5, [sp]
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	47a0      	blx	r4
 8011fc4:	b00b      	add	sp, #44	; 0x2c
 8011fc6:	bd30      	pop	{r4, r5, pc}

08011fc8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8011fc8:	4b04      	ldr	r3, [pc, #16]	; (8011fdc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	b123      	cbz	r3, 8011fd8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8011fce:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8011fd2:	f080 0001 	eor.w	r0, r0, #1
 8011fd6:	4770      	bx	lr
 8011fd8:	2001      	movs	r0, #1
 8011fda:	4770      	bx	lr
 8011fdc:	2400c7f2 	.word	0x2400c7f2

08011fe0 <_ZN8touchgfx3HAL8endFrameEv>:
 8011fe0:	b510      	push	{r4, lr}
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	6840      	ldr	r0, [r0, #4]
 8011fe6:	6803      	ldr	r3, [r0, #0]
 8011fe8:	689b      	ldr	r3, [r3, #8]
 8011fea:	4798      	blx	r3
 8011fec:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8011ff0:	b113      	cbz	r3, 8011ff8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011ff8:	bd10      	pop	{r4, pc}

08011ffa <_ZN8touchgfx3HAL10initializeEv>:
 8011ffa:	b510      	push	{r4, lr}
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	f7ee fc3b 	bl	8000878 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012002:	6860      	ldr	r0, [r4, #4]
 8012004:	6803      	ldr	r3, [r0, #0]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	4798      	blx	r3
 801200a:	68e0      	ldr	r0, [r4, #12]
 801200c:	6803      	ldr	r3, [r0, #0]
 801200e:	689b      	ldr	r3, [r3, #8]
 8012010:	4798      	blx	r3
 8012012:	6823      	ldr	r3, [r4, #0]
 8012014:	4620      	mov	r0, r4
 8012016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801201c:	4718      	bx	r3

0801201e <_ZN8touchgfx3HAL9taskEntryEv>:
 801201e:	b508      	push	{r3, lr}
 8012020:	6803      	ldr	r3, [r0, #0]
 8012022:	4604      	mov	r4, r0
 8012024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012028:	4798      	blx	r3
 801202a:	6823      	ldr	r3, [r4, #0]
 801202c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801202e:	4620      	mov	r0, r4
 8012030:	4798      	blx	r3
 8012032:	f7ee fc7d 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8012036:	6823      	ldr	r3, [r4, #0]
 8012038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801203a:	e7f8      	b.n	801202e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801203c <_ZN8touchgfx3HAL4tickEv>:
 801203c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801203e:	6803      	ldr	r3, [r0, #0]
 8012040:	4604      	mov	r4, r0
 8012042:	4d5b      	ldr	r5, [pc, #364]	; (80121b0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8012044:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012048:	4798      	blx	r3
 801204a:	2800      	cmp	r0, #0
 801204c:	f000 8095 	beq.w	801217a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8012050:	2001      	movs	r0, #1
 8012052:	2600      	movs	r6, #0
 8012054:	f7ee fa36 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012058:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801205c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8012060:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012064:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8012068:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801206c:	b133      	cbz	r3, 801207c <_ZN8touchgfx3HAL4tickEv+0x40>
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	4620      	mov	r0, r4
 8012072:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012076:	4798      	blx	r3
 8012078:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801207c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012080:	2601      	movs	r6, #1
 8012082:	6862      	ldr	r2, [r4, #4]
 8012084:	f083 0301 	eor.w	r3, r3, #1
 8012088:	702e      	strb	r6, [r5, #0]
 801208a:	7253      	strb	r3, [r2, #9]
 801208c:	f003 fbf2 	bl	8015874 <_ZN8touchgfx11Application11getInstanceEv>
 8012090:	6803      	ldr	r3, [r0, #0]
 8012092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012094:	4798      	blx	r3
 8012096:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801209a:	b90b      	cbnz	r3, 80120a0 <_ZN8touchgfx3HAL4tickEv+0x64>
 801209c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80120a0:	f003 fbe8 	bl	8015874 <_ZN8touchgfx11Application11getInstanceEv>
 80120a4:	6803      	ldr	r3, [r0, #0]
 80120a6:	695b      	ldr	r3, [r3, #20]
 80120a8:	4798      	blx	r3
 80120aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80120ac:	6803      	ldr	r3, [r0, #0]
 80120ae:	691b      	ldr	r3, [r3, #16]
 80120b0:	4798      	blx	r3
 80120b2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80120b6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80120ba:	3b01      	subs	r3, #1
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80120c2:	b10a      	cbz	r2, 80120c8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d1eb      	bne.n	80120a0 <_ZN8touchgfx3HAL4tickEv+0x64>
 80120c8:	4a3a      	ldr	r2, [pc, #232]	; (80121b4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80120ca:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80120ce:	7813      	ldrb	r3, [r2, #0]
 80120d0:	3301      	adds	r3, #1
 80120d2:	b25b      	sxtb	r3, r3
 80120d4:	4299      	cmp	r1, r3
 80120d6:	7013      	strb	r3, [r2, #0]
 80120d8:	dc10      	bgt.n	80120fc <_ZN8touchgfx3HAL4tickEv+0xc0>
 80120da:	2300      	movs	r3, #0
 80120dc:	68e0      	ldr	r0, [r4, #12]
 80120de:	a902      	add	r1, sp, #8
 80120e0:	7013      	strb	r3, [r2, #0]
 80120e2:	aa03      	add	r2, sp, #12
 80120e4:	6803      	ldr	r3, [r0, #0]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	4798      	blx	r3
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d050      	beq.n	8012192 <_ZN8touchgfx3HAL4tickEv+0x156>
 80120f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80120f4:	4620      	mov	r0, r4
 80120f6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80120fa:	4798      	blx	r3
 80120fc:	2300      	movs	r3, #0
 80120fe:	6960      	ldr	r0, [r4, #20]
 8012100:	f88d 3007 	strb.w	r3, [sp, #7]
 8012104:	b158      	cbz	r0, 801211e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012106:	6803      	ldr	r3, [r0, #0]
 8012108:	f10d 0107 	add.w	r1, sp, #7
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	4798      	blx	r3
 8012110:	b128      	cbz	r0, 801211e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012112:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012114:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012118:	6803      	ldr	r3, [r0, #0]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	4798      	blx	r3
 801211e:	f104 001c 	add.w	r0, r4, #28
 8012122:	f00e f889 	bl	8020238 <_ZN8touchgfx8Gestures4tickEv>
 8012126:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801212a:	b30b      	cbz	r3, 8012170 <_ZN8touchgfx3HAL4tickEv+0x134>
 801212c:	6920      	ldr	r0, [r4, #16]
 801212e:	6803      	ldr	r3, [r0, #0]
 8012130:	691b      	ldr	r3, [r3, #16]
 8012132:	4798      	blx	r3
 8012134:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012136:	4606      	mov	r6, r0
 8012138:	b903      	cbnz	r3, 801213c <_ZN8touchgfx3HAL4tickEv+0x100>
 801213a:	6720      	str	r0, [r4, #112]	; 0x70
 801213c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801213e:	4a1e      	ldr	r2, [pc, #120]	; (80121b8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8012140:	1af3      	subs	r3, r6, r3
 8012142:	4293      	cmp	r3, r2
 8012144:	d914      	bls.n	8012170 <_ZN8touchgfx3HAL4tickEv+0x134>
 8012146:	6920      	ldr	r0, [r4, #16]
 8012148:	6803      	ldr	r3, [r0, #0]
 801214a:	699b      	ldr	r3, [r3, #24]
 801214c:	4798      	blx	r3
 801214e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012150:	2264      	movs	r2, #100	; 0x64
 8012152:	1af3      	subs	r3, r6, r3
 8012154:	fbb3 f3f2 	udiv	r3, r3, r2
 8012158:	fbb0 f0f3 	udiv	r0, r0, r3
 801215c:	2800      	cmp	r0, #0
 801215e:	dc1d      	bgt.n	801219c <_ZN8touchgfx3HAL4tickEv+0x160>
 8012160:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8012164:	6920      	ldr	r0, [r4, #16]
 8012166:	2100      	movs	r1, #0
 8012168:	6803      	ldr	r3, [r0, #0]
 801216a:	69db      	ldr	r3, [r3, #28]
 801216c:	4798      	blx	r3
 801216e:	6726      	str	r6, [r4, #112]	; 0x70
 8012170:	f003 fb80 	bl	8015874 <_ZN8touchgfx11Application11getInstanceEv>
 8012174:	6803      	ldr	r3, [r0, #0]
 8012176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012178:	4798      	blx	r3
 801217a:	6823      	ldr	r3, [r4, #0]
 801217c:	4620      	mov	r0, r4
 801217e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012182:	4798      	blx	r3
 8012184:	2001      	movs	r0, #1
 8012186:	f7ee f9db 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801218a:	2300      	movs	r3, #0
 801218c:	702b      	strb	r3, [r5, #0]
 801218e:	b004      	add	sp, #16
 8012190:	bd70      	pop	{r4, r5, r6, pc}
 8012192:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012196:	4620      	mov	r0, r4
 8012198:	4798      	blx	r3
 801219a:	e7af      	b.n	80120fc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801219c:	2863      	cmp	r0, #99	; 0x63
 801219e:	bfcb      	itete	gt
 80121a0:	2300      	movgt	r3, #0
 80121a2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80121a6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80121aa:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80121ae:	e7d9      	b.n	8012164 <_ZN8touchgfx3HAL4tickEv+0x128>
 80121b0:	2400c7f8 	.word	0x2400c7f8
 80121b4:	2400c7f9 	.word	0x2400c7f9
 80121b8:	05f5e100 	.word	0x05f5e100

080121bc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80121bc:	f7ee bb90 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080121c0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80121c0:	6581      	str	r1, [r0, #88]	; 0x58
 80121c2:	301c      	adds	r0, #28
 80121c4:	f00e b836 	b.w	8020234 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080121c8 <_ZN8touchgfx3HAL5touchEll>:
 80121c8:	b530      	push	{r4, r5, lr}
 80121ca:	b087      	sub	sp, #28
 80121cc:	4604      	mov	r4, r0
 80121ce:	a804      	add	r0, sp, #16
 80121d0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80121d4:	f003 f8ec 	bl	80153b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80121d8:	9b04      	ldr	r3, [sp, #16]
 80121da:	a906      	add	r1, sp, #24
 80121dc:	a803      	add	r0, sp, #12
 80121de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80121e2:	9b05      	ldr	r3, [sp, #20]
 80121e4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80121e8:	f003 f934 	bl	8015454 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80121ec:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80121f0:	f104 001c 	add.w	r0, r4, #28
 80121f4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80121f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80121fc:	b189      	cbz	r1, 8012222 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80121fe:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	4613      	mov	r3, r2
 8012206:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801220a:	462a      	mov	r2, r5
 801220c:	f00e f822 	bl	8020254 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012210:	b128      	cbz	r0, 801221e <_ZN8touchgfx3HAL5touchEll+0x56>
 8012212:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012216:	65e3      	str	r3, [r4, #92]	; 0x5c
 8012218:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801221c:	6623      	str	r3, [r4, #96]	; 0x60
 801221e:	b007      	add	sp, #28
 8012220:	bd30      	pop	{r4, r5, pc}
 8012222:	f00e f857 	bl	80202d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012226:	2301      	movs	r3, #1
 8012228:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801222c:	e7f1      	b.n	8012212 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801222e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801222e:	b510      	push	{r4, lr}
 8012230:	2b00      	cmp	r3, #0
 8012232:	d046      	beq.n	80122c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012234:	ea81 0002 	eor.w	r0, r1, r2
 8012238:	07c4      	lsls	r4, r0, #31
 801223a:	d508      	bpl.n	801224e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801223c:	440b      	add	r3, r1
 801223e:	3a01      	subs	r2, #1
 8012240:	428b      	cmp	r3, r1
 8012242:	d93e      	bls.n	80122c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012244:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012248:	f801 0b01 	strb.w	r0, [r1], #1
 801224c:	e7f8      	b.n	8012240 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801224e:	07d0      	lsls	r0, r2, #31
 8012250:	bf42      	ittt	mi
 8012252:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8012256:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801225a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801225e:	2b01      	cmp	r3, #1
 8012260:	d911      	bls.n	8012286 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012262:	ea81 0402 	eor.w	r4, r1, r2
 8012266:	4610      	mov	r0, r2
 8012268:	07a4      	lsls	r4, r4, #30
 801226a:	d022      	beq.n	80122b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801226c:	f023 0401 	bic.w	r4, r3, #1
 8012270:	440c      	add	r4, r1
 8012272:	428c      	cmp	r4, r1
 8012274:	4602      	mov	r2, r0
 8012276:	d904      	bls.n	8012282 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012278:	8812      	ldrh	r2, [r2, #0]
 801227a:	3002      	adds	r0, #2
 801227c:	f821 2b02 	strh.w	r2, [r1], #2
 8012280:	e7f7      	b.n	8012272 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8012282:	f003 0301 	and.w	r3, r3, #1
 8012286:	f023 0003 	bic.w	r0, r3, #3
 801228a:	4408      	add	r0, r1
 801228c:	4288      	cmp	r0, r1
 801228e:	4614      	mov	r4, r2
 8012290:	d904      	bls.n	801229c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012292:	6824      	ldr	r4, [r4, #0]
 8012294:	3204      	adds	r2, #4
 8012296:	f841 4b04 	str.w	r4, [r1], #4
 801229a:	e7f7      	b.n	801228c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801229c:	f003 0303 	and.w	r3, r3, #3
 80122a0:	3a01      	subs	r2, #1
 80122a2:	440b      	add	r3, r1
 80122a4:	428b      	cmp	r3, r1
 80122a6:	d90c      	bls.n	80122c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80122a8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80122ac:	f801 0b01 	strb.w	r0, [r1], #1
 80122b0:	e7f8      	b.n	80122a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80122b2:	0790      	lsls	r0, r2, #30
 80122b4:	d0e7      	beq.n	8012286 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80122b6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80122ba:	3b02      	subs	r3, #2
 80122bc:	f821 0b02 	strh.w	r0, [r1], #2
 80122c0:	e7e1      	b.n	8012286 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80122c2:	2001      	movs	r0, #1
 80122c4:	bd10      	pop	{r4, pc}

080122c6 <_ZN8touchgfx3HAL7noTouchEv>:
 80122c6:	b510      	push	{r4, lr}
 80122c8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80122cc:	4604      	mov	r4, r0
 80122ce:	b153      	cbz	r3, 80122e6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80122d0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80122d4:	2101      	movs	r1, #1
 80122d6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80122da:	301c      	adds	r0, #28
 80122dc:	f00d fffa 	bl	80202d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80122e0:	2300      	movs	r3, #0
 80122e2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80122e6:	bd10      	pop	{r4, pc}

080122e8 <_ZN8touchgfx8Drawable5setXYEss>:
 80122e8:	b570      	push	{r4, r5, r6, lr}
 80122ea:	6803      	ldr	r3, [r0, #0]
 80122ec:	4604      	mov	r4, r0
 80122ee:	4615      	mov	r5, r2
 80122f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122f2:	4798      	blx	r3
 80122f4:	6823      	ldr	r3, [r4, #0]
 80122f6:	4629      	mov	r1, r5
 80122f8:	4620      	mov	r0, r4
 80122fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012300:	4718      	bx	r3
	...

08012304 <_ZN8touchgfx3HAL3lcdEv>:
 8012304:	4b04      	ldr	r3, [pc, #16]	; (8012318 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801230c:	b10a      	cbz	r2, 8012312 <_ZN8touchgfx3HAL3lcdEv+0xe>
 801230e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012310:	b900      	cbnz	r0, 8012314 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8012312:	6898      	ldr	r0, [r3, #8]
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	2400c7f4 	.word	0x2400c7f4

0801231c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801231c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012320:	b085      	sub	sp, #20
 8012322:	4604      	mov	r4, r0
 8012324:	2000      	movs	r0, #0
 8012326:	4699      	mov	r9, r3
 8012328:	ad04      	add	r5, sp, #16
 801232a:	460f      	mov	r7, r1
 801232c:	4690      	mov	r8, r2
 801232e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012332:	69a0      	ldr	r0, [r4, #24]
 8012334:	6806      	ldr	r6, [r0, #0]
 8012336:	9501      	str	r5, [sp, #4]
 8012338:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801233c:	9500      	str	r5, [sp, #0]
 801233e:	6835      	ldr	r5, [r6, #0]
 8012340:	47a8      	blx	r5
 8012342:	4d10      	ldr	r5, [pc, #64]	; (8012384 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8012344:	4606      	mov	r6, r0
 8012346:	f8a5 9000 	strh.w	r9, [r5]
 801234a:	f7ff ffdb 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 801234e:	6803      	ldr	r3, [r0, #0]
 8012350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012352:	4798      	blx	r3
 8012354:	b128      	cbz	r0, 8012362 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012356:	2801      	cmp	r0, #1
 8012358:	d00b      	beq.n	8012372 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801235a:	4630      	mov	r0, r6
 801235c:	b005      	add	sp, #20
 801235e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012362:	882b      	ldrh	r3, [r5, #0]
 8012364:	fb08 7203 	mla	r2, r8, r3, r7
 8012368:	9b03      	ldr	r3, [sp, #12]
 801236a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801236e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012370:	e7f3      	b.n	801235a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012372:	882a      	ldrh	r2, [r5, #0]
 8012374:	9b03      	ldr	r3, [sp, #12]
 8012376:	fb08 7202 	mla	r2, r8, r2, r7
 801237a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801237e:	1a9a      	subs	r2, r3, r2
 8012380:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012382:	e7ea      	b.n	801235a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012384:	2400c7ee 	.word	0x2400c7ee

08012388 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8012388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238a:	b08b      	sub	sp, #44	; 0x2c
 801238c:	4617      	mov	r7, r2
 801238e:	4604      	mov	r4, r0
 8012390:	460e      	mov	r6, r1
 8012392:	461d      	mov	r5, r3
 8012394:	f7ff ffb6 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 8012398:	6803      	ldr	r3, [r0, #0]
 801239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801239c:	4798      	blx	r3
 801239e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80123a2:	9007      	str	r0, [sp, #28]
 80123a4:	4631      	mov	r1, r6
 80123a6:	6822      	ldr	r2, [r4, #0]
 80123a8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80123ac:	4b0c      	ldr	r3, [pc, #48]	; (80123e0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80123ae:	4620      	mov	r0, r4
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	9306      	str	r3, [sp, #24]
 80123b4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80123b8:	9305      	str	r3, [sp, #20]
 80123ba:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80123be:	9304      	str	r3, [sp, #16]
 80123c0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80123c4:	9303      	str	r3, [sp, #12]
 80123c6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80123ca:	9302      	str	r3, [sp, #8]
 80123cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80123d0:	e9cd 5300 	strd	r5, r3, [sp]
 80123d4:	463b      	mov	r3, r7
 80123d6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80123d8:	2200      	movs	r2, #0
 80123da:	47a8      	blx	r5
 80123dc:	b00b      	add	sp, #44	; 0x2c
 80123de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123e0:	2400c7ee 	.word	0x2400c7ee

080123e4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80123e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123e8:	4698      	mov	r8, r3
 80123ea:	6803      	ldr	r3, [r0, #0]
 80123ec:	b08b      	sub	sp, #44	; 0x2c
 80123ee:	4617      	mov	r7, r2
 80123f0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80123f2:	460e      	mov	r6, r1
 80123f4:	4b13      	ldr	r3, [pc, #76]	; (8012444 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80123f6:	4604      	mov	r4, r0
 80123f8:	f8b3 9000 	ldrh.w	r9, [r3]
 80123fc:	f7ff ff82 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 8012400:	6803      	ldr	r3, [r0, #0]
 8012402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012404:	4798      	blx	r3
 8012406:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801240a:	2200      	movs	r2, #0
 801240c:	4631      	mov	r1, r6
 801240e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012412:	2302      	movs	r3, #2
 8012414:	4620      	mov	r0, r4
 8012416:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801241a:	2301      	movs	r3, #1
 801241c:	9305      	str	r3, [sp, #20]
 801241e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012422:	9304      	str	r3, [sp, #16]
 8012424:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012428:	9303      	str	r3, [sp, #12]
 801242a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801242e:	9302      	str	r3, [sp, #8]
 8012430:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012434:	e9cd 8300 	strd	r8, r3, [sp]
 8012438:	463b      	mov	r3, r7
 801243a:	47a8      	blx	r5
 801243c:	b00b      	add	sp, #44	; 0x2c
 801243e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012442:	bf00      	nop
 8012444:	2400c7ee 	.word	0x2400c7ee

08012448 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801244c:	4698      	mov	r8, r3
 801244e:	6803      	ldr	r3, [r0, #0]
 8012450:	b087      	sub	sp, #28
 8012452:	460e      	mov	r6, r1
 8012454:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8012456:	4617      	mov	r7, r2
 8012458:	4b0f      	ldr	r3, [pc, #60]	; (8012498 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801245a:	4604      	mov	r4, r0
 801245c:	f8b3 9000 	ldrh.w	r9, [r3]
 8012460:	f7ff ff50 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 8012464:	6803      	ldr	r3, [r0, #0]
 8012466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012468:	4798      	blx	r3
 801246a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801246e:	463a      	mov	r2, r7
 8012470:	4631      	mov	r1, r6
 8012472:	f8cd 900c 	str.w	r9, [sp, #12]
 8012476:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801247a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801247e:	4620      	mov	r0, r4
 8012480:	9302      	str	r3, [sp, #8]
 8012482:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012486:	9301      	str	r3, [sp, #4]
 8012488:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	4643      	mov	r3, r8
 8012490:	47a8      	blx	r5
 8012492:	b007      	add	sp, #28
 8012494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012498:	2400c7ee 	.word	0x2400c7ee

0801249c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801249c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a0:	4604      	mov	r4, r0
 80124a2:	b08f      	sub	sp, #60	; 0x3c
 80124a4:	4610      	mov	r0, r2
 80124a6:	460d      	mov	r5, r1
 80124a8:	4691      	mov	r9, r2
 80124aa:	461e      	mov	r6, r3
 80124ac:	f005 fd5a 	bl	8017f64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	f000 809d 	beq.w	80125f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80124b6:	6823      	ldr	r3, [r4, #0]
 80124b8:	4620      	mov	r0, r4
 80124ba:	f8df b198 	ldr.w	fp, [pc, #408]	; 8012654 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80124be:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80124c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124c4:	4798      	blx	r3
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	4620      	mov	r0, r4
 80124ca:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8012658 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80124ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d0:	4798      	blx	r3
 80124d2:	f8bb 3000 	ldrh.w	r3, [fp]
 80124d6:	4f5c      	ldr	r7, [pc, #368]	; (8012648 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80124d8:	9301      	str	r3, [sp, #4]
 80124da:	f8ba 3000 	ldrh.w	r3, [sl]
 80124de:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80124e2:	4640      	mov	r0, r8
 80124e4:	9302      	str	r3, [sp, #8]
 80124e6:	883b      	ldrh	r3, [r7, #0]
 80124e8:	9303      	str	r3, [sp, #12]
 80124ea:	4b58      	ldr	r3, [pc, #352]	; (801264c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80124ec:	881a      	ldrh	r2, [r3, #0]
 80124ee:	9305      	str	r3, [sp, #20]
 80124f0:	9204      	str	r2, [sp, #16]
 80124f2:	f005 fe7b 	bl	80181ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80124f6:	8038      	strh	r0, [r7, #0]
 80124f8:	4640      	mov	r0, r8
 80124fa:	f005 feab 	bl	8018254 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80124fe:	9b05      	ldr	r3, [sp, #20]
 8012500:	b280      	uxth	r0, r0
 8012502:	8018      	strh	r0, [r3, #0]
 8012504:	4b52      	ldr	r3, [pc, #328]	; (8012650 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d174      	bne.n	80125f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801250c:	883b      	ldrh	r3, [r7, #0]
 801250e:	f8aa 0000 	strh.w	r0, [sl]
 8012512:	f8ab 3000 	strh.w	r3, [fp]
 8012516:	4648      	mov	r0, r9
 8012518:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801251c:	f005 fd22 	bl	8017f64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012520:	2200      	movs	r2, #0
 8012522:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012526:	4611      	mov	r1, r2
 8012528:	4628      	mov	r0, r5
 801252a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801252e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012532:	f7ff fed9 	bl	80122e8 <_ZN8touchgfx8Drawable5setXYEss>
 8012536:	2301      	movs	r3, #1
 8012538:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801253c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8012540:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012544:	2b00      	cmp	r3, #0
 8012546:	dd5c      	ble.n	8012602 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012548:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801254c:	2b00      	cmp	r3, #0
 801254e:	dd58      	ble.n	8012602 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012550:	462a      	mov	r2, r5
 8012552:	ab0a      	add	r3, sp, #40	; 0x28
 8012554:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012558:	6851      	ldr	r1, [r2, #4]
 801255a:	c303      	stmia	r3!, {r0, r1}
 801255c:	4631      	mov	r1, r6
 801255e:	a80a      	add	r0, sp, #40	; 0x28
 8012560:	f7ff fbe4 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8012564:	4b38      	ldr	r3, [pc, #224]	; (8012648 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012566:	2100      	movs	r1, #0
 8012568:	f9b3 2000 	ldrsh.w	r2, [r3]
 801256c:	4b37      	ldr	r3, [pc, #220]	; (801264c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801256e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012572:	aa0a      	add	r2, sp, #40	; 0x28
 8012574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012578:	910c      	str	r1, [sp, #48]	; 0x30
 801257a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801257e:	ab08      	add	r3, sp, #32
 8012580:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012584:	e883 0003 	stmia.w	r3, {r0, r1}
 8012588:	4618      	mov	r0, r3
 801258a:	a90c      	add	r1, sp, #48	; 0x30
 801258c:	f7ff fbce 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8012590:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012592:	2b00      	cmp	r3, #0
 8012594:	d13c      	bne.n	8012610 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8012596:	2000      	movs	r0, #0
 8012598:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801259c:	2600      	movs	r6, #0
 801259e:	696b      	ldr	r3, [r5, #20]
 80125a0:	a908      	add	r1, sp, #32
 80125a2:	682a      	ldr	r2, [r5, #0]
 80125a4:	4628      	mov	r0, r5
 80125a6:	9305      	str	r3, [sp, #20]
 80125a8:	616e      	str	r6, [r5, #20]
 80125aa:	6892      	ldr	r2, [r2, #8]
 80125ac:	4790      	blx	r2
 80125ae:	9b05      	ldr	r3, [sp, #20]
 80125b0:	4652      	mov	r2, sl
 80125b2:	4649      	mov	r1, r9
 80125b4:	616b      	str	r3, [r5, #20]
 80125b6:	4628      	mov	r0, r5
 80125b8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80125bc:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80125c0:	f7ff fe92 	bl	80122e8 <_ZN8touchgfx8Drawable5setXYEss>
 80125c4:	9a01      	ldr	r2, [sp, #4]
 80125c6:	4b23      	ldr	r3, [pc, #140]	; (8012654 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80125c8:	4620      	mov	r0, r4
 80125ca:	801a      	strh	r2, [r3, #0]
 80125cc:	9a02      	ldr	r2, [sp, #8]
 80125ce:	4b22      	ldr	r3, [pc, #136]	; (8012658 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80125d0:	801a      	strh	r2, [r3, #0]
 80125d2:	9a03      	ldr	r2, [sp, #12]
 80125d4:	4b1c      	ldr	r3, [pc, #112]	; (8012648 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80125d6:	801a      	strh	r2, [r3, #0]
 80125d8:	4b1c      	ldr	r3, [pc, #112]	; (801264c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80125da:	9a04      	ldr	r2, [sp, #16]
 80125dc:	801a      	strh	r2, [r3, #0]
 80125de:	6823      	ldr	r3, [r4, #0]
 80125e0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80125e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125e6:	4798      	blx	r3
 80125e8:	6823      	ldr	r3, [r4, #0]
 80125ea:	4620      	mov	r0, r4
 80125ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125ee:	4798      	blx	r3
 80125f0:	b00f      	add	sp, #60	; 0x3c
 80125f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f6:	883b      	ldrh	r3, [r7, #0]
 80125f8:	f8ab 0000 	strh.w	r0, [fp]
 80125fc:	f8aa 3000 	strh.w	r3, [sl]
 8012600:	e789      	b.n	8012516 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012602:	462a      	mov	r2, r5
 8012604:	ab0a      	add	r3, sp, #40	; 0x28
 8012606:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801260a:	6851      	ldr	r1, [r2, #4]
 801260c:	c303      	stmia	r3!, {r0, r1}
 801260e:	e7a9      	b.n	8012564 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012610:	a807      	add	r0, sp, #28
 8012612:	f005 ff23 	bl	801845c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012616:	4606      	mov	r6, r0
 8012618:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801261a:	6803      	ldr	r3, [r0, #0]
 801261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801261e:	4798      	blx	r3
 8012620:	4286      	cmp	r6, r0
 8012622:	d1b8      	bne.n	8012596 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012624:	f7ff fe6e 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 8012628:	6803      	ldr	r3, [r0, #0]
 801262a:	4606      	mov	r6, r0
 801262c:	a807      	add	r0, sp, #28
 801262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012630:	9305      	str	r3, [sp, #20]
 8012632:	f005 ff13 	bl	801845c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012636:	9b05      	ldr	r3, [sp, #20]
 8012638:	4601      	mov	r1, r0
 801263a:	4630      	mov	r0, r6
 801263c:	4798      	blx	r3
 801263e:	f080 0001 	eor.w	r0, r0, #1
 8012642:	b2c0      	uxtb	r0, r0
 8012644:	e7a8      	b.n	8012598 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8012646:	bf00      	nop
 8012648:	2400c7e8 	.word	0x2400c7e8
 801264c:	2400c7ea 	.word	0x2400c7ea
 8012650:	2400c7ec 	.word	0x2400c7ec
 8012654:	2400c7ee 	.word	0x2400c7ee
 8012658:	2400c7f0 	.word	0x2400c7f0

0801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801265c:	4b07      	ldr	r3, [pc, #28]	; (801267c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801265e:	b510      	push	{r4, lr}
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	4604      	mov	r4, r0
 8012664:	b13b      	cbz	r3, 8012676 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012666:	6803      	ldr	r3, [r0, #0]
 8012668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801266a:	4798      	blx	r3
 801266c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801266e:	4283      	cmp	r3, r0
 8012670:	d101      	bne.n	8012676 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012672:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012674:	bd10      	pop	{r4, pc}
 8012676:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012678:	e7fc      	b.n	8012674 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801267a:	bf00      	nop
 801267c:	2400c7f2 	.word	0x2400c7f2

08012680 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012684:	461d      	mov	r5, r3
 8012686:	b08a      	sub	sp, #40	; 0x28
 8012688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801268c:	4690      	mov	r8, r2
 801268e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8012692:	2400      	movs	r4, #0
 8012694:	4607      	mov	r7, r0
 8012696:	fb06 8505 	mla	r5, r6, r5, r8
 801269a:	9404      	str	r4, [sp, #16]
 801269c:	f88d 4020 	strb.w	r4, [sp, #32]
 80126a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80126a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80126a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80126ac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80126b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80126b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80126b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80126bc:	f7ff ffce 	bl	801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80126c0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80126ca:	a901      	add	r1, sp, #4
 80126cc:	9505      	str	r5, [sp, #20]
 80126ce:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80126d2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80126d6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80126da:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80126de:	6803      	ldr	r3, [r0, #0]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	4798      	blx	r3
 80126e4:	b00a      	add	sp, #40	; 0x28
 80126e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126ea <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80126ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126ee:	b08b      	sub	sp, #44	; 0x2c
 80126f0:	2400      	movs	r4, #0
 80126f2:	4691      	mov	r9, r2
 80126f4:	461d      	mov	r5, r3
 80126f6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80126fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126fe:	4688      	mov	r8, r1
 8012700:	4607      	mov	r7, r0
 8012702:	9404      	str	r4, [sp, #16]
 8012704:	fb06 9505 	mla	r5, r6, r5, r9
 8012708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801270c:	f7ff ffa6 	bl	801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012710:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012714:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801271e:	a901      	add	r1, sp, #4
 8012720:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012724:	9505      	str	r5, [sp, #20]
 8012726:	f8ad 301a 	strh.w	r3, [sp, #26]
 801272a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801272e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012732:	f8cd 8010 	str.w	r8, [sp, #16]
 8012736:	f8ad 4020 	strh.w	r4, [sp, #32]
 801273a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801273e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012742:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012746:	6803      	ldr	r3, [r0, #0]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	4798      	blx	r3
 801274c:	b00b      	add	sp, #44	; 0x2c
 801274e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012754 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012758:	b08a      	sub	sp, #40	; 0x28
 801275a:	4698      	mov	r8, r3
 801275c:	2300      	movs	r3, #0
 801275e:	4606      	mov	r6, r0
 8012760:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012764:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8012768:	2d0b      	cmp	r5, #11
 801276a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801276e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8012772:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8012776:	9304      	str	r3, [sp, #16]
 8012778:	d137      	bne.n	80127ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801277a:	2380      	movs	r3, #128	; 0x80
 801277c:	f88d 0020 	strb.w	r0, [sp, #32]
 8012780:	4630      	mov	r0, r6
 8012782:	9203      	str	r2, [sp, #12]
 8012784:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012788:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801278c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012790:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012794:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012798:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801279c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80127a0:	f7ff ff5c 	bl	801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80127a4:	2c0b      	cmp	r4, #11
 80127a6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80127aa:	f8ad 701e 	strh.w	r7, [sp, #30]
 80127ae:	bf94      	ite	ls
 80127b0:	4b19      	ldrls	r3, [pc, #100]	; (8012818 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80127b2:	2100      	movhi	r1, #0
 80127b4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80127b8:	bf98      	it	ls
 80127ba:	5d19      	ldrbls	r1, [r3, r4]
 80127bc:	fb02 8307 	mla	r3, r2, r7, r8
 80127c0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80127c4:	10c9      	asrs	r1, r1, #3
 80127c6:	fb01 0003 	mla	r0, r1, r3, r0
 80127ca:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80127ce:	a901      	add	r1, sp, #4
 80127d0:	9005      	str	r0, [sp, #20]
 80127d2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80127d6:	2300      	movs	r3, #0
 80127d8:	6870      	ldr	r0, [r6, #4]
 80127da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80127de:	6803      	ldr	r3, [r0, #0]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	4798      	blx	r3
 80127e4:	b00a      	add	sp, #40	; 0x28
 80127e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ea:	2d02      	cmp	r5, #2
 80127ec:	d109      	bne.n	8012802 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80127ee:	28ff      	cmp	r0, #255	; 0xff
 80127f0:	d105      	bne.n	80127fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80127f2:	f1bc 0f00 	cmp.w	ip, #0
 80127f6:	bf14      	ite	ne
 80127f8:	2340      	movne	r3, #64	; 0x40
 80127fa:	2320      	moveq	r3, #32
 80127fc:	e7be      	b.n	801277c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80127fe:	2340      	movs	r3, #64	; 0x40
 8012800:	e7bc      	b.n	801277c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012802:	28ff      	cmp	r0, #255	; 0xff
 8012804:	d105      	bne.n	8012812 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8012806:	f1bc 0f00 	cmp.w	ip, #0
 801280a:	bf14      	ite	ne
 801280c:	2304      	movne	r3, #4
 801280e:	2301      	moveq	r3, #1
 8012810:	e7b4      	b.n	801277c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012812:	2304      	movs	r3, #4
 8012814:	e7b2      	b.n	801277c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012816:	bf00      	nop
 8012818:	0802356c 	.word	0x0802356c

0801281c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012820:	b08b      	sub	sp, #44	; 0x2c
 8012822:	461d      	mov	r5, r3
 8012824:	2400      	movs	r4, #0
 8012826:	4688      	mov	r8, r1
 8012828:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801282c:	4693      	mov	fp, r2
 801282e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8012832:	4607      	mov	r7, r0
 8012834:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012838:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801283c:	9404      	str	r4, [sp, #16]
 801283e:	bf14      	ite	ne
 8012840:	2308      	movne	r3, #8
 8012842:	2302      	moveq	r3, #2
 8012844:	fb05 b50a 	mla	r5, r5, sl, fp
 8012848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801284c:	f7ff ff06 	bl	801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012850:	2e0b      	cmp	r6, #11
 8012852:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012856:	a901      	add	r1, sp, #4
 8012858:	bf98      	it	ls
 801285a:	4b13      	ldrls	r3, [pc, #76]	; (80128a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801285c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8012860:	bf98      	it	ls
 8012862:	5d9c      	ldrbls	r4, [r3, r6]
 8012864:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012868:	10e4      	asrs	r4, r4, #3
 801286a:	f8cd 8010 	str.w	r8, [sp, #16]
 801286e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012872:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012876:	fb04 0405 	mla	r4, r4, r5, r0
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012880:	2300      	movs	r3, #0
 8012882:	9405      	str	r4, [sp, #20]
 8012884:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012888:	f88d 9020 	strb.w	r9, [sp, #32]
 801288c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8012890:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012894:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8012898:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801289c:	6803      	ldr	r3, [r0, #0]
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	4798      	blx	r3
 80128a2:	b00b      	add	sp, #44	; 0x2c
 80128a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a8:	0802356c 	.word	0x0802356c

080128ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80128ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b0:	461e      	mov	r6, r3
 80128b2:	4b0a      	ldr	r3, [pc, #40]	; (80128dc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80128b4:	460f      	mov	r7, r1
 80128b6:	4690      	mov	r8, r2
 80128b8:	881d      	ldrh	r5, [r3, #0]
 80128ba:	f7ff fd23 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 80128be:	6803      	ldr	r3, [r0, #0]
 80128c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c2:	4798      	blx	r3
 80128c4:	280b      	cmp	r0, #11
 80128c6:	bf96      	itet	ls
 80128c8:	4b05      	ldrls	r3, [pc, #20]	; (80128e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80128ca:	2400      	movhi	r4, #0
 80128cc:	5c1c      	ldrbls	r4, [r3, r0]
 80128ce:	fb08 7005 	mla	r0, r8, r5, r7
 80128d2:	10e4      	asrs	r4, r4, #3
 80128d4:	fb04 6000 	mla	r0, r4, r0, r6
 80128d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128dc:	2400c7ee 	.word	0x2400c7ee
 80128e0:	0802356c 	.word	0x0802356c

080128e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80128e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128e6:	b08b      	sub	sp, #44	; 0x2c
 80128e8:	461f      	mov	r7, r3
 80128ea:	4604      	mov	r4, r0
 80128ec:	4616      	mov	r6, r2
 80128ee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80128f2:	2500      	movs	r5, #0
 80128f4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80128f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80128fc:	9504      	str	r5, [sp, #16]
 80128fe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012902:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012906:	f8ad 301a 	strh.w	r3, [sp, #26]
 801290a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801290e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012912:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012916:	f88d 3020 	strb.w	r3, [sp, #32]
 801291a:	f7ff fe9f 	bl	801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801291e:	463a      	mov	r2, r7
 8012920:	4631      	mov	r1, r6
 8012922:	4603      	mov	r3, r0
 8012924:	4620      	mov	r0, r4
 8012926:	f7ff ffc1 	bl	80128ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801292a:	4b0e      	ldr	r3, [pc, #56]	; (8012964 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801292c:	9005      	str	r0, [sp, #20]
 801292e:	881b      	ldrh	r3, [r3, #0]
 8012930:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012934:	f7ff fce6 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 8012938:	6803      	ldr	r3, [r0, #0]
 801293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293c:	4798      	blx	r3
 801293e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012940:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8012944:	a901      	add	r1, sp, #4
 8012946:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801294a:	9304      	str	r3, [sp, #16]
 801294c:	6860      	ldr	r0, [r4, #4]
 801294e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012952:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8012956:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801295a:	6803      	ldr	r3, [r0, #0]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	4798      	blx	r3
 8012960:	b00b      	add	sp, #44	; 0x2c
 8012962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012964:	2400c7ee 	.word	0x2400c7ee

08012968 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801296a:	b08d      	sub	sp, #52	; 0x34
 801296c:	2501      	movs	r5, #1
 801296e:	4604      	mov	r4, r0
 8012970:	466b      	mov	r3, sp
 8012972:	9503      	str	r5, [sp, #12]
 8012974:	e883 0006 	stmia.w	r3, {r1, r2}
 8012978:	2300      	movs	r3, #0
 801297a:	f8bd 6000 	ldrh.w	r6, [sp]
 801297e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8012982:	9306      	str	r3, [sp, #24]
 8012984:	6803      	ldr	r3, [r0, #0]
 8012986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012988:	4798      	blx	r3
 801298a:	463a      	mov	r2, r7
 801298c:	4631      	mov	r1, r6
 801298e:	4603      	mov	r3, r0
 8012990:	4620      	mov	r0, r4
 8012992:	f7ff ff8b 	bl	80128ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012996:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012998:	9004      	str	r0, [sp, #16]
 801299a:	9307      	str	r3, [sp, #28]
 801299c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80129a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80129a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80129a8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80129ac:	4b0e      	ldr	r3, [pc, #56]	; (80129e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80129ae:	881b      	ldrh	r3, [r3, #0]
 80129b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80129b4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80129b8:	f7ff fca4 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 80129bc:	6803      	ldr	r3, [r0, #0]
 80129be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129c0:	4798      	blx	r3
 80129c2:	23ff      	movs	r3, #255	; 0xff
 80129c4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80129c8:	a903      	add	r1, sp, #12
 80129ca:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80129ce:	6860      	ldr	r0, [r4, #4]
 80129d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80129d4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80129d8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80129dc:	6803      	ldr	r3, [r0, #0]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	4798      	blx	r3
 80129e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80129e4:	b00d      	add	sp, #52	; 0x34
 80129e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129e8:	2400c7ee 	.word	0x2400c7ee

080129ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80129ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f0:	b08c      	sub	sp, #48	; 0x30
 80129f2:	461e      	mov	r6, r3
 80129f4:	2300      	movs	r3, #0
 80129f6:	4604      	mov	r4, r0
 80129f8:	466d      	mov	r5, sp
 80129fa:	9306      	str	r3, [sp, #24]
 80129fc:	6803      	ldr	r3, [r0, #0]
 80129fe:	e885 0006 	stmia.w	r5, {r1, r2}
 8012a02:	2501      	movs	r5, #1
 8012a04:	f8bd 7000 	ldrh.w	r7, [sp]
 8012a08:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8012a0c:	9503      	str	r5, [sp, #12]
 8012a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a10:	4798      	blx	r3
 8012a12:	4642      	mov	r2, r8
 8012a14:	4639      	mov	r1, r7
 8012a16:	4603      	mov	r3, r0
 8012a18:	4620      	mov	r0, r4
 8012a1a:	f7ff ff47 	bl	80128ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012a1e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012a22:	9004      	str	r0, [sp, #16]
 8012a24:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012a28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012a2c:	9607      	str	r6, [sp, #28]
 8012a2e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012a32:	4b10      	ldr	r3, [pc, #64]	; (8012a74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8012a34:	881b      	ldrh	r3, [r3, #0]
 8012a36:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012a3c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012a40:	f7ff fc60 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 8012a44:	6803      	ldr	r3, [r0, #0]
 8012a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a48:	4798      	blx	r3
 8012a4a:	23ff      	movs	r3, #255	; 0xff
 8012a4c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012a50:	a903      	add	r1, sp, #12
 8012a52:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012a56:	6860      	ldr	r0, [r4, #4]
 8012a58:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012a5c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012a60:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012a64:	6803      	ldr	r3, [r0, #0]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	4798      	blx	r3
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	b00c      	add	sp, #48	; 0x30
 8012a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a72:	bf00      	nop
 8012a74:	2400c7ee 	.word	0x2400c7ee

08012a78 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8012a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a7a:	b085      	sub	sp, #20
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	ac02      	add	r4, sp, #8
 8012a80:	e884 0006 	stmia.w	r4, {r1, r2}
 8012a84:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8012a88:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8012a8c:	f7ff fde6 	bl	801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012a90:	4631      	mov	r1, r6
 8012a92:	4603      	mov	r3, r0
 8012a94:	463a      	mov	r2, r7
 8012a96:	4628      	mov	r0, r5
 8012a98:	f7ff ff08 	bl	80128ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012a9c:	4a05      	ldr	r2, [pc, #20]	; (8012ab4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8012a9e:	682b      	ldr	r3, [r5, #0]
 8012aa0:	8812      	ldrh	r2, [r2, #0]
 8012aa2:	9200      	str	r2, [sp, #0]
 8012aa4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012aae:	47b0      	blx	r6
 8012ab0:	b005      	add	sp, #20
 8012ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ab4:	2400c7ee 	.word	0x2400c7ee

08012ab8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8012ab8:	b570      	push	{r4, r5, r6, lr}
 8012aba:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8012abe:	4604      	mov	r4, r0
 8012ac0:	b19b      	cbz	r3, 8012aea <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8012ac2:	2002      	movs	r0, #2
 8012ac4:	f7ed fd7c 	bl	80005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	4620      	mov	r0, r4
 8012acc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012ad0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8012ad4:	6823      	ldr	r3, [r4, #0]
 8012ad6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8012ada:	f7ff fdbf 	bl	801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012ade:	4601      	mov	r1, r0
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	462b      	mov	r3, r5
 8012ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ae8:	4718      	bx	r3
 8012aea:	bd70      	pop	{r4, r5, r6, pc}

08012aec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8012aec:	b538      	push	{r3, r4, r5, lr}
 8012aee:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8012af2:	4604      	mov	r4, r0
 8012af4:	460d      	mov	r5, r1
 8012af6:	428b      	cmp	r3, r1
 8012af8:	d006      	beq.n	8012b08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8012afa:	6803      	ldr	r3, [r0, #0]
 8012afc:	b929      	cbnz	r1, 8012b0a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8012afe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012b02:	4798      	blx	r3
 8012b04:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8012b08:	bd38      	pop	{r3, r4, r5, pc}
 8012b0a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012b0e:	e7f8      	b.n	8012b02 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08012b10 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012b10:	4b0d      	ldr	r3, [pc, #52]	; (8012b48 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012b12:	b510      	push	{r4, lr}
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	4604      	mov	r4, r0
 8012b18:	b95b      	cbnz	r3, 8012b32 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012b1a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8012b1e:	2b02      	cmp	r3, #2
 8012b20:	d007      	beq.n	8012b32 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012b22:	6840      	ldr	r0, [r0, #4]
 8012b24:	f000 f916 	bl	8012d54 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012b28:	b118      	cbz	r0, 8012b32 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012b2a:	6862      	ldr	r2, [r4, #4]
 8012b2c:	7a53      	ldrb	r3, [r2, #9]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d0fc      	beq.n	8012b2c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012b32:	f7ed fecb 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012b36:	4620      	mov	r0, r4
 8012b38:	2100      	movs	r1, #0
 8012b3a:	f7ff ffd7 	bl	8012aec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012b3e:	4620      	mov	r0, r4
 8012b40:	f7ff fd8c 	bl	801265c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012b44:	bd10      	pop	{r4, pc}
 8012b46:	bf00      	nop
 8012b48:	2400c7f2 	.word	0x2400c7f2

08012b4c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8012b4c:	4770      	bx	lr

08012b4e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8012b4e:	2000      	movs	r0, #0
 8012b50:	4770      	bx	lr

08012b52 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8012b52:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8012b56:	1a13      	subs	r3, r2, r0
 8012b58:	4258      	negs	r0, r3
 8012b5a:	4158      	adcs	r0, r3
 8012b5c:	4770      	bx	lr

08012b5e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8012b5e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8012b62:	1a9b      	subs	r3, r3, r2
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	bfdc      	itt	le
 8012b68:	6882      	ldrle	r2, [r0, #8]
 8012b6a:	189b      	addle	r3, r3, r2
 8012b6c:	2b01      	cmp	r3, #1
 8012b6e:	bfcc      	ite	gt
 8012b70:	2000      	movgt	r0, #0
 8012b72:	2001      	movle	r0, #1
 8012b74:	4770      	bx	lr

08012b76 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8012b76:	6902      	ldr	r2, [r0, #16]
 8012b78:	6843      	ldr	r3, [r0, #4]
 8012b7a:	2024      	movs	r0, #36	; 0x24
 8012b7c:	fb00 3002 	mla	r0, r0, r2, r3
 8012b80:	4770      	bx	lr

08012b82 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8012b82:	6803      	ldr	r3, [r0, #0]
 8012b84:	691b      	ldr	r3, [r3, #16]
 8012b86:	4718      	bx	r3

08012b88 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8012b88:	2301      	movs	r3, #1
 8012b8a:	b570      	push	{r4, r5, r6, lr}
 8012b8c:	7203      	strb	r3, [r0, #8]
 8012b8e:	4604      	mov	r4, r0
 8012b90:	6840      	ldr	r0, [r0, #4]
 8012b92:	6803      	ldr	r3, [r0, #0]
 8012b94:	699b      	ldr	r3, [r3, #24]
 8012b96:	4798      	blx	r3
 8012b98:	6803      	ldr	r3, [r0, #0]
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	2b40      	cmp	r3, #64	; 0x40
 8012b9e:	d00c      	beq.n	8012bba <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012ba0:	d810      	bhi.n	8012bc4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8012ba2:	2b04      	cmp	r3, #4
 8012ba4:	d01d      	beq.n	8012be2 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8012ba6:	d804      	bhi.n	8012bb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d006      	beq.n	8012bba <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	d02c      	beq.n	8012c0a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8012bb0:	bd70      	pop	{r4, r5, r6, pc}
 8012bb2:	2b08      	cmp	r3, #8
 8012bb4:	d01d      	beq.n	8012bf2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8012bb6:	2b20      	cmp	r3, #32
 8012bb8:	d1fa      	bne.n	8012bb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bc0:	4798      	blx	r3
 8012bc2:	e013      	b.n	8012bec <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8012bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bc8:	d0f7      	beq.n	8012bba <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012bca:	d804      	bhi.n	8012bd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8012bcc:	2b80      	cmp	r3, #128	; 0x80
 8012bce:	d0f4      	beq.n	8012bba <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bd4:	e7f0      	b.n	8012bb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8012bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012bda:	d0ee      	beq.n	8012bba <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012be0:	e7e5      	b.n	8012bae <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	7f01      	ldrb	r1, [r0, #28]
 8012be6:	4620      	mov	r0, r4
 8012be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bea:	4798      	blx	r3
 8012bec:	6823      	ldr	r3, [r4, #0]
 8012bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bf0:	e006      	b.n	8012c00 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8012bf2:	6823      	ldr	r3, [r4, #0]
 8012bf4:	7f01      	ldrb	r1, [r0, #28]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bfa:	4798      	blx	r3
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c00:	4629      	mov	r1, r5
 8012c02:	4620      	mov	r0, r4
 8012c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c08:	4718      	bx	r3
 8012c0a:	6823      	ldr	r3, [r4, #0]
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c10:	4798      	blx	r3
 8012c12:	e7f3      	b.n	8012bfc <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08012c14 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8012c14:	4770      	bx	lr

08012c16 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012c16:	4770      	bx	lr

08012c18 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8012c18:	4770      	bx	lr

08012c1a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8012c1a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012c1e:	b510      	push	{r4, lr}
 8012c20:	1ad2      	subs	r2, r2, r3
 8012c22:	2a00      	cmp	r2, #0
 8012c24:	bfdc      	itt	le
 8012c26:	6884      	ldrle	r4, [r0, #8]
 8012c28:	1912      	addle	r2, r2, r4
 8012c2a:	2a01      	cmp	r2, #1
 8012c2c:	dd16      	ble.n	8012c5c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8012c2e:	6842      	ldr	r2, [r0, #4]
 8012c30:	2424      	movs	r4, #36	; 0x24
 8012c32:	fb04 2303 	mla	r3, r4, r3, r2
 8012c36:	f101 0220 	add.w	r2, r1, #32
 8012c3a:	f851 4b04 	ldr.w	r4, [r1], #4
 8012c3e:	4291      	cmp	r1, r2
 8012c40:	f843 4b04 	str.w	r4, [r3], #4
 8012c44:	d1f9      	bne.n	8012c3a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8012c46:	780a      	ldrb	r2, [r1, #0]
 8012c48:	701a      	strb	r2, [r3, #0]
 8012c4a:	68c3      	ldr	r3, [r0, #12]
 8012c4c:	6882      	ldr	r2, [r0, #8]
 8012c4e:	f3bf 8f5b 	dmb	ish
 8012c52:	3301      	adds	r3, #1
 8012c54:	429a      	cmp	r2, r3
 8012c56:	bfd8      	it	le
 8012c58:	1a9b      	suble	r3, r3, r2
 8012c5a:	60c3      	str	r3, [r0, #12]
 8012c5c:	bd10      	pop	{r4, pc}

08012c5e <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8012c5e:	6903      	ldr	r3, [r0, #16]
 8012c60:	6882      	ldr	r2, [r0, #8]
 8012c62:	f3bf 8f5b 	dmb	ish
 8012c66:	3301      	adds	r3, #1
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	bfd8      	it	le
 8012c6c:	1a9b      	suble	r3, r3, r2
 8012c6e:	6103      	str	r3, [r0, #16]
 8012c70:	4770      	bx	lr
	...

08012c74 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8012c74:	b570      	push	{r4, r5, r6, lr}
 8012c76:	4604      	mov	r4, r0
 8012c78:	460e      	mov	r6, r1
 8012c7a:	6860      	ldr	r0, [r4, #4]
 8012c7c:	6803      	ldr	r3, [r0, #0]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	4798      	blx	r3
 8012c82:	2800      	cmp	r0, #0
 8012c84:	d1f9      	bne.n	8012c7a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8012c86:	4d0d      	ldr	r5, [pc, #52]	; (8012cbc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8012c88:	6828      	ldr	r0, [r5, #0]
 8012c8a:	6803      	ldr	r3, [r0, #0]
 8012c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c8e:	4798      	blx	r3
 8012c90:	f7ed fe2e 	bl	80008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8012c94:	6828      	ldr	r0, [r5, #0]
 8012c96:	2101      	movs	r1, #1
 8012c98:	f7ff ff28 	bl	8012aec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012c9c:	6860      	ldr	r0, [r4, #4]
 8012c9e:	4631      	mov	r1, r6
 8012ca0:	6803      	ldr	r3, [r0, #0]
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	4798      	blx	r3
 8012ca6:	6823      	ldr	r3, [r4, #0]
 8012ca8:	4620      	mov	r0, r4
 8012caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cac:	4798      	blx	r3
 8012cae:	6828      	ldr	r0, [r5, #0]
 8012cb0:	6803      	ldr	r3, [r0, #0]
 8012cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cb8:	4718      	bx	r3
 8012cba:	bf00      	nop
 8012cbc:	2400c7f4 	.word	0x2400c7f4

08012cc0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012cc0:	b508      	push	{r3, lr}
 8012cc2:	f7ed fe03 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012cca:	f7ed be09 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012cce <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012cce:	b510      	push	{r4, lr}
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	2114      	movs	r1, #20
 8012cd4:	f00d fb65 	bl	80203a2 <_ZdlPvj>
 8012cd8:	4620      	mov	r0, r4
 8012cda:	bd10      	pop	{r4, pc}

08012cdc <_ZN8touchgfx13DMA_Interface5startEv>:
 8012cdc:	b510      	push	{r4, lr}
 8012cde:	4604      	mov	r4, r0
 8012ce0:	6840      	ldr	r0, [r0, #4]
 8012ce2:	6803      	ldr	r3, [r0, #0]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4798      	blx	r3
 8012ce8:	b948      	cbnz	r0, 8012cfe <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012cea:	7a63      	ldrb	r3, [r4, #9]
 8012cec:	b13b      	cbz	r3, 8012cfe <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012cee:	7a23      	ldrb	r3, [r4, #8]
 8012cf0:	b92b      	cbnz	r3, 8012cfe <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012cf2:	6823      	ldr	r3, [r4, #0]
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cfc:	4718      	bx	r3
 8012cfe:	bd10      	pop	{r4, pc}

08012d00 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012d00:	b570      	push	{r4, r5, r6, lr}
 8012d02:	4604      	mov	r4, r0
 8012d04:	6840      	ldr	r0, [r0, #4]
 8012d06:	6803      	ldr	r3, [r0, #0]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	4798      	blx	r3
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	b930      	cbnz	r0, 8012d1e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012d10:	7a23      	ldrb	r3, [r4, #8]
 8012d12:	b123      	cbz	r3, 8012d1e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012d14:	6860      	ldr	r0, [r4, #4]
 8012d16:	6803      	ldr	r3, [r0, #0]
 8012d18:	695b      	ldr	r3, [r3, #20]
 8012d1a:	4798      	blx	r3
 8012d1c:	7225      	strb	r5, [r4, #8]
 8012d1e:	6860      	ldr	r0, [r4, #4]
 8012d20:	6803      	ldr	r3, [r0, #0]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	4798      	blx	r3
 8012d26:	b928      	cbnz	r0, 8012d34 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012d28:	6823      	ldr	r3, [r4, #0]
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d32:	4718      	bx	r3
 8012d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d38:	f7ed bde4 	b.w	8000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08012d3c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012d3c:	b510      	push	{r4, lr}
 8012d3e:	6082      	str	r2, [r0, #8]
 8012d40:	2200      	movs	r2, #0
 8012d42:	4c03      	ldr	r4, [pc, #12]	; (8012d50 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8012d44:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012d48:	e9c0 4100 	strd	r4, r1, [r0]
 8012d4c:	bd10      	pop	{r4, pc}
 8012d4e:	bf00      	nop
 8012d50:	080236a8 	.word	0x080236a8

08012d54 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8012d54:	6840      	ldr	r0, [r0, #4]
 8012d56:	6803      	ldr	r3, [r0, #0]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4718      	bx	r3

08012d5c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	4770      	bx	lr

08012d60 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8012d60:	4b07      	ldr	r3, [pc, #28]	; (8012d80 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8012d62:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8012d64:	881b      	ldrh	r3, [r3, #0]
 8012d66:	4293      	cmp	r3, r2
 8012d68:	bf81      	itttt	hi
 8012d6a:	4b06      	ldrhi	r3, [pc, #24]	; (8012d84 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8012d6c:	681b      	ldrhi	r3, [r3, #0]
 8012d6e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8012d72:	7858      	ldrbhi	r0, [r3, #1]
 8012d74:	bf8c      	ite	hi
 8012d76:	f000 0003 	andhi.w	r0, r0, #3
 8012d7a:	2000      	movls	r0, #0
 8012d7c:	4770      	bx	lr
 8012d7e:	bf00      	nop
 8012d80:	2400c848 	.word	0x2400c848
 8012d84:	2400c844 	.word	0x2400c844

08012d88 <_ZN8touchgfx8TextAreaD1Ev>:
 8012d88:	4770      	bx	lr
	...

08012d8c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8012d8c:	4b11      	ldr	r3, [pc, #68]	; (8012dd4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8012d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d92:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012d94:	4604      	mov	r4, r0
 8012d96:	881b      	ldrh	r3, [r3, #0]
 8012d98:	428b      	cmp	r3, r1
 8012d9a:	d918      	bls.n	8012dce <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8012d9c:	6803      	ldr	r3, [r0, #0]
 8012d9e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8012da0:	4b0d      	ldr	r3, [pc, #52]	; (8012dd8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8012da2:	6818      	ldr	r0, [r3, #0]
 8012da4:	f7f1 fac6 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 8012da8:	6823      	ldr	r3, [r4, #0]
 8012daa:	4606      	mov	r6, r0
 8012dac:	4620      	mov	r0, r4
 8012dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012db0:	4798      	blx	r3
 8012db2:	6823      	ldr	r3, [r4, #0]
 8012db4:	4607      	mov	r7, r0
 8012db6:	4620      	mov	r0, r4
 8012db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012dbc:	4798      	blx	r3
 8012dbe:	463a      	mov	r2, r7
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	46ac      	mov	ip, r5
 8012dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dcc:	4760      	bx	ip
 8012dce:	2000      	movs	r0, #0
 8012dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd4:	2400c848 	.word	0x2400c848
 8012dd8:	2400c850 	.word	0x2400c850

08012ddc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8012ddc:	4b18      	ldr	r3, [pc, #96]	; (8012e40 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8012dde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012de2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012de4:	4604      	mov	r4, r0
 8012de6:	881b      	ldrh	r3, [r3, #0]
 8012de8:	428b      	cmp	r3, r1
 8012dea:	d926      	bls.n	8012e3a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8012dec:	4b15      	ldr	r3, [pc, #84]	; (8012e44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8012df4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8012df8:	4b13      	ldr	r3, [pc, #76]	; (8012e48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8012dfa:	7855      	ldrb	r5, [r2, #1]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8012e02:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8012e06:	6833      	ldr	r3, [r6, #0]
 8012e08:	69df      	ldr	r7, [r3, #28]
 8012e0a:	4b10      	ldr	r3, [pc, #64]	; (8012e4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8012e0c:	6818      	ldr	r0, [r3, #0]
 8012e0e:	f7f1 fa91 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 8012e12:	6823      	ldr	r3, [r4, #0]
 8012e14:	4680      	mov	r8, r0
 8012e16:	4620      	mov	r0, r4
 8012e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e1a:	4798      	blx	r3
 8012e1c:	6823      	ldr	r3, [r4, #0]
 8012e1e:	4681      	mov	r9, r0
 8012e20:	4620      	mov	r0, r4
 8012e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e26:	4798      	blx	r3
 8012e28:	464b      	mov	r3, r9
 8012e2a:	9000      	str	r0, [sp, #0]
 8012e2c:	4642      	mov	r2, r8
 8012e2e:	4629      	mov	r1, r5
 8012e30:	4630      	mov	r0, r6
 8012e32:	47b8      	blx	r7
 8012e34:	b003      	add	sp, #12
 8012e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e3a:	2000      	movs	r0, #0
 8012e3c:	e7fa      	b.n	8012e34 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8012e3e:	bf00      	nop
 8012e40:	2400c848 	.word	0x2400c848
 8012e44:	2400c844 	.word	0x2400c844
 8012e48:	2400c84c 	.word	0x2400c84c
 8012e4c:	2400c850 	.word	0x2400c850

08012e50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8012e50:	b40e      	push	{r1, r2, r3}
 8012e52:	4b30      	ldr	r3, [pc, #192]	; (8012f14 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8012e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e58:	881a      	ldrh	r2, [r3, #0]
 8012e5a:	b09d      	sub	sp, #116	; 0x74
 8012e5c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8012e5e:	4604      	mov	r4, r0
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d954      	bls.n	8012f0e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8012e64:	aa26      	add	r2, sp, #152	; 0x98
 8012e66:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8012f18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8012e6a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012f1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8012e6e:	9202      	str	r2, [sp, #8]
 8012e70:	f8d9 2000 	ldr.w	r2, [r9]
 8012e74:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012e78:	f8d8 3000 	ldr.w	r3, [r8]
 8012e7c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8012e80:	682b      	ldr	r3, [r5, #0]
 8012e82:	4628      	mov	r0, r5
 8012e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e86:	4798      	blx	r3
 8012e88:	4606      	mov	r6, r0
 8012e8a:	b207      	sxth	r7, r0
 8012e8c:	a803      	add	r0, sp, #12
 8012e8e:	f004 f8d3 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 8012e92:	682b      	ldr	r3, [r5, #0]
 8012e94:	4628      	mov	r0, r5
 8012e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e98:	4798      	blx	r3
 8012e9a:	682b      	ldr	r3, [r5, #0]
 8012e9c:	4682      	mov	sl, r0
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ea2:	4798      	blx	r3
 8012ea4:	4653      	mov	r3, sl
 8012ea6:	9000      	str	r0, [sp, #0]
 8012ea8:	a803      	add	r0, sp, #12
 8012eaa:	9a02      	ldr	r2, [sp, #8]
 8012eac:	9925      	ldr	r1, [sp, #148]	; 0x94
 8012eae:	f004 f91e 	bl	80170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012eb2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012eb4:	f8d9 3000 	ldr.w	r3, [r9]
 8012eb8:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8012ebc:	8925      	ldrh	r5, [r4, #8]
 8012ebe:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8012ec2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8012ec6:	eba5 050c 	sub.w	r5, r5, ip
 8012eca:	784a      	ldrb	r2, [r1, #1]
 8012ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8012ed0:	b22d      	sxth	r5, r5
 8012ed2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8012ed6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8012eda:	9500      	str	r5, [sp, #0]
 8012edc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012ee0:	a803      	add	r0, sp, #12
 8012ee2:	f001 fffa 	bl	8014eda <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8012ee6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8012eea:	b203      	sxth	r3, r0
 8012eec:	18b9      	adds	r1, r7, r2
 8012eee:	2900      	cmp	r1, #0
 8012ef0:	dd0b      	ble.n	8012f0a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8012ef2:	3b01      	subs	r3, #1
 8012ef4:	fb13 f302 	smulbb	r3, r3, r2
 8012ef8:	fb16 3300 	smlabb	r3, r6, r0, r3
 8012efc:	b21f      	sxth	r7, r3
 8012efe:	4638      	mov	r0, r7
 8012f00:	b01d      	add	sp, #116	; 0x74
 8012f02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f06:	b003      	add	sp, #12
 8012f08:	4770      	bx	lr
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	dcf7      	bgt.n	8012efe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8012f0e:	2700      	movs	r7, #0
 8012f10:	e7f5      	b.n	8012efe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8012f12:	bf00      	nop
 8012f14:	2400c848 	.word	0x2400c848
 8012f18:	2400c844 	.word	0x2400c844
 8012f1c:	2400c84c 	.word	0x2400c84c

08012f20 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8012f20:	4bbc      	ldr	r3, [pc, #752]	; (8013214 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8012f22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f26:	460c      	mov	r4, r1
 8012f28:	881b      	ldrh	r3, [r3, #0]
 8012f2a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8012f2c:	b0a9      	sub	sp, #164	; 0xa4
 8012f2e:	4681      	mov	r9, r0
 8012f30:	428b      	cmp	r3, r1
 8012f32:	d809      	bhi.n	8012f48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8012f34:	2300      	movs	r3, #0
 8012f36:	f04f 32ff 	mov.w	r2, #4294967295
 8012f3a:	6083      	str	r3, [r0, #8]
 8012f3c:	e9c0 3200 	strd	r3, r2, [r0]
 8012f40:	4648      	mov	r0, r9
 8012f42:	b029      	add	sp, #164	; 0xa4
 8012f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f48:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 801321c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8012f4c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8012f50:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8013220 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8012f54:	f8db 3000 	ldr.w	r3, [fp]
 8012f58:	f8d8 0000 	ldr.w	r0, [r8]
 8012f5c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8012f60:	4bad      	ldr	r3, [pc, #692]	; (8013218 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8012f68:	f7f1 f9e4 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 8012f6c:	4607      	mov	r7, r0
 8012f6e:	682b      	ldr	r3, [r5, #0]
 8012f70:	4628      	mov	r0, r5
 8012f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f74:	4798      	blx	r3
 8012f76:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8012f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f7c:	4430      	add	r0, r6
 8012f7e:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8012f82:	b283      	uxth	r3, r0
 8012f84:	4650      	mov	r0, sl
 8012f86:	9302      	str	r3, [sp, #8]
 8012f88:	2e00      	cmp	r6, #0
 8012f8a:	f040 8090 	bne.w	80130ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8012f8e:	f004 f853 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 8012f92:	682b      	ldr	r3, [r5, #0]
 8012f94:	4628      	mov	r0, r5
 8012f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f98:	4798      	blx	r3
 8012f9a:	682b      	ldr	r3, [r5, #0]
 8012f9c:	9005      	str	r0, [sp, #20]
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012fa2:	4798      	blx	r3
 8012fa4:	6823      	ldr	r3, [r4, #0]
 8012fa6:	4680      	mov	r8, r0
 8012fa8:	4620      	mov	r0, r4
 8012faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fac:	4798      	blx	r3
 8012fae:	6822      	ldr	r2, [r4, #0]
 8012fb0:	9004      	str	r0, [sp, #16]
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012fb8:	4790      	blx	r2
 8012fba:	9905      	ldr	r1, [sp, #20]
 8012fbc:	9b04      	ldr	r3, [sp, #16]
 8012fbe:	460a      	mov	r2, r1
 8012fc0:	4639      	mov	r1, r7
 8012fc2:	4637      	mov	r7, r6
 8012fc4:	9001      	str	r0, [sp, #4]
 8012fc6:	9300      	str	r3, [sp, #0]
 8012fc8:	4650      	mov	r0, sl
 8012fca:	4643      	mov	r3, r8
 8012fcc:	f004 f8a4 	bl	8017118 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8012fd0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012fd2:	4629      	mov	r1, r5
 8012fd4:	f8db 3000 	ldr.w	r3, [fp]
 8012fd8:	4650      	mov	r0, sl
 8012fda:	3601      	adds	r6, #1
 8012fdc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012fe0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012fe4:	b2b6      	uxth	r6, r6
 8012fe6:	785b      	ldrb	r3, [r3, #1]
 8012fe8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012fec:	f001 fcc6 	bl	801497c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012ff0:	4287      	cmp	r7, r0
 8012ff2:	bfb8      	it	lt
 8012ff4:	b207      	sxthlt	r7, r0
 8012ff6:	4650      	mov	r0, sl
 8012ff8:	f004 f845 	bl	8017086 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d0e7      	beq.n	8012fd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8013000:	9b02      	ldr	r3, [sp, #8]
 8013002:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8013006:	fb13 f606 	smulbb	r6, r3, r6
 801300a:	eba6 0608 	sub.w	r6, r6, r8
 801300e:	b2b6      	uxth	r6, r6
 8013010:	fa0f f886 	sxth.w	r8, r6
 8013014:	f1b8 0f00 	cmp.w	r8, #0
 8013018:	dd06      	ble.n	8013028 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801301a:	682b      	ldr	r3, [r5, #0]
 801301c:	4628      	mov	r0, r5
 801301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013020:	4798      	blx	r3
 8013022:	4430      	add	r0, r6
 8013024:	fa0f f880 	sxth.w	r8, r0
 8013028:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801302c:	4620      	mov	r0, r4
 801302e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013032:	6823      	ldr	r3, [r4, #0]
 8013034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013036:	bf0c      	ite	eq
 8013038:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 801303c:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8013040:	4798      	blx	r3
 8013042:	2801      	cmp	r0, #1
 8013044:	b2ba      	uxth	r2, r7
 8013046:	f000 80d2 	beq.w	80131ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 801304a:	2802      	cmp	r0, #2
 801304c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8013050:	f000 80d3 	beq.w	80131fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8013054:	b21e      	sxth	r6, r3
 8013056:	7a29      	ldrb	r1, [r5, #8]
 8013058:	7a6d      	ldrb	r5, [r5, #9]
 801305a:	1a76      	subs	r6, r6, r1
 801305c:	4429      	add	r1, r5
 801305e:	b2b3      	uxth	r3, r6
 8013060:	440a      	add	r2, r1
 8013062:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8013066:	b21f      	sxth	r7, r3
 8013068:	b292      	uxth	r2, r2
 801306a:	2902      	cmp	r1, #2
 801306c:	b216      	sxth	r6, r2
 801306e:	f000 80c7 	beq.w	8013200 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8013072:	2903      	cmp	r1, #3
 8013074:	f000 80d6 	beq.w	8013224 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8013078:	2901      	cmp	r1, #1
 801307a:	f040 80dc 	bne.w	8013236 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 801307e:	8923      	ldrh	r3, [r4, #8]
 8013080:	4632      	mov	r2, r6
 8013082:	463d      	mov	r5, r7
 8013084:	4646      	mov	r6, r8
 8013086:	eba3 0308 	sub.w	r3, r3, r8
 801308a:	4690      	mov	r8, r2
 801308c:	b21f      	sxth	r7, r3
 801308e:	9b03      	ldr	r3, [sp, #12]
 8013090:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013092:	6818      	ldr	r0, [r3, #0]
 8013094:	f7f1 f94e 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 8013098:	f8a9 7000 	strh.w	r7, [r9]
 801309c:	f8a9 5002 	strh.w	r5, [r9, #2]
 80130a0:	f8a9 6004 	strh.w	r6, [r9, #4]
 80130a4:	f8a9 8006 	strh.w	r8, [r9, #6]
 80130a8:	f8c9 0008 	str.w	r0, [r9, #8]
 80130ac:	e748      	b.n	8012f40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80130ae:	f003 ffc3 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 80130b2:	682b      	ldr	r3, [r5, #0]
 80130b4:	4628      	mov	r0, r5
 80130b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130b8:	4798      	blx	r3
 80130ba:	682b      	ldr	r3, [r5, #0]
 80130bc:	4606      	mov	r6, r0
 80130be:	4628      	mov	r0, r5
 80130c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130c2:	4798      	blx	r3
 80130c4:	6823      	ldr	r3, [r4, #0]
 80130c6:	4680      	mov	r8, r0
 80130c8:	4620      	mov	r0, r4
 80130ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80130cc:	4798      	blx	r3
 80130ce:	6822      	ldr	r2, [r4, #0]
 80130d0:	9004      	str	r0, [sp, #16]
 80130d2:	4620      	mov	r0, r4
 80130d4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80130d8:	4790      	blx	r2
 80130da:	9b04      	ldr	r3, [sp, #16]
 80130dc:	4632      	mov	r2, r6
 80130de:	9001      	str	r0, [sp, #4]
 80130e0:	9300      	str	r3, [sp, #0]
 80130e2:	4639      	mov	r1, r7
 80130e4:	4643      	mov	r3, r8
 80130e6:	4650      	mov	r0, sl
 80130e8:	f004 f816 	bl	8017118 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80130ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80130f0:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80130f4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80130f8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80130fc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80130fe:	bf0a      	itet	eq
 8013100:	4642      	moveq	r2, r8
 8013102:	461a      	movne	r2, r3
 8013104:	4698      	moveq	r8, r3
 8013106:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801310a:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801310e:	1ad2      	subs	r2, r2, r3
 8013110:	f8db 3000 	ldr.w	r3, [fp]
 8013114:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013118:	7859      	ldrb	r1, [r3, #1]
 801311a:	2300      	movs	r3, #0
 801311c:	f8cd a020 	str.w	sl, [sp, #32]
 8013120:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013124:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013128:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801312c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8013130:	950a      	str	r5, [sp, #40]	; 0x28
 8013132:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013136:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801313a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801313e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013142:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013146:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801314a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801314e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013152:	b350      	cbz	r0, 80131aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8013154:	682b      	ldr	r3, [r5, #0]
 8013156:	4628      	mov	r0, r5
 8013158:	695b      	ldr	r3, [r3, #20]
 801315a:	4798      	blx	r3
 801315c:	4607      	mov	r7, r0
 801315e:	b320      	cbz	r0, 80131aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8013160:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013162:	4639      	mov	r1, r7
 8013164:	6803      	ldr	r3, [r0, #0]
 8013166:	68db      	ldr	r3, [r3, #12]
 8013168:	4798      	blx	r3
 801316a:	4606      	mov	r6, r0
 801316c:	b1e8      	cbz	r0, 80131aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801316e:	7b43      	ldrb	r3, [r0, #13]
 8013170:	7a82      	ldrb	r2, [r0, #10]
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013178:	4313      	orrs	r3, r2
 801317a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801317e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8013182:	2b04      	cmp	r3, #4
 8013184:	d111      	bne.n	80131aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8013186:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013188:	4632      	mov	r2, r6
 801318a:	4639      	mov	r1, r7
 801318c:	6803      	ldr	r3, [r0, #0]
 801318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013190:	4798      	blx	r3
 8013192:	7b73      	ldrb	r3, [r6, #13]
 8013194:	005b      	lsls	r3, r3, #1
 8013196:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801319a:	7ab3      	ldrb	r3, [r6, #10]
 801319c:	4313      	orrs	r3, r2
 801319e:	4418      	add	r0, r3
 80131a0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80131a4:	4418      	add	r0, r3
 80131a6:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80131aa:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80131ae:	2600      	movs	r6, #0
 80131b0:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 80131b4:	4637      	mov	r7, r6
 80131b6:	45c3      	cmp	fp, r8
 80131b8:	a807      	add	r0, sp, #28
 80131ba:	f106 0601 	add.w	r6, r6, #1
 80131be:	bfd4      	ite	le
 80131c0:	2100      	movle	r1, #0
 80131c2:	2101      	movgt	r1, #1
 80131c4:	f001 fdba 	bl	8014d3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80131c8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80131cc:	b2b6      	uxth	r6, r6
 80131ce:	429f      	cmp	r7, r3
 80131d0:	bfb8      	it	lt
 80131d2:	b21f      	sxthlt	r7, r3
 80131d4:	9b02      	ldr	r3, [sp, #8]
 80131d6:	eba8 0803 	sub.w	r8, r8, r3
 80131da:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80131de:	fa0f f888 	sxth.w	r8, r8
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	f43f af0c 	beq.w	8013000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80131e8:	45c2      	cmp	sl, r8
 80131ea:	dbe4      	blt.n	80131b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 80131ec:	e708      	b.n	8013000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80131ee:	1bf6      	subs	r6, r6, r7
 80131f0:	2702      	movs	r7, #2
 80131f2:	fb96 f6f7 	sdiv	r6, r6, r7
 80131f6:	b236      	sxth	r6, r6
 80131f8:	e72d      	b.n	8013056 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 80131fa:	4413      	add	r3, r2
 80131fc:	1af6      	subs	r6, r6, r3
 80131fe:	e7fa      	b.n	80131f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 8013200:	8925      	ldrh	r5, [r4, #8]
 8013202:	1aad      	subs	r5, r5, r2
 8013204:	1aed      	subs	r5, r5, r3
 8013206:	b22f      	sxth	r7, r5
 8013208:	8965      	ldrh	r5, [r4, #10]
 801320a:	eba5 0508 	sub.w	r5, r5, r8
 801320e:	b22d      	sxth	r5, r5
 8013210:	e73d      	b.n	801308e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8013212:	bf00      	nop
 8013214:	2400c848 	.word	0x2400c848
 8013218:	2400c84c 	.word	0x2400c84c
 801321c:	2400c844 	.word	0x2400c844
 8013220:	2400c850 	.word	0x2400c850
 8013224:	8965      	ldrh	r5, [r4, #10]
 8013226:	2700      	movs	r7, #0
 8013228:	1aad      	subs	r5, r5, r2
 801322a:	1aed      	subs	r5, r5, r3
 801322c:	4633      	mov	r3, r6
 801322e:	4646      	mov	r6, r8
 8013230:	b22d      	sxth	r5, r5
 8013232:	4698      	mov	r8, r3
 8013234:	e72b      	b.n	801308e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8013236:	2500      	movs	r5, #0
 8013238:	e729      	b.n	801308e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801323a:	bf00      	nop

0801323c <_ZN8touchgfx8TextAreaD0Ev>:
 801323c:	b510      	push	{r4, lr}
 801323e:	4604      	mov	r4, r0
 8013240:	2148      	movs	r1, #72	; 0x48
 8013242:	f00d f8ae 	bl	80203a2 <_ZdlPvj>
 8013246:	4620      	mov	r0, r4
 8013248:	bd10      	pop	{r4, pc}
	...

0801324c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801324c:	b513      	push	{r0, r1, r4, lr}
 801324e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8013252:	4604      	mov	r4, r0
 8013254:	b1fb      	cbz	r3, 8013296 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013256:	4b16      	ldr	r3, [pc, #88]	; (80132b0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013258:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	428b      	cmp	r3, r1
 801325e:	d91a      	bls.n	8013296 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013260:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013264:	2b00      	cmp	r3, #0
 8013266:	dd16      	ble.n	8013296 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013268:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801326c:	2b00      	cmp	r3, #0
 801326e:	dd12      	ble.n	8013296 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013270:	4b10      	ldr	r3, [pc, #64]	; (80132b4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8013272:	6818      	ldr	r0, [r3, #0]
 8013274:	f7f1 f85e 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 8013278:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801327c:	6822      	ldr	r2, [r4, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	db06      	blt.n	8013290 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013282:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013286:	2b00      	cmp	r3, #0
 8013288:	db02      	blt.n	8013290 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801328a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801328c:	4298      	cmp	r0, r3
 801328e:	d004      	beq.n	801329a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013290:	6953      	ldr	r3, [r2, #20]
 8013292:	4620      	mov	r0, r4
 8013294:	4798      	blx	r3
 8013296:	b002      	add	sp, #8
 8013298:	bd10      	pop	{r4, pc}
 801329a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801329e:	466b      	mov	r3, sp
 80132a0:	6912      	ldr	r2, [r2, #16]
 80132a2:	c903      	ldmia	r1, {r0, r1}
 80132a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80132a8:	4619      	mov	r1, r3
 80132aa:	4620      	mov	r0, r4
 80132ac:	4790      	blx	r2
 80132ae:	e7f2      	b.n	8013296 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80132b0:	2400c848 	.word	0x2400c848
 80132b4:	2400c850 	.word	0x2400c850

080132b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80132b8:	4b45      	ldr	r3, [pc, #276]	; (80133d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80132ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132be:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80132c0:	b08e      	sub	sp, #56	; 0x38
 80132c2:	881b      	ldrh	r3, [r3, #0]
 80132c4:	4604      	mov	r4, r0
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d97e      	bls.n	80133c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80132ca:	6808      	ldr	r0, [r1, #0]
 80132cc:	ab05      	add	r3, sp, #20
 80132ce:	6849      	ldr	r1, [r1, #4]
 80132d0:	4d40      	ldr	r5, [pc, #256]	; (80133d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80132d2:	c303      	stmia	r3!, {r0, r1}
 80132d4:	4611      	mov	r1, r2
 80132d6:	6828      	ldr	r0, [r5, #0]
 80132d8:	f7f1 f82c 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 80132dc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	db11      	blt.n	8013308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80132e4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	db0d      	blt.n	8013308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80132ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80132ee:	4298      	cmp	r0, r3
 80132f0:	d10a      	bne.n	8013308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80132f2:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80132f6:	ab09      	add	r3, sp, #36	; 0x24
 80132f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8013300:	4619      	mov	r1, r3
 8013302:	a805      	add	r0, sp, #20
 8013304:	f7fe fd12 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8013308:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801330c:	2b00      	cmp	r3, #0
 801330e:	dd5b      	ble.n	80133c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013310:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013314:	2b00      	cmp	r3, #0
 8013316:	dd57      	ble.n	80133c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013318:	4f2f      	ldr	r7, [pc, #188]	; (80133d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801331a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013322:	4b2e      	ldr	r3, [pc, #184]	; (80133dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801332a:	2e00      	cmp	r6, #0
 801332c:	d04c      	beq.n	80133c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801332e:	6823      	ldr	r3, [r4, #0]
 8013330:	4620      	mov	r0, r4
 8013332:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8013336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013338:	4798      	blx	r3
 801333a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8013342:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013346:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801334a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801334e:	785b      	ldrb	r3, [r3, #1]
 8013350:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8013354:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013358:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801335a:	9609      	str	r6, [sp, #36]	; 0x24
 801335c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013360:	4b1f      	ldr	r3, [pc, #124]	; (80133e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013362:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801336c:	910b      	str	r1, [sp, #44]	; 0x2c
 801336e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8013372:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8013376:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801337a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801337e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013382:	b10a      	cbz	r2, 8013388 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013384:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8013386:	b906      	cbnz	r6, 801338a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013388:	689e      	ldr	r6, [r3, #8]
 801338a:	af07      	add	r7, sp, #28
 801338c:	4621      	mov	r1, r4
 801338e:	4638      	mov	r0, r7
 8013390:	f003 faa4 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013394:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013396:	6828      	ldr	r0, [r5, #0]
 8013398:	f7f0 ffcc 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 801339c:	6823      	ldr	r3, [r4, #0]
 801339e:	4605      	mov	r5, r0
 80133a0:	4620      	mov	r0, r4
 80133a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133a4:	4798      	blx	r3
 80133a6:	6823      	ldr	r3, [r4, #0]
 80133a8:	4680      	mov	r8, r0
 80133aa:	4620      	mov	r0, r4
 80133ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80133b0:	4798      	blx	r3
 80133b2:	ab09      	add	r3, sp, #36	; 0x24
 80133b4:	9501      	str	r5, [sp, #4]
 80133b6:	9300      	str	r3, [sp, #0]
 80133b8:	ab05      	add	r3, sp, #20
 80133ba:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80133be:	4630      	mov	r0, r6
 80133c0:	e897 0006 	ldmia.w	r7, {r1, r2}
 80133c4:	f7f0 ff62 	bl	800428c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80133c8:	b00e      	add	sp, #56	; 0x38
 80133ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ce:	bf00      	nop
 80133d0:	2400c848 	.word	0x2400c848
 80133d4:	2400c850 	.word	0x2400c850
 80133d8:	2400c844 	.word	0x2400c844
 80133dc:	2400c84c 	.word	0x2400c84c
 80133e0:	2400c7f4 	.word	0x2400c7f4

080133e4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	6803      	ldr	r3, [r0, #0]
 80133e8:	4604      	mov	r4, r0
 80133ea:	4615      	mov	r5, r2
 80133ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133ee:	4798      	blx	r3
 80133f0:	6823      	ldr	r3, [r4, #0]
 80133f2:	4629      	mov	r1, r5
 80133f4:	4620      	mov	r0, r4
 80133f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133fc:	4718      	bx	r3
	...

08013400 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013400:	b538      	push	{r3, r4, r5, lr}
 8013402:	4b0e      	ldr	r3, [pc, #56]	; (801343c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013404:	4604      	mov	r4, r0
 8013406:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013408:	881b      	ldrh	r3, [r3, #0]
 801340a:	429a      	cmp	r2, r3
 801340c:	d214      	bcs.n	8013438 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801340e:	6803      	ldr	r3, [r0, #0]
 8013410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013412:	4798      	blx	r3
 8013414:	6823      	ldr	r3, [r4, #0]
 8013416:	4605      	mov	r5, r0
 8013418:	4620      	mov	r0, r4
 801341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801341c:	4798      	blx	r3
 801341e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013422:	b22d      	sxth	r5, r5
 8013424:	4601      	mov	r1, r0
 8013426:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801342a:	bf06      	itte	eq
 801342c:	4602      	moveq	r2, r0
 801342e:	4629      	moveq	r1, r5
 8013430:	462a      	movne	r2, r5
 8013432:	4620      	mov	r0, r4
 8013434:	f7ff ffd6 	bl	80133e4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013438:	bd38      	pop	{r3, r4, r5, pc}
 801343a:	bf00      	nop
 801343c:	2400c848 	.word	0x2400c848

08013440 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013440:	b530      	push	{r4, r5, lr}
 8013442:	888b      	ldrh	r3, [r1, #4]
 8013444:	b085      	sub	sp, #20
 8013446:	4604      	mov	r4, r0
 8013448:	8583      	strh	r3, [r0, #44]	; 0x2c
 801344a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801344e:	b923      	cbnz	r3, 801345a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013450:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013454:	b90b      	cbnz	r3, 801345a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013456:	f7ff ffd3 	bl	8013400 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801345a:	6823      	ldr	r3, [r4, #0]
 801345c:	466d      	mov	r5, sp
 801345e:	4621      	mov	r1, r4
 8013460:	343c      	adds	r4, #60	; 0x3c
 8013462:	4628      	mov	r0, r5
 8013464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013468:	4798      	blx	r3
 801346a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801346e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013472:	b005      	add	sp, #20
 8013474:	bd30      	pop	{r4, r5, pc}

08013476 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013476:	2300      	movs	r3, #0
 8013478:	8083      	strh	r3, [r0, #4]
 801347a:	80c3      	strh	r3, [r0, #6]
 801347c:	8003      	strh	r3, [r0, #0]
 801347e:	8043      	strh	r3, [r0, #2]
 8013480:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013484:	2bff      	cmp	r3, #255	; 0xff
 8013486:	bf01      	itttt	eq
 8013488:	890b      	ldrheq	r3, [r1, #8]
 801348a:	8083      	strheq	r3, [r0, #4]
 801348c:	894b      	ldrheq	r3, [r1, #10]
 801348e:	80c3      	strheq	r3, [r0, #6]
 8013490:	4770      	bx	lr
	...

08013494 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013496:	4604      	mov	r4, r0
 8013498:	466b      	mov	r3, sp
 801349a:	6808      	ldr	r0, [r1, #0]
 801349c:	6849      	ldr	r1, [r1, #4]
 801349e:	c303      	stmia	r3!, {r0, r1}
 80134a0:	6823      	ldr	r3, [r4, #0]
 80134a2:	4669      	mov	r1, sp
 80134a4:	4620      	mov	r0, r4
 80134a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a8:	4798      	blx	r3
 80134aa:	4b08      	ldr	r3, [pc, #32]	; (80134cc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80134b2:	b10a      	cbz	r2, 80134b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80134b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80134b6:	b900      	cbnz	r0, 80134ba <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80134b8:	6898      	ldr	r0, [r3, #8]
 80134ba:	6803      	ldr	r3, [r0, #0]
 80134bc:	4669      	mov	r1, sp
 80134be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80134c0:	6a1d      	ldr	r5, [r3, #32]
 80134c2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80134c6:	47a8      	blx	r5
 80134c8:	b003      	add	sp, #12
 80134ca:	bd30      	pop	{r4, r5, pc}
 80134cc:	2400c7f4 	.word	0x2400c7f4

080134d0 <_ZN8touchgfx3BoxD1Ev>:
 80134d0:	4770      	bx	lr

080134d2 <_ZN8touchgfx3BoxD0Ev>:
 80134d2:	b510      	push	{r4, lr}
 80134d4:	4604      	mov	r4, r0
 80134d6:	212c      	movs	r1, #44	; 0x2c
 80134d8:	f00c ff63 	bl	80203a2 <_ZdlPvj>
 80134dc:	4620      	mov	r0, r4
 80134de:	bd10      	pop	{r4, pc}

080134e0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80134e0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80134e4:	b12a      	cbz	r2, 80134f2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80134e6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80134ea:	b112      	cbz	r2, 80134f2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80134ec:	6803      	ldr	r3, [r0, #0]
 80134ee:	695b      	ldr	r3, [r3, #20]
 80134f0:	4718      	bx	r3
 80134f2:	4770      	bx	lr

080134f4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
 80134f4:	4770      	bx	lr
	...

080134f8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80134f8:	4b30      	ldr	r3, [pc, #192]	; (80135bc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80134fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134fe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013500:	b08d      	sub	sp, #52	; 0x34
 8013502:	881b      	ldrh	r3, [r3, #0]
 8013504:	4604      	mov	r4, r0
 8013506:	460f      	mov	r7, r1
 8013508:	4293      	cmp	r3, r2
 801350a:	d954      	bls.n	80135b6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801350c:	4b2c      	ldr	r3, [pc, #176]	; (80135c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801350e:	6819      	ldr	r1, [r3, #0]
 8013510:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013514:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8013518:	4a2a      	ldr	r2, [pc, #168]	; (80135c4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801351a:	6812      	ldr	r2, [r2, #0]
 801351c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013520:	2900      	cmp	r1, #0
 8013522:	d048      	beq.n	80135b6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013524:	785a      	ldrb	r2, [r3, #1]
 8013526:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801352a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801352e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013532:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013536:	4b24      	ldr	r3, [pc, #144]	; (80135c8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013538:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8013542:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8013546:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801354a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801354c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8013550:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8013554:	9107      	str	r1, [sp, #28]
 8013556:	f88d 8020 	strb.w	r8, [sp, #32]
 801355a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801355e:	9609      	str	r6, [sp, #36]	; 0x24
 8013560:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8013564:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013568:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 801356c:	b10b      	cbz	r3, 8013572 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801356e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8013570:	b905      	cbnz	r5, 8013574 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8013572:	6895      	ldr	r5, [r2, #8]
 8013574:	ae05      	add	r6, sp, #20
 8013576:	4621      	mov	r1, r4
 8013578:	4630      	mov	r0, r6
 801357a:	f003 f9af 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801357e:	4b13      	ldr	r3, [pc, #76]	; (80135cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013580:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013582:	6818      	ldr	r0, [r3, #0]
 8013584:	f7f0 fed6 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 8013588:	6823      	ldr	r3, [r4, #0]
 801358a:	4680      	mov	r8, r0
 801358c:	4620      	mov	r0, r4
 801358e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013590:	4798      	blx	r3
 8013592:	6823      	ldr	r3, [r4, #0]
 8013594:	4681      	mov	r9, r0
 8013596:	4620      	mov	r0, r4
 8013598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801359c:	4798      	blx	r3
 801359e:	ab07      	add	r3, sp, #28
 80135a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80135a4:	9300      	str	r3, [sp, #0]
 80135a6:	463b      	mov	r3, r7
 80135a8:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80135ac:	4628      	mov	r0, r5
 80135ae:	e896 0006 	ldmia.w	r6, {r1, r2}
 80135b2:	f7f0 fe6b 	bl	800428c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80135b6:	b00d      	add	sp, #52	; 0x34
 80135b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135bc:	2400c848 	.word	0x2400c848
 80135c0:	2400c844 	.word	0x2400c844
 80135c4:	2400c84c 	.word	0x2400c84c
 80135c8:	2400c7f4 	.word	0x2400c7f4
 80135cc:	2400c850 	.word	0x2400c850

080135d0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 80135d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d4:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80135d8:	b0a0      	sub	sp, #128	; 0x80
 80135da:	4604      	mov	r4, r0
 80135dc:	b193      	cbz	r3, 8013604 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80135de:	4b30      	ldr	r3, [pc, #192]	; (80136a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 80135e0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80135e2:	881b      	ldrh	r3, [r3, #0]
 80135e4:	428b      	cmp	r3, r1
 80135e6:	d90d      	bls.n	8013604 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80135e8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	dd09      	ble.n	8013604 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80135f0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	dd05      	ble.n	8013604 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80135f8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80135fc:	b12b      	cbz	r3, 801360a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 80135fe:	6803      	ldr	r3, [r0, #0]
 8013600:	695b      	ldr	r3, [r3, #20]
 8013602:	4798      	blx	r3
 8013604:	b020      	add	sp, #128	; 0x80
 8013606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801360a:	4b26      	ldr	r3, [pc, #152]	; (80136a4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8013612:	4b25      	ldr	r3, [pc, #148]	; (80136a8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801361a:	4b24      	ldr	r3, [pc, #144]	; (80136ac <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 801361c:	6818      	ldr	r0, [r3, #0]
 801361e:	f7f0 fe89 	bl	8004334 <_ZNK8touchgfx5Texts7getTextEt>
 8013622:	4606      	mov	r6, r0
 8013624:	a807      	add	r0, sp, #28
 8013626:	f003 fd07 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 801362a:	682b      	ldr	r3, [r5, #0]
 801362c:	4628      	mov	r0, r5
 801362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013630:	4798      	blx	r3
 8013632:	682b      	ldr	r3, [r5, #0]
 8013634:	4607      	mov	r7, r0
 8013636:	4628      	mov	r0, r5
 8013638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801363a:	4798      	blx	r3
 801363c:	6823      	ldr	r3, [r4, #0]
 801363e:	4605      	mov	r5, r0
 8013640:	4620      	mov	r0, r4
 8013642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013644:	4798      	blx	r3
 8013646:	6823      	ldr	r3, [r4, #0]
 8013648:	4680      	mov	r8, r0
 801364a:	4620      	mov	r0, r4
 801364c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013650:	4798      	blx	r3
 8013652:	462b      	mov	r3, r5
 8013654:	463a      	mov	r2, r7
 8013656:	4631      	mov	r1, r6
 8013658:	e9cd 8000 	strd	r8, r0, [sp]
 801365c:	a807      	add	r0, sp, #28
 801365e:	f003 fd5b 	bl	8017118 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013662:	a807      	add	r0, sp, #28
 8013664:	f004 f914 	bl	8017890 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013668:	280a      	cmp	r0, #10
 801366a:	d103      	bne.n	8013674 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 801366c:	6823      	ldr	r3, [r4, #0]
 801366e:	4620      	mov	r0, r4
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	e7c6      	b.n	8013602 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8013674:	a807      	add	r0, sp, #28
 8013676:	f004 f90b 	bl	8017890 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801367a:	2800      	cmp	r0, #0
 801367c:	d1f4      	bne.n	8013668 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 801367e:	ad04      	add	r5, sp, #16
 8013680:	4621      	mov	r1, r4
 8013682:	4628      	mov	r0, r5
 8013684:	f7ff fc4c 	bl	8012f20 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8013688:	ab02      	add	r3, sp, #8
 801368a:	6822      	ldr	r2, [r4, #0]
 801368c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013690:	6912      	ldr	r2, [r2, #16]
 8013692:	e883 0003 	stmia.w	r3, {r0, r1}
 8013696:	4619      	mov	r1, r3
 8013698:	4620      	mov	r0, r4
 801369a:	4790      	blx	r2
 801369c:	e7b2      	b.n	8013604 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801369e:	bf00      	nop
 80136a0:	2400c848 	.word	0x2400c848
 80136a4:	2400c844 	.word	0x2400c844
 80136a8:	2400c84c 	.word	0x2400c84c
 80136ac:	2400c850 	.word	0x2400c850

080136b0 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 80136b0:	b510      	push	{r4, lr}
 80136b2:	4604      	mov	r4, r0
 80136b4:	2148      	movs	r1, #72	; 0x48
 80136b6:	f00c fe74 	bl	80203a2 <_ZdlPvj>
 80136ba:	4620      	mov	r0, r4
 80136bc:	bd10      	pop	{r4, pc}

080136be <_ZN8touchgfx5ImageD1Ev>:
 80136be:	4770      	bx	lr

080136c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80136c0:	b570      	push	{r4, r5, r6, lr}
 80136c2:	880b      	ldrh	r3, [r1, #0]
 80136c4:	460d      	mov	r5, r1
 80136c6:	4604      	mov	r4, r0
 80136c8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80136ca:	4608      	mov	r0, r1
 80136cc:	f004 fd8e 	bl	80181ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80136d0:	4606      	mov	r6, r0
 80136d2:	4628      	mov	r0, r5
 80136d4:	f004 fdbe 	bl	8018254 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80136d8:	6823      	ldr	r3, [r4, #0]
 80136da:	4605      	mov	r5, r0
 80136dc:	4631      	mov	r1, r6
 80136de:	4620      	mov	r0, r4
 80136e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136e2:	4798      	blx	r3
 80136e4:	6823      	ldr	r3, [r4, #0]
 80136e6:	4629      	mov	r1, r5
 80136e8:	4620      	mov	r0, r4
 80136ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136f0:	4718      	bx	r3

080136f2 <_ZN8touchgfx5ImageD0Ev>:
 80136f2:	b510      	push	{r4, lr}
 80136f4:	4604      	mov	r4, r0
 80136f6:	212c      	movs	r1, #44	; 0x2c
 80136f8:	f00c fe53 	bl	80203a2 <_ZdlPvj>
 80136fc:	4620      	mov	r0, r4
 80136fe:	bd10      	pop	{r4, pc}

08013700 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013700:	b510      	push	{r4, lr}
 8013702:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8013706:	4604      	mov	r4, r0
 8013708:	2bff      	cmp	r3, #255	; 0xff
 801370a:	d006      	beq.n	801371a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801370c:	2300      	movs	r3, #0
 801370e:	8003      	strh	r3, [r0, #0]
 8013710:	8043      	strh	r3, [r0, #2]
 8013712:	8083      	strh	r3, [r0, #4]
 8013714:	80c3      	strh	r3, [r0, #6]
 8013716:	4620      	mov	r0, r4
 8013718:	bd10      	pop	{r4, pc}
 801371a:	3126      	adds	r1, #38	; 0x26
 801371c:	f004 fdce 	bl	80182bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013720:	e7f9      	b.n	8013716 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013722 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013722:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8013726:	b12a      	cbz	r2, 8013734 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013728:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801372c:	b112      	cbz	r2, 8013734 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801372e:	6803      	ldr	r3, [r0, #0]
 8013730:	695b      	ldr	r3, [r3, #20]
 8013732:	4718      	bx	r3
 8013734:	4770      	bx	lr
	...

08013738 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801373c:	4604      	mov	r4, r0
 801373e:	b088      	sub	sp, #32
 8013740:	2500      	movs	r5, #0
 8013742:	460f      	mov	r7, r1
 8013744:	f854 3b26 	ldr.w	r3, [r4], #38
 8013748:	a904      	add	r1, sp, #16
 801374a:	4606      	mov	r6, r0
 801374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801374e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013752:	4798      	blx	r3
 8013754:	4620      	mov	r0, r4
 8013756:	f004 fd49 	bl	80181ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801375a:	4680      	mov	r8, r0
 801375c:	4620      	mov	r0, r4
 801375e:	f004 fd79 	bl	8018254 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013762:	9506      	str	r5, [sp, #24]
 8013764:	ad06      	add	r5, sp, #24
 8013766:	f8ad 001e 	strh.w	r0, [sp, #30]
 801376a:	4639      	mov	r1, r7
 801376c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013770:	4628      	mov	r0, r5
 8013772:	f7fe fadb 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8013776:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801377a:	2b00      	cmp	r3, #0
 801377c:	dd19      	ble.n	80137b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801377e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013782:	2b00      	cmp	r3, #0
 8013784:	dd15      	ble.n	80137b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013786:	4b0c      	ldr	r3, [pc, #48]	; (80137b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801378e:	b10a      	cbz	r2, 8013794 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013790:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013792:	b900      	cbnz	r0, 8013796 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013794:	6898      	ldr	r0, [r3, #8]
 8013796:	2701      	movs	r7, #1
 8013798:	6801      	ldr	r1, [r0, #0]
 801379a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801379e:	9702      	str	r7, [sp, #8]
 80137a0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80137a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80137a8:	e9cd 5600 	strd	r5, r6, [sp]
 80137ac:	688d      	ldr	r5, [r1, #8]
 80137ae:	4621      	mov	r1, r4
 80137b0:	47a8      	blx	r5
 80137b2:	b008      	add	sp, #32
 80137b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b8:	2400c7f4 	.word	0x2400c7f4

080137bc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80137bc:	2000      	movs	r0, #0
 80137be:	4770      	bx	lr

080137c0 <_ZN8touchgfx8KeyboardD1Ev>:
 80137c0:	4770      	bx	lr

080137c2 <_ZN8touchgfx10ClickEventD1Ev>:
 80137c2:	4770      	bx	lr

080137c4 <_ZN8touchgfx8Keyboard14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80137c4:	b538      	push	{r3, r4, r5, lr}
 80137c6:	4604      	mov	r4, r0
 80137c8:	4615      	mov	r5, r2
 80137ca:	f7fe fb87 	bl	8011edc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80137ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137d2:	81a3      	strh	r3, [r4, #12]
 80137d4:	f04f 33ff 	mov.w	r3, #4294967295
 80137d8:	6223      	str	r3, [r4, #32]
 80137da:	682b      	ldr	r3, [r5, #0]
 80137dc:	61e3      	str	r3, [r4, #28]
 80137de:	602c      	str	r4, [r5, #0]
 80137e0:	bd38      	pop	{r3, r4, r5, pc}

080137e2 <_ZN8touchgfx10ClickEventD0Ev>:
 80137e2:	b510      	push	{r4, lr}
 80137e4:	4604      	mov	r4, r0
 80137e6:	210c      	movs	r1, #12
 80137e8:	f00c fddb 	bl	80203a2 <_ZdlPvj>
 80137ec:	4620      	mov	r0, r4
 80137ee:	bd10      	pop	{r4, pc}

080137f0 <_ZN8touchgfx8KeyboardD0Ev>:
 80137f0:	b510      	push	{r4, lr}
 80137f2:	4604      	mov	r4, r0
 80137f4:	21e8      	movs	r1, #232	; 0xe8
 80137f6:	f00c fdd4 	bl	80203a2 <_ZdlPvj>
 80137fa:	4620      	mov	r0, r4
 80137fc:	bd10      	pop	{r4, pc}

080137fe <_ZNK8touchgfx4Rect9intersectEss>:
 80137fe:	b510      	push	{r4, lr}
 8013800:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013804:	428b      	cmp	r3, r1
 8013806:	dc10      	bgt.n	801382a <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013808:	8884      	ldrh	r4, [r0, #4]
 801380a:	4423      	add	r3, r4
 801380c:	b21b      	sxth	r3, r3
 801380e:	4299      	cmp	r1, r3
 8013810:	da0b      	bge.n	801382a <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013812:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013816:	4293      	cmp	r3, r2
 8013818:	dc07      	bgt.n	801382a <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801381a:	88c0      	ldrh	r0, [r0, #6]
 801381c:	4418      	add	r0, r3
 801381e:	b200      	sxth	r0, r0
 8013820:	4282      	cmp	r2, r0
 8013822:	bfac      	ite	ge
 8013824:	2000      	movge	r0, #0
 8013826:	2001      	movlt	r0, #1
 8013828:	bd10      	pop	{r4, pc}
 801382a:	2000      	movs	r0, #0
 801382c:	e7fc      	b.n	8013828 <_ZNK8touchgfx4Rect9intersectEss+0x2a>
	...

08013830 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE>:
 8013830:	b530      	push	{r4, r5, lr}
 8013832:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8013836:	b085      	sub	sp, #20
 8013838:	4604      	mov	r4, r0
 801383a:	460d      	mov	r5, r1
 801383c:	b1f3      	cbz	r3, 801387c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 801383e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013842:	30bc      	adds	r0, #188	; 0xbc
 8013844:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8013848:	f7ff ffd9 	bl	80137fe <_ZNK8touchgfx4Rect9intersectEss>
 801384c:	b9b0      	cbnz	r0, 801387c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 801384e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8013852:	b99b      	cbnz	r3, 801387c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8013854:	480a      	ldr	r0, [pc, #40]	; (8013880 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x50>)
 8013856:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801385a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801385e:	9001      	str	r0, [sp, #4]
 8013860:	2002      	movs	r0, #2
 8013862:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013866:	6823      	ldr	r3, [r4, #0]
 8013868:	f88d 0008 	strb.w	r0, [sp, #8]
 801386c:	4620      	mov	r0, r4
 801386e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8013872:	a901      	add	r1, sp, #4
 8013874:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801387a:	4798      	blx	r3
 801387c:	b005      	add	sp, #20
 801387e:	bd30      	pop	{r4, r5, pc}
 8013880:	080238c0 	.word	0x080238c0

08013884 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013884:	b510      	push	{r4, lr}
 8013886:	f9b1 4000 	ldrsh.w	r4, [r1]
 801388a:	888a      	ldrh	r2, [r1, #4]
 801388c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013890:	4422      	add	r2, r4
 8013892:	b212      	sxth	r2, r2
 8013894:	4293      	cmp	r3, r2
 8013896:	da15      	bge.n	80138c4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013898:	8882      	ldrh	r2, [r0, #4]
 801389a:	4413      	add	r3, r2
 801389c:	b21b      	sxth	r3, r3
 801389e:	429c      	cmp	r4, r3
 80138a0:	da10      	bge.n	80138c4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80138a2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80138a6:	88c9      	ldrh	r1, [r1, #6]
 80138a8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80138ac:	4419      	add	r1, r3
 80138ae:	b209      	sxth	r1, r1
 80138b0:	428a      	cmp	r2, r1
 80138b2:	da07      	bge.n	80138c4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80138b4:	88c0      	ldrh	r0, [r0, #6]
 80138b6:	4410      	add	r0, r2
 80138b8:	b200      	sxth	r0, r0
 80138ba:	4283      	cmp	r3, r0
 80138bc:	bfac      	ite	ge
 80138be:	2000      	movge	r0, #0
 80138c0:	2001      	movlt	r0, #1
 80138c2:	bd10      	pop	{r4, pc}
 80138c4:	2000      	movs	r0, #0
 80138c6:	e7fc      	b.n	80138c2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080138c8 <_ZN8touchgfx8DrawableC1Ev>:
 80138c8:	4a0a      	ldr	r2, [pc, #40]	; (80138f4 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 80138ca:	6002      	str	r2, [r0, #0]
 80138cc:	2200      	movs	r2, #0
 80138ce:	8082      	strh	r2, [r0, #4]
 80138d0:	80c2      	strh	r2, [r0, #6]
 80138d2:	8102      	strh	r2, [r0, #8]
 80138d4:	8142      	strh	r2, [r0, #10]
 80138d6:	8182      	strh	r2, [r0, #12]
 80138d8:	81c2      	strh	r2, [r0, #14]
 80138da:	8202      	strh	r2, [r0, #16]
 80138dc:	8242      	strh	r2, [r0, #18]
 80138de:	61c2      	str	r2, [r0, #28]
 80138e0:	8402      	strh	r2, [r0, #32]
 80138e2:	8442      	strh	r2, [r0, #34]	; 0x22
 80138e4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80138e8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80138ec:	2201      	movs	r2, #1
 80138ee:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80138f2:	4770      	bx	lr
 80138f4:	08023a08 	.word	0x08023a08

080138f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 80138f8:	b538      	push	{r3, r4, r5, lr}
 80138fa:	4604      	mov	r4, r0
 80138fc:	460d      	mov	r5, r1
 80138fe:	2226      	movs	r2, #38	; 0x26
 8013900:	2100      	movs	r1, #0
 8013902:	f00c ff13 	bl	802072c <memset>
 8013906:	4620      	mov	r0, r4
 8013908:	f7ff ffde 	bl	80138c8 <_ZN8touchgfx8DrawableC1Ev>
 801390c:	4b06      	ldr	r3, [pc, #24]	; (8013928 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 801390e:	4620      	mov	r0, r4
 8013910:	4629      	mov	r1, r5
 8013912:	6023      	str	r3, [r4, #0]
 8013914:	882b      	ldrh	r3, [r5, #0]
 8013916:	84e3      	strh	r3, [r4, #38]	; 0x26
 8013918:	23ff      	movs	r3, #255	; 0xff
 801391a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801391e:	f7ff fecf 	bl	80136c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013922:	4620      	mov	r0, r4
 8013924:	bd38      	pop	{r3, r4, r5, pc}
 8013926:	bf00      	nop
 8013928:	08023854 	.word	0x08023854

0801392c <_ZN8touchgfx8KeyboardC1Ev>:
 801392c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013930:	4604      	mov	r4, r0
 8013932:	2500      	movs	r5, #0
 8013934:	f7ff ffc8 	bl	80138c8 <_ZN8touchgfx8DrawableC1Ev>
 8013938:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801393c:	4b2f      	ldr	r3, [pc, #188]	; (80139fc <_ZN8touchgfx8KeyboardC1Ev+0xd0>)
 801393e:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8013942:	af02      	add	r7, sp, #8
 8013944:	f104 0864 	add.w	r8, r4, #100	; 0x64
 8013948:	6023      	str	r3, [r4, #0]
 801394a:	4648      	mov	r0, r9
 801394c:	f827 6d04 	strh.w	r6, [r7, #-4]!
 8013950:	4639      	mov	r1, r7
 8013952:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
 8013956:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 801395a:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 801395e:	f7ff ffcb 	bl	80138f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013962:	2226      	movs	r2, #38	; 0x26
 8013964:	4629      	mov	r1, r5
 8013966:	4640      	mov	r0, r8
 8013968:	f00c fee0 	bl	802072c <memset>
 801396c:	4640      	mov	r0, r8
 801396e:	f7ff ffab 	bl	80138c8 <_ZN8touchgfx8DrawableC1Ev>
 8013972:	4b23      	ldr	r3, [pc, #140]	; (8013a00 <_ZN8touchgfx8KeyboardC1Ev+0xd4>)
 8013974:	4639      	mov	r1, r7
 8013976:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 801397a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801397e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8013982:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 8013986:	4650      	mov	r0, sl
 8013988:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801398c:	4b1d      	ldr	r3, [pc, #116]	; (8013a04 <_ZN8touchgfx8KeyboardC1Ev+0xd8>)
 801398e:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 8013992:	6663      	str	r3, [r4, #100]	; 0x64
 8013994:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
 8013998:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 801399c:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 80139a0:	f8a4 60a4 	strh.w	r6, [r4, #164]	; 0xa4
 80139a4:	f8a4 60a6 	strh.w	r6, [r4, #166]	; 0xa6
 80139a8:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80139ac:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 80139b0:	f8ad 6004 	strh.w	r6, [sp, #4]
 80139b4:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 80139b8:	f7ff ff9e 	bl	80138f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80139bc:	2301      	movs	r3, #1
 80139be:	462a      	mov	r2, r5
 80139c0:	4629      	mov	r1, r5
 80139c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80139c6:	4648      	mov	r0, r9
 80139c8:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
 80139cc:	f7fe fc8c 	bl	80122e8 <_ZN8touchgfx8Drawable5setXYEss>
 80139d0:	4649      	mov	r1, r9
 80139d2:	4620      	mov	r0, r4
 80139d4:	f7fe f81c 	bl	8011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80139d8:	4651      	mov	r1, sl
 80139da:	4620      	mov	r0, r4
 80139dc:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
 80139e0:	f7fe f816 	bl	8011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80139e4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80139e8:	4620      	mov	r0, r4
 80139ea:	4641      	mov	r1, r8
 80139ec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80139f0:	f7fe f80e 	bl	8011a10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80139f4:	4620      	mov	r0, r4
 80139f6:	b002      	add	sp, #8
 80139f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139fc:	080238d4 	.word	0x080238d4
 8013a00:	080220a4 	.word	0x080220a4
 8013a04:	08022cec 	.word	0x08022cec

08013a08 <_ZN8touchgfx8Keyboard9setBufferEPtt>:
 8013a08:	b510      	push	{r4, lr}
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	6301      	str	r1, [r0, #48]	; 0x30
 8013a0e:	8682      	strh	r2, [r0, #52]	; 0x34
 8013a10:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
 8013a14:	4608      	mov	r0, r1
 8013a16:	f004 fa75 	bl	8017f04 <_ZN8touchgfx7Unicode6strlenEPKt>
 8013a1a:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013a1c:	bd10      	pop	{r4, pc}

08013a1e <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>:
 8013a1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013a22:	4605      	mov	r5, r0
 8013a24:	460c      	mov	r4, r1
 8013a26:	f8c5 10b0 	str.w	r1, [r5, #176]	; 0xb0
 8013a2a:	b309      	cbz	r1, 8013a70 <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE+0x52>
 8013a2c:	460f      	mov	r7, r1
 8013a2e:	a902      	add	r1, sp, #8
 8013a30:	f105 0664 	add.w	r6, r5, #100	; 0x64
 8013a34:	3038      	adds	r0, #56	; 0x38
 8013a36:	f837 3b1c 	ldrh.w	r3, [r7], #28
 8013a3a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8013a3e:	f7ff fe3f 	bl	80136c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013a42:	4639      	mov	r1, r7
 8013a44:	4630      	mov	r0, r6
 8013a46:	f7ff fcfb 	bl	8013440 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a4c:	4630      	mov	r0, r6
 8013a4e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8013a52:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 8013a56:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
 8013a5a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8013a5e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8013a62:	f7fe fc41 	bl	80122e8 <_ZN8touchgfx8Drawable5setXYEss>
 8013a66:	4642      	mov	r2, r8
 8013a68:	4639      	mov	r1, r7
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	f7ff fcba 	bl	80133e4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	4628      	mov	r0, r5
 8013a74:	695b      	ldr	r3, [r3, #20]
 8013a76:	4798      	blx	r3
 8013a78:	b002      	add	sp, #8
 8013a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08013a80 <_ZN8touchgfx8Keyboard18setTextIndentationEv>:
 8013a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a84:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8013a88:	4604      	mov	r4, r0
 8013a8a:	b343      	cbz	r3, 8013ade <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x5e>
 8013a8c:	4a15      	ldr	r2, [pc, #84]	; (8013ae4 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x64>)
 8013a8e:	f100 0764 	add.w	r7, r0, #100	; 0x64
 8013a92:	8c19      	ldrh	r1, [r3, #32]
 8013a94:	6812      	ldr	r2, [r2, #0]
 8013a96:	4638      	mov	r0, r7
 8013a98:	8add      	ldrh	r5, [r3, #22]
 8013a9a:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 8013a9e:	4a12      	ldr	r2, [pc, #72]	; (8013ae8 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x68>)
 8013aa0:	f9b3 8018 	ldrsh.w	r8, [r3, #24]
 8013aa4:	6812      	ldr	r2, [r2, #0]
 8013aa6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8013aaa:	8a59      	ldrh	r1, [r3, #18]
 8013aac:	7a16      	ldrb	r6, [r2, #8]
 8013aae:	b2b2      	uxth	r2, r6
 8013ab0:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8013ab4:	1a89      	subs	r1, r1, r2
 8013ab6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013aba:	b22d      	sxth	r5, r5
 8013abc:	b209      	sxth	r1, r1
 8013abe:	f7fe fc13 	bl	80122e8 <_ZN8touchgfx8Drawable5setXYEss>
 8013ac2:	4642      	mov	r2, r8
 8013ac4:	4629      	mov	r1, r5
 8013ac6:	4638      	mov	r0, r7
 8013ac8:	f7ff fc8c 	bl	80133e4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013acc:	2300      	movs	r3, #0
 8013ace:	f04f 32ff 	mov.w	r2, #4294967295
 8013ad2:	f884 609b 	strb.w	r6, [r4, #155]	; 0x9b
 8013ad6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8013ada:	e9c4 3228 	strd	r3, r2, [r4, #160]	; 0xa0
 8013ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ae2:	bf00      	nop
 8013ae4:	2400c844 	.word	0x2400c844
 8013ae8:	2400c84c 	.word	0x2400c84c

08013aec <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>:
 8013aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af0:	4690      	mov	r8, r2
 8013af2:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8013af6:	2200      	movs	r2, #0
 8013af8:	4606      	mov	r6, r0
 8013afa:	4699      	mov	r9, r3
 8013afc:	8042      	strh	r2, [r0, #2]
 8013afe:	8082      	strh	r2, [r0, #4]
 8013b00:	80c2      	strh	r2, [r0, #6]
 8013b02:	8102      	strh	r2, [r0, #8]
 8013b04:	7002      	strb	r2, [r0, #0]
 8013b06:	b1c7      	cbz	r7, 8013b3a <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8013b08:	f897 a008 	ldrb.w	sl, [r7, #8]
 8013b0c:	4615      	mov	r5, r2
 8013b0e:	f04f 0b0c 	mov.w	fp, #12
 8013b12:	b2eb      	uxtb	r3, r5
 8013b14:	459a      	cmp	sl, r3
 8013b16:	d910      	bls.n	8013b3a <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8013b18:	687c      	ldr	r4, [r7, #4]
 8013b1a:	464a      	mov	r2, r9
 8013b1c:	4641      	mov	r1, r8
 8013b1e:	fb0b 4405 	mla	r4, fp, r5, r4
 8013b22:	3501      	adds	r5, #1
 8013b24:	1ca0      	adds	r0, r4, #2
 8013b26:	f7ff fe6a 	bl	80137fe <_ZNK8touchgfx4Rect9intersectEss>
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	d0f1      	beq.n	8013b12 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x26>
 8013b2e:	6823      	ldr	r3, [r4, #0]
 8013b30:	6033      	str	r3, [r6, #0]
 8013b32:	6863      	ldr	r3, [r4, #4]
 8013b34:	6073      	str	r3, [r6, #4]
 8013b36:	68a3      	ldr	r3, [r4, #8]
 8013b38:	60b3      	str	r3, [r6, #8]
 8013b3a:	4630      	mov	r0, r6
 8013b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b40 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>:
 8013b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b44:	2500      	movs	r5, #0
 8013b46:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8013b4a:	4606      	mov	r6, r0
 8013b4c:	4690      	mov	r8, r2
 8013b4e:	4699      	mov	r9, r3
 8013b50:	6085      	str	r5, [r0, #8]
 8013b52:	e9c0 5500 	strd	r5, r5, [r0]
 8013b56:	b307      	cbz	r7, 8013b9a <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8013b58:	f897 a010 	ldrb.w	sl, [r7, #16]
 8013b5c:	b2eb      	uxtb	r3, r5
 8013b5e:	459a      	cmp	sl, r3
 8013b60:	d91b      	bls.n	8013b9a <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8013b62:	68fc      	ldr	r4, [r7, #12]
 8013b64:	464a      	mov	r2, r9
 8013b66:	4641      	mov	r1, r8
 8013b68:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8013b6c:	3501      	adds	r5, #1
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f7ff fe45 	bl	80137fe <_ZNK8touchgfx4Rect9intersectEss>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	d0f1      	beq.n	8013b5c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x1c>
 8013b78:	4623      	mov	r3, r4
 8013b7a:	4632      	mov	r2, r6
 8013b7c:	f104 0508 	add.w	r5, r4, #8
 8013b80:	6818      	ldr	r0, [r3, #0]
 8013b82:	3308      	adds	r3, #8
 8013b84:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013b88:	4614      	mov	r4, r2
 8013b8a:	42ab      	cmp	r3, r5
 8013b8c:	c403      	stmia	r4!, {r0, r1}
 8013b8e:	4622      	mov	r2, r4
 8013b90:	d1f6      	bne.n	8013b80 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x40>
 8013b92:	6818      	ldr	r0, [r3, #0]
 8013b94:	6020      	str	r0, [r4, #0]
 8013b96:	889b      	ldrh	r3, [r3, #4]
 8013b98:	80a3      	strh	r3, [r4, #4]
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ba0 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>:
 8013ba0:	b570      	push	{r4, r5, r6, lr}
 8013ba2:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8013ba6:	b160      	cbz	r0, 8013bc2 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>
 8013ba8:	7906      	ldrb	r6, [r0, #4]
 8013baa:	2300      	movs	r3, #0
 8013bac:	b2da      	uxtb	r2, r3
 8013bae:	4296      	cmp	r6, r2
 8013bb0:	d908      	bls.n	8013bc4 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x24>
 8013bb2:	009a      	lsls	r2, r3, #2
 8013bb4:	6804      	ldr	r4, [r0, #0]
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	18a5      	adds	r5, r4, r2
 8013bba:	5ca2      	ldrb	r2, [r4, r2]
 8013bbc:	428a      	cmp	r2, r1
 8013bbe:	d1f5      	bne.n	8013bac <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0xc>
 8013bc0:	8868      	ldrh	r0, [r5, #2]
 8013bc2:	bd70      	pop	{r4, r5, r6, pc}
 8013bc4:	2000      	movs	r0, #0
 8013bc6:	e7fc      	b.n	8013bc2 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>

08013bc8 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE>:
 8013bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bcc:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8013bd0:	b08d      	sub	sp, #52	; 0x34
 8013bd2:	4605      	mov	r5, r0
 8013bd4:	460e      	mov	r6, r1
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	f000 80c4 	beq.w	8013d64 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8013bdc:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8013bde:	f004 f9a5 	bl	8017f2c <_ZN8touchgfx11FontManager7getFontEt>
 8013be2:	2800      	cmp	r0, #0
 8013be4:	f000 80be 	beq.w	8013d64 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8013be8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8013bec:	2400      	movs	r4, #0
 8013bee:	9007      	str	r0, [sp, #28]
 8013bf0:	920a      	str	r2, [sp, #40]	; 0x28
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8013bf8:	f88d 2020 	strb.w	r2, [sp, #32]
 8013bfc:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 8013c00:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8013c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013c06:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
 8013c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8013c0c:	9402      	str	r4, [sp, #8]
 8013c0e:	6803      	ldr	r3, [r0, #0]
 8013c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c12:	4798      	blx	r3
 8013c14:	4607      	mov	r7, r0
 8013c16:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8013c1a:	fa5f f884 	uxtb.w	r8, r4
 8013c1e:	7a1a      	ldrb	r2, [r3, #8]
 8013c20:	4542      	cmp	r2, r8
 8013c22:	f240 809f 	bls.w	8013d64 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8013c26:	220c      	movs	r2, #12
 8013c28:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013c2c:	4631      	mov	r1, r6
 8013c2e:	fb02 f808 	mul.w	r8, r2, r8
 8013c32:	eb09 0a08 	add.w	sl, r9, r8
 8013c36:	f10a 0a02 	add.w	sl, sl, #2
 8013c3a:	4650      	mov	r0, sl
 8013c3c:	f7ff fe22 	bl	8013884 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013c40:	2800      	cmp	r0, #0
 8013c42:	f000 808a 	beq.w	8013d5a <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8013c46:	f819 1008 	ldrb.w	r1, [r9, r8]
 8013c4a:	4628      	mov	r0, r5
 8013c4c:	f7ff ffa8 	bl	8013ba0 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 8013c50:	4681      	mov	r9, r0
 8013c52:	2800      	cmp	r0, #0
 8013c54:	f000 8081 	beq.w	8013d5a <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8013c58:	f8da 0000 	ldr.w	r0, [sl]
 8013c5c:	ab03      	add	r3, sp, #12
 8013c5e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013c62:	c303      	stmia	r3!, {r0, r1}
 8013c64:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8013c68:	2102      	movs	r1, #2
 8013c6a:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8013c6e:	1bd3      	subs	r3, r2, r7
 8013c70:	fb93 f3f1 	sdiv	r3, r3, r1
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	4498      	add	r8, r3
 8013c78:	1ad3      	subs	r3, r2, r3
 8013c7a:	fa1f f888 	uxth.w	r8, r8
 8013c7e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013c82:	ab05      	add	r3, sp, #20
 8013c84:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013c88:	f8ad 800e 	strh.w	r8, [sp, #14]
 8013c8c:	f8da 0000 	ldr.w	r0, [sl]
 8013c90:	c303      	stmia	r3!, {r0, r1}
 8013c92:	4631      	mov	r1, r6
 8013c94:	a805      	add	r0, sp, #20
 8013c96:	f7ff fdf5 	bl	8013884 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	d05f      	beq.n	8013d5e <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x196>
 8013c9e:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8013ca2:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013ca6:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8013caa:	4686      	mov	lr, r0
 8013cac:	4290      	cmp	r0, r2
 8013cae:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8013cb2:	4450      	add	r0, sl
 8013cb4:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 8013cb8:	bfb8      	it	lt
 8013cba:	4696      	movlt	lr, r2
 8013cbc:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8013cc0:	4452      	add	r2, sl
 8013cc2:	b280      	uxth	r0, r0
 8013cc4:	4299      	cmp	r1, r3
 8013cc6:	468c      	mov	ip, r1
 8013cc8:	b292      	uxth	r2, r2
 8013cca:	f8ad e014 	strh.w	lr, [sp, #20]
 8013cce:	fa0f fb80 	sxth.w	fp, r0
 8013cd2:	bfb8      	it	lt
 8013cd4:	469c      	movlt	ip, r3
 8013cd6:	fa0f fa82 	sxth.w	sl, r2
 8013cda:	f8ad c016 	strh.w	ip, [sp, #22]
 8013cde:	45d3      	cmp	fp, sl
 8013ce0:	bfb8      	it	lt
 8013ce2:	4602      	movlt	r2, r0
 8013ce4:	eba2 020e 	sub.w	r2, r2, lr
 8013ce8:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013cec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013cf0:	4411      	add	r1, r2
 8013cf2:	88f2      	ldrh	r2, [r6, #6]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	b289      	uxth	r1, r1
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	b208      	sxth	r0, r1
 8013cfc:	b21a      	sxth	r2, r3
 8013cfe:	4290      	cmp	r0, r2
 8013d00:	bfb8      	it	lt
 8013d02:	460b      	movlt	r3, r1
 8013d04:	eba3 030c 	sub.w	r3, r3, ip
 8013d08:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013d0c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8013d10:	4628      	mov	r0, r5
 8013d12:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013d16:	f8ad 9008 	strh.w	r9, [sp, #8]
 8013d1a:	1a9b      	subs	r3, r3, r2
 8013d1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013d20:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013d24:	eba3 0808 	sub.w	r8, r3, r8
 8013d28:	682b      	ldr	r3, [r5, #0]
 8013d2a:	f8ad 8016 	strh.w	r8, [sp, #22]
 8013d2e:	f10d 080c 	add.w	r8, sp, #12
 8013d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d34:	4641      	mov	r1, r8
 8013d36:	4798      	blx	r3
 8013d38:	4b0c      	ldr	r3, [pc, #48]	; (8013d6c <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a4>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013d40:	b10a      	cbz	r2, 8013d46 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x17e>
 8013d42:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013d44:	b900      	cbnz	r0, 8013d48 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x180>
 8013d46:	6898      	ldr	r0, [r3, #8]
 8013d48:	ab02      	add	r3, sp, #8
 8013d4a:	9301      	str	r3, [sp, #4]
 8013d4c:	ab07      	add	r3, sp, #28
 8013d4e:	9300      	str	r3, [sp, #0]
 8013d50:	ab05      	add	r3, sp, #20
 8013d52:	e898 0006 	ldmia.w	r8, {r1, r2}
 8013d56:	f7f0 fa99 	bl	800428c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013d5a:	3401      	adds	r4, #1
 8013d5c:	e75b      	b.n	8013c16 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x4e>
 8013d5e:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8013d62:	e7d3      	b.n	8013d0c <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x144>
 8013d64:	b00d      	add	sp, #52	; 0x34
 8013d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6a:	bf00      	nop
 8013d6c:	2400c7f4 	.word	0x2400c7f4

08013d70 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE>:
 8013d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d74:	790d      	ldrb	r5, [r1, #4]
 8013d76:	b08b      	sub	sp, #44	; 0x2c
 8013d78:	4604      	mov	r4, r0
 8013d7a:	2d01      	cmp	r5, #1
 8013d7c:	d108      	bne.n	8013d90 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 8013d7e:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
 8013d82:	b12b      	cbz	r3, 8013d90 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 8013d84:	2300      	movs	r3, #0
 8013d86:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8013d8a:	b00b      	add	sp, #44	; 0x2c
 8013d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d90:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013d94:	2700      	movs	r7, #0
 8013d96:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8013d9a:	a806      	add	r0, sp, #24
 8013d9c:	4642      	mov	r2, r8
 8013d9e:	4621      	mov	r1, r4
 8013da0:	464b      	mov	r3, r9
 8013da2:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8013da6:	f7ff fecb 	bl	8013b40 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>
 8013daa:	9e08      	ldr	r6, [sp, #32]
 8013dac:	2e00      	cmp	r6, #0
 8013dae:	d049      	beq.n	8013e44 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xd4>
 8013db0:	2d00      	cmp	r5, #0
 8013db2:	d133      	bne.n	8013e1c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xac>
 8013db4:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8013db8:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8013dbc:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f7fe fa91 	bl	80122e8 <_ZN8touchgfx8Drawable5setXYEss>
 8013dc6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013dca:	a90a      	add	r1, sp, #40	; 0x28
 8013dcc:	f821 3d1c 	strh.w	r3, [r1, #-28]!
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	f7ff fc75 	bl	80136c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	4622      	mov	r2, r4
 8013dda:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 8013dde:	ab01      	add	r3, sp, #4
 8013de0:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 8013de4:	6851      	ldr	r1, [r2, #4]
 8013de6:	c303      	stmia	r3!, {r0, r1}
 8013de8:	6823      	ldr	r3, [r4, #0]
 8013dea:	a901      	add	r1, sp, #4
 8013dec:	4620      	mov	r0, r4
 8013dee:	691b      	ldr	r3, [r3, #16]
 8013df0:	4798      	blx	r3
 8013df2:	1e6b      	subs	r3, r5, #1
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	d8c8      	bhi.n	8013d8a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8013df8:	4622      	mov	r2, r4
 8013dfa:	ab01      	add	r3, sp, #4
 8013dfc:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 8013e00:	6851      	ldr	r1, [r2, #4]
 8013e02:	c303      	stmia	r3!, {r0, r1}
 8013e04:	2300      	movs	r3, #0
 8013e06:	a901      	add	r1, sp, #4
 8013e08:	4620      	mov	r0, r4
 8013e0a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 8013e0e:	6823      	ldr	r3, [r4, #0]
 8013e10:	691b      	ldr	r3, [r3, #16]
 8013e12:	4798      	blx	r3
 8013e14:	2d02      	cmp	r5, #2
 8013e16:	d1b8      	bne.n	8013d8a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8013e18:	2301      	movs	r3, #1
 8013e1a:	e7b4      	b.n	8013d86 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x16>
 8013e1c:	2d01      	cmp	r5, #1
 8013e1e:	d1e8      	bne.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013e20:	6833      	ldr	r3, [r6, #0]
 8013e22:	4630      	mov	r0, r6
 8013e24:	68db      	ldr	r3, [r3, #12]
 8013e26:	4798      	blx	r3
 8013e28:	2800      	cmp	r0, #0
 8013e2a:	d0e5      	beq.n	8013df8 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8013e2c:	6833      	ldr	r3, [r6, #0]
 8013e2e:	4630      	mov	r0, r6
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	4798      	blx	r3
 8013e34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013e36:	2800      	cmp	r0, #0
 8013e38:	d0de      	beq.n	8013df8 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8013e3a:	6803      	ldr	r3, [r0, #0]
 8013e3c:	4639      	mov	r1, r7
 8013e3e:	689b      	ldr	r3, [r3, #8]
 8013e40:	4798      	blx	r3
 8013e42:	e7d6      	b.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013e44:	4621      	mov	r1, r4
 8013e46:	464b      	mov	r3, r9
 8013e48:	4642      	mov	r2, r8
 8013e4a:	a803      	add	r0, sp, #12
 8013e4c:	f7ff fe4e 	bl	8013aec <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>
 8013e50:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8013e54:	b985      	cbnz	r5, 8013e78 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x108>
 8013e56:	2900      	cmp	r1, #0
 8013e58:	d0cb      	beq.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013e5a:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8013e5e:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8013e62:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013e66:	4630      	mov	r0, r6
 8013e68:	f7fe fa3e 	bl	80122e8 <_ZN8touchgfx8Drawable5setXYEss>
 8013e6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013e70:	a90a      	add	r1, sp, #40	; 0x28
 8013e72:	f821 3d28 	strh.w	r3, [r1, #-40]!
 8013e76:	e7ab      	b.n	8013dd0 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x60>
 8013e78:	2d01      	cmp	r5, #1
 8013e7a:	d1ba      	bne.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013e7c:	2900      	cmp	r1, #0
 8013e7e:	d0b8      	beq.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013e80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d0b5      	beq.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013e86:	4620      	mov	r0, r4
 8013e88:	f7ff fe8a 	bl	8013ba0 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 8013e8c:	4607      	mov	r7, r0
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d0af      	beq.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013e92:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013e94:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013e96:	3b01      	subs	r3, #1
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	daaa      	bge.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013e9c:	f104 0864 	add.w	r8, r4, #100	; 0x64
 8013ea0:	4640      	mov	r0, r8
 8013ea2:	f7ff fb95 	bl	80135d0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8013ea6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013ea8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013eaa:	4640      	mov	r0, r8
 8013eac:	1c59      	adds	r1, r3, #1
 8013eae:	86e1      	strh	r1, [r4, #54]	; 0x36
 8013eb0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8013eb4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013eb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013eb8:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
 8013ebc:	f7ff fb88 	bl	80135d0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8013ec0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	d1b9      	bne.n	8013e3a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xca>
 8013ec6:	e794      	b.n	8013df2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>

08013ec8 <_ZN8touchgfx8Keyboard17setBufferPositionEt>:
 8013ec8:	86c1      	strh	r1, [r0, #54]	; 0x36
 8013eca:	3064      	adds	r0, #100	; 0x64
 8013ecc:	f002 bc6a 	b.w	80167a4 <_ZNK8touchgfx8Drawable10invalidateEv>

08013ed0 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>:
 8013ed0:	6803      	ldr	r3, [r0, #0]
 8013ed2:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
 8013ed6:	695b      	ldr	r3, [r3, #20]
 8013ed8:	4718      	bx	r3

08013eda <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8013eda:	b510      	push	{r4, lr}
 8013edc:	6803      	ldr	r3, [r0, #0]
 8013ede:	460c      	mov	r4, r1
 8013ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee2:	4798      	blx	r3
 8013ee4:	1b03      	subs	r3, r0, r4
 8013ee6:	4258      	negs	r0, r3
 8013ee8:	4158      	adcs	r0, r3
 8013eea:	bd10      	pop	{r4, pc}

08013eec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8013eec:	4b01      	ldr	r3, [pc, #4]	; (8013ef4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8013eee:	6019      	str	r1, [r3, #0]
 8013ef0:	4770      	bx	lr
 8013ef2:	bf00      	nop
 8013ef4:	2400c7fc 	.word	0x2400c7fc

08013ef8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013efc:	4696      	mov	lr, r2
 8013efe:	b097      	sub	sp, #92	; 0x5c
 8013f00:	4605      	mov	r5, r0
 8013f02:	4614      	mov	r4, r2
 8013f04:	460e      	mov	r6, r1
 8013f06:	461f      	mov	r7, r3
 8013f08:	f10d 0c1c 	add.w	ip, sp, #28
 8013f0c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8013f10:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8013f14:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8013f18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f20:	f8de 3000 	ldr.w	r3, [lr]
 8013f24:	f104 0e14 	add.w	lr, r4, #20
 8013f28:	f8cc 3000 	str.w	r3, [ip]
 8013f2c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013f30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f38:	f8de 3000 	ldr.w	r3, [lr]
 8013f3c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013f40:	f8cc 3000 	str.w	r3, [ip]
 8013f44:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013f48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f50:	f8de 3000 	ldr.w	r3, [lr]
 8013f54:	4631      	mov	r1, r6
 8013f56:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f58:	4628      	mov	r0, r5
 8013f5a:	f8cc 3000 	str.w	r3, [ip]
 8013f5e:	682b      	ldr	r3, [r5, #0]
 8013f60:	9201      	str	r2, [sp, #4]
 8013f62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013f64:	f8cd 8008 	str.w	r8, [sp, #8]
 8013f68:	9200      	str	r2, [sp, #0]
 8013f6a:	aa07      	add	r2, sp, #28
 8013f6c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013f70:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8013f74:	463b      	mov	r3, r7
 8013f76:	47d8      	blx	fp
 8013f78:	46a6      	mov	lr, r4
 8013f7a:	f10d 0c1c 	add.w	ip, sp, #28
 8013f7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f86:	f8de 3000 	ldr.w	r3, [lr]
 8013f8a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013f8e:	343c      	adds	r4, #60	; 0x3c
 8013f90:	f8cc 3000 	str.w	r3, [ip]
 8013f94:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013f98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fa0:	f8de 3000 	ldr.w	r3, [lr]
 8013fa4:	f8cc 3000 	str.w	r3, [ip]
 8013fa8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fb2:	6823      	ldr	r3, [r4, #0]
 8013fb4:	4631      	mov	r1, r6
 8013fb6:	4628      	mov	r0, r5
 8013fb8:	f8cc 3000 	str.w	r3, [ip]
 8013fbc:	682b      	ldr	r3, [r5, #0]
 8013fbe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013fc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013fc4:	f8cd 8008 	str.w	r8, [sp, #8]
 8013fc8:	9201      	str	r2, [sp, #4]
 8013fca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013fcc:	9200      	str	r2, [sp, #0]
 8013fce:	aa07      	add	r2, sp, #28
 8013fd0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8013fd2:	463b      	mov	r3, r7
 8013fd4:	47a0      	blx	r4
 8013fd6:	b017      	add	sp, #92	; 0x5c
 8013fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fdc <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8013fdc:	2000      	movs	r0, #0
 8013fde:	4770      	bx	lr

08013fe0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	b08d      	sub	sp, #52	; 0x34
 8013fe6:	4688      	mov	r8, r1
 8013fe8:	f8d3 c000 	ldr.w	ip, [r3]
 8013fec:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013fee:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8013ff2:	680f      	ldr	r7, [r1, #0]
 8013ff4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8013ff8:	eba7 070c 	sub.w	r7, r7, ip
 8013ffc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8014000:	edd3 6a07 	vldr	s13, [r3, #28]
 8014004:	42bc      	cmp	r4, r7
 8014006:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014008:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801400c:	bfa8      	it	ge
 801400e:	463c      	movge	r4, r7
 8014010:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014014:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014018:	ee07 4a90 	vmov	s15, r4
 801401c:	eb09 0e0c 	add.w	lr, r9, ip
 8014020:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8014024:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014028:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801402c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014030:	4571      	cmp	r1, lr
 8014032:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014036:	ee65 4a24 	vmul.f32	s9, s10, s9
 801403a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801403e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014042:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014046:	ee32 1a05 	vadd.f32	s2, s4, s10
 801404a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801404e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014052:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014056:	ee22 2a07 	vmul.f32	s4, s4, s14
 801405a:	f340 808c 	ble.w	8014176 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801405e:	eba1 060e 	sub.w	r6, r1, lr
 8014062:	fb96 f5f4 	sdiv	r5, r6, r4
 8014066:	ee07 5a10 	vmov	s14, r5
 801406a:	2d00      	cmp	r5, #0
 801406c:	fb04 6615 	mls	r6, r4, r5, r6
 8014070:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014074:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014078:	eee7 0a24 	vfma.f32	s1, s14, s9
 801407c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014080:	dd12      	ble.n	80140a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014082:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014086:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801408a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801408e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014096:	bf14      	ite	ne
 8014098:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801409c:	eeb0 7a67 	vmoveq.f32	s14, s15
 80140a0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80140a4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80140a8:	fb05 f204 	mul.w	r2, r5, r4
 80140ac:	1abf      	subs	r7, r7, r2
 80140ae:	4494      	add	ip, r2
 80140b0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80140b4:	4411      	add	r1, r2
 80140b6:	eb09 020c 	add.w	r2, r9, ip
 80140ba:	b209      	sxth	r1, r1
 80140bc:	443a      	add	r2, r7
 80140be:	428a      	cmp	r2, r1
 80140c0:	bfc4      	itt	gt
 80140c2:	eba1 0209 	subgt.w	r2, r1, r9
 80140c6:	eba2 070c 	subgt.w	r7, r2, ip
 80140ca:	2f00      	cmp	r7, #0
 80140cc:	dd50      	ble.n	8014170 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80140ce:	fb97 f1f4 	sdiv	r1, r7, r4
 80140d2:	fb04 7211 	mls	r2, r4, r1, r7
 80140d6:	b90a      	cbnz	r2, 80140dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80140d8:	3901      	subs	r1, #1
 80140da:	4622      	mov	r2, r4
 80140dc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80140e0:	6840      	ldr	r0, [r0, #4]
 80140e2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80140e6:	44b6      	add	lr, r6
 80140e8:	f8d0 a000 	ldr.w	sl, [r0]
 80140ec:	2900      	cmp	r1, #0
 80140ee:	bfcc      	ite	gt
 80140f0:	46a1      	movgt	r9, r4
 80140f2:	4691      	movle	r9, r2
 80140f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80140f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80140f8:	fb04 e505 	mla	r5, r4, r5, lr
 80140fc:	eef0 6a42 	vmov.f32	s13, s4
 8014100:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014104:	9008      	str	r0, [sp, #32]
 8014106:	eeb0 7a61 	vmov.f32	s14, s3
 801410a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801410c:	695b      	ldr	r3, [r3, #20]
 801410e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014112:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014116:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801411a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801411c:	445b      	add	r3, fp
 801411e:	9307      	str	r3, [sp, #28]
 8014120:	ee16 3a90 	vmov	r3, s13
 8014124:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014128:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801412c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014130:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014134:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014138:	ee17 7a90 	vmov	r7, s15
 801413c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014140:	fb97 f7f4 	sdiv	r7, r7, r4
 8014144:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014148:	ee17 ca90 	vmov	ip, s15
 801414c:	fb9c fcf4 	sdiv	ip, ip, r4
 8014150:	fb0c 3306 	mla	r3, ip, r6, r3
 8014154:	9302      	str	r3, [sp, #8]
 8014156:	ee17 3a10 	vmov	r3, s14
 801415a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801415e:	fb07 3706 	mla	r7, r7, r6, r3
 8014162:	eba9 0306 	sub.w	r3, r9, r6
 8014166:	e9cd 4700 	strd	r4, r7, [sp]
 801416a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801416e:	47a0      	blx	r4
 8014170:	b00d      	add	sp, #52	; 0x34
 8014172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014176:	2500      	movs	r5, #0
 8014178:	462e      	mov	r6, r5
 801417a:	e799      	b.n	80140b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801417c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014180:	b0db      	sub	sp, #364	; 0x16c
 8014182:	461d      	mov	r5, r3
 8014184:	4614      	mov	r4, r2
 8014186:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801418a:	910f      	str	r1, [sp, #60]	; 0x3c
 801418c:	4629      	mov	r1, r5
 801418e:	930a      	str	r3, [sp, #40]	; 0x28
 8014190:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014194:	9009      	str	r0, [sp, #36]	; 0x24
 8014196:	930b      	str	r3, [sp, #44]	; 0x2c
 8014198:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801419c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80141a0:	9310      	str	r3, [sp, #64]	; 0x40
 80141a2:	6803      	ldr	r3, [r0, #0]
 80141a4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80141a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80141aa:	47b8      	blx	r7
 80141ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ae:	6058      	str	r0, [r3, #4]
 80141b0:	2800      	cmp	r0, #0
 80141b2:	f000 83a1 	beq.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141b6:	682b      	ldr	r3, [r5, #0]
 80141b8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80141bc:	ed94 7a02 	vldr	s14, [r4, #8]
 80141c0:	9314      	str	r3, [sp, #80]	; 0x50
 80141c2:	686b      	ldr	r3, [r5, #4]
 80141c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141c8:	9315      	str	r3, [sp, #84]	; 0x54
 80141ca:	4bc1      	ldr	r3, [pc, #772]	; (80144d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80141cc:	7819      	ldrb	r1, [r3, #0]
 80141ce:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80141d2:	2900      	cmp	r1, #0
 80141d4:	bf16      	itet	ne
 80141d6:	4619      	movne	r1, r3
 80141d8:	4611      	moveq	r1, r2
 80141da:	4613      	movne	r3, r2
 80141dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e0:	9116      	str	r1, [sp, #88]	; 0x58
 80141e2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80141e6:	f240 8387 	bls.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141ea:	ed94 7a07 	vldr	s14, [r4, #28]
 80141ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f6:	f240 837f 	bls.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141fa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80141fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014206:	f240 8377 	bls.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801420a:	6822      	ldr	r2, [r4, #0]
 801420c:	4bb1      	ldr	r3, [pc, #708]	; (80144d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801420e:	429a      	cmp	r2, r3
 8014210:	f2c0 8372 	blt.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014214:	49b0      	ldr	r1, [pc, #704]	; (80144d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014216:	6963      	ldr	r3, [r4, #20]
 8014218:	428a      	cmp	r2, r1
 801421a:	f300 836d 	bgt.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801421e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014222:	48ae      	ldr	r0, [pc, #696]	; (80144dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014224:	33ff      	adds	r3, #255	; 0xff
 8014226:	4283      	cmp	r3, r0
 8014228:	f200 8366 	bhi.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801422c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801422e:	4dac      	ldr	r5, [pc, #688]	; (80144e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014230:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014234:	33ff      	adds	r3, #255	; 0xff
 8014236:	42ab      	cmp	r3, r5
 8014238:	f200 835e 	bhi.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801423c:	6862      	ldr	r2, [r4, #4]
 801423e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014242:	33ff      	adds	r3, #255	; 0xff
 8014244:	4283      	cmp	r3, r0
 8014246:	f200 8357 	bhi.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801424a:	69a1      	ldr	r1, [r4, #24]
 801424c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014250:	33ff      	adds	r3, #255	; 0xff
 8014252:	4283      	cmp	r3, r0
 8014254:	f200 8350 	bhi.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014258:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801425a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801425e:	30ff      	adds	r0, #255	; 0xff
 8014260:	42a8      	cmp	r0, r5
 8014262:	f200 8349 	bhi.w	80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014266:	428a      	cmp	r2, r1
 8014268:	f280 8110 	bge.w	801448c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801426c:	429a      	cmp	r2, r3
 801426e:	f300 8119 	bgt.w	80144a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014272:	4299      	cmp	r1, r3
 8014274:	f280 811d 	bge.w	80144b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014278:	2502      	movs	r5, #2
 801427a:	2701      	movs	r7, #1
 801427c:	46a9      	mov	r9, r5
 801427e:	46b8      	mov	r8, r7
 8014280:	f04f 0a00 	mov.w	sl, #0
 8014284:	4621      	mov	r1, r4
 8014286:	a849      	add	r0, sp, #292	; 0x124
 8014288:	f003 fc20 	bl	8017acc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801428c:	4622      	mov	r2, r4
 801428e:	4653      	mov	r3, sl
 8014290:	a949      	add	r1, sp, #292	; 0x124
 8014292:	f8cd 9000 	str.w	r9, [sp]
 8014296:	a819      	add	r0, sp, #100	; 0x64
 8014298:	f003 fd48 	bl	8017d2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801429c:	4622      	mov	r2, r4
 801429e:	4653      	mov	r3, sl
 80142a0:	a949      	add	r1, sp, #292	; 0x124
 80142a2:	f8cd 8000 	str.w	r8, [sp]
 80142a6:	a829      	add	r0, sp, #164	; 0xa4
 80142a8:	f003 fd40 	bl	8017d2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80142ac:	4643      	mov	r3, r8
 80142ae:	4622      	mov	r2, r4
 80142b0:	a949      	add	r1, sp, #292	; 0x124
 80142b2:	f8cd 9000 	str.w	r9, [sp]
 80142b6:	a839      	add	r0, sp, #228	; 0xe4
 80142b8:	f003 fd38 	bl	8017d2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80142bc:	42af      	cmp	r7, r5
 80142be:	af12      	add	r7, sp, #72	; 0x48
 80142c0:	bfb7      	itett	lt
 80142c2:	2300      	movlt	r3, #0
 80142c4:	2301      	movge	r3, #1
 80142c6:	ad29      	addlt	r5, sp, #164	; 0xa4
 80142c8:	ac19      	addlt	r4, sp, #100	; 0x64
 80142ca:	bfb1      	iteee	lt
 80142cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80142ce:	ad19      	addge	r5, sp, #100	; 0x64
 80142d0:	930e      	strge	r3, [sp, #56]	; 0x38
 80142d2:	ac29      	addge	r4, sp, #164	; 0xa4
 80142d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80142da:	e887 0003 	stmia.w	r7, {r0, r1}
 80142de:	b928      	cbnz	r0, 80142ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80142e0:	4b80      	ldr	r3, [pc, #512]	; (80144e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80142e2:	6818      	ldr	r0, [r3, #0]
 80142e4:	6803      	ldr	r3, [r0, #0]
 80142e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142e8:	4798      	blx	r3
 80142ea:	6038      	str	r0, [r7, #0]
 80142ec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80142ee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80142f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80142f6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80142f8:	930c      	str	r3, [sp, #48]	; 0x30
 80142fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80142fc:	6963      	ldr	r3, [r4, #20]
 80142fe:	440b      	add	r3, r1
 8014300:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014304:	4408      	add	r0, r1
 8014306:	b200      	sxth	r0, r0
 8014308:	4283      	cmp	r3, r0
 801430a:	900d      	str	r0, [sp, #52]	; 0x34
 801430c:	f280 80dd 	bge.w	80144ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014310:	428b      	cmp	r3, r1
 8014312:	da08      	bge.n	8014326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014314:	2a00      	cmp	r2, #0
 8014316:	dd06      	ble.n	8014326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014318:	1acb      	subs	r3, r1, r3
 801431a:	429a      	cmp	r2, r3
 801431c:	f2c0 80e4 	blt.w	80144e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014320:	2b00      	cmp	r3, #0
 8014322:	f300 80e2 	bgt.w	80144ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014326:	6967      	ldr	r7, [r4, #20]
 8014328:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801432c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801432e:	443b      	add	r3, r7
 8014330:	461f      	mov	r7, r3
 8014332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014334:	1bdf      	subs	r7, r3, r7
 8014336:	4297      	cmp	r7, r2
 8014338:	bfa8      	it	ge
 801433a:	4617      	movge	r7, r2
 801433c:	2f00      	cmp	r7, #0
 801433e:	f340 8166 	ble.w	801460e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014342:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014344:	6829      	ldr	r1, [r5, #0]
 8014346:	f9b3 2000 	ldrsh.w	r2, [r3]
 801434a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801434e:	4411      	add	r1, r2
 8014350:	6820      	ldr	r0, [r4, #0]
 8014352:	4299      	cmp	r1, r3
 8014354:	dd1a      	ble.n	801438c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014356:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801435a:	4402      	add	r2, r0
 801435c:	440b      	add	r3, r1
 801435e:	b21b      	sxth	r3, r3
 8014360:	429a      	cmp	r2, r3
 8014362:	dc13      	bgt.n	801438c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014366:	a912      	add	r1, sp, #72	; 0x48
 8014368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801436a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	9206      	str	r2, [sp, #24]
 8014370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014372:	9500      	str	r5, [sp, #0]
 8014374:	9205      	str	r2, [sp, #20]
 8014376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014378:	e9cd b203 	strd	fp, r2, [sp, #12]
 801437c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801437e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014382:	aa49      	add	r2, sp, #292	; 0x124
 8014384:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014388:	4623      	mov	r3, r4
 801438a:	47c8      	blx	r9
 801438c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014390:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014394:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014398:	ee37 7a27 	vadd.f32	s14, s14, s15
 801439c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80143a0:	68a1      	ldr	r1, [r4, #8]
 80143a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143a6:	ed94 6a08 	vldr	s12, [r4, #32]
 80143aa:	edd4 6a07 	vldr	s13, [r4, #28]
 80143ae:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80143b2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80143b6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80143ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80143be:	edc4 6a07 	vstr	s13, [r4, #28]
 80143c2:	441a      	add	r2, r3
 80143c4:	6963      	ldr	r3, [r4, #20]
 80143c6:	3301      	adds	r3, #1
 80143c8:	6022      	str	r2, [r4, #0]
 80143ca:	6163      	str	r3, [r4, #20]
 80143cc:	69a3      	ldr	r3, [r4, #24]
 80143ce:	3b01      	subs	r3, #1
 80143d0:	61a3      	str	r3, [r4, #24]
 80143d2:	6923      	ldr	r3, [r4, #16]
 80143d4:	440b      	add	r3, r1
 80143d6:	68e1      	ldr	r1, [r4, #12]
 80143d8:	428b      	cmp	r3, r1
 80143da:	6123      	str	r3, [r4, #16]
 80143dc:	db15      	blt.n	801440a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80143de:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80143e2:	3201      	adds	r2, #1
 80143e4:	1a5b      	subs	r3, r3, r1
 80143e6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80143ea:	6022      	str	r2, [r4, #0]
 80143ec:	6123      	str	r3, [r4, #16]
 80143ee:	edc4 6a07 	vstr	s13, [r4, #28]
 80143f2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80143f6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80143fa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80143fe:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014406:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801440a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801440e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014412:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014416:	ee37 7a27 	vadd.f32	s14, s14, s15
 801441a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801441e:	68a9      	ldr	r1, [r5, #8]
 8014420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014424:	ed95 6a08 	vldr	s12, [r5, #32]
 8014428:	edd5 6a07 	vldr	s13, [r5, #28]
 801442c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014430:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014434:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014438:	e9d5 2300 	ldrd	r2, r3, [r5]
 801443c:	edc5 6a07 	vstr	s13, [r5, #28]
 8014440:	441a      	add	r2, r3
 8014442:	696b      	ldr	r3, [r5, #20]
 8014444:	3301      	adds	r3, #1
 8014446:	602a      	str	r2, [r5, #0]
 8014448:	616b      	str	r3, [r5, #20]
 801444a:	69ab      	ldr	r3, [r5, #24]
 801444c:	3b01      	subs	r3, #1
 801444e:	61ab      	str	r3, [r5, #24]
 8014450:	692b      	ldr	r3, [r5, #16]
 8014452:	440b      	add	r3, r1
 8014454:	68e9      	ldr	r1, [r5, #12]
 8014456:	428b      	cmp	r3, r1
 8014458:	612b      	str	r3, [r5, #16]
 801445a:	db15      	blt.n	8014488 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801445c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014460:	3201      	adds	r2, #1
 8014462:	1a5b      	subs	r3, r3, r1
 8014464:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014468:	602a      	str	r2, [r5, #0]
 801446a:	612b      	str	r3, [r5, #16]
 801446c:	edc5 6a07 	vstr	s13, [r5, #28]
 8014470:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014474:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014478:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801447c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014484:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014488:	3f01      	subs	r7, #1
 801448a:	e757      	b.n	801433c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801448c:	4299      	cmp	r1, r3
 801448e:	dc13      	bgt.n	80144b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014490:	429a      	cmp	r2, r3
 8014492:	da14      	bge.n	80144be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014494:	2502      	movs	r5, #2
 8014496:	2703      	movs	r7, #3
 8014498:	f04f 0800 	mov.w	r8, #0
 801449c:	46a9      	mov	r9, r5
 801449e:	f04f 0a01 	mov.w	sl, #1
 80144a2:	e6ef      	b.n	8014284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80144a4:	2501      	movs	r5, #1
 80144a6:	2700      	movs	r7, #0
 80144a8:	46a9      	mov	r9, r5
 80144aa:	46b8      	mov	r8, r7
 80144ac:	f04f 0a02 	mov.w	sl, #2
 80144b0:	e6e8      	b.n	8014284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80144b2:	2501      	movs	r5, #1
 80144b4:	2702      	movs	r7, #2
 80144b6:	e6e1      	b.n	801427c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80144b8:	2500      	movs	r5, #0
 80144ba:	2701      	movs	r7, #1
 80144bc:	e7f4      	b.n	80144a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80144be:	2702      	movs	r7, #2
 80144c0:	2503      	movs	r5, #3
 80144c2:	f04f 0900 	mov.w	r9, #0
 80144c6:	46b8      	mov	r8, r7
 80144c8:	e7e9      	b.n	801449e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80144ca:	4613      	mov	r3, r2
 80144cc:	e728      	b.n	8014320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80144ce:	bf00      	nop
 80144d0:	2400c7ec 	.word	0x2400c7ec
 80144d4:	fffd8f01 	.word	0xfffd8f01
 80144d8:	00027100 	.word	0x00027100
 80144dc:	0004e1ff 	.word	0x0004e1ff
 80144e0:	0004e1fe 	.word	0x0004e1fe
 80144e4:	2400c7f4 	.word	0x2400c7f4
 80144e8:	4613      	mov	r3, r2
 80144ea:	992b      	ldr	r1, [sp, #172]	; 0xac
 80144ec:	469e      	mov	lr, r3
 80144ee:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80144f0:	469c      	mov	ip, r3
 80144f2:	9111      	str	r1, [sp, #68]	; 0x44
 80144f4:	f04f 0900 	mov.w	r9, #0
 80144f8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80144fc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014500:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014504:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014508:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801450c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014510:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014514:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014518:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801451c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014520:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8014524:	f1bc 0f00 	cmp.w	ip, #0
 8014528:	d147      	bne.n	80145ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801452a:	eb03 0c07 	add.w	ip, r3, r7
 801452e:	1ad7      	subs	r7, r2, r3
 8014530:	f1b9 0f00 	cmp.w	r9, #0
 8014534:	d009      	beq.n	801454a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8014536:	9029      	str	r0, [sp, #164]	; 0xa4
 8014538:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801453c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014540:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8014544:	912d      	str	r1, [sp, #180]	; 0xb4
 8014546:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801454a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801454c:	f04f 0800 	mov.w	r8, #0
 8014550:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014554:	9111      	str	r1, [sp, #68]	; 0x44
 8014556:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801455a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801455e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014562:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014566:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801456a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801456e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014572:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014576:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801457a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801457e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014582:	f1be 0f00 	cmp.w	lr, #0
 8014586:	d031      	beq.n	80145ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014588:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801458a:	4450      	add	r0, sl
 801458c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014590:	4431      	add	r1, r6
 8014592:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014596:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801459a:	4549      	cmp	r1, r9
 801459c:	db08      	blt.n	80145b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801459e:	ee77 7a85 	vadd.f32	s15, s15, s10
 80145a2:	3001      	adds	r0, #1
 80145a4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80145a8:	eba1 0109 	sub.w	r1, r1, r9
 80145ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80145b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80145b4:	f04f 0801 	mov.w	r8, #1
 80145b8:	e7e3      	b.n	8014582 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80145ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80145bc:	4450      	add	r0, sl
 80145be:	ee37 7a24 	vadd.f32	s14, s14, s9
 80145c2:	4431      	add	r1, r6
 80145c4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80145c8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80145cc:	4541      	cmp	r1, r8
 80145ce:	db08      	blt.n	80145e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80145d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80145d4:	3001      	adds	r0, #1
 80145d6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80145da:	eba1 0108 	sub.w	r1, r1, r8
 80145de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80145e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80145e6:	f04f 0901 	mov.w	r9, #1
 80145ea:	e79b      	b.n	8014524 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80145ec:	449c      	add	ip, r3
 80145ee:	1aff      	subs	r7, r7, r3
 80145f0:	f1b8 0f00 	cmp.w	r8, #0
 80145f4:	d009      	beq.n	801460a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80145f6:	9019      	str	r0, [sp, #100]	; 0x64
 80145f8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80145fc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014600:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014604:	911d      	str	r1, [sp, #116]	; 0x74
 8014606:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801460a:	1ad2      	subs	r2, r2, r3
 801460c:	e68b      	b.n	8014326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801460e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014610:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 80d1 	beq.w	80147ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014618:	ad19      	add	r5, sp, #100	; 0x64
 801461a:	ac39      	add	r4, sp, #228	; 0xe4
 801461c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801461e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014626:	930c      	str	r3, [sp, #48]	; 0x30
 8014628:	990c      	ldr	r1, [sp, #48]	; 0x30
 801462a:	6963      	ldr	r3, [r4, #20]
 801462c:	440b      	add	r3, r1
 801462e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014632:	4408      	add	r0, r1
 8014634:	b200      	sxth	r0, r0
 8014636:	4283      	cmp	r3, r0
 8014638:	900d      	str	r0, [sp, #52]	; 0x34
 801463a:	f280 80c1 	bge.w	80147c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801463e:	428b      	cmp	r3, r1
 8014640:	da08      	bge.n	8014654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014642:	2a00      	cmp	r2, #0
 8014644:	dd06      	ble.n	8014654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014646:	1acb      	subs	r3, r1, r3
 8014648:	429a      	cmp	r2, r3
 801464a:	f2c0 80bb 	blt.w	80147c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801464e:	2b00      	cmp	r3, #0
 8014650:	f300 80b9 	bgt.w	80147c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8014654:	6967      	ldr	r7, [r4, #20]
 8014656:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801465a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801465c:	443b      	add	r3, r7
 801465e:	461f      	mov	r7, r3
 8014660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014662:	1bdf      	subs	r7, r3, r7
 8014664:	4297      	cmp	r7, r2
 8014666:	bfa8      	it	ge
 8014668:	4617      	movge	r7, r2
 801466a:	2f00      	cmp	r7, #0
 801466c:	f340 813c 	ble.w	80148e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014670:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014672:	6829      	ldr	r1, [r5, #0]
 8014674:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014678:	f9bb 3000 	ldrsh.w	r3, [fp]
 801467c:	4411      	add	r1, r2
 801467e:	6820      	ldr	r0, [r4, #0]
 8014680:	4299      	cmp	r1, r3
 8014682:	dd1a      	ble.n	80146ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014684:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014688:	4402      	add	r2, r0
 801468a:	440b      	add	r3, r1
 801468c:	b21b      	sxth	r3, r3
 801468e:	429a      	cmp	r2, r3
 8014690:	dc13      	bgt.n	80146ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014692:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014694:	a912      	add	r1, sp, #72	; 0x48
 8014696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014698:	9809      	ldr	r0, [sp, #36]	; 0x24
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	9206      	str	r2, [sp, #24]
 801469e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80146a0:	9500      	str	r5, [sp, #0]
 80146a2:	9205      	str	r2, [sp, #20]
 80146a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146a6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80146aa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80146ac:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80146b0:	aa49      	add	r2, sp, #292	; 0x124
 80146b2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80146b6:	4623      	mov	r3, r4
 80146b8:	47c8      	blx	r9
 80146ba:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80146be:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80146c2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80146c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80146ca:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80146ce:	68a1      	ldr	r1, [r4, #8]
 80146d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146d4:	ed94 6a08 	vldr	s12, [r4, #32]
 80146d8:	edd4 6a07 	vldr	s13, [r4, #28]
 80146dc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80146e0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80146e4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80146e8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80146ec:	edc4 6a07 	vstr	s13, [r4, #28]
 80146f0:	441a      	add	r2, r3
 80146f2:	6963      	ldr	r3, [r4, #20]
 80146f4:	3301      	adds	r3, #1
 80146f6:	6022      	str	r2, [r4, #0]
 80146f8:	6163      	str	r3, [r4, #20]
 80146fa:	69a3      	ldr	r3, [r4, #24]
 80146fc:	3b01      	subs	r3, #1
 80146fe:	61a3      	str	r3, [r4, #24]
 8014700:	6923      	ldr	r3, [r4, #16]
 8014702:	440b      	add	r3, r1
 8014704:	68e1      	ldr	r1, [r4, #12]
 8014706:	428b      	cmp	r3, r1
 8014708:	6123      	str	r3, [r4, #16]
 801470a:	db15      	blt.n	8014738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801470c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014710:	3201      	adds	r2, #1
 8014712:	1a5b      	subs	r3, r3, r1
 8014714:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014718:	6022      	str	r2, [r4, #0]
 801471a:	6123      	str	r3, [r4, #16]
 801471c:	edc4 6a07 	vstr	s13, [r4, #28]
 8014720:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014724:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014728:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801472c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014734:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014738:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801473c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014740:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014748:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801474c:	68a9      	ldr	r1, [r5, #8]
 801474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014752:	ed95 6a08 	vldr	s12, [r5, #32]
 8014756:	edd5 6a07 	vldr	s13, [r5, #28]
 801475a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801475e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014762:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014766:	e9d5 2300 	ldrd	r2, r3, [r5]
 801476a:	edc5 6a07 	vstr	s13, [r5, #28]
 801476e:	441a      	add	r2, r3
 8014770:	696b      	ldr	r3, [r5, #20]
 8014772:	3301      	adds	r3, #1
 8014774:	602a      	str	r2, [r5, #0]
 8014776:	616b      	str	r3, [r5, #20]
 8014778:	69ab      	ldr	r3, [r5, #24]
 801477a:	3b01      	subs	r3, #1
 801477c:	61ab      	str	r3, [r5, #24]
 801477e:	692b      	ldr	r3, [r5, #16]
 8014780:	440b      	add	r3, r1
 8014782:	68e9      	ldr	r1, [r5, #12]
 8014784:	428b      	cmp	r3, r1
 8014786:	612b      	str	r3, [r5, #16]
 8014788:	db15      	blt.n	80147b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801478a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801478e:	3201      	adds	r2, #1
 8014790:	1a5b      	subs	r3, r3, r1
 8014792:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014796:	602a      	str	r2, [r5, #0]
 8014798:	612b      	str	r3, [r5, #16]
 801479a:	edc5 6a07 	vstr	s13, [r5, #28]
 801479e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80147a2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80147a6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80147aa:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80147ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147b2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80147b6:	3f01      	subs	r7, #1
 80147b8:	e757      	b.n	801466a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80147ba:	ad39      	add	r5, sp, #228	; 0xe4
 80147bc:	ac19      	add	r4, sp, #100	; 0x64
 80147be:	e72d      	b.n	801461c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80147c0:	4613      	mov	r3, r2
 80147c2:	e744      	b.n	801464e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80147c4:	4613      	mov	r3, r2
 80147c6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80147c8:	469e      	mov	lr, r3
 80147ca:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80147ce:	461f      	mov	r7, r3
 80147d0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80147d4:	f04f 0900 	mov.w	r9, #0
 80147d8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80147dc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80147e0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80147e4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80147e8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80147ec:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80147ee:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80147f2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80147f6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80147fa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80147fe:	960e      	str	r6, [sp, #56]	; 0x38
 8014800:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8014804:	2f00      	cmp	r7, #0
 8014806:	d146      	bne.n	8014896 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014808:	449c      	add	ip, r3
 801480a:	1ad7      	subs	r7, r2, r3
 801480c:	f1b9 0f00 	cmp.w	r9, #0
 8014810:	d009      	beq.n	8014826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8014812:	9039      	str	r0, [sp, #228]	; 0xe4
 8014814:	913d      	str	r1, [sp, #244]	; 0xf4
 8014816:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801481a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801481e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8014822:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8014826:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014828:	f04f 0800 	mov.w	r8, #0
 801482c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014830:	910e      	str	r1, [sp, #56]	; 0x38
 8014832:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014836:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801483a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801483e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014842:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014846:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801484a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801484e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014852:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014856:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801485a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801485e:	f1be 0f00 	cmp.w	lr, #0
 8014862:	d030      	beq.n	80148c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8014864:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014866:	4450      	add	r0, sl
 8014868:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801486c:	4431      	add	r1, r6
 801486e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014872:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014876:	4549      	cmp	r1, r9
 8014878:	db08      	blt.n	801488c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801487a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801487e:	3001      	adds	r0, #1
 8014880:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014884:	eba1 0109 	sub.w	r1, r1, r9
 8014888:	ee37 7a06 	vadd.f32	s14, s14, s12
 801488c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014890:	f04f 0801 	mov.w	r8, #1
 8014894:	e7e3      	b.n	801485e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8014896:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014898:	4450      	add	r0, sl
 801489a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801489e:	4431      	add	r1, r6
 80148a0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80148a4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80148a8:	4541      	cmp	r1, r8
 80148aa:	db08      	blt.n	80148be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80148ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 80148b0:	3001      	adds	r0, #1
 80148b2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80148b6:	eba1 0108 	sub.w	r1, r1, r8
 80148ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80148be:	3f01      	subs	r7, #1
 80148c0:	f04f 0901 	mov.w	r9, #1
 80148c4:	e79e      	b.n	8014804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80148c6:	449c      	add	ip, r3
 80148c8:	1aff      	subs	r7, r7, r3
 80148ca:	f1b8 0f00 	cmp.w	r8, #0
 80148ce:	d009      	beq.n	80148e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80148d0:	9019      	str	r0, [sp, #100]	; 0x64
 80148d2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80148d6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80148da:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80148de:	911d      	str	r1, [sp, #116]	; 0x74
 80148e0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80148e4:	1ad2      	subs	r2, r2, r3
 80148e6:	e6b5      	b.n	8014654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80148e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	b923      	cbnz	r3, 80148f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80148ee:	4b04      	ldr	r3, [pc, #16]	; (8014900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80148f0:	6818      	ldr	r0, [r3, #0]
 80148f2:	6803      	ldr	r3, [r0, #0]
 80148f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148f6:	4798      	blx	r3
 80148f8:	b05b      	add	sp, #364	; 0x16c
 80148fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148fe:	bf00      	nop
 8014900:	2400c7f4 	.word	0x2400c7f4

08014904 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8014904:	b570      	push	{r4, r5, r6, lr}
 8014906:	4604      	mov	r4, r0
 8014908:	2500      	movs	r5, #0
 801490a:	9804      	ldr	r0, [sp, #16]
 801490c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8014910:	8025      	strh	r5, [r4, #0]
 8014912:	6061      	str	r1, [r4, #4]
 8014914:	7223      	strb	r3, [r4, #8]
 8014916:	7266      	strb	r6, [r4, #9]
 8014918:	60e0      	str	r0, [r4, #12]
 801491a:	8222      	strh	r2, [r4, #16]
 801491c:	8265      	strh	r5, [r4, #18]
 801491e:	82a5      	strh	r5, [r4, #20]
 8014920:	82e5      	strh	r5, [r4, #22]
 8014922:	8325      	strh	r5, [r4, #24]
 8014924:	8365      	strh	r5, [r4, #26]
 8014926:	83a5      	strh	r5, [r4, #28]
 8014928:	77a5      	strb	r5, [r4, #30]
 801492a:	b32e      	cbz	r6, 8014978 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801492c:	6803      	ldr	r3, [r0, #0]
 801492e:	695b      	ldr	r3, [r3, #20]
 8014930:	4798      	blx	r3
 8014932:	4606      	mov	r6, r0
 8014934:	b300      	cbz	r0, 8014978 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8014936:	68e0      	ldr	r0, [r4, #12]
 8014938:	4631      	mov	r1, r6
 801493a:	6803      	ldr	r3, [r0, #0]
 801493c:	68db      	ldr	r3, [r3, #12]
 801493e:	4798      	blx	r3
 8014940:	4605      	mov	r5, r0
 8014942:	b1c8      	cbz	r0, 8014978 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8014944:	7b43      	ldrb	r3, [r0, #13]
 8014946:	7a82      	ldrb	r2, [r0, #10]
 8014948:	005b      	lsls	r3, r3, #1
 801494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801494e:	4313      	orrs	r3, r2
 8014950:	83a3      	strh	r3, [r4, #28]
 8014952:	7a63      	ldrb	r3, [r4, #9]
 8014954:	2b04      	cmp	r3, #4
 8014956:	d10f      	bne.n	8014978 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8014958:	68e0      	ldr	r0, [r4, #12]
 801495a:	462a      	mov	r2, r5
 801495c:	4631      	mov	r1, r6
 801495e:	6803      	ldr	r3, [r0, #0]
 8014960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014962:	4798      	blx	r3
 8014964:	7b6b      	ldrb	r3, [r5, #13]
 8014966:	005b      	lsls	r3, r3, #1
 8014968:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801496c:	7aab      	ldrb	r3, [r5, #10]
 801496e:	4313      	orrs	r3, r2
 8014970:	4418      	add	r0, r3
 8014972:	8ba3      	ldrh	r3, [r4, #28]
 8014974:	4418      	add	r0, r3
 8014976:	83a0      	strh	r0, [r4, #28]
 8014978:	4620      	mov	r0, r4
 801497a:	bd70      	pop	{r4, r5, r6, pc}

0801497c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014980:	2400      	movs	r4, #0
 8014982:	b085      	sub	sp, #20
 8014984:	4681      	mov	r9, r0
 8014986:	4688      	mov	r8, r1
 8014988:	4692      	mov	sl, r2
 801498a:	469b      	mov	fp, r3
 801498c:	4627      	mov	r7, r4
 801498e:	4625      	mov	r5, r4
 8014990:	4626      	mov	r6, r4
 8014992:	4554      	cmp	r4, sl
 8014994:	da2a      	bge.n	80149ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014996:	2300      	movs	r3, #0
 8014998:	9303      	str	r3, [sp, #12]
 801499a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801499e:	429d      	cmp	r5, r3
 80149a0:	d004      	beq.n	80149ac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80149a2:	f242 030b 	movw	r3, #8203	; 0x200b
 80149a6:	429d      	cmp	r5, r3
 80149a8:	bf18      	it	ne
 80149aa:	462f      	movne	r7, r5
 80149ac:	ab03      	add	r3, sp, #12
 80149ae:	4642      	mov	r2, r8
 80149b0:	4659      	mov	r1, fp
 80149b2:	4648      	mov	r0, r9
 80149b4:	f002 fea0 	bl	80176f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80149b8:	4605      	mov	r5, r0
 80149ba:	b1b8      	cbz	r0, 80149ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80149bc:	280a      	cmp	r0, #10
 80149be:	d015      	beq.n	80149ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80149c0:	9a03      	ldr	r2, [sp, #12]
 80149c2:	b18a      	cbz	r2, 80149e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80149c4:	7b50      	ldrb	r0, [r2, #13]
 80149c6:	4639      	mov	r1, r7
 80149c8:	7a93      	ldrb	r3, [r2, #10]
 80149ca:	0040      	lsls	r0, r0, #1
 80149cc:	8895      	ldrh	r5, [r2, #4]
 80149ce:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80149d2:	4303      	orrs	r3, r0
 80149d4:	4640      	mov	r0, r8
 80149d6:	9301      	str	r3, [sp, #4]
 80149d8:	f8d8 3000 	ldr.w	r3, [r8]
 80149dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149de:	4798      	blx	r3
 80149e0:	9b01      	ldr	r3, [sp, #4]
 80149e2:	4418      	add	r0, r3
 80149e4:	4406      	add	r6, r0
 80149e6:	b2b6      	uxth	r6, r6
 80149e8:	3401      	adds	r4, #1
 80149ea:	e7d2      	b.n	8014992 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80149ec:	4630      	mov	r0, r6
 80149ee:	b005      	add	sp, #20
 80149f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080149f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80149f4:	2a02      	cmp	r2, #2
 80149f6:	b530      	push	{r4, r5, lr}
 80149f8:	d011      	beq.n	8014a1e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80149fa:	2a03      	cmp	r2, #3
 80149fc:	d01c      	beq.n	8014a38 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80149fe:	2a01      	cmp	r2, #1
 8014a00:	d10c      	bne.n	8014a1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014a02:	888b      	ldrh	r3, [r1, #4]
 8014a04:	8801      	ldrh	r1, [r0, #0]
 8014a06:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014a0a:	1a5b      	subs	r3, r3, r1
 8014a0c:	8844      	ldrh	r4, [r0, #2]
 8014a0e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014a12:	1a9b      	subs	r3, r3, r2
 8014a14:	8004      	strh	r4, [r0, #0]
 8014a16:	8081      	strh	r1, [r0, #4]
 8014a18:	8043      	strh	r3, [r0, #2]
 8014a1a:	80c2      	strh	r2, [r0, #6]
 8014a1c:	bd30      	pop	{r4, r5, pc}
 8014a1e:	88cb      	ldrh	r3, [r1, #6]
 8014a20:	8842      	ldrh	r2, [r0, #2]
 8014a22:	1a9b      	subs	r3, r3, r2
 8014a24:	88c2      	ldrh	r2, [r0, #6]
 8014a26:	1a9b      	subs	r3, r3, r2
 8014a28:	888a      	ldrh	r2, [r1, #4]
 8014a2a:	8801      	ldrh	r1, [r0, #0]
 8014a2c:	8043      	strh	r3, [r0, #2]
 8014a2e:	1a52      	subs	r2, r2, r1
 8014a30:	8881      	ldrh	r1, [r0, #4]
 8014a32:	1a52      	subs	r2, r2, r1
 8014a34:	8002      	strh	r2, [r0, #0]
 8014a36:	e7f1      	b.n	8014a1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014a38:	88cb      	ldrh	r3, [r1, #6]
 8014a3a:	8841      	ldrh	r1, [r0, #2]
 8014a3c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014a40:	1a5b      	subs	r3, r3, r1
 8014a42:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014a46:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014a4a:	1a9b      	subs	r3, r3, r2
 8014a4c:	8045      	strh	r5, [r0, #2]
 8014a4e:	8082      	strh	r2, [r0, #4]
 8014a50:	8003      	strh	r3, [r0, #0]
 8014a52:	80c4      	strh	r4, [r0, #6]
 8014a54:	e7e2      	b.n	8014a1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08014a56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014a56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a5a:	b09f      	sub	sp, #124	; 0x7c
 8014a5c:	9116      	str	r1, [sp, #88]	; 0x58
 8014a5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a60:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014a62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014a64:	8809      	ldrh	r1, [r1, #0]
 8014a66:	889b      	ldrh	r3, [r3, #4]
 8014a68:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8014a6c:	440b      	add	r3, r1
 8014a6e:	9212      	str	r2, [sp, #72]	; 0x48
 8014a70:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8014a74:	b21b      	sxth	r3, r3
 8014a76:	9011      	str	r0, [sp, #68]	; 0x44
 8014a78:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8014a7c:	9310      	str	r3, [sp, #64]	; 0x40
 8014a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8014a82:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8014a86:	7a59      	ldrb	r1, [r3, #9]
 8014a88:	7a1b      	ldrb	r3, [r3, #8]
 8014a8a:	9114      	str	r1, [sp, #80]	; 0x50
 8014a8c:	9315      	str	r3, [sp, #84]	; 0x54
 8014a8e:	2a00      	cmp	r2, #0
 8014a90:	d06a      	beq.n	8014b68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8014a92:	f898 3010 	ldrb.w	r3, [r8, #16]
 8014a96:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014a98:	2b04      	cmp	r3, #4
 8014a9a:	bf14      	ite	ne
 8014a9c:	2301      	movne	r3, #1
 8014a9e:	2302      	moveq	r3, #2
 8014aa0:	4413      	add	r3, r2
 8014aa2:	f04f 0900 	mov.w	r9, #0
 8014aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014aa8:	464c      	mov	r4, r9
 8014aaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014aae:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8014ab2:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8014ab6:	4293      	cmp	r3, r2
 8014ab8:	f280 808f 	bge.w	8014bda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014abc:	2300      	movs	r3, #0
 8014abe:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8014ac2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8014ac6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014aca:	429c      	cmp	r4, r3
 8014acc:	d006      	beq.n	8014adc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8014ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ad0:	f242 020b 	movw	r2, #8203	; 0x200b
 8014ad4:	4294      	cmp	r4, r2
 8014ad6:	bf18      	it	ne
 8014ad8:	4623      	movne	r3, r4
 8014ada:	930d      	str	r3, [sp, #52]	; 0x34
 8014adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ade:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8014ae0:	f8d8 2000 	ldr.w	r2, [r8]
 8014ae4:	428b      	cmp	r3, r1
 8014ae6:	db41      	blt.n	8014b6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8014ae8:	6813      	ldr	r3, [r2, #0]
 8014aea:	4610      	mov	r0, r2
 8014aec:	695b      	ldr	r3, [r3, #20]
 8014aee:	4798      	blx	r3
 8014af0:	4604      	mov	r4, r0
 8014af2:	f8d8 0000 	ldr.w	r0, [r8]
 8014af6:	aa1d      	add	r2, sp, #116	; 0x74
 8014af8:	4621      	mov	r1, r4
 8014afa:	6803      	ldr	r3, [r0, #0]
 8014afc:	689e      	ldr	r6, [r3, #8]
 8014afe:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014b02:	47b0      	blx	r6
 8014b04:	901c      	str	r0, [sp, #112]	; 0x70
 8014b06:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014b0a:	429c      	cmp	r4, r3
 8014b0c:	f000 80ea 	beq.w	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014b10:	f242 030b 	movw	r3, #8203	; 0x200b
 8014b14:	429c      	cmp	r4, r3
 8014b16:	f000 80e5 	beq.w	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014b1a:	2c00      	cmp	r4, #0
 8014b1c:	f000 80f7 	beq.w	8014d0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8014b20:	2c0a      	cmp	r4, #10
 8014b22:	d060      	beq.n	8014be6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014b24:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014b26:	b36a      	cbz	r2, 8014b84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8014b28:	8894      	ldrh	r4, [r2, #4]
 8014b2a:	f1bb 0f00 	cmp.w	fp, #0
 8014b2e:	d03b      	beq.n	8014ba8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8014b30:	f892 900d 	ldrb.w	r9, [r2, #13]
 8014b34:	f1bb 0f01 	cmp.w	fp, #1
 8014b38:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8014b3c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8014b40:	f892 900a 	ldrb.w	r9, [r2, #10]
 8014b44:	ea49 0903 	orr.w	r9, r9, r3
 8014b48:	d134      	bne.n	8014bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8014b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b4c:	eba5 0509 	sub.w	r5, r5, r9
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d14f      	bne.n	8014bf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014b54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b56:	eb09 0305 	add.w	r3, r9, r5
 8014b5a:	4413      	add	r3, r2
 8014b5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014b5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014b62:	4293      	cmp	r3, r2
 8014b64:	da51      	bge.n	8014c0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014b66:	e038      	b.n	8014bda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014b68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014b6a:	e79a      	b.n	8014aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8014b6c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014b70:	4659      	mov	r1, fp
 8014b72:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014b74:	9301      	str	r3, [sp, #4]
 8014b76:	ab1d      	add	r3, sp, #116	; 0x74
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	ab1c      	add	r3, sp, #112	; 0x70
 8014b7c:	f002 fe05 	bl	801778a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014b80:	4604      	mov	r4, r0
 8014b82:	e7c0      	b.n	8014b06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8014b84:	f8d8 0000 	ldr.w	r0, [r8]
 8014b88:	6803      	ldr	r3, [r0, #0]
 8014b8a:	691b      	ldr	r3, [r3, #16]
 8014b8c:	4798      	blx	r3
 8014b8e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014b92:	4298      	cmp	r0, r3
 8014b94:	f000 80a6 	beq.w	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014b98:	f242 030b 	movw	r3, #8203	; 0x200b
 8014b9c:	4298      	cmp	r0, r3
 8014b9e:	f000 80a1 	beq.w	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014ba2:	f1bb 0f00 	cmp.w	fp, #0
 8014ba6:	d100      	bne.n	8014baa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014ba8:	444d      	add	r5, r9
 8014baa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014bac:	2a00      	cmp	r2, #0
 8014bae:	d1bf      	bne.n	8014b30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014bb0:	4691      	mov	r9, r2
 8014bb2:	e097      	b.n	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	f000 80ab 	beq.w	8014d12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8014bbc:	f1bb 0f00 	cmp.w	fp, #0
 8014bc0:	d118      	bne.n	8014bf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014bc2:	f8d8 0000 	ldr.w	r0, [r8]
 8014bc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014bc8:	6803      	ldr	r3, [r0, #0]
 8014bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bcc:	4798      	blx	r3
 8014bce:	4405      	add	r5, r0
 8014bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014bd4:	1aeb      	subs	r3, r5, r3
 8014bd6:	4293      	cmp	r3, r2
 8014bd8:	dd17      	ble.n	8014c0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014bda:	2c00      	cmp	r4, #0
 8014bdc:	f000 8097 	beq.w	8014d0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8014be0:	2c0a      	cmp	r4, #10
 8014be2:	f040 8085 	bne.w	8014cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8014be6:	240a      	movs	r4, #10
 8014be8:	fab4 f084 	clz	r0, r4
 8014bec:	0940      	lsrs	r0, r0, #5
 8014bee:	b01f      	add	sp, #124	; 0x7c
 8014bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf4:	f8d8 0000 	ldr.w	r0, [r8]
 8014bf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014bfa:	6803      	ldr	r3, [r0, #0]
 8014bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bfe:	4798      	blx	r3
 8014c00:	f1bb 0f01 	cmp.w	fp, #1
 8014c04:	eba5 0500 	sub.w	r5, r5, r0
 8014c08:	d0a4      	beq.n	8014b54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8014c0a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014c0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014c0e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014c12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014c16:	7b43      	ldrb	r3, [r0, #13]
 8014c18:	4429      	add	r1, r5
 8014c1a:	015b      	lsls	r3, r3, #5
 8014c1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c20:	7983      	ldrb	r3, [r0, #6]
 8014c22:	4313      	orrs	r3, r2
 8014c24:	440b      	add	r3, r1
 8014c26:	42b3      	cmp	r3, r6
 8014c28:	db5c      	blt.n	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014c2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c2c:	4299      	cmp	r1, r3
 8014c2e:	da59      	bge.n	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014c30:	f8d8 0000 	ldr.w	r0, [r8]
 8014c34:	42ae      	cmp	r6, r5
 8014c36:	6803      	ldr	r3, [r0, #0]
 8014c38:	bfcc      	ite	gt
 8014c3a:	1b76      	subgt	r6, r6, r5
 8014c3c:	2600      	movle	r6, #0
 8014c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c40:	bfc8      	it	gt
 8014c42:	b2b6      	uxthgt	r6, r6
 8014c44:	4798      	blx	r3
 8014c46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014c48:	7b5a      	ldrb	r2, [r3, #13]
 8014c4a:	00d1      	lsls	r1, r2, #3
 8014c4c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8014c50:	7a19      	ldrb	r1, [r3, #8]
 8014c52:	4339      	orrs	r1, r7
 8014c54:	0657      	lsls	r7, r2, #25
 8014c56:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8014c58:	bf48      	it	mi
 8014c5a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8014c5e:	4407      	add	r7, r0
 8014c60:	bf48      	it	mi
 8014c62:	b209      	sxthmi	r1, r1
 8014c64:	1a7f      	subs	r7, r7, r1
 8014c66:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014c68:	b2bf      	uxth	r7, r7
 8014c6a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014c6e:	fa0f fa87 	sxth.w	sl, r7
 8014c72:	4551      	cmp	r1, sl
 8014c74:	dd3a      	ble.n	8014cec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8014c76:	0112      	lsls	r2, r2, #4
 8014c78:	79d8      	ldrb	r0, [r3, #7]
 8014c7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014c7e:	4302      	orrs	r2, r0
 8014c80:	4492      	add	sl, r2
 8014c82:	4551      	cmp	r1, sl
 8014c84:	dc2e      	bgt.n	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014c86:	1bcf      	subs	r7, r1, r7
 8014c88:	468a      	mov	sl, r1
 8014c8a:	b2bf      	uxth	r7, r7
 8014c8c:	9319      	str	r3, [sp, #100]	; 0x64
 8014c8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c90:	f8d8 0000 	ldr.w	r0, [r8]
 8014c94:	681a      	ldr	r2, [r3, #0]
 8014c96:	6801      	ldr	r1, [r0, #0]
 8014c98:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014c9a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014c9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c9e:	9218      	str	r2, [sp, #96]	; 0x60
 8014ca0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014ca2:	4788      	blx	r1
 8014ca4:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014ca8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014caa:	910b      	str	r1, [sp, #44]	; 0x2c
 8014cac:	f898 100e 	ldrb.w	r1, [r8, #14]
 8014cb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014cb2:	910a      	str	r1, [sp, #40]	; 0x28
 8014cb4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8014cb8:	9109      	str	r1, [sp, #36]	; 0x24
 8014cba:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014cbe:	9305      	str	r3, [sp, #20]
 8014cc0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014cc2:	9206      	str	r2, [sp, #24]
 8014cc4:	e9cd a601 	strd	sl, r6, [sp, #4]
 8014cc8:	442e      	add	r6, r5
 8014cca:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8014cce:	b236      	sxth	r6, r6
 8014cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cd2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014cd6:	9600      	str	r6, [sp, #0]
 8014cd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014cda:	681a      	ldr	r2, [r3, #0]
 8014cdc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014ce2:	47b0      	blx	r6
 8014ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8014cea:	e6e2      	b.n	8014ab2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8014cec:	2700      	movs	r7, #0
 8014cee:	e7cd      	b.n	8014c8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8014cf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014cf2:	3501      	adds	r5, #1
 8014cf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014cf6:	429d      	cmp	r5, r3
 8014cf8:	f6bf af76 	bge.w	8014be8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014cfc:	4659      	mov	r1, fp
 8014cfe:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014d00:	f7ef fa6e 	bl	80041e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014d04:	4604      	mov	r4, r0
 8014d06:	b110      	cbz	r0, 8014d0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8014d08:	280a      	cmp	r0, #10
 8014d0a:	d1f2      	bne.n	8014cf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8014d0c:	e76b      	b.n	8014be6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014d0e:	2400      	movs	r4, #0
 8014d10:	e76a      	b.n	8014be8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014d12:	f1bb 0f00 	cmp.w	fp, #0
 8014d16:	f43f af5b 	beq.w	8014bd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8014d1a:	e776      	b.n	8014c0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08014d1c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8014d1c:	b530      	push	{r4, r5, lr}
 8014d1e:	8a44      	ldrh	r4, [r0, #18]
 8014d20:	8ac5      	ldrh	r5, [r0, #22]
 8014d22:	82c3      	strh	r3, [r0, #22]
 8014d24:	442c      	add	r4, r5
 8014d26:	1ae4      	subs	r4, r4, r3
 8014d28:	8b03      	ldrh	r3, [r0, #24]
 8014d2a:	8244      	strh	r4, [r0, #18]
 8014d2c:	8a84      	ldrh	r4, [r0, #20]
 8014d2e:	4422      	add	r2, r4
 8014d30:	440c      	add	r4, r1
 8014d32:	1a59      	subs	r1, r3, r1
 8014d34:	8342      	strh	r2, [r0, #26]
 8014d36:	8284      	strh	r4, [r0, #20]
 8014d38:	8301      	strh	r1, [r0, #24]
 8014d3a:	bd30      	pop	{r4, r5, pc}

08014d3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8014d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d40:	7a43      	ldrb	r3, [r0, #9]
 8014d42:	b087      	sub	sp, #28
 8014d44:	4604      	mov	r4, r0
 8014d46:	460f      	mov	r7, r1
 8014d48:	1eda      	subs	r2, r3, #3
 8014d4a:	b2d2      	uxtb	r2, r2
 8014d4c:	2900      	cmp	r1, #0
 8014d4e:	d036      	beq.n	8014dbe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8014d50:	2a01      	cmp	r2, #1
 8014d52:	d932      	bls.n	8014dba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8014d54:	1e58      	subs	r0, r3, #1
 8014d56:	f1d0 0b00 	rsbs	fp, r0, #0
 8014d5a:	eb4b 0b00 	adc.w	fp, fp, r0
 8014d5e:	1e99      	subs	r1, r3, #2
 8014d60:	424b      	negs	r3, r1
 8014d62:	414b      	adcs	r3, r1
 8014d64:	9303      	str	r3, [sp, #12]
 8014d66:	2300      	movs	r3, #0
 8014d68:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8014d6c:	2500      	movs	r5, #0
 8014d6e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8014d72:	46a9      	mov	r9, r5
 8014d74:	8265      	strh	r5, [r4, #18]
 8014d76:	82a5      	strh	r5, [r4, #20]
 8014d78:	2300      	movs	r3, #0
 8014d7a:	9305      	str	r3, [sp, #20]
 8014d7c:	8823      	ldrh	r3, [r4, #0]
 8014d7e:	2b20      	cmp	r3, #32
 8014d80:	d02b      	beq.n	8014dda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8014d82:	eba3 020a 	sub.w	r2, r3, sl
 8014d86:	4256      	negs	r6, r2
 8014d88:	4156      	adcs	r6, r2
 8014d8a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	d004      	beq.n	8014d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8014d92:	4553      	cmp	r3, sl
 8014d94:	bf16      	itet	ne
 8014d96:	4699      	movne	r9, r3
 8014d98:	2601      	moveq	r6, #1
 8014d9a:	2600      	movne	r6, #0
 8014d9c:	ab05      	add	r3, sp, #20
 8014d9e:	68e2      	ldr	r2, [r4, #12]
 8014da0:	7a21      	ldrb	r1, [r4, #8]
 8014da2:	6860      	ldr	r0, [r4, #4]
 8014da4:	f002 fca8 	bl	80176f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014da8:	8020      	strh	r0, [r4, #0]
 8014daa:	b9c8      	cbnz	r0, 8014de0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8014dac:	8b22      	ldrh	r2, [r4, #24]
 8014dae:	2300      	movs	r3, #0
 8014db0:	4611      	mov	r1, r2
 8014db2:	4620      	mov	r0, r4
 8014db4:	f7ff ffb2 	bl	8014d1c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8014db8:	e066      	b.n	8014e88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8014dba:	468b      	mov	fp, r1
 8014dbc:	e7cf      	b.n	8014d5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8014dbe:	3b01      	subs	r3, #1
 8014dc0:	2a01      	cmp	r2, #1
 8014dc2:	9103      	str	r1, [sp, #12]
 8014dc4:	468b      	mov	fp, r1
 8014dc6:	bf8c      	ite	hi
 8014dc8:	2200      	movhi	r2, #0
 8014dca:	2201      	movls	r2, #1
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	9202      	str	r2, [sp, #8]
 8014dd0:	bf8c      	ite	hi
 8014dd2:	2300      	movhi	r3, #0
 8014dd4:	2301      	movls	r3, #1
 8014dd6:	9301      	str	r3, [sp, #4]
 8014dd8:	e7c8      	b.n	8014d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8014dda:	4699      	mov	r9, r3
 8014ddc:	2601      	movs	r6, #1
 8014dde:	e7dd      	b.n	8014d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8014de0:	8ae3      	ldrh	r3, [r4, #22]
 8014de2:	280a      	cmp	r0, #10
 8014de4:	f103 0301 	add.w	r3, r3, #1
 8014de8:	82e3      	strh	r3, [r4, #22]
 8014dea:	d0df      	beq.n	8014dac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8014dec:	9a05      	ldr	r2, [sp, #20]
 8014dee:	bb42      	cbnz	r2, 8014e42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8014df0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014df4:	4298      	cmp	r0, r3
 8014df6:	d001      	beq.n	8014dfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8014df8:	4550      	cmp	r0, sl
 8014dfa:	d1bd      	bne.n	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014dfc:	8823      	ldrh	r3, [r4, #0]
 8014dfe:	8b21      	ldrh	r1, [r4, #24]
 8014e00:	2b20      	cmp	r3, #32
 8014e02:	d001      	beq.n	8014e08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8014e04:	4553      	cmp	r3, sl
 8014e06:	d131      	bne.n	8014e6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8014e08:	2e00      	cmp	r6, #0
 8014e0a:	bf0a      	itet	eq
 8014e0c:	460d      	moveq	r5, r1
 8014e0e:	4630      	movne	r0, r6
 8014e10:	2001      	moveq	r0, #1
 8014e12:	440a      	add	r2, r1
 8014e14:	8aa3      	ldrh	r3, [r4, #20]
 8014e16:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8014e1a:	b292      	uxth	r2, r2
 8014e1c:	8322      	strh	r2, [r4, #24]
 8014e1e:	4413      	add	r3, r2
 8014e20:	2f00      	cmp	r7, #0
 8014e22:	d03a      	beq.n	8014e9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8014e24:	f1bb 0f00 	cmp.w	fp, #0
 8014e28:	d102      	bne.n	8014e30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8014e2a:	9903      	ldr	r1, [sp, #12]
 8014e2c:	b301      	cbz	r1, 8014e70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8014e2e:	b1f8      	cbz	r0, 8014e70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8014e30:	8ba1      	ldrh	r1, [r4, #28]
 8014e32:	4419      	add	r1, r3
 8014e34:	458c      	cmp	ip, r1
 8014e36:	da2a      	bge.n	8014e8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8014e38:	8a61      	ldrh	r1, [r4, #18]
 8014e3a:	b341      	cbz	r1, 8014e8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8014e3c:	4563      	cmp	r3, ip
 8014e3e:	dd9b      	ble.n	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014e40:	e01c      	b.n	8014e7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8014e42:	8893      	ldrh	r3, [r2, #4]
 8014e44:	4649      	mov	r1, r9
 8014e46:	8023      	strh	r3, [r4, #0]
 8014e48:	f892 800d 	ldrb.w	r8, [r2, #13]
 8014e4c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8014e50:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8014e54:	f892 800a 	ldrb.w	r8, [r2, #10]
 8014e58:	ea48 0800 	orr.w	r8, r8, r0
 8014e5c:	68e0      	ldr	r0, [r4, #12]
 8014e5e:	6803      	ldr	r3, [r0, #0]
 8014e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e62:	4798      	blx	r3
 8014e64:	eb08 0200 	add.w	r2, r8, r0
 8014e68:	b292      	uxth	r2, r2
 8014e6a:	e7c7      	b.n	8014dfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	e7d0      	b.n	8014e12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8014e70:	4563      	cmp	r3, ip
 8014e72:	dd81      	ble.n	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014e74:	8a63      	ldrh	r3, [r4, #18]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	f43f af7e 	beq.w	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	8ba2      	ldrh	r2, [r4, #28]
 8014e80:	77a3      	strb	r3, [r4, #30]
 8014e82:	8b63      	ldrh	r3, [r4, #26]
 8014e84:	4413      	add	r3, r2
 8014e86:	8363      	strh	r3, [r4, #26]
 8014e88:	b007      	add	sp, #28
 8014e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8e:	2300      	movs	r3, #0
 8014e90:	4611      	mov	r1, r2
 8014e92:	4620      	mov	r0, r4
 8014e94:	f7ff ff42 	bl	8014d1c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8014e98:	e76e      	b.n	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014e9a:	4563      	cmp	r3, ip
 8014e9c:	dd14      	ble.n	8014ec8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8014e9e:	9b02      	ldr	r3, [sp, #8]
 8014ea0:	b113      	cbz	r3, 8014ea8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	460a      	mov	r2, r1
 8014ea6:	e783      	b.n	8014db0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8014ea8:	9b01      	ldr	r3, [sp, #4]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	f43f af64 	beq.w	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	f47f af61 	bne.w	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014eb6:	b116      	cbz	r6, 8014ebe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8014eb8:	2301      	movs	r3, #1
 8014eba:	462a      	mov	r2, r5
 8014ebc:	e779      	b.n	8014db2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8014ebe:	8a63      	ldrh	r3, [r4, #18]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	f43f af59 	beq.w	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014ec6:	e7df      	b.n	8014e88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	f47f af55 	bne.w	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014ece:	2e00      	cmp	r6, #0
 8014ed0:	f43f af52 	beq.w	8014d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	462a      	mov	r2, r5
 8014ed8:	e7db      	b.n	8014e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08014eda <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8014eda:	b530      	push	{r4, r5, lr}
 8014edc:	4605      	mov	r5, r0
 8014ede:	b08b      	sub	sp, #44	; 0x2c
 8014ee0:	b191      	cbz	r1, 8014f08 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8014ee2:	2401      	movs	r4, #1
 8014ee4:	e9cd 3100 	strd	r3, r1, [sp]
 8014ee8:	4613      	mov	r3, r2
 8014eea:	4601      	mov	r1, r0
 8014eec:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8014ef0:	a802      	add	r0, sp, #8
 8014ef2:	f7ff fd07 	bl	8014904 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	a802      	add	r0, sp, #8
 8014efa:	f7ff ff1f 	bl	8014d3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8014efe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014f02:	b163      	cbz	r3, 8014f1e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8014f04:	3401      	adds	r4, #1
 8014f06:	e7f6      	b.n	8014ef6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8014f08:	2401      	movs	r4, #1
 8014f0a:	f002 fcc1 	bl	8017890 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014f0e:	280a      	cmp	r0, #10
 8014f10:	4628      	mov	r0, r5
 8014f12:	bf08      	it	eq
 8014f14:	3401      	addeq	r4, #1
 8014f16:	f002 fcbb 	bl	8017890 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014f1a:	2800      	cmp	r0, #0
 8014f1c:	d1f7      	bne.n	8014f0e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8014f1e:	b2a0      	uxth	r0, r4
 8014f20:	b00b      	add	sp, #44	; 0x2c
 8014f22:	bd30      	pop	{r4, r5, pc}

08014f24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8014f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f28:	b0e5      	sub	sp, #404	; 0x194
 8014f2a:	4689      	mov	r9, r1
 8014f2c:	461c      	mov	r4, r3
 8014f2e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8014f32:	900a      	str	r0, [sp, #40]	; 0x28
 8014f34:	f1ba 0f00 	cmp.w	sl, #0
 8014f38:	f000 80b4 	beq.w	80150a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f000 80b0 	beq.w	80150a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014f44:	7ba3      	ldrb	r3, [r4, #14]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	f000 80ac 	beq.w	80150a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014f4c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8014f50:	6810      	ldr	r0, [r2, #0]
 8014f52:	6851      	ldr	r1, [r2, #4]
 8014f54:	2500      	movs	r5, #0
 8014f56:	4643      	mov	r3, r8
 8014f58:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8014f5c:	950f      	str	r5, [sp, #60]	; 0x3c
 8014f5e:	af19      	add	r7, sp, #100	; 0x64
 8014f60:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8014f64:	79a2      	ldrb	r2, [r4, #6]
 8014f66:	c303      	stmia	r3!, {r0, r1}
 8014f68:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8014f6c:	a90f      	add	r1, sp, #60	; 0x3c
 8014f6e:	4640      	mov	r0, r8
 8014f70:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014f74:	f7ff fd3e 	bl	80149f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8014f78:	a90f      	add	r1, sp, #60	; 0x3c
 8014f7a:	79a2      	ldrb	r2, [r4, #6]
 8014f7c:	4608      	mov	r0, r1
 8014f7e:	f7ff fd39 	bl	80149f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8014f82:	4638      	mov	r0, r7
 8014f84:	f002 f858 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 8014f88:	6820      	ldr	r0, [r4, #0]
 8014f8a:	6803      	ldr	r3, [r0, #0]
 8014f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f8e:	4798      	blx	r3
 8014f90:	4606      	mov	r6, r0
 8014f92:	6820      	ldr	r0, [r4, #0]
 8014f94:	6803      	ldr	r3, [r0, #0]
 8014f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f98:	4798      	blx	r3
 8014f9a:	4633      	mov	r3, r6
 8014f9c:	9000      	str	r0, [sp, #0]
 8014f9e:	4651      	mov	r1, sl
 8014fa0:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8014fa2:	4638      	mov	r0, r7
 8014fa4:	f002 f8a3 	bl	80170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014fa8:	7923      	ldrb	r3, [r4, #4]
 8014faa:	6820      	ldr	r0, [r4, #0]
 8014fac:	9308      	str	r3, [sp, #32]
 8014fae:	6803      	ldr	r3, [r0, #0]
 8014fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fb2:	4798      	blx	r3
 8014fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fb8:	181e      	adds	r6, r3, r0
 8014fba:	42ae      	cmp	r6, r5
 8014fbc:	dd06      	ble.n	8014fcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8014fbe:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8014fc2:	4282      	cmp	r2, r0
 8014fc4:	bfa4      	itt	ge
 8014fc6:	189d      	addge	r5, r3, r2
 8014fc8:	fb95 f5f6 	sdivge	r5, r5, r6
 8014fcc:	a832      	add	r0, sp, #200	; 0xc8
 8014fce:	f002 f833 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 8014fd2:	7c23      	ldrb	r3, [r4, #16]
 8014fd4:	b17b      	cbz	r3, 8014ff6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8014fd6:	6820      	ldr	r0, [r4, #0]
 8014fd8:	6803      	ldr	r3, [r0, #0]
 8014fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fdc:	4798      	blx	r3
 8014fde:	4683      	mov	fp, r0
 8014fe0:	6820      	ldr	r0, [r4, #0]
 8014fe2:	6803      	ldr	r3, [r0, #0]
 8014fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014fe6:	4798      	blx	r3
 8014fe8:	465b      	mov	r3, fp
 8014fea:	9000      	str	r0, [sp, #0]
 8014fec:	4651      	mov	r1, sl
 8014fee:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8014ff0:	a832      	add	r0, sp, #200	; 0xc8
 8014ff2:	f002 f87c 	bl	80170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014ff6:	7be1      	ldrb	r1, [r4, #15]
 8014ff8:	a811      	add	r0, sp, #68	; 0x44
 8014ffa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014ffe:	7963      	ldrb	r3, [r4, #5]
 8015000:	1a52      	subs	r2, r2, r1
 8015002:	7c21      	ldrb	r1, [r4, #16]
 8015004:	9101      	str	r1, [sp, #4]
 8015006:	b292      	uxth	r2, r2
 8015008:	6821      	ldr	r1, [r4, #0]
 801500a:	9100      	str	r1, [sp, #0]
 801500c:	a932      	add	r1, sp, #200	; 0xc8
 801500e:	f7ff fc79 	bl	8014904 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8015012:	7c23      	ldrb	r3, [r4, #16]
 8015014:	b9bb      	cbnz	r3, 8015046 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8015016:	fa1f fa86 	uxth.w	sl, r6
 801501a:	2d00      	cmp	r5, #0
 801501c:	dd45      	ble.n	80150aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801501e:	4638      	mov	r0, r7
 8015020:	f002 fc36 	bl	8017890 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015024:	2800      	cmp	r0, #0
 8015026:	d03d      	beq.n	80150a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015028:	280a      	cmp	r0, #10
 801502a:	d1f6      	bne.n	801501a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801502c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015030:	3d01      	subs	r5, #1
 8015032:	4453      	add	r3, sl
 8015034:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015038:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801503c:	eba3 030a 	sub.w	r3, r3, sl
 8015040:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015044:	e7e9      	b.n	801501a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8015046:	0073      	lsls	r3, r6, #1
 8015048:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801504c:	fa1f fa86 	uxth.w	sl, r6
 8015050:	9309      	str	r3, [sp, #36]	; 0x24
 8015052:	2d00      	cmp	r5, #0
 8015054:	dd29      	ble.n	80150aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8015056:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801505a:	a811      	add	r0, sp, #68	; 0x44
 801505c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801505e:	428b      	cmp	r3, r1
 8015060:	bfd4      	ite	le
 8015062:	2100      	movle	r1, #0
 8015064:	2101      	movgt	r1, #1
 8015066:	f7ff fe69 	bl	8014d3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801506a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801506e:	3b01      	subs	r3, #1
 8015070:	b29b      	uxth	r3, r3
 8015072:	455b      	cmp	r3, fp
 8015074:	930b      	str	r3, [sp, #44]	; 0x2c
 8015076:	d005      	beq.n	8015084 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8015078:	7961      	ldrb	r1, [r4, #5]
 801507a:	4638      	mov	r0, r7
 801507c:	f7ef f8b0 	bl	80041e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015082:	e7f4      	b.n	801506e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8015084:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015088:	3d01      	subs	r5, #1
 801508a:	4453      	add	r3, sl
 801508c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015090:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8015094:	eba3 030a 	sub.w	r3, r3, sl
 8015098:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801509c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d1d6      	bne.n	8015052 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80150a4:	b065      	add	sp, #404	; 0x194
 80150a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150aa:	0075      	lsls	r5, r6, #1
 80150ac:	f04f 0a00 	mov.w	sl, #0
 80150b0:	7c23      	ldrb	r3, [r4, #16]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d066      	beq.n	8015184 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80150b6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80150ba:	a811      	add	r0, sp, #68	; 0x44
 80150bc:	428d      	cmp	r5, r1
 80150be:	bfd4      	ite	le
 80150c0:	2100      	movle	r1, #0
 80150c2:	2101      	movgt	r1, #1
 80150c4:	f7ff fe3a 	bl	8014d3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80150c8:	9b08      	ldr	r3, [sp, #32]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d055      	beq.n	801517a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80150ce:	f894 b010 	ldrb.w	fp, [r4, #16]
 80150d2:	2264      	movs	r2, #100	; 0x64
 80150d4:	4639      	mov	r1, r7
 80150d6:	a84b      	add	r0, sp, #300	; 0x12c
 80150d8:	f00b fb1a 	bl	8020710 <memcpy>
 80150dc:	f1bb 0f00 	cmp.w	fp, #0
 80150e0:	d058      	beq.n	8015194 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80150e2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80150e6:	7922      	ldrb	r2, [r4, #4]
 80150e8:	2a01      	cmp	r2, #1
 80150ea:	d13c      	bne.n	8015166 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80150ec:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80150f0:	1ac0      	subs	r0, r0, r3
 80150f2:	2302      	movs	r3, #2
 80150f4:	fb90 f0f3 	sdiv	r0, r0, r3
 80150f8:	b200      	sxth	r0, r0
 80150fa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80150fe:	4418      	add	r0, r3
 8015100:	7c23      	ldrb	r3, [r4, #16]
 8015102:	b200      	sxth	r0, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	d03a      	beq.n	801517e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8015108:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801510c:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8015110:	9000      	str	r0, [sp, #0]
 8015112:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8015116:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015118:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801511c:	e9cd a703 	strd	sl, r7, [sp, #12]
 8015120:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8015124:	464a      	mov	r2, r9
 8015126:	2100      	movs	r1, #0
 8015128:	f7ff fc95 	bl	8014a56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801512c:	2800      	cmp	r0, #0
 801512e:	d1b9      	bne.n	80150a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015130:	b2b2      	uxth	r2, r6
 8015132:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015136:	4611      	mov	r1, r2
 8015138:	4413      	add	r3, r2
 801513a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801513e:	b21b      	sxth	r3, r3
 8015140:	1a52      	subs	r2, r2, r1
 8015142:	7c21      	ldrb	r1, [r4, #16]
 8015144:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015148:	b212      	sxth	r2, r2
 801514a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801514e:	b109      	cbz	r1, 8015154 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8015150:	42b2      	cmp	r2, r6
 8015152:	dba7      	blt.n	80150a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015154:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8015158:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801515c:	440a      	add	r2, r1
 801515e:	b212      	sxth	r2, r2
 8015160:	4293      	cmp	r3, r2
 8015162:	dda5      	ble.n	80150b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8015164:	e79e      	b.n	80150a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015166:	2a02      	cmp	r2, #2
 8015168:	d105      	bne.n	8015176 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801516a:	7be2      	ldrb	r2, [r4, #15]
 801516c:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8015170:	1a80      	subs	r0, r0, r2
 8015172:	1ac0      	subs	r0, r0, r3
 8015174:	e7c0      	b.n	80150f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8015176:	2000      	movs	r0, #0
 8015178:	e7bf      	b.n	80150fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801517a:	7be0      	ldrb	r0, [r4, #15]
 801517c:	e7bd      	b.n	80150fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801517e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015182:	e7c3      	b.n	801510c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8015184:	9b08      	ldr	r3, [sp, #32]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d0f7      	beq.n	801517a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801518a:	2264      	movs	r2, #100	; 0x64
 801518c:	4639      	mov	r1, r7
 801518e:	a84b      	add	r0, sp, #300	; 0x12c
 8015190:	f00b fabe 	bl	8020710 <memcpy>
 8015194:	2300      	movs	r3, #0
 8015196:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801519a:	6821      	ldr	r1, [r4, #0]
 801519c:	a84b      	add	r0, sp, #300	; 0x12c
 801519e:	f7ff fbed 	bl	801497c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80151a2:	b203      	sxth	r3, r0
 80151a4:	e79f      	b.n	80150e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080151a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80151a6:	2b03      	cmp	r3, #3
 80151a8:	d818      	bhi.n	80151dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80151aa:	e8df f003 	tbb	[pc, r3]
 80151ae:	0602      	.short	0x0602
 80151b0:	130d      	.short	0x130d
 80151b2:	f9b0 2000 	ldrsh.w	r2, [r0]
 80151b6:	1850      	adds	r0, r2, r1
 80151b8:	4770      	bx	lr
 80151ba:	8803      	ldrh	r3, [r0, #0]
 80151bc:	8880      	ldrh	r0, [r0, #4]
 80151be:	4418      	add	r0, r3
 80151c0:	b200      	sxth	r0, r0
 80151c2:	1a80      	subs	r0, r0, r2
 80151c4:	3801      	subs	r0, #1
 80151c6:	4770      	bx	lr
 80151c8:	8803      	ldrh	r3, [r0, #0]
 80151ca:	8880      	ldrh	r0, [r0, #4]
 80151cc:	4418      	add	r0, r3
 80151ce:	b200      	sxth	r0, r0
 80151d0:	1a40      	subs	r0, r0, r1
 80151d2:	e7f7      	b.n	80151c4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80151d4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80151d8:	4410      	add	r0, r2
 80151da:	4770      	bx	lr
 80151dc:	2000      	movs	r0, #0
 80151de:	4770      	bx	lr

080151e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80151e0:	2b03      	cmp	r3, #3
 80151e2:	d817      	bhi.n	8015214 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80151e4:	e8df f003 	tbb	[pc, r3]
 80151e8:	10090602 	.word	0x10090602
 80151ec:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80151f0:	1850      	adds	r0, r2, r1
 80151f2:	4770      	bx	lr
 80151f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80151f8:	e7fa      	b.n	80151f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80151fa:	8843      	ldrh	r3, [r0, #2]
 80151fc:	88c0      	ldrh	r0, [r0, #6]
 80151fe:	4418      	add	r0, r3
 8015200:	b200      	sxth	r0, r0
 8015202:	1a80      	subs	r0, r0, r2
 8015204:	3801      	subs	r0, #1
 8015206:	4770      	bx	lr
 8015208:	8843      	ldrh	r3, [r0, #2]
 801520a:	88c0      	ldrh	r0, [r0, #6]
 801520c:	4418      	add	r0, r3
 801520e:	b200      	sxth	r0, r0
 8015210:	1a40      	subs	r0, r0, r1
 8015212:	e7f7      	b.n	8015204 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015214:	2000      	movs	r0, #0
 8015216:	4770      	bx	lr

08015218 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015218:	4b01      	ldr	r3, [pc, #4]	; (8015220 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801521a:	2200      	movs	r2, #0
 801521c:	601a      	str	r2, [r3, #0]
 801521e:	4770      	bx	lr
 8015220:	2400c7fc 	.word	0x2400c7fc

08015224 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015224:	4603      	mov	r3, r0
 8015226:	b1c8      	cbz	r0, 801525c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015228:	0c02      	lsrs	r2, r0, #16
 801522a:	0412      	lsls	r2, r2, #16
 801522c:	b9a2      	cbnz	r2, 8015258 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801522e:	0403      	lsls	r3, r0, #16
 8015230:	2010      	movs	r0, #16
 8015232:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015236:	bf04      	itt	eq
 8015238:	021b      	lsleq	r3, r3, #8
 801523a:	3008      	addeq	r0, #8
 801523c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015240:	bf04      	itt	eq
 8015242:	011b      	lsleq	r3, r3, #4
 8015244:	3004      	addeq	r0, #4
 8015246:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801524a:	bf04      	itt	eq
 801524c:	009b      	lsleq	r3, r3, #2
 801524e:	3002      	addeq	r0, #2
 8015250:	2b00      	cmp	r3, #0
 8015252:	db04      	blt.n	801525e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015254:	3001      	adds	r0, #1
 8015256:	4770      	bx	lr
 8015258:	2000      	movs	r0, #0
 801525a:	e7ea      	b.n	8015232 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801525c:	2020      	movs	r0, #32
 801525e:	4770      	bx	lr

08015260 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015264:	b087      	sub	sp, #28
 8015266:	4681      	mov	r9, r0
 8015268:	4698      	mov	r8, r3
 801526a:	4610      	mov	r0, r2
 801526c:	460d      	mov	r5, r1
 801526e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015272:	b981      	cbnz	r1, 8015296 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015274:	b14b      	cbz	r3, 801528a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015276:	460b      	mov	r3, r1
 8015278:	464a      	mov	r2, r9
 801527a:	4641      	mov	r1, r8
 801527c:	e9cd 4700 	strd	r4, r7, [sp]
 8015280:	f7ff ffee 	bl	8015260 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015284:	b007      	add	sp, #28
 8015286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801528a:	f04f 33ff 	mov.w	r3, #4294967295
 801528e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015292:	603b      	str	r3, [r7, #0]
 8015294:	e7f6      	b.n	8015284 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015296:	fa32 fa01 	lsrs.w	sl, r2, r1
 801529a:	d107      	bne.n	80152ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801529c:	fb09 f602 	mul.w	r6, r9, r2
 80152a0:	fbb6 f0f4 	udiv	r0, r6, r4
 80152a4:	fb04 6610 	mls	r6, r4, r0, r6
 80152a8:	603e      	str	r6, [r7, #0]
 80152aa:	e7eb      	b.n	8015284 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80152ac:	2601      	movs	r6, #1
 80152ae:	fa09 fb01 	lsl.w	fp, r9, r1
 80152b2:	408e      	lsls	r6, r1
 80152b4:	fbbb f3f4 	udiv	r3, fp, r4
 80152b8:	3e01      	subs	r6, #1
 80152ba:	9302      	str	r3, [sp, #8]
 80152bc:	fb0a f303 	mul.w	r3, sl, r3
 80152c0:	4016      	ands	r6, r2
 80152c2:	9303      	str	r3, [sp, #12]
 80152c4:	4630      	mov	r0, r6
 80152c6:	f7ff ffad 	bl	8015224 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80152ca:	464a      	mov	r2, r9
 80152cc:	460b      	mov	r3, r1
 80152ce:	4601      	mov	r1, r0
 80152d0:	4630      	mov	r0, r6
 80152d2:	e9cd 4700 	strd	r4, r7, [sp]
 80152d6:	f7ff ffc3 	bl	8015260 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80152da:	9b02      	ldr	r3, [sp, #8]
 80152dc:	4606      	mov	r6, r0
 80152de:	eb05 0108 	add.w	r1, r5, r8
 80152e2:	fb04 bb13 	mls	fp, r4, r3, fp
 80152e6:	4658      	mov	r0, fp
 80152e8:	f7ff ff9c 	bl	8015224 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80152ec:	ab05      	add	r3, sp, #20
 80152ee:	465a      	mov	r2, fp
 80152f0:	e9cd 4300 	strd	r4, r3, [sp]
 80152f4:	4603      	mov	r3, r0
 80152f6:	4650      	mov	r0, sl
 80152f8:	f7ff ffb2 	bl	8015260 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80152fc:	6839      	ldr	r1, [r7, #0]
 80152fe:	9a05      	ldr	r2, [sp, #20]
 8015300:	9b03      	ldr	r3, [sp, #12]
 8015302:	4411      	add	r1, r2
 8015304:	fbb1 f2f4 	udiv	r2, r1, r4
 8015308:	18d3      	adds	r3, r2, r3
 801530a:	fb04 1412 	mls	r4, r4, r2, r1
 801530e:	441e      	add	r6, r3
 8015310:	603c      	str	r4, [r7, #0]
 8015312:	4430      	add	r0, r6
 8015314:	e7b6      	b.n	8015284 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015316 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801531a:	b085      	sub	sp, #20
 801531c:	f1b0 0900 	subs.w	r9, r0, #0
 8015320:	461d      	mov	r5, r3
 8015322:	4617      	mov	r7, r2
 8015324:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015326:	bfbb      	ittet	lt
 8015328:	f1c9 0900 	rsblt	r9, r9, #0
 801532c:	f04f 36ff 	movlt.w	r6, #4294967295
 8015330:	2601      	movge	r6, #1
 8015332:	6823      	ldrlt	r3, [r4, #0]
 8015334:	bfbc      	itt	lt
 8015336:	425b      	neglt	r3, r3
 8015338:	6023      	strlt	r3, [r4, #0]
 801533a:	2a00      	cmp	r2, #0
 801533c:	da04      	bge.n	8015348 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801533e:	6823      	ldr	r3, [r4, #0]
 8015340:	4257      	negs	r7, r2
 8015342:	4276      	negs	r6, r6
 8015344:	425b      	negs	r3, r3
 8015346:	6023      	str	r3, [r4, #0]
 8015348:	2d00      	cmp	r5, #0
 801534a:	4638      	mov	r0, r7
 801534c:	bfba      	itte	lt
 801534e:	426d      	neglt	r5, r5
 8015350:	f04f 38ff 	movlt.w	r8, #4294967295
 8015354:	f04f 0801 	movge.w	r8, #1
 8015358:	f7ff ff64 	bl	8015224 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801535c:	ab03      	add	r3, sp, #12
 801535e:	463a      	mov	r2, r7
 8015360:	e9cd 5300 	strd	r5, r3, [sp]
 8015364:	4603      	mov	r3, r0
 8015366:	4648      	mov	r0, r9
 8015368:	f7ff ff7a 	bl	8015260 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801536c:	6823      	ldr	r3, [r4, #0]
 801536e:	9a03      	ldr	r2, [sp, #12]
 8015370:	4546      	cmp	r6, r8
 8015372:	441a      	add	r2, r3
 8015374:	fb92 f3f5 	sdiv	r3, r2, r5
 8015378:	4418      	add	r0, r3
 801537a:	fb05 2313 	mls	r3, r5, r3, r2
 801537e:	bf18      	it	ne
 8015380:	4240      	negne	r0, r0
 8015382:	1c72      	adds	r2, r6, #1
 8015384:	6023      	str	r3, [r4, #0]
 8015386:	d105      	bne.n	8015394 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015388:	2b00      	cmp	r3, #0
 801538a:	f1c3 0200 	rsb	r2, r3, #0
 801538e:	db0b      	blt.n	80153a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015390:	6022      	str	r2, [r4, #0]
 8015392:	e006      	b.n	80153a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015394:	2e01      	cmp	r6, #1
 8015396:	d104      	bne.n	80153a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015398:	2b00      	cmp	r3, #0
 801539a:	da02      	bge.n	80153a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801539c:	442b      	add	r3, r5
 801539e:	3801      	subs	r0, #1
 80153a0:	6023      	str	r3, [r4, #0]
 80153a2:	b005      	add	sp, #20
 80153a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153a8:	3801      	subs	r0, #1
 80153aa:	1b52      	subs	r2, r2, r5
 80153ac:	e7f0      	b.n	8015390 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080153b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80153b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80153b4:	4c1c      	ldr	r4, [pc, #112]	; (8015428 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80153b6:	4605      	mov	r5, r0
 80153b8:	6807      	ldr	r7, [r0, #0]
 80153ba:	69a3      	ldr	r3, [r4, #24]
 80153bc:	b92b      	cbnz	r3, 80153ca <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80153be:	6840      	ldr	r0, [r0, #4]
 80153c0:	e9c5 7000 	strd	r7, r0, [r5]
 80153c4:	b004      	add	sp, #16
 80153c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153ca:	f04f 0802 	mov.w	r8, #2
 80153ce:	68a2      	ldr	r2, [r4, #8]
 80153d0:	ae04      	add	r6, sp, #16
 80153d2:	6820      	ldr	r0, [r4, #0]
 80153d4:	fb93 f1f8 	sdiv	r1, r3, r8
 80153d8:	440a      	add	r2, r1
 80153da:	69e1      	ldr	r1, [r4, #28]
 80153dc:	f846 2d04 	str.w	r2, [r6, #-4]!
 80153e0:	463a      	mov	r2, r7
 80153e2:	9600      	str	r6, [sp, #0]
 80153e4:	f7ff ff97 	bl	8015316 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80153e8:	69a3      	ldr	r3, [r4, #24]
 80153ea:	4607      	mov	r7, r0
 80153ec:	686a      	ldr	r2, [r5, #4]
 80153ee:	6a21      	ldr	r1, [r4, #32]
 80153f0:	9600      	str	r6, [sp, #0]
 80153f2:	6860      	ldr	r0, [r4, #4]
 80153f4:	f7ff ff8f 	bl	8015316 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80153f8:	69a3      	ldr	r3, [r4, #24]
 80153fa:	6962      	ldr	r2, [r4, #20]
 80153fc:	4407      	add	r7, r0
 80153fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015400:	9600      	str	r6, [sp, #0]
 8015402:	68e0      	ldr	r0, [r4, #12]
 8015404:	fb93 f8f8 	sdiv	r8, r3, r8
 8015408:	4442      	add	r2, r8
 801540a:	9203      	str	r2, [sp, #12]
 801540c:	682a      	ldr	r2, [r5, #0]
 801540e:	f7ff ff82 	bl	8015316 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015412:	4680      	mov	r8, r0
 8015414:	9600      	str	r6, [sp, #0]
 8015416:	69a3      	ldr	r3, [r4, #24]
 8015418:	686a      	ldr	r2, [r5, #4]
 801541a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801541c:	6920      	ldr	r0, [r4, #16]
 801541e:	f7ff ff7a 	bl	8015316 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015422:	4440      	add	r0, r8
 8015424:	e7cc      	b.n	80153c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015426:	bf00      	nop
 8015428:	2400c800 	.word	0x2400c800

0801542c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801542c:	4b07      	ldr	r3, [pc, #28]	; (801544c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801542e:	781b      	ldrb	r3, [r3, #0]
 8015430:	2b01      	cmp	r3, #1
 8015432:	d109      	bne.n	8015448 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015434:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015438:	f9b0 2000 	ldrsh.w	r2, [r0]
 801543c:	8003      	strh	r3, [r0, #0]
 801543e:	4b04      	ldr	r3, [pc, #16]	; (8015450 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015440:	881b      	ldrh	r3, [r3, #0]
 8015442:	3b01      	subs	r3, #1
 8015444:	1a9b      	subs	r3, r3, r2
 8015446:	800b      	strh	r3, [r1, #0]
 8015448:	4770      	bx	lr
 801544a:	bf00      	nop
 801544c:	2400c7ec 	.word	0x2400c7ec
 8015450:	2400c7e8 	.word	0x2400c7e8

08015454 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015454:	4b07      	ldr	r3, [pc, #28]	; (8015474 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015456:	b510      	push	{r4, lr}
 8015458:	781b      	ldrb	r3, [r3, #0]
 801545a:	2b01      	cmp	r3, #1
 801545c:	d108      	bne.n	8015470 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801545e:	4b06      	ldr	r3, [pc, #24]	; (8015478 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015460:	880c      	ldrh	r4, [r1, #0]
 8015462:	881b      	ldrh	r3, [r3, #0]
 8015464:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015468:	3b01      	subs	r3, #1
 801546a:	1b1b      	subs	r3, r3, r4
 801546c:	8003      	strh	r3, [r0, #0]
 801546e:	800a      	strh	r2, [r1, #0]
 8015470:	bd10      	pop	{r4, pc}
 8015472:	bf00      	nop
 8015474:	2400c7ec 	.word	0x2400c7ec
 8015478:	2400c7e8 	.word	0x2400c7e8

0801547c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801547c:	4b0a      	ldr	r3, [pc, #40]	; (80154a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801547e:	b510      	push	{r4, lr}
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	2b01      	cmp	r3, #1
 8015484:	d10e      	bne.n	80154a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015486:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801548a:	8843      	ldrh	r3, [r0, #2]
 801548c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015490:	18ca      	adds	r2, r1, r3
 8015492:	4b06      	ldr	r3, [pc, #24]	; (80154ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015494:	8044      	strh	r4, [r0, #2]
 8015496:	881b      	ldrh	r3, [r3, #0]
 8015498:	1a9b      	subs	r3, r3, r2
 801549a:	8003      	strh	r3, [r0, #0]
 801549c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80154a0:	8081      	strh	r1, [r0, #4]
 80154a2:	80c3      	strh	r3, [r0, #6]
 80154a4:	bd10      	pop	{r4, pc}
 80154a6:	bf00      	nop
 80154a8:	2400c7ec 	.word	0x2400c7ec
 80154ac:	2400c7e8 	.word	0x2400c7e8

080154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80154b0:	4b08      	ldr	r3, [pc, #32]	; (80154d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d10c      	bne.n	80154d2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80154b8:	8803      	ldrh	r3, [r0, #0]
 80154ba:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80154be:	8842      	ldrh	r2, [r0, #2]
 80154c0:	8002      	strh	r2, [r0, #0]
 80154c2:	185a      	adds	r2, r3, r1
 80154c4:	4b04      	ldr	r3, [pc, #16]	; (80154d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80154c6:	881b      	ldrh	r3, [r3, #0]
 80154c8:	1a9b      	subs	r3, r3, r2
 80154ca:	8043      	strh	r3, [r0, #2]
 80154cc:	88c3      	ldrh	r3, [r0, #6]
 80154ce:	80c1      	strh	r1, [r0, #6]
 80154d0:	8083      	strh	r3, [r0, #4]
 80154d2:	4770      	bx	lr
 80154d4:	2400c7ec 	.word	0x2400c7ec
 80154d8:	2400c7e8 	.word	0x2400c7e8

080154dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80154dc:	4b07      	ldr	r3, [pc, #28]	; (80154fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80154de:	b510      	push	{r4, lr}
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d108      	bne.n	80154f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80154e6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80154ea:	f9b0 4000 	ldrsh.w	r4, [r0]
 80154ee:	8003      	strh	r3, [r0, #0]
 80154f0:	8893      	ldrh	r3, [r2, #4]
 80154f2:	3b01      	subs	r3, #1
 80154f4:	1b1b      	subs	r3, r3, r4
 80154f6:	800b      	strh	r3, [r1, #0]
 80154f8:	bd10      	pop	{r4, pc}
 80154fa:	bf00      	nop
 80154fc:	2400c7ec 	.word	0x2400c7ec

08015500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015500:	4b0a      	ldr	r3, [pc, #40]	; (801552c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8015502:	460a      	mov	r2, r1
 8015504:	b510      	push	{r4, lr}
 8015506:	781b      	ldrb	r3, [r3, #0]
 8015508:	2b01      	cmp	r3, #1
 801550a:	d10d      	bne.n	8015528 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801550c:	8881      	ldrh	r1, [r0, #4]
 801550e:	8803      	ldrh	r3, [r0, #0]
 8015510:	440b      	add	r3, r1
 8015512:	4601      	mov	r1, r0
 8015514:	3b01      	subs	r3, #1
 8015516:	f821 3b02 	strh.w	r3, [r1], #2
 801551a:	f7ff ffdf 	bl	80154dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801551e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015522:	88c2      	ldrh	r2, [r0, #6]
 8015524:	80c3      	strh	r3, [r0, #6]
 8015526:	8082      	strh	r2, [r0, #4]
 8015528:	bd10      	pop	{r4, pc}
 801552a:	bf00      	nop
 801552c:	2400c7ec 	.word	0x2400c7ec

08015530 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015530:	b570      	push	{r4, r5, r6, lr}
 8015532:	2300      	movs	r3, #0
 8015534:	4c0a      	ldr	r4, [pc, #40]	; (8015560 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8015536:	4605      	mov	r5, r0
 8015538:	460e      	mov	r6, r1
 801553a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801553e:	6820      	ldr	r0, [r4, #0]
 8015540:	b110      	cbz	r0, 8015548 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8015542:	6803      	ldr	r3, [r0, #0]
 8015544:	695b      	ldr	r3, [r3, #20]
 8015546:	4798      	blx	r3
 8015548:	6026      	str	r6, [r4, #0]
 801554a:	4630      	mov	r0, r6
 801554c:	6833      	ldr	r3, [r6, #0]
 801554e:	68db      	ldr	r3, [r3, #12]
 8015550:	4798      	blx	r3
 8015552:	682b      	ldr	r3, [r5, #0]
 8015554:	4628      	mov	r0, r5
 8015556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801555c:	4718      	bx	r3
 801555e:	bf00      	nop
 8015560:	2400c830 	.word	0x2400c830

08015564 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015564:	4b06      	ldr	r3, [pc, #24]	; (8015580 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015566:	2100      	movs	r1, #0
 8015568:	f9b3 2000 	ldrsh.w	r2, [r3]
 801556c:	4b05      	ldr	r3, [pc, #20]	; (8015584 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801556e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8015572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015576:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801557a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801557e:	4770      	bx	lr
 8015580:	2400c7e8 	.word	0x2400c7e8
 8015584:	2400c7ea 	.word	0x2400c7ea

08015588 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015588:	4b03      	ldr	r3, [pc, #12]	; (8015598 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801558a:	6818      	ldr	r0, [r3, #0]
 801558c:	b110      	cbz	r0, 8015594 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801558e:	6803      	ldr	r3, [r0, #0]
 8015590:	699b      	ldr	r3, [r3, #24]
 8015592:	4718      	bx	r3
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop
 8015598:	2400c830 	.word	0x2400c830

0801559c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801559c:	4770      	bx	lr
	...

080155a0 <_ZN8touchgfx11Application4drawEv>:
 80155a0:	4b09      	ldr	r3, [pc, #36]	; (80155c8 <_ZN8touchgfx11Application4drawEv+0x28>)
 80155a2:	b507      	push	{r0, r1, r2, lr}
 80155a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80155a8:	2100      	movs	r1, #0
 80155aa:	4b08      	ldr	r3, [pc, #32]	; (80155cc <_ZN8touchgfx11Application4drawEv+0x2c>)
 80155ac:	9100      	str	r1, [sp, #0]
 80155ae:	4669      	mov	r1, sp
 80155b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80155b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80155bc:	6803      	ldr	r3, [r0, #0]
 80155be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155c0:	4798      	blx	r3
 80155c2:	b003      	add	sp, #12
 80155c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80155c8:	2400c7e8 	.word	0x2400c7e8
 80155cc:	2400c7ea 	.word	0x2400c7ea

080155d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80155d0:	4b03      	ldr	r3, [pc, #12]	; (80155e0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80155d2:	6818      	ldr	r0, [r3, #0]
 80155d4:	b110      	cbz	r0, 80155dc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80155d6:	6803      	ldr	r3, [r0, #0]
 80155d8:	69db      	ldr	r3, [r3, #28]
 80155da:	4718      	bx	r3
 80155dc:	4770      	bx	lr
 80155de:	bf00      	nop
 80155e0:	2400c830 	.word	0x2400c830

080155e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80155e4:	4b03      	ldr	r3, [pc, #12]	; (80155f4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80155e6:	6818      	ldr	r0, [r3, #0]
 80155e8:	b110      	cbz	r0, 80155f0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80155ea:	6803      	ldr	r3, [r0, #0]
 80155ec:	6a1b      	ldr	r3, [r3, #32]
 80155ee:	4718      	bx	r3
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop
 80155f4:	2400c830 	.word	0x2400c830

080155f8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80155f8:	2300      	movs	r3, #0
 80155fa:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80155fe:	4770      	bx	lr

08015600 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015600:	4b03      	ldr	r3, [pc, #12]	; (8015610 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8015602:	6818      	ldr	r0, [r3, #0]
 8015604:	b110      	cbz	r0, 801560c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8015606:	6803      	ldr	r3, [r0, #0]
 8015608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801560a:	4718      	bx	r3
 801560c:	4770      	bx	lr
 801560e:	bf00      	nop
 8015610:	2400c830 	.word	0x2400c830

08015614 <_ZN8touchgfx11Application15handleTickEventEv>:
 8015614:	b570      	push	{r4, r5, r6, lr}
 8015616:	4d32      	ldr	r5, [pc, #200]	; (80156e0 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8015618:	4604      	mov	r4, r0
 801561a:	6828      	ldr	r0, [r5, #0]
 801561c:	b140      	cbz	r0, 8015630 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801561e:	7a03      	ldrb	r3, [r0, #8]
 8015620:	b933      	cbnz	r3, 8015630 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015622:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8015626:	6803      	ldr	r3, [r0, #0]
 8015628:	689b      	ldr	r3, [r3, #8]
 801562a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801562e:	4718      	bx	r3
 8015630:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8015634:	b97b      	cbnz	r3, 8015656 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015636:	b170      	cbz	r0, 8015656 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015638:	7a03      	ldrb	r3, [r0, #8]
 801563a:	b163      	cbz	r3, 8015656 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801563c:	4b29      	ldr	r3, [pc, #164]	; (80156e4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801563e:	6818      	ldr	r0, [r3, #0]
 8015640:	b110      	cbz	r0, 8015648 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8015642:	6803      	ldr	r3, [r0, #0]
 8015644:	691b      	ldr	r3, [r3, #16]
 8015646:	4798      	blx	r3
 8015648:	6828      	ldr	r0, [r5, #0]
 801564a:	6803      	ldr	r3, [r0, #0]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	4798      	blx	r3
 8015650:	2301      	movs	r3, #1
 8015652:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8015656:	2500      	movs	r5, #0
 8015658:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801565c:	42a8      	cmp	r0, r5
 801565e:	dd0c      	ble.n	801567a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8015660:	1963      	adds	r3, r4, r5
 8015662:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8015666:	b132      	cbz	r2, 8015676 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8015668:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801566c:	4413      	add	r3, r2
 801566e:	6858      	ldr	r0, [r3, #4]
 8015670:	6803      	ldr	r3, [r0, #0]
 8015672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015674:	4798      	blx	r3
 8015676:	3501      	adds	r5, #1
 8015678:	e7ee      	b.n	8015658 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801567a:	2300      	movs	r3, #0
 801567c:	461a      	mov	r2, r3
 801567e:	4298      	cmp	r0, r3
 8015680:	d015      	beq.n	80156ae <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8015682:	18e1      	adds	r1, r4, r3
 8015684:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8015688:	b16d      	cbz	r5, 80156a6 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801568a:	429a      	cmp	r2, r3
 801568c:	d00a      	beq.n	80156a4 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801568e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8015692:	4431      	add	r1, r6
 8015694:	684e      	ldr	r6, [r1, #4]
 8015696:	b291      	uxth	r1, r2
 8015698:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801569c:	604e      	str	r6, [r1, #4]
 801569e:	18a1      	adds	r1, r4, r2
 80156a0:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80156a4:	3201      	adds	r2, #1
 80156a6:	3301      	adds	r3, #1
 80156a8:	e7e9      	b.n	801567e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 80156aa:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 80156ae:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 80156b2:	4295      	cmp	r5, r2
 80156b4:	dd0d      	ble.n	80156d2 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 80156b6:	1e6b      	subs	r3, r5, #1
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80156be:	4618      	mov	r0, r3
 80156c0:	3104      	adds	r1, #4
 80156c2:	4285      	cmp	r5, r0
 80156c4:	ddf1      	ble.n	80156aa <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 80156c6:	f851 6f04 	ldr.w	r6, [r1, #4]!
 80156ca:	3001      	adds	r0, #1
 80156cc:	f841 6c04 	str.w	r6, [r1, #-4]
 80156d0:	e7f7      	b.n	80156c2 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 80156d2:	4b04      	ldr	r3, [pc, #16]	; (80156e4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80156d4:	6818      	ldr	r0, [r3, #0]
 80156d6:	b110      	cbz	r0, 80156de <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80156d8:	6803      	ldr	r3, [r0, #0]
 80156da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156dc:	e7a5      	b.n	801562a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80156de:	bd70      	pop	{r4, r5, r6, pc}
 80156e0:	2400c834 	.word	0x2400c834
 80156e4:	2400c830 	.word	0x2400c830

080156e8 <_ZN8touchgfx11ApplicationD1Ev>:
 80156e8:	4770      	bx	lr

080156ea <_ZN8touchgfx11ApplicationD0Ev>:
 80156ea:	b510      	push	{r4, lr}
 80156ec:	4604      	mov	r4, r0
 80156ee:	f44f 719c 	mov.w	r1, #312	; 0x138
 80156f2:	f00a fe56 	bl	80203a2 <_ZdlPvj>
 80156f6:	4620      	mov	r0, r4
 80156f8:	bd10      	pop	{r4, pc}

080156fa <_ZN8touchgfx4Rect10restrictToEss>:
 80156fa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	b510      	push	{r4, lr}
 8015702:	da04      	bge.n	801570e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8015704:	8884      	ldrh	r4, [r0, #4]
 8015706:	4423      	add	r3, r4
 8015708:	8083      	strh	r3, [r0, #4]
 801570a:	2300      	movs	r3, #0
 801570c:	8003      	strh	r3, [r0, #0]
 801570e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015712:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015716:	1b09      	subs	r1, r1, r4
 8015718:	428b      	cmp	r3, r1
 801571a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801571e:	bfc8      	it	gt
 8015720:	8081      	strhgt	r1, [r0, #4]
 8015722:	2b00      	cmp	r3, #0
 8015724:	da04      	bge.n	8015730 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8015726:	88c1      	ldrh	r1, [r0, #6]
 8015728:	440b      	add	r3, r1
 801572a:	80c3      	strh	r3, [r0, #6]
 801572c:	2300      	movs	r3, #0
 801572e:	8043      	strh	r3, [r0, #2]
 8015730:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015734:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8015738:	1a52      	subs	r2, r2, r1
 801573a:	4293      	cmp	r3, r2
 801573c:	bfc8      	it	gt
 801573e:	80c2      	strhgt	r2, [r0, #6]
 8015740:	bd10      	pop	{r4, pc}
	...

08015744 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015744:	4b10      	ldr	r3, [pc, #64]	; (8015788 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8015746:	b510      	push	{r4, lr}
 8015748:	460c      	mov	r4, r1
 801574a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801574e:	4b0f      	ldr	r3, [pc, #60]	; (801578c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8015750:	4620      	mov	r0, r4
 8015752:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015756:	f7ff ffd0 	bl	80156fa <_ZN8touchgfx4Rect10restrictToEss>
 801575a:	4b0d      	ldr	r3, [pc, #52]	; (8015790 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801575c:	6818      	ldr	r0, [r3, #0]
 801575e:	b190      	cbz	r0, 8015786 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8015760:	6803      	ldr	r3, [r0, #0]
 8015762:	4621      	mov	r1, r4
 8015764:	689b      	ldr	r3, [r3, #8]
 8015766:	4798      	blx	r3
 8015768:	4b0a      	ldr	r3, [pc, #40]	; (8015794 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801576a:	6818      	ldr	r0, [r3, #0]
 801576c:	b118      	cbz	r0, 8015776 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801576e:	6803      	ldr	r3, [r0, #0]
 8015770:	4621      	mov	r1, r4
 8015772:	689b      	ldr	r3, [r3, #8]
 8015774:	4798      	blx	r3
 8015776:	4b08      	ldr	r3, [pc, #32]	; (8015798 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8015778:	4621      	mov	r1, r4
 801577a:	6818      	ldr	r0, [r3, #0]
 801577c:	6803      	ldr	r3, [r0, #0]
 801577e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015782:	69db      	ldr	r3, [r3, #28]
 8015784:	4718      	bx	r3
 8015786:	bd10      	pop	{r4, pc}
 8015788:	2400c7ea 	.word	0x2400c7ea
 801578c:	2400c7e8 	.word	0x2400c7e8
 8015790:	2400c830 	.word	0x2400c830
 8015794:	2400c82c 	.word	0x2400c82c
 8015798:	2400c7f4 	.word	0x2400c7f4

0801579c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801579e:	4606      	mov	r6, r0
 80157a0:	4608      	mov	r0, r1
 80157a2:	460f      	mov	r7, r1
 80157a4:	f7fc fb05 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80157a8:	b9e8      	cbnz	r0, 80157e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80157aa:	f9b7 5000 	ldrsh.w	r5, [r7]
 80157ae:	f9b6 4000 	ldrsh.w	r4, [r6]
 80157b2:	42a5      	cmp	r5, r4
 80157b4:	db17      	blt.n	80157e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80157b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80157ba:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80157be:	429a      	cmp	r2, r3
 80157c0:	db11      	blt.n	80157e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80157c2:	88b9      	ldrh	r1, [r7, #4]
 80157c4:	440d      	add	r5, r1
 80157c6:	88b1      	ldrh	r1, [r6, #4]
 80157c8:	440c      	add	r4, r1
 80157ca:	b22d      	sxth	r5, r5
 80157cc:	b224      	sxth	r4, r4
 80157ce:	42a5      	cmp	r5, r4
 80157d0:	dc09      	bgt.n	80157e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80157d2:	88f8      	ldrh	r0, [r7, #6]
 80157d4:	4410      	add	r0, r2
 80157d6:	88f2      	ldrh	r2, [r6, #6]
 80157d8:	4413      	add	r3, r2
 80157da:	b200      	sxth	r0, r0
 80157dc:	b21b      	sxth	r3, r3
 80157de:	4298      	cmp	r0, r3
 80157e0:	bfcc      	ite	gt
 80157e2:	2000      	movgt	r0, #0
 80157e4:	2001      	movle	r0, #1
 80157e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080157e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80157e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ea:	4604      	mov	r4, r0
 80157ec:	4608      	mov	r0, r1
 80157ee:	460d      	mov	r5, r1
 80157f0:	f7fc fadf 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80157f4:	b978      	cbnz	r0, 8015816 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80157f6:	4620      	mov	r0, r4
 80157f8:	f7fc fadb 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80157fc:	f9b5 6000 	ldrsh.w	r6, [r5]
 8015800:	b150      	cbz	r0, 8015818 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8015802:	8026      	strh	r6, [r4, #0]
 8015804:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015808:	8063      	strh	r3, [r4, #2]
 801580a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801580e:	80a3      	strh	r3, [r4, #4]
 8015810:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015814:	80e3      	strh	r3, [r4, #6]
 8015816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015818:	f9b4 1000 	ldrsh.w	r1, [r4]
 801581c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015820:	42b1      	cmp	r1, r6
 8015822:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015826:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801582a:	460f      	mov	r7, r1
 801582c:	88ed      	ldrh	r5, [r5, #6]
 801582e:	bfa8      	it	ge
 8015830:	4637      	movge	r7, r6
 8015832:	4293      	cmp	r3, r2
 8015834:	4618      	mov	r0, r3
 8015836:	4466      	add	r6, ip
 8015838:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801583c:	bfa8      	it	ge
 801583e:	4610      	movge	r0, r2
 8015840:	442a      	add	r2, r5
 8015842:	88e5      	ldrh	r5, [r4, #6]
 8015844:	4461      	add	r1, ip
 8015846:	b236      	sxth	r6, r6
 8015848:	8027      	strh	r7, [r4, #0]
 801584a:	442b      	add	r3, r5
 801584c:	b209      	sxth	r1, r1
 801584e:	b212      	sxth	r2, r2
 8015850:	8060      	strh	r0, [r4, #2]
 8015852:	b21b      	sxth	r3, r3
 8015854:	428e      	cmp	r6, r1
 8015856:	bfac      	ite	ge
 8015858:	ebc7 0106 	rsbge	r1, r7, r6
 801585c:	ebc7 0101 	rsblt	r1, r7, r1
 8015860:	429a      	cmp	r2, r3
 8015862:	bfac      	ite	ge
 8015864:	ebc0 0202 	rsbge	r2, r0, r2
 8015868:	ebc0 0203 	rsblt	r2, r0, r3
 801586c:	80a1      	strh	r1, [r4, #4]
 801586e:	80e2      	strh	r2, [r4, #6]
 8015870:	e7d1      	b.n	8015816 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08015874 <_ZN8touchgfx11Application11getInstanceEv>:
 8015874:	4b01      	ldr	r3, [pc, #4]	; (801587c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8015876:	6818      	ldr	r0, [r3, #0]
 8015878:	4770      	bx	lr
 801587a:	bf00      	nop
 801587c:	2400c840 	.word	0x2400c840

08015880 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8015880:	2300      	movs	r3, #0
 8015882:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8015886:	30a8      	adds	r0, #168	; 0xa8
 8015888:	f820 3c24 	strh.w	r3, [r0, #-36]
 801588c:	f802 3b01 	strb.w	r3, [r2], #1
 8015890:	4282      	cmp	r2, r0
 8015892:	d1fb      	bne.n	801588c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8015894:	4770      	bx	lr

08015896 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015896:	4603      	mov	r3, r0
 8015898:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801589c:	2200      	movs	r2, #0
 801589e:	801a      	strh	r2, [r3, #0]
 80158a0:	3308      	adds	r3, #8
 80158a2:	f823 2c06 	strh.w	r2, [r3, #-6]
 80158a6:	f823 2c04 	strh.w	r2, [r3, #-4]
 80158aa:	f823 2c02 	strh.w	r2, [r3, #-2]
 80158ae:	428b      	cmp	r3, r1
 80158b0:	d1f5      	bne.n	801589e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80158b2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80158b6:	4770      	bx	lr

080158b8 <_ZN8touchgfx11ApplicationC1Ev>:
 80158b8:	b570      	push	{r4, r5, r6, lr}
 80158ba:	4b19      	ldr	r3, [pc, #100]	; (8015920 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80158bc:	2500      	movs	r5, #0
 80158be:	4604      	mov	r4, r0
 80158c0:	30a8      	adds	r0, #168	; 0xa8
 80158c2:	f840 3ca8 	str.w	r3, [r0, #-168]
 80158c6:	f820 5c24 	strh.w	r5, [r0, #-36]
 80158ca:	f7ff ffe4 	bl	8015896 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80158ce:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80158d2:	f7ff ffe0 	bl	8015896 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80158d6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80158da:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80158de:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80158e2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80158e6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80158ea:	490e      	ldr	r1, [pc, #56]	; (8015924 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80158ec:	480e      	ldr	r0, [pc, #56]	; (8015928 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80158ee:	f00a fc4f 	bl	8020190 <CRC_Lock>
 80158f2:	4e0e      	ldr	r6, [pc, #56]	; (801592c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80158f4:	4b0e      	ldr	r3, [pc, #56]	; (8015930 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80158f6:	b158      	cbz	r0, 8015910 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80158f8:	801d      	strh	r5, [r3, #0]
 80158fa:	2300      	movs	r3, #0
 80158fc:	4a0d      	ldr	r2, [pc, #52]	; (8015934 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80158fe:	4620      	mov	r0, r4
 8015900:	6013      	str	r3, [r2, #0]
 8015902:	4a0d      	ldr	r2, [pc, #52]	; (8015938 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015904:	6033      	str	r3, [r6, #0]
 8015906:	6013      	str	r3, [r2, #0]
 8015908:	f7ff ffba 	bl	8015880 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801590c:	4620      	mov	r0, r4
 801590e:	bd70      	pop	{r4, r5, r6, pc}
 8015910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015914:	2002      	movs	r0, #2
 8015916:	801a      	strh	r2, [r3, #0]
 8015918:	6030      	str	r0, [r6, #0]
 801591a:	f001 fa13 	bl	8016d44 <_ZN8touchgfx6Screen4drawEv>
 801591e:	e7ec      	b.n	80158fa <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8015920:	080239bc 	.word	0x080239bc
 8015924:	b5e8b5cd 	.word	0xb5e8b5cd
 8015928:	f407a5c2 	.word	0xf407a5c2
 801592c:	2400c830 	.word	0x2400c830
 8015930:	24000084 	.word	0x24000084
 8015934:	2400c840 	.word	0x2400c840
 8015938:	2400c834 	.word	0x2400c834

0801593c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801593c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015940:	3b01      	subs	r3, #1
 8015942:	b29b      	uxth	r3, r3
 8015944:	428b      	cmp	r3, r1
 8015946:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801594a:	b510      	push	{r4, lr}
 801594c:	d908      	bls.n	8015960 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801594e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015952:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801595c:	685a      	ldr	r2, [r3, #4]
 801595e:	6062      	str	r2, [r4, #4]
 8015960:	bd10      	pop	{r4, pc}
	...

08015964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015968:	b08f      	sub	sp, #60	; 0x3c
 801596a:	4b94      	ldr	r3, [pc, #592]	; (8015bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801596c:	4683      	mov	fp, r0
 801596e:	ac0a      	add	r4, sp, #40	; 0x28
 8015970:	e884 0006 	stmia.w	r4, {r1, r2}
 8015974:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015978:	4620      	mov	r0, r4
 801597a:	4b91      	ldr	r3, [pc, #580]	; (8015bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801597c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015980:	f7ff febb 	bl	80156fa <_ZN8touchgfx4Rect10restrictToEss>
 8015984:	4620      	mov	r0, r4
 8015986:	f7fc fa14 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801598a:	2800      	cmp	r0, #0
 801598c:	d16a      	bne.n	8015a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801598e:	9403      	str	r4, [sp, #12]
 8015990:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8015994:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8015998:	2400      	movs	r4, #0
 801599a:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801599e:	9301      	str	r3, [sp, #4]
 80159a0:	36a0      	adds	r6, #160	; 0xa0
 80159a2:	42a5      	cmp	r5, r4
 80159a4:	d00d      	beq.n	80159c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80159a6:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80159aa:	9803      	ldr	r0, [sp, #12]
 80159ac:	f7ff fef6 	bl	801579c <_ZNK8touchgfx4Rect8includesERKS0_>
 80159b0:	b128      	cbz	r0, 80159be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80159b2:	1e69      	subs	r1, r5, #1
 80159b4:	9801      	ldr	r0, [sp, #4]
 80159b6:	1b09      	subs	r1, r1, r4
 80159b8:	b289      	uxth	r1, r1
 80159ba:	f7ff ffbf 	bl	801593c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80159be:	3401      	adds	r4, #1
 80159c0:	e7ef      	b.n	80159a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80159c2:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80159c6:	1e7b      	subs	r3, r7, #1
 80159c8:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80159cc:	9704      	str	r7, [sp, #16]
 80159ce:	9302      	str	r3, [sp, #8]
 80159d0:	2400      	movs	r4, #0
 80159d2:	4655      	mov	r5, sl
 80159d4:	9705      	str	r7, [sp, #20]
 80159d6:	4626      	mov	r6, r4
 80159d8:	9b05      	ldr	r3, [sp, #20]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d078      	beq.n	8015ad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 80159de:	9903      	ldr	r1, [sp, #12]
 80159e0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80159e4:	f7fd ff4e 	bl	8013884 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80159e8:	b360      	cbz	r0, 8015a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80159ea:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80159ee:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80159f2:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80159f6:	45e6      	cmp	lr, ip
 80159f8:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80159fc:	db35      	blt.n	8015a6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80159fe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015a02:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8015a06:	4472      	add	r2, lr
 8015a08:	4463      	add	r3, ip
 8015a0a:	b212      	sxth	r2, r2
 8015a0c:	b21b      	sxth	r3, r3
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	dc2b      	bgt.n	8015a6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015a12:	fa1f f288 	uxth.w	r2, r8
 8015a16:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8015a1a:	45c1      	cmp	r9, r8
 8015a1c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015a20:	4413      	add	r3, r2
 8015a22:	fa1f fc89 	uxth.w	ip, r9
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	fa0f fe83 	sxth.w	lr, r3
 8015a2c:	db0f      	blt.n	8015a4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015a2e:	eba3 030c 	sub.w	r3, r3, ip
 8015a32:	1ac9      	subs	r1, r1, r3
 8015a34:	b209      	sxth	r1, r1
 8015a36:	2900      	cmp	r1, #0
 8015a38:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015a3c:	dd12      	ble.n	8015a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015a3e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8015a42:	4604      	mov	r4, r0
 8015a44:	9b05      	ldr	r3, [sp, #20]
 8015a46:	3d08      	subs	r5, #8
 8015a48:	3b01      	subs	r3, #1
 8015a4a:	9305      	str	r3, [sp, #20]
 8015a4c:	e7c4      	b.n	80159d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8015a4e:	4461      	add	r1, ip
 8015a50:	b209      	sxth	r1, r1
 8015a52:	4571      	cmp	r1, lr
 8015a54:	dc3a      	bgt.n	8015acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015a56:	eba2 020c 	sub.w	r2, r2, ip
 8015a5a:	b212      	sxth	r2, r2
 8015a5c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015a60:	2a00      	cmp	r2, #0
 8015a62:	dcee      	bgt.n	8015a42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015a64:	b00f      	add	sp, #60	; 0x3c
 8015a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a6a:	45c1      	cmp	r9, r8
 8015a6c:	db2e      	blt.n	8015acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015a6e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015a72:	4499      	add	r9, r3
 8015a74:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8015a78:	4498      	add	r8, r3
 8015a7a:	fa0f f989 	sxth.w	r9, r9
 8015a7e:	fa0f f888 	sxth.w	r8, r8
 8015a82:	45c1      	cmp	r9, r8
 8015a84:	dc22      	bgt.n	8015acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015a86:	fa1f f28c 	uxth.w	r2, ip
 8015a8a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8015a8e:	45e6      	cmp	lr, ip
 8015a90:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015a94:	4413      	add	r3, r2
 8015a96:	fa1f f88e 	uxth.w	r8, lr
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	fa0f f983 	sxth.w	r9, r3
 8015aa0:	db0a      	blt.n	8015ab8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8015aa2:	eba3 0308 	sub.w	r3, r3, r8
 8015aa6:	1ac9      	subs	r1, r1, r3
 8015aa8:	b209      	sxth	r1, r1
 8015aaa:	2900      	cmp	r1, #0
 8015aac:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8015ab0:	ddd8      	ble.n	8015a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015ab2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8015ab6:	e7c4      	b.n	8015a42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015ab8:	4441      	add	r1, r8
 8015aba:	b209      	sxth	r1, r1
 8015abc:	4549      	cmp	r1, r9
 8015abe:	dc05      	bgt.n	8015acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015ac0:	eba2 0208 	sub.w	r2, r2, r8
 8015ac4:	b212      	sxth	r2, r2
 8015ac6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015aca:	e7c9      	b.n	8015a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8015acc:	4606      	mov	r6, r0
 8015ace:	e7b9      	b.n	8015a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015ad0:	2c00      	cmp	r4, #0
 8015ad2:	f47f af7d 	bne.w	80159d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8015ad6:	2e00      	cmp	r6, #0
 8015ad8:	f000 81e1 	beq.w	8015e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8015adc:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8015ae0:	4655      	mov	r5, sl
 8015ae2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8015ae6:	b2b9      	uxth	r1, r7
 8015ae8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015aec:	b2b3      	uxth	r3, r6
 8015aee:	9105      	str	r1, [sp, #20]
 8015af0:	9805      	ldr	r0, [sp, #20]
 8015af2:	441a      	add	r2, r3
 8015af4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015af8:	b292      	uxth	r2, r2
 8015afa:	4401      	add	r1, r0
 8015afc:	fa0f f882 	sxth.w	r8, r2
 8015b00:	b289      	uxth	r1, r1
 8015b02:	9106      	str	r1, [sp, #24]
 8015b04:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8015b08:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015b0c:	9b04      	ldr	r3, [sp, #16]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d058      	beq.n	8015bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8015b12:	9903      	ldr	r1, [sp, #12]
 8015b14:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8015b18:	f7fd feb4 	bl	8013884 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015b1c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015b20:	b1d8      	cbz	r0, 8015b5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015b22:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8015b26:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8015b2a:	4576      	cmp	r6, lr
 8015b2c:	dc26      	bgt.n	8015b7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8015b2e:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8015b32:	44f4      	add	ip, lr
 8015b34:	fa0f fc8c 	sxth.w	ip, ip
 8015b38:	45e0      	cmp	r8, ip
 8015b3a:	db1f      	blt.n	8015b7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8015b3c:	428f      	cmp	r7, r1
 8015b3e:	fa1f fc81 	uxth.w	ip, r1
 8015b42:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8015b46:	dc0f      	bgt.n	8015b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8015b48:	9806      	ldr	r0, [sp, #24]
 8015b4a:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8015b4e:	eba0 0c0c 	sub.w	ip, r0, ip
 8015b52:	eba1 010c 	sub.w	r1, r1, ip
 8015b56:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	9904      	ldr	r1, [sp, #16]
 8015b5e:	3d08      	subs	r5, #8
 8015b60:	4604      	mov	r4, r0
 8015b62:	3901      	subs	r1, #1
 8015b64:	9104      	str	r1, [sp, #16]
 8015b66:	e7cf      	b.n	8015b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8015b68:	4461      	add	r1, ip
 8015b6a:	b209      	sxth	r1, r1
 8015b6c:	4549      	cmp	r1, r9
 8015b6e:	dcf5      	bgt.n	8015b5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015b70:	9905      	ldr	r1, [sp, #20]
 8015b72:	eba1 0c0c 	sub.w	ip, r1, ip
 8015b76:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8015b7a:	e7ee      	b.n	8015b5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015b7c:	428f      	cmp	r7, r1
 8015b7e:	dced      	bgt.n	8015b5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015b80:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8015b84:	4461      	add	r1, ip
 8015b86:	b209      	sxth	r1, r1
 8015b88:	4589      	cmp	r9, r1
 8015b8a:	dbe7      	blt.n	8015b5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015b8c:	4576      	cmp	r6, lr
 8015b8e:	fa1f fc8e 	uxth.w	ip, lr
 8015b92:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8015b96:	dc08      	bgt.n	8015baa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8015b98:	eba2 0c0c 	sub.w	ip, r2, ip
 8015b9c:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8015ba0:	eba1 010c 	sub.w	r1, r1, ip
 8015ba4:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8015ba8:	e7d7      	b.n	8015b5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015baa:	4461      	add	r1, ip
 8015bac:	b209      	sxth	r1, r1
 8015bae:	4588      	cmp	r8, r1
 8015bb0:	dbd4      	blt.n	8015b5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015bb2:	eba3 0c0c 	sub.w	ip, r3, ip
 8015bb6:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8015bba:	e7ce      	b.n	8015b5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015bbc:	2400c7ea 	.word	0x2400c7ea
 8015bc0:	2400c7e8 	.word	0x2400c7e8
 8015bc4:	2c00      	cmp	r4, #0
 8015bc6:	f000 816a 	beq.w	8015e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8015bca:	9b02      	ldr	r3, [sp, #8]
 8015bcc:	3301      	adds	r3, #1
 8015bce:	f000 8166 	beq.w	8015e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8015bd2:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8015bd6:	9803      	ldr	r0, [sp, #12]
 8015bd8:	4621      	mov	r1, r4
 8015bda:	f7ff fddf 	bl	801579c <_ZNK8touchgfx4Rect8includesERKS0_>
 8015bde:	b120      	cbz	r0, 8015bea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8015be0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8015be4:	9801      	ldr	r0, [sp, #4]
 8015be6:	f7ff fea9 	bl	801593c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015bea:	9903      	ldr	r1, [sp, #12]
 8015bec:	4620      	mov	r0, r4
 8015bee:	f7fd fe49 	bl	8013884 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	f000 809b 	beq.w	8015d2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8015bf8:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8015bfc:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8015c00:	b281      	uxth	r1, r0
 8015c02:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8015c06:	9309      	str	r3, [sp, #36]	; 0x24
 8015c08:	eb01 0c03 	add.w	ip, r1, r3
 8015c0c:	b2ab      	uxth	r3, r5
 8015c0e:	4285      	cmp	r5, r0
 8015c10:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8015c14:	fa1f f98c 	uxth.w	r9, ip
 8015c18:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015c1c:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8015c20:	eb03 040c 	add.w	r4, r3, ip
 8015c24:	b2a4      	uxth	r4, r4
 8015c26:	9405      	str	r4, [sp, #20]
 8015c28:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8015c2c:	9404      	str	r4, [sp, #16]
 8015c2e:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8015c32:	f340 809a 	ble.w	8015d6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8015c36:	1a5b      	subs	r3, r3, r1
 8015c38:	4596      	cmp	lr, r2
 8015c3a:	fa0f f589 	sxth.w	r5, r9
 8015c3e:	b29b      	uxth	r3, r3
 8015c40:	b21e      	sxth	r6, r3
 8015c42:	dd2e      	ble.n	8015ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8015c44:	9f02      	ldr	r7, [sp, #8]
 8015c46:	fa1f fe8e 	uxth.w	lr, lr
 8015c4a:	b292      	uxth	r2, r2
 8015c4c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8015c50:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015c54:	9f04      	ldr	r7, [sp, #16]
 8015c56:	ebae 0102 	sub.w	r1, lr, r2
 8015c5a:	4486      	add	lr, r0
 8015c5c:	1b7f      	subs	r7, r7, r5
 8015c5e:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8015c62:	b289      	uxth	r1, r1
 8015c64:	442a      	add	r2, r5
 8015c66:	fa0f fe8e 	sxth.w	lr, lr
 8015c6a:	b20c      	sxth	r4, r1
 8015c6c:	b212      	sxth	r2, r2
 8015c6e:	4367      	muls	r7, r4
 8015c70:	ebae 0202 	sub.w	r2, lr, r2
 8015c74:	4372      	muls	r2, r6
 8015c76:	4297      	cmp	r7, r2
 8015c78:	db09      	blt.n	8015c8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8015c7a:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8015c7e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8015c82:	449c      	add	ip, r3
 8015c84:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015c88:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015c8c:	e680      	b.n	8015990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015c8e:	4401      	add	r1, r0
 8015c90:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8015c94:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8015c98:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015c9c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015ca0:	e676      	b.n	8015990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015ca2:	9f04      	ldr	r7, [sp, #16]
 8015ca4:	42bd      	cmp	r5, r7
 8015ca6:	da27      	bge.n	8015cf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8015ca8:	9902      	ldr	r1, [sp, #8]
 8015caa:	1b7f      	subs	r7, r7, r5
 8015cac:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8015cb0:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8015cb4:	eb04 010e 	add.w	r1, r4, lr
 8015cb8:	fa1f f881 	uxth.w	r8, r1
 8015cbc:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8015cc0:	4411      	add	r1, r2
 8015cc2:	fa0f f988 	sxth.w	r9, r8
 8015cc6:	eba2 020e 	sub.w	r2, r2, lr
 8015cca:	eba1 0108 	sub.w	r1, r1, r8
 8015cce:	4372      	muls	r2, r6
 8015cd0:	b289      	uxth	r1, r1
 8015cd2:	fa0f f881 	sxth.w	r8, r1
 8015cd6:	fb08 f707 	mul.w	r7, r8, r7
 8015cda:	42ba      	cmp	r2, r7
 8015cdc:	dc06      	bgt.n	8015cec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8015cde:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8015ce2:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8015ce6:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8015cea:	e7ca      	b.n	8015c82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8015cec:	4421      	add	r1, r4
 8015cee:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8015cf2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015cf6:	e64b      	b.n	8015990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015cf8:	9d05      	ldr	r5, [sp, #20]
 8015cfa:	2c06      	cmp	r4, #6
 8015cfc:	eba9 0505 	sub.w	r5, r9, r5
 8015d00:	b2ad      	uxth	r5, r5
 8015d02:	fa0f fe85 	sxth.w	lr, r5
 8015d06:	d818      	bhi.n	8015d3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8015d08:	9b04      	ldr	r3, [sp, #16]
 8015d0a:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8015d0e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8015d12:	1c63      	adds	r3, r4, #1
 8015d14:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8015d18:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8015d1c:	9b01      	ldr	r3, [sp, #4]
 8015d1e:	9d01      	ldr	r5, [sp, #4]
 8015d20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015d24:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8015d28:	805a      	strh	r2, [r3, #2]
 8015d2a:	809e      	strh	r6, [r3, #4]
 8015d2c:	80d9      	strh	r1, [r3, #6]
 8015d2e:	9b02      	ldr	r3, [sp, #8]
 8015d30:	f1aa 0a08 	sub.w	sl, sl, #8
 8015d34:	3b01      	subs	r3, #1
 8015d36:	9302      	str	r3, [sp, #8]
 8015d38:	e747      	b.n	8015bca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8015d3a:	9a02      	ldr	r2, [sp, #8]
 8015d3c:	45b6      	cmp	lr, r6
 8015d3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015d42:	db0d      	blt.n	8015d60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8015d44:	449c      	add	ip, r3
 8015d46:	445a      	add	r2, fp
 8015d48:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8015d4c:	fa1f fc8c 	uxth.w	ip, ip
 8015d50:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8015d54:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015d58:	448c      	add	ip, r1
 8015d5a:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8015d5e:	e617      	b.n	8015990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015d60:	445a      	add	r2, fp
 8015d62:	44ac      	add	ip, r5
 8015d64:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8015d68:	e78e      	b.n	8015c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015d6a:	fa1f f18e 	uxth.w	r1, lr
 8015d6e:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8015d72:	b293      	uxth	r3, r2
 8015d74:	4596      	cmp	lr, r2
 8015d76:	eb01 0806 	add.w	r8, r1, r6
 8015d7a:	9306      	str	r3, [sp, #24]
 8015d7c:	fa1f f888 	uxth.w	r8, r8
 8015d80:	9f06      	ldr	r7, [sp, #24]
 8015d82:	fa0f f388 	sxth.w	r3, r8
 8015d86:	9307      	str	r3, [sp, #28]
 8015d88:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8015d8c:	443b      	add	r3, r7
 8015d8e:	b29b      	uxth	r3, r3
 8015d90:	9308      	str	r3, [sp, #32]
 8015d92:	da25      	bge.n	8015de0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8015d94:	9905      	ldr	r1, [sp, #20]
 8015d96:	eba3 0308 	sub.w	r3, r3, r8
 8015d9a:	eba2 020e 	sub.w	r2, r2, lr
 8015d9e:	1b40      	subs	r0, r0, r5
 8015da0:	eba9 0401 	sub.w	r4, r9, r1
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	b2a4      	uxth	r4, r4
 8015da8:	b219      	sxth	r1, r3
 8015daa:	fa0f f984 	sxth.w	r9, r4
 8015dae:	4348      	muls	r0, r1
 8015db0:	fb09 f202 	mul.w	r2, r9, r2
 8015db4:	4282      	cmp	r2, r0
 8015db6:	9a02      	ldr	r2, [sp, #8]
 8015db8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015dbc:	445a      	add	r2, fp
 8015dbe:	dc06      	bgt.n	8015dce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8015dc0:	9b07      	ldr	r3, [sp, #28]
 8015dc2:	44a4      	add	ip, r4
 8015dc4:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8015dc8:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8015dcc:	e75c      	b.n	8015c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015dce:	9904      	ldr	r1, [sp, #16]
 8015dd0:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8015dd4:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8015dd8:	4433      	add	r3, r6
 8015dda:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015dde:	e5d7      	b.n	8015990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015de0:	9f06      	ldr	r7, [sp, #24]
 8015de2:	9b04      	ldr	r3, [sp, #16]
 8015de4:	1bc9      	subs	r1, r1, r7
 8015de6:	fa0f f789 	sxth.w	r7, r9
 8015dea:	b289      	uxth	r1, r1
 8015dec:	429f      	cmp	r7, r3
 8015dee:	fa0f fe81 	sxth.w	lr, r1
 8015df2:	dd22      	ble.n	8015e3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8015df4:	9a05      	ldr	r2, [sp, #20]
 8015df6:	1b40      	subs	r0, r0, r5
 8015df8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015dfc:	eba9 0202 	sub.w	r2, r9, r2
 8015e00:	9d07      	ldr	r5, [sp, #28]
 8015e02:	fb0e f000 	mul.w	r0, lr, r0
 8015e06:	b292      	uxth	r2, r2
 8015e08:	eba5 0a03 	sub.w	sl, r5, r3
 8015e0c:	9b02      	ldr	r3, [sp, #8]
 8015e0e:	b214      	sxth	r4, r2
 8015e10:	00db      	lsls	r3, r3, #3
 8015e12:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e16:	445b      	add	r3, fp
 8015e18:	4550      	cmp	r0, sl
 8015e1a:	db03      	blt.n	8015e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8015e1c:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8015e20:	4494      	add	ip, r2
 8015e22:	e731      	b.n	8015c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015e24:	9a04      	ldr	r2, [sp, #16]
 8015e26:	4431      	add	r1, r6
 8015e28:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8015e2c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8015e30:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8015e34:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015e38:	e75b      	b.n	8015cf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8015e3a:	9b08      	ldr	r3, [sp, #32]
 8015e3c:	2c06      	cmp	r4, #6
 8015e3e:	eba3 0308 	sub.w	r3, r3, r8
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	b21d      	sxth	r5, r3
 8015e46:	d813      	bhi.n	8015e70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8015e48:	9b07      	ldr	r3, [sp, #28]
 8015e4a:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8015e4e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8015e52:	1c63      	adds	r3, r4, #1
 8015e54:	9901      	ldr	r1, [sp, #4]
 8015e56:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8015e5a:	9b01      	ldr	r3, [sp, #4]
 8015e5c:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8015e60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015e64:	805a      	strh	r2, [r3, #2]
 8015e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e68:	f8a3 e006 	strh.w	lr, [r3, #6]
 8015e6c:	809a      	strh	r2, [r3, #4]
 8015e6e:	e75e      	b.n	8015d2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8015e70:	9802      	ldr	r0, [sp, #8]
 8015e72:	4575      	cmp	r5, lr
 8015e74:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8015e78:	db0d      	blt.n	8015e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8015e7a:	4431      	add	r1, r6
 8015e7c:	9b06      	ldr	r3, [sp, #24]
 8015e7e:	4458      	add	r0, fp
 8015e80:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8015e84:	b289      	uxth	r1, r1
 8015e86:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8015e8a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015e8e:	4419      	add	r1, r3
 8015e90:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8015e94:	e57c      	b.n	8015990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015e96:	4458      	add	r0, fp
 8015e98:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8015e9c:	e79c      	b.n	8015dd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8015e9e:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8015ea2:	2e07      	cmp	r6, #7
 8015ea4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8015ea8:	d812      	bhi.n	8015ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8015eaa:	1c75      	adds	r5, r6, #1
 8015eac:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8015eb0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8015eb4:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8015eb8:	9d01      	ldr	r5, [sp, #4]
 8015eba:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8015ebe:	442c      	add	r4, r5
 8015ec0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8015ec4:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8015ec8:	8061      	strh	r1, [r4, #2]
 8015eca:	80a2      	strh	r2, [r4, #4]
 8015ecc:	80e3      	strh	r3, [r4, #6]
 8015ece:	e5c9      	b.n	8015a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015ed0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8015ed4:	3e01      	subs	r6, #1
 8015ed6:	445c      	add	r4, fp
 8015ed8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8015edc:	f04f 37ff 	mov.w	r7, #4294967295
 8015ee0:	2500      	movs	r5, #0
 8015ee2:	9305      	str	r3, [sp, #20]
 8015ee4:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8015ee8:	1e72      	subs	r2, r6, #1
 8015eea:	9302      	str	r3, [sp, #8]
 8015eec:	4691      	mov	r9, r2
 8015eee:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8015ef2:	9304      	str	r3, [sp, #16]
 8015ef4:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8015ef8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8015efc:	6818      	ldr	r0, [r3, #0]
 8015efe:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015f02:	9207      	str	r2, [sp, #28]
 8015f04:	bf16      	itet	ne
 8015f06:	9905      	ldrne	r1, [sp, #20]
 8015f08:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8015f0c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8015f10:	9306      	str	r3, [sp, #24]
 8015f12:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8015f16:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8015f1a:	fb18 f801 	smulbb	r8, r8, r1
 8015f1e:	6859      	ldr	r1, [r3, #4]
 8015f20:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015f24:	4671      	mov	r1, lr
 8015f26:	a80c      	add	r0, sp, #48	; 0x30
 8015f28:	f7ff fc5e 	bl	80157e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015f2c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8015f30:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8015f34:	f04f 0c08 	mov.w	ip, #8
 8015f38:	9b04      	ldr	r3, [sp, #16]
 8015f3a:	9a02      	ldr	r2, [sp, #8]
 8015f3c:	fb10 f001 	smulbb	r0, r0, r1
 8015f40:	fb02 8803 	mla	r8, r2, r3, r8
 8015f44:	eba0 0108 	sub.w	r1, r0, r8
 8015f48:	fb90 f0fc 	sdiv	r0, r0, ip
 8015f4c:	4288      	cmp	r0, r1
 8015f4e:	dc20      	bgt.n	8015f92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8015f50:	4551      	cmp	r1, sl
 8015f52:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015f56:	da03      	bge.n	8015f60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8015f58:	b1d9      	cbz	r1, 8015f92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8015f5a:	468a      	mov	sl, r1
 8015f5c:	464f      	mov	r7, r9
 8015f5e:	4635      	mov	r5, r6
 8015f60:	f109 39ff 	add.w	r9, r9, #4294967295
 8015f64:	f119 0f02 	cmn.w	r9, #2
 8015f68:	d1c6      	bne.n	8015ef8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8015f6a:	4616      	mov	r6, r2
 8015f6c:	3201      	adds	r2, #1
 8015f6e:	f1a4 0408 	sub.w	r4, r4, #8
 8015f72:	d1b7      	bne.n	8015ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8015f74:	9b01      	ldr	r3, [sp, #4]
 8015f76:	b2ac      	uxth	r4, r5
 8015f78:	00ed      	lsls	r5, r5, #3
 8015f7a:	1958      	adds	r0, r3, r5
 8015f7c:	1c7b      	adds	r3, r7, #1
 8015f7e:	d10b      	bne.n	8015f98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8015f80:	4601      	mov	r1, r0
 8015f82:	9803      	ldr	r0, [sp, #12]
 8015f84:	f7ff fc30 	bl	80157e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015f88:	4621      	mov	r1, r4
 8015f8a:	9801      	ldr	r0, [sp, #4]
 8015f8c:	f7ff fcd6 	bl	801593c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015f90:	e4fe      	b.n	8015990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015f92:	464f      	mov	r7, r9
 8015f94:	4635      	mov	r5, r6
 8015f96:	e7ed      	b.n	8015f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8015f98:	9b01      	ldr	r3, [sp, #4]
 8015f9a:	00ff      	lsls	r7, r7, #3
 8015f9c:	445d      	add	r5, fp
 8015f9e:	19d9      	adds	r1, r3, r7
 8015fa0:	445f      	add	r7, fp
 8015fa2:	f7ff fc21 	bl	80157e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015fa6:	9b03      	ldr	r3, [sp, #12]
 8015fa8:	cb03      	ldmia	r3!, {r0, r1}
 8015faa:	9b03      	ldr	r3, [sp, #12]
 8015fac:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8015fb0:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8015fb4:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8015fb8:	6869      	ldr	r1, [r5, #4]
 8015fba:	c303      	stmia	r3!, {r0, r1}
 8015fbc:	e7e4      	b.n	8015f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8015fbe:	bf00      	nop

08015fc0 <_ZN8touchgfx11Application10invalidateEv>:
 8015fc0:	4b09      	ldr	r3, [pc, #36]	; (8015fe8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	2100      	movs	r1, #0
 8015fc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015fca:	4b08      	ldr	r3, [pc, #32]	; (8015fec <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8015fcc:	9100      	str	r1, [sp, #0]
 8015fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fd2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015fd6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015fda:	ab02      	add	r3, sp, #8
 8015fdc:	e913 0006 	ldmdb	r3, {r1, r2}
 8015fe0:	b002      	add	sp, #8
 8015fe2:	f7ff bcbf 	b.w	8015964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015fe6:	bf00      	nop
 8015fe8:	2400c7e8 	.word	0x2400c7e8
 8015fec:	2400c7ea 	.word	0x2400c7ea

08015ff0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8015ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff4:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8015ff8:	b09b      	sub	sp, #108	; 0x6c
 8015ffa:	4604      	mov	r4, r0
 8015ffc:	4630      	mov	r0, r6
 8015ffe:	f7fb fed8 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016002:	4605      	mov	r5, r0
 8016004:	b940      	cbnz	r0, 8016018 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016006:	4620      	mov	r0, r4
 8016008:	e896 0006 	ldmia.w	r6, {r1, r2}
 801600c:	f7ff fcaa 	bl	8015964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016010:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8016014:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016018:	4bc8      	ldr	r3, [pc, #800]	; (801633c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d03e      	beq.n	801609e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016020:	4dc7      	ldr	r5, [pc, #796]	; (8016340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016022:	4628      	mov	r0, r5
 8016024:	f7fb fec5 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016028:	4606      	mov	r6, r0
 801602a:	2800      	cmp	r0, #0
 801602c:	d137      	bne.n	801609e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801602e:	4628      	mov	r0, r5
 8016030:	f7ff fa24 	bl	801547c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016034:	6829      	ldr	r1, [r5, #0]
 8016036:	686a      	ldr	r2, [r5, #4]
 8016038:	4620      	mov	r0, r4
 801603a:	f7ff fc93 	bl	8015964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801603e:	802e      	strh	r6, [r5, #0]
 8016040:	806e      	strh	r6, [r5, #2]
 8016042:	80ae      	strh	r6, [r5, #4]
 8016044:	80ee      	strh	r6, [r5, #6]
 8016046:	ae09      	add	r6, sp, #36	; 0x24
 8016048:	4630      	mov	r0, r6
 801604a:	f7ff fc24 	bl	8015896 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801604e:	4abd      	ldr	r2, [pc, #756]	; (8016344 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016050:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8016054:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8016058:	8815      	ldrh	r5, [r2, #0]
 801605a:	9202      	str	r2, [sp, #8]
 801605c:	462b      	mov	r3, r5
 801605e:	429f      	cmp	r7, r3
 8016060:	d924      	bls.n	80160ac <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8016062:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8016066:	2907      	cmp	r1, #7
 8016068:	d816      	bhi.n	8016098 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801606a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801606e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016072:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8016076:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801607a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801607e:	1c4a      	adds	r2, r1, #1
 8016080:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8016084:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8016088:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801608c:	f8a2 9002 	strh.w	r9, [r2, #2]
 8016090:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016094:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016098:	3301      	adds	r3, #1
 801609a:	b29b      	uxth	r3, r3
 801609c:	e7df      	b.n	801605e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801609e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d1cf      	bne.n	8016046 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80160a6:	b01b      	add	sp, #108	; 0x6c
 80160a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160ac:	462f      	mov	r7, r5
 80160ae:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80160b2:	42bb      	cmp	r3, r7
 80160b4:	d90b      	bls.n	80160ce <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80160b6:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80160ba:	3701      	adds	r7, #1
 80160bc:	4620      	mov	r0, r4
 80160be:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80160c2:	b2bf      	uxth	r7, r7
 80160c4:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80160c8:	f7ff fc4c 	bl	8015964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80160cc:	e7ef      	b.n	80160ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80160ce:	4a9e      	ldr	r2, [pc, #632]	; (8016348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80160d0:	6813      	ldr	r3, [r2, #0]
 80160d2:	4690      	mov	r8, r2
 80160d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80160d8:	2b01      	cmp	r3, #1
 80160da:	f040 80e4 	bne.w	80162a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80160de:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80160e2:	4629      	mov	r1, r5
 80160e4:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80160e8:	2500      	movs	r5, #0
 80160ea:	33aa      	adds	r3, #170	; 0xaa
 80160ec:	428f      	cmp	r7, r1
 80160ee:	f103 0308 	add.w	r3, r3, #8
 80160f2:	dd0a      	ble.n	801610a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80160f4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80160f8:	3101      	adds	r1, #1
 80160fa:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80160fe:	4402      	add	r2, r0
 8016100:	b212      	sxth	r2, r2
 8016102:	4295      	cmp	r5, r2
 8016104:	bfb8      	it	lt
 8016106:	4615      	movlt	r5, r2
 8016108:	e7f0      	b.n	80160ec <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801610a:	4b90      	ldr	r3, [pc, #576]	; (801634c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801610c:	f8df b238 	ldr.w	fp, [pc, #568]	; 8016348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8016110:	881b      	ldrh	r3, [r3, #0]
 8016112:	46d8      	mov	r8, fp
 8016114:	2b0f      	cmp	r3, #15
 8016116:	bf8c      	ite	hi
 8016118:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801611c:	f04f 0a01 	movls.w	sl, #1
 8016120:	2300      	movs	r3, #0
 8016122:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016126:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801612a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801612e:	4438      	add	r0, r7
 8016130:	b207      	sxth	r7, r0
 8016132:	f8db 0000 	ldr.w	r0, [fp]
 8016136:	42bd      	cmp	r5, r7
 8016138:	6803      	ldr	r3, [r0, #0]
 801613a:	f340 8084 	ble.w	8016246 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801613e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016142:	4798      	blx	r3
 8016144:	eb07 030a 	add.w	r3, r7, sl
 8016148:	4298      	cmp	r0, r3
 801614a:	da07      	bge.n	801615c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801614c:	4285      	cmp	r5, r0
 801614e:	dd05      	ble.n	801615c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016150:	4287      	cmp	r7, r0
 8016152:	dd6d      	ble.n	8016230 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016154:	2f00      	cmp	r7, #0
 8016156:	dd6b      	ble.n	8016230 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016158:	4628      	mov	r0, r5
 801615a:	e004      	b.n	8016166 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801615c:	4287      	cmp	r7, r0
 801615e:	dcfb      	bgt.n	8016158 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8016160:	42a8      	cmp	r0, r5
 8016162:	bfa8      	it	ge
 8016164:	4628      	movge	r0, r5
 8016166:	4b7a      	ldr	r3, [pc, #488]	; (8016350 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016168:	1bc0      	subs	r0, r0, r7
 801616a:	2200      	movs	r2, #0
 801616c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016174:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016178:	f8ad 3018 	strh.w	r3, [sp, #24]
 801617c:	9b02      	ldr	r3, [sp, #8]
 801617e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016182:	881f      	ldrh	r7, [r3, #0]
 8016184:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016188:	42bb      	cmp	r3, r7
 801618a:	d9cc      	bls.n	8016126 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801618c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016190:	ab07      	add	r3, sp, #28
 8016192:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016196:	6851      	ldr	r1, [r2, #4]
 8016198:	c303      	stmia	r3!, {r0, r1}
 801619a:	a905      	add	r1, sp, #20
 801619c:	a807      	add	r0, sp, #28
 801619e:	f7fd fb71 	bl	8013884 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d04c      	beq.n	8016240 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80161a6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80161aa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80161ae:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80161b2:	4686      	mov	lr, r0
 80161b4:	4290      	cmp	r0, r2
 80161b6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80161ba:	4448      	add	r0, r9
 80161bc:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80161c0:	bfb8      	it	lt
 80161c2:	4696      	movlt	lr, r2
 80161c4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80161c8:	444a      	add	r2, r9
 80161ca:	b280      	uxth	r0, r0
 80161cc:	4299      	cmp	r1, r3
 80161ce:	468c      	mov	ip, r1
 80161d0:	b292      	uxth	r2, r2
 80161d2:	9303      	str	r3, [sp, #12]
 80161d4:	bfb8      	it	lt
 80161d6:	469c      	movlt	ip, r3
 80161d8:	b203      	sxth	r3, r0
 80161da:	fa0f f982 	sxth.w	r9, r2
 80161de:	f8ad e01c 	strh.w	lr, [sp, #28]
 80161e2:	f8ad c01e 	strh.w	ip, [sp, #30]
 80161e6:	454b      	cmp	r3, r9
 80161e8:	bfb8      	it	lt
 80161ea:	4602      	movlt	r2, r0
 80161ec:	9b03      	ldr	r3, [sp, #12]
 80161ee:	eba2 020e 	sub.w	r2, r2, lr
 80161f2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80161f6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80161fa:	4411      	add	r1, r2
 80161fc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016200:	4413      	add	r3, r2
 8016202:	b289      	uxth	r1, r1
 8016204:	b29b      	uxth	r3, r3
 8016206:	b208      	sxth	r0, r1
 8016208:	b21a      	sxth	r2, r3
 801620a:	4290      	cmp	r0, r2
 801620c:	bfb8      	it	lt
 801620e:	460b      	movlt	r3, r1
 8016210:	eba3 030c 	sub.w	r3, r3, ip
 8016214:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016218:	a807      	add	r0, sp, #28
 801621a:	f7fb fdca 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801621e:	b920      	cbnz	r0, 801622a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	a907      	add	r1, sp, #28
 8016224:	4620      	mov	r0, r4
 8016226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016228:	4798      	blx	r3
 801622a:	3701      	adds	r7, #1
 801622c:	b2bf      	uxth	r7, r7
 801622e:	e7a9      	b.n	8016184 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8016230:	f8d8 0000 	ldr.w	r0, [r8]
 8016234:	2101      	movs	r1, #1
 8016236:	6803      	ldr	r3, [r0, #0]
 8016238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801623c:	4798      	blx	r3
 801623e:	e772      	b.n	8016126 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016240:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016244:	e7e8      	b.n	8016218 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8016246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016248:	4798      	blx	r3
 801624a:	4b42      	ldr	r3, [pc, #264]	; (8016354 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801624c:	781b      	ldrb	r3, [r3, #0]
 801624e:	2b00      	cmp	r3, #0
 8016250:	f43f af29 	beq.w	80160a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016254:	2300      	movs	r3, #0
 8016256:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801625a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801625e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8016262:	9b02      	ldr	r3, [sp, #8]
 8016264:	881b      	ldrh	r3, [r3, #0]
 8016266:	429d      	cmp	r5, r3
 8016268:	f67f af1d 	bls.w	80160a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801626c:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8016270:	2907      	cmp	r1, #7
 8016272:	d815      	bhi.n	80162a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8016274:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8016278:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801627c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016280:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8016284:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8016288:	1c4a      	adds	r2, r1, #1
 801628a:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801628e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8016292:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8016296:	f8a2 e002 	strh.w	lr, [r2, #2]
 801629a:	f8a2 c004 	strh.w	ip, [r2, #4]
 801629e:	80d7      	strh	r7, [r2, #6]
 80162a0:	3301      	adds	r3, #1
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	e7df      	b.n	8016266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 80162a6:	2b02      	cmp	r3, #2
 80162a8:	f040 8135 	bne.w	8016516 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80162ac:	4b2a      	ldr	r3, [pc, #168]	; (8016358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80162ae:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	2b01      	cmp	r3, #1
 80162b6:	f000 809c 	beq.w	80163f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80162ba:	9b02      	ldr	r3, [sp, #8]
 80162bc:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 80162c0:	f8b3 b000 	ldrh.w	fp, [r3]
 80162c4:	f10b 0b01 	add.w	fp, fp, #1
 80162c8:	fa1f fb8b 	uxth.w	fp, fp
 80162cc:	2a00      	cmp	r2, #0
 80162ce:	d0bc      	beq.n	801624a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80162d0:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80162d4:	4659      	mov	r1, fp
 80162d6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80162da:	f04f 0800 	mov.w	r8, #0
 80162de:	441d      	add	r5, r3
 80162e0:	b22d      	sxth	r5, r5
 80162e2:	b28b      	uxth	r3, r1
 80162e4:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80162e8:	429a      	cmp	r2, r3
 80162ea:	f240 80c0 	bls.w	801646e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 80162ee:	4427      	add	r7, r4
 80162f0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80162f4:	4608      	mov	r0, r1
 80162f6:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80162fa:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 80162fe:	4563      	cmp	r3, ip
 8016300:	f340 80a2 	ble.w	8016448 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8016304:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8016308:	4465      	add	r5, ip
 801630a:	b22d      	sxth	r5, r5
 801630c:	429d      	cmp	r5, r3
 801630e:	bfa8      	it	ge
 8016310:	461d      	movge	r5, r3
 8016312:	3101      	adds	r1, #1
 8016314:	4680      	mov	r8, r0
 8016316:	e7e4      	b.n	80162e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8016318:	d10b      	bne.n	8016332 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801631a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801631e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8016322:	458c      	cmp	ip, r1
 8016324:	bfb4      	ite	lt
 8016326:	469c      	movlt	ip, r3
 8016328:	46bc      	movge	ip, r7
 801632a:	4572      	cmp	r2, lr
 801632c:	bfb8      	it	lt
 801632e:	4672      	movlt	r2, lr
 8016330:	e087      	b.n	8016442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016332:	428a      	cmp	r2, r1
 8016334:	46bc      	mov	ip, r7
 8016336:	bfb8      	it	lt
 8016338:	460a      	movlt	r2, r1
 801633a:	e082      	b.n	8016442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801633c:	2400c82c 	.word	0x2400c82c
 8016340:	2400c838 	.word	0x2400c838
 8016344:	24000084 	.word	0x24000084
 8016348:	2400c7f4 	.word	0x2400c7f4
 801634c:	2400c7ea 	.word	0x2400c7ea
 8016350:	2400c7e8 	.word	0x2400c7e8
 8016354:	2400c7f2 	.word	0x2400c7f2
 8016358:	2400c7ec 	.word	0x2400c7ec
 801635c:	1961      	adds	r1, r4, r5
 801635e:	ab07      	add	r3, sp, #28
 8016360:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8016364:	6849      	ldr	r1, [r1, #4]
 8016366:	c303      	stmia	r3!, {r0, r1}
 8016368:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801636c:	a807      	add	r0, sp, #28
 801636e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016372:	2b13      	cmp	r3, #19
 8016374:	440b      	add	r3, r1
 8016376:	bfd8      	it	le
 8016378:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801637c:	1a9b      	subs	r3, r3, r2
 801637e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016382:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016386:	f7ff f893 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801638a:	a807      	add	r0, sp, #28
 801638c:	f7fb fd11 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016390:	bb78      	cbnz	r0, 80163f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016392:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016396:	4425      	add	r5, r4
 8016398:	f8d8 0000 	ldr.w	r0, [r8]
 801639c:	f1bc 0f14 	cmp.w	ip, #20
 80163a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80163a4:	f8d0 e000 	ldr.w	lr, [r0]
 80163a8:	bfa8      	it	ge
 80163aa:	f04f 0c14 	movge.w	ip, #20
 80163ae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80163b2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80163b6:	fa1f fc8c 	uxth.w	ip, ip
 80163ba:	f8cd c000 	str.w	ip, [sp]
 80163be:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80163c2:	47d0      	blx	sl
 80163c4:	4682      	mov	sl, r0
 80163c6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80163ca:	a807      	add	r0, sp, #28
 80163cc:	f7ff f856 	bl	801547c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80163d0:	6823      	ldr	r3, [r4, #0]
 80163d2:	4620      	mov	r0, r4
 80163d4:	a907      	add	r1, sp, #28
 80163d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163d8:	4798      	blx	r3
 80163da:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80163de:	eba0 000a 	sub.w	r0, r0, sl
 80163e2:	b200      	sxth	r0, r0
 80163e4:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80163e8:	b918      	cbnz	r0, 80163f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80163ea:	b2b9      	uxth	r1, r7
 80163ec:	4648      	mov	r0, r9
 80163ee:	f7ff faa5 	bl	801593c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80163f2:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80163f6:	f1bb 0f00 	cmp.w	fp, #0
 80163fa:	f43f af26 	beq.w	801624a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80163fe:	9b02      	ldr	r3, [sp, #8]
 8016400:	2700      	movs	r7, #0
 8016402:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8016406:	881b      	ldrh	r3, [r3, #0]
 8016408:	3301      	adds	r3, #1
 801640a:	b29b      	uxth	r3, r3
 801640c:	b299      	uxth	r1, r3
 801640e:	00fd      	lsls	r5, r7, #3
 8016410:	458b      	cmp	fp, r1
 8016412:	d9a3      	bls.n	801635c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8016414:	4425      	add	r5, r4
 8016416:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801641a:	469c      	mov	ip, r3
 801641c:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8016420:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8016424:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8016428:	4408      	add	r0, r1
 801642a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801642e:	4471      	add	r1, lr
 8016430:	b200      	sxth	r0, r0
 8016432:	b209      	sxth	r1, r1
 8016434:	4288      	cmp	r0, r1
 8016436:	f6bf af6f 	bge.w	8016318 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801643a:	4586      	cmp	lr, r0
 801643c:	4672      	mov	r2, lr
 801643e:	bfb8      	it	lt
 8016440:	4602      	movlt	r2, r0
 8016442:	3301      	adds	r3, #1
 8016444:	4667      	mov	r7, ip
 8016446:	e7e1      	b.n	801640c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8016448:	d10c      	bne.n	8016464 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801644a:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801644e:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8016452:	4287      	cmp	r7, r0
 8016454:	bfb4      	ite	lt
 8016456:	4608      	movlt	r0, r1
 8016458:	4640      	movge	r0, r8
 801645a:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801645e:	443b      	add	r3, r7
 8016460:	b21b      	sxth	r3, r3
 8016462:	e753      	b.n	801630c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8016464:	4565      	cmp	r5, ip
 8016466:	4640      	mov	r0, r8
 8016468:	bfa8      	it	ge
 801646a:	4665      	movge	r5, ip
 801646c:	e751      	b.n	8016312 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801646e:	eb09 0007 	add.w	r0, r9, r7
 8016472:	4427      	add	r7, r4
 8016474:	9203      	str	r2, [sp, #12]
 8016476:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801647a:	f1ba 0f13 	cmp.w	sl, #19
 801647e:	bfde      	ittt	le
 8016480:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8016484:	4455      	addle	r5, sl
 8016486:	b22d      	sxthle	r5, r5
 8016488:	f7fb fc93 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801648c:	9a03      	ldr	r2, [sp, #12]
 801648e:	2800      	cmp	r0, #0
 8016490:	f47f af1c 	bne.w	80162cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8016494:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8016498:	fa1f fa8a 	uxth.w	sl, sl
 801649c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80164a0:	1aad      	subs	r5, r5, r2
 80164a2:	4829      	ldr	r0, [pc, #164]	; (8016548 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 80164a4:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 80164a8:	2d14      	cmp	r5, #20
 80164aa:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80164ae:	6800      	ldr	r0, [r0, #0]
 80164b0:	bfa8      	it	ge
 80164b2:	2514      	movge	r5, #20
 80164b4:	f8ad 101c 	strh.w	r1, [sp, #28]
 80164b8:	f8ad 201e 	strh.w	r2, [sp, #30]
 80164bc:	b289      	uxth	r1, r1
 80164be:	f8ad 3020 	strh.w	r3, [sp, #32]
 80164c2:	b2ad      	uxth	r5, r5
 80164c4:	f8d0 c000 	ldr.w	ip, [r0]
 80164c8:	b292      	uxth	r2, r2
 80164ca:	4555      	cmp	r5, sl
 80164cc:	bf94      	ite	ls
 80164ce:	9500      	strls	r5, [sp, #0]
 80164d0:	f8cd a000 	strhi.w	sl, [sp]
 80164d4:	b29b      	uxth	r3, r3
 80164d6:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80164da:	47a8      	blx	r5
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80164e2:	a907      	add	r1, sp, #28
 80164e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164e6:	4620      	mov	r0, r4
 80164e8:	4798      	blx	r3
 80164ea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80164ee:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80164f2:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80164f6:	1a5b      	subs	r3, r3, r1
 80164f8:	440a      	add	r2, r1
 80164fa:	b21b      	sxth	r3, r3
 80164fc:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8016500:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8016504:	2b00      	cmp	r3, #0
 8016506:	f47f aed8 	bne.w	80162ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801650a:	fa1f f188 	uxth.w	r1, r8
 801650e:	4648      	mov	r0, r9
 8016510:	f7ff fa14 	bl	801593c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016514:	e6d1      	b.n	80162ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016516:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801651a:	42ab      	cmp	r3, r5
 801651c:	f67f ae95 	bls.w	801624a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016520:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016524:	ab07      	add	r3, sp, #28
 8016526:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801652a:	6851      	ldr	r1, [r2, #4]
 801652c:	c303      	stmia	r3!, {r0, r1}
 801652e:	a807      	add	r0, sp, #28
 8016530:	f7fb fc3f 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016534:	b920      	cbnz	r0, 8016540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8016536:	6823      	ldr	r3, [r4, #0]
 8016538:	a907      	add	r1, sp, #28
 801653a:	4620      	mov	r0, r4
 801653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801653e:	4798      	blx	r3
 8016540:	3501      	adds	r5, #1
 8016542:	b2ad      	uxth	r5, r5
 8016544:	e7e7      	b.n	8016516 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016546:	bf00      	nop
 8016548:	2400c7f4 	.word	0x2400c7f4

0801654c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801654c:	4b03      	ldr	r3, [pc, #12]	; (801655c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801654e:	2200      	movs	r2, #0
 8016550:	801a      	strh	r2, [r3, #0]
 8016552:	805a      	strh	r2, [r3, #2]
 8016554:	809a      	strh	r2, [r3, #4]
 8016556:	80da      	strh	r2, [r3, #6]
 8016558:	4770      	bx	lr
 801655a:	bf00      	nop
 801655c:	2400c838 	.word	0x2400c838

08016560 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016564:	b09d      	sub	sp, #116	; 0x74
 8016566:	4606      	mov	r6, r0
 8016568:	4614      	mov	r4, r2
 801656a:	468a      	mov	sl, r1
 801656c:	a803      	add	r0, sp, #12
 801656e:	461d      	mov	r5, r3
 8016570:	f000 fd62 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 8016574:	6833      	ldr	r3, [r6, #0]
 8016576:	4630      	mov	r0, r6
 8016578:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801657e:	4798      	blx	r3
 8016580:	6833      	ldr	r3, [r6, #0]
 8016582:	4607      	mov	r7, r0
 8016584:	4630      	mov	r0, r6
 8016586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016588:	4798      	blx	r3
 801658a:	462a      	mov	r2, r5
 801658c:	2500      	movs	r5, #0
 801658e:	4621      	mov	r1, r4
 8016590:	9000      	str	r0, [sp, #0]
 8016592:	463b      	mov	r3, r7
 8016594:	462c      	mov	r4, r5
 8016596:	46a9      	mov	r9, r5
 8016598:	46a8      	mov	r8, r5
 801659a:	a803      	add	r0, sp, #12
 801659c:	f000 fda7 	bl	80170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80165a0:	2300      	movs	r3, #0
 80165a2:	9302      	str	r3, [sp, #8]
 80165a4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80165a8:	429c      	cmp	r4, r3
 80165aa:	d002      	beq.n	80165b2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80165ac:	455c      	cmp	r4, fp
 80165ae:	bf18      	it	ne
 80165b0:	4625      	movne	r5, r4
 80165b2:	ab02      	add	r3, sp, #8
 80165b4:	4632      	mov	r2, r6
 80165b6:	4651      	mov	r1, sl
 80165b8:	a803      	add	r0, sp, #12
 80165ba:	f001 f89d 	bl	80176f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80165be:	4604      	mov	r4, r0
 80165c0:	b108      	cbz	r0, 80165c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80165c2:	280a      	cmp	r0, #10
 80165c4:	d10a      	bne.n	80165dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80165c6:	45c1      	cmp	r9, r8
 80165c8:	bf38      	it	cc
 80165ca:	46c1      	movcc	r9, r8
 80165cc:	f04f 0800 	mov.w	r8, #0
 80165d0:	2c00      	cmp	r4, #0
 80165d2:	d1e5      	bne.n	80165a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80165d4:	4648      	mov	r0, r9
 80165d6:	b01d      	add	sp, #116	; 0x74
 80165d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165dc:	9a02      	ldr	r2, [sp, #8]
 80165de:	2a00      	cmp	r2, #0
 80165e0:	d0de      	beq.n	80165a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80165e2:	7b57      	ldrb	r7, [r2, #13]
 80165e4:	4629      	mov	r1, r5
 80165e6:	6833      	ldr	r3, [r6, #0]
 80165e8:	007f      	lsls	r7, r7, #1
 80165ea:	8894      	ldrh	r4, [r2, #4]
 80165ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165ee:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80165f2:	7a97      	ldrb	r7, [r2, #10]
 80165f4:	4307      	orrs	r7, r0
 80165f6:	4630      	mov	r0, r6
 80165f8:	4798      	blx	r3
 80165fa:	4438      	add	r0, r7
 80165fc:	4480      	add	r8, r0
 80165fe:	fa1f f888 	uxth.w	r8, r8
 8016602:	e7e5      	b.n	80165d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016604 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016604:	b508      	push	{r3, lr}
 8016606:	6803      	ldr	r3, [r0, #0]
 8016608:	68db      	ldr	r3, [r3, #12]
 801660a:	4798      	blx	r3
 801660c:	b128      	cbz	r0, 801661a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801660e:	7b43      	ldrb	r3, [r0, #13]
 8016610:	7a80      	ldrb	r0, [r0, #10]
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016618:	4318      	orrs	r0, r3
 801661a:	bd08      	pop	{r3, pc}

0801661c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801661c:	b40e      	push	{r1, r2, r3}
 801661e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016620:	b09e      	sub	sp, #120	; 0x78
 8016622:	4605      	mov	r5, r0
 8016624:	ab23      	add	r3, sp, #140	; 0x8c
 8016626:	a805      	add	r0, sp, #20
 8016628:	f853 4b04 	ldr.w	r4, [r3], #4
 801662c:	9303      	str	r3, [sp, #12]
 801662e:	f000 fd03 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 8016632:	682b      	ldr	r3, [r5, #0]
 8016634:	4628      	mov	r0, r5
 8016636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016638:	4798      	blx	r3
 801663a:	682b      	ldr	r3, [r5, #0]
 801663c:	4606      	mov	r6, r0
 801663e:	4628      	mov	r0, r5
 8016640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016642:	4798      	blx	r3
 8016644:	4633      	mov	r3, r6
 8016646:	4621      	mov	r1, r4
 8016648:	ae1e      	add	r6, sp, #120	; 0x78
 801664a:	2400      	movs	r4, #0
 801664c:	9000      	str	r0, [sp, #0]
 801664e:	9a03      	ldr	r2, [sp, #12]
 8016650:	a805      	add	r0, sp, #20
 8016652:	f000 fd4c 	bl	80170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016656:	f846 4d68 	str.w	r4, [r6, #-104]!
 801665a:	462a      	mov	r2, r5
 801665c:	4633      	mov	r3, r6
 801665e:	4621      	mov	r1, r4
 8016660:	a805      	add	r0, sp, #20
 8016662:	f001 f849 	bl	80176f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016666:	b300      	cbz	r0, 80166aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8016668:	280a      	cmp	r0, #10
 801666a:	d01a      	beq.n	80166a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801666c:	9f04      	ldr	r7, [sp, #16]
 801666e:	b1c7      	cbz	r7, 80166a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016670:	7b78      	ldrb	r0, [r7, #13]
 8016672:	7a3b      	ldrb	r3, [r7, #8]
 8016674:	00c1      	lsls	r1, r0, #3
 8016676:	88aa      	ldrh	r2, [r5, #4]
 8016678:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801667c:	4319      	orrs	r1, r3
 801667e:	0643      	lsls	r3, r0, #25
 8016680:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8016684:	bf48      	it	mi
 8016686:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801668a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801668e:	bf48      	it	mi
 8016690:	b219      	sxthmi	r1, r3
 8016692:	79fb      	ldrb	r3, [r7, #7]
 8016694:	4303      	orrs	r3, r0
 8016696:	4413      	add	r3, r2
 8016698:	1a5b      	subs	r3, r3, r1
 801669a:	b29b      	uxth	r3, r3
 801669c:	42a3      	cmp	r3, r4
 801669e:	bfc8      	it	gt
 80166a0:	b21c      	sxthgt	r4, r3
 80166a2:	4633      	mov	r3, r6
 80166a4:	462a      	mov	r2, r5
 80166a6:	2100      	movs	r1, #0
 80166a8:	e7da      	b.n	8016660 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80166aa:	b2a0      	uxth	r0, r4
 80166ac:	b01e      	add	sp, #120	; 0x78
 80166ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80166b2:	b003      	add	sp, #12
 80166b4:	4770      	bx	lr

080166b6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80166b6:	b40e      	push	{r1, r2, r3}
 80166b8:	b570      	push	{r4, r5, r6, lr}
 80166ba:	b09d      	sub	sp, #116	; 0x74
 80166bc:	4604      	mov	r4, r0
 80166be:	ab21      	add	r3, sp, #132	; 0x84
 80166c0:	a803      	add	r0, sp, #12
 80166c2:	f853 5b04 	ldr.w	r5, [r3], #4
 80166c6:	9302      	str	r3, [sp, #8]
 80166c8:	f000 fcb6 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 80166cc:	6823      	ldr	r3, [r4, #0]
 80166ce:	4620      	mov	r0, r4
 80166d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166d2:	4798      	blx	r3
 80166d4:	6823      	ldr	r3, [r4, #0]
 80166d6:	4606      	mov	r6, r0
 80166d8:	4620      	mov	r0, r4
 80166da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80166dc:	2401      	movs	r4, #1
 80166de:	4798      	blx	r3
 80166e0:	4633      	mov	r3, r6
 80166e2:	9000      	str	r0, [sp, #0]
 80166e4:	4629      	mov	r1, r5
 80166e6:	9a02      	ldr	r2, [sp, #8]
 80166e8:	a803      	add	r0, sp, #12
 80166ea:	f000 fd00 	bl	80170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80166ee:	a803      	add	r0, sp, #12
 80166f0:	f001 f8ce 	bl	8017890 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80166f4:	b2a3      	uxth	r3, r4
 80166f6:	b138      	cbz	r0, 8016708 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80166f8:	280a      	cmp	r0, #10
 80166fa:	a803      	add	r0, sp, #12
 80166fc:	bf04      	itt	eq
 80166fe:	3301      	addeq	r3, #1
 8016700:	b21c      	sxtheq	r4, r3
 8016702:	f001 f8c5 	bl	8017890 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016706:	e7f5      	b.n	80166f4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016708:	4618      	mov	r0, r3
 801670a:	b01d      	add	sp, #116	; 0x74
 801670c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016710:	b003      	add	sp, #12
 8016712:	4770      	bx	lr

08016714 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016714:	b40e      	push	{r1, r2, r3}
 8016716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016718:	b09e      	sub	sp, #120	; 0x78
 801671a:	4604      	mov	r4, r0
 801671c:	ab23      	add	r3, sp, #140	; 0x8c
 801671e:	a805      	add	r0, sp, #20
 8016720:	f853 5b04 	ldr.w	r5, [r3], #4
 8016724:	9303      	str	r3, [sp, #12]
 8016726:	f000 fc87 	bl	8017038 <_ZN8touchgfx12TextProviderC1Ev>
 801672a:	6823      	ldr	r3, [r4, #0]
 801672c:	4620      	mov	r0, r4
 801672e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016730:	4798      	blx	r3
 8016732:	6823      	ldr	r3, [r4, #0]
 8016734:	4606      	mov	r6, r0
 8016736:	4620      	mov	r0, r4
 8016738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801673a:	4798      	blx	r3
 801673c:	4633      	mov	r3, r6
 801673e:	4629      	mov	r1, r5
 8016740:	9000      	str	r0, [sp, #0]
 8016742:	9a03      	ldr	r2, [sp, #12]
 8016744:	a805      	add	r0, sp, #20
 8016746:	f000 fcd2 	bl	80170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801674a:	ad1e      	add	r5, sp, #120	; 0x78
 801674c:	2100      	movs	r1, #0
 801674e:	26ff      	movs	r6, #255	; 0xff
 8016750:	4622      	mov	r2, r4
 8016752:	a805      	add	r0, sp, #20
 8016754:	f845 1d68 	str.w	r1, [r5, #-104]!
 8016758:	462b      	mov	r3, r5
 801675a:	f000 ffcd 	bl	80176f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801675e:	b1d8      	cbz	r0, 8016798 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8016760:	280a      	cmp	r0, #10
 8016762:	d012      	beq.n	801678a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8016764:	9804      	ldr	r0, [sp, #16]
 8016766:	b180      	cbz	r0, 801678a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8016768:	7b47      	ldrb	r7, [r0, #13]
 801676a:	7922      	ldrb	r2, [r4, #4]
 801676c:	00fb      	lsls	r3, r7, #3
 801676e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016772:	7a03      	ldrb	r3, [r0, #8]
 8016774:	430b      	orrs	r3, r1
 8016776:	0679      	lsls	r1, r7, #25
 8016778:	bf44      	itt	mi
 801677a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801677e:	b21b      	sxthmi	r3, r3
 8016780:	1ad3      	subs	r3, r2, r3
 8016782:	b2db      	uxtb	r3, r3
 8016784:	429e      	cmp	r6, r3
 8016786:	bf28      	it	cs
 8016788:	461e      	movcs	r6, r3
 801678a:	462b      	mov	r3, r5
 801678c:	4622      	mov	r2, r4
 801678e:	2100      	movs	r1, #0
 8016790:	a805      	add	r0, sp, #20
 8016792:	f000 ffb1 	bl	80176f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016796:	e7e2      	b.n	801675e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8016798:	4630      	mov	r0, r6
 801679a:	b01e      	add	sp, #120	; 0x78
 801679c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80167a0:	b003      	add	sp, #12
 80167a2:	4770      	bx	lr

080167a4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80167a4:	b513      	push	{r0, r1, r4, lr}
 80167a6:	6803      	ldr	r3, [r0, #0]
 80167a8:	2400      	movs	r4, #0
 80167aa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80167ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80167b2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80167b6:	4669      	mov	r1, sp
 80167b8:	691b      	ldr	r3, [r3, #16]
 80167ba:	9400      	str	r4, [sp, #0]
 80167bc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80167c0:	4798      	blx	r3
 80167c2:	b002      	add	sp, #8
 80167c4:	bd10      	pop	{r4, pc}

080167c6 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80167c6:	b538      	push	{r3, r4, r5, lr}
 80167c8:	680b      	ldr	r3, [r1, #0]
 80167ca:	460c      	mov	r4, r1
 80167cc:	4605      	mov	r5, r0
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	4798      	blx	r3
 80167d2:	6823      	ldr	r3, [r4, #0]
 80167d4:	4620      	mov	r0, r4
 80167d6:	4629      	mov	r1, r5
 80167d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167da:	4798      	blx	r3
 80167dc:	4628      	mov	r0, r5
 80167de:	bd38      	pop	{r3, r4, r5, pc}

080167e0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80167e0:	b410      	push	{r4}
 80167e2:	880a      	ldrh	r2, [r1, #0]
 80167e4:	8884      	ldrh	r4, [r0, #4]
 80167e6:	4422      	add	r2, r4
 80167e8:	800a      	strh	r2, [r1, #0]
 80167ea:	884a      	ldrh	r2, [r1, #2]
 80167ec:	88c4      	ldrh	r4, [r0, #6]
 80167ee:	4422      	add	r2, r4
 80167f0:	804a      	strh	r2, [r1, #2]
 80167f2:	6940      	ldr	r0, [r0, #20]
 80167f4:	b120      	cbz	r0, 8016800 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80167f6:	6803      	ldr	r3, [r0, #0]
 80167f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167fe:	4718      	bx	r3
 8016800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016804:	4770      	bx	lr

08016806 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8016806:	b570      	push	{r4, r5, r6, lr}
 8016808:	8882      	ldrh	r2, [r0, #4]
 801680a:	460c      	mov	r4, r1
 801680c:	880b      	ldrh	r3, [r1, #0]
 801680e:	4605      	mov	r5, r0
 8016810:	4413      	add	r3, r2
 8016812:	800b      	strh	r3, [r1, #0]
 8016814:	884b      	ldrh	r3, [r1, #2]
 8016816:	88c2      	ldrh	r2, [r0, #6]
 8016818:	4413      	add	r3, r2
 801681a:	804b      	strh	r3, [r1, #2]
 801681c:	1d01      	adds	r1, r0, #4
 801681e:	4620      	mov	r0, r4
 8016820:	f7fb fa84 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8016824:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016828:	2b00      	cmp	r3, #0
 801682a:	dd0b      	ble.n	8016844 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801682c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016830:	2b00      	cmp	r3, #0
 8016832:	dd07      	ble.n	8016844 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016834:	6968      	ldr	r0, [r5, #20]
 8016836:	b128      	cbz	r0, 8016844 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016838:	6803      	ldr	r3, [r0, #0]
 801683a:	4621      	mov	r1, r4
 801683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801683e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016842:	4718      	bx	r3
 8016844:	bd70      	pop	{r4, r5, r6, pc}
	...

08016848 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016848:	b570      	push	{r4, r5, r6, lr}
 801684a:	8882      	ldrh	r2, [r0, #4]
 801684c:	460c      	mov	r4, r1
 801684e:	880b      	ldrh	r3, [r1, #0]
 8016850:	4605      	mov	r5, r0
 8016852:	4413      	add	r3, r2
 8016854:	800b      	strh	r3, [r1, #0]
 8016856:	884b      	ldrh	r3, [r1, #2]
 8016858:	88c2      	ldrh	r2, [r0, #6]
 801685a:	4413      	add	r3, r2
 801685c:	804b      	strh	r3, [r1, #2]
 801685e:	1d01      	adds	r1, r0, #4
 8016860:	4620      	mov	r0, r4
 8016862:	f7fb fa63 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8016866:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801686a:	2b00      	cmp	r3, #0
 801686c:	dd18      	ble.n	80168a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801686e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016872:	2b00      	cmp	r3, #0
 8016874:	dd14      	ble.n	80168a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016876:	6968      	ldr	r0, [r5, #20]
 8016878:	b128      	cbz	r0, 8016886 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801687a:	6803      	ldr	r3, [r0, #0]
 801687c:	4621      	mov	r1, r4
 801687e:	691b      	ldr	r3, [r3, #16]
 8016880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016884:	4718      	bx	r3
 8016886:	4b07      	ldr	r3, [pc, #28]	; (80168a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	3304      	adds	r3, #4
 801688c:	429d      	cmp	r5, r3
 801688e:	d107      	bne.n	80168a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016890:	f7fe fff0 	bl	8015874 <_ZN8touchgfx11Application11getInstanceEv>
 8016894:	6821      	ldr	r1, [r4, #0]
 8016896:	6862      	ldr	r2, [r4, #4]
 8016898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801689c:	f7ff b862 	b.w	8015964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80168a0:	bd70      	pop	{r4, r5, r6, pc}
 80168a2:	bf00      	nop
 80168a4:	2400c830 	.word	0x2400c830

080168a8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80168a8:	b570      	push	{r4, r5, r6, lr}
 80168aa:	4604      	mov	r4, r0
 80168ac:	4616      	mov	r6, r2
 80168ae:	460d      	mov	r5, r1
 80168b0:	b901      	cbnz	r1, 80168b4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80168b2:	b192      	cbz	r2, 80168da <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80168b4:	6823      	ldr	r3, [r4, #0]
 80168b6:	4620      	mov	r0, r4
 80168b8:	699b      	ldr	r3, [r3, #24]
 80168ba:	4798      	blx	r3
 80168bc:	88e2      	ldrh	r2, [r4, #6]
 80168be:	88a1      	ldrh	r1, [r4, #4]
 80168c0:	4620      	mov	r0, r4
 80168c2:	4432      	add	r2, r6
 80168c4:	4429      	add	r1, r5
 80168c6:	b212      	sxth	r2, r2
 80168c8:	b209      	sxth	r1, r1
 80168ca:	f7fb fd0d 	bl	80122e8 <_ZN8touchgfx8Drawable5setXYEss>
 80168ce:	6823      	ldr	r3, [r4, #0]
 80168d0:	4620      	mov	r0, r4
 80168d2:	699b      	ldr	r3, [r3, #24]
 80168d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168d8:	4718      	bx	r3
 80168da:	bd70      	pop	{r4, r5, r6, pc}

080168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80168dc:	b510      	push	{r4, lr}
 80168de:	2300      	movs	r3, #0
 80168e0:	4604      	mov	r4, r0
 80168e2:	4608      	mov	r0, r1
 80168e4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80168e8:	8023      	strh	r3, [r4, #0]
 80168ea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80168ee:	8063      	strh	r3, [r4, #2]
 80168f0:	6803      	ldr	r3, [r0, #0]
 80168f2:	80a1      	strh	r1, [r4, #4]
 80168f4:	4621      	mov	r1, r4
 80168f6:	80e2      	strh	r2, [r4, #6]
 80168f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168fa:	4798      	blx	r3
 80168fc:	4620      	mov	r0, r4
 80168fe:	bd10      	pop	{r4, pc}

08016900 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8016900:	b530      	push	{r4, r5, lr}
 8016902:	8083      	strh	r3, [r0, #4]
 8016904:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016908:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801690c:	7183      	strb	r3, [r0, #6]
 801690e:	79c3      	ldrb	r3, [r0, #7]
 8016910:	6101      	str	r1, [r0, #16]
 8016912:	f365 0306 	bfi	r3, r5, #0, #7
 8016916:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801691a:	8282      	strh	r2, [r0, #20]
 801691c:	f365 13c7 	bfi	r3, r5, #7, #1
 8016920:	71c3      	strb	r3, [r0, #7]
 8016922:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8016926:	7203      	strb	r3, [r0, #8]
 8016928:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801692c:	7243      	strb	r3, [r0, #9]
 801692e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016932:	8143      	strh	r3, [r0, #10]
 8016934:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8016938:	8183      	strh	r3, [r0, #12]
 801693a:	4b01      	ldr	r3, [pc, #4]	; (8016940 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801693c:	6003      	str	r3, [r0, #0]
 801693e:	bd30      	pop	{r4, r5, pc}
 8016940:	08023a70 	.word	0x08023a70

08016944 <_ZNK8touchgfx9ConstFont4findEt>:
 8016944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016946:	6904      	ldr	r4, [r0, #16]
 8016948:	b3bc      	cbz	r4, 80169ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801694a:	88a3      	ldrh	r3, [r4, #4]
 801694c:	8a82      	ldrh	r2, [r0, #20]
 801694e:	1acb      	subs	r3, r1, r3
 8016950:	f102 32ff 	add.w	r2, r2, #4294967295
 8016954:	d431      	bmi.n	80169ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016956:	4293      	cmp	r3, r2
 8016958:	dd0c      	ble.n	8016974 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801695a:	230e      	movs	r3, #14
 801695c:	fb03 4302 	mla	r3, r3, r2, r4
 8016960:	889b      	ldrh	r3, [r3, #4]
 8016962:	1a5b      	subs	r3, r3, r1
 8016964:	1ad3      	subs	r3, r2, r3
 8016966:	429a      	cmp	r2, r3
 8016968:	db27      	blt.n	80169ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801696a:	2b00      	cmp	r3, #0
 801696c:	bfbc      	itt	lt
 801696e:	2302      	movlt	r3, #2
 8016970:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016974:	2500      	movs	r5, #0
 8016976:	260e      	movs	r6, #14
 8016978:	4295      	cmp	r5, r2
 801697a:	dc1e      	bgt.n	80169ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801697c:	fb06 4003 	mla	r0, r6, r3, r4
 8016980:	8887      	ldrh	r7, [r0, #4]
 8016982:	42b9      	cmp	r1, r7
 8016984:	d01a      	beq.n	80169bc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8016986:	d20d      	bcs.n	80169a4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016988:	1e5a      	subs	r2, r3, #1
 801698a:	4295      	cmp	r5, r2
 801698c:	dc15      	bgt.n	80169ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801698e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016992:	1a5b      	subs	r3, r3, r1
 8016994:	1ad3      	subs	r3, r2, r3
 8016996:	429a      	cmp	r2, r3
 8016998:	db0f      	blt.n	80169ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801699a:	429d      	cmp	r5, r3
 801699c:	ddec      	ble.n	8016978 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801699e:	1953      	adds	r3, r2, r5
 80169a0:	105b      	asrs	r3, r3, #1
 80169a2:	e7e9      	b.n	8016978 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80169a4:	1c5d      	adds	r5, r3, #1
 80169a6:	42aa      	cmp	r2, r5
 80169a8:	db07      	blt.n	80169ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80169aa:	8a43      	ldrh	r3, [r0, #18]
 80169ac:	1acb      	subs	r3, r1, r3
 80169ae:	442b      	add	r3, r5
 80169b0:	429d      	cmp	r5, r3
 80169b2:	dc02      	bgt.n	80169ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80169b4:	429a      	cmp	r2, r3
 80169b6:	dadf      	bge.n	8016978 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80169b8:	e7f1      	b.n	801699e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80169ba:	2000      	movs	r0, #0
 80169bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080169be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80169be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169c0:	4604      	mov	r4, r0
 80169c2:	4617      	mov	r7, r2
 80169c4:	461e      	mov	r6, r3
 80169c6:	b911      	cbnz	r1, 80169ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80169c8:	2500      	movs	r5, #0
 80169ca:	4628      	mov	r0, r5
 80169cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169ce:	290a      	cmp	r1, #10
 80169d0:	d0fa      	beq.n	80169c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80169d2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80169d6:	4291      	cmp	r1, r2
 80169d8:	d0f6      	beq.n	80169c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80169da:	f242 020b 	movw	r2, #8203	; 0x200b
 80169de:	4291      	cmp	r1, r2
 80169e0:	d0f2      	beq.n	80169c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80169e2:	f7ff ffaf 	bl	8016944 <_ZNK8touchgfx9ConstFont4findEt>
 80169e6:	4605      	mov	r5, r0
 80169e8:	b950      	cbnz	r0, 8016a00 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80169ea:	6823      	ldr	r3, [r4, #0]
 80169ec:	4620      	mov	r0, r4
 80169ee:	691b      	ldr	r3, [r3, #16]
 80169f0:	4798      	blx	r3
 80169f2:	4601      	mov	r1, r0
 80169f4:	4620      	mov	r0, r4
 80169f6:	f7ff ffa5 	bl	8016944 <_ZNK8touchgfx9ConstFont4findEt>
 80169fa:	4605      	mov	r5, r0
 80169fc:	2800      	cmp	r0, #0
 80169fe:	d0e3      	beq.n	80169c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016a00:	6823      	ldr	r3, [r4, #0]
 8016a02:	4629      	mov	r1, r5
 8016a04:	4620      	mov	r0, r4
 8016a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a08:	4798      	blx	r3
 8016a0a:	6038      	str	r0, [r7, #0]
 8016a0c:	6823      	ldr	r3, [r4, #0]
 8016a0e:	4620      	mov	r0, r4
 8016a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a12:	4798      	blx	r3
 8016a14:	7030      	strb	r0, [r6, #0]
 8016a16:	e7d8      	b.n	80169ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016a18 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016a18:	2001      	movs	r0, #1
 8016a1a:	4770      	bx	lr

08016a1c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016a1c:	2002      	movs	r0, #2
 8016a1e:	4770      	bx	lr

08016a20 <_ZN8touchgfx6ScreenD1Ev>:
 8016a20:	4770      	bx	lr

08016a22 <_ZN8touchgfx12GestureEventD1Ev>:
 8016a22:	4770      	bx	lr

08016a24 <_ZN8touchgfx9DragEventD1Ev>:
 8016a24:	4770      	bx	lr

08016a26 <_ZN8touchgfx9DragEventD0Ev>:
 8016a26:	b510      	push	{r4, lr}
 8016a28:	4604      	mov	r4, r0
 8016a2a:	2110      	movs	r1, #16
 8016a2c:	f009 fcb9 	bl	80203a2 <_ZdlPvj>
 8016a30:	4620      	mov	r0, r4
 8016a32:	bd10      	pop	{r4, pc}

08016a34 <_ZN8touchgfx12GestureEventD0Ev>:
 8016a34:	b510      	push	{r4, lr}
 8016a36:	4604      	mov	r4, r0
 8016a38:	210c      	movs	r1, #12
 8016a3a:	f009 fcb2 	bl	80203a2 <_ZdlPvj>
 8016a3e:	4620      	mov	r0, r4
 8016a40:	bd10      	pop	{r4, pc}

08016a42 <_ZN8touchgfx6ScreenD0Ev>:
 8016a42:	b510      	push	{r4, lr}
 8016a44:	4604      	mov	r4, r0
 8016a46:	213c      	movs	r1, #60	; 0x3c
 8016a48:	f009 fcab 	bl	80203a2 <_ZdlPvj>
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	bd10      	pop	{r4, pc}

08016a50 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016a50:	b530      	push	{r4, r5, lr}
 8016a52:	460d      	mov	r5, r1
 8016a54:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016a56:	b087      	sub	sp, #28
 8016a58:	4604      	mov	r4, r0
 8016a5a:	b301      	cbz	r1, 8016a9e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016a5c:	a801      	add	r0, sp, #4
 8016a5e:	f7ff ff3d 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016a62:	892a      	ldrh	r2, [r5, #8]
 8016a64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016a68:	7928      	ldrb	r0, [r5, #4]
 8016a6a:	1ad2      	subs	r2, r2, r3
 8016a6c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016a6e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016a72:	441a      	add	r2, r3
 8016a74:	896b      	ldrh	r3, [r5, #10]
 8016a76:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016a7a:	f88d 0010 	strb.w	r0, [sp, #16]
 8016a7e:	1b5b      	subs	r3, r3, r5
 8016a80:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8016a82:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016a84:	442b      	add	r3, r5
 8016a86:	4d07      	ldr	r5, [pc, #28]	; (8016aa4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016a88:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016a8c:	a903      	add	r1, sp, #12
 8016a8e:	9503      	str	r5, [sp, #12]
 8016a90:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016a94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016a98:	6803      	ldr	r3, [r0, #0]
 8016a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a9c:	4798      	blx	r3
 8016a9e:	b007      	add	sp, #28
 8016aa0:	bd30      	pop	{r4, r5, pc}
 8016aa2:	bf00      	nop
 8016aa4:	08023adc 	.word	0x08023adc

08016aa8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016aae:	b08a      	sub	sp, #40	; 0x28
 8016ab0:	4604      	mov	r4, r0
 8016ab2:	460d      	mov	r5, r1
 8016ab4:	b113      	cbz	r3, 8016abc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8016ab6:	790b      	ldrb	r3, [r1, #4]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d044      	beq.n	8016b46 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016abc:	f104 0804 	add.w	r8, r4, #4
 8016ac0:	a803      	add	r0, sp, #12
 8016ac2:	4641      	mov	r1, r8
 8016ac4:	f7ff ff0a 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016ac8:	792b      	ldrb	r3, [r5, #4]
 8016aca:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016ace:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016ad2:	b983      	cbnz	r3, 8016af6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016ad4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8016ad8:	892a      	ldrh	r2, [r5, #8]
 8016ada:	88e9      	ldrh	r1, [r5, #6]
 8016adc:	4640      	mov	r0, r8
 8016ade:	1b92      	subs	r2, r2, r6
 8016ae0:	9301      	str	r3, [sp, #4]
 8016ae2:	1bc9      	subs	r1, r1, r7
 8016ae4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8016ae8:	b212      	sxth	r2, r2
 8016aea:	9300      	str	r3, [sp, #0]
 8016aec:	b209      	sxth	r1, r1
 8016aee:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016af2:	f7fb f839 	bl	8011b68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016af6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016af8:	b329      	cbz	r1, 8016b46 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016afa:	a805      	add	r0, sp, #20
 8016afc:	f7ff feee 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016b00:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016b04:	792b      	ldrb	r3, [r5, #4]
 8016b06:	a907      	add	r1, sp, #28
 8016b08:	1abf      	subs	r7, r7, r2
 8016b0a:	88ea      	ldrh	r2, [r5, #6]
 8016b0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016b0e:	4417      	add	r7, r2
 8016b10:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8016b12:	f88d 3020 	strb.w	r3, [sp, #32]
 8016b16:	4417      	add	r7, r2
 8016b18:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016b1c:	1ab6      	subs	r6, r6, r2
 8016b1e:	892a      	ldrh	r2, [r5, #8]
 8016b20:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8016b24:	4416      	add	r6, r2
 8016b26:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016b28:	4416      	add	r6, r2
 8016b2a:	4a08      	ldr	r2, [pc, #32]	; (8016b4c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016b2c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8016b30:	2600      	movs	r6, #0
 8016b32:	9207      	str	r2, [sp, #28]
 8016b34:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8016b38:	6803      	ldr	r3, [r0, #0]
 8016b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b3c:	4798      	blx	r3
 8016b3e:	792b      	ldrb	r3, [r5, #4]
 8016b40:	b10b      	cbz	r3, 8016b46 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016b42:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8016b46:	b00a      	add	sp, #40	; 0x28
 8016b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b4c:	080238c0 	.word	0x080238c0

08016b50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b54:	460c      	mov	r4, r1
 8016b56:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016b58:	b088      	sub	sp, #32
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	2900      	cmp	r1, #0
 8016b5e:	d06d      	beq.n	8016c3c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016b60:	4668      	mov	r0, sp
 8016b62:	f7ff febb 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016b66:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016b68:	88e3      	ldrh	r3, [r4, #6]
 8016b6a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016b6e:	440b      	add	r3, r1
 8016b70:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016b74:	b21b      	sxth	r3, r3
 8016b76:	4543      	cmp	r3, r8
 8016b78:	db31      	blt.n	8016bde <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016b7a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016b7e:	44c4      	add	ip, r8
 8016b80:	fa0f fc8c 	sxth.w	ip, ip
 8016b84:	4563      	cmp	r3, ip
 8016b86:	da2a      	bge.n	8016bde <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016b88:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8016b8a:	8926      	ldrh	r6, [r4, #8]
 8016b8c:	4416      	add	r6, r2
 8016b8e:	b236      	sxth	r6, r6
 8016b90:	42be      	cmp	r6, r7
 8016b92:	db24      	blt.n	8016bde <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016b94:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016b98:	4438      	add	r0, r7
 8016b9a:	b200      	sxth	r0, r0
 8016b9c:	4286      	cmp	r6, r0
 8016b9e:	da1e      	bge.n	8016bde <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016ba0:	8963      	ldrh	r3, [r4, #10]
 8016ba2:	4419      	add	r1, r3
 8016ba4:	b209      	sxth	r1, r1
 8016ba6:	4541      	cmp	r1, r8
 8016ba8:	db08      	blt.n	8016bbc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016baa:	4561      	cmp	r1, ip
 8016bac:	da06      	bge.n	8016bbc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	441a      	add	r2, r3
 8016bb2:	b212      	sxth	r2, r2
 8016bb4:	42ba      	cmp	r2, r7
 8016bb6:	db01      	blt.n	8016bbc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016bb8:	4282      	cmp	r2, r0
 8016bba:	db10      	blt.n	8016bde <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016bbc:	4b21      	ldr	r3, [pc, #132]	; (8016c44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016bbe:	a904      	add	r1, sp, #16
 8016bc0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016bc2:	9304      	str	r3, [sp, #16]
 8016bc4:	2302      	movs	r3, #2
 8016bc6:	f88d 3014 	strb.w	r3, [sp, #20]
 8016bca:	2300      	movs	r3, #0
 8016bcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016bd0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016bd4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016bd8:	6803      	ldr	r3, [r0, #0]
 8016bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bdc:	4798      	blx	r3
 8016bde:	1d29      	adds	r1, r5, #4
 8016be0:	a802      	add	r0, sp, #8
 8016be2:	f7ff fe7b 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016be6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016bea:	88e0      	ldrh	r0, [r4, #6]
 8016bec:	eba3 0808 	sub.w	r8, r3, r8
 8016bf0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016bf4:	7921      	ldrb	r1, [r4, #4]
 8016bf6:	fa1f f888 	uxth.w	r8, r8
 8016bfa:	1bdf      	subs	r7, r3, r7
 8016bfc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016c00:	b2bb      	uxth	r3, r7
 8016c02:	4440      	add	r0, r8
 8016c04:	8922      	ldrh	r2, [r4, #8]
 8016c06:	8967      	ldrh	r7, [r4, #10]
 8016c08:	4460      	add	r0, ip
 8016c0a:	89a4      	ldrh	r4, [r4, #12]
 8016c0c:	441a      	add	r2, r3
 8016c0e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8016c10:	44b8      	add	r8, r7
 8016c12:	4423      	add	r3, r4
 8016c14:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016c18:	4432      	add	r2, r6
 8016c1a:	44e0      	add	r8, ip
 8016c1c:	4433      	add	r3, r6
 8016c1e:	4c0a      	ldr	r4, [pc, #40]	; (8016c48 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016c20:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016c22:	f88d 1014 	strb.w	r1, [sp, #20]
 8016c26:	a904      	add	r1, sp, #16
 8016c28:	9404      	str	r4, [sp, #16]
 8016c2a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016c2e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016c32:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016c36:	6803      	ldr	r3, [r0, #0]
 8016c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c3a:	4798      	blx	r3
 8016c3c:	b008      	add	sp, #32
 8016c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c42:	bf00      	nop
 8016c44:	080238c0 	.word	0x080238c0
 8016c48:	08023ac8 	.word	0x08023ac8

08016c4c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8016c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c4e:	4604      	mov	r4, r0
 8016c50:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016c54:	3201      	adds	r2, #1
 8016c56:	d112      	bne.n	8016c7e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016c58:	2500      	movs	r5, #0
 8016c5a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016c5e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016c62:	6803      	ldr	r3, [r0, #0]
 8016c64:	9500      	str	r5, [sp, #0]
 8016c66:	466d      	mov	r5, sp
 8016c68:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016c6c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016c70:	4629      	mov	r1, r5
 8016c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c74:	4798      	blx	r3
 8016c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016c7a:	e884 0003 	stmia.w	r4, {r0, r1}
 8016c7e:	4620      	mov	r0, r4
 8016c80:	b003      	add	sp, #12
 8016c82:	bd30      	pop	{r4, r5, pc}

08016c84 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016c84:	b513      	push	{r0, r1, r4, lr}
 8016c86:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	d109      	bne.n	8016ca4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016c90:	4601      	mov	r1, r0
 8016c92:	4668      	mov	r0, sp
 8016c94:	f7ff fe22 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016c98:	f8bd 3000 	ldrh.w	r3, [sp]
 8016c9c:	8423      	strh	r3, [r4, #32]
 8016c9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016ca2:	8463      	strh	r3, [r4, #34]	; 0x22
 8016ca4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016ca8:	b002      	add	sp, #8
 8016caa:	bd10      	pop	{r4, pc}

08016cac <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8016cac:	b513      	push	{r0, r1, r4, lr}
 8016cae:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8016cb2:	4604      	mov	r4, r0
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	d109      	bne.n	8016ccc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016cb8:	4601      	mov	r1, r0
 8016cba:	4668      	mov	r0, sp
 8016cbc:	f7ff fe0e 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016cc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8016cc4:	8423      	strh	r3, [r4, #32]
 8016cc6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016cca:	8463      	strh	r3, [r4, #34]	; 0x22
 8016ccc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8016cd0:	b002      	add	sp, #8
 8016cd2:	bd10      	pop	{r4, pc}

08016cd4 <_ZN8touchgfx6ScreenC1Ev>:
 8016cd4:	b570      	push	{r4, r5, r6, lr}
 8016cd6:	4b17      	ldr	r3, [pc, #92]	; (8016d34 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8016cd8:	4605      	mov	r5, r0
 8016cda:	4a17      	ldr	r2, [pc, #92]	; (8016d38 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8016cdc:	2101      	movs	r1, #1
 8016cde:	f845 3b04 	str.w	r3, [r5], #4
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	6042      	str	r2, [r0, #4]
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	8103      	strh	r3, [r0, #8]
 8016cea:	8143      	strh	r3, [r0, #10]
 8016cec:	8183      	strh	r3, [r0, #12]
 8016cee:	81c3      	strh	r3, [r0, #14]
 8016cf0:	8203      	strh	r3, [r0, #16]
 8016cf2:	8243      	strh	r3, [r0, #18]
 8016cf4:	8283      	strh	r3, [r0, #20]
 8016cf6:	82c3      	strh	r3, [r0, #22]
 8016cf8:	6203      	str	r3, [r0, #32]
 8016cfa:	8483      	strh	r3, [r0, #36]	; 0x24
 8016cfc:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016cfe:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8016d02:	6343      	str	r3, [r0, #52]	; 0x34
 8016d04:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8016d08:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8016d0c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016d10:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8016d14:	4b09      	ldr	r3, [pc, #36]	; (8016d3c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8016d16:	4628      	mov	r0, r5
 8016d18:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016d1c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8016d1e:	4a08      	ldr	r2, [pc, #32]	; (8016d40 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016d20:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016d24:	4798      	blx	r3
 8016d26:	6863      	ldr	r3, [r4, #4]
 8016d28:	4628      	mov	r0, r5
 8016d2a:	4631      	mov	r1, r6
 8016d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d2e:	4798      	blx	r3
 8016d30:	4620      	mov	r0, r4
 8016d32:	bd70      	pop	{r4, r5, r6, pc}
 8016d34:	08023af0 	.word	0x08023af0
 8016d38:	080234e4 	.word	0x080234e4
 8016d3c:	2400c7ea 	.word	0x2400c7ea
 8016d40:	2400c7e8 	.word	0x2400c7e8

08016d44 <_ZN8touchgfx6Screen4drawEv>:
 8016d44:	4b09      	ldr	r3, [pc, #36]	; (8016d6c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8016d46:	b507      	push	{r0, r1, r2, lr}
 8016d48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016d4c:	2100      	movs	r1, #0
 8016d4e:	4b08      	ldr	r3, [pc, #32]	; (8016d70 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016d50:	9100      	str	r1, [sp, #0]
 8016d52:	4669      	mov	r1, sp
 8016d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d58:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016d5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016d60:	6803      	ldr	r3, [r0, #0]
 8016d62:	689b      	ldr	r3, [r3, #8]
 8016d64:	4798      	blx	r3
 8016d66:	b003      	add	sp, #12
 8016d68:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d6c:	2400c7e8 	.word	0x2400c7e8
 8016d70:	2400c7ea 	.word	0x2400c7ea

08016d74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8016d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d78:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016d7c:	b089      	sub	sp, #36	; 0x24
 8016d7e:	4680      	mov	r8, r0
 8016d80:	460c      	mov	r4, r1
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	4615      	mov	r5, r2
 8016d86:	dd0e      	ble.n	8016da6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016d88:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	dd0a      	ble.n	8016da6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016d90:	4628      	mov	r0, r5
 8016d92:	f7ff ff5b 	bl	8016c4c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016d96:	4621      	mov	r1, r4
 8016d98:	f7fc fd74 	bl	8013884 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016d9c:	69eb      	ldr	r3, [r5, #28]
 8016d9e:	b928      	cbnz	r0, 8016dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8016da0:	461d      	mov	r5, r3
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d1f4      	bne.n	8016d90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8016da6:	b009      	add	sp, #36	; 0x24
 8016da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dac:	ae04      	add	r6, sp, #16
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	f000 80b5 	beq.w	8016f1e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016db4:	682b      	ldr	r3, [r5, #0]
 8016db6:	4629      	mov	r1, r5
 8016db8:	a802      	add	r0, sp, #8
 8016dba:	68db      	ldr	r3, [r3, #12]
 8016dbc:	4798      	blx	r3
 8016dbe:	4628      	mov	r0, r5
 8016dc0:	f7ff ff60 	bl	8016c84 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016dc4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016dc8:	4407      	add	r7, r0
 8016dca:	4628      	mov	r0, r5
 8016dcc:	f7ff ff6e 	bl	8016cac <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016dd0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016dd4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016dd8:	b23f      	sxth	r7, r7
 8016dda:	4418      	add	r0, r3
 8016ddc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016de0:	4621      	mov	r1, r4
 8016de2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016de6:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016dea:	4630      	mov	r0, r6
 8016dec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016df0:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016df4:	f7fa ff9a 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8016df8:	4628      	mov	r0, r5
 8016dfa:	f7ff ff27 	bl	8016c4c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016dfe:	ab06      	add	r3, sp, #24
 8016e00:	4602      	mov	r2, r0
 8016e02:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016e06:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e0a:	4611      	mov	r1, r2
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7fa ff8d 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8016e12:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016e16:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016e1a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8016e1e:	4299      	cmp	r1, r3
 8016e20:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016e24:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016e28:	d10b      	bne.n	8016e42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016e2a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016e2e:	4552      	cmp	r2, sl
 8016e30:	d107      	bne.n	8016e42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016e32:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016e36:	455a      	cmp	r2, fp
 8016e38:	d103      	bne.n	8016e42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016e3a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016e3e:	454a      	cmp	r2, r9
 8016e40:	d06d      	beq.n	8016f1e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016e42:	f1bb 0f00 	cmp.w	fp, #0
 8016e46:	dd65      	ble.n	8016f14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016e48:	f1b9 0f00 	cmp.w	r9, #0
 8016e4c:	dd62      	ble.n	8016f14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016e4e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016e52:	fa1f f08a 	uxth.w	r0, sl
 8016e56:	4552      	cmp	r2, sl
 8016e58:	9000      	str	r0, [sp, #0]
 8016e5a:	da12      	bge.n	8016e82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8016e5c:	9301      	str	r3, [sp, #4]
 8016e5e:	9b00      	ldr	r3, [sp, #0]
 8016e60:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016e64:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016e68:	1a9a      	subs	r2, r3, r2
 8016e6a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016e6e:	4631      	mov	r1, r6
 8016e70:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016e74:	4640      	mov	r0, r8
 8016e76:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016e7a:	69ea      	ldr	r2, [r5, #28]
 8016e7c:	f7ff ff7a 	bl	8016d74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016e80:	9b01      	ldr	r3, [sp, #4]
 8016e82:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016e86:	b29f      	uxth	r7, r3
 8016e88:	429a      	cmp	r2, r3
 8016e8a:	da0d      	bge.n	8016ea8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8016e8c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016e90:	1aba      	subs	r2, r7, r2
 8016e92:	f8ad a012 	strh.w	sl, [sp, #18]
 8016e96:	4631      	mov	r1, r6
 8016e98:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016e9c:	4640      	mov	r0, r8
 8016e9e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016ea2:	69ea      	ldr	r2, [r5, #28]
 8016ea4:	f7ff ff66 	bl	8016d74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016ea8:	8822      	ldrh	r2, [r4, #0]
 8016eaa:	445f      	add	r7, fp
 8016eac:	88a3      	ldrh	r3, [r4, #4]
 8016eae:	b2bf      	uxth	r7, r7
 8016eb0:	4413      	add	r3, r2
 8016eb2:	b23a      	sxth	r2, r7
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	b219      	sxth	r1, r3
 8016eb8:	4291      	cmp	r1, r2
 8016eba:	dd0d      	ble.n	8016ed8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8016ebc:	1bdb      	subs	r3, r3, r7
 8016ebe:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016ec2:	f8ad a012 	strh.w	sl, [sp, #18]
 8016ec6:	4631      	mov	r1, r6
 8016ec8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ecc:	4640      	mov	r0, r8
 8016ece:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016ed2:	69ea      	ldr	r2, [r5, #28]
 8016ed4:	f7ff ff4e 	bl	8016d74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016ed8:	88e2      	ldrh	r2, [r4, #6]
 8016eda:	8863      	ldrh	r3, [r4, #2]
 8016edc:	4413      	add	r3, r2
 8016ede:	9a00      	ldr	r2, [sp, #0]
 8016ee0:	444a      	add	r2, r9
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	fa1f f982 	uxth.w	r9, r2
 8016ee8:	b219      	sxth	r1, r3
 8016eea:	fa0f f289 	sxth.w	r2, r9
 8016eee:	428a      	cmp	r2, r1
 8016ef0:	da15      	bge.n	8016f1e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016ef2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016ef6:	eba3 0309 	sub.w	r3, r3, r9
 8016efa:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016efe:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016f02:	4631      	mov	r1, r6
 8016f04:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016f08:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016f0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f10:	69ea      	ldr	r2, [r5, #28]
 8016f12:	e001      	b.n	8016f18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016f14:	69ea      	ldr	r2, [r5, #28]
 8016f16:	4621      	mov	r1, r4
 8016f18:	4640      	mov	r0, r8
 8016f1a:	f7ff ff2b 	bl	8016d74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016f1e:	4628      	mov	r0, r5
 8016f20:	f7ff fe94 	bl	8016c4c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016f24:	6861      	ldr	r1, [r4, #4]
 8016f26:	4602      	mov	r2, r0
 8016f28:	4633      	mov	r3, r6
 8016f2a:	6820      	ldr	r0, [r4, #0]
 8016f2c:	c303      	stmia	r3!, {r0, r1}
 8016f2e:	4611      	mov	r1, r2
 8016f30:	4630      	mov	r0, r6
 8016f32:	f7fa fefb 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8016f36:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	f77f af33 	ble.w	8016da6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016f40:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	f77f af2e 	ble.w	8016da6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016f4a:	4628      	mov	r0, r5
 8016f4c:	f7ff fe9a 	bl	8016c84 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016f50:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016f54:	1a18      	subs	r0, r3, r0
 8016f56:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	f7ff fea6 	bl	8016cac <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016f60:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016f64:	4631      	mov	r1, r6
 8016f66:	1a18      	subs	r0, r3, r0
 8016f68:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016f6c:	4628      	mov	r0, r5
 8016f6e:	682b      	ldr	r3, [r5, #0]
 8016f70:	689b      	ldr	r3, [r3, #8]
 8016f72:	4798      	blx	r3
 8016f74:	e717      	b.n	8016da6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08016f76 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016f76:	b570      	push	{r4, r5, r6, lr}
 8016f78:	1d06      	adds	r6, r0, #4
 8016f7a:	b086      	sub	sp, #24
 8016f7c:	460c      	mov	r4, r1
 8016f7e:	2300      	movs	r3, #0
 8016f80:	4631      	mov	r1, r6
 8016f82:	4605      	mov	r5, r0
 8016f84:	a802      	add	r0, sp, #8
 8016f86:	9301      	str	r3, [sp, #4]
 8016f88:	f7ff fca8 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f8c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016f90:	8822      	ldrh	r2, [r4, #0]
 8016f92:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8016f96:	1ad2      	subs	r2, r2, r3
 8016f98:	8863      	ldrh	r3, [r4, #2]
 8016f9a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016f9e:	1a5b      	subs	r3, r3, r1
 8016fa0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016fa4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016fa8:	aa01      	add	r2, sp, #4
 8016faa:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016fae:	4630      	mov	r0, r6
 8016fb0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016fb4:	a904      	add	r1, sp, #16
 8016fb6:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016fba:	f7fa ff8f 	bl	8011edc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016fbe:	9a01      	ldr	r2, [sp, #4]
 8016fc0:	b11a      	cbz	r2, 8016fca <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8016fc2:	4621      	mov	r1, r4
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	f7ff fed5 	bl	8016d74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016fca:	b006      	add	sp, #24
 8016fcc:	bd70      	pop	{r4, r5, r6, pc}

08016fce <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016fce:	4602      	mov	r2, r0
 8016fd0:	b530      	push	{r4, r5, lr}
 8016fd2:	4604      	mov	r4, r0
 8016fd4:	b085      	sub	sp, #20
 8016fd6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016fda:	460d      	mov	r5, r1
 8016fdc:	466b      	mov	r3, sp
 8016fde:	6851      	ldr	r1, [r2, #4]
 8016fe0:	c303      	stmia	r3!, {r0, r1}
 8016fe2:	4629      	mov	r1, r5
 8016fe4:	4668      	mov	r0, sp
 8016fe6:	f7fa fea1 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 8016fea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016fee:	b12b      	cbz	r3, 8016ffc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016ff0:	4669      	mov	r1, sp
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f7ff ffbf 	bl	8016f76 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016ff8:	b005      	add	sp, #20
 8016ffa:	bd30      	pop	{r4, r5, pc}
 8016ffc:	3404      	adds	r4, #4
 8016ffe:	a802      	add	r0, sp, #8
 8017000:	4621      	mov	r1, r4
 8017002:	f7ff fc6b 	bl	80168dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017006:	f8bd 3000 	ldrh.w	r3, [sp]
 801700a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801700e:	4669      	mov	r1, sp
 8017010:	4620      	mov	r0, r4
 8017012:	1a9b      	subs	r3, r3, r2
 8017014:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017018:	f8ad 3000 	strh.w	r3, [sp]
 801701c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017020:	1a9b      	subs	r3, r3, r2
 8017022:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017026:	f7fa ff20 	bl	8011e6a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801702a:	e7e5      	b.n	8016ff8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801702c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801702c:	460b      	mov	r3, r1
 801702e:	680a      	ldr	r2, [r1, #0]
 8017030:	1d01      	adds	r1, r0, #4
 8017032:	6992      	ldr	r2, [r2, #24]
 8017034:	4618      	mov	r0, r3
 8017036:	4710      	bx	r2

08017038 <_ZN8touchgfx12TextProviderC1Ev>:
 8017038:	b538      	push	{r3, r4, r5, lr}
 801703a:	2500      	movs	r5, #0
 801703c:	2302      	movs	r3, #2
 801703e:	4604      	mov	r4, r0
 8017040:	220e      	movs	r2, #14
 8017042:	7403      	strb	r3, [r0, #16]
 8017044:	4629      	mov	r1, r5
 8017046:	6145      	str	r5, [r0, #20]
 8017048:	7605      	strb	r5, [r0, #24]
 801704a:	83c5      	strh	r5, [r0, #30]
 801704c:	8405      	strh	r5, [r0, #32]
 801704e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017050:	8705      	strh	r5, [r0, #56]	; 0x38
 8017052:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8017054:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8017058:	e9c0 5500 	strd	r5, r5, [r0]
 801705c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8017060:	304c      	adds	r0, #76	; 0x4c
 8017062:	f009 fb63 	bl	802072c <memset>
 8017066:	2301      	movs	r3, #1
 8017068:	4620      	mov	r0, r4
 801706a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801706e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017072:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8017076:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801707a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801707e:	f7ed f901 	bl	8004284 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017082:	4620      	mov	r0, r4
 8017084:	bd38      	pop	{r3, r4, r5, pc}

08017086 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8017086:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017088:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801708c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801708e:	fab0 f080 	clz	r0, r0
 8017092:	0940      	lsrs	r0, r0, #5
 8017094:	4770      	bx	lr

08017096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017096:	b530      	push	{r4, r5, lr}
 8017098:	2500      	movs	r5, #0
 801709a:	2401      	movs	r4, #1
 801709c:	6843      	ldr	r3, [r0, #4]
 801709e:	b913      	cbnz	r3, 80170a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80170a0:	6803      	ldr	r3, [r0, #0]
 80170a2:	b313      	cbz	r3, 80170ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80170a4:	6043      	str	r3, [r0, #4]
 80170a6:	7e03      	ldrb	r3, [r0, #24]
 80170a8:	b143      	cbz	r3, 80170bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80170aa:	6943      	ldr	r3, [r0, #20]
 80170ac:	b12b      	cbz	r3, 80170ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80170ae:	881a      	ldrh	r2, [r3, #0]
 80170b0:	b11a      	cbz	r2, 80170ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80170b2:	1c9a      	adds	r2, r3, #2
 80170b4:	6142      	str	r2, [r0, #20]
 80170b6:	8818      	ldrh	r0, [r3, #0]
 80170b8:	bd30      	pop	{r4, r5, pc}
 80170ba:	7605      	strb	r5, [r0, #24]
 80170bc:	6843      	ldr	r3, [r0, #4]
 80170be:	8819      	ldrh	r1, [r3, #0]
 80170c0:	b199      	cbz	r1, 80170ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80170c2:	1c9a      	adds	r2, r3, #2
 80170c4:	2902      	cmp	r1, #2
 80170c6:	6042      	str	r2, [r0, #4]
 80170c8:	d1f5      	bne.n	80170b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80170ca:	7c03      	ldrb	r3, [r0, #16]
 80170cc:	2b01      	cmp	r3, #1
 80170ce:	d8e5      	bhi.n	801709c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80170d0:	1c5a      	adds	r2, r3, #1
 80170d2:	3302      	adds	r3, #2
 80170d4:	7402      	strb	r2, [r0, #16]
 80170d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80170da:	6143      	str	r3, [r0, #20]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d0dd      	beq.n	801709c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80170e0:	881b      	ldrh	r3, [r3, #0]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d0da      	beq.n	801709c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80170e6:	7604      	strb	r4, [r0, #24]
 80170e8:	e7d8      	b.n	801709c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80170ea:	2000      	movs	r0, #0
 80170ec:	e7e4      	b.n	80170b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80170ee:	6001      	str	r1, [r0, #0]
 80170f0:	2100      	movs	r1, #0
 80170f2:	b430      	push	{r4, r5}
 80170f4:	6041      	str	r1, [r0, #4]
 80170f6:	6815      	ldr	r5, [r2, #0]
 80170f8:	6085      	str	r5, [r0, #8]
 80170fa:	6852      	ldr	r2, [r2, #4]
 80170fc:	6443      	str	r3, [r0, #68]	; 0x44
 80170fe:	9b02      	ldr	r3, [sp, #8]
 8017100:	60c2      	str	r2, [r0, #12]
 8017102:	7401      	strb	r1, [r0, #16]
 8017104:	6141      	str	r1, [r0, #20]
 8017106:	7601      	strb	r1, [r0, #24]
 8017108:	8701      	strh	r1, [r0, #56]	; 0x38
 801710a:	8401      	strh	r1, [r0, #32]
 801710c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017110:	6483      	str	r3, [r0, #72]	; 0x48
 8017112:	bc30      	pop	{r4, r5}
 8017114:	f7ed b8b6 	b.w	8004284 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017118 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8017118:	b408      	push	{r3}
 801711a:	b510      	push	{r4, lr}
 801711c:	b085      	sub	sp, #20
 801711e:	ac07      	add	r4, sp, #28
 8017120:	f854 3b04 	ldr.w	r3, [r4], #4
 8017124:	9300      	str	r3, [sp, #0]
 8017126:	4613      	mov	r3, r2
 8017128:	4622      	mov	r2, r4
 801712a:	9403      	str	r4, [sp, #12]
 801712c:	f7ff ffdf 	bl	80170ee <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017130:	b005      	add	sp, #20
 8017132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017136:	b001      	add	sp, #4
 8017138:	4770      	bx	lr

0801713a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801713a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801713c:	4605      	mov	r5, r0
 801713e:	4608      	mov	r0, r1
 8017140:	b1f1      	cbz	r1, 8017180 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017142:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017146:	460b      	mov	r3, r1
 8017148:	f101 0708 	add.w	r7, r1, #8
 801714c:	4622      	mov	r2, r4
 801714e:	6818      	ldr	r0, [r3, #0]
 8017150:	3308      	adds	r3, #8
 8017152:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017156:	4626      	mov	r6, r4
 8017158:	42bb      	cmp	r3, r7
 801715a:	c603      	stmia	r6!, {r0, r1}
 801715c:	4634      	mov	r4, r6
 801715e:	d1f6      	bne.n	801714e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017160:	6818      	ldr	r0, [r3, #0]
 8017162:	6030      	str	r0, [r6, #0]
 8017164:	4610      	mov	r0, r2
 8017166:	889b      	ldrh	r3, [r3, #4]
 8017168:	80b3      	strh	r3, [r6, #4]
 801716a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801716e:	015b      	lsls	r3, r3, #5
 8017170:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017174:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8017178:	430b      	orrs	r3, r1
 801717a:	425b      	negs	r3, r3
 801717c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8017180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017182 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017182:	b538      	push	{r3, r4, r5, lr}
 8017184:	460c      	mov	r4, r1
 8017186:	6811      	ldr	r1, [r2, #0]
 8017188:	4610      	mov	r0, r2
 801718a:	68cd      	ldr	r5, [r1, #12]
 801718c:	4619      	mov	r1, r3
 801718e:	47a8      	blx	r5
 8017190:	2800      	cmp	r0, #0
 8017192:	bf08      	it	eq
 8017194:	4620      	moveq	r0, r4
 8017196:	bd38      	pop	{r3, r4, r5, pc}

08017198 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801719a:	4604      	mov	r4, r0
 801719c:	4615      	mov	r5, r2
 801719e:	4608      	mov	r0, r1
 80171a0:	b93a      	cbnz	r2, 80171b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80171a2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80171a6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80171aa:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80171ae:	4628      	mov	r0, r5
 80171b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171b2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80171b6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80171ba:	8893      	ldrh	r3, [r2, #4]
 80171bc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80171c0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80171c4:	79ee      	ldrb	r6, [r5, #7]
 80171c6:	4316      	orrs	r6, r2
 80171c8:	19da      	adds	r2, r3, r7
 80171ca:	b291      	uxth	r1, r2
 80171cc:	b2b7      	uxth	r7, r6
 80171ce:	291d      	cmp	r1, #29
 80171d0:	d87b      	bhi.n	80172ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80171d2:	2201      	movs	r2, #1
 80171d4:	10f6      	asrs	r6, r6, #3
 80171d6:	408a      	lsls	r2, r1
 80171d8:	4974      	ldr	r1, [pc, #464]	; (80173ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80171da:	420a      	tst	r2, r1
 80171dc:	d12e      	bne.n	801723c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80171de:	f412 7f60 	tst.w	r2, #896	; 0x380
 80171e2:	d072      	beq.n	80172ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80171e4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80171e8:	462b      	mov	r3, r5
 80171ea:	f105 0e08 	add.w	lr, r5, #8
 80171ee:	4615      	mov	r5, r2
 80171f0:	6818      	ldr	r0, [r3, #0]
 80171f2:	3308      	adds	r3, #8
 80171f4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80171f8:	4694      	mov	ip, r2
 80171fa:	4573      	cmp	r3, lr
 80171fc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017200:	4662      	mov	r2, ip
 8017202:	d1f5      	bne.n	80171f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017204:	6818      	ldr	r0, [r3, #0]
 8017206:	f8cc 0000 	str.w	r0, [ip]
 801720a:	889b      	ldrh	r3, [r3, #4]
 801720c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017210:	b2b3      	uxth	r3, r6
 8017212:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017216:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801721a:	1aca      	subs	r2, r1, r3
 801721c:	1bcf      	subs	r7, r1, r7
 801721e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017222:	b292      	uxth	r2, r2
 8017224:	1afb      	subs	r3, r7, r3
 8017226:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801722a:	10d2      	asrs	r2, r2, #3
 801722c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017230:	4302      	orrs	r2, r0
 8017232:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017236:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801723a:	e7b8      	b.n	80171ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801723c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801723e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017242:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017244:	f640 6333 	movw	r3, #3635	; 0xe33
 8017248:	4299      	cmp	r1, r3
 801724a:	d110      	bne.n	801726e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801724c:	6803      	ldr	r3, [r0, #0]
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	4798      	blx	r3
 8017252:	7b41      	ldrb	r1, [r0, #13]
 8017254:	00cb      	lsls	r3, r1, #3
 8017256:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801725a:	7a03      	ldrb	r3, [r0, #8]
 801725c:	0648      	lsls	r0, r1, #25
 801725e:	ea43 0302 	orr.w	r3, r3, r2
 8017262:	bf44      	itt	mi
 8017264:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017268:	b21b      	sxthmi	r3, r3
 801726a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801726e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8017272:	462a      	mov	r2, r5
 8017274:	f105 0c08 	add.w	ip, r5, #8
 8017278:	443b      	add	r3, r7
 801727a:	4433      	add	r3, r6
 801727c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8017280:	b29b      	uxth	r3, r3
 8017282:	4635      	mov	r5, r6
 8017284:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017288:	6810      	ldr	r0, [r2, #0]
 801728a:	3208      	adds	r2, #8
 801728c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017290:	4637      	mov	r7, r6
 8017292:	4562      	cmp	r2, ip
 8017294:	c703      	stmia	r7!, {r0, r1}
 8017296:	463e      	mov	r6, r7
 8017298:	d1f6      	bne.n	8017288 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801729a:	6810      	ldr	r0, [r2, #0]
 801729c:	6038      	str	r0, [r7, #0]
 801729e:	8892      	ldrh	r2, [r2, #4]
 80172a0:	80ba      	strh	r2, [r7, #4]
 80172a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80172a6:	10db      	asrs	r3, r3, #3
 80172a8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80172ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80172b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80172b4:	4313      	orrs	r3, r2
 80172b6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80172ba:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80172be:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80172c2:	1a9b      	subs	r3, r3, r2
 80172c4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80172c8:	e771      	b.n	80171ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80172ca:	f023 0204 	bic.w	r2, r3, #4
 80172ce:	f640 611b 	movw	r1, #3611	; 0xe1b
 80172d2:	428a      	cmp	r2, r1
 80172d4:	d003      	beq.n	80172de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80172d6:	f640 621d 	movw	r2, #3613	; 0xe1d
 80172da:	4293      	cmp	r3, r2
 80172dc:	d120      	bne.n	8017320 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80172de:	3b01      	subs	r3, #1
 80172e0:	4602      	mov	r2, r0
 80172e2:	4629      	mov	r1, r5
 80172e4:	4620      	mov	r0, r4
 80172e6:	b29b      	uxth	r3, r3
 80172e8:	f7ff ff4b 	bl	8017182 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80172ec:	7b41      	ldrb	r1, [r0, #13]
 80172ee:	00cb      	lsls	r3, r1, #3
 80172f0:	0649      	lsls	r1, r1, #25
 80172f2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80172f6:	7a03      	ldrb	r3, [r0, #8]
 80172f8:	ea43 0302 	orr.w	r3, r3, r2
 80172fc:	bf44      	itt	mi
 80172fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017302:	b21b      	sxthmi	r3, r3
 8017304:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017308:	7b6b      	ldrb	r3, [r5, #13]
 801730a:	7aaa      	ldrb	r2, [r5, #10]
 801730c:	005b      	lsls	r3, r3, #1
 801730e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017312:	4313      	orrs	r3, r2
 8017314:	115a      	asrs	r2, r3, #5
 8017316:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801731a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801731e:	e035      	b.n	801738c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8017320:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017324:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017328:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801732c:	7a2a      	ldrb	r2, [r5, #8]
 801732e:	ea42 0201 	orr.w	r2, r2, r1
 8017332:	f640 6109 	movw	r1, #3593	; 0xe09
 8017336:	bf1c      	itt	ne
 8017338:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801733c:	b212      	sxthne	r2, r2
 801733e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017342:	f023 0210 	bic.w	r2, r3, #16
 8017346:	428a      	cmp	r2, r1
 8017348:	d003      	beq.n	8017352 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801734a:	f640 6213 	movw	r2, #3603	; 0xe13
 801734e:	4293      	cmp	r3, r2
 8017350:	d129      	bne.n	80173a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8017352:	7b6e      	ldrb	r6, [r5, #13]
 8017354:	4629      	mov	r1, r5
 8017356:	0076      	lsls	r6, r6, #1
 8017358:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801735c:	7aae      	ldrb	r6, [r5, #10]
 801735e:	4316      	orrs	r6, r2
 8017360:	f640 6213 	movw	r2, #3603	; 0xe13
 8017364:	4293      	cmp	r3, r2
 8017366:	4602      	mov	r2, r0
 8017368:	4620      	mov	r0, r4
 801736a:	bf16      	itet	ne
 801736c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017370:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017374:	b29b      	uxthne	r3, r3
 8017376:	f7ff ff04 	bl	8017182 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801737a:	7b43      	ldrb	r3, [r0, #13]
 801737c:	7a82      	ldrb	r2, [r0, #10]
 801737e:	005b      	lsls	r3, r3, #1
 8017380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017384:	4313      	orrs	r3, r2
 8017386:	1af6      	subs	r6, r6, r3
 8017388:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801738c:	7b69      	ldrb	r1, [r5, #13]
 801738e:	00cb      	lsls	r3, r1, #3
 8017390:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017394:	7a2b      	ldrb	r3, [r5, #8]
 8017396:	4313      	orrs	r3, r2
 8017398:	064a      	lsls	r2, r1, #25
 801739a:	bf44      	itt	mi
 801739c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80173a0:	b21b      	sxthmi	r3, r3
 80173a2:	1bdb      	subs	r3, r3, r7
 80173a4:	e747      	b.n	8017236 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80173a6:	2300      	movs	r3, #0
 80173a8:	e7b7      	b.n	801731a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80173aa:	bf00      	nop
 80173ac:	3fc00079 	.word	0x3fc00079

080173b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80173b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173b4:	4604      	mov	r4, r0
 80173b6:	b942      	cbnz	r2, 80173ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80173b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80173bc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80173c0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80173c4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80173c8:	e047      	b.n	801745a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80173ca:	7b51      	ldrb	r1, [r2, #13]
 80173cc:	8893      	ldrh	r3, [r2, #4]
 80173ce:	010d      	lsls	r5, r1, #4
 80173d0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80173d4:	79d5      	ldrb	r5, [r2, #7]
 80173d6:	4305      	orrs	r5, r0
 80173d8:	2d04      	cmp	r5, #4
 80173da:	bfcc      	ite	gt
 80173dc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80173e0:	f04f 0e01 	movle.w	lr, #1
 80173e4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80173e8:	f200 80ab 	bhi.w	8017542 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80173ec:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80173f0:	4283      	cmp	r3, r0
 80173f2:	d216      	bcs.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80173f4:	f240 605b 	movw	r0, #1627	; 0x65b
 80173f8:	4283      	cmp	r3, r0
 80173fa:	d859      	bhi.n	80174b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80173fc:	f240 6057 	movw	r0, #1623	; 0x657
 8017400:	4283      	cmp	r3, r0
 8017402:	d20e      	bcs.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017404:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017408:	d24a      	bcs.n	80174a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801740a:	f240 604e 	movw	r0, #1614	; 0x64e
 801740e:	4283      	cmp	r3, r0
 8017410:	d207      	bcs.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017412:	f240 601a 	movw	r0, #1562	; 0x61a
 8017416:	4283      	cmp	r3, r0
 8017418:	d02a      	beq.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801741a:	d821      	bhi.n	8017460 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801741c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017420:	d35b      	bcc.n	80174da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017422:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8017426:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801742a:	f040 80d0 	bne.w	80175ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801742e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8017432:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017436:	f040 80ca 	bne.w	80175ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801743a:	00cb      	lsls	r3, r1, #3
 801743c:	0649      	lsls	r1, r1, #25
 801743e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017442:	7a13      	ldrb	r3, [r2, #8]
 8017444:	ea43 0300 	orr.w	r3, r3, r0
 8017448:	bf44      	itt	mi
 801744a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801744e:	b21b      	sxthmi	r3, r3
 8017450:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017454:	1b5d      	subs	r5, r3, r5
 8017456:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801745a:	4610      	mov	r0, r2
 801745c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017460:	f240 604b 	movw	r0, #1611	; 0x64b
 8017464:	4283      	cmp	r3, r0
 8017466:	d338      	bcc.n	80174da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017468:	f240 604c 	movw	r0, #1612	; 0x64c
 801746c:	4283      	cmp	r3, r0
 801746e:	d9d8      	bls.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017470:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8017474:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8017478:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801747c:	f040 80f3 	bne.w	8017666 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8017480:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017484:	f040 80ef 	bne.w	8017666 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8017488:	00cb      	lsls	r3, r1, #3
 801748a:	064e      	lsls	r6, r1, #25
 801748c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017490:	7a13      	ldrb	r3, [r2, #8]
 8017492:	ea43 0300 	orr.w	r3, r3, r0
 8017496:	bf44      	itt	mi
 8017498:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801749c:	b21b      	sxthmi	r3, r3
 801749e:	e7d9      	b.n	8017454 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80174a0:	f240 6054 	movw	r0, #1620	; 0x654
 80174a4:	4283      	cmp	r3, r0
 80174a6:	d8e3      	bhi.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80174a8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80174ac:	d9e0      	bls.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80174ae:	e7b8      	b.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80174b0:	f240 6074 	movw	r0, #1652	; 0x674
 80174b4:	4283      	cmp	r3, r0
 80174b6:	d0b4      	beq.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80174b8:	d82d      	bhi.n	8017516 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80174ba:	f240 605e 	movw	r0, #1630	; 0x65e
 80174be:	4283      	cmp	r3, r0
 80174c0:	d804      	bhi.n	80174cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80174c2:	f240 605d 	movw	r0, #1629	; 0x65d
 80174c6:	4283      	cmp	r3, r0
 80174c8:	d3d2      	bcc.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80174ca:	e7aa      	b.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80174cc:	f240 605f 	movw	r0, #1631	; 0x65f
 80174d0:	4283      	cmp	r3, r0
 80174d2:	d0cd      	beq.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80174d4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80174d8:	d0a3      	beq.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80174da:	00cb      	lsls	r3, r1, #3
 80174dc:	0649      	lsls	r1, r1, #25
 80174de:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80174e2:	7a13      	ldrb	r3, [r2, #8]
 80174e4:	ea43 0300 	orr.w	r3, r3, r0
 80174e8:	bf44      	itt	mi
 80174ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80174ee:	b21b      	sxthmi	r3, r3
 80174f0:	1b5d      	subs	r5, r3, r5
 80174f2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80174f6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80174fa:	7b53      	ldrb	r3, [r2, #13]
 80174fc:	015b      	lsls	r3, r3, #5
 80174fe:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017502:	7993      	ldrb	r3, [r2, #6]
 8017504:	430b      	orrs	r3, r1
 8017506:	2105      	movs	r1, #5
 8017508:	005b      	lsls	r3, r3, #1
 801750a:	fb93 f3f1 	sdiv	r3, r3, r1
 801750e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8017512:	440b      	add	r3, r1
 8017514:	e756      	b.n	80173c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017516:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801751a:	4283      	cmp	r3, r0
 801751c:	d809      	bhi.n	8017532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801751e:	f240 60df 	movw	r0, #1759	; 0x6df
 8017522:	4283      	cmp	r3, r0
 8017524:	f4bf af7d 	bcs.w	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017528:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801752c:	2b05      	cmp	r3, #5
 801752e:	d8d4      	bhi.n	80174da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017530:	e777      	b.n	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017532:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017536:	4283      	cmp	r3, r0
 8017538:	d09a      	beq.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801753a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801753e:	4283      	cmp	r3, r0
 8017540:	e7ca      	b.n	80174d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017542:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017546:	d22b      	bcs.n	80175a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8017548:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801754c:	4283      	cmp	r3, r0
 801754e:	d28f      	bcs.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017550:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017554:	4283      	cmp	r3, r0
 8017556:	d816      	bhi.n	8017586 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8017558:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801755c:	4283      	cmp	r3, r0
 801755e:	f4bf af60 	bcs.w	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017562:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8017566:	4283      	cmp	r3, r0
 8017568:	d80a      	bhi.n	8017580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801756a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801756e:	4283      	cmp	r3, r0
 8017570:	f4bf af57 	bcs.w	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017574:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8017578:	4283      	cmp	r3, r0
 801757a:	f43f af79 	beq.w	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801757e:	e7ac      	b.n	80174da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017580:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8017584:	e7f8      	b.n	8017578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8017586:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801758a:	4283      	cmp	r3, r0
 801758c:	d802      	bhi.n	8017594 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801758e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8017592:	e798      	b.n	80174c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8017594:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8017598:	4283      	cmp	r3, r0
 801759a:	f47f af42 	bne.w	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801759e:	e767      	b.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80175a0:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80175a4:	4283      	cmp	r3, r0
 80175a6:	f43f af63 	beq.w	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80175aa:	d802      	bhi.n	80175b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80175ac:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80175b0:	e7f2      	b.n	8017598 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80175b2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80175b6:	4283      	cmp	r3, r0
 80175b8:	d805      	bhi.n	80175c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80175ba:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80175be:	4283      	cmp	r3, r0
 80175c0:	f4ff af2f 	bcc.w	8017422 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80175c4:	e754      	b.n	8017470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80175c6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80175ca:	4283      	cmp	r3, r0
 80175cc:	e7af      	b.n	801752e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80175ce:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80175d2:	4617      	mov	r7, r2
 80175d4:	f102 0808 	add.w	r8, r2, #8
 80175d8:	4666      	mov	r6, ip
 80175da:	6838      	ldr	r0, [r7, #0]
 80175dc:	3708      	adds	r7, #8
 80175de:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80175e2:	46e6      	mov	lr, ip
 80175e4:	4547      	cmp	r7, r8
 80175e6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80175ea:	46f4      	mov	ip, lr
 80175ec:	d1f5      	bne.n	80175da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80175ee:	6838      	ldr	r0, [r7, #0]
 80175f0:	f8ce 0000 	str.w	r0, [lr]
 80175f4:	88b9      	ldrh	r1, [r7, #4]
 80175f6:	f8ae 1004 	strh.w	r1, [lr, #4]
 80175fa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80175fe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017602:	d009      	beq.n	8017618 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8017604:	7b51      	ldrb	r1, [r2, #13]
 8017606:	7992      	ldrb	r2, [r2, #6]
 8017608:	0149      	lsls	r1, r1, #5
 801760a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801760e:	4311      	orrs	r1, r2
 8017610:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017614:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017618:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801761c:	b2ad      	uxth	r5, r5
 801761e:	d00d      	beq.n	801763c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8017620:	442b      	add	r3, r5
 8017622:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017626:	b29b      	uxth	r3, r3
 8017628:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801762c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017630:	10db      	asrs	r3, r3, #3
 8017632:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017636:	4313      	orrs	r3, r2
 8017638:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801763c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017640:	00cb      	lsls	r3, r1, #3
 8017642:	064f      	lsls	r7, r1, #25
 8017644:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017648:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801764c:	ea43 0302 	orr.w	r3, r3, r2
 8017650:	bf44      	itt	mi
 8017652:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017656:	b21b      	sxthmi	r3, r3
 8017658:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801765c:	1b5b      	subs	r3, r3, r5
 801765e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017662:	4632      	mov	r2, r6
 8017664:	e6f9      	b.n	801745a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017666:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801766a:	4617      	mov	r7, r2
 801766c:	f102 0908 	add.w	r9, r2, #8
 8017670:	4666      	mov	r6, ip
 8017672:	6838      	ldr	r0, [r7, #0]
 8017674:	3708      	adds	r7, #8
 8017676:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801767a:	46e0      	mov	r8, ip
 801767c:	454f      	cmp	r7, r9
 801767e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8017682:	46c4      	mov	ip, r8
 8017684:	d1f5      	bne.n	8017672 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8017686:	6838      	ldr	r0, [r7, #0]
 8017688:	f8c8 0000 	str.w	r0, [r8]
 801768c:	88b9      	ldrh	r1, [r7, #4]
 801768e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8017692:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017696:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801769a:	d009      	beq.n	80176b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801769c:	7b51      	ldrb	r1, [r2, #13]
 801769e:	7992      	ldrb	r2, [r2, #6]
 80176a0:	0149      	lsls	r1, r1, #5
 80176a2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80176a6:	4311      	orrs	r1, r2
 80176a8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80176ac:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80176b0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80176b4:	d00e      	beq.n	80176d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80176b6:	eba3 030e 	sub.w	r3, r3, lr
 80176ba:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80176be:	b29b      	uxth	r3, r3
 80176c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80176c4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80176c8:	10db      	asrs	r3, r3, #3
 80176ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80176ce:	4313      	orrs	r3, r2
 80176d0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80176d4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80176d8:	00cb      	lsls	r3, r1, #3
 80176da:	0648      	lsls	r0, r1, #25
 80176dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80176e0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80176e4:	ea43 0302 	orr.w	r3, r3, r2
 80176e8:	bf44      	itt	mi
 80176ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80176ee:	b21b      	sxthmi	r3, r3
 80176f0:	1b5d      	subs	r5, r3, r5
 80176f2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80176f6:	e7b4      	b.n	8017662 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080176f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80176f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176fc:	461e      	mov	r6, r3
 80176fe:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017700:	4604      	mov	r4, r0
 8017702:	4617      	mov	r7, r2
 8017704:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017708:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801770c:	f7ec fd68 	bl	80041e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017710:	4605      	mov	r5, r0
 8017712:	b918      	cbnz	r0, 801771c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017714:	6030      	str	r0, [r6, #0]
 8017716:	4628      	mov	r0, r5
 8017718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	4601      	mov	r1, r0
 8017720:	4638      	mov	r0, r7
 8017722:	68db      	ldr	r3, [r3, #12]
 8017724:	4798      	blx	r3
 8017726:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801772a:	4602      	mov	r2, r0
 801772c:	6030      	str	r0, [r6, #0]
 801772e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017732:	d213      	bcs.n	801775c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017734:	4643      	mov	r3, r8
 8017736:	4639      	mov	r1, r7
 8017738:	4620      	mov	r0, r4
 801773a:	f7ff fe39 	bl	80173b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801773e:	6030      	str	r0, [r6, #0]
 8017740:	6833      	ldr	r3, [r6, #0]
 8017742:	b143      	cbz	r3, 8017756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017744:	7b5a      	ldrb	r2, [r3, #13]
 8017746:	7a9b      	ldrb	r3, [r3, #10]
 8017748:	0052      	lsls	r2, r2, #1
 801774a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801774e:	4313      	orrs	r3, r2
 8017750:	bf0c      	ite	eq
 8017752:	2301      	moveq	r3, #1
 8017754:	2300      	movne	r3, #0
 8017756:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801775a:	e7dc      	b.n	8017716 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801775c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017760:	b29b      	uxth	r3, r3
 8017762:	2b7f      	cmp	r3, #127	; 0x7f
 8017764:	d804      	bhi.n	8017770 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8017766:	4639      	mov	r1, r7
 8017768:	4620      	mov	r0, r4
 801776a:	f7ff fd15 	bl	8017198 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801776e:	e7e6      	b.n	801773e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017770:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017774:	2b00      	cmp	r3, #0
 8017776:	d0e3      	beq.n	8017740 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017778:	f640 1302 	movw	r3, #2306	; 0x902
 801777c:	429d      	cmp	r5, r3
 801777e:	d1df      	bne.n	8017740 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017780:	4601      	mov	r1, r0
 8017782:	4620      	mov	r0, r4
 8017784:	f7ff fcd9 	bl	801713a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017788:	e7d9      	b.n	801773e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801778a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801778a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801778e:	461e      	mov	r6, r3
 8017790:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017792:	4604      	mov	r4, r0
 8017794:	4617      	mov	r7, r2
 8017796:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801779a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801779e:	f7ec fd1f 	bl	80041e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80177a2:	4605      	mov	r5, r0
 80177a4:	b918      	cbnz	r0, 80177ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80177a6:	6030      	str	r0, [r6, #0]
 80177a8:	4628      	mov	r0, r5
 80177aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	4601      	mov	r1, r0
 80177b2:	4638      	mov	r0, r7
 80177b4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80177b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80177bc:	47c8      	blx	r9
 80177be:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80177c2:	4602      	mov	r2, r0
 80177c4:	6030      	str	r0, [r6, #0]
 80177c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80177ca:	d213      	bcs.n	80177f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80177cc:	4643      	mov	r3, r8
 80177ce:	4639      	mov	r1, r7
 80177d0:	4620      	mov	r0, r4
 80177d2:	f7ff fded 	bl	80173b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80177d6:	6030      	str	r0, [r6, #0]
 80177d8:	6833      	ldr	r3, [r6, #0]
 80177da:	b143      	cbz	r3, 80177ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80177dc:	7b5a      	ldrb	r2, [r3, #13]
 80177de:	7a9b      	ldrb	r3, [r3, #10]
 80177e0:	0052      	lsls	r2, r2, #1
 80177e2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80177e6:	4313      	orrs	r3, r2
 80177e8:	bf0c      	ite	eq
 80177ea:	2301      	moveq	r3, #1
 80177ec:	2300      	movne	r3, #0
 80177ee:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80177f2:	e7d9      	b.n	80177a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80177f4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80177f8:	b29b      	uxth	r3, r3
 80177fa:	2b7f      	cmp	r3, #127	; 0x7f
 80177fc:	d804      	bhi.n	8017808 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80177fe:	4639      	mov	r1, r7
 8017800:	4620      	mov	r0, r4
 8017802:	f7ff fcc9 	bl	8017198 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017806:	e7e6      	b.n	80177d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8017808:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801780c:	2b00      	cmp	r3, #0
 801780e:	d0e3      	beq.n	80177d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017810:	f640 1302 	movw	r3, #2306	; 0x902
 8017814:	429d      	cmp	r5, r3
 8017816:	d1df      	bne.n	80177d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017818:	4601      	mov	r1, r0
 801781a:	4620      	mov	r0, r4
 801781c:	f7ff fc8d 	bl	801713a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017820:	e7d9      	b.n	80177d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08017822 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017822:	b510      	push	{r4, lr}
 8017824:	4604      	mov	r4, r0
 8017826:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801782a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801782c:	b1e1      	cbz	r1, 8017868 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801782e:	2b0a      	cmp	r3, #10
 8017830:	d02d      	beq.n	801788e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8017832:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017834:	3901      	subs	r1, #1
 8017836:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801783a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801783c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8017840:	1c51      	adds	r1, r2, #1
 8017842:	b289      	uxth	r1, r1
 8017844:	2901      	cmp	r1, #1
 8017846:	bf8a      	itet	hi
 8017848:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801784c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801784e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8017850:	1c5a      	adds	r2, r3, #1
 8017852:	8722      	strh	r2, [r4, #56]	; 0x38
 8017854:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017856:	4413      	add	r3, r2
 8017858:	b29b      	uxth	r3, r3
 801785a:	2b09      	cmp	r3, #9
 801785c:	bf88      	it	hi
 801785e:	3b0a      	subhi	r3, #10
 8017860:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017864:	8458      	strh	r0, [r3, #34]	; 0x22
 8017866:	e7de      	b.n	8017826 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017868:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801786a:	2b0a      	cmp	r3, #10
 801786c:	d00f      	beq.n	801788e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801786e:	4620      	mov	r0, r4
 8017870:	f7ff fc11 	bl	8017096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017874:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017876:	1c5a      	adds	r2, r3, #1
 8017878:	8722      	strh	r2, [r4, #56]	; 0x38
 801787a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801787c:	4413      	add	r3, r2
 801787e:	b29b      	uxth	r3, r3
 8017880:	2b09      	cmp	r3, #9
 8017882:	bf88      	it	hi
 8017884:	3b0a      	subhi	r3, #10
 8017886:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801788a:	8458      	strh	r0, [r3, #34]	; 0x22
 801788c:	e7ec      	b.n	8017868 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801788e:	bd10      	pop	{r4, pc}

08017890 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017890:	b538      	push	{r3, r4, r5, lr}
 8017892:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017894:	4604      	mov	r4, r0
 8017896:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801789a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801789c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801789e:	3a01      	subs	r2, #1
 80178a0:	8702      	strh	r2, [r0, #56]	; 0x38
 80178a2:	1c5a      	adds	r2, r3, #1
 80178a4:	b292      	uxth	r2, r2
 80178a6:	2a09      	cmp	r2, #9
 80178a8:	bf8a      	itet	hi
 80178aa:	3b09      	subhi	r3, #9
 80178ac:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80178ae:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80178b0:	f7ff ffb7 	bl	8017822 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80178b4:	8c23      	ldrh	r3, [r4, #32]
 80178b6:	2b01      	cmp	r3, #1
 80178b8:	bf9c      	itt	ls
 80178ba:	3301      	addls	r3, #1
 80178bc:	8423      	strhls	r3, [r4, #32]
 80178be:	8be3      	ldrh	r3, [r4, #30]
 80178c0:	b90b      	cbnz	r3, 80178c6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80178c2:	2302      	movs	r3, #2
 80178c4:	83e3      	strh	r3, [r4, #30]
 80178c6:	8be3      	ldrh	r3, [r4, #30]
 80178c8:	4628      	mov	r0, r5
 80178ca:	3b01      	subs	r3, #1
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	83e3      	strh	r3, [r4, #30]
 80178d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80178d4:	8365      	strh	r5, [r4, #26]
 80178d6:	bd38      	pop	{r3, r4, r5, pc}

080178d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80178d8:	428a      	cmp	r2, r1
 80178da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178de:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80178e0:	d932      	bls.n	8017948 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80178e2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80178e4:	1a54      	subs	r4, r2, r1
 80178e6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80178ea:	19ee      	adds	r6, r5, r7
 80178ec:	fa1f fe84 	uxth.w	lr, r4
 80178f0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80178f4:	3e01      	subs	r6, #1
 80178f6:	b2b4      	uxth	r4, r6
 80178f8:	eba4 090e 	sub.w	r9, r4, lr
 80178fc:	fa1f f989 	uxth.w	r9, r9
 8017900:	2c09      	cmp	r4, #9
 8017902:	4626      	mov	r6, r4
 8017904:	bf88      	it	hi
 8017906:	f1a4 060a 	subhi.w	r6, r4, #10
 801790a:	f1bc 0f00 	cmp.w	ip, #0
 801790e:	f104 34ff 	add.w	r4, r4, #4294967295
 8017912:	bf08      	it	eq
 8017914:	f04f 0c02 	moveq.w	ip, #2
 8017918:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801791c:	b2a4      	uxth	r4, r4
 801791e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017922:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8017926:	454c      	cmp	r4, r9
 8017928:	fa1f fc8c 	uxth.w	ip, ip
 801792c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017930:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017934:	d1e4      	bne.n	8017900 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017936:	eba5 050e 	sub.w	r5, r5, lr
 801793a:	eb0e 0408 	add.w	r4, lr, r8
 801793e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017942:	8705      	strh	r5, [r0, #56]	; 0x38
 8017944:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8017948:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801794a:	250a      	movs	r5, #10
 801794c:	1a64      	subs	r4, r4, r1
 801794e:	4439      	add	r1, r7
 8017950:	b289      	uxth	r1, r1
 8017952:	8704      	strh	r4, [r0, #56]	; 0x38
 8017954:	2909      	cmp	r1, #9
 8017956:	bf88      	it	hi
 8017958:	390a      	subhi	r1, #10
 801795a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801795c:	b18a      	cbz	r2, 8017982 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801795e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8017960:	3a01      	subs	r2, #1
 8017962:	3101      	adds	r1, #1
 8017964:	b292      	uxth	r2, r2
 8017966:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801796a:	8701      	strh	r1, [r0, #56]	; 0x38
 801796c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801796e:	b901      	cbnz	r1, 8017972 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8017970:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017972:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017974:	3901      	subs	r1, #1
 8017976:	b289      	uxth	r1, r1
 8017978:	86c1      	strh	r1, [r0, #54]	; 0x36
 801797a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801797e:	844c      	strh	r4, [r1, #34]	; 0x22
 8017980:	e7ec      	b.n	801795c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8017982:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017986:	f7ff bf4c 	b.w	8017822 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801798a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801798a:	b570      	push	{r4, r5, r6, lr}
 801798c:	2500      	movs	r5, #0
 801798e:	4295      	cmp	r5, r2
 8017990:	d011      	beq.n	80179b6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8017992:	8bc4      	ldrh	r4, [r0, #30]
 8017994:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017998:	4414      	add	r4, r2
 801799a:	3c01      	subs	r4, #1
 801799c:	1b64      	subs	r4, r4, r5
 801799e:	b2a4      	uxth	r4, r4
 80179a0:	2c01      	cmp	r4, #1
 80179a2:	bf88      	it	hi
 80179a4:	3c02      	subhi	r4, #2
 80179a6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80179aa:	8b64      	ldrh	r4, [r4, #26]
 80179ac:	42b4      	cmp	r4, r6
 80179ae:	d117      	bne.n	80179e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80179b0:	3501      	adds	r5, #1
 80179b2:	b2ad      	uxth	r5, r5
 80179b4:	e7eb      	b.n	801798e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80179b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80179ba:	2400      	movs	r4, #0
 80179bc:	4413      	add	r3, r2
 80179be:	b2a2      	uxth	r2, r4
 80179c0:	429a      	cmp	r2, r3
 80179c2:	da0f      	bge.n	80179e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80179c4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80179c6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80179ca:	3401      	adds	r4, #1
 80179cc:	4432      	add	r2, r6
 80179ce:	b292      	uxth	r2, r2
 80179d0:	2a09      	cmp	r2, #9
 80179d2:	bf88      	it	hi
 80179d4:	3a0a      	subhi	r2, #10
 80179d6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80179da:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80179dc:	42aa      	cmp	r2, r5
 80179de:	d0ee      	beq.n	80179be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80179e0:	2000      	movs	r0, #0
 80179e2:	bd70      	pop	{r4, r5, r6, pc}
 80179e4:	2001      	movs	r0, #1
 80179e6:	e7fc      	b.n	80179e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080179e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80179e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ec:	4605      	mov	r5, r0
 80179ee:	4616      	mov	r6, r2
 80179f0:	1c8c      	adds	r4, r1, #2
 80179f2:	8809      	ldrh	r1, [r1, #0]
 80179f4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80179f8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80179fc:	42b3      	cmp	r3, r6
 80179fe:	d124      	bne.n	8017a4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017a00:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017a04:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017a08:	f001 070f 	and.w	r7, r1, #15
 8017a0c:	4652      	mov	r2, sl
 8017a0e:	f8cd 8000 	str.w	r8, [sp]
 8017a12:	464b      	mov	r3, r9
 8017a14:	4621      	mov	r1, r4
 8017a16:	4628      	mov	r0, r5
 8017a18:	f7ff ffb7 	bl	801798a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017a1c:	4683      	mov	fp, r0
 8017a1e:	b168      	cbz	r0, 8017a3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017a20:	eb0a 0109 	add.w	r1, sl, r9
 8017a24:	463a      	mov	r2, r7
 8017a26:	4628      	mov	r0, r5
 8017a28:	4441      	add	r1, r8
 8017a2a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017a2e:	4649      	mov	r1, r9
 8017a30:	f7ff ff52 	bl	80178d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017a34:	4658      	mov	r0, fp
 8017a36:	b003      	add	sp, #12
 8017a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a3c:	eb07 010a 	add.w	r1, r7, sl
 8017a40:	4449      	add	r1, r9
 8017a42:	4441      	add	r1, r8
 8017a44:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017a48:	e7d2      	b.n	80179f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8017a4a:	f04f 0b00 	mov.w	fp, #0
 8017a4e:	e7f1      	b.n	8017a34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017a50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017a50:	b570      	push	{r4, r5, r6, lr}
 8017a52:	8810      	ldrh	r0, [r2, #0]
 8017a54:	4298      	cmp	r0, r3
 8017a56:	d817      	bhi.n	8017a88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017a58:	1e48      	subs	r0, r1, #1
 8017a5a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017a5e:	4298      	cmp	r0, r3
 8017a60:	d312      	bcc.n	8017a88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017a62:	2400      	movs	r4, #0
 8017a64:	428c      	cmp	r4, r1
 8017a66:	d20f      	bcs.n	8017a88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017a68:	1860      	adds	r0, r4, r1
 8017a6a:	1040      	asrs	r0, r0, #1
 8017a6c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017a70:	0085      	lsls	r5, r0, #2
 8017a72:	42b3      	cmp	r3, r6
 8017a74:	d902      	bls.n	8017a7c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017a76:	3001      	adds	r0, #1
 8017a78:	b284      	uxth	r4, r0
 8017a7a:	e7f3      	b.n	8017a64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017a7c:	d201      	bcs.n	8017a82 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8017a7e:	b281      	uxth	r1, r0
 8017a80:	e7f0      	b.n	8017a64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017a82:	442a      	add	r2, r5
 8017a84:	8850      	ldrh	r0, [r2, #2]
 8017a86:	bd70      	pop	{r4, r5, r6, pc}
 8017a88:	2000      	movs	r0, #0
 8017a8a:	e7fc      	b.n	8017a86 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08017a8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a90:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8017a92:	4604      	mov	r4, r0
 8017a94:	260b      	movs	r6, #11
 8017a96:	886f      	ldrh	r7, [r5, #2]
 8017a98:	087f      	lsrs	r7, r7, #1
 8017a9a:	3e01      	subs	r6, #1
 8017a9c:	d013      	beq.n	8017ac6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017a9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017aa0:	462a      	mov	r2, r5
 8017aa2:	4639      	mov	r1, r7
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017aaa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017aae:	4643      	mov	r3, r8
 8017ab0:	f7ff ffce 	bl	8017a50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017ab4:	b138      	cbz	r0, 8017ac6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017ab6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017aba:	4642      	mov	r2, r8
 8017abc:	4620      	mov	r0, r4
 8017abe:	f7ff ff93 	bl	80179e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	d1e9      	bne.n	8017a9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017acc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017acc:	b570      	push	{r4, r5, r6, lr}
 8017ace:	694a      	ldr	r2, [r1, #20]
 8017ad0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017ad2:	684b      	ldr	r3, [r1, #4]
 8017ad4:	1b54      	subs	r4, r2, r5
 8017ad6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017ad8:	f000 8106 	beq.w	8017ce8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017adc:	1b9b      	subs	r3, r3, r6
 8017ade:	d003      	beq.n	8017ae8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017ae0:	4363      	muls	r3, r4
 8017ae2:	2210      	movs	r2, #16
 8017ae4:	fb93 f3f2 	sdiv	r3, r3, r2
 8017ae8:	680c      	ldr	r4, [r1, #0]
 8017aea:	698a      	ldr	r2, [r1, #24]
 8017aec:	1b65      	subs	r5, r4, r5
 8017aee:	f000 80fd 	beq.w	8017cec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017af2:	1b92      	subs	r2, r2, r6
 8017af4:	d003      	beq.n	8017afe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017af6:	436a      	muls	r2, r5
 8017af8:	2410      	movs	r4, #16
 8017afa:	fb92 f2f4 	sdiv	r2, r2, r4
 8017afe:	1a9b      	subs	r3, r3, r2
 8017b00:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8017d28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017b08:	460a      	mov	r2, r1
 8017b0a:	ee07 3a90 	vmov	s15, r3
 8017b0e:	f100 040c 	add.w	r4, r0, #12
 8017b12:	4603      	mov	r3, r0
 8017b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b18:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017b1c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017b20:	eeb1 6a43 	vneg.f32	s12, s6
 8017b24:	edd2 7a02 	vldr	s15, [r2, #8]
 8017b28:	3214      	adds	r2, #20
 8017b2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017b2e:	ece3 6a01 	vstmia	r3!, {s13}
 8017b32:	429c      	cmp	r4, r3
 8017b34:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017b38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017b3c:	edc3 7a02 	vstr	s15, [r3, #8]
 8017b40:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017b44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017b48:	edc3 7a05 	vstr	s15, [r3, #20]
 8017b4c:	d1ea      	bne.n	8017b24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8017b4e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017b50:	698b      	ldr	r3, [r1, #24]
 8017b52:	edd0 4a02 	vldr	s9, [r0, #8]
 8017b56:	1a9b      	subs	r3, r3, r2
 8017b58:	edd0 3a00 	vldr	s7, [r0]
 8017b5c:	edd0 6a01 	vldr	s13, [r0, #4]
 8017b60:	ee07 3a90 	vmov	s15, r3
 8017b64:	684b      	ldr	r3, [r1, #4]
 8017b66:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017b6a:	ed90 5a05 	vldr	s10, [r0, #20]
 8017b6e:	1a9b      	subs	r3, r3, r2
 8017b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b74:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017b78:	ed90 2a03 	vldr	s4, [r0, #12]
 8017b7c:	ee07 3a10 	vmov	s14, r3
 8017b80:	edd0 5a04 	vldr	s11, [r0, #16]
 8017b84:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017b88:	ed90 1a07 	vldr	s2, [r0, #28]
 8017b8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b90:	edd0 2a06 	vldr	s5, [r0, #24]
 8017b94:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017b98:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017b9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017ba0:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017ba4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017ba8:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017bac:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8017bb0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017bb2:	694a      	ldr	r2, [r1, #20]
 8017bb4:	1b13      	subs	r3, r2, r4
 8017bb6:	ee07 3a10 	vmov	s14, r3
 8017bba:	680b      	ldr	r3, [r1, #0]
 8017bbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017bc0:	1b1b      	subs	r3, r3, r4
 8017bc2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017bc6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017bca:	ee07 3a10 	vmov	s14, r3
 8017bce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017bd2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017bd6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017bda:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017bde:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8017be2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017be4:	698b      	ldr	r3, [r1, #24]
 8017be6:	1a9b      	subs	r3, r3, r2
 8017be8:	ee06 3a90 	vmov	s13, r3
 8017bec:	684b      	ldr	r3, [r1, #4]
 8017bee:	1a9b      	subs	r3, r3, r2
 8017bf0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017bf4:	ee07 3a10 	vmov	s14, r3
 8017bf8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017bfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017c00:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017c04:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017c08:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017c0c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017c10:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8017c14:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017c16:	694a      	ldr	r2, [r1, #20]
 8017c18:	1b13      	subs	r3, r2, r4
 8017c1a:	ee07 3a10 	vmov	s14, r3
 8017c1e:	680b      	ldr	r3, [r1, #0]
 8017c20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017c24:	1b1b      	subs	r3, r3, r4
 8017c26:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017c2a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8017c2e:	ee07 3a10 	vmov	s14, r3
 8017c32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017c36:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017c3a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017c3e:	edd0 5a08 	vldr	s11, [r0, #32]
 8017c42:	ee31 1a65 	vsub.f32	s2, s2, s11
 8017c46:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8017c4a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8017c4e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8017c52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017c54:	698b      	ldr	r3, [r1, #24]
 8017c56:	1a9b      	subs	r3, r3, r2
 8017c58:	ee07 3a10 	vmov	s14, r3
 8017c5c:	684b      	ldr	r3, [r1, #4]
 8017c5e:	1a9b      	subs	r3, r3, r2
 8017c60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017c64:	ee01 3a90 	vmov	s3, r3
 8017c68:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017c6c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017c70:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8017c74:	ee61 1a84 	vmul.f32	s3, s3, s8
 8017c78:	eea1 7a21 	vfma.f32	s14, s2, s3
 8017c7c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8017c80:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017c84:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017c86:	694a      	ldr	r2, [r1, #20]
 8017c88:	1b13      	subs	r3, r2, r4
 8017c8a:	ee03 3a10 	vmov	s6, r3
 8017c8e:	680b      	ldr	r3, [r1, #0]
 8017c90:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017c94:	1b1b      	subs	r3, r3, r4
 8017c96:	ee23 3a04 	vmul.f32	s6, s6, s8
 8017c9a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8017c9e:	ee03 3a10 	vmov	s6, r3
 8017ca2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017ca6:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017caa:	eee1 5a04 	vfma.f32	s11, s2, s8
 8017cae:	ee25 6a86 	vmul.f32	s12, s11, s12
 8017cb2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8017cb6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8017cba:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8017cbe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8017cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc6:	dd13      	ble.n	8017cf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017ccc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017cd0:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017cd2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cde:	dd15      	ble.n	8017d0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017ce4:	6403      	str	r3, [r0, #64]	; 0x40
 8017ce6:	bd70      	pop	{r4, r5, r6, pc}
 8017ce8:	4623      	mov	r3, r4
 8017cea:	e6fd      	b.n	8017ae8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017cec:	462a      	mov	r2, r5
 8017cee:	e706      	b.n	8017afe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017cf0:	d502      	bpl.n	8017cf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8017cf2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017cf6:	e7e9      	b.n	8017ccc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017cf8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017cfc:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017d00:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d08:	dade      	bge.n	8017cc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017d0a:	e7f2      	b.n	8017cf2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017d0c:	d502      	bpl.n	8017d14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8017d0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017d12:	e7e7      	b.n	8017ce4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017d14:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017d18:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017d1c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d24:	dadc      	bge.n	8017ce0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017d26:	e7f2      	b.n	8017d0e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017d28:	3d800000 	.word	0x3d800000

08017d2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d30:	2714      	movs	r7, #20
 8017d32:	435f      	muls	r7, r3
 8017d34:	eb02 0c07 	add.w	ip, r2, r7
 8017d38:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017d3c:	f115 0e0f 	adds.w	lr, r5, #15
 8017d40:	f100 80a2 	bmi.w	8017e88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017d44:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8017d48:	9c08      	ldr	r4, [sp, #32]
 8017d4a:	2614      	movs	r6, #20
 8017d4c:	f8c0 e014 	str.w	lr, [r0, #20]
 8017d50:	4366      	muls	r6, r4
 8017d52:	eb02 0806 	add.w	r8, r2, r6
 8017d56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017d5a:	f115 040f 	adds.w	r4, r5, #15
 8017d5e:	f100 809f 	bmi.w	8017ea0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8017d62:	1124      	asrs	r4, r4, #4
 8017d64:	eba4 040e 	sub.w	r4, r4, lr
 8017d68:	6184      	str	r4, [r0, #24]
 8017d6a:	2c00      	cmp	r4, #0
 8017d6c:	f000 808a 	beq.w	8017e84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8017d70:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8017d74:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017d78:	5995      	ldr	r5, [r2, r6]
 8017d7a:	eba4 0809 	sub.w	r8, r4, r9
 8017d7e:	59d4      	ldr	r4, [r2, r7]
 8017d80:	eba5 0a04 	sub.w	sl, r5, r4
 8017d84:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8017d88:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8017d8c:	fb0e fe05 	mul.w	lr, lr, r5
 8017d90:	fb0a ee19 	mls	lr, sl, r9, lr
 8017d94:	fb08 e404 	mla	r4, r8, r4, lr
 8017d98:	3c01      	subs	r4, #1
 8017d9a:	19a4      	adds	r4, r4, r6
 8017d9c:	f100 808c 	bmi.w	8017eb8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8017da0:	fb94 fef6 	sdiv	lr, r4, r6
 8017da4:	fb06 441e 	mls	r4, r6, lr, r4
 8017da8:	f8c0 e000 	str.w	lr, [r0]
 8017dac:	6104      	str	r4, [r0, #16]
 8017dae:	2d00      	cmp	r5, #0
 8017db0:	f2c0 8095 	blt.w	8017ede <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8017db4:	fb95 f4f6 	sdiv	r4, r5, r6
 8017db8:	fb06 5514 	mls	r5, r6, r4, r5
 8017dbc:	6044      	str	r4, [r0, #4]
 8017dbe:	6085      	str	r5, [r0, #8]
 8017dc0:	60c6      	str	r6, [r0, #12]
 8017dc2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017dc6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017dca:	6945      	ldr	r5, [r0, #20]
 8017dcc:	59d2      	ldr	r2, [r2, r7]
 8017dce:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8017dd2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8017f00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8017dd6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8017dda:	ee07 4a10 	vmov	s14, r4
 8017dde:	6804      	ldr	r4, [r0, #0]
 8017de0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8017de4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017de8:	ee07 2a90 	vmov	s15, r2
 8017dec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017df4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017df8:	edd3 6a00 	vldr	s13, [r3]
 8017dfc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017e00:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8017e04:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017e08:	edc0 6a07 	vstr	s13, [r0, #28]
 8017e0c:	edd0 6a01 	vldr	s13, [r0, #4]
 8017e10:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8017e14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017e18:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8017e1c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017e20:	ed80 6a08 	vstr	s12, [r0, #32]
 8017e24:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8017e26:	6242      	str	r2, [r0, #36]	; 0x24
 8017e28:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8017e2c:	ed93 6a03 	vldr	s12, [r3, #12]
 8017e30:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017e34:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8017e38:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017e3c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8017e40:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8017e44:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8017e48:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017e4c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8017e50:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017e52:	6302      	str	r2, [r0, #48]	; 0x30
 8017e54:	ed93 6a06 	vldr	s12, [r3, #24]
 8017e58:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8017e5c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017e60:	eeb0 7a46 	vmov.f32	s14, s12
 8017e64:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8017e68:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017e6c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017e70:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8017e74:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8017e78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017e7c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8017e80:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8017e82:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e88:	2410      	movs	r4, #16
 8017e8a:	f1c5 0501 	rsb	r5, r5, #1
 8017e8e:	fb9e fef4 	sdiv	lr, lr, r4
 8017e92:	f015 050f 	ands.w	r5, r5, #15
 8017e96:	bf18      	it	ne
 8017e98:	2501      	movne	r5, #1
 8017e9a:	ebae 0e05 	sub.w	lr, lr, r5
 8017e9e:	e753      	b.n	8017d48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8017ea0:	f04f 0910 	mov.w	r9, #16
 8017ea4:	f1c5 0501 	rsb	r5, r5, #1
 8017ea8:	fb94 f4f9 	sdiv	r4, r4, r9
 8017eac:	f015 050f 	ands.w	r5, r5, #15
 8017eb0:	bf18      	it	ne
 8017eb2:	2501      	movne	r5, #1
 8017eb4:	1b64      	subs	r4, r4, r5
 8017eb6:	e755      	b.n	8017d64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8017eb8:	4264      	negs	r4, r4
 8017eba:	fb94 fef6 	sdiv	lr, r4, r6
 8017ebe:	f1ce 0800 	rsb	r8, lr, #0
 8017ec2:	fb06 441e 	mls	r4, r6, lr, r4
 8017ec6:	f8c0 8000 	str.w	r8, [r0]
 8017eca:	6104      	str	r4, [r0, #16]
 8017ecc:	2c00      	cmp	r4, #0
 8017ece:	f43f af6e 	beq.w	8017dae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8017ed2:	ea6f 0e0e 	mvn.w	lr, lr
 8017ed6:	1b34      	subs	r4, r6, r4
 8017ed8:	f8c0 e000 	str.w	lr, [r0]
 8017edc:	e766      	b.n	8017dac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8017ede:	426d      	negs	r5, r5
 8017ee0:	fb95 f4f6 	sdiv	r4, r5, r6
 8017ee4:	f1c4 0e00 	rsb	lr, r4, #0
 8017ee8:	fb06 5514 	mls	r5, r6, r4, r5
 8017eec:	f8c0 e004 	str.w	lr, [r0, #4]
 8017ef0:	6085      	str	r5, [r0, #8]
 8017ef2:	2d00      	cmp	r5, #0
 8017ef4:	f43f af64 	beq.w	8017dc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017ef8:	43e4      	mvns	r4, r4
 8017efa:	1b75      	subs	r5, r6, r5
 8017efc:	6044      	str	r4, [r0, #4]
 8017efe:	e75e      	b.n	8017dbe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017f00:	3d800000 	.word	0x3d800000

08017f04 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8017f04:	4602      	mov	r2, r0
 8017f06:	b148      	cbz	r0, 8017f1c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8017f08:	2300      	movs	r3, #0
 8017f0a:	b298      	uxth	r0, r3
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017f12:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8017f16:	2900      	cmp	r1, #0
 8017f18:	d1f7      	bne.n	8017f0a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8017f1a:	4770      	bx	lr
 8017f1c:	4770      	bx	lr
	...

08017f20 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8017f20:	4b01      	ldr	r3, [pc, #4]	; (8017f28 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8017f22:	6018      	str	r0, [r3, #0]
 8017f24:	4770      	bx	lr
 8017f26:	bf00      	nop
 8017f28:	2400c854 	.word	0x2400c854

08017f2c <_ZN8touchgfx11FontManager7getFontEt>:
 8017f2c:	4b03      	ldr	r3, [pc, #12]	; (8017f3c <_ZN8touchgfx11FontManager7getFontEt+0x10>)
 8017f2e:	4601      	mov	r1, r0
 8017f30:	6818      	ldr	r0, [r3, #0]
 8017f32:	b110      	cbz	r0, 8017f3a <_ZN8touchgfx11FontManager7getFontEt+0xe>
 8017f34:	6803      	ldr	r3, [r0, #0]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4718      	bx	r3
 8017f3a:	4770      	bx	lr
 8017f3c:	2400c854 	.word	0x2400c854

08017f40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017f40:	4b06      	ldr	r3, [pc, #24]	; (8017f5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8017f42:	881a      	ldrh	r2, [r3, #0]
 8017f44:	4282      	cmp	r2, r0
 8017f46:	d807      	bhi.n	8017f58 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017f48:	4b05      	ldr	r3, [pc, #20]	; (8017f60 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8017f4a:	881b      	ldrh	r3, [r3, #0]
 8017f4c:	4413      	add	r3, r2
 8017f4e:	4298      	cmp	r0, r3
 8017f50:	bfac      	ite	ge
 8017f52:	2000      	movge	r0, #0
 8017f54:	2001      	movlt	r0, #1
 8017f56:	4770      	bx	lr
 8017f58:	2000      	movs	r0, #0
 8017f5a:	4770      	bx	lr
 8017f5c:	2400c874 	.word	0x2400c874
 8017f60:	2400c878 	.word	0x2400c878

08017f64 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8017f64:	b508      	push	{r3, lr}
 8017f66:	4601      	mov	r1, r0
 8017f68:	f7ff ffea 	bl	8017f40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017f6c:	b118      	cbz	r0, 8017f76 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8017f6e:	4b02      	ldr	r3, [pc, #8]	; (8017f78 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8017f76:	bd08      	pop	{r3, pc}
 8017f78:	2400c858 	.word	0x2400c858

08017f7c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8017f7c:	b538      	push	{r3, r4, r5, lr}
 8017f7e:	4604      	mov	r4, r0
 8017f80:	f7ff ffde 	bl	8017f40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017f84:	b188      	cbz	r0, 8017faa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8017f86:	4b09      	ldr	r3, [pc, #36]	; (8017fac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8017f88:	881a      	ldrh	r2, [r3, #0]
 8017f8a:	4b09      	ldr	r3, [pc, #36]	; (8017fb0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8017f8c:	1aa4      	subs	r4, r4, r2
 8017f8e:	220e      	movs	r2, #14
 8017f90:	681d      	ldr	r5, [r3, #0]
 8017f92:	4362      	muls	r2, r4
 8017f94:	18ac      	adds	r4, r5, r2
 8017f96:	7b23      	ldrb	r3, [r4, #12]
 8017f98:	f013 0320 	ands.w	r3, r3, #32
 8017f9c:	bf17      	itett	ne
 8017f9e:	680b      	ldrne	r3, [r1, #0]
 8017fa0:	4618      	moveq	r0, r3
 8017fa2:	50ab      	strne	r3, [r5, r2]
 8017fa4:	684b      	ldrne	r3, [r1, #4]
 8017fa6:	bf18      	it	ne
 8017fa8:	6063      	strne	r3, [r4, #4]
 8017faa:	bd38      	pop	{r3, r4, r5, pc}
 8017fac:	2400c874 	.word	0x2400c874
 8017fb0:	2400c85c 	.word	0x2400c85c

08017fb4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8017fb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fb8:	4606      	mov	r6, r0
 8017fba:	460c      	mov	r4, r1
 8017fbc:	f7ff ffc0 	bl	8017f40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017fc0:	b918      	cbnz	r0, 8017fca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8017fc2:	2000      	movs	r0, #0
 8017fc4:	b002      	add	sp, #8
 8017fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fca:	4608      	mov	r0, r1
 8017fcc:	f7f9 fef1 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017fd0:	2800      	cmp	r0, #0
 8017fd2:	d1f6      	bne.n	8017fc2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017fd4:	4b3f      	ldr	r3, [pc, #252]	; (80180d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8017fd6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80180d8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8017fda:	881d      	ldrh	r5, [r3, #0]
 8017fdc:	f8d9 a000 	ldr.w	sl, [r9]
 8017fe0:	46c8      	mov	r8, r9
 8017fe2:	1b73      	subs	r3, r6, r5
 8017fe4:	250e      	movs	r5, #14
 8017fe6:	435d      	muls	r5, r3
 8017fe8:	eb0a 0705 	add.w	r7, sl, r5
 8017fec:	7b3b      	ldrb	r3, [r7, #12]
 8017fee:	f013 0f20 	tst.w	r3, #32
 8017ff2:	d0e6      	beq.n	8017fc2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017ff4:	4621      	mov	r1, r4
 8017ff6:	4638      	mov	r0, r7
 8017ff8:	f7fd fbd0 	bl	801579c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	d1e1      	bne.n	8017fc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8018000:	4639      	mov	r1, r7
 8018002:	4620      	mov	r0, r4
 8018004:	f7fd fbca 	bl	801579c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018008:	b108      	cbz	r0, 801800e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801800a:	4621      	mov	r1, r4
 801800c:	e020      	b.n	8018050 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801800e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018012:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8018016:	429a      	cmp	r2, r3
 8018018:	d11e      	bne.n	8018058 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801801a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801801e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8018022:	429a      	cmp	r2, r3
 8018024:	d118      	bne.n	8018058 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018026:	6820      	ldr	r0, [r4, #0]
 8018028:	466b      	mov	r3, sp
 801802a:	6861      	ldr	r1, [r4, #4]
 801802c:	c303      	stmia	r3!, {r0, r1}
 801802e:	4639      	mov	r1, r7
 8018030:	4668      	mov	r0, sp
 8018032:	f7fd fbd9 	bl	80157e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018036:	f8d9 3000 	ldr.w	r3, [r9]
 801803a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801803e:	442b      	add	r3, r5
 8018040:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018044:	4413      	add	r3, r2
 8018046:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801804a:	4293      	cmp	r3, r2
 801804c:	dc04      	bgt.n	8018058 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801804e:	4669      	mov	r1, sp
 8018050:	4630      	mov	r0, r6
 8018052:	f7ff ff93 	bl	8017f7c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8018056:	e7b5      	b.n	8017fc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8018058:	f8d8 3000 	ldr.w	r3, [r8]
 801805c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018060:	442b      	add	r3, r5
 8018062:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018066:	4291      	cmp	r1, r2
 8018068:	d119      	bne.n	801809e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801806a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801806e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8018072:	4291      	cmp	r1, r2
 8018074:	d113      	bne.n	801809e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8018076:	6820      	ldr	r0, [r4, #0]
 8018078:	466a      	mov	r2, sp
 801807a:	6861      	ldr	r1, [r4, #4]
 801807c:	c203      	stmia	r2!, {r0, r1}
 801807e:	4619      	mov	r1, r3
 8018080:	4668      	mov	r0, sp
 8018082:	f7fd fbb1 	bl	80157e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018086:	f8d8 3000 	ldr.w	r3, [r8]
 801808a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801808e:	442b      	add	r3, r5
 8018090:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018094:	4413      	add	r3, r2
 8018096:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801809a:	4293      	cmp	r3, r2
 801809c:	ddd7      	ble.n	801804e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801809e:	4620      	mov	r0, r4
 80180a0:	f7f9 fe87 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80180a4:	b990      	cbnz	r0, 80180cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80180a6:	88a7      	ldrh	r7, [r4, #4]
 80180a8:	88e3      	ldrh	r3, [r4, #6]
 80180aa:	fb17 f703 	smulbb	r7, r7, r3
 80180ae:	f8d8 3000 	ldr.w	r3, [r8]
 80180b2:	441d      	add	r5, r3
 80180b4:	4628      	mov	r0, r5
 80180b6:	f7f9 fe7c 	bl	8011db2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80180ba:	b948      	cbnz	r0, 80180d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80180bc:	88ab      	ldrh	r3, [r5, #4]
 80180be:	88ea      	ldrh	r2, [r5, #6]
 80180c0:	fb13 f302 	smulbb	r3, r3, r2
 80180c4:	42bb      	cmp	r3, r7
 80180c6:	f6bf af7c 	bge.w	8017fc2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80180ca:	e79e      	b.n	801800a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80180cc:	2700      	movs	r7, #0
 80180ce:	e7ee      	b.n	80180ae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 80180d0:	2300      	movs	r3, #0
 80180d2:	e7f7      	b.n	80180c4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 80180d4:	2400c874 	.word	0x2400c874
 80180d8:	2400c85c 	.word	0x2400c85c

080180dc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80180dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180de:	4c24      	ldr	r4, [pc, #144]	; (8018170 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80180e0:	6823      	ldr	r3, [r4, #0]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d042      	beq.n	801816c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80180e6:	4a23      	ldr	r2, [pc, #140]	; (8018174 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80180e8:	4d23      	ldr	r5, [pc, #140]	; (8018178 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80180ea:	8811      	ldrh	r1, [r2, #0]
 80180ec:	f8b5 c000 	ldrh.w	ip, [r5]
 80180f0:	4822      	ldr	r0, [pc, #136]	; (801817c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80180f2:	4461      	add	r1, ip
 80180f4:	1c4a      	adds	r2, r1, #1
 80180f6:	008f      	lsls	r7, r1, #2
 80180f8:	f022 0201 	bic.w	r2, r2, #1
 80180fc:	19de      	adds	r6, r3, r7
 80180fe:	0412      	lsls	r2, r2, #16
 8018100:	6006      	str	r6, [r0, #0]
 8018102:	4e1f      	ldr	r6, [pc, #124]	; (8018180 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018104:	0c12      	lsrs	r2, r2, #16
 8018106:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801810a:	19da      	adds	r2, r3, r7
 801810c:	6032      	str	r2, [r6, #0]
 801810e:	220e      	movs	r2, #14
 8018110:	fb02 f20c 	mul.w	r2, r2, ip
 8018114:	3203      	adds	r2, #3
 8018116:	f022 0203 	bic.w	r2, r2, #3
 801811a:	443a      	add	r2, r7
 801811c:	4f19      	ldr	r7, [pc, #100]	; (8018184 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801811e:	4413      	add	r3, r2
 8018120:	603b      	str	r3, [r7, #0]
 8018122:	2300      	movs	r3, #0
 8018124:	4f18      	ldr	r7, [pc, #96]	; (8018188 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018126:	469c      	mov	ip, r3
 8018128:	803b      	strh	r3, [r7, #0]
 801812a:	4f18      	ldr	r7, [pc, #96]	; (801818c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801812c:	683f      	ldr	r7, [r7, #0]
 801812e:	1aba      	subs	r2, r7, r2
 8018130:	4f17      	ldr	r7, [pc, #92]	; (8018190 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018132:	603a      	str	r2, [r7, #0]
 8018134:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018138:	4a16      	ldr	r2, [pc, #88]	; (8018194 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801813a:	8013      	strh	r3, [r2, #0]
 801813c:	428b      	cmp	r3, r1
 801813e:	d10d      	bne.n	801815c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8018140:	882d      	ldrh	r5, [r5, #0]
 8018142:	2300      	movs	r3, #0
 8018144:	6830      	ldr	r0, [r6, #0]
 8018146:	240e      	movs	r4, #14
 8018148:	429d      	cmp	r5, r3
 801814a:	d90f      	bls.n	801816c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801814c:	fb04 0203 	mla	r2, r4, r3, r0
 8018150:	3301      	adds	r3, #1
 8018152:	7b11      	ldrb	r1, [r2, #12]
 8018154:	f36f 1145 	bfc	r1, #5, #1
 8018158:	7311      	strb	r1, [r2, #12]
 801815a:	e7f5      	b.n	8018148 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801815c:	6822      	ldr	r2, [r4, #0]
 801815e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8018162:	6802      	ldr	r2, [r0, #0]
 8018164:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8018168:	3301      	adds	r3, #1
 801816a:	e7e7      	b.n	801813c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801816c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801816e:	bf00      	nop
 8018170:	2400c858 	.word	0x2400c858
 8018174:	2400c874 	.word	0x2400c874
 8018178:	2400c878 	.word	0x2400c878
 801817c:	2400c86c 	.word	0x2400c86c
 8018180:	2400c85c 	.word	0x2400c85c
 8018184:	2400c864 	.word	0x2400c864
 8018188:	2400c876 	.word	0x2400c876
 801818c:	2400c860 	.word	0x2400c860
 8018190:	2400c870 	.word	0x2400c870
 8018194:	2400c868 	.word	0x2400c868

08018198 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8018198:	4b06      	ldr	r3, [pc, #24]	; (80181b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	b943      	cbnz	r3, 80181b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801819e:	b139      	cbz	r1, 80181b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80181a0:	4b05      	ldr	r3, [pc, #20]	; (80181b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80181a2:	801a      	strh	r2, [r3, #0]
 80181a4:	4b05      	ldr	r3, [pc, #20]	; (80181bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80181a6:	6019      	str	r1, [r3, #0]
 80181a8:	4b05      	ldr	r3, [pc, #20]	; (80181c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80181aa:	6018      	str	r0, [r3, #0]
 80181ac:	f7ff bf96 	b.w	80180dc <_ZN8touchgfx6Bitmap10clearCacheEv>
 80181b0:	4770      	bx	lr
 80181b2:	bf00      	nop
 80181b4:	2400c864 	.word	0x2400c864
 80181b8:	2400c878 	.word	0x2400c878
 80181bc:	2400c860 	.word	0x2400c860
 80181c0:	2400c858 	.word	0x2400c858

080181c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80181c4:	b470      	push	{r4, r5, r6}
 80181c6:	4c07      	ldr	r4, [pc, #28]	; (80181e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80181c8:	4605      	mov	r5, r0
 80181ca:	4610      	mov	r0, r2
 80181cc:	9a03      	ldr	r2, [sp, #12]
 80181ce:	6826      	ldr	r6, [r4, #0]
 80181d0:	b936      	cbnz	r6, 80181e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80181d2:	6025      	str	r5, [r4, #0]
 80181d4:	4c04      	ldr	r4, [pc, #16]	; (80181e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80181d6:	8021      	strh	r1, [r4, #0]
 80181d8:	4619      	mov	r1, r3
 80181da:	bc70      	pop	{r4, r5, r6}
 80181dc:	f7ff bfdc 	b.w	8018198 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80181e0:	bc70      	pop	{r4, r5, r6}
 80181e2:	4770      	bx	lr
 80181e4:	2400c87c 	.word	0x2400c87c
 80181e8:	2400c874 	.word	0x2400c874

080181ec <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80181ec:	4a12      	ldr	r2, [pc, #72]	; (8018238 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80181ee:	8803      	ldrh	r3, [r0, #0]
 80181f0:	8812      	ldrh	r2, [r2, #0]
 80181f2:	4293      	cmp	r3, r2
 80181f4:	d207      	bcs.n	8018206 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80181f6:	4a11      	ldr	r2, [pc, #68]	; (801823c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80181f8:	2114      	movs	r1, #20
 80181fa:	6812      	ldr	r2, [r2, #0]
 80181fc:	fb01 2303 	mla	r3, r1, r3, r2
 8018200:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018204:	4770      	bx	lr
 8018206:	490e      	ldr	r1, [pc, #56]	; (8018240 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018208:	8809      	ldrh	r1, [r1, #0]
 801820a:	4411      	add	r1, r2
 801820c:	428b      	cmp	r3, r1
 801820e:	da04      	bge.n	801821a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018210:	1a9b      	subs	r3, r3, r2
 8018212:	4a0c      	ldr	r2, [pc, #48]	; (8018244 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018214:	210e      	movs	r1, #14
 8018216:	6812      	ldr	r2, [r2, #0]
 8018218:	e7f0      	b.n	80181fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801821a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801821e:	4293      	cmp	r3, r2
 8018220:	d108      	bne.n	8018234 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018222:	4b09      	ldr	r3, [pc, #36]	; (8018248 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018224:	781b      	ldrb	r3, [r3, #0]
 8018226:	b91b      	cbnz	r3, 8018230 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018228:	4b08      	ldr	r3, [pc, #32]	; (801824c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801822a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801822e:	4770      	bx	lr
 8018230:	4b07      	ldr	r3, [pc, #28]	; (8018250 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018232:	e7fa      	b.n	801822a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018234:	2000      	movs	r0, #0
 8018236:	4770      	bx	lr
 8018238:	2400c874 	.word	0x2400c874
 801823c:	2400c87c 	.word	0x2400c87c
 8018240:	2400c878 	.word	0x2400c878
 8018244:	2400c85c 	.word	0x2400c85c
 8018248:	2400c7ec 	.word	0x2400c7ec
 801824c:	2400c7ee 	.word	0x2400c7ee
 8018250:	2400c7f0 	.word	0x2400c7f0

08018254 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018254:	4a12      	ldr	r2, [pc, #72]	; (80182a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018256:	8803      	ldrh	r3, [r0, #0]
 8018258:	8812      	ldrh	r2, [r2, #0]
 801825a:	4293      	cmp	r3, r2
 801825c:	d207      	bcs.n	801826e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801825e:	4a11      	ldr	r2, [pc, #68]	; (80182a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018260:	2114      	movs	r1, #20
 8018262:	6812      	ldr	r2, [r2, #0]
 8018264:	fb01 2303 	mla	r3, r1, r3, r2
 8018268:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801826c:	4770      	bx	lr
 801826e:	490e      	ldr	r1, [pc, #56]	; (80182a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018270:	8809      	ldrh	r1, [r1, #0]
 8018272:	4411      	add	r1, r2
 8018274:	428b      	cmp	r3, r1
 8018276:	da04      	bge.n	8018282 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8018278:	1a9b      	subs	r3, r3, r2
 801827a:	4a0c      	ldr	r2, [pc, #48]	; (80182ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801827c:	210e      	movs	r1, #14
 801827e:	6812      	ldr	r2, [r2, #0]
 8018280:	e7f0      	b.n	8018264 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8018282:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018286:	4293      	cmp	r3, r2
 8018288:	d108      	bne.n	801829c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801828a:	4b09      	ldr	r3, [pc, #36]	; (80182b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801828c:	781b      	ldrb	r3, [r3, #0]
 801828e:	b91b      	cbnz	r3, 8018298 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8018290:	4b08      	ldr	r3, [pc, #32]	; (80182b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018292:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018296:	4770      	bx	lr
 8018298:	4b07      	ldr	r3, [pc, #28]	; (80182b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801829a:	e7fa      	b.n	8018292 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801829c:	2000      	movs	r0, #0
 801829e:	4770      	bx	lr
 80182a0:	2400c874 	.word	0x2400c874
 80182a4:	2400c87c 	.word	0x2400c87c
 80182a8:	2400c878 	.word	0x2400c878
 80182ac:	2400c85c 	.word	0x2400c85c
 80182b0:	2400c7ec 	.word	0x2400c7ec
 80182b4:	2400c7f0 	.word	0x2400c7f0
 80182b8:	2400c7ee 	.word	0x2400c7ee

080182bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80182bc:	4a1f      	ldr	r2, [pc, #124]	; (801833c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80182be:	b510      	push	{r4, lr}
 80182c0:	880b      	ldrh	r3, [r1, #0]
 80182c2:	8812      	ldrh	r2, [r2, #0]
 80182c4:	4293      	cmp	r3, r2
 80182c6:	d213      	bcs.n	80182f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80182c8:	4a1d      	ldr	r2, [pc, #116]	; (8018340 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80182ca:	2114      	movs	r1, #20
 80182cc:	6812      	ldr	r2, [r2, #0]
 80182ce:	fb01 2303 	mla	r3, r1, r3, r2
 80182d2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80182d6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80182da:	8a1a      	ldrh	r2, [r3, #16]
 80182dc:	8a5b      	ldrh	r3, [r3, #18]
 80182de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80182e2:	8004      	strh	r4, [r0, #0]
 80182e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182e8:	8041      	strh	r1, [r0, #2]
 80182ea:	8082      	strh	r2, [r0, #4]
 80182ec:	80c3      	strh	r3, [r0, #6]
 80182ee:	e00e      	b.n	801830e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80182f0:	4914      	ldr	r1, [pc, #80]	; (8018344 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80182f2:	8809      	ldrh	r1, [r1, #0]
 80182f4:	4411      	add	r1, r2
 80182f6:	428b      	cmp	r3, r1
 80182f8:	da0a      	bge.n	8018310 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80182fa:	1a9b      	subs	r3, r3, r2
 80182fc:	4a12      	ldr	r2, [pc, #72]	; (8018348 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80182fe:	210e      	movs	r1, #14
 8018300:	6812      	ldr	r2, [r2, #0]
 8018302:	fb01 2303 	mla	r3, r1, r3, r2
 8018306:	681a      	ldr	r2, [r3, #0]
 8018308:	6002      	str	r2, [r0, #0]
 801830a:	685a      	ldr	r2, [r3, #4]
 801830c:	6042      	str	r2, [r0, #4]
 801830e:	bd10      	pop	{r4, pc}
 8018310:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018314:	4293      	cmp	r3, r2
 8018316:	d10b      	bne.n	8018330 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018318:	4b0c      	ldr	r3, [pc, #48]	; (801834c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801831a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801831e:	4b0c      	ldr	r3, [pc, #48]	; (8018350 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018320:	8081      	strh	r1, [r0, #4]
 8018322:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018326:	2300      	movs	r3, #0
 8018328:	80c2      	strh	r2, [r0, #6]
 801832a:	8003      	strh	r3, [r0, #0]
 801832c:	8043      	strh	r3, [r0, #2]
 801832e:	e7ee      	b.n	801830e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018330:	2300      	movs	r3, #0
 8018332:	8003      	strh	r3, [r0, #0]
 8018334:	8043      	strh	r3, [r0, #2]
 8018336:	8083      	strh	r3, [r0, #4]
 8018338:	e7d8      	b.n	80182ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801833a:	bf00      	nop
 801833c:	2400c874 	.word	0x2400c874
 8018340:	2400c87c 	.word	0x2400c87c
 8018344:	2400c878 	.word	0x2400c878
 8018348:	2400c85c 	.word	0x2400c85c
 801834c:	2400c7e8 	.word	0x2400c7e8
 8018350:	2400c7ea 	.word	0x2400c7ea

08018354 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018354:	4a12      	ldr	r2, [pc, #72]	; (80183a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018356:	8803      	ldrh	r3, [r0, #0]
 8018358:	8811      	ldrh	r1, [r2, #0]
 801835a:	428b      	cmp	r3, r1
 801835c:	d20b      	bcs.n	8018376 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801835e:	4a11      	ldr	r2, [pc, #68]	; (80183a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018360:	6812      	ldr	r2, [r2, #0]
 8018362:	b112      	cbz	r2, 801836a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018364:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018368:	b9c0      	cbnz	r0, 801839c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801836a:	4a0f      	ldr	r2, [pc, #60]	; (80183a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801836c:	6811      	ldr	r1, [r2, #0]
 801836e:	2214      	movs	r2, #20
 8018370:	4353      	muls	r3, r2
 8018372:	58c8      	ldr	r0, [r1, r3]
 8018374:	4770      	bx	lr
 8018376:	4a0d      	ldr	r2, [pc, #52]	; (80183ac <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018378:	8812      	ldrh	r2, [r2, #0]
 801837a:	440a      	add	r2, r1
 801837c:	4293      	cmp	r3, r2
 801837e:	da04      	bge.n	801838a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8018380:	4a08      	ldr	r2, [pc, #32]	; (80183a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018382:	6812      	ldr	r2, [r2, #0]
 8018384:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018388:	4770      	bx	lr
 801838a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801838e:	4293      	cmp	r3, r2
 8018390:	d103      	bne.n	801839a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018392:	4b07      	ldr	r3, [pc, #28]	; (80183b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018398:	4770      	bx	lr
 801839a:	2000      	movs	r0, #0
 801839c:	4770      	bx	lr
 801839e:	bf00      	nop
 80183a0:	2400c874 	.word	0x2400c874
 80183a4:	2400c858 	.word	0x2400c858
 80183a8:	2400c87c 	.word	0x2400c87c
 80183ac:	2400c878 	.word	0x2400c878
 80183b0:	2400c7f4 	.word	0x2400c7f4

080183b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80183b4:	4b24      	ldr	r3, [pc, #144]	; (8018448 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80183b6:	8802      	ldrh	r2, [r0, #0]
 80183b8:	8818      	ldrh	r0, [r3, #0]
 80183ba:	4282      	cmp	r2, r0
 80183bc:	d221      	bcs.n	8018402 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80183be:	4b23      	ldr	r3, [pc, #140]	; (801844c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80183c0:	6819      	ldr	r1, [r3, #0]
 80183c2:	2314      	movs	r3, #20
 80183c4:	fb03 1302 	mla	r3, r3, r2, r1
 80183c8:	6858      	ldr	r0, [r3, #4]
 80183ca:	2800      	cmp	r0, #0
 80183cc:	d03a      	beq.n	8018444 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80183ce:	4920      	ldr	r1, [pc, #128]	; (8018450 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80183d0:	6809      	ldr	r1, [r1, #0]
 80183d2:	2900      	cmp	r1, #0
 80183d4:	d036      	beq.n	8018444 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80183d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80183da:	2900      	cmp	r1, #0
 80183dc:	d032      	beq.n	8018444 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80183de:	891a      	ldrh	r2, [r3, #8]
 80183e0:	8958      	ldrh	r0, [r3, #10]
 80183e2:	4350      	muls	r0, r2
 80183e4:	7c5a      	ldrb	r2, [r3, #17]
 80183e6:	7cdb      	ldrb	r3, [r3, #19]
 80183e8:	0952      	lsrs	r2, r2, #5
 80183ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80183ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80183f2:	2b0b      	cmp	r3, #11
 80183f4:	bf18      	it	ne
 80183f6:	0040      	lslne	r0, r0, #1
 80183f8:	3003      	adds	r0, #3
 80183fa:	f020 0003 	bic.w	r0, r0, #3
 80183fe:	4408      	add	r0, r1
 8018400:	4770      	bx	lr
 8018402:	4b14      	ldr	r3, [pc, #80]	; (8018454 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018404:	881b      	ldrh	r3, [r3, #0]
 8018406:	4403      	add	r3, r0
 8018408:	429a      	cmp	r2, r3
 801840a:	da1a      	bge.n	8018442 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801840c:	4b12      	ldr	r3, [pc, #72]	; (8018458 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801840e:	1a10      	subs	r0, r2, r0
 8018410:	210e      	movs	r1, #14
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	fb01 3000 	mla	r0, r1, r0, r3
 8018418:	7b03      	ldrb	r3, [r0, #12]
 801841a:	f003 031f 	and.w	r3, r3, #31
 801841e:	2b0b      	cmp	r3, #11
 8018420:	d10b      	bne.n	801843a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8018422:	8903      	ldrh	r3, [r0, #8]
 8018424:	8940      	ldrh	r0, [r0, #10]
 8018426:	4358      	muls	r0, r3
 8018428:	4b09      	ldr	r3, [pc, #36]	; (8018450 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801842a:	3003      	adds	r0, #3
 801842c:	6819      	ldr	r1, [r3, #0]
 801842e:	f020 0303 	bic.w	r3, r0, #3
 8018432:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8018436:	4418      	add	r0, r3
 8018438:	4770      	bx	lr
 801843a:	2b0d      	cmp	r3, #13
 801843c:	d101      	bne.n	8018442 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801843e:	300d      	adds	r0, #13
 8018440:	4770      	bx	lr
 8018442:	2000      	movs	r0, #0
 8018444:	4770      	bx	lr
 8018446:	bf00      	nop
 8018448:	2400c874 	.word	0x2400c874
 801844c:	2400c87c 	.word	0x2400c87c
 8018450:	2400c858 	.word	0x2400c858
 8018454:	2400c878 	.word	0x2400c878
 8018458:	2400c85c 	.word	0x2400c85c

0801845c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801845c:	4a17      	ldr	r2, [pc, #92]	; (80184bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801845e:	b510      	push	{r4, lr}
 8018460:	8803      	ldrh	r3, [r0, #0]
 8018462:	8812      	ldrh	r2, [r2, #0]
 8018464:	4293      	cmp	r3, r2
 8018466:	d20c      	bcs.n	8018482 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018468:	4a15      	ldr	r2, [pc, #84]	; (80184c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801846a:	2114      	movs	r1, #20
 801846c:	6812      	ldr	r2, [r2, #0]
 801846e:	fb01 2303 	mla	r3, r1, r3, r2
 8018472:	7c58      	ldrb	r0, [r3, #17]
 8018474:	0942      	lsrs	r2, r0, #5
 8018476:	7cd8      	ldrb	r0, [r3, #19]
 8018478:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801847c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8018480:	bd10      	pop	{r4, pc}
 8018482:	4910      	ldr	r1, [pc, #64]	; (80184c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8018484:	8809      	ldrh	r1, [r1, #0]
 8018486:	4411      	add	r1, r2
 8018488:	428b      	cmp	r3, r1
 801848a:	da09      	bge.n	80184a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801848c:	1a9b      	subs	r3, r3, r2
 801848e:	4a0e      	ldr	r2, [pc, #56]	; (80184c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8018490:	210e      	movs	r1, #14
 8018492:	6812      	ldr	r2, [r2, #0]
 8018494:	fb01 2303 	mla	r3, r1, r3, r2
 8018498:	7b18      	ldrb	r0, [r3, #12]
 801849a:	f000 001f 	and.w	r0, r0, #31
 801849e:	e7ef      	b.n	8018480 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80184a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80184a4:	4293      	cmp	r3, r2
 80184a6:	d106      	bne.n	80184b6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80184a8:	f7f9 ff2c 	bl	8012304 <_ZN8touchgfx3HAL3lcdEv>
 80184ac:	6803      	ldr	r3, [r0, #0]
 80184ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184b4:	4718      	bx	r3
 80184b6:	2000      	movs	r0, #0
 80184b8:	e7e2      	b.n	8018480 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80184ba:	bf00      	nop
 80184bc:	2400c874 	.word	0x2400c874
 80184c0:	2400c87c 	.word	0x2400c87c
 80184c4:	2400c878 	.word	0x2400c878
 80184c8:	2400c85c 	.word	0x2400c85c

080184cc <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80184cc:	2018      	movs	r0, #24
 80184ce:	4770      	bx	lr

080184d0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80184d0:	2001      	movs	r0, #1
 80184d2:	4770      	bx	lr

080184d4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80184d4:	4b02      	ldr	r3, [pc, #8]	; (80184e0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 80184d6:	8818      	ldrh	r0, [r3, #0]
 80184d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80184dc:	b280      	uxth	r0, r0
 80184de:	4770      	bx	lr
 80184e0:	2400c7ee 	.word	0x2400c7ee

080184e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80184e4:	2bff      	cmp	r3, #255	; 0xff
 80184e6:	d040      	beq.n	801856a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80184e8:	2a2c      	cmp	r2, #44	; 0x2c
 80184ea:	d02a      	beq.n	8018542 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 80184ec:	d80f      	bhi.n	801850e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80184ee:	2a08      	cmp	r2, #8
 80184f0:	d037      	beq.n	8018562 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80184f2:	d805      	bhi.n	8018500 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80184f4:	2a04      	cmp	r2, #4
 80184f6:	d032      	beq.n	801855e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 80184f8:	2a05      	cmp	r2, #5
 80184fa:	d02e      	beq.n	801855a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80184fc:	2000      	movs	r0, #0
 80184fe:	4770      	bx	lr
 8018500:	2a0a      	cmp	r2, #10
 8018502:	d02e      	beq.n	8018562 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018504:	d301      	bcc.n	801850a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8018506:	2a0b      	cmp	r2, #11
 8018508:	d1f8      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801850a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801850c:	4770      	bx	lr
 801850e:	2a30      	cmp	r2, #48	; 0x30
 8018510:	d029      	beq.n	8018566 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8018512:	d808      	bhi.n	8018526 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8018514:	2a2e      	cmp	r2, #46	; 0x2e
 8018516:	684b      	ldr	r3, [r1, #4]
 8018518:	d01a      	beq.n	8018550 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801851a:	d90b      	bls.n	8018534 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d1ec      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018522:	6a00      	ldr	r0, [r0, #32]
 8018524:	4770      	bx	lr
 8018526:	2a32      	cmp	r2, #50	; 0x32
 8018528:	d01d      	beq.n	8018566 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801852a:	d301      	bcc.n	8018530 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801852c:	2a33      	cmp	r2, #51	; 0x33
 801852e:	d1e5      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018530:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8018532:	4770      	bx	lr
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d0f3      	beq.n	8018522 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801853a:	2b01      	cmp	r3, #1
 801853c:	d1de      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801853e:	6900      	ldr	r0, [r0, #16]
 8018540:	4770      	bx	lr
 8018542:	684b      	ldr	r3, [r1, #4]
 8018544:	781b      	ldrb	r3, [r3, #0]
 8018546:	b133      	cbz	r3, 8018556 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8018548:	2b01      	cmp	r3, #1
 801854a:	d1d7      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801854c:	6880      	ldr	r0, [r0, #8]
 801854e:	4770      	bx	lr
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d1d2      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018556:	6980      	ldr	r0, [r0, #24]
 8018558:	4770      	bx	lr
 801855a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801855c:	4770      	bx	lr
 801855e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018560:	4770      	bx	lr
 8018562:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8018564:	4770      	bx	lr
 8018566:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8018568:	4770      	bx	lr
 801856a:	2a2c      	cmp	r2, #44	; 0x2c
 801856c:	d02a      	beq.n	80185c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801856e:	d80f      	bhi.n	8018590 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8018570:	2a08      	cmp	r2, #8
 8018572:	d035      	beq.n	80185e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8018574:	d805      	bhi.n	8018582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018576:	2a04      	cmp	r2, #4
 8018578:	d030      	beq.n	80185dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801857a:	2a05      	cmp	r2, #5
 801857c:	d1be      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801857e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8018580:	4770      	bx	lr
 8018582:	2a0a      	cmp	r2, #10
 8018584:	d02c      	beq.n	80185e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8018586:	d301      	bcc.n	801858c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8018588:	2a0b      	cmp	r2, #11
 801858a:	d1b7      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801858c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801858e:	4770      	bx	lr
 8018590:	2a30      	cmp	r2, #48	; 0x30
 8018592:	d027      	beq.n	80185e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8018594:	d808      	bhi.n	80185a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8018596:	2a2e      	cmp	r2, #46	; 0x2e
 8018598:	684b      	ldr	r3, [r1, #4]
 801859a:	d01a      	beq.n	80185d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801859c:	d90b      	bls.n	80185b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801859e:	781b      	ldrb	r3, [r3, #0]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d1ab      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80185a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80185a6:	4770      	bx	lr
 80185a8:	2a32      	cmp	r2, #50	; 0x32
 80185aa:	d01b      	beq.n	80185e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80185ac:	d301      	bcc.n	80185b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 80185ae:	2a33      	cmp	r2, #51	; 0x33
 80185b0:	d1a4      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80185b2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80185b4:	4770      	bx	lr
 80185b6:	781b      	ldrb	r3, [r3, #0]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d0f3      	beq.n	80185a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80185bc:	2b01      	cmp	r3, #1
 80185be:	d19d      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80185c0:	6940      	ldr	r0, [r0, #20]
 80185c2:	4770      	bx	lr
 80185c4:	684b      	ldr	r3, [r1, #4]
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	b133      	cbz	r3, 80185d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 80185ca:	2b01      	cmp	r3, #1
 80185cc:	d196      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80185ce:	68c0      	ldr	r0, [r0, #12]
 80185d0:	4770      	bx	lr
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d191      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80185d8:	69c0      	ldr	r0, [r0, #28]
 80185da:	4770      	bx	lr
 80185dc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80185de:	4770      	bx	lr
 80185e0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80185e2:	4770      	bx	lr
 80185e4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80185e6:	4770      	bx	lr

080185e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80185e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ec:	b085      	sub	sp, #20
 80185ee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80185f0:	9203      	str	r2, [sp, #12]
 80185f2:	6870      	ldr	r0, [r6, #4]
 80185f4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80185f8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80185fc:	9101      	str	r1, [sp, #4]
 80185fe:	fa1f f885 	uxth.w	r8, r5
 8018602:	43ed      	mvns	r5, r5
 8018604:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018608:	b2ed      	uxtb	r5, r5
 801860a:	fb00 2404 	mla	r4, r0, r4, r2
 801860e:	6832      	ldr	r2, [r6, #0]
 8018610:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018614:	4414      	add	r4, r2
 8018616:	f8dc 2000 	ldr.w	r2, [ip]
 801861a:	9202      	str	r2, [sp, #8]
 801861c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018620:	f102 0e04 	add.w	lr, r2, #4
 8018624:	9a01      	ldr	r2, [sp, #4]
 8018626:	2a00      	cmp	r2, #0
 8018628:	dc03      	bgt.n	8018632 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801862a:	9a03      	ldr	r2, [sp, #12]
 801862c:	2a00      	cmp	r2, #0
 801862e:	f340 8116 	ble.w	801885e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018632:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018634:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018638:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801863c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801863e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018642:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018646:	2b00      	cmp	r3, #0
 8018648:	dd0e      	ble.n	8018668 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801864a:	1406      	asrs	r6, r0, #16
 801864c:	d405      	bmi.n	801865a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801864e:	4556      	cmp	r6, sl
 8018650:	da03      	bge.n	801865a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018652:	1416      	asrs	r6, r2, #16
 8018654:	d401      	bmi.n	801865a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018656:	454e      	cmp	r6, r9
 8018658:	db07      	blt.n	801866a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801865a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801865c:	3b01      	subs	r3, #1
 801865e:	3403      	adds	r4, #3
 8018660:	4430      	add	r0, r6
 8018662:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018664:	4432      	add	r2, r6
 8018666:	e7ee      	b.n	8018646 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018668:	d063      	beq.n	8018732 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801866a:	1e5e      	subs	r6, r3, #1
 801866c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801866e:	fb07 0706 	mla	r7, r7, r6, r0
 8018672:	143f      	asrs	r7, r7, #16
 8018674:	d454      	bmi.n	8018720 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018676:	4557      	cmp	r7, sl
 8018678:	da52      	bge.n	8018720 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801867a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801867c:	fb07 2606 	mla	r6, r7, r6, r2
 8018680:	1436      	asrs	r6, r6, #16
 8018682:	d44d      	bmi.n	8018720 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018684:	454e      	cmp	r6, r9
 8018686:	da4b      	bge.n	8018720 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018688:	1ce6      	adds	r6, r4, #3
 801868a:	4699      	mov	r9, r3
 801868c:	f1b9 0f00 	cmp.w	r9, #0
 8018690:	f106 0603 	add.w	r6, r6, #3
 8018694:	dd48      	ble.n	8018728 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8018696:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801869a:	1417      	asrs	r7, r2, #16
 801869c:	9902      	ldr	r1, [sp, #8]
 801869e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80186a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80186a6:	fb0b 1707 	mla	r7, fp, r7, r1
 80186aa:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80186ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80186b0:	f817 700a 	ldrb.w	r7, [r7, sl]
 80186b4:	fb1b fb05 	smulbb	fp, fp, r5
 80186b8:	4408      	add	r0, r1
 80186ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 80186bc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80186c0:	440a      	add	r2, r1
 80186c2:	eb0e 0a07 	add.w	sl, lr, r7
 80186c6:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80186ca:	fb07 b708 	mla	r7, r7, r8, fp
 80186ce:	b2bf      	uxth	r7, r7
 80186d0:	f107 0b01 	add.w	fp, r7, #1
 80186d4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80186d8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80186dc:	fb1b fb05 	smulbb	fp, fp, r5
 80186e0:	123f      	asrs	r7, r7, #8
 80186e2:	f806 7c06 	strb.w	r7, [r6, #-6]
 80186e6:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80186ea:	fb07 b708 	mla	r7, r7, r8, fp
 80186ee:	b2bf      	uxth	r7, r7
 80186f0:	f107 0b01 	add.w	fp, r7, #1
 80186f4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80186f8:	123f      	asrs	r7, r7, #8
 80186fa:	f806 7c05 	strb.w	r7, [r6, #-5]
 80186fe:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018702:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018706:	fb1a fa05 	smulbb	sl, sl, r5
 801870a:	fb07 a708 	mla	r7, r7, r8, sl
 801870e:	b2bf      	uxth	r7, r7
 8018710:	f107 0a01 	add.w	sl, r7, #1
 8018714:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018718:	123f      	asrs	r7, r7, #8
 801871a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801871e:	e7b5      	b.n	801868c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8018720:	2700      	movs	r7, #0
 8018722:	1bde      	subs	r6, r3, r7
 8018724:	2e00      	cmp	r6, #0
 8018726:	dc42      	bgt.n	80187ae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8018728:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801872c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018730:	441c      	add	r4, r3
 8018732:	9b01      	ldr	r3, [sp, #4]
 8018734:	2b00      	cmp	r3, #0
 8018736:	f340 8092 	ble.w	801885e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801873a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801873e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018740:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018744:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018748:	eef0 6a62 	vmov.f32	s13, s5
 801874c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018750:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018754:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018758:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801875c:	eef0 6a43 	vmov.f32	s13, s6
 8018760:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018764:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8018768:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801876c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018770:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018774:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018778:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801877c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018780:	ee12 2a90 	vmov	r2, s5
 8018784:	eef0 2a47 	vmov.f32	s5, s14
 8018788:	fb92 f3f3 	sdiv	r3, r2, r3
 801878c:	ee13 2a10 	vmov	r2, s6
 8018790:	9311      	str	r3, [sp, #68]	; 0x44
 8018792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018794:	eeb0 3a67 	vmov.f32	s6, s15
 8018798:	fb92 f3f3 	sdiv	r3, r2, r3
 801879c:	9312      	str	r3, [sp, #72]	; 0x48
 801879e:	9b01      	ldr	r3, [sp, #4]
 80187a0:	9a03      	ldr	r2, [sp, #12]
 80187a2:	3b01      	subs	r3, #1
 80187a4:	9301      	str	r3, [sp, #4]
 80187a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187a8:	bf08      	it	eq
 80187aa:	4613      	moveq	r3, r2
 80187ac:	e73a      	b.n	8018624 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80187ae:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80187b2:	d44e      	bmi.n	8018852 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80187b4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80187b8:	4556      	cmp	r6, sl
 80187ba:	dd4a      	ble.n	8018852 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80187bc:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80187c0:	d447      	bmi.n	8018852 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80187c2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80187c6:	4559      	cmp	r1, fp
 80187c8:	dd43      	ble.n	8018852 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80187ca:	fa0f f986 	sxth.w	r9, r6
 80187ce:	9902      	ldr	r1, [sp, #8]
 80187d0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80187d4:	fb0b 1909 	mla	r9, fp, r9, r1
 80187d8:	f814 b006 	ldrb.w	fp, [r4, r6]
 80187dc:	f819 900a 	ldrb.w	r9, [r9, sl]
 80187e0:	fb1b fb05 	smulbb	fp, fp, r5
 80187e4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80187e8:	eb0e 0a09 	add.w	sl, lr, r9
 80187ec:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80187f0:	fb09 b908 	mla	r9, r9, r8, fp
 80187f4:	fa1f f989 	uxth.w	r9, r9
 80187f8:	f109 0b01 	add.w	fp, r9, #1
 80187fc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018800:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018804:	f804 9006 	strb.w	r9, [r4, r6]
 8018808:	4426      	add	r6, r4
 801880a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801880e:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018812:	fb1b fb05 	smulbb	fp, fp, r5
 8018816:	fb09 b908 	mla	r9, r9, r8, fp
 801881a:	fa1f f989 	uxth.w	r9, r9
 801881e:	f109 0b01 	add.w	fp, r9, #1
 8018822:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018826:	ea4f 2929 	mov.w	r9, r9, asr #8
 801882a:	f886 9001 	strb.w	r9, [r6, #1]
 801882e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018832:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018836:	fb1a fa05 	smulbb	sl, sl, r5
 801883a:	fb09 a908 	mla	r9, r9, r8, sl
 801883e:	fa1f f989 	uxth.w	r9, r9
 8018842:	f109 0a01 	add.w	sl, r9, #1
 8018846:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801884a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801884e:	f886 9002 	strb.w	r9, [r6, #2]
 8018852:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018854:	3701      	adds	r7, #1
 8018856:	4408      	add	r0, r1
 8018858:	9912      	ldr	r1, [sp, #72]	; 0x48
 801885a:	440a      	add	r2, r1
 801885c:	e761      	b.n	8018722 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801885e:	b005      	add	sp, #20
 8018860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018864 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018868:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801886a:	4693      	mov	fp, r2
 801886c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801886e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018872:	6868      	ldr	r0, [r5, #4]
 8018874:	6877      	ldr	r7, [r6, #4]
 8018876:	9100      	str	r1, [sp, #0]
 8018878:	3704      	adds	r7, #4
 801887a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801887e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8018882:	fb00 2404 	mla	r4, r0, r4, r2
 8018886:	682a      	ldr	r2, [r5, #0]
 8018888:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801888c:	4414      	add	r4, r2
 801888e:	6832      	ldr	r2, [r6, #0]
 8018890:	9201      	str	r2, [sp, #4]
 8018892:	9a00      	ldr	r2, [sp, #0]
 8018894:	2a00      	cmp	r2, #0
 8018896:	dc03      	bgt.n	80188a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018898:	f1bb 0f00 	cmp.w	fp, #0
 801889c:	f340 80bc 	ble.w	8018a18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80188a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80188a2:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80188a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80188aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188ac:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80188b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	dd0c      	ble.n	80188d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80188b8:	1405      	asrs	r5, r0, #16
 80188ba:	d405      	bmi.n	80188c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80188bc:	4555      	cmp	r5, sl
 80188be:	da03      	bge.n	80188c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80188c0:	1415      	asrs	r5, r2, #16
 80188c2:	d401      	bmi.n	80188c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80188c4:	454d      	cmp	r5, r9
 80188c6:	db05      	blt.n	80188d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80188c8:	4440      	add	r0, r8
 80188ca:	4472      	add	r2, lr
 80188cc:	3b01      	subs	r3, #1
 80188ce:	3403      	adds	r4, #3
 80188d0:	e7f0      	b.n	80188b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80188d2:	d03f      	beq.n	8018954 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80188d4:	1e5d      	subs	r5, r3, #1
 80188d6:	fb08 0c05 	mla	ip, r8, r5, r0
 80188da:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80188de:	d42e      	bmi.n	801893e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80188e0:	45d4      	cmp	ip, sl
 80188e2:	da2c      	bge.n	801893e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80188e4:	fb0e 2505 	mla	r5, lr, r5, r2
 80188e8:	142d      	asrs	r5, r5, #16
 80188ea:	d428      	bmi.n	801893e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80188ec:	454d      	cmp	r5, r9
 80188ee:	da26      	bge.n	801893e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80188f0:	1ce5      	adds	r5, r4, #3
 80188f2:	469c      	mov	ip, r3
 80188f4:	f1bc 0f00 	cmp.w	ip, #0
 80188f8:	f105 0503 	add.w	r5, r5, #3
 80188fc:	dd25      	ble.n	801894a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80188fe:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018902:	ea4f 4922 	mov.w	r9, r2, asr #16
 8018906:	f10c 3cff 	add.w	ip, ip, #4294967295
 801890a:	4472      	add	r2, lr
 801890c:	468a      	mov	sl, r1
 801890e:	9901      	ldr	r1, [sp, #4]
 8018910:	fb0a 1909 	mla	r9, sl, r9, r1
 8018914:	1401      	asrs	r1, r0, #16
 8018916:	4440      	add	r0, r8
 8018918:	f819 9001 	ldrb.w	r9, [r9, r1]
 801891c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018920:	eb07 0a09 	add.w	sl, r7, r9
 8018924:	f817 9009 	ldrb.w	r9, [r7, r9]
 8018928:	f805 9c06 	strb.w	r9, [r5, #-6]
 801892c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018930:	f805 9c05 	strb.w	r9, [r5, #-5]
 8018934:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018938:	f805 9c04 	strb.w	r9, [r5, #-4]
 801893c:	e7da      	b.n	80188f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801893e:	2500      	movs	r5, #0
 8018940:	eba3 0c05 	sub.w	ip, r3, r5
 8018944:	f1bc 0f00 	cmp.w	ip, #0
 8018948:	dc3b      	bgt.n	80189c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801894a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801894e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018952:	441c      	add	r4, r3
 8018954:	9b00      	ldr	r3, [sp, #0]
 8018956:	2b00      	cmp	r3, #0
 8018958:	dd5e      	ble.n	8018a18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801895a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801895e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018960:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018964:	eeb0 6a62 	vmov.f32	s12, s5
 8018968:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801896c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018970:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018974:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8018978:	eeb0 6a43 	vmov.f32	s12, s6
 801897c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018980:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8018984:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018988:	ee61 7a27 	vmul.f32	s15, s2, s15
 801898c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018990:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018994:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018998:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801899c:	ee12 2a90 	vmov	r2, s5
 80189a0:	eef0 2a47 	vmov.f32	s5, s14
 80189a4:	fb92 f8f3 	sdiv	r8, r2, r3
 80189a8:	ee13 2a10 	vmov	r2, s6
 80189ac:	eeb0 3a67 	vmov.f32	s6, s15
 80189b0:	fb92 fef3 	sdiv	lr, r2, r3
 80189b4:	9b00      	ldr	r3, [sp, #0]
 80189b6:	3b01      	subs	r3, #1
 80189b8:	9300      	str	r3, [sp, #0]
 80189ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189bc:	bf08      	it	eq
 80189be:	465b      	moveq	r3, fp
 80189c0:	e767      	b.n	8018892 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80189c2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80189c6:	d423      	bmi.n	8018a10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80189c8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80189cc:	45cc      	cmp	ip, r9
 80189ce:	dd1f      	ble.n	8018a10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80189d0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80189d4:	d41c      	bmi.n	8018a10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80189d6:	68f1      	ldr	r1, [r6, #12]
 80189d8:	4551      	cmp	r1, sl
 80189da:	dd19      	ble.n	8018a10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80189dc:	fa0f fc8c 	sxth.w	ip, ip
 80189e0:	9901      	ldr	r1, [sp, #4]
 80189e2:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80189e6:	f81c c009 	ldrb.w	ip, [ip, r9]
 80189ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80189ee:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80189f2:	eb07 090c 	add.w	r9, r7, ip
 80189f6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80189fa:	f804 a00c 	strb.w	sl, [r4, ip]
 80189fe:	44a4      	add	ip, r4
 8018a00:	f899 a001 	ldrb.w	sl, [r9, #1]
 8018a04:	f88c a001 	strb.w	sl, [ip, #1]
 8018a08:	f899 9002 	ldrb.w	r9, [r9, #2]
 8018a0c:	f88c 9002 	strb.w	r9, [ip, #2]
 8018a10:	4440      	add	r0, r8
 8018a12:	4472      	add	r2, lr
 8018a14:	3501      	adds	r5, #1
 8018a16:	e793      	b.n	8018940 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8018a18:	b003      	add	sp, #12
 8018a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a1e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a22:	b085      	sub	sp, #20
 8018a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018a2a:	9202      	str	r2, [sp, #8]
 8018a2c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8018a30:	6860      	ldr	r0, [r4, #4]
 8018a32:	9203      	str	r2, [sp, #12]
 8018a34:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8018a38:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8018a3c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8018a40:	fb00 2505 	mla	r5, r0, r5, r2
 8018a44:	6822      	ldr	r2, [r4, #0]
 8018a46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a4a:	4415      	add	r5, r2
 8018a4c:	f8dc 2000 	ldr.w	r2, [ip]
 8018a50:	9200      	str	r2, [sp, #0]
 8018a52:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018a56:	3204      	adds	r2, #4
 8018a58:	9201      	str	r2, [sp, #4]
 8018a5a:	2900      	cmp	r1, #0
 8018a5c:	dc03      	bgt.n	8018a66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018a5e:	9a02      	ldr	r2, [sp, #8]
 8018a60:	2a00      	cmp	r2, #0
 8018a62:	f340 8127 	ble.w	8018cb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018a66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a68:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018a6c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8018a70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a72:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018a76:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	dd0d      	ble.n	8018a9a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018a7e:	1422      	asrs	r2, r4, #16
 8018a80:	d405      	bmi.n	8018a8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018a82:	4542      	cmp	r2, r8
 8018a84:	da03      	bge.n	8018a8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018a86:	1402      	asrs	r2, r0, #16
 8018a88:	d401      	bmi.n	8018a8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018a8a:	42ba      	cmp	r2, r7
 8018a8c:	db06      	blt.n	8018a9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018a8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018a90:	4474      	add	r4, lr
 8018a92:	3b01      	subs	r3, #1
 8018a94:	3503      	adds	r5, #3
 8018a96:	4410      	add	r0, r2
 8018a98:	e7ef      	b.n	8018a7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018a9a:	d075      	beq.n	8018b88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8018a9c:	1e5a      	subs	r2, r3, #1
 8018a9e:	fb0e 4602 	mla	r6, lr, r2, r4
 8018aa2:	1436      	asrs	r6, r6, #16
 8018aa4:	d465      	bmi.n	8018b72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018aa6:	4546      	cmp	r6, r8
 8018aa8:	da63      	bge.n	8018b72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018aaa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018aac:	fb06 0202 	mla	r2, r6, r2, r0
 8018ab0:	1412      	asrs	r2, r2, #16
 8018ab2:	d45e      	bmi.n	8018b72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018ab4:	42ba      	cmp	r2, r7
 8018ab6:	da5c      	bge.n	8018b72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018ab8:	1cef      	adds	r7, r5, #3
 8018aba:	4699      	mov	r9, r3
 8018abc:	f1b9 0f00 	cmp.w	r9, #0
 8018ac0:	dd5d      	ble.n	8018b7e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8018ac2:	1402      	asrs	r2, r0, #16
 8018ac4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018ac8:	1426      	asrs	r6, r4, #16
 8018aca:	4692      	mov	sl, r2
 8018acc:	9a00      	ldr	r2, [sp, #0]
 8018ace:	fb08 220a 	mla	r2, r8, sl, r2
 8018ad2:	5d92      	ldrb	r2, [r2, r6]
 8018ad4:	9e01      	ldr	r6, [sp, #4]
 8018ad6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018ada:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018ade:	d041      	beq.n	8018b64 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ae0:	9a03      	ldr	r2, [sp, #12]
 8018ae2:	fa5f fb86 	uxtb.w	fp, r6
 8018ae6:	fb02 f808 	mul.w	r8, r2, r8
 8018aea:	f108 0201 	add.w	r2, r8, #1
 8018aee:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018af2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018af6:	1212      	asrs	r2, r2, #8
 8018af8:	fa1f fa82 	uxth.w	sl, r2
 8018afc:	43d2      	mvns	r2, r2
 8018afe:	fb1b fb0a 	smulbb	fp, fp, sl
 8018b02:	b2d2      	uxtb	r2, r2
 8018b04:	fb08 b802 	mla	r8, r8, r2, fp
 8018b08:	fa1f f888 	uxth.w	r8, r8
 8018b0c:	f108 0b01 	add.w	fp, r8, #1
 8018b10:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018b14:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018b18:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018b1c:	fb1b fb0a 	smulbb	fp, fp, sl
 8018b20:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018b24:	fb16 fa0a 	smulbb	sl, r6, sl
 8018b28:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018b2c:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018b30:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018b34:	fb06 aa02 	mla	sl, r6, r2, sl
 8018b38:	fb08 b802 	mla	r8, r8, r2, fp
 8018b3c:	fa1f fa8a 	uxth.w	sl, sl
 8018b40:	fa1f f888 	uxth.w	r8, r8
 8018b44:	f10a 0601 	add.w	r6, sl, #1
 8018b48:	f108 0b01 	add.w	fp, r8, #1
 8018b4c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018b50:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018b54:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018b58:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018b5c:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018b60:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018b66:	4474      	add	r4, lr
 8018b68:	3703      	adds	r7, #3
 8018b6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018b6e:	4410      	add	r0, r2
 8018b70:	e7a4      	b.n	8018abc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018b72:	f04f 0800 	mov.w	r8, #0
 8018b76:	eba3 0208 	sub.w	r2, r3, r8
 8018b7a:	2a00      	cmp	r2, #0
 8018b7c:	dc3b      	bgt.n	8018bf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018b7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b86:	441d      	add	r5, r3
 8018b88:	2900      	cmp	r1, #0
 8018b8a:	f340 8093 	ble.w	8018cb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018b8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b98:	3901      	subs	r1, #1
 8018b9a:	eeb0 6a62 	vmov.f32	s12, s5
 8018b9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ba2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018ba6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018baa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018bae:	eeb0 6a43 	vmov.f32	s12, s6
 8018bb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018bb6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018bba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018bbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018bc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018bc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018bca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018bce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018bd2:	ee12 2a90 	vmov	r2, s5
 8018bd6:	eef0 2a47 	vmov.f32	s5, s14
 8018bda:	fb92 fef3 	sdiv	lr, r2, r3
 8018bde:	ee13 2a10 	vmov	r2, s6
 8018be2:	eeb0 3a67 	vmov.f32	s6, s15
 8018be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8018bea:	9a02      	ldr	r2, [sp, #8]
 8018bec:	9312      	str	r3, [sp, #72]	; 0x48
 8018bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018bf0:	bf08      	it	eq
 8018bf2:	4613      	moveq	r3, r2
 8018bf4:	e731      	b.n	8018a5a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018bf6:	1427      	asrs	r7, r4, #16
 8018bf8:	d456      	bmi.n	8018ca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018bfa:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018bfe:	42be      	cmp	r6, r7
 8018c00:	dd52      	ble.n	8018ca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018c02:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018c06:	d44f      	bmi.n	8018ca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018c08:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018c0c:	454a      	cmp	r2, r9
 8018c0e:	dd4b      	ble.n	8018ca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018c10:	9a00      	ldr	r2, [sp, #0]
 8018c12:	b236      	sxth	r6, r6
 8018c14:	fb09 2606 	mla	r6, r9, r6, r2
 8018c18:	5df2      	ldrb	r2, [r6, r7]
 8018c1a:	9e01      	ldr	r6, [sp, #4]
 8018c1c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8018c20:	0e3a      	lsrs	r2, r7, #24
 8018c22:	d041      	beq.n	8018ca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018c24:	9e03      	ldr	r6, [sp, #12]
 8018c26:	fa5f fb87 	uxtb.w	fp, r7
 8018c2a:	4372      	muls	r2, r6
 8018c2c:	1c56      	adds	r6, r2, #1
 8018c2e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018c32:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018c36:	1212      	asrs	r2, r2, #8
 8018c38:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018c3c:	fa1f fa82 	uxth.w	sl, r2
 8018c40:	43d2      	mvns	r2, r2
 8018c42:	fb1b fb0a 	smulbb	fp, fp, sl
 8018c46:	b2d2      	uxtb	r2, r2
 8018c48:	fb09 b902 	mla	r9, r9, r2, fp
 8018c4c:	fa1f f989 	uxth.w	r9, r9
 8018c50:	f109 0b01 	add.w	fp, r9, #1
 8018c54:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c58:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018c5c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018c60:	fb1b fb0a 	smulbb	fp, fp, sl
 8018c64:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c68:	fb17 fa0a 	smulbb	sl, r7, sl
 8018c6c:	f805 9006 	strb.w	r9, [r5, r6]
 8018c70:	442e      	add	r6, r5
 8018c72:	78b7      	ldrb	r7, [r6, #2]
 8018c74:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018c78:	fb07 aa02 	mla	sl, r7, r2, sl
 8018c7c:	fb09 b902 	mla	r9, r9, r2, fp
 8018c80:	fa1f fa8a 	uxth.w	sl, sl
 8018c84:	fa1f f989 	uxth.w	r9, r9
 8018c88:	f10a 0701 	add.w	r7, sl, #1
 8018c8c:	f109 0b01 	add.w	fp, r9, #1
 8018c90:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018c94:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c98:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018c9c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ca0:	f886 a002 	strb.w	sl, [r6, #2]
 8018ca4:	f886 9001 	strb.w	r9, [r6, #1]
 8018ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018caa:	4474      	add	r4, lr
 8018cac:	f108 0801 	add.w	r8, r8, #1
 8018cb0:	4410      	add	r0, r2
 8018cb2:	e760      	b.n	8018b76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8018cb4:	b005      	add	sp, #20
 8018cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018cba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cbe:	b085      	sub	sp, #20
 8018cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018cc4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018cc6:	9203      	str	r2, [sp, #12]
 8018cc8:	6868      	ldr	r0, [r5, #4]
 8018cca:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8018cce:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8018cd2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018cd6:	fb00 2404 	mla	r4, r0, r4, r2
 8018cda:	682a      	ldr	r2, [r5, #0]
 8018cdc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018ce0:	4414      	add	r4, r2
 8018ce2:	f8dc 2000 	ldr.w	r2, [ip]
 8018ce6:	9201      	str	r2, [sp, #4]
 8018ce8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018cec:	3204      	adds	r2, #4
 8018cee:	9202      	str	r2, [sp, #8]
 8018cf0:	2900      	cmp	r1, #0
 8018cf2:	dc03      	bgt.n	8018cfc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018cf4:	9a03      	ldr	r2, [sp, #12]
 8018cf6:	2a00      	cmp	r2, #0
 8018cf8:	f340 8137 	ble.w	8018f6a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018cfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018cfe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018d02:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018d06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d08:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018d0c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	dd0d      	ble.n	8018d30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018d14:	1405      	asrs	r5, r0, #16
 8018d16:	d405      	bmi.n	8018d24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018d18:	4545      	cmp	r5, r8
 8018d1a:	da03      	bge.n	8018d24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018d1c:	1415      	asrs	r5, r2, #16
 8018d1e:	d401      	bmi.n	8018d24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018d20:	42bd      	cmp	r5, r7
 8018d22:	db06      	blt.n	8018d32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018d24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018d26:	4470      	add	r0, lr
 8018d28:	3b01      	subs	r3, #1
 8018d2a:	3403      	adds	r4, #3
 8018d2c:	442a      	add	r2, r5
 8018d2e:	e7ef      	b.n	8018d10 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018d30:	d070      	beq.n	8018e14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018d32:	1e5d      	subs	r5, r3, #1
 8018d34:	fb0e 0605 	mla	r6, lr, r5, r0
 8018d38:	1436      	asrs	r6, r6, #16
 8018d3a:	d462      	bmi.n	8018e02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018d3c:	4546      	cmp	r6, r8
 8018d3e:	da60      	bge.n	8018e02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018d40:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018d42:	fb06 2505 	mla	r5, r6, r5, r2
 8018d46:	142d      	asrs	r5, r5, #16
 8018d48:	d45b      	bmi.n	8018e02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018d4a:	42bd      	cmp	r5, r7
 8018d4c:	da59      	bge.n	8018e02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018d4e:	1ce5      	adds	r5, r4, #3
 8018d50:	469a      	mov	sl, r3
 8018d52:	f1ba 0f00 	cmp.w	sl, #0
 8018d56:	dd58      	ble.n	8018e0a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8018d58:	1416      	asrs	r6, r2, #16
 8018d5a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018d5e:	1407      	asrs	r7, r0, #16
 8018d60:	46b1      	mov	r9, r6
 8018d62:	9e01      	ldr	r6, [sp, #4]
 8018d64:	fb08 6609 	mla	r6, r8, r9, r6
 8018d68:	5df6      	ldrb	r6, [r6, r7]
 8018d6a:	9f02      	ldr	r7, [sp, #8]
 8018d6c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8018d70:	0e37      	lsrs	r7, r6, #24
 8018d72:	2fff      	cmp	r7, #255	; 0xff
 8018d74:	f000 80f0 	beq.w	8018f58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018d78:	fa5f f887 	uxtb.w	r8, r7
 8018d7c:	b3d7      	cbz	r7, 8018df4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018d7e:	fa1f f788 	uxth.w	r7, r8
 8018d82:	ea6f 0808 	mvn.w	r8, r8
 8018d86:	fa5f fb86 	uxtb.w	fp, r6
 8018d8a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8018d8e:	fa5f f888 	uxtb.w	r8, r8
 8018d92:	fb1b fb07 	smulbb	fp, fp, r7
 8018d96:	fb09 b908 	mla	r9, r9, r8, fp
 8018d9a:	fa1f f989 	uxth.w	r9, r9
 8018d9e:	f109 0b01 	add.w	fp, r9, #1
 8018da2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018da6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8018daa:	fb1b fb08 	smulbb	fp, fp, r8
 8018dae:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018db2:	f805 9c03 	strb.w	r9, [r5, #-3]
 8018db6:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8018dba:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018dbe:	fb09 b907 	mla	r9, r9, r7, fp
 8018dc2:	fa1f f989 	uxth.w	r9, r9
 8018dc6:	f109 0b01 	add.w	fp, r9, #1
 8018dca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018dce:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018dd2:	f805 9c02 	strb.w	r9, [r5, #-2]
 8018dd6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8018dda:	fb19 f808 	smulbb	r8, r9, r8
 8018dde:	fb06 8607 	mla	r6, r6, r7, r8
 8018de2:	b2b6      	uxth	r6, r6
 8018de4:	f106 0801 	add.w	r8, r6, #1
 8018de8:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8018dec:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018df0:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018df4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018df6:	4470      	add	r0, lr
 8018df8:	3503      	adds	r5, #3
 8018dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018dfe:	4432      	add	r2, r6
 8018e00:	e7a7      	b.n	8018d52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018e02:	2600      	movs	r6, #0
 8018e04:	1b9d      	subs	r5, r3, r6
 8018e06:	2d00      	cmp	r5, #0
 8018e08:	dc3b      	bgt.n	8018e82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e12:	441c      	add	r4, r3
 8018e14:	2900      	cmp	r1, #0
 8018e16:	f340 80a8 	ble.w	8018f6a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018e1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018e24:	3901      	subs	r1, #1
 8018e26:	eeb0 6a62 	vmov.f32	s12, s5
 8018e2a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018e2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018e32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e36:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018e3a:	eeb0 6a43 	vmov.f32	s12, s6
 8018e3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e42:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018e46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018e4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018e4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018e52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018e56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018e5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018e5e:	ee12 2a90 	vmov	r2, s5
 8018e62:	eef0 2a47 	vmov.f32	s5, s14
 8018e66:	fb92 fef3 	sdiv	lr, r2, r3
 8018e6a:	ee13 2a10 	vmov	r2, s6
 8018e6e:	eeb0 3a67 	vmov.f32	s6, s15
 8018e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e76:	9a03      	ldr	r2, [sp, #12]
 8018e78:	9312      	str	r3, [sp, #72]	; 0x48
 8018e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e7c:	bf08      	it	eq
 8018e7e:	4613      	moveq	r3, r2
 8018e80:	e736      	b.n	8018cf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018e82:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018e86:	d457      	bmi.n	8018f38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018e88:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8018e8c:	4547      	cmp	r7, r8
 8018e8e:	dd53      	ble.n	8018f38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018e90:	ea5f 4922 	movs.w	r9, r2, asr #16
 8018e94:	d450      	bmi.n	8018f38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018e96:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8018e9a:	454d      	cmp	r5, r9
 8018e9c:	dd4c      	ble.n	8018f38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018e9e:	9d01      	ldr	r5, [sp, #4]
 8018ea0:	b23f      	sxth	r7, r7
 8018ea2:	fb09 5707 	mla	r7, r9, r7, r5
 8018ea6:	f817 5008 	ldrb.w	r5, [r7, r8]
 8018eaa:	9f02      	ldr	r7, [sp, #8]
 8018eac:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8018eb0:	0e2f      	lsrs	r7, r5, #24
 8018eb2:	2fff      	cmp	r7, #255	; 0xff
 8018eb4:	d045      	beq.n	8018f42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018eb6:	fa5f f987 	uxtb.w	r9, r7
 8018eba:	b3ef      	cbz	r7, 8018f38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018ebc:	fa1f f889 	uxth.w	r8, r9
 8018ec0:	ea6f 0909 	mvn.w	r9, r9
 8018ec4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018ec8:	fa5f fb85 	uxtb.w	fp, r5
 8018ecc:	f814 a007 	ldrb.w	sl, [r4, r7]
 8018ed0:	fa5f f989 	uxtb.w	r9, r9
 8018ed4:	fb1b fb08 	smulbb	fp, fp, r8
 8018ed8:	fb0a ba09 	mla	sl, sl, r9, fp
 8018edc:	fa1f fa8a 	uxth.w	sl, sl
 8018ee0:	f10a 0b01 	add.w	fp, sl, #1
 8018ee4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8018ee8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018eec:	f804 a007 	strb.w	sl, [r4, r7]
 8018ef0:	4427      	add	r7, r4
 8018ef2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018ef6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8018efa:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018efe:	fb1b fb09 	smulbb	fp, fp, r9
 8018f02:	fb0a ba08 	mla	sl, sl, r8, fp
 8018f06:	fa1f fa8a 	uxth.w	sl, sl
 8018f0a:	f10a 0b01 	add.w	fp, sl, #1
 8018f0e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8018f12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018f16:	f887 a001 	strb.w	sl, [r7, #1]
 8018f1a:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018f1e:	fb1a f909 	smulbb	r9, sl, r9
 8018f22:	fb05 9508 	mla	r5, r5, r8, r9
 8018f26:	b2ad      	uxth	r5, r5
 8018f28:	f105 0901 	add.w	r9, r5, #1
 8018f2c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8018f30:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f34:	f887 9002 	strb.w	r9, [r7, #2]
 8018f38:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018f3a:	4470      	add	r0, lr
 8018f3c:	3601      	adds	r6, #1
 8018f3e:	442a      	add	r2, r5
 8018f40:	e760      	b.n	8018e04 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018f42:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018f46:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8018f4a:	55e5      	strb	r5, [r4, r7]
 8018f4c:	4427      	add	r7, r4
 8018f4e:	0c2d      	lsrs	r5, r5, #16
 8018f50:	f887 8001 	strb.w	r8, [r7, #1]
 8018f54:	70bd      	strb	r5, [r7, #2]
 8018f56:	e7ef      	b.n	8018f38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018f58:	0a37      	lsrs	r7, r6, #8
 8018f5a:	f805 6c03 	strb.w	r6, [r5, #-3]
 8018f5e:	0c36      	lsrs	r6, r6, #16
 8018f60:	f805 7c02 	strb.w	r7, [r5, #-2]
 8018f64:	f805 6c01 	strb.w	r6, [r5, #-1]
 8018f68:	e744      	b.n	8018df4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018f6a:	b005      	add	sp, #20
 8018f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f70 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f74:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018f76:	9201      	str	r2, [sp, #4]
 8018f78:	6870      	ldr	r0, [r6, #4]
 8018f7a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8018f7e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8018f82:	fa1f fe85 	uxth.w	lr, r5
 8018f86:	43ed      	mvns	r5, r5
 8018f88:	f8dc 8000 	ldr.w	r8, [ip]
 8018f8c:	b2ed      	uxtb	r5, r5
 8018f8e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8018f92:	fb00 2404 	mla	r4, r0, r4, r2
 8018f96:	6832      	ldr	r2, [r6, #0]
 8018f98:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018f9c:	4414      	add	r4, r2
 8018f9e:	2900      	cmp	r1, #0
 8018fa0:	dc03      	bgt.n	8018faa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8018fa2:	9a01      	ldr	r2, [sp, #4]
 8018fa4:	2a00      	cmp	r2, #0
 8018fa6:	f340 810d 	ble.w	80191c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fac:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018fb0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018fb6:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018fba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	dd0e      	ble.n	8018fe0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018fc2:	1406      	asrs	r6, r0, #16
 8018fc4:	d405      	bmi.n	8018fd2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018fc6:	4556      	cmp	r6, sl
 8018fc8:	da03      	bge.n	8018fd2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018fca:	1416      	asrs	r6, r2, #16
 8018fcc:	d401      	bmi.n	8018fd2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018fce:	454e      	cmp	r6, r9
 8018fd0:	db07      	blt.n	8018fe2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018fd2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8018fd4:	3b01      	subs	r3, #1
 8018fd6:	3403      	adds	r4, #3
 8018fd8:	4430      	add	r0, r6
 8018fda:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8018fdc:	4432      	add	r2, r6
 8018fde:	e7ee      	b.n	8018fbe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8018fe0:	d060      	beq.n	80190a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8018fe2:	1e5e      	subs	r6, r3, #1
 8018fe4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018fe6:	fb07 0706 	mla	r7, r7, r6, r0
 8018fea:	143f      	asrs	r7, r7, #16
 8018fec:	d451      	bmi.n	8019092 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018fee:	4557      	cmp	r7, sl
 8018ff0:	da4f      	bge.n	8019092 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018ff2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018ff4:	fb07 2606 	mla	r6, r7, r6, r2
 8018ff8:	1436      	asrs	r6, r6, #16
 8018ffa:	d44a      	bmi.n	8019092 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018ffc:	454e      	cmp	r6, r9
 8018ffe:	da48      	bge.n	8019092 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019000:	1ce6      	adds	r6, r4, #3
 8019002:	4699      	mov	r9, r3
 8019004:	f1b9 0f00 	cmp.w	r9, #0
 8019008:	f106 0603 	add.w	r6, r6, #3
 801900c:	dd45      	ble.n	801909a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801900e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8019012:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019016:	1417      	asrs	r7, r2, #16
 8019018:	f109 39ff 	add.w	r9, r9, #4294967295
 801901c:	fb0b a707 	mla	r7, fp, r7, sl
 8019020:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019024:	fb1b fb05 	smulbb	fp, fp, r5
 8019028:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801902c:	eb08 0a07 	add.w	sl, r8, r7
 8019030:	f818 7007 	ldrb.w	r7, [r8, r7]
 8019034:	fb07 b70e 	mla	r7, r7, lr, fp
 8019038:	b2bf      	uxth	r7, r7
 801903a:	f107 0b01 	add.w	fp, r7, #1
 801903e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019042:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019046:	fb1b fb05 	smulbb	fp, fp, r5
 801904a:	123f      	asrs	r7, r7, #8
 801904c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019050:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019054:	fb07 b70e 	mla	r7, r7, lr, fp
 8019058:	b2bf      	uxth	r7, r7
 801905a:	f107 0b01 	add.w	fp, r7, #1
 801905e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019062:	123f      	asrs	r7, r7, #8
 8019064:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019068:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801906c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019070:	fb1a fa05 	smulbb	sl, sl, r5
 8019074:	fb07 a70e 	mla	r7, r7, lr, sl
 8019078:	b2bf      	uxth	r7, r7
 801907a:	f107 0a01 	add.w	sl, r7, #1
 801907e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019082:	123f      	asrs	r7, r7, #8
 8019084:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019088:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801908a:	4438      	add	r0, r7
 801908c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801908e:	443a      	add	r2, r7
 8019090:	e7b8      	b.n	8019004 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019092:	2700      	movs	r7, #0
 8019094:	1bde      	subs	r6, r3, r7
 8019096:	2e00      	cmp	r6, #0
 8019098:	dc3f      	bgt.n	801911a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801909a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801909e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80190a2:	441c      	add	r4, r3
 80190a4:	2900      	cmp	r1, #0
 80190a6:	f340 808d 	ble.w	80191c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80190aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80190ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80190b4:	3901      	subs	r1, #1
 80190b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80190ba:	eef0 6a62 	vmov.f32	s13, s5
 80190be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80190c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80190c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80190ca:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80190ce:	eef0 6a43 	vmov.f32	s13, s6
 80190d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80190d6:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80190da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80190de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80190e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80190e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80190ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80190ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80190f2:	ee12 2a90 	vmov	r2, s5
 80190f6:	eef0 2a47 	vmov.f32	s5, s14
 80190fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80190fe:	ee13 2a10 	vmov	r2, s6
 8019102:	930f      	str	r3, [sp, #60]	; 0x3c
 8019104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019106:	eeb0 3a67 	vmov.f32	s6, s15
 801910a:	fb92 f3f3 	sdiv	r3, r2, r3
 801910e:	9a01      	ldr	r2, [sp, #4]
 8019110:	9310      	str	r3, [sp, #64]	; 0x40
 8019112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019114:	bf08      	it	eq
 8019116:	4613      	moveq	r3, r2
 8019118:	e741      	b.n	8018f9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801911a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801911e:	d44b      	bmi.n	80191b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019120:	f8dc b008 	ldr.w	fp, [ip, #8]
 8019124:	45cb      	cmp	fp, r9
 8019126:	dd47      	ble.n	80191b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019128:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801912c:	d444      	bmi.n	80191b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801912e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8019132:	4556      	cmp	r6, sl
 8019134:	dd40      	ble.n	80191b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019136:	fa0f f68b 	sxth.w	r6, fp
 801913a:	fb0a 9906 	mla	r9, sl, r6, r9
 801913e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019142:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019146:	f814 b006 	ldrb.w	fp, [r4, r6]
 801914a:	fb1b fb05 	smulbb	fp, fp, r5
 801914e:	eb08 0a09 	add.w	sl, r8, r9
 8019152:	f818 9009 	ldrb.w	r9, [r8, r9]
 8019156:	fb09 b90e 	mla	r9, r9, lr, fp
 801915a:	fa1f f989 	uxth.w	r9, r9
 801915e:	f109 0b01 	add.w	fp, r9, #1
 8019162:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019166:	ea4f 2929 	mov.w	r9, r9, asr #8
 801916a:	f804 9006 	strb.w	r9, [r4, r6]
 801916e:	4426      	add	r6, r4
 8019170:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019174:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019178:	fb1b fb05 	smulbb	fp, fp, r5
 801917c:	fb09 b90e 	mla	r9, r9, lr, fp
 8019180:	fa1f f989 	uxth.w	r9, r9
 8019184:	f109 0b01 	add.w	fp, r9, #1
 8019188:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801918c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019190:	f886 9001 	strb.w	r9, [r6, #1]
 8019194:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019198:	f896 a002 	ldrb.w	sl, [r6, #2]
 801919c:	fb1a fa05 	smulbb	sl, sl, r5
 80191a0:	fb09 a90e 	mla	r9, r9, lr, sl
 80191a4:	fa1f f989 	uxth.w	r9, r9
 80191a8:	f109 0a01 	add.w	sl, r9, #1
 80191ac:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80191b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80191b4:	f886 9002 	strb.w	r9, [r6, #2]
 80191b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80191ba:	3701      	adds	r7, #1
 80191bc:	4430      	add	r0, r6
 80191be:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80191c0:	4432      	add	r2, r6
 80191c2:	e767      	b.n	8019094 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80191c4:	b003      	add	sp, #12
 80191c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80191ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80191d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80191d4:	9201      	str	r2, [sp, #4]
 80191d6:	6868      	ldr	r0, [r5, #4]
 80191d8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80191da:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80191de:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80191e2:	fb00 2404 	mla	r4, r0, r4, r2
 80191e6:	682a      	ldr	r2, [r5, #0]
 80191e8:	f8d7 8000 	ldr.w	r8, [r7]
 80191ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80191f0:	4414      	add	r4, r2
 80191f2:	2900      	cmp	r1, #0
 80191f4:	dc03      	bgt.n	80191fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80191f6:	9a01      	ldr	r2, [sp, #4]
 80191f8:	2a00      	cmp	r2, #0
 80191fa:	f340 80af 	ble.w	801935c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80191fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019200:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8019204:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801920a:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801920e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019212:	2b00      	cmp	r3, #0
 8019214:	dd0c      	ble.n	8019230 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019216:	1405      	asrs	r5, r0, #16
 8019218:	d405      	bmi.n	8019226 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801921a:	4555      	cmp	r5, sl
 801921c:	da03      	bge.n	8019226 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801921e:	1415      	asrs	r5, r2, #16
 8019220:	d401      	bmi.n	8019226 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019222:	454d      	cmp	r5, r9
 8019224:	db05      	blt.n	8019232 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019226:	4470      	add	r0, lr
 8019228:	4462      	add	r2, ip
 801922a:	3b01      	subs	r3, #1
 801922c:	3403      	adds	r4, #3
 801922e:	e7f0      	b.n	8019212 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019230:	d038      	beq.n	80192a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019232:	1e5d      	subs	r5, r3, #1
 8019234:	fb0e 0605 	mla	r6, lr, r5, r0
 8019238:	1436      	asrs	r6, r6, #16
 801923a:	d42a      	bmi.n	8019292 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801923c:	4556      	cmp	r6, sl
 801923e:	da28      	bge.n	8019292 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019240:	fb0c 2505 	mla	r5, ip, r5, r2
 8019244:	142d      	asrs	r5, r5, #16
 8019246:	d424      	bmi.n	8019292 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019248:	454d      	cmp	r5, r9
 801924a:	da22      	bge.n	8019292 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801924c:	1ce6      	adds	r6, r4, #3
 801924e:	4699      	mov	r9, r3
 8019250:	f1b9 0f00 	cmp.w	r9, #0
 8019254:	f106 0603 	add.w	r6, r6, #3
 8019258:	dd1f      	ble.n	801929a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801925a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801925e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019262:	1415      	asrs	r5, r2, #16
 8019264:	4470      	add	r0, lr
 8019266:	4462      	add	r2, ip
 8019268:	f109 39ff 	add.w	r9, r9, #4294967295
 801926c:	fb0b a505 	mla	r5, fp, r5, sl
 8019270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019274:	eb08 0a05 	add.w	sl, r8, r5
 8019278:	f818 5005 	ldrb.w	r5, [r8, r5]
 801927c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8019280:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8019284:	f806 5c05 	strb.w	r5, [r6, #-5]
 8019288:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801928c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8019290:	e7de      	b.n	8019250 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019292:	2600      	movs	r6, #0
 8019294:	1b9d      	subs	r5, r3, r6
 8019296:	2d00      	cmp	r5, #0
 8019298:	dc38      	bgt.n	801930c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801929a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801929e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192a2:	441c      	add	r4, r3
 80192a4:	2900      	cmp	r1, #0
 80192a6:	dd59      	ble.n	801935c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80192a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80192ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80192b2:	3901      	subs	r1, #1
 80192b4:	eeb0 6a62 	vmov.f32	s12, s5
 80192b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80192bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80192c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80192c4:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80192c8:	eeb0 6a43 	vmov.f32	s12, s6
 80192cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80192d0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80192d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80192d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80192dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80192e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80192e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80192e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80192ec:	ee12 2a90 	vmov	r2, s5
 80192f0:	eef0 2a47 	vmov.f32	s5, s14
 80192f4:	fb92 fef3 	sdiv	lr, r2, r3
 80192f8:	ee13 2a10 	vmov	r2, s6
 80192fc:	eeb0 3a67 	vmov.f32	s6, s15
 8019300:	fb92 fcf3 	sdiv	ip, r2, r3
 8019304:	9a01      	ldr	r2, [sp, #4]
 8019306:	bf08      	it	eq
 8019308:	4613      	moveq	r3, r2
 801930a:	e772      	b.n	80191f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801930c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019310:	d420      	bmi.n	8019354 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019312:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8019316:	45cb      	cmp	fp, r9
 8019318:	dd1c      	ble.n	8019354 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801931a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801931e:	d419      	bmi.n	8019354 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019320:	68fd      	ldr	r5, [r7, #12]
 8019322:	4555      	cmp	r5, sl
 8019324:	dd16      	ble.n	8019354 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019326:	fa0f f58b 	sxth.w	r5, fp
 801932a:	fb0a 9505 	mla	r5, sl, r5, r9
 801932e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019332:	f818 9005 	ldrb.w	r9, [r8, r5]
 8019336:	eb08 0b05 	add.w	fp, r8, r5
 801933a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801933e:	f804 9005 	strb.w	r9, [r4, r5]
 8019342:	4425      	add	r5, r4
 8019344:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8019348:	f885 9001 	strb.w	r9, [r5, #1]
 801934c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019350:	f885 9002 	strb.w	r9, [r5, #2]
 8019354:	4470      	add	r0, lr
 8019356:	4462      	add	r2, ip
 8019358:	3601      	adds	r6, #1
 801935a:	e79b      	b.n	8019294 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801935c:	b003      	add	sp, #12
 801935e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019362 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019366:	b085      	sub	sp, #20
 8019368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801936c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801936e:	9202      	str	r2, [sp, #8]
 8019370:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8019374:	6860      	ldr	r0, [r4, #4]
 8019376:	9203      	str	r2, [sp, #12]
 8019378:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801937c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8019380:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8019384:	fb00 2505 	mla	r5, r0, r5, r2
 8019388:	6822      	ldr	r2, [r4, #0]
 801938a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801938e:	4415      	add	r5, r2
 8019390:	f8dc 2000 	ldr.w	r2, [ip]
 8019394:	9201      	str	r2, [sp, #4]
 8019396:	2900      	cmp	r1, #0
 8019398:	dc03      	bgt.n	80193a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801939a:	9a02      	ldr	r2, [sp, #8]
 801939c:	2a00      	cmp	r2, #0
 801939e:	f340 8122 	ble.w	80195e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80193a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80193a4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80193a8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80193ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80193ae:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80193b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	dd0d      	ble.n	80193d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80193ba:	1422      	asrs	r2, r4, #16
 80193bc:	d405      	bmi.n	80193ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80193be:	4542      	cmp	r2, r8
 80193c0:	da03      	bge.n	80193ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80193c2:	1402      	asrs	r2, r0, #16
 80193c4:	d401      	bmi.n	80193ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80193c6:	42ba      	cmp	r2, r7
 80193c8:	db06      	blt.n	80193d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80193ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80193cc:	4474      	add	r4, lr
 80193ce:	3b01      	subs	r3, #1
 80193d0:	3503      	adds	r5, #3
 80193d2:	4410      	add	r0, r2
 80193d4:	e7ef      	b.n	80193b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80193d6:	d072      	beq.n	80194be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80193d8:	1e5a      	subs	r2, r3, #1
 80193da:	fb0e 4602 	mla	r6, lr, r2, r4
 80193de:	1436      	asrs	r6, r6, #16
 80193e0:	d462      	bmi.n	80194a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80193e2:	4546      	cmp	r6, r8
 80193e4:	da60      	bge.n	80194a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80193e6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80193e8:	fb06 0202 	mla	r2, r6, r2, r0
 80193ec:	1412      	asrs	r2, r2, #16
 80193ee:	d45b      	bmi.n	80194a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80193f0:	42ba      	cmp	r2, r7
 80193f2:	da59      	bge.n	80194a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80193f4:	1cef      	adds	r7, r5, #3
 80193f6:	4699      	mov	r9, r3
 80193f8:	f1b9 0f00 	cmp.w	r9, #0
 80193fc:	dd5a      	ble.n	80194b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80193fe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019402:	1426      	asrs	r6, r4, #16
 8019404:	1402      	asrs	r2, r0, #16
 8019406:	fb08 6202 	mla	r2, r8, r2, r6
 801940a:	9e01      	ldr	r6, [sp, #4]
 801940c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8019410:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8019414:	d041      	beq.n	801949a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019416:	9a03      	ldr	r2, [sp, #12]
 8019418:	fa5f fb86 	uxtb.w	fp, r6
 801941c:	fb02 f808 	mul.w	r8, r2, r8
 8019420:	f108 0201 	add.w	r2, r8, #1
 8019424:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8019428:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801942c:	1212      	asrs	r2, r2, #8
 801942e:	fa1f fa82 	uxth.w	sl, r2
 8019432:	43d2      	mvns	r2, r2
 8019434:	fb1b fb0a 	smulbb	fp, fp, sl
 8019438:	b2d2      	uxtb	r2, r2
 801943a:	fb08 b802 	mla	r8, r8, r2, fp
 801943e:	fa1f f888 	uxth.w	r8, r8
 8019442:	f108 0b01 	add.w	fp, r8, #1
 8019446:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801944a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801944e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019452:	fb1b fb0a 	smulbb	fp, fp, sl
 8019456:	ea4f 2828 	mov.w	r8, r8, asr #8
 801945a:	fb16 fa0a 	smulbb	sl, r6, sl
 801945e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019462:	f807 8c03 	strb.w	r8, [r7, #-3]
 8019466:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801946a:	fb06 aa02 	mla	sl, r6, r2, sl
 801946e:	fb08 b802 	mla	r8, r8, r2, fp
 8019472:	fa1f fa8a 	uxth.w	sl, sl
 8019476:	fa1f f888 	uxth.w	r8, r8
 801947a:	f10a 0601 	add.w	r6, sl, #1
 801947e:	f108 0b01 	add.w	fp, r8, #1
 8019482:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019486:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801948a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801948e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019492:	f807 ac01 	strb.w	sl, [r7, #-1]
 8019496:	f807 8c02 	strb.w	r8, [r7, #-2]
 801949a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801949c:	4474      	add	r4, lr
 801949e:	3703      	adds	r7, #3
 80194a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80194a4:	4410      	add	r0, r2
 80194a6:	e7a7      	b.n	80193f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80194a8:	f04f 0800 	mov.w	r8, #0
 80194ac:	eba3 0208 	sub.w	r2, r3, r8
 80194b0:	2a00      	cmp	r2, #0
 80194b2:	dc3b      	bgt.n	801952c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80194b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80194b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194bc:	441d      	add	r5, r3
 80194be:	2900      	cmp	r1, #0
 80194c0:	f340 8091 	ble.w	80195e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80194c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80194c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80194ce:	3901      	subs	r1, #1
 80194d0:	eeb0 6a62 	vmov.f32	s12, s5
 80194d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80194d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80194dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80194e4:	eeb0 6a43 	vmov.f32	s12, s6
 80194e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194ec:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80194f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80194f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80194f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80194fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019500:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019504:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019508:	ee12 2a90 	vmov	r2, s5
 801950c:	eef0 2a47 	vmov.f32	s5, s14
 8019510:	fb92 fef3 	sdiv	lr, r2, r3
 8019514:	ee13 2a10 	vmov	r2, s6
 8019518:	eeb0 3a67 	vmov.f32	s6, s15
 801951c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019520:	9a02      	ldr	r2, [sp, #8]
 8019522:	9312      	str	r3, [sp, #72]	; 0x48
 8019524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019526:	bf08      	it	eq
 8019528:	4613      	moveq	r3, r2
 801952a:	e734      	b.n	8019396 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801952c:	1427      	asrs	r7, r4, #16
 801952e:	d454      	bmi.n	80195da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019530:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019534:	42be      	cmp	r6, r7
 8019536:	dd50      	ble.n	80195da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019538:	ea5f 4920 	movs.w	r9, r0, asr #16
 801953c:	d44d      	bmi.n	80195da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801953e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019542:	454a      	cmp	r2, r9
 8019544:	dd49      	ble.n	80195da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019546:	b236      	sxth	r6, r6
 8019548:	9a01      	ldr	r2, [sp, #4]
 801954a:	fb09 7606 	mla	r6, r9, r6, r7
 801954e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8019552:	0e3a      	lsrs	r2, r7, #24
 8019554:	d041      	beq.n	80195da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019556:	9e03      	ldr	r6, [sp, #12]
 8019558:	fa5f fb87 	uxtb.w	fp, r7
 801955c:	4372      	muls	r2, r6
 801955e:	1c56      	adds	r6, r2, #1
 8019560:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019564:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8019568:	1212      	asrs	r2, r2, #8
 801956a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801956e:	fa1f fa82 	uxth.w	sl, r2
 8019572:	43d2      	mvns	r2, r2
 8019574:	fb1b fb0a 	smulbb	fp, fp, sl
 8019578:	b2d2      	uxtb	r2, r2
 801957a:	fb09 b902 	mla	r9, r9, r2, fp
 801957e:	fa1f f989 	uxth.w	r9, r9
 8019582:	f109 0b01 	add.w	fp, r9, #1
 8019586:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801958a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801958e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019592:	fb1b fb0a 	smulbb	fp, fp, sl
 8019596:	ea4f 2929 	mov.w	r9, r9, asr #8
 801959a:	fb17 fa0a 	smulbb	sl, r7, sl
 801959e:	f805 9006 	strb.w	r9, [r5, r6]
 80195a2:	442e      	add	r6, r5
 80195a4:	78b7      	ldrb	r7, [r6, #2]
 80195a6:	f896 9001 	ldrb.w	r9, [r6, #1]
 80195aa:	fb07 aa02 	mla	sl, r7, r2, sl
 80195ae:	fb09 b902 	mla	r9, r9, r2, fp
 80195b2:	fa1f fa8a 	uxth.w	sl, sl
 80195b6:	fa1f f989 	uxth.w	r9, r9
 80195ba:	f10a 0701 	add.w	r7, sl, #1
 80195be:	f109 0b01 	add.w	fp, r9, #1
 80195c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80195c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80195ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80195ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 80195d2:	f886 a002 	strb.w	sl, [r6, #2]
 80195d6:	f886 9001 	strb.w	r9, [r6, #1]
 80195da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80195dc:	4474      	add	r4, lr
 80195de:	f108 0801 	add.w	r8, r8, #1
 80195e2:	4410      	add	r0, r2
 80195e4:	e762      	b.n	80194ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80195e6:	b005      	add	sp, #20
 80195e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080195ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80195ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80195f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80195f6:	9201      	str	r2, [sp, #4]
 80195f8:	6860      	ldr	r0, [r4, #4]
 80195fa:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80195fe:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8019602:	fb00 2505 	mla	r5, r0, r5, r2
 8019606:	6822      	ldr	r2, [r4, #0]
 8019608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801960c:	4415      	add	r5, r2
 801960e:	f8dc 2000 	ldr.w	r2, [ip]
 8019612:	9200      	str	r2, [sp, #0]
 8019614:	2900      	cmp	r1, #0
 8019616:	dc03      	bgt.n	8019620 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019618:	9a01      	ldr	r2, [sp, #4]
 801961a:	2a00      	cmp	r2, #0
 801961c:	f340 812b 	ble.w	8019876 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019622:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019626:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801962a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801962c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019630:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019634:	2b00      	cmp	r3, #0
 8019636:	dd0e      	ble.n	8019656 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019638:	1422      	asrs	r2, r4, #16
 801963a:	d405      	bmi.n	8019648 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801963c:	4572      	cmp	r2, lr
 801963e:	da03      	bge.n	8019648 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019640:	1402      	asrs	r2, r0, #16
 8019642:	d401      	bmi.n	8019648 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019644:	42ba      	cmp	r2, r7
 8019646:	db07      	blt.n	8019658 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801964a:	3b01      	subs	r3, #1
 801964c:	3503      	adds	r5, #3
 801964e:	4414      	add	r4, r2
 8019650:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019652:	4410      	add	r0, r2
 8019654:	e7ee      	b.n	8019634 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019656:	d06f      	beq.n	8019738 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019658:	1e5a      	subs	r2, r3, #1
 801965a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801965c:	fb06 4602 	mla	r6, r6, r2, r4
 8019660:	1436      	asrs	r6, r6, #16
 8019662:	d45e      	bmi.n	8019722 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019664:	4576      	cmp	r6, lr
 8019666:	da5c      	bge.n	8019722 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019668:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801966a:	fb06 0202 	mla	r2, r6, r2, r0
 801966e:	1412      	asrs	r2, r2, #16
 8019670:	d457      	bmi.n	8019722 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019672:	42ba      	cmp	r2, r7
 8019674:	da55      	bge.n	8019722 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019676:	1cee      	adds	r6, r5, #3
 8019678:	469a      	mov	sl, r3
 801967a:	f1ba 0f00 	cmp.w	sl, #0
 801967e:	dd56      	ble.n	801972e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019680:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019684:	1427      	asrs	r7, r4, #16
 8019686:	1402      	asrs	r2, r0, #16
 8019688:	fb0e 7202 	mla	r2, lr, r2, r7
 801968c:	9f00      	ldr	r7, [sp, #0]
 801968e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8019692:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8019696:	d03c      	beq.n	8019712 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019698:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801969c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80196a0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80196a4:	fa5f f28e 	uxtb.w	r2, lr
 80196a8:	b2ff      	uxtb	r7, r7
 80196aa:	f000 80dd 	beq.w	8019868 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80196ae:	fa1f f882 	uxth.w	r8, r2
 80196b2:	43d2      	mvns	r2, r2
 80196b4:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80196b8:	fb17 f708 	smulbb	r7, r7, r8
 80196bc:	b2d2      	uxtb	r2, r2
 80196be:	fb19 f908 	smulbb	r9, r9, r8
 80196c2:	fb0e 7702 	mla	r7, lr, r2, r7
 80196c6:	fb1b f808 	smulbb	r8, fp, r8
 80196ca:	b2bf      	uxth	r7, r7
 80196cc:	f107 0e01 	add.w	lr, r7, #1
 80196d0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80196d4:	123f      	asrs	r7, r7, #8
 80196d6:	f806 7c03 	strb.w	r7, [r6, #-3]
 80196da:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80196de:	fb07 9902 	mla	r9, r7, r2, r9
 80196e2:	fa1f f989 	uxth.w	r9, r9
 80196e6:	f109 0701 	add.w	r7, r9, #1
 80196ea:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80196ee:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80196f2:	fb07 8802 	mla	r8, r7, r2, r8
 80196f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80196fa:	fa1f f888 	uxth.w	r8, r8
 80196fe:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019702:	f108 0201 	add.w	r2, r8, #1
 8019706:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801970a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801970e:	f806 8c01 	strb.w	r8, [r6, #-1]
 8019712:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019714:	3603      	adds	r6, #3
 8019716:	f10a 3aff 	add.w	sl, sl, #4294967295
 801971a:	4414      	add	r4, r2
 801971c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801971e:	4410      	add	r0, r2
 8019720:	e7ab      	b.n	801967a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019722:	f04f 0e00 	mov.w	lr, #0
 8019726:	eba3 020e 	sub.w	r2, r3, lr
 801972a:	2a00      	cmp	r2, #0
 801972c:	dc3d      	bgt.n	80197aa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801972e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019736:	441d      	add	r5, r3
 8019738:	2900      	cmp	r1, #0
 801973a:	f340 809c 	ble.w	8019876 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801973e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019744:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019748:	3901      	subs	r1, #1
 801974a:	eeb0 6a62 	vmov.f32	s12, s5
 801974e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019752:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019756:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801975a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801975e:	eeb0 6a43 	vmov.f32	s12, s6
 8019762:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019766:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801976a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801976e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019772:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019776:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801977a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801977e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019782:	ee12 2a90 	vmov	r2, s5
 8019786:	eef0 2a47 	vmov.f32	s5, s14
 801978a:	fb92 f3f3 	sdiv	r3, r2, r3
 801978e:	ee13 2a10 	vmov	r2, s6
 8019792:	930f      	str	r3, [sp, #60]	; 0x3c
 8019794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019796:	eeb0 3a67 	vmov.f32	s6, s15
 801979a:	fb92 f3f3 	sdiv	r3, r2, r3
 801979e:	9a01      	ldr	r2, [sp, #4]
 80197a0:	9310      	str	r3, [sp, #64]	; 0x40
 80197a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197a4:	bf08      	it	eq
 80197a6:	4613      	moveq	r3, r2
 80197a8:	e734      	b.n	8019614 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80197aa:	1427      	asrs	r7, r4, #16
 80197ac:	d44d      	bmi.n	801984a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80197ae:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80197b2:	42be      	cmp	r6, r7
 80197b4:	dd49      	ble.n	801984a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80197b6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80197ba:	d446      	bmi.n	801984a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80197bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80197c0:	4542      	cmp	r2, r8
 80197c2:	dd42      	ble.n	801984a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80197c4:	b236      	sxth	r6, r6
 80197c6:	9a00      	ldr	r2, [sp, #0]
 80197c8:	fb08 7606 	mla	r6, r8, r6, r7
 80197cc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80197d0:	0e3a      	lsrs	r2, r7, #24
 80197d2:	d03a      	beq.n	801984a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80197d4:	2aff      	cmp	r2, #255	; 0xff
 80197d6:	b2d6      	uxtb	r6, r2
 80197d8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80197dc:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80197e0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80197e4:	b2ff      	uxtb	r7, r7
 80197e6:	d037      	beq.n	8019858 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80197e8:	fa1f f986 	uxth.w	r9, r6
 80197ec:	4472      	add	r2, lr
 80197ee:	43f6      	mvns	r6, r6
 80197f0:	f815 8002 	ldrb.w	r8, [r5, r2]
 80197f4:	fb17 f709 	smulbb	r7, r7, r9
 80197f8:	fb1a fa09 	smulbb	sl, sl, r9
 80197fc:	b2f6      	uxtb	r6, r6
 80197fe:	fb1b f909 	smulbb	r9, fp, r9
 8019802:	fb08 7706 	mla	r7, r8, r6, r7
 8019806:	b2bf      	uxth	r7, r7
 8019808:	f107 0801 	add.w	r8, r7, #1
 801980c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8019810:	123f      	asrs	r7, r7, #8
 8019812:	54af      	strb	r7, [r5, r2]
 8019814:	442a      	add	r2, r5
 8019816:	7857      	ldrb	r7, [r2, #1]
 8019818:	fb07 aa06 	mla	sl, r7, r6, sl
 801981c:	fa1f fa8a 	uxth.w	sl, sl
 8019820:	f10a 0701 	add.w	r7, sl, #1
 8019824:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019828:	7897      	ldrb	r7, [r2, #2]
 801982a:	fb07 9906 	mla	r9, r7, r6, r9
 801982e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019832:	fa1f f989 	uxth.w	r9, r9
 8019836:	f882 a001 	strb.w	sl, [r2, #1]
 801983a:	f109 0601 	add.w	r6, r9, #1
 801983e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8019842:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019846:	f882 9002 	strb.w	r9, [r2, #2]
 801984a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801984c:	f10e 0e01 	add.w	lr, lr, #1
 8019850:	4414      	add	r4, r2
 8019852:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019854:	4410      	add	r0, r2
 8019856:	e766      	b.n	8019726 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019858:	4472      	add	r2, lr
 801985a:	54af      	strb	r7, [r5, r2]
 801985c:	442a      	add	r2, r5
 801985e:	f882 a001 	strb.w	sl, [r2, #1]
 8019862:	f882 b002 	strb.w	fp, [r2, #2]
 8019866:	e7f0      	b.n	801984a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019868:	f806 7c03 	strb.w	r7, [r6, #-3]
 801986c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019870:	f806 bc01 	strb.w	fp, [r6, #-1]
 8019874:	e74d      	b.n	8019712 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019876:	b003      	add	sp, #12
 8019878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801987c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019880:	b087      	sub	sp, #28
 8019882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019886:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019888:	9204      	str	r2, [sp, #16]
 801988a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801988e:	6860      	ldr	r0, [r4, #4]
 8019890:	9205      	str	r2, [sp, #20]
 8019892:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019896:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801989a:	9101      	str	r1, [sp, #4]
 801989c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80198a0:	fb00 2505 	mla	r5, r0, r5, r2
 80198a4:	6822      	ldr	r2, [r4, #0]
 80198a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80198aa:	4415      	add	r5, r2
 80198ac:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80198b0:	3201      	adds	r2, #1
 80198b2:	f022 0201 	bic.w	r2, r2, #1
 80198b6:	9202      	str	r2, [sp, #8]
 80198b8:	f8dc 2000 	ldr.w	r2, [ip]
 80198bc:	9203      	str	r2, [sp, #12]
 80198be:	9a01      	ldr	r2, [sp, #4]
 80198c0:	2a00      	cmp	r2, #0
 80198c2:	dc03      	bgt.n	80198cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80198c4:	9a04      	ldr	r2, [sp, #16]
 80198c6:	2a00      	cmp	r2, #0
 80198c8:	f340 8135 	ble.w	8019b36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80198cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80198ce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80198d2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80198d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198d8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80198dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	dd0d      	ble.n	8019900 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80198e4:	1422      	asrs	r2, r4, #16
 80198e6:	d405      	bmi.n	80198f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80198e8:	4542      	cmp	r2, r8
 80198ea:	da03      	bge.n	80198f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80198ec:	1402      	asrs	r2, r0, #16
 80198ee:	d401      	bmi.n	80198f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80198f0:	42ba      	cmp	r2, r7
 80198f2:	db06      	blt.n	8019902 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80198f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80198f6:	4474      	add	r4, lr
 80198f8:	3b01      	subs	r3, #1
 80198fa:	3503      	adds	r5, #3
 80198fc:	4410      	add	r0, r2
 80198fe:	e7ef      	b.n	80198e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019900:	d077      	beq.n	80199f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8019902:	1e5a      	subs	r2, r3, #1
 8019904:	fb0e 4602 	mla	r6, lr, r2, r4
 8019908:	1436      	asrs	r6, r6, #16
 801990a:	d469      	bmi.n	80199e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801990c:	4546      	cmp	r6, r8
 801990e:	da67      	bge.n	80199e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019910:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019912:	fb06 0202 	mla	r2, r6, r2, r0
 8019916:	1412      	asrs	r2, r2, #16
 8019918:	d462      	bmi.n	80199e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801991a:	42ba      	cmp	r2, r7
 801991c:	da60      	bge.n	80199e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801991e:	1cee      	adds	r6, r5, #3
 8019920:	4699      	mov	r9, r3
 8019922:	f1b9 0f00 	cmp.w	r9, #0
 8019926:	dd5f      	ble.n	80199e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019928:	1422      	asrs	r2, r4, #16
 801992a:	9902      	ldr	r1, [sp, #8]
 801992c:	1407      	asrs	r7, r0, #16
 801992e:	fb01 2707 	mla	r7, r1, r7, r2
 8019932:	9903      	ldr	r1, [sp, #12]
 8019934:	087a      	lsrs	r2, r7, #1
 8019936:	5c8a      	ldrb	r2, [r1, r2]
 8019938:	07f9      	lsls	r1, r7, #31
 801993a:	bf54      	ite	pl
 801993c:	f002 020f 	andpl.w	r2, r2, #15
 8019940:	1112      	asrmi	r2, r2, #4
 8019942:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019946:	b2d2      	uxtb	r2, r2
 8019948:	2a00      	cmp	r2, #0
 801994a:	d042      	beq.n	80199d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801994c:	497b      	ldr	r1, [pc, #492]	; (8019b3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801994e:	680f      	ldr	r7, [r1, #0]
 8019950:	9905      	ldr	r1, [sp, #20]
 8019952:	fa5f fb87 	uxtb.w	fp, r7
 8019956:	434a      	muls	r2, r1
 8019958:	f102 0801 	add.w	r8, r2, #1
 801995c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8019960:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8019964:	1212      	asrs	r2, r2, #8
 8019966:	fa1f fa82 	uxth.w	sl, r2
 801996a:	43d2      	mvns	r2, r2
 801996c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019970:	b2d2      	uxtb	r2, r2
 8019972:	fb08 b802 	mla	r8, r8, r2, fp
 8019976:	fa1f f888 	uxth.w	r8, r8
 801997a:	f108 0b01 	add.w	fp, r8, #1
 801997e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019982:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019986:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801998a:	fb1b fb0a 	smulbb	fp, fp, sl
 801998e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019992:	fb17 fa0a 	smulbb	sl, r7, sl
 8019996:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801999a:	f806 8c03 	strb.w	r8, [r6, #-3]
 801999e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80199a2:	fb07 aa02 	mla	sl, r7, r2, sl
 80199a6:	fb08 b802 	mla	r8, r8, r2, fp
 80199aa:	fa1f fa8a 	uxth.w	sl, sl
 80199ae:	fa1f f888 	uxth.w	r8, r8
 80199b2:	f10a 0701 	add.w	r7, sl, #1
 80199b6:	f108 0b01 	add.w	fp, r8, #1
 80199ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80199be:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80199c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80199c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80199ca:	f806 ac01 	strb.w	sl, [r6, #-1]
 80199ce:	f806 8c02 	strb.w	r8, [r6, #-2]
 80199d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80199d4:	4474      	add	r4, lr
 80199d6:	3603      	adds	r6, #3
 80199d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80199dc:	4410      	add	r0, r2
 80199de:	e7a0      	b.n	8019922 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80199e0:	2700      	movs	r7, #0
 80199e2:	1bda      	subs	r2, r3, r7
 80199e4:	2a00      	cmp	r2, #0
 80199e6:	dc3e      	bgt.n	8019a66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80199e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80199ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80199f0:	441d      	add	r5, r3
 80199f2:	9b01      	ldr	r3, [sp, #4]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	f340 809e 	ble.w	8019b36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80199fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80199fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019a04:	eeb0 6a62 	vmov.f32	s12, s5
 8019a08:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019a0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019a10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a14:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019a18:	eeb0 6a43 	vmov.f32	s12, s6
 8019a1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a20:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019a24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a3c:	ee12 2a90 	vmov	r2, s5
 8019a40:	eef0 2a47 	vmov.f32	s5, s14
 8019a44:	fb92 fef3 	sdiv	lr, r2, r3
 8019a48:	ee13 2a10 	vmov	r2, s6
 8019a4c:	eeb0 3a67 	vmov.f32	s6, s15
 8019a50:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a54:	9314      	str	r3, [sp, #80]	; 0x50
 8019a56:	9b01      	ldr	r3, [sp, #4]
 8019a58:	9a04      	ldr	r2, [sp, #16]
 8019a5a:	3b01      	subs	r3, #1
 8019a5c:	9301      	str	r3, [sp, #4]
 8019a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a60:	bf08      	it	eq
 8019a62:	4613      	moveq	r3, r2
 8019a64:	e72b      	b.n	80198be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019a66:	1426      	asrs	r6, r4, #16
 8019a68:	d460      	bmi.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019a6a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019a6e:	42b2      	cmp	r2, r6
 8019a70:	dd5c      	ble.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019a72:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019a76:	d459      	bmi.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019a78:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019a7c:	4542      	cmp	r2, r8
 8019a7e:	dd55      	ble.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019a80:	9a02      	ldr	r2, [sp, #8]
 8019a82:	9903      	ldr	r1, [sp, #12]
 8019a84:	fb08 6602 	mla	r6, r8, r2, r6
 8019a88:	0872      	lsrs	r2, r6, #1
 8019a8a:	07f6      	lsls	r6, r6, #31
 8019a8c:	5c8a      	ldrb	r2, [r1, r2]
 8019a8e:	bf54      	ite	pl
 8019a90:	f002 020f 	andpl.w	r2, r2, #15
 8019a94:	1112      	asrmi	r2, r2, #4
 8019a96:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019a9a:	b2d2      	uxtb	r2, r2
 8019a9c:	2a00      	cmp	r2, #0
 8019a9e:	d045      	beq.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019aa0:	4926      	ldr	r1, [pc, #152]	; (8019b3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019aa2:	f8d1 8000 	ldr.w	r8, [r1]
 8019aa6:	9905      	ldr	r1, [sp, #20]
 8019aa8:	fa5f fb88 	uxtb.w	fp, r8
 8019aac:	434a      	muls	r2, r1
 8019aae:	1c56      	adds	r6, r2, #1
 8019ab0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019ab4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019ab8:	1212      	asrs	r2, r2, #8
 8019aba:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019abe:	fa1f fa82 	uxth.w	sl, r2
 8019ac2:	43d2      	mvns	r2, r2
 8019ac4:	fb1b fb0a 	smulbb	fp, fp, sl
 8019ac8:	b2d2      	uxtb	r2, r2
 8019aca:	fb09 b902 	mla	r9, r9, r2, fp
 8019ace:	fa1f f989 	uxth.w	r9, r9
 8019ad2:	f109 0b01 	add.w	fp, r9, #1
 8019ad6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019ada:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8019ade:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8019ae2:	fb1b fb0a 	smulbb	fp, fp, sl
 8019ae6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019aea:	fb18 fa0a 	smulbb	sl, r8, sl
 8019aee:	f805 9006 	strb.w	r9, [r5, r6]
 8019af2:	442e      	add	r6, r5
 8019af4:	f896 8002 	ldrb.w	r8, [r6, #2]
 8019af8:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019afc:	fb08 aa02 	mla	sl, r8, r2, sl
 8019b00:	fb09 b902 	mla	r9, r9, r2, fp
 8019b04:	fa1f fa8a 	uxth.w	sl, sl
 8019b08:	fa1f f989 	uxth.w	r9, r9
 8019b0c:	f10a 0801 	add.w	r8, sl, #1
 8019b10:	f109 0b01 	add.w	fp, r9, #1
 8019b14:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8019b18:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019b1c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019b20:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019b24:	f886 a002 	strb.w	sl, [r6, #2]
 8019b28:	f886 9001 	strb.w	r9, [r6, #1]
 8019b2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b2e:	4474      	add	r4, lr
 8019b30:	3701      	adds	r7, #1
 8019b32:	4410      	add	r0, r2
 8019b34:	e755      	b.n	80199e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8019b36:	b007      	add	sp, #28
 8019b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b3c:	2400c7fc 	.word	0x2400c7fc

08019b40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b44:	b085      	sub	sp, #20
 8019b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b4a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019b4c:	9203      	str	r2, [sp, #12]
 8019b4e:	6860      	ldr	r0, [r4, #4]
 8019b50:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019b54:	9100      	str	r1, [sp, #0]
 8019b56:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8019b5a:	fb00 2606 	mla	r6, r0, r6, r2
 8019b5e:	6822      	ldr	r2, [r4, #0]
 8019b60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019b64:	4416      	add	r6, r2
 8019b66:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019b6a:	3201      	adds	r2, #1
 8019b6c:	f022 0201 	bic.w	r2, r2, #1
 8019b70:	9201      	str	r2, [sp, #4]
 8019b72:	f8dc 2000 	ldr.w	r2, [ip]
 8019b76:	9202      	str	r2, [sp, #8]
 8019b78:	9a00      	ldr	r2, [sp, #0]
 8019b7a:	2a00      	cmp	r2, #0
 8019b7c:	dc03      	bgt.n	8019b86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8019b7e:	9a03      	ldr	r2, [sp, #12]
 8019b80:	2a00      	cmp	r2, #0
 8019b82:	f340 8140 	ble.w	8019e06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019b86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019b88:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019b8c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8019b90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019b92:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019b96:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	dd0e      	ble.n	8019bbc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019b9e:	142a      	asrs	r2, r5, #16
 8019ba0:	d405      	bmi.n	8019bae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019ba2:	4572      	cmp	r2, lr
 8019ba4:	da03      	bge.n	8019bae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019ba6:	1422      	asrs	r2, r4, #16
 8019ba8:	d401      	bmi.n	8019bae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019baa:	42ba      	cmp	r2, r7
 8019bac:	db07      	blt.n	8019bbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019bae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019bb0:	3b01      	subs	r3, #1
 8019bb2:	3603      	adds	r6, #3
 8019bb4:	4415      	add	r5, r2
 8019bb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019bb8:	4414      	add	r4, r2
 8019bba:	e7ee      	b.n	8019b9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019bbc:	d072      	beq.n	8019ca4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019bbe:	1e5a      	subs	r2, r3, #1
 8019bc0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019bc2:	fb00 5002 	mla	r0, r0, r2, r5
 8019bc6:	1400      	asrs	r0, r0, #16
 8019bc8:	d463      	bmi.n	8019c92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019bca:	4570      	cmp	r0, lr
 8019bcc:	da61      	bge.n	8019c92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019bce:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019bd0:	fb00 4202 	mla	r2, r0, r2, r4
 8019bd4:	1412      	asrs	r2, r2, #16
 8019bd6:	d45c      	bmi.n	8019c92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019bd8:	42ba      	cmp	r2, r7
 8019bda:	da5a      	bge.n	8019c92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019bdc:	1cf0      	adds	r0, r6, #3
 8019bde:	469a      	mov	sl, r3
 8019be0:	f1ba 0f00 	cmp.w	sl, #0
 8019be4:	dd59      	ble.n	8019c9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8019be6:	142a      	asrs	r2, r5, #16
 8019be8:	9901      	ldr	r1, [sp, #4]
 8019bea:	1427      	asrs	r7, r4, #16
 8019bec:	fb01 2707 	mla	r7, r1, r7, r2
 8019bf0:	9902      	ldr	r1, [sp, #8]
 8019bf2:	087a      	lsrs	r2, r7, #1
 8019bf4:	5c8a      	ldrb	r2, [r1, r2]
 8019bf6:	07f9      	lsls	r1, r7, #31
 8019bf8:	bf54      	ite	pl
 8019bfa:	f002 020f 	andpl.w	r2, r2, #15
 8019bfe:	1112      	asrmi	r2, r2, #4
 8019c00:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019c04:	b2d2      	uxtb	r2, r2
 8019c06:	2a00      	cmp	r2, #0
 8019c08:	d03b      	beq.n	8019c82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019c0a:	4980      	ldr	r1, [pc, #512]	; (8019e0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019c0c:	2aff      	cmp	r2, #255	; 0xff
 8019c0e:	680f      	ldr	r7, [r1, #0]
 8019c10:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019c14:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019c18:	b2ff      	uxtb	r7, r7
 8019c1a:	f000 80ed 	beq.w	8019df8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8019c1e:	fa1f f882 	uxth.w	r8, r2
 8019c22:	43d2      	mvns	r2, r2
 8019c24:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8019c28:	fb17 f708 	smulbb	r7, r7, r8
 8019c2c:	b2d2      	uxtb	r2, r2
 8019c2e:	fb19 f908 	smulbb	r9, r9, r8
 8019c32:	fb0e 7702 	mla	r7, lr, r2, r7
 8019c36:	fb1b f808 	smulbb	r8, fp, r8
 8019c3a:	b2bf      	uxth	r7, r7
 8019c3c:	f107 0e01 	add.w	lr, r7, #1
 8019c40:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019c44:	123f      	asrs	r7, r7, #8
 8019c46:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019c4a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8019c4e:	fb07 9902 	mla	r9, r7, r2, r9
 8019c52:	fa1f f989 	uxth.w	r9, r9
 8019c56:	f109 0701 	add.w	r7, r9, #1
 8019c5a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019c5e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8019c62:	fb07 8802 	mla	r8, r7, r2, r8
 8019c66:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c6a:	fa1f f888 	uxth.w	r8, r8
 8019c6e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019c72:	f108 0201 	add.w	r2, r8, #1
 8019c76:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019c7a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c7e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8019c82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019c84:	3003      	adds	r0, #3
 8019c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019c8a:	4415      	add	r5, r2
 8019c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c8e:	4414      	add	r4, r2
 8019c90:	e7a6      	b.n	8019be0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019c92:	2700      	movs	r7, #0
 8019c94:	1bda      	subs	r2, r3, r7
 8019c96:	2a00      	cmp	r2, #0
 8019c98:	dc40      	bgt.n	8019d1c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019c9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ca2:	441e      	add	r6, r3
 8019ca4:	9b00      	ldr	r3, [sp, #0]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	f340 80ad 	ble.w	8019e06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019cac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cb2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cb6:	eeb0 6a62 	vmov.f32	s12, s5
 8019cba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019cbe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cc2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cc6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019cca:	eeb0 6a43 	vmov.f32	s12, s6
 8019cce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cd2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019cd6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019cda:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019cde:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019ce2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019ce6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019cea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019cee:	ee12 2a90 	vmov	r2, s5
 8019cf2:	eef0 2a47 	vmov.f32	s5, s14
 8019cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8019cfa:	ee13 2a10 	vmov	r2, s6
 8019cfe:	9311      	str	r3, [sp, #68]	; 0x44
 8019d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d02:	eeb0 3a67 	vmov.f32	s6, s15
 8019d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8019d0c:	9b00      	ldr	r3, [sp, #0]
 8019d0e:	9a03      	ldr	r2, [sp, #12]
 8019d10:	3b01      	subs	r3, #1
 8019d12:	9300      	str	r3, [sp, #0]
 8019d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d16:	bf08      	it	eq
 8019d18:	4613      	moveq	r3, r2
 8019d1a:	e72d      	b.n	8019b78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019d1c:	1428      	asrs	r0, r5, #16
 8019d1e:	d45c      	bmi.n	8019dda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019d20:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019d24:	4282      	cmp	r2, r0
 8019d26:	dd58      	ble.n	8019dda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019d28:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019d2c:	d455      	bmi.n	8019dda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019d2e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019d32:	4572      	cmp	r2, lr
 8019d34:	dd51      	ble.n	8019dda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019d36:	9a01      	ldr	r2, [sp, #4]
 8019d38:	9902      	ldr	r1, [sp, #8]
 8019d3a:	fb0e 0002 	mla	r0, lr, r2, r0
 8019d3e:	0842      	lsrs	r2, r0, #1
 8019d40:	07c0      	lsls	r0, r0, #31
 8019d42:	5c8a      	ldrb	r2, [r1, r2]
 8019d44:	bf54      	ite	pl
 8019d46:	f002 020f 	andpl.w	r2, r2, #15
 8019d4a:	1112      	asrmi	r2, r2, #4
 8019d4c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019d50:	b2d2      	uxtb	r2, r2
 8019d52:	2a00      	cmp	r2, #0
 8019d54:	d041      	beq.n	8019dda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019d56:	492d      	ldr	r1, [pc, #180]	; (8019e0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019d58:	2aff      	cmp	r2, #255	; 0xff
 8019d5a:	6808      	ldr	r0, [r1, #0]
 8019d5c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8019d60:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019d64:	fa5f fe80 	uxtb.w	lr, r0
 8019d68:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8019d6c:	d03b      	beq.n	8019de6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019d6e:	fa1f f982 	uxth.w	r9, r2
 8019d72:	4438      	add	r0, r7
 8019d74:	43d2      	mvns	r2, r2
 8019d76:	f816 8000 	ldrb.w	r8, [r6, r0]
 8019d7a:	fb1e fe09 	smulbb	lr, lr, r9
 8019d7e:	fb1a fa09 	smulbb	sl, sl, r9
 8019d82:	b2d2      	uxtb	r2, r2
 8019d84:	fb1b f909 	smulbb	r9, fp, r9
 8019d88:	fb08 ee02 	mla	lr, r8, r2, lr
 8019d8c:	fa1f fe8e 	uxth.w	lr, lr
 8019d90:	f10e 0801 	add.w	r8, lr, #1
 8019d94:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8019d98:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019d9c:	f806 e000 	strb.w	lr, [r6, r0]
 8019da0:	4430      	add	r0, r6
 8019da2:	f890 e001 	ldrb.w	lr, [r0, #1]
 8019da6:	fb0e aa02 	mla	sl, lr, r2, sl
 8019daa:	fa1f fa8a 	uxth.w	sl, sl
 8019dae:	f10a 0e01 	add.w	lr, sl, #1
 8019db2:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8019db6:	f890 e002 	ldrb.w	lr, [r0, #2]
 8019dba:	fb0e 9902 	mla	r9, lr, r2, r9
 8019dbe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019dc2:	fa1f f989 	uxth.w	r9, r9
 8019dc6:	f880 a001 	strb.w	sl, [r0, #1]
 8019dca:	f109 0201 	add.w	r2, r9, #1
 8019dce:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8019dd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019dd6:	f880 9002 	strb.w	r9, [r0, #2]
 8019dda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019ddc:	3701      	adds	r7, #1
 8019dde:	4415      	add	r5, r2
 8019de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019de2:	4414      	add	r4, r2
 8019de4:	e756      	b.n	8019c94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019de6:	4438      	add	r0, r7
 8019de8:	f806 e000 	strb.w	lr, [r6, r0]
 8019dec:	4430      	add	r0, r6
 8019dee:	f880 a001 	strb.w	sl, [r0, #1]
 8019df2:	f880 b002 	strb.w	fp, [r0, #2]
 8019df6:	e7f0      	b.n	8019dda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019df8:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019dfc:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019e00:	f800 bc01 	strb.w	fp, [r0, #-1]
 8019e04:	e73d      	b.n	8019c82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019e06:	b005      	add	sp, #20
 8019e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e0c:	2400c7fc 	.word	0x2400c7fc

08019e10 <_ZN8touchgfx8LCD24bppD1Ev>:
 8019e10:	4770      	bx	lr

08019e12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019e12:	4770      	bx	lr

08019e14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019e14:	4770      	bx	lr

08019e16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019e16:	4770      	bx	lr

08019e18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8019e18:	4770      	bx	lr

08019e1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019e1a:	4770      	bx	lr

08019e1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019e1c:	4770      	bx	lr

08019e1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019e1e:	4770      	bx	lr

08019e20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019e20:	4770      	bx	lr

08019e22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019e22:	4770      	bx	lr

08019e24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019e24:	4770      	bx	lr

08019e26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019e26:	4770      	bx	lr

08019e28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019e28:	4770      	bx	lr

08019e2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019e2a:	4770      	bx	lr

08019e2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019e2c:	4770      	bx	lr

08019e2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019e2e:	4770      	bx	lr

08019e30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019e30:	4770      	bx	lr

08019e32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019e32:	4770      	bx	lr

08019e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019e34:	4770      	bx	lr

08019e36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019e36:	4770      	bx	lr

08019e38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019e38:	4770      	bx	lr
	...

08019e3c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e3e:	4606      	mov	r6, r0
 8019e40:	b087      	sub	sp, #28
 8019e42:	4615      	mov	r5, r2
 8019e44:	461f      	mov	r7, r3
 8019e46:	b353      	cbz	r3, 8019e9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019e48:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	dd26      	ble.n	8019e9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019e50:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	dd22      	ble.n	8019e9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019e58:	6808      	ldr	r0, [r1, #0]
 8019e5a:	aa04      	add	r2, sp, #16
 8019e5c:	6849      	ldr	r1, [r1, #4]
 8019e5e:	4c1b      	ldr	r4, [pc, #108]	; (8019ecc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019e60:	c203      	stmia	r2!, {r0, r1}
 8019e62:	a804      	add	r0, sp, #16
 8019e64:	f7fb fb24 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019e68:	6820      	ldr	r0, [r4, #0]
 8019e6a:	6803      	ldr	r3, [r0, #0]
 8019e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e6e:	4798      	blx	r3
 8019e70:	2fff      	cmp	r7, #255	; 0xff
 8019e72:	d016      	beq.n	8019ea2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019e74:	f010 0f08 	tst.w	r0, #8
 8019e78:	6820      	ldr	r0, [r4, #0]
 8019e7a:	d015      	beq.n	8019ea8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8019e7c:	2400      	movs	r4, #0
 8019e7e:	6801      	ldr	r1, [r0, #0]
 8019e80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019e84:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019e88:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8019e8c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019e90:	9401      	str	r4, [sp, #4]
 8019e92:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019e96:	9400      	str	r4, [sp, #0]
 8019e98:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8019e9a:	4629      	mov	r1, r5
 8019e9c:	47a0      	blx	r4
 8019e9e:	b007      	add	sp, #28
 8019ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ea2:	f010 0f02 	tst.w	r0, #2
 8019ea6:	e7e7      	b.n	8019e78 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8019ea8:	6803      	ldr	r3, [r0, #0]
 8019eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019eac:	4798      	blx	r3
 8019eae:	4b08      	ldr	r3, [pc, #32]	; (8019ed0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8019eb0:	4601      	mov	r1, r0
 8019eb2:	4630      	mov	r0, r6
 8019eb4:	881a      	ldrh	r2, [r3, #0]
 8019eb6:	6833      	ldr	r3, [r6, #0]
 8019eb8:	e9cd 5700 	strd	r5, r7, [sp]
 8019ebc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8019ebe:	ab04      	add	r3, sp, #16
 8019ec0:	47a8      	blx	r5
 8019ec2:	6820      	ldr	r0, [r4, #0]
 8019ec4:	6803      	ldr	r3, [r0, #0]
 8019ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ec8:	4798      	blx	r3
 8019eca:	e7e8      	b.n	8019e9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019ecc:	2400c7f4 	.word	0x2400c7f4
 8019ed0:	2400c7ee 	.word	0x2400c7ee

08019ed4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8019ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ed8:	b08b      	sub	sp, #44	; 0x2c
 8019eda:	460d      	mov	r5, r1
 8019edc:	4616      	mov	r6, r2
 8019ede:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8019ee2:	f1b8 0f00 	cmp.w	r8, #0
 8019ee6:	d047      	beq.n	8019f78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019ee8:	6810      	ldr	r0, [r2, #0]
 8019eea:	ac06      	add	r4, sp, #24
 8019eec:	6851      	ldr	r1, [r2, #4]
 8019eee:	4f51      	ldr	r7, [pc, #324]	; (801a034 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8019ef0:	c403      	stmia	r4!, {r0, r1}
 8019ef2:	6818      	ldr	r0, [r3, #0]
 8019ef4:	ac08      	add	r4, sp, #32
 8019ef6:	6859      	ldr	r1, [r3, #4]
 8019ef8:	c403      	stmia	r4!, {r0, r1}
 8019efa:	a806      	add	r0, sp, #24
 8019efc:	f7fb fad8 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019f00:	4631      	mov	r1, r6
 8019f02:	a808      	add	r0, sp, #32
 8019f04:	f7fb fafc 	bl	8015500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f08:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019f0c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019f10:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019f14:	6838      	ldr	r0, [r7, #0]
 8019f16:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019f1a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8019f1e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8019f22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019f26:	440d      	add	r5, r1
 8019f28:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019f2c:	440a      	add	r2, r1
 8019f2e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019f32:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019f36:	4413      	add	r3, r2
 8019f38:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019f3c:	6803      	ldr	r3, [r0, #0]
 8019f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f40:	4798      	blx	r3
 8019f42:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019f46:	d01a      	beq.n	8019f7e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8019f48:	f010 0f04 	tst.w	r0, #4
 8019f4c:	6838      	ldr	r0, [r7, #0]
 8019f4e:	d019      	beq.n	8019f84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8019f50:	2100      	movs	r1, #0
 8019f52:	6807      	ldr	r7, [r0, #0]
 8019f54:	b2a4      	uxth	r4, r4
 8019f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f5a:	b2b6      	uxth	r6, r6
 8019f5c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8019f60:	9401      	str	r4, [sp, #4]
 8019f62:	9600      	str	r6, [sp, #0]
 8019f64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019f68:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8019f6c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019f70:	9102      	str	r1, [sp, #8]
 8019f72:	4629      	mov	r1, r5
 8019f74:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8019f76:	47a0      	blx	r4
 8019f78:	b00b      	add	sp, #44	; 0x2c
 8019f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f7e:	f010 0f01 	tst.w	r0, #1
 8019f82:	e7e3      	b.n	8019f4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8019f84:	6803      	ldr	r3, [r0, #0]
 8019f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f88:	4798      	blx	r3
 8019f8a:	4a2b      	ldr	r2, [pc, #172]	; (801a038 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8019f8c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8019f90:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019f94:	8813      	ldrh	r3, [r2, #0]
 8019f96:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8019f9a:	fb03 f404 	mul.w	r4, r3, r4
 8019f9e:	fb03 c101 	mla	r1, r3, r1, ip
 8019fa2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019fa6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019faa:	4408      	add	r0, r1
 8019fac:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8019fb0:	4404      	add	r4, r0
 8019fb2:	d02e      	beq.n	801a012 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8019fb4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8019fb8:	1b9b      	subs	r3, r3, r6
 8019fba:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8019fbe:	1b96      	subs	r6, r2, r6
 8019fc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019fc4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019fc8:	42a0      	cmp	r0, r4
 8019fca:	d22d      	bcs.n	801a028 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019fcc:	eb00 0e01 	add.w	lr, r0, r1
 8019fd0:	4570      	cmp	r0, lr
 8019fd2:	d210      	bcs.n	8019ff6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8019fd4:	f890 9000 	ldrb.w	r9, [r0]
 8019fd8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8019fdc:	fb19 f90c 	smulbb	r9, r9, ip
 8019fe0:	fb02 9208 	mla	r2, r2, r8, r9
 8019fe4:	b292      	uxth	r2, r2
 8019fe6:	f102 0901 	add.w	r9, r2, #1
 8019fea:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8019fee:	1212      	asrs	r2, r2, #8
 8019ff0:	f800 2b01 	strb.w	r2, [r0], #1
 8019ff4:	e7ec      	b.n	8019fd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8019ff6:	4418      	add	r0, r3
 8019ff8:	4435      	add	r5, r6
 8019ffa:	e7e5      	b.n	8019fc8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8019ffc:	8813      	ldrh	r3, [r2, #0]
 8019ffe:	1b9b      	subs	r3, r3, r6
 801a000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a004:	4418      	add	r0, r3
 801a006:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a00a:	1b9b      	subs	r3, r3, r6
 801a00c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a010:	441d      	add	r5, r3
 801a012:	42a0      	cmp	r0, r4
 801a014:	d208      	bcs.n	801a028 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801a016:	eb00 0c01 	add.w	ip, r0, r1
 801a01a:	4560      	cmp	r0, ip
 801a01c:	d2ee      	bcs.n	8019ffc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801a01e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a022:	f800 3b01 	strb.w	r3, [r0], #1
 801a026:	e7f8      	b.n	801a01a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801a028:	6838      	ldr	r0, [r7, #0]
 801a02a:	6803      	ldr	r3, [r0, #0]
 801a02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a02e:	4798      	blx	r3
 801a030:	e7a2      	b.n	8019f78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801a032:	bf00      	nop
 801a034:	2400c7f4 	.word	0x2400c7f4
 801a038:	2400c7ee 	.word	0x2400c7ee

0801a03c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a03e:	2300      	movs	r3, #0
 801a040:	b085      	sub	sp, #20
 801a042:	9300      	str	r3, [sp, #0]
 801a044:	4b41      	ldr	r3, [pc, #260]	; (801a14c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801a046:	781b      	ldrb	r3, [r3, #0]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d136      	bne.n	801a0ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801a04c:	4a40      	ldr	r2, [pc, #256]	; (801a150 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a04e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a052:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d131      	bne.n	801a0be <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801a05a:	4b3e      	ldr	r3, [pc, #248]	; (801a154 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801a05c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a060:	ac02      	add	r4, sp, #8
 801a062:	6808      	ldr	r0, [r1, #0]
 801a064:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a068:	ab02      	add	r3, sp, #8
 801a06a:	6849      	ldr	r1, [r1, #4]
 801a06c:	4d3a      	ldr	r5, [pc, #232]	; (801a158 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801a06e:	c303      	stmia	r3!, {r0, r1}
 801a070:	4669      	mov	r1, sp
 801a072:	4620      	mov	r0, r4
 801a074:	f7fb fa44 	bl	8015500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a078:	4668      	mov	r0, sp
 801a07a:	f7fb fa19 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a07e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a082:	f8bd 2000 	ldrh.w	r2, [sp]
 801a086:	462e      	mov	r6, r5
 801a088:	6828      	ldr	r0, [r5, #0]
 801a08a:	4413      	add	r3, r2
 801a08c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a090:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a094:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a098:	4413      	add	r3, r2
 801a09a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a09e:	6803      	ldr	r3, [r0, #0]
 801a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0a2:	4798      	blx	r3
 801a0a4:	f010 0f01 	tst.w	r0, #1
 801a0a8:	d00b      	beq.n	801a0c2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801a0aa:	6828      	ldr	r0, [r5, #0]
 801a0ac:	6803      	ldr	r3, [r0, #0]
 801a0ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a0b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0b4:	4798      	blx	r3
 801a0b6:	b005      	add	sp, #20
 801a0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ba:	4a26      	ldr	r2, [pc, #152]	; (801a154 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801a0bc:	e7c7      	b.n	801a04e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801a0be:	4b24      	ldr	r3, [pc, #144]	; (801a150 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a0c0:	e7cc      	b.n	801a05c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801a0c2:	6830      	ldr	r0, [r6, #0]
 801a0c4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801a0c8:	6803      	ldr	r3, [r0, #0]
 801a0ca:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0d0:	4798      	blx	r3
 801a0d2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a0d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a0da:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801a0de:	fb14 3402 	smlabb	r4, r4, r2, r3
 801a0e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a0e6:	4404      	add	r4, r0
 801a0e8:	6830      	ldr	r0, [r6, #0]
 801a0ea:	6803      	ldr	r3, [r0, #0]
 801a0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0ee:	4798      	blx	r3
 801a0f0:	4917      	ldr	r1, [pc, #92]	; (801a150 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a0f2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801a0f6:	880b      	ldrh	r3, [r1, #0]
 801a0f8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801a0fc:	fb03 c202 	mla	r2, r3, r2, ip
 801a100:	437b      	muls	r3, r7
 801a102:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801a106:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a10a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a10e:	4410      	add	r0, r2
 801a110:	18c2      	adds	r2, r0, r3
 801a112:	4290      	cmp	r0, r2
 801a114:	d214      	bcs.n	801a140 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801a116:	eb00 0c07 	add.w	ip, r0, r7
 801a11a:	4560      	cmp	r0, ip
 801a11c:	d204      	bcs.n	801a128 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801a11e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a122:	f800 3b01 	strb.w	r3, [r0], #1
 801a126:	e7f8      	b.n	801a11a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801a128:	880b      	ldrh	r3, [r1, #0]
 801a12a:	1b5b      	subs	r3, r3, r5
 801a12c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a130:	4418      	add	r0, r3
 801a132:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a136:	1b5b      	subs	r3, r3, r5
 801a138:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a13c:	441c      	add	r4, r3
 801a13e:	e7e8      	b.n	801a112 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801a140:	6830      	ldr	r0, [r6, #0]
 801a142:	6803      	ldr	r3, [r0, #0]
 801a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a146:	4798      	blx	r3
 801a148:	e7b5      	b.n	801a0b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801a14a:	bf00      	nop
 801a14c:	2400c7ec 	.word	0x2400c7ec
 801a150:	2400c7ee 	.word	0x2400c7ee
 801a154:	2400c7f0 	.word	0x2400c7f0
 801a158:	2400c7f4 	.word	0x2400c7f4

0801a15c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a160:	b089      	sub	sp, #36	; 0x24
 801a162:	4607      	mov	r7, r0
 801a164:	4689      	mov	r9, r1
 801a166:	4692      	mov	sl, r2
 801a168:	ac08      	add	r4, sp, #32
 801a16a:	461e      	mov	r6, r3
 801a16c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801a170:	4620      	mov	r0, r4
 801a172:	f7fe f8ef 	bl	8018354 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	4605      	mov	r5, r0
 801a17a:	4620      	mov	r0, r4
 801a17c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801a180:	f7fe f834 	bl	80181ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a184:	4683      	mov	fp, r0
 801a186:	4620      	mov	r0, r4
 801a188:	f7fe f864 	bl	8018254 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a18c:	4653      	mov	r3, sl
 801a18e:	464a      	mov	r2, r9
 801a190:	4639      	mov	r1, r7
 801a192:	9500      	str	r5, [sp, #0]
 801a194:	e9cd b001 	strd	fp, r0, [sp, #4]
 801a198:	a806      	add	r0, sp, #24
 801a19a:	47c0      	blx	r8
 801a19c:	a906      	add	r1, sp, #24
 801a19e:	4630      	mov	r0, r6
 801a1a0:	f7fd ff08 	bl	8017fb4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801a1a4:	4628      	mov	r0, r5
 801a1a6:	b009      	add	sp, #36	; 0x24
 801a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1ac <_ZN8touchgfx8LCD24bppD0Ev>:
 801a1ac:	b510      	push	{r4, lr}
 801a1ae:	4604      	mov	r4, r0
 801a1b0:	2158      	movs	r1, #88	; 0x58
 801a1b2:	f006 f8f6 	bl	80203a2 <_ZdlPvj>
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	bd10      	pop	{r4, pc}

0801a1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a1ba:	b510      	push	{r4, lr}
 801a1bc:	4604      	mov	r4, r0
 801a1be:	2104      	movs	r1, #4
 801a1c0:	f006 f8ef 	bl	80203a2 <_ZdlPvj>
 801a1c4:	4620      	mov	r0, r4
 801a1c6:	bd10      	pop	{r4, pc}

0801a1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a1c8:	b510      	push	{r4, lr}
 801a1ca:	4604      	mov	r4, r0
 801a1cc:	2104      	movs	r1, #4
 801a1ce:	f006 f8e8 	bl	80203a2 <_ZdlPvj>
 801a1d2:	4620      	mov	r0, r4
 801a1d4:	bd10      	pop	{r4, pc}

0801a1d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a1d6:	b510      	push	{r4, lr}
 801a1d8:	4604      	mov	r4, r0
 801a1da:	2104      	movs	r1, #4
 801a1dc:	f006 f8e1 	bl	80203a2 <_ZdlPvj>
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	bd10      	pop	{r4, pc}

0801a1e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a1e4:	b510      	push	{r4, lr}
 801a1e6:	4604      	mov	r4, r0
 801a1e8:	2104      	movs	r1, #4
 801a1ea:	f006 f8da 	bl	80203a2 <_ZdlPvj>
 801a1ee:	4620      	mov	r0, r4
 801a1f0:	bd10      	pop	{r4, pc}

0801a1f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a1f2:	b510      	push	{r4, lr}
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	2104      	movs	r1, #4
 801a1f8:	f006 f8d3 	bl	80203a2 <_ZdlPvj>
 801a1fc:	4620      	mov	r0, r4
 801a1fe:	bd10      	pop	{r4, pc}

0801a200 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a200:	b510      	push	{r4, lr}
 801a202:	4604      	mov	r4, r0
 801a204:	2104      	movs	r1, #4
 801a206:	f006 f8cc 	bl	80203a2 <_ZdlPvj>
 801a20a:	4620      	mov	r0, r4
 801a20c:	bd10      	pop	{r4, pc}

0801a20e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a20e:	b510      	push	{r4, lr}
 801a210:	4604      	mov	r4, r0
 801a212:	2104      	movs	r1, #4
 801a214:	f006 f8c5 	bl	80203a2 <_ZdlPvj>
 801a218:	4620      	mov	r0, r4
 801a21a:	bd10      	pop	{r4, pc}

0801a21c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a21c:	b510      	push	{r4, lr}
 801a21e:	4604      	mov	r4, r0
 801a220:	2104      	movs	r1, #4
 801a222:	f006 f8be 	bl	80203a2 <_ZdlPvj>
 801a226:	4620      	mov	r0, r4
 801a228:	bd10      	pop	{r4, pc}

0801a22a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a22a:	b510      	push	{r4, lr}
 801a22c:	4604      	mov	r4, r0
 801a22e:	2104      	movs	r1, #4
 801a230:	f006 f8b7 	bl	80203a2 <_ZdlPvj>
 801a234:	4620      	mov	r0, r4
 801a236:	bd10      	pop	{r4, pc}

0801a238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a238:	b510      	push	{r4, lr}
 801a23a:	4604      	mov	r4, r0
 801a23c:	2104      	movs	r1, #4
 801a23e:	f006 f8b0 	bl	80203a2 <_ZdlPvj>
 801a242:	4620      	mov	r0, r4
 801a244:	bd10      	pop	{r4, pc}

0801a246 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a246:	b510      	push	{r4, lr}
 801a248:	4604      	mov	r4, r0
 801a24a:	2104      	movs	r1, #4
 801a24c:	f006 f8a9 	bl	80203a2 <_ZdlPvj>
 801a250:	4620      	mov	r0, r4
 801a252:	bd10      	pop	{r4, pc}

0801a254 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a254:	b510      	push	{r4, lr}
 801a256:	4604      	mov	r4, r0
 801a258:	2104      	movs	r1, #4
 801a25a:	f006 f8a2 	bl	80203a2 <_ZdlPvj>
 801a25e:	4620      	mov	r0, r4
 801a260:	bd10      	pop	{r4, pc}

0801a262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a262:	b510      	push	{r4, lr}
 801a264:	4604      	mov	r4, r0
 801a266:	2104      	movs	r1, #4
 801a268:	f006 f89b 	bl	80203a2 <_ZdlPvj>
 801a26c:	4620      	mov	r0, r4
 801a26e:	bd10      	pop	{r4, pc}

0801a270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a270:	b510      	push	{r4, lr}
 801a272:	4604      	mov	r4, r0
 801a274:	2104      	movs	r1, #4
 801a276:	f006 f894 	bl	80203a2 <_ZdlPvj>
 801a27a:	4620      	mov	r0, r4
 801a27c:	bd10      	pop	{r4, pc}

0801a27e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a27e:	b510      	push	{r4, lr}
 801a280:	4604      	mov	r4, r0
 801a282:	2104      	movs	r1, #4
 801a284:	f006 f88d 	bl	80203a2 <_ZdlPvj>
 801a288:	4620      	mov	r0, r4
 801a28a:	bd10      	pop	{r4, pc}

0801a28c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a28c:	b510      	push	{r4, lr}
 801a28e:	4604      	mov	r4, r0
 801a290:	2104      	movs	r1, #4
 801a292:	f006 f886 	bl	80203a2 <_ZdlPvj>
 801a296:	4620      	mov	r0, r4
 801a298:	bd10      	pop	{r4, pc}

0801a29a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a29a:	b510      	push	{r4, lr}
 801a29c:	4604      	mov	r4, r0
 801a29e:	2104      	movs	r1, #4
 801a2a0:	f006 f87f 	bl	80203a2 <_ZdlPvj>
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	bd10      	pop	{r4, pc}

0801a2a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a2a8:	b510      	push	{r4, lr}
 801a2aa:	4604      	mov	r4, r0
 801a2ac:	2104      	movs	r1, #4
 801a2ae:	f006 f878 	bl	80203a2 <_ZdlPvj>
 801a2b2:	4620      	mov	r0, r4
 801a2b4:	bd10      	pop	{r4, pc}

0801a2b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a2b6:	b510      	push	{r4, lr}
 801a2b8:	4604      	mov	r4, r0
 801a2ba:	2104      	movs	r1, #4
 801a2bc:	f006 f871 	bl	80203a2 <_ZdlPvj>
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	bd10      	pop	{r4, pc}

0801a2c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a2c4:	b510      	push	{r4, lr}
 801a2c6:	4604      	mov	r4, r0
 801a2c8:	2104      	movs	r1, #4
 801a2ca:	f006 f86a 	bl	80203a2 <_ZdlPvj>
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	bd10      	pop	{r4, pc}

0801a2d2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2d6:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801a2da:	9c06      	ldr	r4, [sp, #24]
 801a2dc:	2800      	cmp	r0, #0
 801a2de:	d06e      	beq.n	801a3be <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a2e0:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801a2e4:	2d00      	cmp	r5, #0
 801a2e6:	dd6a      	ble.n	801a3be <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a2e8:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801a2ec:	f1bc 0f00 	cmp.w	ip, #0
 801a2f0:	dd65      	ble.n	801a3be <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a2f2:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801a2f6:	28ff      	cmp	r0, #255	; 0xff
 801a2f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2fc:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801a300:	fb02 3306 	mla	r3, r2, r6, r3
 801a304:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801a308:	b2e4      	uxtb	r4, r4
 801a30a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a30e:	4419      	add	r1, r3
 801a310:	fb02 f30c 	mul.w	r3, r2, ip
 801a314:	eba2 0205 	sub.w	r2, r2, r5
 801a318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a31c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a320:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a324:	440b      	add	r3, r1
 801a326:	d03e      	beq.n	801a3a6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801a328:	fa1f fc80 	uxth.w	ip, r0
 801a32c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801a330:	fb06 f60c 	mul.w	r6, r6, ip
 801a334:	b280      	uxth	r0, r0
 801a336:	fb07 f70c 	mul.w	r7, r7, ip
 801a33a:	fb04 f40c 	mul.w	r4, r4, ip
 801a33e:	4299      	cmp	r1, r3
 801a340:	d23d      	bcs.n	801a3be <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a342:	eb01 0c05 	add.w	ip, r1, r5
 801a346:	458c      	cmp	ip, r1
 801a348:	f101 0e03 	add.w	lr, r1, #3
 801a34c:	d928      	bls.n	801a3a0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801a34e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801a352:	fb11 f100 	smulbb	r1, r1, r0
 801a356:	4421      	add	r1, r4
 801a358:	b289      	uxth	r1, r1
 801a35a:	f101 0801 	add.w	r8, r1, #1
 801a35e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a362:	1209      	asrs	r1, r1, #8
 801a364:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801a368:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801a36c:	fb11 f100 	smulbb	r1, r1, r0
 801a370:	4439      	add	r1, r7
 801a372:	b289      	uxth	r1, r1
 801a374:	f101 0801 	add.w	r8, r1, #1
 801a378:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a37c:	1209      	asrs	r1, r1, #8
 801a37e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801a382:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801a386:	fb11 f100 	smulbb	r1, r1, r0
 801a38a:	4431      	add	r1, r6
 801a38c:	b289      	uxth	r1, r1
 801a38e:	f101 0801 	add.w	r8, r1, #1
 801a392:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a396:	1209      	asrs	r1, r1, #8
 801a398:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801a39c:	4671      	mov	r1, lr
 801a39e:	e7d2      	b.n	801a346 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801a3a0:	4411      	add	r1, r2
 801a3a2:	e7cc      	b.n	801a33e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801a3a4:	4411      	add	r1, r2
 801a3a6:	4299      	cmp	r1, r3
 801a3a8:	d209      	bcs.n	801a3be <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a3aa:	1948      	adds	r0, r1, r5
 801a3ac:	4281      	cmp	r1, r0
 801a3ae:	d2f9      	bcs.n	801a3a4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801a3b0:	700c      	strb	r4, [r1, #0]
 801a3b2:	3103      	adds	r1, #3
 801a3b4:	f801 7c02 	strb.w	r7, [r1, #-2]
 801a3b8:	f801 6c01 	strb.w	r6, [r1, #-1]
 801a3bc:	e7f6      	b.n	801a3ac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801a3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801a3c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c8:	b093      	sub	sp, #76	; 0x4c
 801a3ca:	4699      	mov	r9, r3
 801a3cc:	4617      	mov	r7, r2
 801a3ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3d2:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801a3d6:	4604      	mov	r4, r0
 801a3d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a3dc:	a80c      	add	r0, sp, #48	; 0x30
 801a3de:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801a3e2:	460d      	mov	r5, r1
 801a3e4:	4649      	mov	r1, r9
 801a3e6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801a3ea:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a3ee:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801a3f2:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801a3f6:	f7f7 fc99 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 801a3fa:	4639      	mov	r1, r7
 801a3fc:	a80c      	add	r0, sp, #48	; 0x30
 801a3fe:	f7f7 fc95 	bl	8011d2c <_ZN8touchgfx4RectaNERKS0_>
 801a402:	4b78      	ldr	r3, [pc, #480]	; (801a5e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a404:	8818      	ldrh	r0, [r3, #0]
 801a406:	4b78      	ldr	r3, [pc, #480]	; (801a5e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801a408:	b202      	sxth	r2, r0
 801a40a:	8819      	ldrh	r1, [r3, #0]
 801a40c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a410:	b20f      	sxth	r7, r1
 801a412:	2b00      	cmp	r3, #0
 801a414:	da07      	bge.n	801a426 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801a416:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801a41a:	4463      	add	r3, ip
 801a41c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a420:	2300      	movs	r3, #0
 801a422:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801a426:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a42a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801a42e:	1ad2      	subs	r2, r2, r3
 801a430:	4594      	cmp	ip, r2
 801a432:	bfc4      	itt	gt
 801a434:	1ac2      	subgt	r2, r0, r3
 801a436:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801a43a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a43e:	2a00      	cmp	r2, #0
 801a440:	da07      	bge.n	801a452 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801a442:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801a446:	4462      	add	r2, ip
 801a448:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801a44c:	2200      	movs	r2, #0
 801a44e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801a452:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a456:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801a45a:	1abf      	subs	r7, r7, r2
 801a45c:	45bc      	cmp	ip, r7
 801a45e:	f8df c190 	ldr.w	ip, [pc, #400]	; 801a5f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801a462:	bfc8      	it	gt
 801a464:	1a8f      	subgt	r7, r1, r2
 801a466:	f89c c000 	ldrb.w	ip, [ip]
 801a46a:	bfc8      	it	gt
 801a46c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801a470:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801a474:	f1bc 0f00 	cmp.w	ip, #0
 801a478:	d176      	bne.n	801a568 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801a47a:	4287      	cmp	r7, r0
 801a47c:	bf14      	ite	ne
 801a47e:	2100      	movne	r1, #0
 801a480:	2101      	moveq	r1, #1
 801a482:	2f00      	cmp	r7, #0
 801a484:	9107      	str	r1, [sp, #28]
 801a486:	dd73      	ble.n	801a570 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a488:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801a48c:	2900      	cmp	r1, #0
 801a48e:	9104      	str	r1, [sp, #16]
 801a490:	dd6e      	ble.n	801a570 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a492:	f8b9 1000 	ldrh.w	r1, [r9]
 801a496:	a80e      	add	r0, sp, #56	; 0x38
 801a498:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801a49c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801a4a0:	1a5b      	subs	r3, r3, r1
 801a4a2:	a910      	add	r1, sp, #64	; 0x40
 801a4a4:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801a4a8:	b21b      	sxth	r3, r3
 801a4aa:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801a4ae:	f8df a144 	ldr.w	sl, [pc, #324]	; 801a5f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a4b2:	9305      	str	r3, [sp, #20]
 801a4b4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801a4b8:	1ad2      	subs	r2, r2, r3
 801a4ba:	b213      	sxth	r3, r2
 801a4bc:	9306      	str	r3, [sp, #24]
 801a4be:	9b05      	ldr	r3, [sp, #20]
 801a4c0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801a4c4:	9b06      	ldr	r3, [sp, #24]
 801a4c6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a4ca:	9b04      	ldr	r3, [sp, #16]
 801a4cc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	9310      	str	r3, [sp, #64]	; 0x40
 801a4d4:	f7fb f814 	bl	8015500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a4d8:	4640      	mov	r0, r8
 801a4da:	f7fa ffe9 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a4de:	a810      	add	r0, sp, #64	; 0x40
 801a4e0:	f7fa ffe6 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a4e4:	4b41      	ldr	r3, [pc, #260]	; (801a5ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801a4e6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801a4ea:	4628      	mov	r0, r5
 801a4ec:	881b      	ldrh	r3, [r3, #0]
 801a4ee:	9308      	str	r3, [sp, #32]
 801a4f0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801a4f4:	b21b      	sxth	r3, r3
 801a4f6:	9303      	str	r3, [sp, #12]
 801a4f8:	682b      	ldr	r3, [r5, #0]
 801a4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4fc:	4798      	blx	r3
 801a4fe:	9a03      	ldr	r2, [sp, #12]
 801a500:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a504:	4681      	mov	r9, r0
 801a506:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801a50a:	fb13 f302 	smulbb	r3, r3, r2
 801a50e:	2203      	movs	r2, #3
 801a510:	f8da 0000 	ldr.w	r0, [sl]
 801a514:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a518:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801a51a:	920b      	str	r2, [sp, #44]	; 0x2c
 801a51c:	441d      	add	r5, r3
 801a51e:	6803      	ldr	r3, [r0, #0]
 801a520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a522:	4798      	blx	r3
 801a524:	9009      	str	r0, [sp, #36]	; 0x24
 801a526:	f8da 0000 	ldr.w	r0, [sl]
 801a52a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a52e:	6803      	ldr	r3, [r0, #0]
 801a530:	910a      	str	r1, [sp, #40]	; 0x28
 801a532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a534:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801a538:	4798      	blx	r3
 801a53a:	f010 0f01 	tst.w	r0, #1
 801a53e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801a542:	d01e      	beq.n	801a582 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801a544:	f8da 0000 	ldr.w	r0, [sl]
 801a548:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801a54c:	6803      	ldr	r3, [r0, #0]
 801a54e:	9200      	str	r2, [sp, #0]
 801a550:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a552:	462b      	mov	r3, r5
 801a554:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a558:	47b0      	blx	r6
 801a55a:	9b05      	ldr	r3, [sp, #20]
 801a55c:	80a7      	strh	r7, [r4, #4]
 801a55e:	8023      	strh	r3, [r4, #0]
 801a560:	9b06      	ldr	r3, [sp, #24]
 801a562:	8063      	strh	r3, [r4, #2]
 801a564:	9b04      	ldr	r3, [sp, #16]
 801a566:	e007      	b.n	801a578 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801a568:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801a56c:	4288      	cmp	r0, r1
 801a56e:	e785      	b.n	801a47c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801a570:	2300      	movs	r3, #0
 801a572:	8023      	strh	r3, [r4, #0]
 801a574:	8063      	strh	r3, [r4, #2]
 801a576:	80a3      	strh	r3, [r4, #4]
 801a578:	4620      	mov	r0, r4
 801a57a:	80e3      	strh	r3, [r4, #6]
 801a57c:	b013      	add	sp, #76	; 0x4c
 801a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a582:	fb09 f606 	mul.w	r6, r9, r6
 801a586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a588:	fb11 6602 	smlabb	r6, r1, r2, r6
 801a58c:	9a07      	ldr	r2, [sp, #28]
 801a58e:	4433      	add	r3, r6
 801a590:	461e      	mov	r6, r3
 801a592:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a596:	b16a      	cbz	r2, 801a5b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a598:	9a08      	ldr	r2, [sp, #32]
 801a59a:	4593      	cmp	fp, r2
 801a59c:	d10a      	bne.n	801a5b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a59e:	f8da 0000 	ldr.w	r0, [sl]
 801a5a2:	fb09 f303 	mul.w	r3, r9, r3
 801a5a6:	4629      	mov	r1, r5
 801a5a8:	6802      	ldr	r2, [r0, #0]
 801a5aa:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a5ae:	4632      	mov	r2, r6
 801a5b0:	47d0      	blx	sl
 801a5b2:	e7d2      	b.n	801a55a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a5b4:	9a03      	ldr	r2, [sp, #12]
 801a5b6:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801a5f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a5ba:	fb02 5803 	mla	r8, r2, r3, r5
 801a5be:	4545      	cmp	r5, r8
 801a5c0:	d2cb      	bcs.n	801a55a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a5c2:	f8db 0000 	ldr.w	r0, [fp]
 801a5c6:	4629      	mov	r1, r5
 801a5c8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801a5cc:	6802      	ldr	r2, [r0, #0]
 801a5ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a5d2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a5d6:	4632      	mov	r2, r6
 801a5d8:	47d0      	blx	sl
 801a5da:	9b03      	ldr	r3, [sp, #12]
 801a5dc:	444e      	add	r6, r9
 801a5de:	441d      	add	r5, r3
 801a5e0:	e7ed      	b.n	801a5be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801a5e2:	bf00      	nop
 801a5e4:	2400c7e8 	.word	0x2400c7e8
 801a5e8:	2400c7ea 	.word	0x2400c7ea
 801a5ec:	2400c7ee 	.word	0x2400c7ee
 801a5f0:	2400c7ec 	.word	0x2400c7ec
 801a5f4:	2400c7f4 	.word	0x2400c7f4

0801a5f8 <_ZN8touchgfx8LCD24bppC1Ev>:
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	490c      	ldr	r1, [pc, #48]	; (801a62c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801a5fc:	6042      	str	r2, [r0, #4]
 801a5fe:	6001      	str	r1, [r0, #0]
 801a600:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a604:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801a608:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a60c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801a610:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801a614:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801a618:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801a61c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801a620:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801a624:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801a628:	4770      	bx	lr
 801a62a:	bf00      	nop
 801a62c:	08023cb4 	.word	0x08023cb4

0801a630 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a634:	b091      	sub	sp, #68	; 0x44
 801a636:	4607      	mov	r7, r0
 801a638:	4688      	mov	r8, r1
 801a63a:	6810      	ldr	r0, [r2, #0]
 801a63c:	6851      	ldr	r1, [r2, #4]
 801a63e:	ac0c      	add	r4, sp, #48	; 0x30
 801a640:	4616      	mov	r6, r2
 801a642:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801a646:	4d64      	ldr	r5, [pc, #400]	; (801a7d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a648:	f8df a190 	ldr.w	sl, [pc, #400]	; 801a7dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801a64c:	c403      	stmia	r4!, {r0, r1}
 801a64e:	6818      	ldr	r0, [r3, #0]
 801a650:	ac0e      	add	r4, sp, #56	; 0x38
 801a652:	6859      	ldr	r1, [r3, #4]
 801a654:	c403      	stmia	r4!, {r0, r1}
 801a656:	a80c      	add	r0, sp, #48	; 0x30
 801a658:	f7fa ff2a 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a65c:	4631      	mov	r1, r6
 801a65e:	a80e      	add	r0, sp, #56	; 0x38
 801a660:	f7fa ff4e 	bl	8015500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a664:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a668:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a66c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a670:	6828      	ldr	r0, [r5, #0]
 801a672:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a676:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801a67a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801a67e:	440f      	add	r7, r1
 801a680:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a684:	440a      	add	r2, r1
 801a686:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a68a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a68e:	4413      	add	r3, r2
 801a690:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a694:	6803      	ldr	r3, [r0, #0]
 801a696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a698:	4798      	blx	r3
 801a69a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a69e:	6828      	ldr	r0, [r5, #0]
 801a6a0:	d01f      	beq.n	801a6e2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801a6a2:	2201      	movs	r2, #1
 801a6a4:	2500      	movs	r5, #0
 801a6a6:	6801      	ldr	r1, [r0, #0]
 801a6a8:	b2a4      	uxth	r4, r4
 801a6aa:	b2b6      	uxth	r6, r6
 801a6ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a6b0:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801a6b4:	250b      	movs	r5, #11
 801a6b6:	9507      	str	r5, [sp, #28]
 801a6b8:	f8ba 5000 	ldrh.w	r5, [sl]
 801a6bc:	f8cd 9010 	str.w	r9, [sp, #16]
 801a6c0:	9602      	str	r6, [sp, #8]
 801a6c2:	9401      	str	r4, [sp, #4]
 801a6c4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801a6c8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a6cc:	9203      	str	r2, [sp, #12]
 801a6ce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a6d2:	9200      	str	r2, [sp, #0]
 801a6d4:	4642      	mov	r2, r8
 801a6d6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801a6d8:	4639      	mov	r1, r7
 801a6da:	47a0      	blx	r4
 801a6dc:	b011      	add	sp, #68	; 0x44
 801a6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6e2:	6803      	ldr	r3, [r0, #0]
 801a6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6e6:	4798      	blx	r3
 801a6e8:	f8ba 5000 	ldrh.w	r5, [sl]
 801a6ec:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a6f0:	f04f 0e04 	mov.w	lr, #4
 801a6f4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a6f8:	436e      	muls	r6, r5
 801a6fa:	fb05 2303 	mla	r3, r5, r3, r2
 801a6fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a702:	1b2d      	subs	r5, r5, r4
 801a704:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a70c:	4418      	add	r0, r3
 801a70e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a712:	1982      	adds	r2, r0, r6
 801a714:	1b1b      	subs	r3, r3, r4
 801a716:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a71a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a71c:	4290      	cmp	r0, r2
 801a71e:	d254      	bcs.n	801a7ca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a720:	eb00 0a04 	add.w	sl, r0, r4
 801a724:	4550      	cmp	r0, sl
 801a726:	d24c      	bcs.n	801a7c2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801a728:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a72c:	fb1e e101 	smlabb	r1, lr, r1, lr
 801a730:	eb08 0c01 	add.w	ip, r8, r1
 801a734:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801a738:	b173      	cbz	r3, 801a758 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a73a:	2bff      	cmp	r3, #255	; 0xff
 801a73c:	f818 b001 	ldrb.w	fp, [r8, r1]
 801a740:	d10c      	bne.n	801a75c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a742:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a746:	d109      	bne.n	801a75c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a748:	f880 b000 	strb.w	fp, [r0]
 801a74c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801a750:	7043      	strb	r3, [r0, #1]
 801a752:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801a756:	7083      	strb	r3, [r0, #2]
 801a758:	3003      	adds	r0, #3
 801a75a:	e7e3      	b.n	801a724 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801a75c:	fb09 f103 	mul.w	r1, r9, r3
 801a760:	1c4b      	adds	r3, r1, #1
 801a762:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a766:	7801      	ldrb	r1, [r0, #0]
 801a768:	121b      	asrs	r3, r3, #8
 801a76a:	b29e      	uxth	r6, r3
 801a76c:	43db      	mvns	r3, r3
 801a76e:	fb1b fb06 	smulbb	fp, fp, r6
 801a772:	b2db      	uxtb	r3, r3
 801a774:	fb01 b103 	mla	r1, r1, r3, fp
 801a778:	b289      	uxth	r1, r1
 801a77a:	f101 0b01 	add.w	fp, r1, #1
 801a77e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a782:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a786:	fb1b fb03 	smulbb	fp, fp, r3
 801a78a:	1209      	asrs	r1, r1, #8
 801a78c:	7001      	strb	r1, [r0, #0]
 801a78e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a792:	fb01 b106 	mla	r1, r1, r6, fp
 801a796:	b289      	uxth	r1, r1
 801a798:	f101 0b01 	add.w	fp, r1, #1
 801a79c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a7a0:	1209      	asrs	r1, r1, #8
 801a7a2:	7041      	strb	r1, [r0, #1]
 801a7a4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801a7a8:	f890 c002 	ldrb.w	ip, [r0, #2]
 801a7ac:	fb1c f303 	smulbb	r3, ip, r3
 801a7b0:	fb01 3606 	mla	r6, r1, r6, r3
 801a7b4:	b2b6      	uxth	r6, r6
 801a7b6:	1c73      	adds	r3, r6, #1
 801a7b8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801a7bc:	1236      	asrs	r6, r6, #8
 801a7be:	7086      	strb	r6, [r0, #2]
 801a7c0:	e7ca      	b.n	801a758 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a7c4:	4428      	add	r0, r5
 801a7c6:	441f      	add	r7, r3
 801a7c8:	e7a8      	b.n	801a71c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801a7ca:	4b03      	ldr	r3, [pc, #12]	; (801a7d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a7cc:	6818      	ldr	r0, [r3, #0]
 801a7ce:	6803      	ldr	r3, [r0, #0]
 801a7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7d2:	4798      	blx	r3
 801a7d4:	e782      	b.n	801a6dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801a7d6:	bf00      	nop
 801a7d8:	2400c7f4 	.word	0x2400c7f4
 801a7dc:	2400c7ee 	.word	0x2400c7ee

0801a7e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e4:	b091      	sub	sp, #68	; 0x44
 801a7e6:	4680      	mov	r8, r0
 801a7e8:	460e      	mov	r6, r1
 801a7ea:	6810      	ldr	r0, [r2, #0]
 801a7ec:	6851      	ldr	r1, [r2, #4]
 801a7ee:	ad0c      	add	r5, sp, #48	; 0x30
 801a7f0:	4614      	mov	r4, r2
 801a7f2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801a7f6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801a990 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801a7fa:	f8df a198 	ldr.w	sl, [pc, #408]	; 801a994 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801a7fe:	c503      	stmia	r5!, {r0, r1}
 801a800:	6818      	ldr	r0, [r3, #0]
 801a802:	ad0e      	add	r5, sp, #56	; 0x38
 801a804:	6859      	ldr	r1, [r3, #4]
 801a806:	c503      	stmia	r5!, {r0, r1}
 801a808:	a80c      	add	r0, sp, #48	; 0x30
 801a80a:	f7fa fe51 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a80e:	4621      	mov	r1, r4
 801a810:	a80e      	add	r0, sp, #56	; 0x38
 801a812:	f7fa fe75 	bl	8015500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a816:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a81a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a81e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a822:	f8d9 0000 	ldr.w	r0, [r9]
 801a826:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a82a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801a82e:	eb08 0401 	add.w	r4, r8, r1
 801a832:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a836:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801a83a:	440a      	add	r2, r1
 801a83c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a840:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a844:	4413      	add	r3, r2
 801a846:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a84a:	6803      	ldr	r3, [r0, #0]
 801a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a84e:	4798      	blx	r3
 801a850:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a854:	f8d9 0000 	ldr.w	r0, [r9]
 801a858:	d022      	beq.n	801a8a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801a85a:	2200      	movs	r2, #0
 801a85c:	f04f 0c01 	mov.w	ip, #1
 801a860:	6801      	ldr	r1, [r0, #0]
 801a862:	b2ad      	uxth	r5, r5
 801a864:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a868:	e9cd c208 	strd	ip, r2, [sp, #32]
 801a86c:	f04f 0c0b 	mov.w	ip, #11
 801a870:	f8cd c01c 	str.w	ip, [sp, #28]
 801a874:	f8ba c000 	ldrh.w	ip, [sl]
 801a878:	9704      	str	r7, [sp, #16]
 801a87a:	9502      	str	r5, [sp, #8]
 801a87c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801a880:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a884:	9203      	str	r2, [sp, #12]
 801a886:	fa1f f288 	uxth.w	r2, r8
 801a88a:	9201      	str	r2, [sp, #4]
 801a88c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a890:	9200      	str	r2, [sp, #0]
 801a892:	4632      	mov	r2, r6
 801a894:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801a896:	4621      	mov	r1, r4
 801a898:	47a8      	blx	r5
 801a89a:	b011      	add	sp, #68	; 0x44
 801a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8a0:	6803      	ldr	r3, [r0, #0]
 801a8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8a4:	4798      	blx	r3
 801a8a6:	f8ba 2000 	ldrh.w	r2, [sl]
 801a8aa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a8ae:	f04f 0e03 	mov.w	lr, #3
 801a8b2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801a8b6:	4355      	muls	r5, r2
 801a8b8:	fa1f fc87 	uxth.w	ip, r7
 801a8bc:	fb02 1303 	mla	r3, r2, r3, r1
 801a8c0:	eba2 0208 	sub.w	r2, r2, r8
 801a8c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a8c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a8cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a8d0:	4418      	add	r0, r3
 801a8d2:	920b      	str	r2, [sp, #44]	; 0x2c
 801a8d4:	1943      	adds	r3, r0, r5
 801a8d6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a8da:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801a8de:	eba2 0208 	sub.w	r2, r2, r8
 801a8e2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a8e6:	b2ad      	uxth	r5, r5
 801a8e8:	4298      	cmp	r0, r3
 801a8ea:	d24a      	bcs.n	801a982 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801a8ec:	eb00 0908 	add.w	r9, r0, r8
 801a8f0:	4621      	mov	r1, r4
 801a8f2:	4548      	cmp	r0, r9
 801a8f4:	460c      	mov	r4, r1
 801a8f6:	d240      	bcs.n	801a97a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a8f8:	f04f 0a04 	mov.w	sl, #4
 801a8fc:	7824      	ldrb	r4, [r4, #0]
 801a8fe:	2fff      	cmp	r7, #255	; 0xff
 801a900:	f101 0101 	add.w	r1, r1, #1
 801a904:	fb1e a404 	smlabb	r4, lr, r4, sl
 801a908:	eb06 0a04 	add.w	sl, r6, r4
 801a90c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801a910:	d02b      	beq.n	801a96a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801a912:	7804      	ldrb	r4, [r0, #0]
 801a914:	fb14 f405 	smulbb	r4, r4, r5
 801a918:	fb0b 440c 	mla	r4, fp, ip, r4
 801a91c:	b2a4      	uxth	r4, r4
 801a91e:	f104 0b01 	add.w	fp, r4, #1
 801a922:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801a926:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a92a:	fb1b fb05 	smulbb	fp, fp, r5
 801a92e:	1224      	asrs	r4, r4, #8
 801a930:	7004      	strb	r4, [r0, #0]
 801a932:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801a936:	fb04 b40c 	mla	r4, r4, ip, fp
 801a93a:	b2a4      	uxth	r4, r4
 801a93c:	f104 0b01 	add.w	fp, r4, #1
 801a940:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801a944:	1224      	asrs	r4, r4, #8
 801a946:	7044      	strb	r4, [r0, #1]
 801a948:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801a94c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801a950:	fb1a fa05 	smulbb	sl, sl, r5
 801a954:	fb04 a40c 	mla	r4, r4, ip, sl
 801a958:	b2a4      	uxth	r4, r4
 801a95a:	f104 0a01 	add.w	sl, r4, #1
 801a95e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a962:	1224      	asrs	r4, r4, #8
 801a964:	7084      	strb	r4, [r0, #2]
 801a966:	3003      	adds	r0, #3
 801a968:	e7c3      	b.n	801a8f2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801a96a:	f880 b000 	strb.w	fp, [r0]
 801a96e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801a972:	7044      	strb	r4, [r0, #1]
 801a974:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801a978:	e7f4      	b.n	801a964 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801a97a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a97c:	4420      	add	r0, r4
 801a97e:	188c      	adds	r4, r1, r2
 801a980:	e7b2      	b.n	801a8e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801a982:	4b03      	ldr	r3, [pc, #12]	; (801a990 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a984:	6818      	ldr	r0, [r3, #0]
 801a986:	6803      	ldr	r3, [r0, #0]
 801a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a98a:	4798      	blx	r3
 801a98c:	e785      	b.n	801a89a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801a98e:	bf00      	nop
 801a990:	2400c7f4 	.word	0x2400c7f4
 801a994:	2400c7ee 	.word	0x2400c7ee

0801a998 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a998:	b430      	push	{r4, r5}
 801a99a:	780d      	ldrb	r5, [r1, #0]
 801a99c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801a9a0:	b11d      	cbz	r5, 801a9aa <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801a9a2:	2d01      	cmp	r5, #1
 801a9a4:	d005      	beq.n	801a9b2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801a9a6:	bc30      	pop	{r4, r5}
 801a9a8:	4770      	bx	lr
 801a9aa:	9402      	str	r4, [sp, #8]
 801a9ac:	bc30      	pop	{r4, r5}
 801a9ae:	f7ff be3f 	b.w	801a630 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a9b2:	9402      	str	r4, [sp, #8]
 801a9b4:	bc30      	pop	{r4, r5}
 801a9b6:	f7ff bf13 	b.w	801a7e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801a9bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801a9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9c0:	4605      	mov	r5, r0
 801a9c2:	b08f      	sub	sp, #60	; 0x3c
 801a9c4:	460c      	mov	r4, r1
 801a9c6:	461f      	mov	r7, r3
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d052      	beq.n	801aa72 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801a9cc:	6808      	ldr	r0, [r1, #0]
 801a9ce:	ab0a      	add	r3, sp, #40	; 0x28
 801a9d0:	6849      	ldr	r1, [r1, #4]
 801a9d2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801ab9c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801a9d6:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801aba0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801a9da:	c303      	stmia	r3!, {r0, r1}
 801a9dc:	6810      	ldr	r0, [r2, #0]
 801a9de:	ab0c      	add	r3, sp, #48	; 0x30
 801a9e0:	6851      	ldr	r1, [r2, #4]
 801a9e2:	c303      	stmia	r3!, {r0, r1}
 801a9e4:	a80a      	add	r0, sp, #40	; 0x28
 801a9e6:	f7fa fd63 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a9ea:	4621      	mov	r1, r4
 801a9ec:	a80c      	add	r0, sp, #48	; 0x30
 801a9ee:	f7fa fd87 	bl	8015500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a9f2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801a9f6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a9fa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a9fe:	f8d8 0000 	ldr.w	r0, [r8]
 801aa02:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aa06:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801aa0a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801aa0e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801aa12:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801aa16:	440a      	add	r2, r1
 801aa18:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801aa1c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801aa20:	4413      	add	r3, r2
 801aa22:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801aa26:	6803      	ldr	r3, [r0, #0]
 801aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa2a:	4798      	blx	r3
 801aa2c:	2fff      	cmp	r7, #255	; 0xff
 801aa2e:	d023      	beq.n	801aa78 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801aa30:	f010 0f04 	tst.w	r0, #4
 801aa34:	f8d8 0000 	ldr.w	r0, [r8]
 801aa38:	d021      	beq.n	801aa7e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801aa3a:	2100      	movs	r1, #0
 801aa3c:	f04f 0e01 	mov.w	lr, #1
 801aa40:	f8d0 c000 	ldr.w	ip, [r0]
 801aa44:	b2a4      	uxth	r4, r4
 801aa46:	9106      	str	r1, [sp, #24]
 801aa48:	b2b6      	uxth	r6, r6
 801aa4a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801aa4e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801aa52:	e9cd e107 	strd	lr, r1, [sp, #28]
 801aa56:	f8b9 e000 	ldrh.w	lr, [r9]
 801aa5a:	9703      	str	r7, [sp, #12]
 801aa5c:	9401      	str	r4, [sp, #4]
 801aa5e:	9600      	str	r6, [sp, #0]
 801aa60:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801aa64:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801aa68:	9102      	str	r1, [sp, #8]
 801aa6a:	4629      	mov	r1, r5
 801aa6c:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801aa70:	47a0      	blx	r4
 801aa72:	b00f      	add	sp, #60	; 0x3c
 801aa74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa78:	f010 0f01 	tst.w	r0, #1
 801aa7c:	e7da      	b.n	801aa34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801aa7e:	6803      	ldr	r3, [r0, #0]
 801aa80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa82:	4798      	blx	r3
 801aa84:	f8b9 1000 	ldrh.w	r1, [r9]
 801aa88:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801aa8c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801aa90:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801aa94:	434c      	muls	r4, r1
 801aa96:	2fff      	cmp	r7, #255	; 0xff
 801aa98:	fb01 2303 	mla	r3, r1, r3, r2
 801aa9c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aaa0:	eba1 0106 	sub.w	r1, r1, r6
 801aaa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aaa8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aaac:	4418      	add	r0, r3
 801aaae:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801aab2:	eba3 0606 	sub.w	r6, r3, r6
 801aab6:	4404      	add	r4, r0
 801aab8:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801aabc:	d04a      	beq.n	801ab54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801aabe:	43fa      	mvns	r2, r7
 801aac0:	b2bb      	uxth	r3, r7
 801aac2:	b2d7      	uxtb	r7, r2
 801aac4:	42a0      	cmp	r0, r4
 801aac6:	d263      	bcs.n	801ab90 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801aac8:	eb00 0e0c 	add.w	lr, r0, ip
 801aacc:	4586      	cmp	lr, r0
 801aace:	f100 0803 	add.w	r8, r0, #3
 801aad2:	d93a      	bls.n	801ab4a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801aad4:	f835 2b02 	ldrh.w	r2, [r5], #2
 801aad8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801aadc:	00d0      	lsls	r0, r2, #3
 801aade:	fb19 f907 	smulbb	r9, r9, r7
 801aae2:	b2c0      	uxtb	r0, r0
 801aae4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801aae8:	fb00 9003 	mla	r0, r0, r3, r9
 801aaec:	b280      	uxth	r0, r0
 801aaee:	f100 0901 	add.w	r9, r0, #1
 801aaf2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801aaf6:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801aafa:	fb19 f907 	smulbb	r9, r9, r7
 801aafe:	1200      	asrs	r0, r0, #8
 801ab00:	f808 0c03 	strb.w	r0, [r8, #-3]
 801ab04:	10d0      	asrs	r0, r2, #3
 801ab06:	1212      	asrs	r2, r2, #8
 801ab08:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ab0c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ab10:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801ab14:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ab18:	fb00 9003 	mla	r0, r0, r3, r9
 801ab1c:	b280      	uxth	r0, r0
 801ab1e:	f100 0901 	add.w	r9, r0, #1
 801ab22:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ab26:	1200      	asrs	r0, r0, #8
 801ab28:	f808 0c02 	strb.w	r0, [r8, #-2]
 801ab2c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801ab30:	fb10 f007 	smulbb	r0, r0, r7
 801ab34:	fb02 0203 	mla	r2, r2, r3, r0
 801ab38:	b292      	uxth	r2, r2
 801ab3a:	1c50      	adds	r0, r2, #1
 801ab3c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ab40:	4640      	mov	r0, r8
 801ab42:	1212      	asrs	r2, r2, #8
 801ab44:	f808 2c01 	strb.w	r2, [r8, #-1]
 801ab48:	e7c0      	b.n	801aacc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801ab4a:	4408      	add	r0, r1
 801ab4c:	4435      	add	r5, r6
 801ab4e:	e7b9      	b.n	801aac4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801ab50:	4408      	add	r0, r1
 801ab52:	4435      	add	r5, r6
 801ab54:	42a0      	cmp	r0, r4
 801ab56:	d21b      	bcs.n	801ab90 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801ab58:	eb00 070c 	add.w	r7, r0, ip
 801ab5c:	42b8      	cmp	r0, r7
 801ab5e:	d2f7      	bcs.n	801ab50 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801ab60:	f835 3b02 	ldrh.w	r3, [r5], #2
 801ab64:	3003      	adds	r0, #3
 801ab66:	00da      	lsls	r2, r3, #3
 801ab68:	b2d2      	uxtb	r2, r2
 801ab6a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ab6e:	f800 2c03 	strb.w	r2, [r0, #-3]
 801ab72:	10da      	asrs	r2, r3, #3
 801ab74:	121b      	asrs	r3, r3, #8
 801ab76:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ab7a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ab7e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801ab82:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801ab86:	f800 2c02 	strb.w	r2, [r0, #-2]
 801ab8a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801ab8e:	e7e5      	b.n	801ab5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801ab90:	4b02      	ldr	r3, [pc, #8]	; (801ab9c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801ab92:	6818      	ldr	r0, [r3, #0]
 801ab94:	6803      	ldr	r3, [r0, #0]
 801ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab98:	4798      	blx	r3
 801ab9a:	e76a      	b.n	801aa72 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801ab9c:	2400c7f4 	.word	0x2400c7f4
 801aba0:	2400c7ee 	.word	0x2400c7ee

0801aba4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801aba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aba8:	b08a      	sub	sp, #40	; 0x28
 801abaa:	460d      	mov	r5, r1
 801abac:	4604      	mov	r4, r0
 801abae:	461e      	mov	r6, r3
 801abb0:	6808      	ldr	r0, [r1, #0]
 801abb2:	ab06      	add	r3, sp, #24
 801abb4:	6849      	ldr	r1, [r1, #4]
 801abb6:	4f5d      	ldr	r7, [pc, #372]	; (801ad2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801abb8:	c303      	stmia	r3!, {r0, r1}
 801abba:	6810      	ldr	r0, [r2, #0]
 801abbc:	ab08      	add	r3, sp, #32
 801abbe:	6851      	ldr	r1, [r2, #4]
 801abc0:	c303      	stmia	r3!, {r0, r1}
 801abc2:	a806      	add	r0, sp, #24
 801abc4:	f7fa fc74 	bl	80154b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801abc8:	4629      	mov	r1, r5
 801abca:	a808      	add	r0, sp, #32
 801abcc:	f7fa fc98 	bl	8015500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801abd0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801abd4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801abd8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801abdc:	6838      	ldr	r0, [r7, #0]
 801abde:	fb11 2103 	smlabb	r1, r1, r3, r2
 801abe2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801abe6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801abea:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801abee:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801abf2:	440a      	add	r2, r1
 801abf4:	f8ad 2020 	strh.w	r2, [sp, #32]
 801abf8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801abfc:	4413      	add	r3, r2
 801abfe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ac02:	6803      	ldr	r3, [r0, #0]
 801ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac06:	4798      	blx	r3
 801ac08:	2eff      	cmp	r6, #255	; 0xff
 801ac0a:	d119      	bne.n	801ac40 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801ac0c:	f010 0f20 	tst.w	r0, #32
 801ac10:	6838      	ldr	r0, [r7, #0]
 801ac12:	d018      	beq.n	801ac46 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801ac14:	b2ad      	uxth	r5, r5
 801ac16:	2700      	movs	r7, #0
 801ac18:	6801      	ldr	r1, [r0, #0]
 801ac1a:	9501      	str	r5, [sp, #4]
 801ac1c:	fa1f f588 	uxth.w	r5, r8
 801ac20:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ac24:	9500      	str	r5, [sp, #0]
 801ac26:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ac2a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801ac2e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ac32:	9602      	str	r6, [sp, #8]
 801ac34:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801ac36:	4621      	mov	r1, r4
 801ac38:	47a8      	blx	r5
 801ac3a:	b00a      	add	sp, #40	; 0x28
 801ac3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac40:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ac44:	e7e4      	b.n	801ac10 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801ac46:	6803      	ldr	r3, [r0, #0]
 801ac48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac4a:	4798      	blx	r3
 801ac4c:	4b38      	ldr	r3, [pc, #224]	; (801ad30 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801ac4e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ac52:	f8b3 c000 	ldrh.w	ip, [r3]
 801ac56:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ac5a:	fb0c f505 	mul.w	r5, ip, r5
 801ac5e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801ac62:	fb0c 2303 	mla	r3, ip, r3, r2
 801ac66:	ebac 0c08 	sub.w	ip, ip, r8
 801ac6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac6e:	ebae 0e08 	sub.w	lr, lr, r8
 801ac72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac76:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ac7a:	4418      	add	r0, r3
 801ac7c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801ac80:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801ac84:	4405      	add	r5, r0
 801ac86:	42a8      	cmp	r0, r5
 801ac88:	d24a      	bcs.n	801ad20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801ac8a:	eb00 0803 	add.w	r8, r0, r3
 801ac8e:	4540      	cmp	r0, r8
 801ac90:	d243      	bcs.n	801ad1a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801ac92:	78e2      	ldrb	r2, [r4, #3]
 801ac94:	b15a      	cbz	r2, 801acae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801ac96:	2aff      	cmp	r2, #255	; 0xff
 801ac98:	f894 9000 	ldrb.w	r9, [r4]
 801ac9c:	d10a      	bne.n	801acb4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801ac9e:	2eff      	cmp	r6, #255	; 0xff
 801aca0:	d108      	bne.n	801acb4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801aca2:	f880 9000 	strb.w	r9, [r0]
 801aca6:	7862      	ldrb	r2, [r4, #1]
 801aca8:	7042      	strb	r2, [r0, #1]
 801acaa:	78a2      	ldrb	r2, [r4, #2]
 801acac:	7082      	strb	r2, [r0, #2]
 801acae:	3003      	adds	r0, #3
 801acb0:	3404      	adds	r4, #4
 801acb2:	e7ec      	b.n	801ac8e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801acb4:	4372      	muls	r2, r6
 801acb6:	1c51      	adds	r1, r2, #1
 801acb8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801acbc:	1209      	asrs	r1, r1, #8
 801acbe:	fa1f fa81 	uxth.w	sl, r1
 801acc2:	43c9      	mvns	r1, r1
 801acc4:	fb19 f90a 	smulbb	r9, r9, sl
 801acc8:	b2ca      	uxtb	r2, r1
 801acca:	7801      	ldrb	r1, [r0, #0]
 801accc:	fb01 9902 	mla	r9, r1, r2, r9
 801acd0:	fa1f f989 	uxth.w	r9, r9
 801acd4:	f109 0101 	add.w	r1, r9, #1
 801acd8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801acdc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ace0:	f880 9000 	strb.w	r9, [r0]
 801ace4:	f890 9001 	ldrb.w	r9, [r0, #1]
 801ace8:	7861      	ldrb	r1, [r4, #1]
 801acea:	fb19 f902 	smulbb	r9, r9, r2
 801acee:	fb01 910a 	mla	r1, r1, sl, r9
 801acf2:	b289      	uxth	r1, r1
 801acf4:	f101 0901 	add.w	r9, r1, #1
 801acf8:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801acfc:	1209      	asrs	r1, r1, #8
 801acfe:	7041      	strb	r1, [r0, #1]
 801ad00:	7881      	ldrb	r1, [r0, #2]
 801ad02:	f894 9002 	ldrb.w	r9, [r4, #2]
 801ad06:	fb11 f202 	smulbb	r2, r1, r2
 801ad0a:	fb09 220a 	mla	r2, r9, sl, r2
 801ad0e:	b292      	uxth	r2, r2
 801ad10:	1c51      	adds	r1, r2, #1
 801ad12:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ad16:	1212      	asrs	r2, r2, #8
 801ad18:	e7c8      	b.n	801acac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801ad1a:	4460      	add	r0, ip
 801ad1c:	4474      	add	r4, lr
 801ad1e:	e7b2      	b.n	801ac86 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801ad20:	6838      	ldr	r0, [r7, #0]
 801ad22:	6803      	ldr	r3, [r0, #0]
 801ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad26:	4798      	blx	r3
 801ad28:	e787      	b.n	801ac3a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801ad2a:	bf00      	nop
 801ad2c:	2400c7f4 	.word	0x2400c7f4
 801ad30:	2400c7ee 	.word	0x2400c7ee

0801ad34 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ad34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad38:	b085      	sub	sp, #20
 801ad3a:	4606      	mov	r6, r0
 801ad3c:	460c      	mov	r4, r1
 801ad3e:	4691      	mov	r9, r2
 801ad40:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801ad44:	4698      	mov	r8, r3
 801ad46:	b31d      	cbz	r5, 801ad90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ad48:	4608      	mov	r0, r1
 801ad4a:	f7fd fa4f 	bl	80181ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ad4e:	4607      	mov	r7, r0
 801ad50:	4620      	mov	r0, r4
 801ad52:	f7fd fa7f 	bl	8018254 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ad56:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801ad60:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ad64:	f8ad 700c 	strh.w	r7, [sp, #12]
 801ad68:	f7fd fb78 	bl	801845c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ad6c:	280b      	cmp	r0, #11
 801ad6e:	d80f      	bhi.n	801ad90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ad70:	e8df f000 	tbb	[pc, r0]
 801ad74:	0e062920 	.word	0x0e062920
 801ad78:	0e0e0e0e 	.word	0x0e0e0e0e
 801ad7c:	110e0e0e 	.word	0x110e0e0e
 801ad80:	4620      	mov	r0, r4
 801ad82:	f7fd fae7 	bl	8018354 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ad86:	462b      	mov	r3, r5
 801ad88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ad8a:	a902      	add	r1, sp, #8
 801ad8c:	f7ff ff0a 	bl	801aba4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ad90:	b005      	add	sp, #20
 801ad92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ad96:	4620      	mov	r0, r4
 801ad98:	f7fd fadc 	bl	8018354 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ad9c:	4606      	mov	r6, r0
 801ad9e:	4620      	mov	r0, r4
 801ada0:	f7fd fb08 	bl	80183b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ada4:	9500      	str	r5, [sp, #0]
 801ada6:	4601      	mov	r1, r0
 801ada8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801adaa:	aa02      	add	r2, sp, #8
 801adac:	4630      	mov	r0, r6
 801adae:	f7ff fdf3 	bl	801a998 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801adb2:	e7ed      	b.n	801ad90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801adb4:	4620      	mov	r0, r4
 801adb6:	f7fd facd 	bl	8018354 <_ZNK8touchgfx6Bitmap7getDataEv>
 801adba:	462b      	mov	r3, r5
 801adbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adbe:	a902      	add	r1, sp, #8
 801adc0:	f7ff fdfc 	bl	801a9bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801adc4:	e7e4      	b.n	801ad90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801adc6:	6833      	ldr	r3, [r6, #0]
 801adc8:	4620      	mov	r0, r4
 801adca:	68df      	ldr	r7, [r3, #12]
 801adcc:	f7fd fac2 	bl	8018354 <_ZNK8touchgfx6Bitmap7getDataEv>
 801add0:	2300      	movs	r3, #0
 801add2:	4601      	mov	r1, r0
 801add4:	aa02      	add	r2, sp, #8
 801add6:	4630      	mov	r0, r6
 801add8:	e9cd 5300 	strd	r5, r3, [sp]
 801addc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801adde:	47b8      	blx	r7
 801ade0:	e7d6      	b.n	801ad90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801ade2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ade2:	b4f0      	push	{r4, r5, r6, r7}
 801ade4:	4616      	mov	r6, r2
 801ade6:	461c      	mov	r4, r3
 801ade8:	460d      	mov	r5, r1
 801adea:	9a04      	ldr	r2, [sp, #16]
 801adec:	2e01      	cmp	r6, #1
 801adee:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801adf2:	d00e      	beq.n	801ae12 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801adf4:	d303      	bcc.n	801adfe <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801adf6:	2e02      	cmp	r6, #2
 801adf8:	d006      	beq.n	801ae08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801adfa:	bcf0      	pop	{r4, r5, r6, r7}
 801adfc:	4770      	bx	lr
 801adfe:	4621      	mov	r1, r4
 801ae00:	4628      	mov	r0, r5
 801ae02:	bcf0      	pop	{r4, r5, r6, r7}
 801ae04:	f7ff bdda 	b.w	801a9bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801ae08:	4621      	mov	r1, r4
 801ae0a:	4628      	mov	r0, r5
 801ae0c:	bcf0      	pop	{r4, r5, r6, r7}
 801ae0e:	f7ff bec9 	b.w	801aba4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ae12:	6805      	ldr	r5, [r0, #0]
 801ae14:	2600      	movs	r6, #0
 801ae16:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801ae1a:	68ed      	ldr	r5, [r5, #12]
 801ae1c:	4613      	mov	r3, r2
 801ae1e:	4622      	mov	r2, r4
 801ae20:	46ac      	mov	ip, r5
 801ae22:	bcf0      	pop	{r4, r5, r6, r7}
 801ae24:	4760      	bx	ip
	...

0801ae28 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801ae28:	b160      	cbz	r0, 801ae44 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801ae2a:	2903      	cmp	r1, #3
 801ae2c:	d818      	bhi.n	801ae60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801ae2e:	e8df f001 	tbb	[pc, r1]
 801ae32:	1902      	.short	0x1902
 801ae34:	1b06      	.short	0x1b06
 801ae36:	4b0e      	ldr	r3, [pc, #56]	; (801ae70 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801ae38:	8818      	ldrh	r0, [r3, #0]
 801ae3a:	4240      	negs	r0, r0
 801ae3c:	4770      	bx	lr
 801ae3e:	4b0c      	ldr	r3, [pc, #48]	; (801ae70 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801ae40:	8818      	ldrh	r0, [r3, #0]
 801ae42:	4770      	bx	lr
 801ae44:	2903      	cmp	r1, #3
 801ae46:	d80b      	bhi.n	801ae60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801ae48:	a301      	add	r3, pc, #4	; (adr r3, 801ae50 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801ae4a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ae4e:	bf00      	nop
 801ae50:	0801ae65 	.word	0x0801ae65
 801ae54:	0801ae3f 	.word	0x0801ae3f
 801ae58:	0801ae69 	.word	0x0801ae69
 801ae5c:	0801ae37 	.word	0x0801ae37
 801ae60:	2000      	movs	r0, #0
 801ae62:	4770      	bx	lr
 801ae64:	2001      	movs	r0, #1
 801ae66:	4770      	bx	lr
 801ae68:	f04f 30ff 	mov.w	r0, #4294967295
 801ae6c:	4770      	bx	lr
 801ae6e:	bf00      	nop
 801ae70:	2400c7ee 	.word	0x2400c7ee

0801ae74 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801ae74:	b160      	cbz	r0, 801ae90 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801ae76:	2903      	cmp	r1, #3
 801ae78:	d818      	bhi.n	801aeac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ae7a:	e8df f001 	tbb	[pc, r1]
 801ae7e:	0219      	.short	0x0219
 801ae80:	051b      	.short	0x051b
 801ae82:	4b0e      	ldr	r3, [pc, #56]	; (801aebc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ae84:	8818      	ldrh	r0, [r3, #0]
 801ae86:	4770      	bx	lr
 801ae88:	4b0c      	ldr	r3, [pc, #48]	; (801aebc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ae8a:	8818      	ldrh	r0, [r3, #0]
 801ae8c:	4240      	negs	r0, r0
 801ae8e:	4770      	bx	lr
 801ae90:	2903      	cmp	r1, #3
 801ae92:	d80b      	bhi.n	801aeac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ae94:	a301      	add	r3, pc, #4	; (adr r3, 801ae9c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801ae96:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ae9a:	bf00      	nop
 801ae9c:	0801ae83 	.word	0x0801ae83
 801aea0:	0801aeb5 	.word	0x0801aeb5
 801aea4:	0801ae89 	.word	0x0801ae89
 801aea8:	0801aeb1 	.word	0x0801aeb1
 801aeac:	2000      	movs	r0, #0
 801aeae:	4770      	bx	lr
 801aeb0:	2001      	movs	r0, #1
 801aeb2:	4770      	bx	lr
 801aeb4:	f04f 30ff 	mov.w	r0, #4294967295
 801aeb8:	4770      	bx	lr
 801aeba:	bf00      	nop
 801aebc:	2400c7ee 	.word	0x2400c7ee

0801aec0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec4:	b097      	sub	sp, #92	; 0x5c
 801aec6:	910b      	str	r1, [sp, #44]	; 0x2c
 801aec8:	a912      	add	r1, sp, #72	; 0x48
 801aeca:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801aece:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801aed2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801aed6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801aeda:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801aede:	e881 000c 	stmia.w	r1, {r2, r3}
 801aee2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801aee6:	930a      	str	r3, [sp, #40]	; 0x28
 801aee8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801aeec:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801aef0:	9311      	str	r3, [sp, #68]	; 0x44
 801aef2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801aef6:	798d      	ldrb	r5, [r1, #6]
 801aef8:	930c      	str	r3, [sp, #48]	; 0x30
 801aefa:	7b4b      	ldrb	r3, [r1, #13]
 801aefc:	0158      	lsls	r0, r3, #5
 801aefe:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801af02:	4328      	orrs	r0, r5
 801af04:	9009      	str	r0, [sp, #36]	; 0x24
 801af06:	f000 817c 	beq.w	801b202 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801af0a:	011b      	lsls	r3, r3, #4
 801af0c:	79c8      	ldrb	r0, [r1, #7]
 801af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af12:	4303      	orrs	r3, r0
 801af14:	930e      	str	r3, [sp, #56]	; 0x38
 801af16:	f000 8174 	beq.w	801b202 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801af1a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801af1e:	b29b      	uxth	r3, r3
 801af20:	2f00      	cmp	r7, #0
 801af22:	f000 8116 	beq.w	801b152 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801af26:	1aff      	subs	r7, r7, r3
 801af28:	b2bf      	uxth	r7, r7
 801af2a:	043b      	lsls	r3, r7, #16
 801af2c:	d502      	bpl.n	801af34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801af2e:	1bf6      	subs	r6, r6, r7
 801af30:	2700      	movs	r7, #0
 801af32:	b236      	sxth	r6, r6
 801af34:	f9b2 1000 	ldrsh.w	r1, [r2]
 801af38:	a812      	add	r0, sp, #72	; 0x48
 801af3a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801af3e:	428e      	cmp	r6, r1
 801af40:	b28b      	uxth	r3, r1
 801af42:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801af46:	bfbf      	itttt	lt
 801af48:	18ff      	addlt	r7, r7, r3
 801af4a:	1bbe      	sublt	r6, r7, r6
 801af4c:	b2b7      	uxthlt	r7, r6
 801af4e:	460e      	movlt	r6, r1
 801af50:	8891      	ldrh	r1, [r2, #4]
 801af52:	440b      	add	r3, r1
 801af54:	4631      	mov	r1, r6
 801af56:	b21b      	sxth	r3, r3
 801af58:	9310      	str	r3, [sp, #64]	; 0x40
 801af5a:	88d3      	ldrh	r3, [r2, #6]
 801af5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af5e:	449a      	add	sl, r3
 801af60:	fa0f f38a 	sxth.w	r3, sl
 801af64:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801af68:	930f      	str	r3, [sp, #60]	; 0x3c
 801af6a:	4bb5      	ldr	r3, [pc, #724]	; (801b240 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801af6c:	f893 b000 	ldrb.w	fp, [r3]
 801af70:	f10b 3cff 	add.w	ip, fp, #4294967295
 801af74:	f1dc 0300 	rsbs	r3, ip, #0
 801af78:	eb43 030c 	adc.w	r3, r3, ip
 801af7c:	930d      	str	r3, [sp, #52]	; 0x34
 801af7e:	464b      	mov	r3, r9
 801af80:	f7fa f911 	bl	80151a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801af84:	4631      	mov	r1, r6
 801af86:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801af8a:	464b      	mov	r3, r9
 801af8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af8e:	a812      	add	r0, sp, #72	; 0x48
 801af90:	f7fa f926 	bl	80151e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801af94:	a916      	add	r1, sp, #88	; 0x58
 801af96:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801af9a:	a815      	add	r0, sp, #84	; 0x54
 801af9c:	f7fa fa46 	bl	801542c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801afa0:	f1b9 0f00 	cmp.w	r9, #0
 801afa4:	f040 80d8 	bne.w	801b158 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801afa8:	f1bb 0f01 	cmp.w	fp, #1
 801afac:	f040 80dc 	bne.w	801b168 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801afb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801afb2:	b153      	cbz	r3, 801afca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801afb4:	2508      	movs	r5, #8
 801afb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afb8:	fb95 f3f8 	sdiv	r3, r5, r8
 801afbc:	1e5d      	subs	r5, r3, #1
 801afbe:	4415      	add	r5, r2
 801afc0:	fb95 f5f3 	sdiv	r5, r5, r3
 801afc4:	fb15 f503 	smulbb	r5, r5, r3
 801afc8:	b2ad      	uxth	r5, r5
 801afca:	b907      	cbnz	r7, 801afce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801afcc:	b16c      	cbz	r4, 801afea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801afce:	fb04 7305 	mla	r3, r4, r5, r7
 801afd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801afd4:	ebaa 0a04 	sub.w	sl, sl, r4
 801afd8:	fb08 f303 	mul.w	r3, r8, r3
 801afdc:	fa1f fa8a 	uxth.w	sl, sl
 801afe0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801afe4:	f003 0407 	and.w	r4, r3, #7
 801afe8:	9226      	str	r2, [sp, #152]	; 0x98
 801afea:	4649      	mov	r1, r9
 801afec:	980d      	ldr	r0, [sp, #52]	; 0x34
 801afee:	f7ff ff1b 	bl	801ae28 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801aff2:	4683      	mov	fp, r0
 801aff4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801aff6:	f7ff ff3d 	bl	801ae74 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801affa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801affc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801affe:	4681      	mov	r9, r0
 801b000:	1a9b      	subs	r3, r3, r2
 801b002:	459a      	cmp	sl, r3
 801b004:	bfa8      	it	ge
 801b006:	469a      	movge	sl, r3
 801b008:	f1ba 0f00 	cmp.w	sl, #0
 801b00c:	f340 80f9 	ble.w	801b202 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b010:	1bf6      	subs	r6, r6, r7
 801b012:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b014:	1b9e      	subs	r6, r3, r6
 801b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b018:	429e      	cmp	r6, r3
 801b01a:	bfd4      	ite	le
 801b01c:	ebc7 0706 	rsble	r7, r7, r6
 801b020:	ebc7 0703 	rsbgt	r7, r7, r3
 801b024:	2f00      	cmp	r7, #0
 801b026:	f340 80ec 	ble.w	801b202 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b02a:	1bed      	subs	r5, r5, r7
 801b02c:	fb08 f305 	mul.w	r3, r8, r5
 801b030:	930d      	str	r3, [sp, #52]	; 0x34
 801b032:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b034:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b038:	930e      	str	r3, [sp, #56]	; 0x38
 801b03a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b03c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b040:	930f      	str	r3, [sp, #60]	; 0x3c
 801b042:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b044:	b2db      	uxtb	r3, r3
 801b046:	9310      	str	r3, [sp, #64]	; 0x40
 801b048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	f040 80de 	bne.w	801b20c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801b050:	4b7c      	ldr	r3, [pc, #496]	; (801b244 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801b052:	6818      	ldr	r0, [r3, #0]
 801b054:	6803      	ldr	r3, [r0, #0]
 801b056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b058:	4798      	blx	r3
 801b05a:	2301      	movs	r3, #1
 801b05c:	4a7a      	ldr	r2, [pc, #488]	; (801b248 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801b05e:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801b062:	fb07 9b1b 	mls	fp, r7, fp, r9
 801b066:	fa03 f308 	lsl.w	r3, r3, r8
 801b06a:	8811      	ldrh	r1, [r2, #0]
 801b06c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801b070:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801b074:	3b01      	subs	r3, #1
 801b076:	fb06 bb07 	mla	fp, r6, r7, fp
 801b07a:	b2db      	uxtb	r3, r3
 801b07c:	930a      	str	r3, [sp, #40]	; 0x28
 801b07e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801b082:	fb01 2303 	mla	r3, r1, r3, r2
 801b086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b08a:	18c3      	adds	r3, r0, r3
 801b08c:	9309      	str	r3, [sp, #36]	; 0x24
 801b08e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b090:	781a      	ldrb	r2, [r3, #0]
 801b092:	4122      	asrs	r2, r4
 801b094:	b2d2      	uxtb	r2, r2
 801b096:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b09a:	f0c0 80d7 	bcc.w	801b24c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801b09e:	46be      	mov	lr, r7
 801b0a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b0a2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b0a6:	f0c0 80ba 	bcc.w	801b21e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801b0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0ac:	4013      	ands	r3, r2
 801b0ae:	d041      	beq.n	801b134 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b0b0:	20ff      	movs	r0, #255	; 0xff
 801b0b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b0b4:	fb90 f5f5 	sdiv	r5, r0, r5
 801b0b8:	436b      	muls	r3, r5
 801b0ba:	2bfe      	cmp	r3, #254	; 0xfe
 801b0bc:	dd03      	ble.n	801b0c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801b0be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b0c0:	4285      	cmp	r5, r0
 801b0c2:	f000 80a5 	beq.w	801b210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801b0c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b0c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b0ca:	fb15 f303 	smulbb	r3, r5, r3
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	1c5d      	adds	r5, r3, #1
 801b0d2:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801b0d6:	780d      	ldrb	r5, [r1, #0]
 801b0d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b0dc:	fa1f fc83 	uxth.w	ip, r3
 801b0e0:	43db      	mvns	r3, r3
 801b0e2:	fb10 f90c 	smulbb	r9, r0, ip
 801b0e6:	b2db      	uxtb	r3, r3
 801b0e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b0ea:	fb05 9503 	mla	r5, r5, r3, r9
 801b0ee:	b2ad      	uxth	r5, r5
 801b0f0:	f105 0901 	add.w	r9, r5, #1
 801b0f4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b0f8:	fb10 f90c 	smulbb	r9, r0, ip
 801b0fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b0fe:	122d      	asrs	r5, r5, #8
 801b100:	fb10 fc0c 	smulbb	ip, r0, ip
 801b104:	700d      	strb	r5, [r1, #0]
 801b106:	784d      	ldrb	r5, [r1, #1]
 801b108:	fb05 9503 	mla	r5, r5, r3, r9
 801b10c:	b2ad      	uxth	r5, r5
 801b10e:	f105 0901 	add.w	r9, r5, #1
 801b112:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b116:	122d      	asrs	r5, r5, #8
 801b118:	704d      	strb	r5, [r1, #1]
 801b11a:	788d      	ldrb	r5, [r1, #2]
 801b11c:	fb05 cc03 	mla	ip, r5, r3, ip
 801b120:	fa1f fc8c 	uxth.w	ip, ip
 801b124:	f10c 0301 	add.w	r3, ip, #1
 801b128:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b12c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b130:	f881 c002 	strb.w	ip, [r1, #2]
 801b134:	4444      	add	r4, r8
 801b136:	4431      	add	r1, r6
 801b138:	b2a4      	uxth	r4, r4
 801b13a:	2c07      	cmp	r4, #7
 801b13c:	bf89      	itett	hi
 801b13e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801b140:	fa42 f208 	asrls.w	r2, r2, r8
 801b144:	2400      	movhi	r4, #0
 801b146:	785a      	ldrbhi	r2, [r3, #1]
 801b148:	bf8a      	itet	hi
 801b14a:	3301      	addhi	r3, #1
 801b14c:	b2d2      	uxtbls	r2, r2
 801b14e:	9326      	strhi	r3, [sp, #152]	; 0x98
 801b150:	e7a7      	b.n	801b0a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801b152:	441e      	add	r6, r3
 801b154:	b236      	sxth	r6, r6
 801b156:	e6ed      	b.n	801af34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b158:	f1b9 0f01 	cmp.w	r9, #1
 801b15c:	f47f af28 	bne.w	801afb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b160:	f1bb 0f01 	cmp.w	fp, #1
 801b164:	f47f af24 	bne.w	801afb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b168:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801b244 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801b16c:	f8db 0000 	ldr.w	r0, [fp]
 801b170:	6803      	ldr	r3, [r0, #0]
 801b172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b174:	4798      	blx	r3
 801b176:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801b17a:	465a      	mov	r2, fp
 801b17c:	d006      	beq.n	801b18c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b17e:	f1b8 0f04 	cmp.w	r8, #4
 801b182:	d141      	bne.n	801b208 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801b184:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b186:	3300      	adds	r3, #0
 801b188:	bf18      	it	ne
 801b18a:	2301      	movne	r3, #1
 801b18c:	0580      	lsls	r0, r0, #22
 801b18e:	d566      	bpl.n	801b25e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b190:	f1b8 0f08 	cmp.w	r8, #8
 801b194:	d163      	bne.n	801b25e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b196:	2b00      	cmp	r3, #0
 801b198:	bf0c      	ite	eq
 801b19a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801b19e:	f44f 7180 	movne.w	r1, #256	; 0x100
 801b1a2:	2f00      	cmp	r7, #0
 801b1a4:	f47f af04 	bne.w	801afb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b1a8:	2c00      	cmp	r4, #0
 801b1aa:	f47f af01 	bne.w	801afb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b1b2:	18f3      	adds	r3, r6, r3
 801b1b4:	4283      	cmp	r3, r0
 801b1b6:	f73f aefb 	bgt.w	801afb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b1ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b1bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1be:	4403      	add	r3, r0
 801b1c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b1c2:	4283      	cmp	r3, r0
 801b1c4:	f73f aef4 	bgt.w	801afb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b1c8:	f1b8 0f08 	cmp.w	r8, #8
 801b1cc:	6810      	ldr	r0, [r2, #0]
 801b1ce:	f04f 0600 	mov.w	r6, #0
 801b1d2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b1d6:	bf18      	it	ne
 801b1d8:	3501      	addne	r5, #1
 801b1da:	6804      	ldr	r4, [r0, #0]
 801b1dc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801b1e0:	bf18      	it	ne
 801b1e2:	f025 0501 	bicne.w	r5, r5, #1
 801b1e6:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801b1ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b1ec:	bf18      	it	ne
 801b1ee:	b2ad      	uxthne	r5, r5
 801b1f0:	9104      	str	r1, [sp, #16]
 801b1f2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b1f4:	e9cd 5a00 	strd	r5, sl, [sp]
 801b1f8:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801b1fc:	9926      	ldr	r1, [sp, #152]	; 0x98
 801b1fe:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801b200:	47a0      	blx	r4
 801b202:	b017      	add	sp, #92	; 0x5c
 801b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b208:	2300      	movs	r3, #0
 801b20a:	e7bf      	b.n	801b18c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b20c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b20e:	e724      	b.n	801b05a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801b210:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b212:	700b      	strb	r3, [r1, #0]
 801b214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b216:	704b      	strb	r3, [r1, #1]
 801b218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b21a:	708b      	strb	r3, [r1, #2]
 801b21c:	e78a      	b.n	801b134 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b220:	b153      	cbz	r3, 801b238 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801b222:	441c      	add	r4, r3
 801b224:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b226:	b2a4      	uxth	r4, r4
 801b228:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801b22c:	f004 0407 	and.w	r4, r4, #7
 801b230:	781a      	ldrb	r2, [r3, #0]
 801b232:	9326      	str	r3, [sp, #152]	; 0x98
 801b234:	4122      	asrs	r2, r4
 801b236:	b2d2      	uxtb	r2, r2
 801b238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b23a:	445b      	add	r3, fp
 801b23c:	9309      	str	r3, [sp, #36]	; 0x24
 801b23e:	e72a      	b.n	801b096 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801b240:	2400c7ec 	.word	0x2400c7ec
 801b244:	2400c7f4 	.word	0x2400c7f4
 801b248:	2400c7ee 	.word	0x2400c7ee
 801b24c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d1d7      	bne.n	801b202 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b252:	4b06      	ldr	r3, [pc, #24]	; (801b26c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801b254:	6818      	ldr	r0, [r3, #0]
 801b256:	6803      	ldr	r3, [r0, #0]
 801b258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b25a:	4798      	blx	r3
 801b25c:	e7d1      	b.n	801b202 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b25e:	2b00      	cmp	r3, #0
 801b260:	f43f aea6 	beq.w	801afb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b264:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b268:	e79b      	b.n	801b1a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801b26a:	bf00      	nop
 801b26c:	2400c7f4 	.word	0x2400c7f4

0801b270 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b270:	b538      	push	{r3, r4, r5, lr}
 801b272:	4c15      	ldr	r4, [pc, #84]	; (801b2c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b274:	4605      	mov	r5, r0
 801b276:	7823      	ldrb	r3, [r4, #0]
 801b278:	f3bf 8f5b 	dmb	ish
 801b27c:	07da      	lsls	r2, r3, #31
 801b27e:	d40b      	bmi.n	801b298 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b280:	4620      	mov	r0, r4
 801b282:	f005 f890 	bl	80203a6 <__cxa_guard_acquire>
 801b286:	b138      	cbz	r0, 801b298 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b288:	4620      	mov	r0, r4
 801b28a:	f005 f898 	bl	80203be <__cxa_guard_release>
 801b28e:	4a0f      	ldr	r2, [pc, #60]	; (801b2cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b290:	490f      	ldr	r1, [pc, #60]	; (801b2d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b292:	4810      	ldr	r0, [pc, #64]	; (801b2d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b294:	f005 f880 	bl	8020398 <__aeabi_atexit>
 801b298:	4c0f      	ldr	r4, [pc, #60]	; (801b2d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b29a:	7823      	ldrb	r3, [r4, #0]
 801b29c:	f3bf 8f5b 	dmb	ish
 801b2a0:	07db      	lsls	r3, r3, #31
 801b2a2:	d40b      	bmi.n	801b2bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b2a4:	4620      	mov	r0, r4
 801b2a6:	f005 f87e 	bl	80203a6 <__cxa_guard_acquire>
 801b2aa:	b138      	cbz	r0, 801b2bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b2ac:	4620      	mov	r0, r4
 801b2ae:	f005 f886 	bl	80203be <__cxa_guard_release>
 801b2b2:	4a06      	ldr	r2, [pc, #24]	; (801b2cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b2b4:	4909      	ldr	r1, [pc, #36]	; (801b2dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b2b6:	480a      	ldr	r0, [pc, #40]	; (801b2e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b2b8:	f005 f86e 	bl	8020398 <__aeabi_atexit>
 801b2bc:	4b05      	ldr	r3, [pc, #20]	; (801b2d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b2be:	612b      	str	r3, [r5, #16]
 801b2c0:	4b07      	ldr	r3, [pc, #28]	; (801b2e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b2c2:	616b      	str	r3, [r5, #20]
 801b2c4:	bd38      	pop	{r3, r4, r5, pc}
 801b2c6:	bf00      	nop
 801b2c8:	2400c8c0 	.word	0x2400c8c0
 801b2cc:	24000000 	.word	0x24000000
 801b2d0:	08019e35 	.word	0x08019e35
 801b2d4:	240000c8 	.word	0x240000c8
 801b2d8:	2400c8c4 	.word	0x2400c8c4
 801b2dc:	08019e33 	.word	0x08019e33
 801b2e0:	240000cc 	.word	0x240000cc

0801b2e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b2e4:	b538      	push	{r3, r4, r5, lr}
 801b2e6:	4c15      	ldr	r4, [pc, #84]	; (801b33c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b2e8:	4605      	mov	r5, r0
 801b2ea:	7823      	ldrb	r3, [r4, #0]
 801b2ec:	f3bf 8f5b 	dmb	ish
 801b2f0:	07da      	lsls	r2, r3, #31
 801b2f2:	d40b      	bmi.n	801b30c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	f005 f856 	bl	80203a6 <__cxa_guard_acquire>
 801b2fa:	b138      	cbz	r0, 801b30c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f005 f85e 	bl	80203be <__cxa_guard_release>
 801b302:	4a0f      	ldr	r2, [pc, #60]	; (801b340 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b304:	490f      	ldr	r1, [pc, #60]	; (801b344 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b306:	4810      	ldr	r0, [pc, #64]	; (801b348 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b308:	f005 f846 	bl	8020398 <__aeabi_atexit>
 801b30c:	4c0f      	ldr	r4, [pc, #60]	; (801b34c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b30e:	7823      	ldrb	r3, [r4, #0]
 801b310:	f3bf 8f5b 	dmb	ish
 801b314:	07db      	lsls	r3, r3, #31
 801b316:	d40b      	bmi.n	801b330 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b318:	4620      	mov	r0, r4
 801b31a:	f005 f844 	bl	80203a6 <__cxa_guard_acquire>
 801b31e:	b138      	cbz	r0, 801b330 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b320:	4620      	mov	r0, r4
 801b322:	f005 f84c 	bl	80203be <__cxa_guard_release>
 801b326:	4a06      	ldr	r2, [pc, #24]	; (801b340 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b328:	4909      	ldr	r1, [pc, #36]	; (801b350 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b32a:	480a      	ldr	r0, [pc, #40]	; (801b354 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b32c:	f005 f834 	bl	8020398 <__aeabi_atexit>
 801b330:	4b05      	ldr	r3, [pc, #20]	; (801b348 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b332:	60ab      	str	r3, [r5, #8]
 801b334:	4b07      	ldr	r3, [pc, #28]	; (801b354 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b336:	60eb      	str	r3, [r5, #12]
 801b338:	bd38      	pop	{r3, r4, r5, pc}
 801b33a:	bf00      	nop
 801b33c:	2400c8a0 	.word	0x2400c8a0
 801b340:	24000000 	.word	0x24000000
 801b344:	08019e39 	.word	0x08019e39
 801b348:	240000a8 	.word	0x240000a8
 801b34c:	2400c8a4 	.word	0x2400c8a4
 801b350:	08019e37 	.word	0x08019e37
 801b354:	240000ac 	.word	0x240000ac

0801b358 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801b358:	b510      	push	{r4, lr}
 801b35a:	4604      	mov	r4, r0
 801b35c:	f7ff ff88 	bl	801b270 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b360:	4620      	mov	r0, r4
 801b362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b366:	f7ff bfbd 	b.w	801b2e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b36c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b36c:	b538      	push	{r3, r4, r5, lr}
 801b36e:	4c15      	ldr	r4, [pc, #84]	; (801b3c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b370:	4605      	mov	r5, r0
 801b372:	7823      	ldrb	r3, [r4, #0]
 801b374:	f3bf 8f5b 	dmb	ish
 801b378:	07da      	lsls	r2, r3, #31
 801b37a:	d40b      	bmi.n	801b394 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b37c:	4620      	mov	r0, r4
 801b37e:	f005 f812 	bl	80203a6 <__cxa_guard_acquire>
 801b382:	b138      	cbz	r0, 801b394 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b384:	4620      	mov	r0, r4
 801b386:	f005 f81a 	bl	80203be <__cxa_guard_release>
 801b38a:	4a0f      	ldr	r2, [pc, #60]	; (801b3c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b38c:	490f      	ldr	r1, [pc, #60]	; (801b3cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b38e:	4810      	ldr	r0, [pc, #64]	; (801b3d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b390:	f005 f802 	bl	8020398 <__aeabi_atexit>
 801b394:	4c0f      	ldr	r4, [pc, #60]	; (801b3d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b396:	7823      	ldrb	r3, [r4, #0]
 801b398:	f3bf 8f5b 	dmb	ish
 801b39c:	07db      	lsls	r3, r3, #31
 801b39e:	d40b      	bmi.n	801b3b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b3a0:	4620      	mov	r0, r4
 801b3a2:	f005 f800 	bl	80203a6 <__cxa_guard_acquire>
 801b3a6:	b138      	cbz	r0, 801b3b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b3a8:	4620      	mov	r0, r4
 801b3aa:	f005 f808 	bl	80203be <__cxa_guard_release>
 801b3ae:	4a06      	ldr	r2, [pc, #24]	; (801b3c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b3b0:	4909      	ldr	r1, [pc, #36]	; (801b3d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b3b2:	480a      	ldr	r0, [pc, #40]	; (801b3dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b3b4:	f004 fff0 	bl	8020398 <__aeabi_atexit>
 801b3b8:	4b05      	ldr	r3, [pc, #20]	; (801b3d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b3ba:	622b      	str	r3, [r5, #32]
 801b3bc:	4b07      	ldr	r3, [pc, #28]	; (801b3dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b3be:	626b      	str	r3, [r5, #36]	; 0x24
 801b3c0:	bd38      	pop	{r3, r4, r5, pc}
 801b3c2:	bf00      	nop
 801b3c4:	2400c8c8 	.word	0x2400c8c8
 801b3c8:	24000000 	.word	0x24000000
 801b3cc:	08019e2d 	.word	0x08019e2d
 801b3d0:	240000d0 	.word	0x240000d0
 801b3d4:	2400c8cc 	.word	0x2400c8cc
 801b3d8:	08019e2b 	.word	0x08019e2b
 801b3dc:	240000d4 	.word	0x240000d4

0801b3e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b3e0:	b538      	push	{r3, r4, r5, lr}
 801b3e2:	4c15      	ldr	r4, [pc, #84]	; (801b438 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b3e4:	4605      	mov	r5, r0
 801b3e6:	7823      	ldrb	r3, [r4, #0]
 801b3e8:	f3bf 8f5b 	dmb	ish
 801b3ec:	07da      	lsls	r2, r3, #31
 801b3ee:	d40b      	bmi.n	801b408 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f004 ffd8 	bl	80203a6 <__cxa_guard_acquire>
 801b3f6:	b138      	cbz	r0, 801b408 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	f004 ffe0 	bl	80203be <__cxa_guard_release>
 801b3fe:	4a0f      	ldr	r2, [pc, #60]	; (801b43c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b400:	490f      	ldr	r1, [pc, #60]	; (801b440 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b402:	4810      	ldr	r0, [pc, #64]	; (801b444 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b404:	f004 ffc8 	bl	8020398 <__aeabi_atexit>
 801b408:	4c0f      	ldr	r4, [pc, #60]	; (801b448 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b40a:	7823      	ldrb	r3, [r4, #0]
 801b40c:	f3bf 8f5b 	dmb	ish
 801b410:	07db      	lsls	r3, r3, #31
 801b412:	d40b      	bmi.n	801b42c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b414:	4620      	mov	r0, r4
 801b416:	f004 ffc6 	bl	80203a6 <__cxa_guard_acquire>
 801b41a:	b138      	cbz	r0, 801b42c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b41c:	4620      	mov	r0, r4
 801b41e:	f004 ffce 	bl	80203be <__cxa_guard_release>
 801b422:	4a06      	ldr	r2, [pc, #24]	; (801b43c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b424:	4909      	ldr	r1, [pc, #36]	; (801b44c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b426:	480a      	ldr	r0, [pc, #40]	; (801b450 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b428:	f004 ffb6 	bl	8020398 <__aeabi_atexit>
 801b42c:	4b05      	ldr	r3, [pc, #20]	; (801b444 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b42e:	61ab      	str	r3, [r5, #24]
 801b430:	4b07      	ldr	r3, [pc, #28]	; (801b450 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b432:	61eb      	str	r3, [r5, #28]
 801b434:	bd38      	pop	{r3, r4, r5, pc}
 801b436:	bf00      	nop
 801b438:	2400c8a8 	.word	0x2400c8a8
 801b43c:	24000000 	.word	0x24000000
 801b440:	08019e31 	.word	0x08019e31
 801b444:	240000b0 	.word	0x240000b0
 801b448:	2400c8ac 	.word	0x2400c8ac
 801b44c:	08019e2f 	.word	0x08019e2f
 801b450:	240000b4 	.word	0x240000b4

0801b454 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b454:	b510      	push	{r4, lr}
 801b456:	4604      	mov	r4, r0
 801b458:	f7ff ff88 	bl	801b36c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b45c:	4620      	mov	r0, r4
 801b45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b462:	f7ff bfbd 	b.w	801b3e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b468 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801b468:	b538      	push	{r3, r4, r5, lr}
 801b46a:	4c15      	ldr	r4, [pc, #84]	; (801b4c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801b46c:	4605      	mov	r5, r0
 801b46e:	7823      	ldrb	r3, [r4, #0]
 801b470:	f3bf 8f5b 	dmb	ish
 801b474:	07da      	lsls	r2, r3, #31
 801b476:	d40b      	bmi.n	801b490 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b478:	4620      	mov	r0, r4
 801b47a:	f004 ff94 	bl	80203a6 <__cxa_guard_acquire>
 801b47e:	b138      	cbz	r0, 801b490 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b480:	4620      	mov	r0, r4
 801b482:	f004 ff9c 	bl	80203be <__cxa_guard_release>
 801b486:	4a0f      	ldr	r2, [pc, #60]	; (801b4c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b488:	490f      	ldr	r1, [pc, #60]	; (801b4c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801b48a:	4810      	ldr	r0, [pc, #64]	; (801b4cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b48c:	f004 ff84 	bl	8020398 <__aeabi_atexit>
 801b490:	4c0f      	ldr	r4, [pc, #60]	; (801b4d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801b492:	7823      	ldrb	r3, [r4, #0]
 801b494:	f3bf 8f5b 	dmb	ish
 801b498:	07db      	lsls	r3, r3, #31
 801b49a:	d40b      	bmi.n	801b4b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b49c:	4620      	mov	r0, r4
 801b49e:	f004 ff82 	bl	80203a6 <__cxa_guard_acquire>
 801b4a2:	b138      	cbz	r0, 801b4b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	f004 ff8a 	bl	80203be <__cxa_guard_release>
 801b4aa:	4a06      	ldr	r2, [pc, #24]	; (801b4c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b4ac:	4909      	ldr	r1, [pc, #36]	; (801b4d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801b4ae:	480a      	ldr	r0, [pc, #40]	; (801b4d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b4b0:	f004 ff72 	bl	8020398 <__aeabi_atexit>
 801b4b4:	4b05      	ldr	r3, [pc, #20]	; (801b4cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b4b6:	632b      	str	r3, [r5, #48]	; 0x30
 801b4b8:	4b07      	ldr	r3, [pc, #28]	; (801b4d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b4ba:	636b      	str	r3, [r5, #52]	; 0x34
 801b4bc:	bd38      	pop	{r3, r4, r5, pc}
 801b4be:	bf00      	nop
 801b4c0:	2400c8b0 	.word	0x2400c8b0
 801b4c4:	24000000 	.word	0x24000000
 801b4c8:	08019e25 	.word	0x08019e25
 801b4cc:	240000b8 	.word	0x240000b8
 801b4d0:	2400c8b4 	.word	0x2400c8b4
 801b4d4:	08019e23 	.word	0x08019e23
 801b4d8:	240000bc 	.word	0x240000bc

0801b4dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801b4dc:	b538      	push	{r3, r4, r5, lr}
 801b4de:	4c15      	ldr	r4, [pc, #84]	; (801b534 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801b4e0:	4605      	mov	r5, r0
 801b4e2:	7823      	ldrb	r3, [r4, #0]
 801b4e4:	f3bf 8f5b 	dmb	ish
 801b4e8:	07da      	lsls	r2, r3, #31
 801b4ea:	d40b      	bmi.n	801b504 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	f004 ff5a 	bl	80203a6 <__cxa_guard_acquire>
 801b4f2:	b138      	cbz	r0, 801b504 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b4f4:	4620      	mov	r0, r4
 801b4f6:	f004 ff62 	bl	80203be <__cxa_guard_release>
 801b4fa:	4a0f      	ldr	r2, [pc, #60]	; (801b538 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b4fc:	490f      	ldr	r1, [pc, #60]	; (801b53c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801b4fe:	4810      	ldr	r0, [pc, #64]	; (801b540 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b500:	f004 ff4a 	bl	8020398 <__aeabi_atexit>
 801b504:	4c0f      	ldr	r4, [pc, #60]	; (801b544 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801b506:	7823      	ldrb	r3, [r4, #0]
 801b508:	f3bf 8f5b 	dmb	ish
 801b50c:	07db      	lsls	r3, r3, #31
 801b50e:	d40b      	bmi.n	801b528 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b510:	4620      	mov	r0, r4
 801b512:	f004 ff48 	bl	80203a6 <__cxa_guard_acquire>
 801b516:	b138      	cbz	r0, 801b528 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b518:	4620      	mov	r0, r4
 801b51a:	f004 ff50 	bl	80203be <__cxa_guard_release>
 801b51e:	4a06      	ldr	r2, [pc, #24]	; (801b538 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b520:	4909      	ldr	r1, [pc, #36]	; (801b548 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801b522:	480a      	ldr	r0, [pc, #40]	; (801b54c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b524:	f004 ff38 	bl	8020398 <__aeabi_atexit>
 801b528:	4b05      	ldr	r3, [pc, #20]	; (801b540 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b52a:	62ab      	str	r3, [r5, #40]	; 0x28
 801b52c:	4b07      	ldr	r3, [pc, #28]	; (801b54c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b52e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b530:	bd38      	pop	{r3, r4, r5, pc}
 801b532:	bf00      	nop
 801b534:	2400c888 	.word	0x2400c888
 801b538:	24000000 	.word	0x24000000
 801b53c:	08019e29 	.word	0x08019e29
 801b540:	24000090 	.word	0x24000090
 801b544:	2400c88c 	.word	0x2400c88c
 801b548:	08019e27 	.word	0x08019e27
 801b54c:	24000094 	.word	0x24000094

0801b550 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801b550:	b510      	push	{r4, lr}
 801b552:	4604      	mov	r4, r0
 801b554:	f7ff ff88 	bl	801b468 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801b558:	4620      	mov	r0, r4
 801b55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b55e:	f7ff bfbd 	b.w	801b4dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801b564 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b564:	b538      	push	{r3, r4, r5, lr}
 801b566:	4c15      	ldr	r4, [pc, #84]	; (801b5bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b568:	4605      	mov	r5, r0
 801b56a:	7823      	ldrb	r3, [r4, #0]
 801b56c:	f3bf 8f5b 	dmb	ish
 801b570:	07da      	lsls	r2, r3, #31
 801b572:	d40b      	bmi.n	801b58c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b574:	4620      	mov	r0, r4
 801b576:	f004 ff16 	bl	80203a6 <__cxa_guard_acquire>
 801b57a:	b138      	cbz	r0, 801b58c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b57c:	4620      	mov	r0, r4
 801b57e:	f004 ff1e 	bl	80203be <__cxa_guard_release>
 801b582:	4a0f      	ldr	r2, [pc, #60]	; (801b5c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b584:	490f      	ldr	r1, [pc, #60]	; (801b5c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b586:	4810      	ldr	r0, [pc, #64]	; (801b5c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b588:	f004 ff06 	bl	8020398 <__aeabi_atexit>
 801b58c:	4c0f      	ldr	r4, [pc, #60]	; (801b5cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b58e:	7823      	ldrb	r3, [r4, #0]
 801b590:	f3bf 8f5b 	dmb	ish
 801b594:	07db      	lsls	r3, r3, #31
 801b596:	d40b      	bmi.n	801b5b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b598:	4620      	mov	r0, r4
 801b59a:	f004 ff04 	bl	80203a6 <__cxa_guard_acquire>
 801b59e:	b138      	cbz	r0, 801b5b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b5a0:	4620      	mov	r0, r4
 801b5a2:	f004 ff0c 	bl	80203be <__cxa_guard_release>
 801b5a6:	4a06      	ldr	r2, [pc, #24]	; (801b5c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b5a8:	4909      	ldr	r1, [pc, #36]	; (801b5d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b5aa:	480a      	ldr	r0, [pc, #40]	; (801b5d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b5ac:	f004 fef4 	bl	8020398 <__aeabi_atexit>
 801b5b0:	4b05      	ldr	r3, [pc, #20]	; (801b5c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b5b2:	642b      	str	r3, [r5, #64]	; 0x40
 801b5b4:	4b07      	ldr	r3, [pc, #28]	; (801b5d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b5b6:	646b      	str	r3, [r5, #68]	; 0x44
 801b5b8:	bd38      	pop	{r3, r4, r5, pc}
 801b5ba:	bf00      	nop
 801b5bc:	2400c8b8 	.word	0x2400c8b8
 801b5c0:	24000000 	.word	0x24000000
 801b5c4:	08019e1d 	.word	0x08019e1d
 801b5c8:	240000c0 	.word	0x240000c0
 801b5cc:	2400c8bc 	.word	0x2400c8bc
 801b5d0:	08019e1b 	.word	0x08019e1b
 801b5d4:	240000c4 	.word	0x240000c4

0801b5d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b5d8:	b538      	push	{r3, r4, r5, lr}
 801b5da:	4c15      	ldr	r4, [pc, #84]	; (801b630 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b5dc:	4605      	mov	r5, r0
 801b5de:	7823      	ldrb	r3, [r4, #0]
 801b5e0:	f3bf 8f5b 	dmb	ish
 801b5e4:	07da      	lsls	r2, r3, #31
 801b5e6:	d40b      	bmi.n	801b600 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f004 fedc 	bl	80203a6 <__cxa_guard_acquire>
 801b5ee:	b138      	cbz	r0, 801b600 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	f004 fee4 	bl	80203be <__cxa_guard_release>
 801b5f6:	4a0f      	ldr	r2, [pc, #60]	; (801b634 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b5f8:	490f      	ldr	r1, [pc, #60]	; (801b638 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b5fa:	4810      	ldr	r0, [pc, #64]	; (801b63c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b5fc:	f004 fecc 	bl	8020398 <__aeabi_atexit>
 801b600:	4c0f      	ldr	r4, [pc, #60]	; (801b640 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b602:	7823      	ldrb	r3, [r4, #0]
 801b604:	f3bf 8f5b 	dmb	ish
 801b608:	07db      	lsls	r3, r3, #31
 801b60a:	d40b      	bmi.n	801b624 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b60c:	4620      	mov	r0, r4
 801b60e:	f004 feca 	bl	80203a6 <__cxa_guard_acquire>
 801b612:	b138      	cbz	r0, 801b624 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b614:	4620      	mov	r0, r4
 801b616:	f004 fed2 	bl	80203be <__cxa_guard_release>
 801b61a:	4a06      	ldr	r2, [pc, #24]	; (801b634 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b61c:	4909      	ldr	r1, [pc, #36]	; (801b644 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b61e:	480a      	ldr	r0, [pc, #40]	; (801b648 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b620:	f004 feba 	bl	8020398 <__aeabi_atexit>
 801b624:	4b05      	ldr	r3, [pc, #20]	; (801b63c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b626:	63ab      	str	r3, [r5, #56]	; 0x38
 801b628:	4b07      	ldr	r3, [pc, #28]	; (801b648 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b62a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801b62c:	bd38      	pop	{r3, r4, r5, pc}
 801b62e:	bf00      	nop
 801b630:	2400c898 	.word	0x2400c898
 801b634:	24000000 	.word	0x24000000
 801b638:	08019e21 	.word	0x08019e21
 801b63c:	240000a0 	.word	0x240000a0
 801b640:	2400c89c 	.word	0x2400c89c
 801b644:	08019e1f 	.word	0x08019e1f
 801b648:	240000a4 	.word	0x240000a4

0801b64c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801b64c:	b510      	push	{r4, lr}
 801b64e:	4604      	mov	r4, r0
 801b650:	f7ff ff88 	bl	801b564 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b654:	4620      	mov	r0, r4
 801b656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b65a:	f7ff bfbd 	b.w	801b5d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b660 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b660:	b538      	push	{r3, r4, r5, lr}
 801b662:	4c15      	ldr	r4, [pc, #84]	; (801b6b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b664:	4605      	mov	r5, r0
 801b666:	7823      	ldrb	r3, [r4, #0]
 801b668:	f3bf 8f5b 	dmb	ish
 801b66c:	07da      	lsls	r2, r3, #31
 801b66e:	d40b      	bmi.n	801b688 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b670:	4620      	mov	r0, r4
 801b672:	f004 fe98 	bl	80203a6 <__cxa_guard_acquire>
 801b676:	b138      	cbz	r0, 801b688 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b678:	4620      	mov	r0, r4
 801b67a:	f004 fea0 	bl	80203be <__cxa_guard_release>
 801b67e:	4a0f      	ldr	r2, [pc, #60]	; (801b6bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b680:	490f      	ldr	r1, [pc, #60]	; (801b6c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b682:	4810      	ldr	r0, [pc, #64]	; (801b6c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b684:	f004 fe88 	bl	8020398 <__aeabi_atexit>
 801b688:	4c0f      	ldr	r4, [pc, #60]	; (801b6c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b68a:	7823      	ldrb	r3, [r4, #0]
 801b68c:	f3bf 8f5b 	dmb	ish
 801b690:	07db      	lsls	r3, r3, #31
 801b692:	d40b      	bmi.n	801b6ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b694:	4620      	mov	r0, r4
 801b696:	f004 fe86 	bl	80203a6 <__cxa_guard_acquire>
 801b69a:	b138      	cbz	r0, 801b6ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b69c:	4620      	mov	r0, r4
 801b69e:	f004 fe8e 	bl	80203be <__cxa_guard_release>
 801b6a2:	4a06      	ldr	r2, [pc, #24]	; (801b6bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b6a4:	4909      	ldr	r1, [pc, #36]	; (801b6cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b6a6:	480a      	ldr	r0, [pc, #40]	; (801b6d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b6a8:	f004 fe76 	bl	8020398 <__aeabi_atexit>
 801b6ac:	4b05      	ldr	r3, [pc, #20]	; (801b6c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b6ae:	652b      	str	r3, [r5, #80]	; 0x50
 801b6b0:	4b07      	ldr	r3, [pc, #28]	; (801b6d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b6b2:	656b      	str	r3, [r5, #84]	; 0x54
 801b6b4:	bd38      	pop	{r3, r4, r5, pc}
 801b6b6:	bf00      	nop
 801b6b8:	2400c890 	.word	0x2400c890
 801b6bc:	24000000 	.word	0x24000000
 801b6c0:	08019e15 	.word	0x08019e15
 801b6c4:	24000098 	.word	0x24000098
 801b6c8:	2400c894 	.word	0x2400c894
 801b6cc:	08019e13 	.word	0x08019e13
 801b6d0:	2400009c 	.word	0x2400009c

0801b6d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b6d4:	b538      	push	{r3, r4, r5, lr}
 801b6d6:	4c15      	ldr	r4, [pc, #84]	; (801b72c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b6d8:	4605      	mov	r5, r0
 801b6da:	7823      	ldrb	r3, [r4, #0]
 801b6dc:	f3bf 8f5b 	dmb	ish
 801b6e0:	07da      	lsls	r2, r3, #31
 801b6e2:	d40b      	bmi.n	801b6fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b6e4:	4620      	mov	r0, r4
 801b6e6:	f004 fe5e 	bl	80203a6 <__cxa_guard_acquire>
 801b6ea:	b138      	cbz	r0, 801b6fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b6ec:	4620      	mov	r0, r4
 801b6ee:	f004 fe66 	bl	80203be <__cxa_guard_release>
 801b6f2:	4a0f      	ldr	r2, [pc, #60]	; (801b730 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b6f4:	490f      	ldr	r1, [pc, #60]	; (801b734 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b6f6:	4810      	ldr	r0, [pc, #64]	; (801b738 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b6f8:	f004 fe4e 	bl	8020398 <__aeabi_atexit>
 801b6fc:	4c0f      	ldr	r4, [pc, #60]	; (801b73c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b6fe:	7823      	ldrb	r3, [r4, #0]
 801b700:	f3bf 8f5b 	dmb	ish
 801b704:	07db      	lsls	r3, r3, #31
 801b706:	d40b      	bmi.n	801b720 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b708:	4620      	mov	r0, r4
 801b70a:	f004 fe4c 	bl	80203a6 <__cxa_guard_acquire>
 801b70e:	b138      	cbz	r0, 801b720 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b710:	4620      	mov	r0, r4
 801b712:	f004 fe54 	bl	80203be <__cxa_guard_release>
 801b716:	4a06      	ldr	r2, [pc, #24]	; (801b730 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b718:	4909      	ldr	r1, [pc, #36]	; (801b740 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b71a:	480a      	ldr	r0, [pc, #40]	; (801b744 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b71c:	f004 fe3c 	bl	8020398 <__aeabi_atexit>
 801b720:	4b05      	ldr	r3, [pc, #20]	; (801b738 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b722:	64ab      	str	r3, [r5, #72]	; 0x48
 801b724:	4b07      	ldr	r3, [pc, #28]	; (801b744 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b726:	64eb      	str	r3, [r5, #76]	; 0x4c
 801b728:	bd38      	pop	{r3, r4, r5, pc}
 801b72a:	bf00      	nop
 801b72c:	2400c880 	.word	0x2400c880
 801b730:	24000000 	.word	0x24000000
 801b734:	08019e19 	.word	0x08019e19
 801b738:	24000088 	.word	0x24000088
 801b73c:	2400c884 	.word	0x2400c884
 801b740:	08019e17 	.word	0x08019e17
 801b744:	2400008c 	.word	0x2400008c

0801b748 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801b748:	b510      	push	{r4, lr}
 801b74a:	4604      	mov	r4, r0
 801b74c:	f7ff ff88 	bl	801b660 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b750:	4620      	mov	r0, r4
 801b752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b756:	f7ff bfbd 	b.w	801b6d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801b75a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801b75a:	b510      	push	{r4, lr}
 801b75c:	4604      	mov	r4, r0
 801b75e:	f7ff fff3 	bl	801b748 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801b762:	4620      	mov	r0, r4
 801b764:	f7ff ff72 	bl	801b64c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801b768:	4620      	mov	r0, r4
 801b76a:	f7ff fe73 	bl	801b454 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801b76e:	4620      	mov	r0, r4
 801b770:	f7ff fdf2 	bl	801b358 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801b774:	4620      	mov	r0, r4
 801b776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b77a:	f7ff bee9 	b.w	801b550 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801b77e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801b77e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b782:	b087      	sub	sp, #28
 801b784:	788d      	ldrb	r5, [r1, #2]
 801b786:	f891 9000 	ldrb.w	r9, [r1]
 801b78a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b78e:	9501      	str	r5, [sp, #4]
 801b790:	784d      	ldrb	r5, [r1, #1]
 801b792:	9203      	str	r2, [sp, #12]
 801b794:	9502      	str	r5, [sp, #8]
 801b796:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801b79a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801b79e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801b7a2:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801b7a6:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801b7aa:	fb06 0708 	mla	r7, r6, r8, r0
 801b7ae:	2e00      	cmp	r6, #0
 801b7b0:	eb02 0a07 	add.w	sl, r2, r7
 801b7b4:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801b7b8:	9d01      	ldr	r5, [sp, #4]
 801b7ba:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801b7be:	ea45 0509 	orr.w	r5, r5, r9
 801b7c2:	9505      	str	r5, [sp, #20]
 801b7c4:	f2c0 80b2 	blt.w	801b92c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b7c8:	45b3      	cmp	fp, r6
 801b7ca:	f340 80af 	ble.w	801b92c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b7ce:	2800      	cmp	r0, #0
 801b7d0:	f2c0 80aa 	blt.w	801b928 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b7d4:	4580      	cmp	r8, r0
 801b7d6:	f340 80a7 	ble.w	801b928 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b7da:	9a03      	ldr	r2, [sp, #12]
 801b7dc:	5dd7      	ldrb	r7, [r2, r7]
 801b7de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b7e2:	441f      	add	r7, r3
 801b7e4:	1c42      	adds	r2, r0, #1
 801b7e6:	f100 80a4 	bmi.w	801b932 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b7ea:	4590      	cmp	r8, r2
 801b7ec:	f340 80a1 	ble.w	801b932 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b7f0:	2c00      	cmp	r4, #0
 801b7f2:	f000 809e 	beq.w	801b932 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b7f6:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b7fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b7fe:	441d      	add	r5, r3
 801b800:	3601      	adds	r6, #1
 801b802:	f100 809a 	bmi.w	801b93a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b806:	45b3      	cmp	fp, r6
 801b808:	f340 8097 	ble.w	801b93a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b80c:	f1bc 0f00 	cmp.w	ip, #0
 801b810:	f000 8093 	beq.w	801b93a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b814:	2800      	cmp	r0, #0
 801b816:	f2c0 808e 	blt.w	801b936 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b81a:	4580      	cmp	r8, r0
 801b81c:	f340 808b 	ble.w	801b936 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b820:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801b824:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b828:	441e      	add	r6, r3
 801b82a:	3001      	adds	r0, #1
 801b82c:	f100 8088 	bmi.w	801b940 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b830:	4580      	cmp	r8, r0
 801b832:	f340 8085 	ble.w	801b940 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b836:	2c00      	cmp	r4, #0
 801b838:	f000 8082 	beq.w	801b940 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b83c:	44d0      	add	r8, sl
 801b83e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b842:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b846:	4413      	add	r3, r2
 801b848:	b2a4      	uxth	r4, r4
 801b84a:	f895 a000 	ldrb.w	sl, [r5]
 801b84e:	fa1f fc8c 	uxth.w	ip, ip
 801b852:	fb04 fb0c 	mul.w	fp, r4, ip
 801b856:	0124      	lsls	r4, r4, #4
 801b858:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801b85c:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801b860:	eba4 040b 	sub.w	r4, r4, fp
 801b864:	fa1f f08c 	uxth.w	r0, ip
 801b868:	b2a2      	uxth	r2, r4
 801b86a:	783c      	ldrb	r4, [r7, #0]
 801b86c:	eba8 0800 	sub.w	r8, r8, r0
 801b870:	fa1f fc8e 	uxth.w	ip, lr
 801b874:	fb02 fa0a 	mul.w	sl, r2, sl
 801b878:	ea6f 0e0e 	mvn.w	lr, lr
 801b87c:	fa1f f888 	uxth.w	r8, r8
 801b880:	fa5f fe8e 	uxtb.w	lr, lr
 801b884:	fb08 aa04 	mla	sl, r8, r4, sl
 801b888:	7834      	ldrb	r4, [r6, #0]
 801b88a:	fb19 f90e 	smulbb	r9, r9, lr
 801b88e:	fb00 aa04 	mla	sl, r0, r4, sl
 801b892:	781c      	ldrb	r4, [r3, #0]
 801b894:	fb0b a404 	mla	r4, fp, r4, sl
 801b898:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b89c:	fb04 990c 	mla	r9, r4, ip, r9
 801b8a0:	fa1f f989 	uxth.w	r9, r9
 801b8a4:	f109 0401 	add.w	r4, r9, #1
 801b8a8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801b8ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b8b0:	f881 9000 	strb.w	r9, [r1]
 801b8b4:	f895 9001 	ldrb.w	r9, [r5, #1]
 801b8b8:	787c      	ldrb	r4, [r7, #1]
 801b8ba:	fb02 f909 	mul.w	r9, r2, r9
 801b8be:	fb08 9904 	mla	r9, r8, r4, r9
 801b8c2:	7874      	ldrb	r4, [r6, #1]
 801b8c4:	fb00 9904 	mla	r9, r0, r4, r9
 801b8c8:	785c      	ldrb	r4, [r3, #1]
 801b8ca:	fb0b 9404 	mla	r4, fp, r4, r9
 801b8ce:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801b8d2:	9c02      	ldr	r4, [sp, #8]
 801b8d4:	fb14 f90e 	smulbb	r9, r4, lr
 801b8d8:	fb0a 940c 	mla	r4, sl, ip, r9
 801b8dc:	b2a4      	uxth	r4, r4
 801b8de:	f104 0901 	add.w	r9, r4, #1
 801b8e2:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801b8e6:	1224      	asrs	r4, r4, #8
 801b8e8:	704c      	strb	r4, [r1, #1]
 801b8ea:	78ad      	ldrb	r5, [r5, #2]
 801b8ec:	78bc      	ldrb	r4, [r7, #2]
 801b8ee:	436a      	muls	r2, r5
 801b8f0:	789b      	ldrb	r3, [r3, #2]
 801b8f2:	fb08 2204 	mla	r2, r8, r4, r2
 801b8f6:	78b4      	ldrb	r4, [r6, #2]
 801b8f8:	fb00 2004 	mla	r0, r0, r4, r2
 801b8fc:	fb0b 0b03 	mla	fp, fp, r3, r0
 801b900:	9b01      	ldr	r3, [sp, #4]
 801b902:	fb13 fe0e 	smulbb	lr, r3, lr
 801b906:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801b90a:	fb0b ec0c 	mla	ip, fp, ip, lr
 801b90e:	fa1f fc8c 	uxth.w	ip, ip
 801b912:	f10c 0e01 	add.w	lr, ip, #1
 801b916:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801b91a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b91e:	f881 c002 	strb.w	ip, [r1, #2]
 801b922:	b007      	add	sp, #28
 801b924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b928:	af05      	add	r7, sp, #20
 801b92a:	e75b      	b.n	801b7e4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801b92c:	ad05      	add	r5, sp, #20
 801b92e:	462f      	mov	r7, r5
 801b930:	e766      	b.n	801b800 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801b932:	ad05      	add	r5, sp, #20
 801b934:	e764      	b.n	801b800 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801b936:	ae05      	add	r6, sp, #20
 801b938:	e777      	b.n	801b82a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801b93a:	ab05      	add	r3, sp, #20
 801b93c:	461e      	mov	r6, r3
 801b93e:	e783      	b.n	801b848 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801b940:	ab05      	add	r3, sp, #20
 801b942:	e781      	b.n	801b848 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801b944 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b948:	b093      	sub	sp, #76	; 0x4c
 801b94a:	9210      	str	r2, [sp, #64]	; 0x40
 801b94c:	9309      	str	r3, [sp, #36]	; 0x24
 801b94e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b950:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801b954:	9011      	str	r0, [sp, #68]	; 0x44
 801b956:	930e      	str	r3, [sp, #56]	; 0x38
 801b958:	6850      	ldr	r0, [r2, #4]
 801b95a:	910d      	str	r1, [sp, #52]	; 0x34
 801b95c:	6812      	ldr	r2, [r2, #0]
 801b95e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801b962:	fb00 1303 	mla	r3, r0, r3, r1
 801b966:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b96a:	18d3      	adds	r3, r2, r3
 801b96c:	930a      	str	r3, [sp, #40]	; 0x28
 801b96e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	930c      	str	r3, [sp, #48]	; 0x30
 801b974:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b976:	685c      	ldr	r4, [r3, #4]
 801b978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b97a:	3404      	adds	r4, #4
 801b97c:	43db      	mvns	r3, r3
 801b97e:	b2db      	uxtb	r3, r3
 801b980:	930b      	str	r3, [sp, #44]	; 0x2c
 801b982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b984:	2b00      	cmp	r3, #0
 801b986:	dc03      	bgt.n	801b990 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b988:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	f340 8250 	ble.w	801be30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801b990:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b992:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b996:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b99a:	1e48      	subs	r0, r1, #1
 801b99c:	1e55      	subs	r5, r2, #1
 801b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	f340 80ee 	ble.w	801bb82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b9a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b9a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b9aa:	1436      	asrs	r6, r6, #16
 801b9ac:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b9b0:	d406      	bmi.n	801b9c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b9b2:	4286      	cmp	r6, r0
 801b9b4:	da04      	bge.n	801b9c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	db02      	blt.n	801b9c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b9ba:	42ab      	cmp	r3, r5
 801b9bc:	f2c0 80e2 	blt.w	801bb84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801b9c0:	3601      	adds	r6, #1
 801b9c2:	f100 80cf 	bmi.w	801bb64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b9c6:	42b1      	cmp	r1, r6
 801b9c8:	f2c0 80cc 	blt.w	801bb64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b9cc:	3301      	adds	r3, #1
 801b9ce:	f100 80c9 	bmi.w	801bb64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b9d2:	429a      	cmp	r2, r3
 801b9d4:	f2c0 80c6 	blt.w	801bb64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b9d8:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801b9dc:	f1bb 0f00 	cmp.w	fp, #0
 801b9e0:	f340 80f1 	ble.w	801bbc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801b9e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b9e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b9e8:	9824      	ldr	r0, [sp, #144]	; 0x90
 801b9ea:	141d      	asrs	r5, r3, #16
 801b9ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b9ee:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b9f2:	68c7      	ldr	r7, [r0, #12]
 801b9f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801b9f6:	1418      	asrs	r0, r3, #16
 801b9f8:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801b9fc:	6892      	ldr	r2, [r2, #8]
 801b9fe:	f100 8137 	bmi.w	801bc70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ba02:	f102 3cff 	add.w	ip, r2, #4294967295
 801ba06:	4560      	cmp	r0, ip
 801ba08:	f280 8132 	bge.w	801bc70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ba0c:	2d00      	cmp	r5, #0
 801ba0e:	f2c0 812f 	blt.w	801bc70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ba12:	f107 3cff 	add.w	ip, r7, #4294967295
 801ba16:	4565      	cmp	r5, ip
 801ba18:	f280 812a 	bge.w	801bc70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ba1c:	b212      	sxth	r2, r2
 801ba1e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ba20:	fb05 0002 	mla	r0, r5, r2, r0
 801ba24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ba26:	f817 c000 	ldrb.w	ip, [r7, r0]
 801ba2a:	4405      	add	r5, r0
 801ba2c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ba30:	eb04 0e0c 	add.w	lr, r4, ip
 801ba34:	f1b8 0f00 	cmp.w	r8, #0
 801ba38:	f000 810c 	beq.w	801bc54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801ba3c:	786f      	ldrb	r7, [r5, #1]
 801ba3e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ba42:	4427      	add	r7, r4
 801ba44:	2900      	cmp	r1, #0
 801ba46:	f000 810d 	beq.w	801bc64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801ba4a:	18a8      	adds	r0, r5, r2
 801ba4c:	5caa      	ldrb	r2, [r5, r2]
 801ba4e:	7840      	ldrb	r0, [r0, #1]
 801ba50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ba54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ba58:	4422      	add	r2, r4
 801ba5a:	4420      	add	r0, r4
 801ba5c:	fa1f f388 	uxth.w	r3, r8
 801ba60:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801ba64:	b289      	uxth	r1, r1
 801ba66:	f897 c000 	ldrb.w	ip, [r7]
 801ba6a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801ba6e:	fb03 f901 	mul.w	r9, r3, r1
 801ba72:	011b      	lsls	r3, r3, #4
 801ba74:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ba78:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801ba7c:	eba3 0309 	sub.w	r3, r3, r9
 801ba80:	b289      	uxth	r1, r1
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	eba8 0801 	sub.w	r8, r8, r1
 801ba88:	fb03 fc0c 	mul.w	ip, r3, ip
 801ba8c:	fa1f f888 	uxth.w	r8, r8
 801ba90:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba94:	fb08 cc0a 	mla	ip, r8, sl, ip
 801ba98:	f892 a000 	ldrb.w	sl, [r2]
 801ba9c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801baa0:	f890 a000 	ldrb.w	sl, [r0]
 801baa4:	fb09 cc0a 	mla	ip, r9, sl, ip
 801baa8:	f896 a000 	ldrb.w	sl, [r6]
 801baac:	fb1a fa03 	smulbb	sl, sl, r3
 801bab0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801bab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bab6:	fb0c ac05 	mla	ip, ip, r5, sl
 801baba:	fa1f fc8c 	uxth.w	ip, ip
 801babe:	f10c 0a01 	add.w	sl, ip, #1
 801bac2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801bac6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801baca:	f886 a000 	strb.w	sl, [r6]
 801bace:	f897 c001 	ldrb.w	ip, [r7, #1]
 801bad2:	f89e a001 	ldrb.w	sl, [lr, #1]
 801bad6:	fb03 fc0c 	mul.w	ip, r3, ip
 801bada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801badc:	fb08 cc0a 	mla	ip, r8, sl, ip
 801bae0:	f892 a001 	ldrb.w	sl, [r2, #1]
 801bae4:	fb01 cc0a 	mla	ip, r1, sl, ip
 801bae8:	f890 a001 	ldrb.w	sl, [r0, #1]
 801baec:	fb09 cc0a 	mla	ip, r9, sl, ip
 801baf0:	f896 a001 	ldrb.w	sl, [r6, #1]
 801baf4:	fb1a fa03 	smulbb	sl, sl, r3
 801baf8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801bafc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bafe:	fb0c ac05 	mla	ip, ip, r5, sl
 801bb02:	fa1f fc8c 	uxth.w	ip, ip
 801bb06:	f10c 0a01 	add.w	sl, ip, #1
 801bb0a:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801bb0e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bb12:	f886 c001 	strb.w	ip, [r6, #1]
 801bb16:	78bf      	ldrb	r7, [r7, #2]
 801bb18:	f89e c002 	ldrb.w	ip, [lr, #2]
 801bb1c:	437b      	muls	r3, r7
 801bb1e:	fb08 330c 	mla	r3, r8, ip, r3
 801bb22:	f892 c002 	ldrb.w	ip, [r2, #2]
 801bb26:	7882      	ldrb	r2, [r0, #2]
 801bb28:	fb01 310c 	mla	r1, r1, ip, r3
 801bb2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb2e:	fb09 1902 	mla	r9, r9, r2, r1
 801bb32:	78b1      	ldrb	r1, [r6, #2]
 801bb34:	fb11 f103 	smulbb	r1, r1, r3
 801bb38:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801bb3c:	fb09 1505 	mla	r5, r9, r5, r1
 801bb40:	b2ad      	uxth	r5, r5
 801bb42:	1c6b      	adds	r3, r5, #1
 801bb44:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801bb48:	122d      	asrs	r5, r5, #8
 801bb4a:	70b5      	strb	r5, [r6, #2]
 801bb4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb4e:	3603      	adds	r6, #3
 801bb50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801bb52:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bb56:	4413      	add	r3, r2
 801bb58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb5a:	931d      	str	r3, [sp, #116]	; 0x74
 801bb5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bb5e:	4413      	add	r3, r2
 801bb60:	931e      	str	r3, [sp, #120]	; 0x78
 801bb62:	e73b      	b.n	801b9dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bb64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb66:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801bb68:	4433      	add	r3, r6
 801bb6a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801bb6c:	931d      	str	r3, [sp, #116]	; 0x74
 801bb6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bb70:	4433      	add	r3, r6
 801bb72:	931e      	str	r3, [sp, #120]	; 0x78
 801bb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb76:	3b01      	subs	r3, #1
 801bb78:	9309      	str	r3, [sp, #36]	; 0x24
 801bb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb7c:	3303      	adds	r3, #3
 801bb7e:	930a      	str	r3, [sp, #40]	; 0x28
 801bb80:	e70d      	b.n	801b99e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801bb82:	d028      	beq.n	801bbd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801bb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb86:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801bb88:	3b01      	subs	r3, #1
 801bb8a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801bb8c:	fb00 5003 	mla	r0, r0, r3, r5
 801bb90:	1400      	asrs	r0, r0, #16
 801bb92:	f53f af21 	bmi.w	801b9d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb96:	3901      	subs	r1, #1
 801bb98:	4288      	cmp	r0, r1
 801bb9a:	f6bf af1d 	bge.w	801b9d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb9e:	9920      	ldr	r1, [sp, #128]	; 0x80
 801bba0:	981e      	ldr	r0, [sp, #120]	; 0x78
 801bba2:	fb01 0303 	mla	r3, r1, r3, r0
 801bba6:	141b      	asrs	r3, r3, #16
 801bba8:	f53f af16 	bmi.w	801b9d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bbac:	3a01      	subs	r2, #1
 801bbae:	4293      	cmp	r3, r2
 801bbb0:	f6bf af12 	bge.w	801b9d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bbb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbb6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bbba:	1cdf      	adds	r7, r3, #3
 801bbbc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801bbc0:	f1b9 0f00 	cmp.w	r9, #0
 801bbc4:	dc73      	bgt.n	801bcae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801bbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bbca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bbce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbd2:	441a      	add	r2, r3
 801bbd4:	920a      	str	r2, [sp, #40]	; 0x28
 801bbd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	f340 8129 	ble.w	801be30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801bbde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bbe2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bbe4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bbe8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bbec:	eef0 6a62 	vmov.f32	s13, s5
 801bbf0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bbf4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bbf8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bbfc:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801bc00:	eef0 6a43 	vmov.f32	s13, s6
 801bc04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc08:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801bc0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc10:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc14:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bc24:	ee12 2a90 	vmov	r2, s5
 801bc28:	eef0 2a47 	vmov.f32	s5, s14
 801bc2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc30:	ee13 2a10 	vmov	r2, s6
 801bc34:	931f      	str	r3, [sp, #124]	; 0x7c
 801bc36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bc38:	eeb0 3a67 	vmov.f32	s6, s15
 801bc3c:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc40:	9320      	str	r3, [sp, #128]	; 0x80
 801bc42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bc46:	3b01      	subs	r3, #1
 801bc48:	930d      	str	r3, [sp, #52]	; 0x34
 801bc4a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bc4c:	bf08      	it	eq
 801bc4e:	4613      	moveq	r3, r2
 801bc50:	9309      	str	r3, [sp, #36]	; 0x24
 801bc52:	e696      	b.n	801b982 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bc54:	b149      	cbz	r1, 801bc6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801bc56:	5caa      	ldrb	r2, [r5, r2]
 801bc58:	4670      	mov	r0, lr
 801bc5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc5e:	4422      	add	r2, r4
 801bc60:	4677      	mov	r7, lr
 801bc62:	e6fb      	b.n	801ba5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801bc64:	4670      	mov	r0, lr
 801bc66:	4672      	mov	r2, lr
 801bc68:	e6f8      	b.n	801ba5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801bc6a:	4670      	mov	r0, lr
 801bc6c:	4672      	mov	r2, lr
 801bc6e:	e7f7      	b.n	801bc60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801bc70:	f110 0c01 	adds.w	ip, r0, #1
 801bc74:	f53f af6a 	bmi.w	801bb4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bc78:	4562      	cmp	r2, ip
 801bc7a:	f6ff af67 	blt.w	801bb4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bc7e:	f115 0c01 	adds.w	ip, r5, #1
 801bc82:	f53f af63 	bmi.w	801bb4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bc86:	4567      	cmp	r7, ip
 801bc88:	f6ff af60 	blt.w	801bb4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bc8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc8e:	b23f      	sxth	r7, r7
 801bc90:	b212      	sxth	r2, r2
 801bc92:	9002      	str	r0, [sp, #8]
 801bc94:	9701      	str	r7, [sp, #4]
 801bc96:	9200      	str	r2, [sp, #0]
 801bc98:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bc9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc9c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801bca0:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801bca4:	4623      	mov	r3, r4
 801bca6:	4631      	mov	r1, r6
 801bca8:	f7ff fd69 	bl	801b77e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801bcac:	e74e      	b.n	801bb4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bcae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bcb0:	981e      	ldr	r0, [sp, #120]	; 0x78
 801bcb2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bcb6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801bcb8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801bcba:	1400      	asrs	r0, r0, #16
 801bcbc:	142d      	asrs	r5, r5, #16
 801bcbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bcc0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801bcc4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801bcc8:	fb02 5000 	mla	r0, r2, r0, r5
 801bccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bcce:	f815 e000 	ldrb.w	lr, [r5, r0]
 801bcd2:	eb05 0c00 	add.w	ip, r5, r0
 801bcd6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bcda:	eb04 060e 	add.w	r6, r4, lr
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	f000 8097 	beq.w	801be12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801bce4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801bce8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bcec:	4425      	add	r5, r4
 801bcee:	2900      	cmp	r1, #0
 801bcf0:	f000 8098 	beq.w	801be24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801bcf4:	eb0c 0002 	add.w	r0, ip, r2
 801bcf8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bcfc:	7840      	ldrb	r0, [r0, #1]
 801bcfe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bd02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bd06:	4422      	add	r2, r4
 801bd08:	4420      	add	r0, r4
 801bd0a:	b29b      	uxth	r3, r3
 801bd0c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801bd10:	b289      	uxth	r1, r1
 801bd12:	f895 e000 	ldrb.w	lr, [r5]
 801bd16:	3703      	adds	r7, #3
 801bd18:	f109 39ff 	add.w	r9, r9, #4294967295
 801bd1c:	fb03 f801 	mul.w	r8, r3, r1
 801bd20:	011b      	lsls	r3, r3, #4
 801bd22:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801bd26:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801bd2a:	eba3 0308 	sub.w	r3, r3, r8
 801bd2e:	b289      	uxth	r1, r1
 801bd30:	b29b      	uxth	r3, r3
 801bd32:	ebac 0c01 	sub.w	ip, ip, r1
 801bd36:	fb03 fe0e 	mul.w	lr, r3, lr
 801bd3a:	fa1f fc8c 	uxth.w	ip, ip
 801bd3e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bd40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd42:	fb0c ee0b 	mla	lr, ip, fp, lr
 801bd46:	f892 b000 	ldrb.w	fp, [r2]
 801bd4a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801bd4e:	f890 b000 	ldrb.w	fp, [r0]
 801bd52:	fb08 ee0b 	mla	lr, r8, fp, lr
 801bd56:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801bd5a:	fb1b fb03 	smulbb	fp, fp, r3
 801bd5e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801bd62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd64:	fb0e be0a 	mla	lr, lr, sl, fp
 801bd68:	fa1f fe8e 	uxth.w	lr, lr
 801bd6c:	f10e 0b01 	add.w	fp, lr, #1
 801bd70:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bd74:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bd78:	f807 ec06 	strb.w	lr, [r7, #-6]
 801bd7c:	f895 e001 	ldrb.w	lr, [r5, #1]
 801bd80:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bd84:	fb03 fe0e 	mul.w	lr, r3, lr
 801bd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd8a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801bd8e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bd92:	fb01 ee0b 	mla	lr, r1, fp, lr
 801bd96:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bd9a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801bd9e:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801bda2:	fb1b fb03 	smulbb	fp, fp, r3
 801bda6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801bdaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdac:	fb0e be0a 	mla	lr, lr, sl, fp
 801bdb0:	fa1f fe8e 	uxth.w	lr, lr
 801bdb4:	f10e 0b01 	add.w	fp, lr, #1
 801bdb8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bdbc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bdc0:	f807 ec05 	strb.w	lr, [r7, #-5]
 801bdc4:	78ad      	ldrb	r5, [r5, #2]
 801bdc6:	78b6      	ldrb	r6, [r6, #2]
 801bdc8:	436b      	muls	r3, r5
 801bdca:	7895      	ldrb	r5, [r2, #2]
 801bdcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bdce:	fb0c 3306 	mla	r3, ip, r6, r3
 801bdd2:	fb01 3305 	mla	r3, r1, r5, r3
 801bdd6:	7885      	ldrb	r5, [r0, #2]
 801bdd8:	fb08 3805 	mla	r8, r8, r5, r3
 801bddc:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801bde0:	fb13 f302 	smulbb	r3, r3, r2
 801bde4:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801bde8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801bdea:	fb08 380a 	mla	r8, r8, sl, r3
 801bdee:	fa1f f888 	uxth.w	r8, r8
 801bdf2:	f108 0301 	add.w	r3, r8, #1
 801bdf6:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801bdfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bdfc:	4413      	add	r3, r2
 801bdfe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801be00:	ea4f 2828 	mov.w	r8, r8, asr #8
 801be04:	931d      	str	r3, [sp, #116]	; 0x74
 801be06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801be08:	f807 8c04 	strb.w	r8, [r7, #-4]
 801be0c:	4413      	add	r3, r2
 801be0e:	931e      	str	r3, [sp, #120]	; 0x78
 801be10:	e6d6      	b.n	801bbc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801be12:	b151      	cbz	r1, 801be2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801be14:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801be18:	4630      	mov	r0, r6
 801be1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801be1e:	4422      	add	r2, r4
 801be20:	4635      	mov	r5, r6
 801be22:	e772      	b.n	801bd0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801be24:	4630      	mov	r0, r6
 801be26:	4632      	mov	r2, r6
 801be28:	e76f      	b.n	801bd0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801be2a:	4630      	mov	r0, r6
 801be2c:	4632      	mov	r2, r6
 801be2e:	e7f7      	b.n	801be20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801be30:	b013      	add	sp, #76	; 0x4c
 801be32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801be36:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801be3a:	784c      	ldrb	r4, [r1, #1]
 801be3c:	f891 a002 	ldrb.w	sl, [r1, #2]
 801be40:	0224      	lsls	r4, r4, #8
 801be42:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801be46:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801be4a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801be4e:	f891 a000 	ldrb.w	sl, [r1]
 801be52:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801be56:	ea44 040a 	orr.w	r4, r4, sl
 801be5a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801be5e:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801be62:	9401      	str	r4, [sp, #4]
 801be64:	fb05 c70e 	mla	r7, r5, lr, ip
 801be68:	2d00      	cmp	r5, #0
 801be6a:	eb02 0807 	add.w	r8, r2, r7
 801be6e:	db72      	blt.n	801bf56 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801be70:	45a9      	cmp	r9, r5
 801be72:	dd70      	ble.n	801bf56 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801be74:	f1bc 0f00 	cmp.w	ip, #0
 801be78:	db6b      	blt.n	801bf52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801be7a:	45e6      	cmp	lr, ip
 801be7c:	dd69      	ble.n	801bf52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801be7e:	5dd7      	ldrb	r7, [r2, r7]
 801be80:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801be84:	441f      	add	r7, r3
 801be86:	f11c 0201 	adds.w	r2, ip, #1
 801be8a:	d467      	bmi.n	801bf5c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801be8c:	4596      	cmp	lr, r2
 801be8e:	dd65      	ble.n	801bf5c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801be90:	2800      	cmp	r0, #0
 801be92:	d063      	beq.n	801bf5c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801be94:	f898 4001 	ldrb.w	r4, [r8, #1]
 801be98:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801be9c:	441c      	add	r4, r3
 801be9e:	3501      	adds	r5, #1
 801bea0:	d460      	bmi.n	801bf64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bea2:	45a9      	cmp	r9, r5
 801bea4:	dd5e      	ble.n	801bf64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bea6:	2e00      	cmp	r6, #0
 801bea8:	d05c      	beq.n	801bf64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801beaa:	f1bc 0f00 	cmp.w	ip, #0
 801beae:	db57      	blt.n	801bf60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801beb0:	45e6      	cmp	lr, ip
 801beb2:	dd55      	ble.n	801bf60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801beb4:	f818 500e 	ldrb.w	r5, [r8, lr]
 801beb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bebc:	441d      	add	r5, r3
 801bebe:	f11c 0201 	adds.w	r2, ip, #1
 801bec2:	d452      	bmi.n	801bf6a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801bec4:	4596      	cmp	lr, r2
 801bec6:	dd50      	ble.n	801bf6a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801bec8:	2800      	cmp	r0, #0
 801beca:	d04e      	beq.n	801bf6a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801becc:	44c6      	add	lr, r8
 801bece:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bed2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bed6:	4413      	add	r3, r2
 801bed8:	b280      	uxth	r0, r0
 801beda:	f897 8000 	ldrb.w	r8, [r7]
 801bede:	b2b2      	uxth	r2, r6
 801bee0:	fb00 f602 	mul.w	r6, r0, r2
 801bee4:	0100      	lsls	r0, r0, #4
 801bee6:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801beea:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801beee:	1b80      	subs	r0, r0, r6
 801bef0:	fa1f fc82 	uxth.w	ip, r2
 801bef4:	b282      	uxth	r2, r0
 801bef6:	7820      	ldrb	r0, [r4, #0]
 801bef8:	ebae 0e0c 	sub.w	lr, lr, ip
 801befc:	4350      	muls	r0, r2
 801befe:	fa1f fe8e 	uxth.w	lr, lr
 801bf02:	fb0e 0808 	mla	r8, lr, r8, r0
 801bf06:	7828      	ldrb	r0, [r5, #0]
 801bf08:	fb0c 8800 	mla	r8, ip, r0, r8
 801bf0c:	7818      	ldrb	r0, [r3, #0]
 801bf0e:	fb06 8000 	mla	r0, r6, r0, r8
 801bf12:	1200      	asrs	r0, r0, #8
 801bf14:	7008      	strb	r0, [r1, #0]
 801bf16:	7860      	ldrb	r0, [r4, #1]
 801bf18:	f897 8001 	ldrb.w	r8, [r7, #1]
 801bf1c:	4350      	muls	r0, r2
 801bf1e:	fb0e 0808 	mla	r8, lr, r8, r0
 801bf22:	7868      	ldrb	r0, [r5, #1]
 801bf24:	fb0c 8800 	mla	r8, ip, r0, r8
 801bf28:	7858      	ldrb	r0, [r3, #1]
 801bf2a:	fb06 8000 	mla	r0, r6, r0, r8
 801bf2e:	1200      	asrs	r0, r0, #8
 801bf30:	7048      	strb	r0, [r1, #1]
 801bf32:	78a0      	ldrb	r0, [r4, #2]
 801bf34:	78bf      	ldrb	r7, [r7, #2]
 801bf36:	4350      	muls	r0, r2
 801bf38:	78aa      	ldrb	r2, [r5, #2]
 801bf3a:	fb0e 0007 	mla	r0, lr, r7, r0
 801bf3e:	fb0c 0c02 	mla	ip, ip, r2, r0
 801bf42:	789a      	ldrb	r2, [r3, #2]
 801bf44:	fb06 c202 	mla	r2, r6, r2, ip
 801bf48:	1212      	asrs	r2, r2, #8
 801bf4a:	708a      	strb	r2, [r1, #2]
 801bf4c:	b002      	add	sp, #8
 801bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf52:	af01      	add	r7, sp, #4
 801bf54:	e797      	b.n	801be86 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801bf56:	ac01      	add	r4, sp, #4
 801bf58:	4627      	mov	r7, r4
 801bf5a:	e7a0      	b.n	801be9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801bf5c:	ac01      	add	r4, sp, #4
 801bf5e:	e79e      	b.n	801be9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801bf60:	ad01      	add	r5, sp, #4
 801bf62:	e7ac      	b.n	801bebe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801bf64:	ab01      	add	r3, sp, #4
 801bf66:	461d      	mov	r5, r3
 801bf68:	e7b6      	b.n	801bed8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801bf6a:	ab01      	add	r3, sp, #4
 801bf6c:	e7b4      	b.n	801bed8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801bf6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf72:	b08d      	sub	sp, #52	; 0x34
 801bf74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf78:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801bf7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801bf7e:	900b      	str	r0, [sp, #44]	; 0x2c
 801bf80:	9306      	str	r3, [sp, #24]
 801bf82:	6850      	ldr	r0, [r2, #4]
 801bf84:	6812      	ldr	r2, [r2, #0]
 801bf86:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801bf88:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801bf8c:	fb00 1303 	mla	r3, r0, r3, r1
 801bf90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf94:	18d3      	adds	r3, r2, r3
 801bf96:	9307      	str	r3, [sp, #28]
 801bf98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	9308      	str	r3, [sp, #32]
 801bf9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bfa0:	685d      	ldr	r5, [r3, #4]
 801bfa2:	3504      	adds	r5, #4
 801bfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	dc03      	bgt.n	801bfb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bfaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	f340 81e6 	ble.w	801c37e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801bfb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bfb4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bfb8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bfbc:	1e48      	subs	r0, r1, #1
 801bfbe:	1e56      	subs	r6, r2, #1
 801bfc0:	9b06      	ldr	r3, [sp, #24]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	f340 80bd 	ble.w	801c142 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801bfc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bfca:	1427      	asrs	r7, r4, #16
 801bfcc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bfd0:	d406      	bmi.n	801bfe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfd2:	4287      	cmp	r7, r0
 801bfd4:	da04      	bge.n	801bfe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	db02      	blt.n	801bfe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfda:	42b3      	cmp	r3, r6
 801bfdc:	f2c0 80b2 	blt.w	801c144 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801bfe0:	3701      	adds	r7, #1
 801bfe2:	f100 80a1 	bmi.w	801c128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bfe6:	42b9      	cmp	r1, r7
 801bfe8:	f2c0 809e 	blt.w	801c128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bfec:	3301      	adds	r3, #1
 801bfee:	f100 809b 	bmi.w	801c128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bff2:	429a      	cmp	r2, r3
 801bff4:	f2c0 8098 	blt.w	801c128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bff8:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801bffc:	f1bb 0f00 	cmp.w	fp, #0
 801c000:	f340 80bf 	ble.w	801c182 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c004:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c006:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c008:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c00a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c00e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801c012:	1420      	asrs	r0, r4, #16
 801c014:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c016:	ea4f 4723 	mov.w	r7, r3, asr #16
 801c01a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c01e:	6892      	ldr	r2, [r2, #8]
 801c020:	f100 8103 	bmi.w	801c22a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c024:	f102 3eff 	add.w	lr, r2, #4294967295
 801c028:	4570      	cmp	r0, lr
 801c02a:	f280 80fe 	bge.w	801c22a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c02e:	2f00      	cmp	r7, #0
 801c030:	f2c0 80fb 	blt.w	801c22a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c034:	f10c 3eff 	add.w	lr, ip, #4294967295
 801c038:	4577      	cmp	r7, lr
 801c03a:	f280 80f6 	bge.w	801c22a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c03e:	b212      	sxth	r2, r2
 801c040:	fb07 0002 	mla	r0, r7, r2, r0
 801c044:	9f08      	ldr	r7, [sp, #32]
 801c046:	f817 8000 	ldrb.w	r8, [r7, r0]
 801c04a:	eb07 0e00 	add.w	lr, r7, r0
 801c04e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c052:	eb05 0c08 	add.w	ip, r5, r8
 801c056:	2b00      	cmp	r3, #0
 801c058:	f000 80d8 	beq.w	801c20c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c05c:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801c060:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c064:	442f      	add	r7, r5
 801c066:	2900      	cmp	r1, #0
 801c068:	f000 80d9 	beq.w	801c21e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c06c:	eb0e 0002 	add.w	r0, lr, r2
 801c070:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801c074:	7840      	ldrb	r0, [r0, #1]
 801c076:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c07a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c07e:	442a      	add	r2, r5
 801c080:	4428      	add	r0, r5
 801c082:	b29b      	uxth	r3, r3
 801c084:	f815 a008 	ldrb.w	sl, [r5, r8]
 801c088:	b289      	uxth	r1, r1
 801c08a:	f897 8000 	ldrb.w	r8, [r7]
 801c08e:	fb03 f901 	mul.w	r9, r3, r1
 801c092:	011b      	lsls	r3, r3, #4
 801c094:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c098:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c09c:	eba3 0309 	sub.w	r3, r3, r9
 801c0a0:	b289      	uxth	r1, r1
 801c0a2:	b29b      	uxth	r3, r3
 801c0a4:	ebae 0e01 	sub.w	lr, lr, r1
 801c0a8:	fb03 f808 	mul.w	r8, r3, r8
 801c0ac:	fa1f fe8e 	uxth.w	lr, lr
 801c0b0:	fb0e 880a 	mla	r8, lr, sl, r8
 801c0b4:	f892 a000 	ldrb.w	sl, [r2]
 801c0b8:	fb01 880a 	mla	r8, r1, sl, r8
 801c0bc:	f890 a000 	ldrb.w	sl, [r0]
 801c0c0:	fb09 880a 	mla	r8, r9, sl, r8
 801c0c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c0c8:	f886 8000 	strb.w	r8, [r6]
 801c0cc:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c0d0:	f89c a001 	ldrb.w	sl, [ip, #1]
 801c0d4:	fb03 f808 	mul.w	r8, r3, r8
 801c0d8:	fb0e 880a 	mla	r8, lr, sl, r8
 801c0dc:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c0e0:	fb01 880a 	mla	r8, r1, sl, r8
 801c0e4:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c0e8:	fb09 880a 	mla	r8, r9, sl, r8
 801c0ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c0f0:	f886 8001 	strb.w	r8, [r6, #1]
 801c0f4:	78bf      	ldrb	r7, [r7, #2]
 801c0f6:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c0fa:	437b      	muls	r3, r7
 801c0fc:	7892      	ldrb	r2, [r2, #2]
 801c0fe:	fb0e 330c 	mla	r3, lr, ip, r3
 801c102:	fb01 3102 	mla	r1, r1, r2, r3
 801c106:	7882      	ldrb	r2, [r0, #2]
 801c108:	fb09 1902 	mla	r9, r9, r2, r1
 801c10c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c110:	f886 9002 	strb.w	r9, [r6, #2]
 801c114:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c116:	3603      	adds	r6, #3
 801c118:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c11a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c11e:	441c      	add	r4, r3
 801c120:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c122:	4413      	add	r3, r2
 801c124:	9318      	str	r3, [sp, #96]	; 0x60
 801c126:	e769      	b.n	801bffc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c12a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c12c:	441c      	add	r4, r3
 801c12e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c130:	443b      	add	r3, r7
 801c132:	9318      	str	r3, [sp, #96]	; 0x60
 801c134:	9b06      	ldr	r3, [sp, #24]
 801c136:	3b01      	subs	r3, #1
 801c138:	9306      	str	r3, [sp, #24]
 801c13a:	9b07      	ldr	r3, [sp, #28]
 801c13c:	3303      	adds	r3, #3
 801c13e:	9307      	str	r3, [sp, #28]
 801c140:	e73e      	b.n	801bfc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c142:	d026      	beq.n	801c192 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c144:	9b06      	ldr	r3, [sp, #24]
 801c146:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c148:	3b01      	subs	r3, #1
 801c14a:	fb00 4003 	mla	r0, r0, r3, r4
 801c14e:	1400      	asrs	r0, r0, #16
 801c150:	f53f af52 	bmi.w	801bff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c154:	3901      	subs	r1, #1
 801c156:	4288      	cmp	r0, r1
 801c158:	f6bf af4e 	bge.w	801bff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c15c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c15e:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c160:	fb01 0303 	mla	r3, r1, r3, r0
 801c164:	141b      	asrs	r3, r3, #16
 801c166:	f53f af47 	bmi.w	801bff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c16a:	3a01      	subs	r2, #1
 801c16c:	4293      	cmp	r3, r2
 801c16e:	f6bf af43 	bge.w	801bff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c172:	9b07      	ldr	r3, [sp, #28]
 801c174:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c178:	f103 0803 	add.w	r8, r3, #3
 801c17c:	f1ba 0f00 	cmp.w	sl, #0
 801c180:	dc71      	bgt.n	801c266 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801c182:	9b06      	ldr	r3, [sp, #24]
 801c184:	9a07      	ldr	r2, [sp, #28]
 801c186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c18a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c18e:	441a      	add	r2, r3
 801c190:	9207      	str	r2, [sp, #28]
 801c192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c194:	2b00      	cmp	r3, #0
 801c196:	f340 80f2 	ble.w	801c37e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801c19a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c19e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c1a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1a4:	eeb0 6a62 	vmov.f32	s12, s5
 801c1a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c1ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c1b4:	ee16 4a10 	vmov	r4, s12
 801c1b8:	eeb0 6a43 	vmov.f32	s12, s6
 801c1bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c1c0:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801c1c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1dc:	ee12 2a90 	vmov	r2, s5
 801c1e0:	eef0 2a47 	vmov.f32	s5, s14
 801c1e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1e8:	ee13 2a10 	vmov	r2, s6
 801c1ec:	9319      	str	r3, [sp, #100]	; 0x64
 801c1ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c1f0:	eeb0 3a67 	vmov.f32	s6, s15
 801c1f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1f8:	931a      	str	r3, [sp, #104]	; 0x68
 801c1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c1fe:	3b01      	subs	r3, #1
 801c200:	9309      	str	r3, [sp, #36]	; 0x24
 801c202:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c204:	bf08      	it	eq
 801c206:	4613      	moveq	r3, r2
 801c208:	9306      	str	r3, [sp, #24]
 801c20a:	e6cb      	b.n	801bfa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c20c:	b151      	cbz	r1, 801c224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c20e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801c212:	4660      	mov	r0, ip
 801c214:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c218:	442a      	add	r2, r5
 801c21a:	4667      	mov	r7, ip
 801c21c:	e731      	b.n	801c082 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c21e:	4660      	mov	r0, ip
 801c220:	4662      	mov	r2, ip
 801c222:	e72e      	b.n	801c082 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c224:	4660      	mov	r0, ip
 801c226:	4662      	mov	r2, ip
 801c228:	e7f7      	b.n	801c21a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801c22a:	f110 0e01 	adds.w	lr, r0, #1
 801c22e:	f53f af71 	bmi.w	801c114 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c232:	4572      	cmp	r2, lr
 801c234:	f6ff af6e 	blt.w	801c114 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c238:	f117 0e01 	adds.w	lr, r7, #1
 801c23c:	f53f af6a 	bmi.w	801c114 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c240:	45f4      	cmp	ip, lr
 801c242:	f6ff af67 	blt.w	801c114 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c246:	b212      	sxth	r2, r2
 801c248:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801c24c:	fa0f f38c 	sxth.w	r3, ip
 801c250:	9200      	str	r2, [sp, #0]
 801c252:	4631      	mov	r1, r6
 801c254:	9a08      	ldr	r2, [sp, #32]
 801c256:	9301      	str	r3, [sp, #4]
 801c258:	462b      	mov	r3, r5
 801c25a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801c25e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c260:	f7ff fde9 	bl	801be36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801c264:	e756      	b.n	801c114 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c266:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c268:	1426      	asrs	r6, r4, #16
 801c26a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c26c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c270:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c274:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c276:	1400      	asrs	r0, r0, #16
 801c278:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c27c:	fb02 6000 	mla	r0, r2, r0, r6
 801c280:	9e08      	ldr	r6, [sp, #32]
 801c282:	f816 e000 	ldrb.w	lr, [r6, r0]
 801c286:	eb06 0c00 	add.w	ip, r6, r0
 801c28a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c28e:	eb05 070e 	add.w	r7, r5, lr
 801c292:	2b00      	cmp	r3, #0
 801c294:	d064      	beq.n	801c360 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801c296:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801c29a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c29e:	442e      	add	r6, r5
 801c2a0:	2900      	cmp	r1, #0
 801c2a2:	d066      	beq.n	801c372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801c2a4:	eb0c 0002 	add.w	r0, ip, r2
 801c2a8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c2ac:	7840      	ldrb	r0, [r0, #1]
 801c2ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c2b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c2b6:	442a      	add	r2, r5
 801c2b8:	4428      	add	r0, r5
 801c2ba:	b29b      	uxth	r3, r3
 801c2bc:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801c2c0:	b289      	uxth	r1, r1
 801c2c2:	f896 e000 	ldrb.w	lr, [r6]
 801c2c6:	f108 0803 	add.w	r8, r8, #3
 801c2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c2ce:	fb03 f901 	mul.w	r9, r3, r1
 801c2d2:	011b      	lsls	r3, r3, #4
 801c2d4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c2d8:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801c2dc:	eba3 0309 	sub.w	r3, r3, r9
 801c2e0:	b289      	uxth	r1, r1
 801c2e2:	b29b      	uxth	r3, r3
 801c2e4:	ebac 0c01 	sub.w	ip, ip, r1
 801c2e8:	fb03 fe0e 	mul.w	lr, r3, lr
 801c2ec:	fa1f fc8c 	uxth.w	ip, ip
 801c2f0:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c2f4:	f892 b000 	ldrb.w	fp, [r2]
 801c2f8:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c2fc:	f890 b000 	ldrb.w	fp, [r0]
 801c300:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c304:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c308:	f808 ec06 	strb.w	lr, [r8, #-6]
 801c30c:	f896 e001 	ldrb.w	lr, [r6, #1]
 801c310:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c314:	fb03 fe0e 	mul.w	lr, r3, lr
 801c318:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c31c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c320:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c324:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c328:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c32c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c330:	f808 ec05 	strb.w	lr, [r8, #-5]
 801c334:	78b6      	ldrb	r6, [r6, #2]
 801c336:	78bf      	ldrb	r7, [r7, #2]
 801c338:	4373      	muls	r3, r6
 801c33a:	7896      	ldrb	r6, [r2, #2]
 801c33c:	7882      	ldrb	r2, [r0, #2]
 801c33e:	fb0c 3307 	mla	r3, ip, r7, r3
 801c342:	fb01 3306 	mla	r3, r1, r6, r3
 801c346:	fb09 3902 	mla	r9, r9, r2, r3
 801c34a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c34c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c34e:	441c      	add	r4, r3
 801c350:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c352:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c356:	4413      	add	r3, r2
 801c358:	f808 9c04 	strb.w	r9, [r8, #-4]
 801c35c:	9318      	str	r3, [sp, #96]	; 0x60
 801c35e:	e70d      	b.n	801c17c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801c360:	b151      	cbz	r1, 801c378 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801c362:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c366:	4638      	mov	r0, r7
 801c368:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c36c:	442a      	add	r2, r5
 801c36e:	463e      	mov	r6, r7
 801c370:	e7a3      	b.n	801c2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c372:	4638      	mov	r0, r7
 801c374:	463a      	mov	r2, r7
 801c376:	e7a0      	b.n	801c2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c378:	4638      	mov	r0, r7
 801c37a:	463a      	mov	r2, r7
 801c37c:	e7f7      	b.n	801c36e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801c37e:	b00d      	add	sp, #52	; 0x34
 801c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c384 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801c384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c388:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801c38c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c390:	2d00      	cmp	r5, #0
 801c392:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801c396:	fb05 700c 	mla	r0, r5, ip, r7
 801c39a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801c39e:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801c3a2:	eb02 0800 	add.w	r8, r2, r0
 801c3a6:	f2c0 8118 	blt.w	801c5da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c3aa:	45a9      	cmp	r9, r5
 801c3ac:	f340 8115 	ble.w	801c5da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c3b0:	2f00      	cmp	r7, #0
 801c3b2:	f2c0 8110 	blt.w	801c5d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c3b6:	45bc      	cmp	ip, r7
 801c3b8:	f340 810d 	ble.w	801c5d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c3bc:	5c12      	ldrb	r2, [r2, r0]
 801c3be:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801c3c2:	1c7a      	adds	r2, r7, #1
 801c3c4:	f100 810c 	bmi.w	801c5e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c3c8:	4594      	cmp	ip, r2
 801c3ca:	f340 8109 	ble.w	801c5e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c3ce:	2c00      	cmp	r4, #0
 801c3d0:	f000 8108 	beq.w	801c5e4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801c3d4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c3d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c3dc:	3501      	adds	r5, #1
 801c3de:	f100 8105 	bmi.w	801c5ec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c3e2:	45a9      	cmp	r9, r5
 801c3e4:	f340 8102 	ble.w	801c5ec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c3e8:	f1be 0f00 	cmp.w	lr, #0
 801c3ec:	f000 8101 	beq.w	801c5f2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801c3f0:	2f00      	cmp	r7, #0
 801c3f2:	f2c0 80f9 	blt.w	801c5e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c3f6:	45bc      	cmp	ip, r7
 801c3f8:	f340 80f6 	ble.w	801c5e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c3fc:	f818 200c 	ldrb.w	r2, [r8, ip]
 801c400:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c404:	3701      	adds	r7, #1
 801c406:	f100 80f7 	bmi.w	801c5f8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c40a:	45bc      	cmp	ip, r7
 801c40c:	f340 80f4 	ble.w	801c5f8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c410:	2c00      	cmp	r4, #0
 801c412:	f000 80f3 	beq.w	801c5fc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801c416:	44c4      	add	ip, r8
 801c418:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c41c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c420:	fa1f fc84 	uxth.w	ip, r4
 801c424:	fa1f f48e 	uxth.w	r4, lr
 801c428:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801c42c:	fb04 fe0c 	mul.w	lr, r4, ip
 801c430:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c434:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801c438:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801c43c:	ebac 070e 	sub.w	r7, ip, lr
 801c440:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801c444:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801c448:	b2a4      	uxth	r4, r4
 801c44a:	b2bf      	uxth	r7, r7
 801c44c:	1b1b      	subs	r3, r3, r4
 801c44e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c452:	fb07 fc0a 	mul.w	ip, r7, sl
 801c456:	b29b      	uxth	r3, r3
 801c458:	fb03 cc0b 	mla	ip, r3, fp, ip
 801c45c:	9300      	str	r3, [sp, #0]
 801c45e:	fb04 cc09 	mla	ip, r4, r9, ip
 801c462:	fb0e cc08 	mla	ip, lr, r8, ip
 801c466:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c46a:	9301      	str	r3, [sp, #4]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	f000 80af 	beq.w	801c5d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801c472:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c476:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c47a:	fb0b fc0c 	mul.w	ip, fp, ip
 801c47e:	fb0b f606 	mul.w	r6, fp, r6
 801c482:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c486:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c48a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801c48e:	44dc      	add	ip, fp
 801c490:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801c494:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c498:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c49c:	fb0a fb0b 	mul.w	fp, sl, fp
 801c4a0:	fb0a fa00 	mul.w	sl, sl, r0
 801c4a4:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801c4a8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c4ac:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801c4b0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c4b4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c4b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c4bc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c4c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c4c4:	0a36      	lsrs	r6, r6, #8
 801c4c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c4ca:	44dc      	add	ip, fp
 801c4cc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801c4d0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c4d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c4d8:	fb09 fb0b 	mul.w	fp, r9, fp
 801c4dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c4e0:	fb09 f905 	mul.w	r9, r9, r5
 801c4e4:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801c4e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c4ec:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801c4f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c4f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c4f8:	fb0c fc07 	mul.w	ip, ip, r7
 801c4fc:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801c500:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801c504:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c508:	4458      	add	r0, fp
 801c50a:	fb08 f505 	mul.w	r5, r8, r5
 801c50e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c512:	fb08 f802 	mul.w	r8, r8, r2
 801c516:	0a00      	lsrs	r0, r0, #8
 801c518:	0a2a      	lsrs	r2, r5, #8
 801c51a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801c51e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c522:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c526:	4415      	add	r5, r2
 801c528:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801c52c:	0a2d      	lsrs	r5, r5, #8
 801c52e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c532:	9a00      	ldr	r2, [sp, #0]
 801c534:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c538:	fb03 cc02 	mla	ip, r3, r2, ip
 801c53c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c540:	9b01      	ldr	r3, [sp, #4]
 801c542:	fb05 c50e 	mla	r5, r5, lr, ip
 801c546:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c54a:	fb00 5004 	mla	r0, r0, r4, r5
 801c54e:	0a00      	lsrs	r0, r0, #8
 801c550:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801c554:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801c558:	4378      	muls	r0, r7
 801c55a:	fb02 0006 	mla	r0, r2, r6, r0
 801c55e:	fb0e 0e08 	mla	lr, lr, r8, r0
 801c562:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801c566:	fb04 e000 	mla	r0, r4, r0, lr
 801c56a:	0a00      	lsrs	r0, r0, #8
 801c56c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c570:	4328      	orrs	r0, r5
 801c572:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801c576:	b2ad      	uxth	r5, r5
 801c578:	b2c4      	uxtb	r4, r0
 801c57a:	436b      	muls	r3, r5
 801c57c:	fb14 f405 	smulbb	r4, r4, r5
 801c580:	1c5a      	adds	r2, r3, #1
 801c582:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c586:	780b      	ldrb	r3, [r1, #0]
 801c588:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801c58c:	b2d2      	uxtb	r2, r2
 801c58e:	fb03 4302 	mla	r3, r3, r2, r4
 801c592:	b29b      	uxth	r3, r3
 801c594:	1c5c      	adds	r4, r3, #1
 801c596:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c59a:	784c      	ldrb	r4, [r1, #1]
 801c59c:	fb14 f402 	smulbb	r4, r4, r2
 801c5a0:	121b      	asrs	r3, r3, #8
 801c5a2:	700b      	strb	r3, [r1, #0]
 801c5a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801c5a8:	fb03 4305 	mla	r3, r3, r5, r4
 801c5ac:	b29b      	uxth	r3, r3
 801c5ae:	1c5c      	adds	r4, r3, #1
 801c5b0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c5b4:	0c04      	lsrs	r4, r0, #16
 801c5b6:	7888      	ldrb	r0, [r1, #2]
 801c5b8:	121b      	asrs	r3, r3, #8
 801c5ba:	fb10 f002 	smulbb	r0, r0, r2
 801c5be:	704b      	strb	r3, [r1, #1]
 801c5c0:	fb04 0005 	mla	r0, r4, r5, r0
 801c5c4:	b280      	uxth	r0, r0
 801c5c6:	1c43      	adds	r3, r0, #1
 801c5c8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c5cc:	1200      	asrs	r0, r0, #8
 801c5ce:	7088      	strb	r0, [r1, #2]
 801c5d0:	b003      	add	sp, #12
 801c5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d6:	2600      	movs	r6, #0
 801c5d8:	e6f3      	b.n	801c3c2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801c5da:	2000      	movs	r0, #0
 801c5dc:	4606      	mov	r6, r0
 801c5de:	e6fd      	b.n	801c3dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c5e0:	2000      	movs	r0, #0
 801c5e2:	e6fb      	b.n	801c3dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	e6f9      	b.n	801c3dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c5e8:	2500      	movs	r5, #0
 801c5ea:	e70b      	b.n	801c404 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801c5ec:	2200      	movs	r2, #0
 801c5ee:	4615      	mov	r5, r2
 801c5f0:	e716      	b.n	801c420 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c5f2:	4672      	mov	r2, lr
 801c5f4:	4675      	mov	r5, lr
 801c5f6:	e713      	b.n	801c420 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c5f8:	2200      	movs	r2, #0
 801c5fa:	e711      	b.n	801c420 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c5fc:	4622      	mov	r2, r4
 801c5fe:	e70f      	b.n	801c420 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801c600 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c604:	b09f      	sub	sp, #124	; 0x7c
 801c606:	921b      	str	r2, [sp, #108]	; 0x6c
 801c608:	9309      	str	r3, [sp, #36]	; 0x24
 801c60a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c60c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801c610:	901d      	str	r0, [sp, #116]	; 0x74
 801c612:	931c      	str	r3, [sp, #112]	; 0x70
 801c614:	6850      	ldr	r0, [r2, #4]
 801c616:	9119      	str	r1, [sp, #100]	; 0x64
 801c618:	6812      	ldr	r2, [r2, #0]
 801c61a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801c61c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801c620:	fb00 1303 	mla	r3, r0, r3, r1
 801c624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c628:	18d3      	adds	r3, r2, r3
 801c62a:	930c      	str	r3, [sp, #48]	; 0x30
 801c62c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	9312      	str	r3, [sp, #72]	; 0x48
 801c632:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c634:	685e      	ldr	r6, [r3, #4]
 801c636:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801c63a:	3604      	adds	r6, #4
 801c63c:	930d      	str	r3, [sp, #52]	; 0x34
 801c63e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c640:	2b00      	cmp	r3, #0
 801c642:	dc03      	bgt.n	801c64c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c646:	2b00      	cmp	r3, #0
 801c648:	f340 8378 	ble.w	801cd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c64c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c64e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c652:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c656:	1e48      	subs	r0, r1, #1
 801c658:	1e57      	subs	r7, r2, #1
 801c65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	f340 818c 	ble.w	801c97a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801c662:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c664:	142b      	asrs	r3, r5, #16
 801c666:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c66a:	d406      	bmi.n	801c67a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c66c:	4584      	cmp	ip, r0
 801c66e:	da04      	bge.n	801c67a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c670:	2b00      	cmp	r3, #0
 801c672:	db02      	blt.n	801c67a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c674:	42bb      	cmp	r3, r7
 801c676:	f2c0 8181 	blt.w	801c97c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801c67a:	f11c 0c01 	adds.w	ip, ip, #1
 801c67e:	f100 816f 	bmi.w	801c960 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c682:	4561      	cmp	r1, ip
 801c684:	f2c0 816c 	blt.w	801c960 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c688:	3301      	adds	r3, #1
 801c68a:	f100 8169 	bmi.w	801c960 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c68e:	429a      	cmp	r2, r3
 801c690:	f2c0 8166 	blt.w	801c960 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c696:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c698:	931a      	str	r3, [sp, #104]	; 0x68
 801c69a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	f340 818c 	ble.w	801c9ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801c6a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c6a4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c6a8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c6ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c6b0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c6b2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801c6b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c6b8:	141b      	asrs	r3, r3, #16
 801c6ba:	f100 81d0 	bmi.w	801ca5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c6be:	f100 38ff 	add.w	r8, r0, #4294967295
 801c6c2:	4543      	cmp	r3, r8
 801c6c4:	f280 81cb 	bge.w	801ca5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c6c8:	f1bc 0f00 	cmp.w	ip, #0
 801c6cc:	f2c0 81c7 	blt.w	801ca5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c6d0:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c6d4:	45c4      	cmp	ip, r8
 801c6d6:	f280 81c2 	bge.w	801ca5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c6da:	b200      	sxth	r0, r0
 801c6dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c6de:	fb0c 3300 	mla	r3, ip, r0, r3
 801c6e2:	eb04 0803 	add.w	r8, r4, r3
 801c6e6:	5ce3      	ldrb	r3, [r4, r3]
 801c6e8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c6ec:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c6f0:	2a00      	cmp	r2, #0
 801c6f2:	f000 81a9 	beq.w	801ca48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801c6f6:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c6fa:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c6fe:	940e      	str	r4, [sp, #56]	; 0x38
 801c700:	0e24      	lsrs	r4, r4, #24
 801c702:	9415      	str	r4, [sp, #84]	; 0x54
 801c704:	b179      	cbz	r1, 801c726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c706:	eb08 0c00 	add.w	ip, r8, r0
 801c70a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c70e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c712:	900a      	str	r0, [sp, #40]	; 0x28
 801c714:	0e00      	lsrs	r0, r0, #24
 801c716:	9013      	str	r0, [sp, #76]	; 0x4c
 801c718:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801c71c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c720:	900f      	str	r0, [sp, #60]	; 0x3c
 801c722:	0e00      	lsrs	r0, r0, #24
 801c724:	9016      	str	r0, [sp, #88]	; 0x58
 801c726:	b292      	uxth	r2, r2
 801c728:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c72a:	b289      	uxth	r1, r1
 801c72c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c72e:	fb02 f901 	mul.w	r9, r2, r1
 801c732:	0112      	lsls	r2, r2, #4
 801c734:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c738:	eba2 0809 	sub.w	r8, r2, r9
 801c73c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c740:	b289      	uxth	r1, r1
 801c742:	fa1f f888 	uxth.w	r8, r8
 801c746:	1a52      	subs	r2, r2, r1
 801c748:	fb08 f000 	mul.w	r0, r8, r0
 801c74c:	b292      	uxth	r2, r2
 801c74e:	fb02 000e 	mla	r0, r2, lr, r0
 801c752:	fb01 0004 	mla	r0, r1, r4, r0
 801c756:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c758:	fb09 0004 	mla	r0, r9, r4, r0
 801c75c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c760:	2800      	cmp	r0, #0
 801c762:	f000 80f2 	beq.w	801c94a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c766:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c76a:	d01b      	beq.n	801c7a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c76c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c774:	fb0e fa0a 	mul.w	sl, lr, sl
 801c778:	fb0e fe03 	mul.w	lr, lr, r3
 801c77c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c780:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c784:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c788:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c78c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c790:	4453      	add	r3, sl
 801c792:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c796:	0a1b      	lsrs	r3, r3, #8
 801c798:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c79c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c7a0:	ea43 030c 	orr.w	r3, r3, ip
 801c7a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c7a6:	2cff      	cmp	r4, #255	; 0xff
 801c7a8:	d021      	beq.n	801c7ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801c7aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c7ac:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c7b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c7b2:	fb04 fb0b 	mul.w	fp, r4, fp
 801c7b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c7b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c7bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c7be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c7c2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c7c6:	fb04 fa0a 	mul.w	sl, r4, sl
 801c7ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c7ce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c7d2:	44de      	add	lr, fp
 801c7d4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c7d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c7dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c7e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c7e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c7e8:	ea4e 040a 	orr.w	r4, lr, sl
 801c7ec:	940e      	str	r4, [sp, #56]	; 0x38
 801c7ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7f0:	2cff      	cmp	r4, #255	; 0xff
 801c7f2:	d021      	beq.n	801c838 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c7f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c7f6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c7fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7fc:	fb04 fb0b 	mul.w	fp, r4, fp
 801c800:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c802:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c806:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c808:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c80c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c810:	fb04 fa0a 	mul.w	sl, r4, sl
 801c814:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c818:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c81c:	44de      	add	lr, fp
 801c81e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c822:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c826:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c82a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c82e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c832:	ea4e 040a 	orr.w	r4, lr, sl
 801c836:	940a      	str	r4, [sp, #40]	; 0x28
 801c838:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c83a:	2cff      	cmp	r4, #255	; 0xff
 801c83c:	d021      	beq.n	801c882 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c83e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c840:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c844:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c846:	fb04 fb0b 	mul.w	fp, r4, fp
 801c84a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c84c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c850:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c852:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c856:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c85a:	fb04 fa0a 	mul.w	sl, r4, sl
 801c85e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c862:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c866:	44de      	add	lr, fp
 801c868:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c86c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c870:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c874:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c878:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c87c:	ea4e 040a 	orr.w	r4, lr, sl
 801c880:	940f      	str	r4, [sp, #60]	; 0x3c
 801c882:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c884:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c88c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c890:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c892:	fb08 fc0c 	mul.w	ip, r8, ip
 801c896:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c89a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c89e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c8a0:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c8a4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c8a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c8aa:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c8ae:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c8b2:	fb08 f80e 	mul.w	r8, r8, lr
 801c8b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c8ba:	fb02 8303 	mla	r3, r2, r3, r8
 801c8be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c8c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c8c4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c8c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c8ca:	fb01 330a 	mla	r3, r1, sl, r3
 801c8ce:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801c8d2:	fb09 3901 	mla	r9, r9, r1, r3
 801c8d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c8da:	4343      	muls	r3, r0
 801c8dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c8e0:	1c58      	adds	r0, r3, #1
 801c8e2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c8e6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c8ea:	ea4c 0c09 	orr.w	ip, ip, r9
 801c8ee:	783b      	ldrb	r3, [r7, #0]
 801c8f0:	fa5f f28c 	uxtb.w	r2, ip
 801c8f4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c8f8:	fb12 f201 	smulbb	r2, r2, r1
 801c8fc:	b2c0      	uxtb	r0, r0
 801c8fe:	fb03 2300 	mla	r3, r3, r0, r2
 801c902:	b29b      	uxth	r3, r3
 801c904:	1c5a      	adds	r2, r3, #1
 801c906:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c90a:	787a      	ldrb	r2, [r7, #1]
 801c90c:	fb12 f200 	smulbb	r2, r2, r0
 801c910:	121b      	asrs	r3, r3, #8
 801c912:	703b      	strb	r3, [r7, #0]
 801c914:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c918:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c91c:	fb03 2301 	mla	r3, r3, r1, r2
 801c920:	b29b      	uxth	r3, r3
 801c922:	1c5a      	adds	r2, r3, #1
 801c924:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c928:	121b      	asrs	r3, r3, #8
 801c92a:	707b      	strb	r3, [r7, #1]
 801c92c:	78bb      	ldrb	r3, [r7, #2]
 801c92e:	fb13 f000 	smulbb	r0, r3, r0
 801c932:	fb0c 0c01 	mla	ip, ip, r1, r0
 801c936:	fa1f fc8c 	uxth.w	ip, ip
 801c93a:	f10c 0301 	add.w	r3, ip, #1
 801c93e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c942:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c946:	f887 c002 	strb.w	ip, [r7, #2]
 801c94a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c94c:	3703      	adds	r7, #3
 801c94e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c950:	441a      	add	r2, r3
 801c952:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c954:	441d      	add	r5, r3
 801c956:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c958:	9229      	str	r2, [sp, #164]	; 0xa4
 801c95a:	3b01      	subs	r3, #1
 801c95c:	931a      	str	r3, [sp, #104]	; 0x68
 801c95e:	e69c      	b.n	801c69a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c960:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c962:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c964:	441c      	add	r4, r3
 801c966:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c968:	441d      	add	r5, r3
 801c96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c96c:	9429      	str	r4, [sp, #164]	; 0xa4
 801c96e:	3b01      	subs	r3, #1
 801c970:	9309      	str	r3, [sp, #36]	; 0x24
 801c972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c974:	3303      	adds	r3, #3
 801c976:	930c      	str	r3, [sp, #48]	; 0x30
 801c978:	e66f      	b.n	801c65a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c97a:	d026      	beq.n	801c9ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801c97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c97e:	982b      	ldr	r0, [sp, #172]	; 0xac
 801c980:	3b01      	subs	r3, #1
 801c982:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c984:	fb00 4003 	mla	r0, r0, r3, r4
 801c988:	1400      	asrs	r0, r0, #16
 801c98a:	f53f ae83 	bmi.w	801c694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c98e:	3901      	subs	r1, #1
 801c990:	4288      	cmp	r0, r1
 801c992:	f6bf ae7f 	bge.w	801c694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c996:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801c998:	fb01 5303 	mla	r3, r1, r3, r5
 801c99c:	141b      	asrs	r3, r3, #16
 801c99e:	f53f ae79 	bmi.w	801c694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c9a2:	3a01      	subs	r2, #1
 801c9a4:	4293      	cmp	r3, r2
 801c9a6:	f6bf ae75 	bge.w	801c694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c9aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9ac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c9b0:	f103 0e03 	add.w	lr, r3, #3
 801c9b4:	f1bb 0f00 	cmp.w	fp, #0
 801c9b8:	dc71      	bgt.n	801ca9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801c9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c9c6:	4423      	add	r3, r4
 801c9c8:	930c      	str	r3, [sp, #48]	; 0x30
 801c9ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	f340 81b5 	ble.w	801cd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c9d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c9d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c9d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c9dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c9e0:	eef0 6a62 	vmov.f32	s13, s5
 801c9e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c9e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c9ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c9f0:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801c9f4:	eef0 6a43 	vmov.f32	s13, s6
 801c9f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c9fc:	ee16 5a90 	vmov	r5, s13
 801ca00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca04:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca08:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca18:	ee12 2a90 	vmov	r2, s5
 801ca1c:	eef0 2a47 	vmov.f32	s5, s14
 801ca20:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca24:	ee13 2a10 	vmov	r2, s6
 801ca28:	932b      	str	r3, [sp, #172]	; 0xac
 801ca2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ca2c:	eeb0 3a67 	vmov.f32	s6, s15
 801ca30:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca34:	932c      	str	r3, [sp, #176]	; 0xb0
 801ca36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ca38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ca3a:	3b01      	subs	r3, #1
 801ca3c:	9319      	str	r3, [sp, #100]	; 0x64
 801ca3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ca40:	bf08      	it	eq
 801ca42:	4613      	moveq	r3, r2
 801ca44:	9309      	str	r3, [sp, #36]	; 0x24
 801ca46:	e5fa      	b.n	801c63e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ca48:	2900      	cmp	r1, #0
 801ca4a:	f43f ae6c 	beq.w	801c726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ca4e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ca52:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ca56:	900a      	str	r0, [sp, #40]	; 0x28
 801ca58:	0e00      	lsrs	r0, r0, #24
 801ca5a:	9013      	str	r0, [sp, #76]	; 0x4c
 801ca5c:	e663      	b.n	801c726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ca5e:	f113 0801 	adds.w	r8, r3, #1
 801ca62:	f53f af72 	bmi.w	801c94a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ca66:	4540      	cmp	r0, r8
 801ca68:	f6ff af6f 	blt.w	801c94a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ca6c:	f11c 0801 	adds.w	r8, ip, #1
 801ca70:	f53f af6b 	bmi.w	801c94a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ca74:	45c6      	cmp	lr, r8
 801ca76:	f6ff af68 	blt.w	801c94a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ca7a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ca7c:	b200      	sxth	r0, r0
 801ca7e:	9302      	str	r3, [sp, #8]
 801ca80:	fa0f f38e 	sxth.w	r3, lr
 801ca84:	9000      	str	r0, [sp, #0]
 801ca86:	9301      	str	r3, [sp, #4]
 801ca88:	4633      	mov	r3, r6
 801ca8a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ca8c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ca90:	e9cd c203 	strd	ip, r2, [sp, #12]
 801ca94:	4639      	mov	r1, r7
 801ca96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ca98:	f7ff fc74 	bl	801c384 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801ca9c:	e755      	b.n	801c94a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ca9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801caa0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801caa4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801caa6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801caaa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801caac:	1427      	asrs	r7, r4, #16
 801caae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cab0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cab4:	142b      	asrs	r3, r5, #16
 801cab6:	fb01 7303 	mla	r3, r1, r3, r7
 801caba:	18e7      	adds	r7, r4, r3
 801cabc:	5ce3      	ldrb	r3, [r4, r3]
 801cabe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cac2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801cac6:	2a00      	cmp	r2, #0
 801cac8:	f000 812e 	beq.w	801cd28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801cacc:	f897 8001 	ldrb.w	r8, [r7, #1]
 801cad0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801cad4:	9410      	str	r4, [sp, #64]	; 0x40
 801cad6:	0e24      	lsrs	r4, r4, #24
 801cad8:	9417      	str	r4, [sp, #92]	; 0x5c
 801cada:	b170      	cbz	r0, 801cafa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801cadc:	eb07 0801 	add.w	r8, r7, r1
 801cae0:	5c79      	ldrb	r1, [r7, r1]
 801cae2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cae6:	910b      	str	r1, [sp, #44]	; 0x2c
 801cae8:	0e09      	lsrs	r1, r1, #24
 801caea:	9114      	str	r1, [sp, #80]	; 0x50
 801caec:	f898 1001 	ldrb.w	r1, [r8, #1]
 801caf0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801caf4:	9111      	str	r1, [sp, #68]	; 0x44
 801caf6:	0e09      	lsrs	r1, r1, #24
 801caf8:	9118      	str	r1, [sp, #96]	; 0x60
 801cafa:	b292      	uxth	r2, r2
 801cafc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801cafe:	b280      	uxth	r0, r0
 801cb00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb02:	fb02 f900 	mul.w	r9, r2, r0
 801cb06:	0112      	lsls	r2, r2, #4
 801cb08:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801cb0c:	eba2 0809 	sub.w	r8, r2, r9
 801cb10:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801cb14:	b280      	uxth	r0, r0
 801cb16:	fa1f f888 	uxth.w	r8, r8
 801cb1a:	1a12      	subs	r2, r2, r0
 801cb1c:	fb08 f101 	mul.w	r1, r8, r1
 801cb20:	b292      	uxth	r2, r2
 801cb22:	fb02 110c 	mla	r1, r2, ip, r1
 801cb26:	fb00 1104 	mla	r1, r0, r4, r1
 801cb2a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cb2c:	fb09 1104 	mla	r1, r9, r4, r1
 801cb30:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cb34:	2900      	cmp	r1, #0
 801cb36:	f000 80ec 	beq.w	801cd12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801cb3a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cb3e:	d019      	beq.n	801cb74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801cb40:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cb44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cb48:	fb0c fa0a 	mul.w	sl, ip, sl
 801cb4c:	fb0c fc03 	mul.w	ip, ip, r3
 801cb50:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cb54:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cb58:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801cb5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cb60:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801cb64:	4453      	add	r3, sl
 801cb66:	0a3f      	lsrs	r7, r7, #8
 801cb68:	0a1b      	lsrs	r3, r3, #8
 801cb6a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cb6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cb72:	433b      	orrs	r3, r7
 801cb74:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cb76:	2cff      	cmp	r4, #255	; 0xff
 801cb78:	d020      	beq.n	801cbbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801cb7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cb7c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cb80:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cb82:	4367      	muls	r7, r4
 801cb84:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cb86:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cb8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cb8e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cb90:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cb94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cb98:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb9c:	44bc      	add	ip, r7
 801cb9e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cba2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cba6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cbaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cbae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cbb2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cbb6:	ea4c 040a 	orr.w	r4, ip, sl
 801cbba:	9410      	str	r4, [sp, #64]	; 0x40
 801cbbc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cbbe:	2cff      	cmp	r4, #255	; 0xff
 801cbc0:	d020      	beq.n	801cc04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801cbc2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cbc4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cbc8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cbca:	4367      	muls	r7, r4
 801cbcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cbce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cbd2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cbd6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cbd8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cbdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cbe0:	fb04 fa0a 	mul.w	sl, r4, sl
 801cbe4:	44bc      	add	ip, r7
 801cbe6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cbea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cbee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cbf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cbf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cbfa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cbfe:	ea4c 040a 	orr.w	r4, ip, sl
 801cc02:	940b      	str	r4, [sp, #44]	; 0x2c
 801cc04:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cc06:	2cff      	cmp	r4, #255	; 0xff
 801cc08:	d020      	beq.n	801cc4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801cc0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cc0c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cc10:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cc12:	4367      	muls	r7, r4
 801cc14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cc16:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cc1a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cc1e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cc20:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cc24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc28:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc2c:	44bc      	add	ip, r7
 801cc2e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cc32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc36:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cc3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc46:	ea4c 040a 	orr.w	r4, ip, sl
 801cc4a:	9411      	str	r4, [sp, #68]	; 0x44
 801cc4c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc4e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801cc52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cc56:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cc5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc5c:	fb08 f707 	mul.w	r7, r8, r7
 801cc60:	fb02 770c 	mla	r7, r2, ip, r7
 801cc64:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cc68:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cc6a:	fb00 770c 	mla	r7, r0, ip, r7
 801cc6e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cc72:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc74:	fb09 770c 	mla	r7, r9, ip, r7
 801cc78:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801cc7c:	fb08 f80c 	mul.w	r8, r8, ip
 801cc80:	0a3f      	lsrs	r7, r7, #8
 801cc82:	fb02 8303 	mla	r3, r2, r3, r8
 801cc86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc88:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801cc8c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801cc90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc92:	fb00 330a 	mla	r3, r0, sl, r3
 801cc96:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801cc9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cc9c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801cca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cca2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cca6:	434b      	muls	r3, r1
 801cca8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ccac:	1c59      	adds	r1, r3, #1
 801ccae:	ea47 070c 	orr.w	r7, r7, ip
 801ccb2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ccb6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ccba:	b2fa      	uxtb	r2, r7
 801ccbc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ccc0:	fb12 f200 	smulbb	r2, r2, r0
 801ccc4:	b2c9      	uxtb	r1, r1
 801ccc6:	fb03 2301 	mla	r3, r3, r1, r2
 801ccca:	b29b      	uxth	r3, r3
 801cccc:	1c5a      	adds	r2, r3, #1
 801ccce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ccd2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ccd6:	fb12 f201 	smulbb	r2, r2, r1
 801ccda:	121b      	asrs	r3, r3, #8
 801ccdc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801cce0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801cce4:	0c3f      	lsrs	r7, r7, #16
 801cce6:	fb03 2300 	mla	r3, r3, r0, r2
 801ccea:	b29b      	uxth	r3, r3
 801ccec:	1c5a      	adds	r2, r3, #1
 801ccee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ccf2:	121b      	asrs	r3, r3, #8
 801ccf4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ccf8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ccfc:	fb13 f101 	smulbb	r1, r3, r1
 801cd00:	fb07 1700 	mla	r7, r7, r0, r1
 801cd04:	b2bf      	uxth	r7, r7
 801cd06:	1c7b      	adds	r3, r7, #1
 801cd08:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801cd0c:	123f      	asrs	r7, r7, #8
 801cd0e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801cd12:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cd14:	f10e 0e03 	add.w	lr, lr, #3
 801cd18:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cd1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cd1e:	441a      	add	r2, r3
 801cd20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cd22:	9229      	str	r2, [sp, #164]	; 0xa4
 801cd24:	441d      	add	r5, r3
 801cd26:	e645      	b.n	801c9b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801cd28:	2800      	cmp	r0, #0
 801cd2a:	f43f aee6 	beq.w	801cafa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801cd2e:	5c79      	ldrb	r1, [r7, r1]
 801cd30:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cd34:	910b      	str	r1, [sp, #44]	; 0x2c
 801cd36:	0e09      	lsrs	r1, r1, #24
 801cd38:	9114      	str	r1, [sp, #80]	; 0x50
 801cd3a:	e6de      	b.n	801cafa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801cd3c:	b01f      	add	sp, #124	; 0x7c
 801cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd42 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801cd42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd46:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801cd4a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801cd4e:	2d00      	cmp	r5, #0
 801cd50:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801cd54:	fb05 700e 	mla	r0, r5, lr, r7
 801cd58:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801cd5c:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801cd60:	eb02 0800 	add.w	r8, r2, r0
 801cd64:	f2c0 8105 	blt.w	801cf72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801cd68:	45a9      	cmp	r9, r5
 801cd6a:	f340 8102 	ble.w	801cf72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801cd6e:	2f00      	cmp	r7, #0
 801cd70:	f2c0 80fd 	blt.w	801cf6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801cd74:	45be      	cmp	lr, r7
 801cd76:	f340 80fa 	ble.w	801cf6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801cd7a:	5c12      	ldrb	r2, [r2, r0]
 801cd7c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801cd80:	1c7a      	adds	r2, r7, #1
 801cd82:	f100 80f9 	bmi.w	801cf78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801cd86:	4596      	cmp	lr, r2
 801cd88:	f340 80f6 	ble.w	801cf78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801cd8c:	2c00      	cmp	r4, #0
 801cd8e:	f000 80f5 	beq.w	801cf7c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801cd92:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cd96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cd9a:	3501      	adds	r5, #1
 801cd9c:	f100 80f2 	bmi.w	801cf84 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cda0:	45a9      	cmp	r9, r5
 801cda2:	f340 80ef 	ble.w	801cf84 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cda6:	f1bc 0f00 	cmp.w	ip, #0
 801cdaa:	f000 80ee 	beq.w	801cf8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801cdae:	2f00      	cmp	r7, #0
 801cdb0:	f2c0 80e6 	blt.w	801cf80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cdb4:	45be      	cmp	lr, r7
 801cdb6:	f340 80e3 	ble.w	801cf80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cdba:	f818 200e 	ldrb.w	r2, [r8, lr]
 801cdbe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cdc2:	3701      	adds	r7, #1
 801cdc4:	f100 80e4 	bmi.w	801cf90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cdc8:	45be      	cmp	lr, r7
 801cdca:	f340 80e1 	ble.w	801cf90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cdce:	2c00      	cmp	r4, #0
 801cdd0:	f000 80e0 	beq.w	801cf94 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801cdd4:	44c6      	add	lr, r8
 801cdd6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cdda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cdde:	b2a3      	uxth	r3, r4
 801cde0:	fa1f fc8c 	uxth.w	ip, ip
 801cde4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801cde8:	fb0c fe03 	mul.w	lr, ip, r3
 801cdec:	011b      	lsls	r3, r3, #4
 801cdee:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cdf2:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801cdf6:	eba3 070e 	sub.w	r7, r3, lr
 801cdfa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801cdfe:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801ce02:	fa1f f48c 	uxth.w	r4, ip
 801ce06:	b2bf      	uxth	r7, r7
 801ce08:	1b1b      	subs	r3, r3, r4
 801ce0a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ce0e:	fb07 fc0a 	mul.w	ip, r7, sl
 801ce12:	b29b      	uxth	r3, r3
 801ce14:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ce18:	9300      	str	r3, [sp, #0]
 801ce1a:	fb04 cc09 	mla	ip, r4, r9, ip
 801ce1e:	fb0e cc08 	mla	ip, lr, r8, ip
 801ce22:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ce26:	9301      	str	r3, [sp, #4]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	f000 809d 	beq.w	801cf68 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801ce2e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ce32:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ce36:	fb0b fc0c 	mul.w	ip, fp, ip
 801ce3a:	fb0b f606 	mul.w	r6, fp, r6
 801ce3e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ce42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ce46:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ce4a:	44dc      	add	ip, fp
 801ce4c:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801ce50:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ce54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ce58:	fb0a fb0b 	mul.w	fp, sl, fp
 801ce5c:	fb0a fa00 	mul.w	sl, sl, r0
 801ce60:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801ce64:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ce68:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801ce6c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ce70:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ce74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ce78:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801ce7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ce80:	0a36      	lsrs	r6, r6, #8
 801ce82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ce86:	44dc      	add	ip, fp
 801ce88:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801ce8c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ce90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ce94:	fb09 fb0b 	mul.w	fp, r9, fp
 801ce98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ce9c:	fb09 f905 	mul.w	r9, r9, r5
 801cea0:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801cea4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cea8:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801ceac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ceb0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ceb4:	fb0c fc07 	mul.w	ip, ip, r7
 801ceb8:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801cebc:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801cec0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cec4:	4458      	add	r0, fp
 801cec6:	fb08 f505 	mul.w	r5, r8, r5
 801ceca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cece:	fb08 f802 	mul.w	r8, r8, r2
 801ced2:	0a00      	lsrs	r0, r0, #8
 801ced4:	0a2a      	lsrs	r2, r5, #8
 801ced6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801ceda:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cede:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801cee2:	4415      	add	r5, r2
 801cee4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801cee8:	0a2d      	lsrs	r5, r5, #8
 801ceea:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ceee:	9a00      	ldr	r2, [sp, #0]
 801cef0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801cef4:	fb03 cc02 	mla	ip, r3, r2, ip
 801cef8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cefc:	9b01      	ldr	r3, [sp, #4]
 801cefe:	fb05 c50e 	mla	r5, r5, lr, ip
 801cf02:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801cf06:	43db      	mvns	r3, r3
 801cf08:	fb00 5004 	mla	r0, r0, r4, r5
 801cf0c:	b2db      	uxtb	r3, r3
 801cf0e:	0a00      	lsrs	r0, r0, #8
 801cf10:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801cf14:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801cf18:	4378      	muls	r0, r7
 801cf1a:	fb02 0006 	mla	r0, r2, r6, r0
 801cf1e:	780a      	ldrb	r2, [r1, #0]
 801cf20:	fb0e 0e08 	mla	lr, lr, r8, r0
 801cf24:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801cf28:	fb04 e000 	mla	r0, r4, r0, lr
 801cf2c:	fb02 f403 	mul.w	r4, r2, r3
 801cf30:	0a00      	lsrs	r0, r0, #8
 801cf32:	1c62      	adds	r2, r4, #1
 801cf34:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cf38:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cf3c:	4328      	orrs	r0, r5
 801cf3e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801cf42:	700a      	strb	r2, [r1, #0]
 801cf44:	784a      	ldrb	r2, [r1, #1]
 801cf46:	435a      	muls	r2, r3
 801cf48:	1c54      	adds	r4, r2, #1
 801cf4a:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801cf4e:	0a02      	lsrs	r2, r0, #8
 801cf50:	0c00      	lsrs	r0, r0, #16
 801cf52:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cf56:	704a      	strb	r2, [r1, #1]
 801cf58:	788a      	ldrb	r2, [r1, #2]
 801cf5a:	4353      	muls	r3, r2
 801cf5c:	1c5a      	adds	r2, r3, #1
 801cf5e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cf62:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cf66:	7088      	strb	r0, [r1, #2]
 801cf68:	b003      	add	sp, #12
 801cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf6e:	2600      	movs	r6, #0
 801cf70:	e706      	b.n	801cd80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801cf72:	2000      	movs	r0, #0
 801cf74:	4606      	mov	r6, r0
 801cf76:	e710      	b.n	801cd9a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cf78:	2000      	movs	r0, #0
 801cf7a:	e70e      	b.n	801cd9a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cf7c:	4620      	mov	r0, r4
 801cf7e:	e70c      	b.n	801cd9a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cf80:	2500      	movs	r5, #0
 801cf82:	e71e      	b.n	801cdc2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801cf84:	2200      	movs	r2, #0
 801cf86:	4615      	mov	r5, r2
 801cf88:	e729      	b.n	801cdde <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cf8a:	4662      	mov	r2, ip
 801cf8c:	4665      	mov	r5, ip
 801cf8e:	e726      	b.n	801cdde <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cf90:	2200      	movs	r2, #0
 801cf92:	e724      	b.n	801cdde <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cf94:	4622      	mov	r2, r4
 801cf96:	e722      	b.n	801cdde <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801cf98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf9c:	b09b      	sub	sp, #108	; 0x6c
 801cf9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cfa2:	9218      	str	r2, [sp, #96]	; 0x60
 801cfa4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cfa6:	9019      	str	r0, [sp, #100]	; 0x64
 801cfa8:	9116      	str	r1, [sp, #88]	; 0x58
 801cfaa:	6850      	ldr	r0, [r2, #4]
 801cfac:	9307      	str	r3, [sp, #28]
 801cfae:	6812      	ldr	r2, [r2, #0]
 801cfb0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801cfb2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801cfb6:	fb00 1303 	mla	r3, r0, r3, r1
 801cfba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfbe:	18d3      	adds	r3, r2, r3
 801cfc0:	930a      	str	r3, [sp, #40]	; 0x28
 801cfc2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	930f      	str	r3, [sp, #60]	; 0x3c
 801cfc8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cfca:	685e      	ldr	r6, [r3, #4]
 801cfcc:	3604      	adds	r6, #4
 801cfce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	dc03      	bgt.n	801cfdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801cfd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	f340 834f 	ble.w	801d67a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801cfdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cfde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cfe2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cfe6:	1e48      	subs	r0, r1, #1
 801cfe8:	1e57      	subs	r7, r2, #1
 801cfea:	9b07      	ldr	r3, [sp, #28]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	f340 8178 	ble.w	801d2e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cff2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801cff4:	142b      	asrs	r3, r5, #16
 801cff6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801cffa:	d406      	bmi.n	801d00a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cffc:	4584      	cmp	ip, r0
 801cffe:	da04      	bge.n	801d00a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d000:	2b00      	cmp	r3, #0
 801d002:	db02      	blt.n	801d00a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d004:	42bb      	cmp	r3, r7
 801d006:	f2c0 816d 	blt.w	801d2e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d00a:	f11c 0c01 	adds.w	ip, ip, #1
 801d00e:	f100 815b 	bmi.w	801d2c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d012:	4561      	cmp	r1, ip
 801d014:	f2c0 8158 	blt.w	801d2c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d018:	3301      	adds	r3, #1
 801d01a:	f100 8155 	bmi.w	801d2c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d01e:	429a      	cmp	r2, r3
 801d020:	f2c0 8152 	blt.w	801d2c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d024:	9b07      	ldr	r3, [sp, #28]
 801d026:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d028:	9317      	str	r3, [sp, #92]	; 0x5c
 801d02a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	f340 8178 	ble.w	801d322 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801d032:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d034:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d038:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d03c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d040:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d042:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801d046:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d048:	141b      	asrs	r3, r3, #16
 801d04a:	f100 81ba 	bmi.w	801d3c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d04e:	f101 38ff 	add.w	r8, r1, #4294967295
 801d052:	4543      	cmp	r3, r8
 801d054:	f280 81b5 	bge.w	801d3c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d058:	f1bc 0f00 	cmp.w	ip, #0
 801d05c:	f2c0 81b1 	blt.w	801d3c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d060:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d064:	45c4      	cmp	ip, r8
 801d066:	f280 81ac 	bge.w	801d3c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d06a:	b209      	sxth	r1, r1
 801d06c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d06e:	fb0c 3301 	mla	r3, ip, r1, r3
 801d072:	eb04 0803 	add.w	r8, r4, r3
 801d076:	5ce3      	ldrb	r3, [r4, r3]
 801d078:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d07c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d080:	2a00      	cmp	r2, #0
 801d082:	f000 8193 	beq.w	801d3ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801d086:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d08a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d08e:	940b      	str	r4, [sp, #44]	; 0x2c
 801d090:	0e24      	lsrs	r4, r4, #24
 801d092:	9412      	str	r4, [sp, #72]	; 0x48
 801d094:	b178      	cbz	r0, 801d0b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d096:	eb08 0c01 	add.w	ip, r8, r1
 801d09a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d09e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d0a2:	9108      	str	r1, [sp, #32]
 801d0a4:	0e09      	lsrs	r1, r1, #24
 801d0a6:	9110      	str	r1, [sp, #64]	; 0x40
 801d0a8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d0ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d0b0:	910c      	str	r1, [sp, #48]	; 0x30
 801d0b2:	0e09      	lsrs	r1, r1, #24
 801d0b4:	9113      	str	r1, [sp, #76]	; 0x4c
 801d0b6:	b292      	uxth	r2, r2
 801d0b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d0ba:	b280      	uxth	r0, r0
 801d0bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d0be:	fb02 f900 	mul.w	r9, r2, r0
 801d0c2:	0112      	lsls	r2, r2, #4
 801d0c4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d0c8:	eba2 0809 	sub.w	r8, r2, r9
 801d0cc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d0d0:	b280      	uxth	r0, r0
 801d0d2:	fa1f f888 	uxth.w	r8, r8
 801d0d6:	1a12      	subs	r2, r2, r0
 801d0d8:	fb08 f101 	mul.w	r1, r8, r1
 801d0dc:	b292      	uxth	r2, r2
 801d0de:	fb02 110e 	mla	r1, r2, lr, r1
 801d0e2:	fb00 1104 	mla	r1, r0, r4, r1
 801d0e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d0e8:	fb09 1104 	mla	r1, r9, r4, r1
 801d0ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d0f0:	2900      	cmp	r1, #0
 801d0f2:	f000 80de 	beq.w	801d2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d0f6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d0fa:	d01b      	beq.n	801d134 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801d0fc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d100:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d104:	fb0e fa0a 	mul.w	sl, lr, sl
 801d108:	fb0e fe03 	mul.w	lr, lr, r3
 801d10c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d110:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d114:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d118:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d11c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d120:	4453      	add	r3, sl
 801d122:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d126:	0a1b      	lsrs	r3, r3, #8
 801d128:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d12c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d130:	ea43 030c 	orr.w	r3, r3, ip
 801d134:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d136:	2cff      	cmp	r4, #255	; 0xff
 801d138:	d021      	beq.n	801d17e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d13a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d13c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d140:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d142:	fb04 fb0b 	mul.w	fp, r4, fp
 801d146:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d148:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d14c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d14e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d152:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d156:	fb04 fa0a 	mul.w	sl, r4, sl
 801d15a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d15e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d162:	44de      	add	lr, fp
 801d164:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d168:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d16c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d170:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d174:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d178:	ea4e 040a 	orr.w	r4, lr, sl
 801d17c:	940b      	str	r4, [sp, #44]	; 0x2c
 801d17e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d180:	2cff      	cmp	r4, #255	; 0xff
 801d182:	d021      	beq.n	801d1c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801d184:	9c08      	ldr	r4, [sp, #32]
 801d186:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d18a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d18c:	fb04 fb0b 	mul.w	fp, r4, fp
 801d190:	9c08      	ldr	r4, [sp, #32]
 801d192:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d196:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d198:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d19c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d1a0:	fb04 fa0a 	mul.w	sl, r4, sl
 801d1a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d1a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d1ac:	44de      	add	lr, fp
 801d1ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d1b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d1b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d1ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d1be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d1c2:	ea4e 040a 	orr.w	r4, lr, sl
 801d1c6:	9408      	str	r4, [sp, #32]
 801d1c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d1ca:	2cff      	cmp	r4, #255	; 0xff
 801d1cc:	d021      	beq.n	801d212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d1ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d1d0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d1d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d1d6:	fb04 fb0b 	mul.w	fp, r4, fp
 801d1da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d1dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d1e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d1e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d1e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d1ea:	fb04 fa0a 	mul.w	sl, r4, sl
 801d1ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d1f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d1f6:	44de      	add	lr, fp
 801d1f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d1fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d200:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d204:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d208:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d20c:	ea4e 040a 	orr.w	r4, lr, sl
 801d210:	940c      	str	r4, [sp, #48]	; 0x30
 801d212:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d214:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d218:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d21c:	43c9      	mvns	r1, r1
 801d21e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d222:	9c08      	ldr	r4, [sp, #32]
 801d224:	b2c9      	uxtb	r1, r1
 801d226:	fb08 fc0c 	mul.w	ip, r8, ip
 801d22a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d22e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d232:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d234:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d238:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d23c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d23e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d242:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d246:	fb08 f80e 	mul.w	r8, r8, lr
 801d24a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d24e:	fb02 8303 	mla	r3, r2, r3, r8
 801d252:	9a08      	ldr	r2, [sp, #32]
 801d254:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d258:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d25e:	fb00 330a 	mla	r3, r0, sl, r3
 801d262:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801d266:	fb09 3900 	mla	r9, r9, r0, r3
 801d26a:	783b      	ldrb	r3, [r7, #0]
 801d26c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d270:	fb03 f201 	mul.w	r2, r3, r1
 801d274:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d278:	1c53      	adds	r3, r2, #1
 801d27a:	ea4c 0c09 	orr.w	ip, ip, r9
 801d27e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d282:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d286:	703b      	strb	r3, [r7, #0]
 801d288:	787b      	ldrb	r3, [r7, #1]
 801d28a:	434b      	muls	r3, r1
 801d28c:	1c5a      	adds	r2, r3, #1
 801d28e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d292:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d296:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d29a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d29e:	707b      	strb	r3, [r7, #1]
 801d2a0:	78bb      	ldrb	r3, [r7, #2]
 801d2a2:	4359      	muls	r1, r3
 801d2a4:	1c4b      	adds	r3, r1, #1
 801d2a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d2aa:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801d2ae:	f887 c002 	strb.w	ip, [r7, #2]
 801d2b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d2b4:	3703      	adds	r7, #3
 801d2b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d2b8:	441a      	add	r2, r3
 801d2ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2bc:	441d      	add	r5, r3
 801d2be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d2c0:	9225      	str	r2, [sp, #148]	; 0x94
 801d2c2:	3b01      	subs	r3, #1
 801d2c4:	9317      	str	r3, [sp, #92]	; 0x5c
 801d2c6:	e6b0      	b.n	801d02a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d2c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d2ca:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d2cc:	441c      	add	r4, r3
 801d2ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2d0:	441d      	add	r5, r3
 801d2d2:	9b07      	ldr	r3, [sp, #28]
 801d2d4:	9425      	str	r4, [sp, #148]	; 0x94
 801d2d6:	3b01      	subs	r3, #1
 801d2d8:	9307      	str	r3, [sp, #28]
 801d2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2dc:	3303      	adds	r3, #3
 801d2de:	930a      	str	r3, [sp, #40]	; 0x28
 801d2e0:	e683      	b.n	801cfea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d2e2:	d026      	beq.n	801d332 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801d2e4:	9b07      	ldr	r3, [sp, #28]
 801d2e6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d2e8:	3b01      	subs	r3, #1
 801d2ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d2ec:	fb00 4003 	mla	r0, r0, r3, r4
 801d2f0:	1400      	asrs	r0, r0, #16
 801d2f2:	f53f ae97 	bmi.w	801d024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d2f6:	3901      	subs	r1, #1
 801d2f8:	4288      	cmp	r0, r1
 801d2fa:	f6bf ae93 	bge.w	801d024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d2fe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d300:	fb01 5303 	mla	r3, r1, r3, r5
 801d304:	141b      	asrs	r3, r3, #16
 801d306:	f53f ae8d 	bmi.w	801d024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d30a:	3a01      	subs	r2, #1
 801d30c:	4293      	cmp	r3, r2
 801d30e:	f6bf ae89 	bge.w	801d024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d314:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d318:	f103 0e03 	add.w	lr, r3, #3
 801d31c:	f1bb 0f00 	cmp.w	fp, #0
 801d320:	dc6d      	bgt.n	801d3fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801d322:	9b07      	ldr	r3, [sp, #28]
 801d324:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d32a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d32e:	4423      	add	r3, r4
 801d330:	930a      	str	r3, [sp, #40]	; 0x28
 801d332:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d334:	2b00      	cmp	r3, #0
 801d336:	f340 81a0 	ble.w	801d67a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d33a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d33e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d340:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d344:	eeb0 6a62 	vmov.f32	s12, s5
 801d348:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d34c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d350:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d354:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801d358:	eeb0 6a43 	vmov.f32	s12, s6
 801d35c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d360:	ee16 5a10 	vmov	r5, s12
 801d364:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d368:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d36c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d370:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d374:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d378:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d37c:	ee12 2a90 	vmov	r2, s5
 801d380:	eef0 2a47 	vmov.f32	s5, s14
 801d384:	fb92 f3f3 	sdiv	r3, r2, r3
 801d388:	ee13 2a10 	vmov	r2, s6
 801d38c:	9327      	str	r3, [sp, #156]	; 0x9c
 801d38e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d390:	eeb0 3a67 	vmov.f32	s6, s15
 801d394:	fb92 f3f3 	sdiv	r3, r2, r3
 801d398:	9328      	str	r3, [sp, #160]	; 0xa0
 801d39a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d39c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d39e:	3b01      	subs	r3, #1
 801d3a0:	9316      	str	r3, [sp, #88]	; 0x58
 801d3a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d3a4:	bf08      	it	eq
 801d3a6:	4613      	moveq	r3, r2
 801d3a8:	9307      	str	r3, [sp, #28]
 801d3aa:	e610      	b.n	801cfce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d3ac:	2800      	cmp	r0, #0
 801d3ae:	f43f ae82 	beq.w	801d0b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d3b2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d3b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d3ba:	9108      	str	r1, [sp, #32]
 801d3bc:	0e09      	lsrs	r1, r1, #24
 801d3be:	9110      	str	r1, [sp, #64]	; 0x40
 801d3c0:	e679      	b.n	801d0b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d3c2:	f113 0801 	adds.w	r8, r3, #1
 801d3c6:	f53f af74 	bmi.w	801d2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d3ca:	4541      	cmp	r1, r8
 801d3cc:	f6ff af71 	blt.w	801d2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d3d0:	f11c 0801 	adds.w	r8, ip, #1
 801d3d4:	f53f af6d 	bmi.w	801d2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d3d8:	45c6      	cmp	lr, r8
 801d3da:	f6ff af6a 	blt.w	801d2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d3de:	b209      	sxth	r1, r1
 801d3e0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d3e4:	fa0f f38e 	sxth.w	r3, lr
 801d3e8:	9100      	str	r1, [sp, #0]
 801d3ea:	4639      	mov	r1, r7
 801d3ec:	9301      	str	r3, [sp, #4]
 801d3ee:	4633      	mov	r3, r6
 801d3f0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801d3f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d3f6:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d3f8:	f7ff fca3 	bl	801cd42 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801d3fc:	e759      	b.n	801d2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d3fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d400:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d404:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d406:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d40a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d40c:	1427      	asrs	r7, r4, #16
 801d40e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d410:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d414:	142b      	asrs	r3, r5, #16
 801d416:	fb01 7303 	mla	r3, r1, r3, r7
 801d41a:	18e7      	adds	r7, r4, r3
 801d41c:	5ce3      	ldrb	r3, [r4, r3]
 801d41e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d422:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d426:	2a00      	cmp	r2, #0
 801d428:	f000 811d 	beq.w	801d666 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801d42c:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d430:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d434:	940d      	str	r4, [sp, #52]	; 0x34
 801d436:	0e24      	lsrs	r4, r4, #24
 801d438:	9414      	str	r4, [sp, #80]	; 0x50
 801d43a:	b170      	cbz	r0, 801d45a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d43c:	eb07 0801 	add.w	r8, r7, r1
 801d440:	5c79      	ldrb	r1, [r7, r1]
 801d442:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d446:	9109      	str	r1, [sp, #36]	; 0x24
 801d448:	0e09      	lsrs	r1, r1, #24
 801d44a:	9111      	str	r1, [sp, #68]	; 0x44
 801d44c:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d450:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d454:	910e      	str	r1, [sp, #56]	; 0x38
 801d456:	0e09      	lsrs	r1, r1, #24
 801d458:	9115      	str	r1, [sp, #84]	; 0x54
 801d45a:	b292      	uxth	r2, r2
 801d45c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d45e:	b280      	uxth	r0, r0
 801d460:	fb02 f900 	mul.w	r9, r2, r0
 801d464:	0112      	lsls	r2, r2, #4
 801d466:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d46a:	eba2 0809 	sub.w	r8, r2, r9
 801d46e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801d472:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d474:	b280      	uxth	r0, r0
 801d476:	fa1f f888 	uxth.w	r8, r8
 801d47a:	1a09      	subs	r1, r1, r0
 801d47c:	fb08 f202 	mul.w	r2, r8, r2
 801d480:	b289      	uxth	r1, r1
 801d482:	fb01 220c 	mla	r2, r1, ip, r2
 801d486:	fb00 2204 	mla	r2, r0, r4, r2
 801d48a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d48c:	fb09 2204 	mla	r2, r9, r4, r2
 801d490:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d494:	2a00      	cmp	r2, #0
 801d496:	f000 80db 	beq.w	801d650 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801d49a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d49e:	d019      	beq.n	801d4d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801d4a0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d4a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d4a8:	fb0c fa0a 	mul.w	sl, ip, sl
 801d4ac:	fb0c fc03 	mul.w	ip, ip, r3
 801d4b0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d4b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d4b8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d4bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d4c0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d4c4:	4453      	add	r3, sl
 801d4c6:	0a3f      	lsrs	r7, r7, #8
 801d4c8:	0a1b      	lsrs	r3, r3, #8
 801d4ca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d4ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d4d2:	433b      	orrs	r3, r7
 801d4d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d4d6:	2cff      	cmp	r4, #255	; 0xff
 801d4d8:	d020      	beq.n	801d51c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801d4da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d4dc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d4e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d4e2:	4367      	muls	r7, r4
 801d4e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d4e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d4ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d4ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d4f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d4f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d4f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801d4fc:	44bc      	add	ip, r7
 801d4fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d502:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d506:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d50a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d50e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d512:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d516:	ea4c 040a 	orr.w	r4, ip, sl
 801d51a:	940d      	str	r4, [sp, #52]	; 0x34
 801d51c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d51e:	2cff      	cmp	r4, #255	; 0xff
 801d520:	d020      	beq.n	801d564 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801d522:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d524:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d528:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d52a:	4367      	muls	r7, r4
 801d52c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d52e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d532:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d536:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d538:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d53c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d540:	fb04 fa0a 	mul.w	sl, r4, sl
 801d544:	44bc      	add	ip, r7
 801d546:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d54a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d54e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d552:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d556:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d55a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d55e:	ea4c 040a 	orr.w	r4, ip, sl
 801d562:	9409      	str	r4, [sp, #36]	; 0x24
 801d564:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d566:	2cff      	cmp	r4, #255	; 0xff
 801d568:	d020      	beq.n	801d5ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801d56a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d56c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d570:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d572:	4367      	muls	r7, r4
 801d574:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d576:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d57a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d57e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d580:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d584:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d588:	fb04 fa0a 	mul.w	sl, r4, sl
 801d58c:	44bc      	add	ip, r7
 801d58e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d592:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d596:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d59a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d59e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d5a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d5a6:	ea4c 040a 	orr.w	r4, ip, sl
 801d5aa:	940e      	str	r4, [sp, #56]	; 0x38
 801d5ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5ae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d5b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d5b6:	43d2      	mvns	r2, r2
 801d5b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d5bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d5be:	b2d2      	uxtb	r2, r2
 801d5c0:	fb08 f707 	mul.w	r7, r8, r7
 801d5c4:	fb01 770c 	mla	r7, r1, ip, r7
 801d5c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d5cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d5ce:	fb00 770c 	mla	r7, r0, ip, r7
 801d5d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d5d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5d8:	fb09 770c 	mla	r7, r9, ip, r7
 801d5dc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d5e0:	fb08 f80c 	mul.w	r8, r8, ip
 801d5e4:	0a3f      	lsrs	r7, r7, #8
 801d5e6:	fb01 8303 	mla	r3, r1, r3, r8
 801d5ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d5ec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d5f0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801d5f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d5f6:	fb00 330a 	mla	r3, r0, sl, r3
 801d5fa:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801d5fe:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d602:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d606:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d60a:	fb03 f102 	mul.w	r1, r3, r2
 801d60e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d612:	1c4b      	adds	r3, r1, #1
 801d614:	ea47 070c 	orr.w	r7, r7, ip
 801d618:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d61c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801d620:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d624:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801d628:	4353      	muls	r3, r2
 801d62a:	1c59      	adds	r1, r3, #1
 801d62c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d630:	0a3b      	lsrs	r3, r7, #8
 801d632:	0c3f      	lsrs	r7, r7, #16
 801d634:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d638:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d63c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d640:	435a      	muls	r2, r3
 801d642:	1c53      	adds	r3, r2, #1
 801d644:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d648:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d64c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d650:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d652:	f10e 0e03 	add.w	lr, lr, #3
 801d656:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d658:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d65c:	441a      	add	r2, r3
 801d65e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d660:	9225      	str	r2, [sp, #148]	; 0x94
 801d662:	441d      	add	r5, r3
 801d664:	e65a      	b.n	801d31c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d666:	2800      	cmp	r0, #0
 801d668:	f43f aef7 	beq.w	801d45a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d66c:	5c79      	ldrb	r1, [r7, r1]
 801d66e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d672:	9109      	str	r1, [sp, #36]	; 0x24
 801d674:	0e09      	lsrs	r1, r1, #24
 801d676:	9111      	str	r1, [sp, #68]	; 0x44
 801d678:	e6ef      	b.n	801d45a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d67a:	b01b      	add	sp, #108	; 0x6c
 801d67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d680 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d684:	b08d      	sub	sp, #52	; 0x34
 801d686:	468b      	mov	fp, r1
 801d688:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801d68c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801d690:	fb0c 5703 	mla	r7, ip, r3, r5
 801d694:	f1bc 0f00 	cmp.w	ip, #0
 801d698:	910b      	str	r1, [sp, #44]	; 0x2c
 801d69a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d69e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d6a2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801d6a6:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801d6aa:	eb02 0607 	add.w	r6, r2, r7
 801d6ae:	f89b 4000 	ldrb.w	r4, [fp]
 801d6b2:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d6b6:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801d6ba:	f2c0 80c1 	blt.w	801d840 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d6be:	45e6      	cmp	lr, ip
 801d6c0:	f340 80be 	ble.w	801d840 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d6c4:	2d00      	cmp	r5, #0
 801d6c6:	f2c0 80b7 	blt.w	801d838 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d6ca:	42ab      	cmp	r3, r5
 801d6cc:	f340 80b4 	ble.w	801d838 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d6d0:	5dd2      	ldrb	r2, [r2, r7]
 801d6d2:	9205      	str	r2, [sp, #20]
 801d6d4:	7872      	ldrb	r2, [r6, #1]
 801d6d6:	9206      	str	r2, [sp, #24]
 801d6d8:	78b2      	ldrb	r2, [r6, #2]
 801d6da:	9207      	str	r2, [sp, #28]
 801d6dc:	1c6a      	adds	r2, r5, #1
 801d6de:	f100 80b6 	bmi.w	801d84e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d6e2:	4293      	cmp	r3, r2
 801d6e4:	f340 80b3 	ble.w	801d84e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d6e8:	f1b8 0f00 	cmp.w	r8, #0
 801d6ec:	f000 80af 	beq.w	801d84e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d6f0:	78f2      	ldrb	r2, [r6, #3]
 801d6f2:	9201      	str	r2, [sp, #4]
 801d6f4:	7932      	ldrb	r2, [r6, #4]
 801d6f6:	9202      	str	r2, [sp, #8]
 801d6f8:	7972      	ldrb	r2, [r6, #5]
 801d6fa:	9203      	str	r2, [sp, #12]
 801d6fc:	f11c 0c01 	adds.w	ip, ip, #1
 801d700:	f100 80ad 	bmi.w	801d85e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d704:	45e6      	cmp	lr, ip
 801d706:	f340 80aa 	ble.w	801d85e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d70a:	f1ba 0f00 	cmp.w	sl, #0
 801d70e:	f000 80a6 	beq.w	801d85e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d712:	2d00      	cmp	r5, #0
 801d714:	f2c0 809f 	blt.w	801d856 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d718:	42ab      	cmp	r3, r5
 801d71a:	f340 809c 	ble.w	801d856 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d71e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d722:	f816 9002 	ldrb.w	r9, [r6, r2]
 801d726:	2203      	movs	r2, #3
 801d728:	fb03 6c02 	mla	ip, r3, r2, r6
 801d72c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801d730:	f89c e002 	ldrb.w	lr, [ip, #2]
 801d734:	9704      	str	r7, [sp, #16]
 801d736:	3501      	adds	r5, #1
 801d738:	f100 8098 	bmi.w	801d86c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d73c:	42ab      	cmp	r3, r5
 801d73e:	f340 8095 	ble.w	801d86c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d742:	f1b8 0f00 	cmp.w	r8, #0
 801d746:	f000 8091 	beq.w	801d86c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d74a:	f04f 0c03 	mov.w	ip, #3
 801d74e:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801d752:	5cb5      	ldrb	r5, [r6, r2]
 801d754:	fb03 620c 	mla	r2, r3, ip, r6
 801d758:	fb03 630c 	mla	r3, r3, ip, r6
 801d75c:	7912      	ldrb	r2, [r2, #4]
 801d75e:	795e      	ldrb	r6, [r3, #5]
 801d760:	fa1f f388 	uxth.w	r3, r8
 801d764:	fa1f fc8a 	uxth.w	ip, sl
 801d768:	fb03 f70c 	mul.w	r7, r3, ip
 801d76c:	011b      	lsls	r3, r3, #4
 801d76e:	9708      	str	r7, [sp, #32]
 801d770:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801d774:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801d778:	1bdb      	subs	r3, r3, r7
 801d77a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801d77e:	fa1f fc8c 	uxth.w	ip, ip
 801d782:	b29b      	uxth	r3, r3
 801d784:	9709      	str	r7, [sp, #36]	; 0x24
 801d786:	ebaa 0a0c 	sub.w	sl, sl, ip
 801d78a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d78c:	930a      	str	r3, [sp, #40]	; 0x28
 801d78e:	fa1f fa8a 	uxth.w	sl, sl
 801d792:	ea6f 0807 	mvn.w	r8, r7
 801d796:	9f01      	ldr	r7, [sp, #4]
 801d798:	435f      	muls	r7, r3
 801d79a:	9b05      	ldr	r3, [sp, #20]
 801d79c:	fa5f f888 	uxtb.w	r8, r8
 801d7a0:	fb0a 7703 	mla	r7, sl, r3, r7
 801d7a4:	9b08      	ldr	r3, [sp, #32]
 801d7a6:	fb14 f408 	smulbb	r4, r4, r8
 801d7aa:	fb0c 7709 	mla	r7, ip, r9, r7
 801d7ae:	fb10 f008 	smulbb	r0, r0, r8
 801d7b2:	fb11 f108 	smulbb	r1, r1, r8
 801d7b6:	fb03 7705 	mla	r7, r3, r5, r7
 801d7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7bc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d7c0:	fb07 4703 	mla	r7, r7, r3, r4
 801d7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7c6:	b2bf      	uxth	r7, r7
 801d7c8:	1c7c      	adds	r4, r7, #1
 801d7ca:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801d7ce:	1224      	asrs	r4, r4, #8
 801d7d0:	f88b 4000 	strb.w	r4, [fp]
 801d7d4:	9c02      	ldr	r4, [sp, #8]
 801d7d6:	435c      	muls	r4, r3
 801d7d8:	9b06      	ldr	r3, [sp, #24]
 801d7da:	fb0a 4403 	mla	r4, sl, r3, r4
 801d7de:	9b04      	ldr	r3, [sp, #16]
 801d7e0:	fb0c 4403 	mla	r4, ip, r3, r4
 801d7e4:	9b08      	ldr	r3, [sp, #32]
 801d7e6:	fb03 4402 	mla	r4, r3, r2, r4
 801d7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d7ee:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d7f2:	fb04 0403 	mla	r4, r4, r3, r0
 801d7f6:	9b03      	ldr	r3, [sp, #12]
 801d7f8:	435a      	muls	r2, r3
 801d7fa:	b2a4      	uxth	r4, r4
 801d7fc:	4613      	mov	r3, r2
 801d7fe:	9a07      	ldr	r2, [sp, #28]
 801d800:	1c60      	adds	r0, r4, #1
 801d802:	fb0a 3a02 	mla	sl, sl, r2, r3
 801d806:	9b08      	ldr	r3, [sp, #32]
 801d808:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801d80c:	fb0c ac0e 	mla	ip, ip, lr, sl
 801d810:	1224      	asrs	r4, r4, #8
 801d812:	fb03 c606 	mla	r6, r3, r6, ip
 801d816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d818:	f88b 4001 	strb.w	r4, [fp, #1]
 801d81c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d820:	fb06 1103 	mla	r1, r6, r3, r1
 801d824:	b289      	uxth	r1, r1
 801d826:	1c4e      	adds	r6, r1, #1
 801d828:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801d82c:	1209      	asrs	r1, r1, #8
 801d82e:	f88b 1002 	strb.w	r1, [fp, #2]
 801d832:	b00d      	add	sp, #52	; 0x34
 801d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d838:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d83c:	9405      	str	r4, [sp, #20]
 801d83e:	e74d      	b.n	801d6dc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801d840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d844:	9401      	str	r4, [sp, #4]
 801d846:	9405      	str	r4, [sp, #20]
 801d848:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d84c:	e756      	b.n	801d6fc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d84e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d852:	9401      	str	r4, [sp, #4]
 801d854:	e752      	b.n	801d6fc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d856:	468e      	mov	lr, r1
 801d858:	9004      	str	r0, [sp, #16]
 801d85a:	46a1      	mov	r9, r4
 801d85c:	e76b      	b.n	801d736 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801d85e:	460e      	mov	r6, r1
 801d860:	4602      	mov	r2, r0
 801d862:	4625      	mov	r5, r4
 801d864:	468e      	mov	lr, r1
 801d866:	9004      	str	r0, [sp, #16]
 801d868:	46a1      	mov	r9, r4
 801d86a:	e779      	b.n	801d760 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801d86c:	460e      	mov	r6, r1
 801d86e:	4602      	mov	r2, r0
 801d870:	4625      	mov	r5, r4
 801d872:	e775      	b.n	801d760 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801d874 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d878:	b09f      	sub	sp, #124	; 0x7c
 801d87a:	920e      	str	r2, [sp, #56]	; 0x38
 801d87c:	9307      	str	r3, [sp, #28]
 801d87e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d880:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d884:	901d      	str	r0, [sp, #116]	; 0x74
 801d886:	930c      	str	r3, [sp, #48]	; 0x30
 801d888:	6850      	ldr	r0, [r2, #4]
 801d88a:	910b      	str	r1, [sp, #44]	; 0x2c
 801d88c:	6812      	ldr	r2, [r2, #0]
 801d88e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801d892:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801d896:	fb00 1303 	mla	r3, r0, r3, r1
 801d89a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d89e:	18d3      	adds	r3, r2, r3
 801d8a0:	9308      	str	r3, [sp, #32]
 801d8a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	930a      	str	r3, [sp, #40]	; 0x28
 801d8a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8aa:	43db      	mvns	r3, r3
 801d8ac:	b2db      	uxtb	r3, r3
 801d8ae:	9309      	str	r3, [sp, #36]	; 0x24
 801d8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	dc03      	bgt.n	801d8be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	f340 81f5 	ble.w	801dca8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801d8be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d8c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d8c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d8c8:	1e48      	subs	r0, r1, #1
 801d8ca:	1e54      	subs	r4, r2, #1
 801d8cc:	9b07      	ldr	r3, [sp, #28]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	f340 80d5 	ble.w	801da7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801d8d4:	ea5f 452a 	movs.w	r5, sl, asr #16
 801d8d8:	ea4f 4328 	mov.w	r3, r8, asr #16
 801d8dc:	d406      	bmi.n	801d8ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d8de:	4285      	cmp	r5, r0
 801d8e0:	da04      	bge.n	801d8ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	db02      	blt.n	801d8ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d8e6:	42a3      	cmp	r3, r4
 801d8e8:	f2c0 80ca 	blt.w	801da80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d8ec:	3501      	adds	r5, #1
 801d8ee:	f100 80bb 	bmi.w	801da68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d8f2:	42a9      	cmp	r1, r5
 801d8f4:	f2c0 80b8 	blt.w	801da68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d8f8:	3301      	adds	r3, #1
 801d8fa:	f100 80b5 	bmi.w	801da68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d8fe:	429a      	cmp	r2, r3
 801d900:	f2c0 80b2 	blt.w	801da68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d904:	9b07      	ldr	r3, [sp, #28]
 801d906:	9d08      	ldr	r5, [sp, #32]
 801d908:	930d      	str	r3, [sp, #52]	; 0x34
 801d90a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	f340 80d6 	ble.w	801dabe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801d912:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801d914:	ea4f 4428 	mov.w	r4, r8, asr #16
 801d918:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d91a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801d91e:	68c6      	ldr	r6, [r0, #12]
 801d920:	ea5f 402a 	movs.w	r0, sl, asr #16
 801d924:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801d928:	689b      	ldr	r3, [r3, #8]
 801d92a:	f100 810f 	bmi.w	801db4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d92e:	1e5f      	subs	r7, r3, #1
 801d930:	42b8      	cmp	r0, r7
 801d932:	f280 810b 	bge.w	801db4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d936:	2c00      	cmp	r4, #0
 801d938:	f2c0 8108 	blt.w	801db4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d93c:	1e77      	subs	r7, r6, #1
 801d93e:	42bc      	cmp	r4, r7
 801d940:	f280 8104 	bge.w	801db4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d944:	b21b      	sxth	r3, r3
 801d946:	fb04 0003 	mla	r0, r4, r3, r0
 801d94a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d94c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d950:	1826      	adds	r6, r4, r0
 801d952:	5c24      	ldrb	r4, [r4, r0]
 801d954:	78b7      	ldrb	r7, [r6, #2]
 801d956:	7870      	ldrb	r0, [r6, #1]
 801d958:	970f      	str	r7, [sp, #60]	; 0x3c
 801d95a:	7977      	ldrb	r7, [r6, #5]
 801d95c:	f896 e003 	ldrb.w	lr, [r6, #3]
 801d960:	f896 c004 	ldrb.w	ip, [r6, #4]
 801d964:	9710      	str	r7, [sp, #64]	; 0x40
 801d966:	b1c9      	cbz	r1, 801d99c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d968:	f04f 0b03 	mov.w	fp, #3
 801d96c:	f06f 0904 	mvn.w	r9, #4
 801d970:	3605      	adds	r6, #5
 801d972:	fb13 930b 	smlabb	r3, r3, fp, r9
 801d976:	eb06 0b03 	add.w	fp, r6, r3
 801d97a:	5cf3      	ldrb	r3, [r6, r3]
 801d97c:	9311      	str	r3, [sp, #68]	; 0x44
 801d97e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801d982:	9313      	str	r3, [sp, #76]	; 0x4c
 801d984:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d988:	9315      	str	r3, [sp, #84]	; 0x54
 801d98a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801d98e:	9312      	str	r3, [sp, #72]	; 0x48
 801d990:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801d994:	9314      	str	r3, [sp, #80]	; 0x50
 801d996:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801d99a:	9316      	str	r3, [sp, #88]	; 0x58
 801d99c:	b292      	uxth	r2, r2
 801d99e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801d9a0:	b289      	uxth	r1, r1
 801d9a2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801d9a6:	fb02 f601 	mul.w	r6, r2, r1
 801d9aa:	0112      	lsls	r2, r2, #4
 801d9ac:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801d9b0:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801d9b4:	1b92      	subs	r2, r2, r6
 801d9b6:	b289      	uxth	r1, r1
 801d9b8:	b292      	uxth	r2, r2
 801d9ba:	eba9 0901 	sub.w	r9, r9, r1
 801d9be:	fb02 fe0e 	mul.w	lr, r2, lr
 801d9c2:	fa1f f989 	uxth.w	r9, r9
 801d9c6:	fb02 fc0c 	mul.w	ip, r2, ip
 801d9ca:	fb09 e404 	mla	r4, r9, r4, lr
 801d9ce:	f895 e000 	ldrb.w	lr, [r5]
 801d9d2:	fb09 c000 	mla	r0, r9, r0, ip
 801d9d6:	fb01 4407 	mla	r4, r1, r7, r4
 801d9da:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d9dc:	fb06 4407 	mla	r4, r6, r7, r4
 801d9e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d9e2:	fb1e fe07 	smulbb	lr, lr, r7
 801d9e6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d9ea:	fb04 e403 	mla	r4, r4, r3, lr
 801d9ee:	b2a4      	uxth	r4, r4
 801d9f0:	f104 0e01 	add.w	lr, r4, #1
 801d9f4:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801d9f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d9fa:	fb01 0004 	mla	r0, r1, r4, r0
 801d9fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801da00:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801da04:	fb06 0004 	mla	r0, r6, r4, r0
 801da08:	786c      	ldrb	r4, [r5, #1]
 801da0a:	f885 e000 	strb.w	lr, [r5]
 801da0e:	fb14 f407 	smulbb	r4, r4, r7
 801da12:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801da16:	fb00 4003 	mla	r0, r0, r3, r4
 801da1a:	b280      	uxth	r0, r0
 801da1c:	1c44      	adds	r4, r0, #1
 801da1e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801da22:	1200      	asrs	r0, r0, #8
 801da24:	7068      	strb	r0, [r5, #1]
 801da26:	9810      	ldr	r0, [sp, #64]	; 0x40
 801da28:	4342      	muls	r2, r0
 801da2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801da2c:	fb09 2200 	mla	r2, r9, r0, r2
 801da30:	9815      	ldr	r0, [sp, #84]	; 0x54
 801da32:	fb01 2100 	mla	r1, r1, r0, r2
 801da36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801da38:	fb06 1602 	mla	r6, r6, r2, r1
 801da3c:	78a9      	ldrb	r1, [r5, #2]
 801da3e:	fb11 f107 	smulbb	r1, r1, r7
 801da42:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801da46:	fb06 1303 	mla	r3, r6, r3, r1
 801da4a:	b29b      	uxth	r3, r3
 801da4c:	1c5e      	adds	r6, r3, #1
 801da4e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801da52:	121b      	asrs	r3, r3, #8
 801da54:	70ab      	strb	r3, [r5, #2]
 801da56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801da58:	3503      	adds	r5, #3
 801da5a:	449a      	add	sl, r3
 801da5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801da5e:	4498      	add	r8, r3
 801da60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da62:	3b01      	subs	r3, #1
 801da64:	930d      	str	r3, [sp, #52]	; 0x34
 801da66:	e750      	b.n	801d90a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801da68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801da6a:	449a      	add	sl, r3
 801da6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801da6e:	4498      	add	r8, r3
 801da70:	9b07      	ldr	r3, [sp, #28]
 801da72:	3b01      	subs	r3, #1
 801da74:	9307      	str	r3, [sp, #28]
 801da76:	9b08      	ldr	r3, [sp, #32]
 801da78:	3303      	adds	r3, #3
 801da7a:	9308      	str	r3, [sp, #32]
 801da7c:	e726      	b.n	801d8cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801da7e:	d026      	beq.n	801dace <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801da80:	9b07      	ldr	r3, [sp, #28]
 801da82:	982b      	ldr	r0, [sp, #172]	; 0xac
 801da84:	3b01      	subs	r3, #1
 801da86:	fb00 a003 	mla	r0, r0, r3, sl
 801da8a:	1400      	asrs	r0, r0, #16
 801da8c:	f53f af3a 	bmi.w	801d904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801da90:	3901      	subs	r1, #1
 801da92:	4288      	cmp	r0, r1
 801da94:	f6bf af36 	bge.w	801d904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801da98:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801da9a:	fb01 8303 	mla	r3, r1, r3, r8
 801da9e:	141b      	asrs	r3, r3, #16
 801daa0:	f53f af30 	bmi.w	801d904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801daa4:	3a01      	subs	r2, #1
 801daa6:	4293      	cmp	r3, r2
 801daa8:	f6bf af2c 	bge.w	801d904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801daac:	9b08      	ldr	r3, [sp, #32]
 801daae:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801dab2:	1cdd      	adds	r5, r3, #3
 801dab4:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801dab8:	f1bc 0f00 	cmp.w	ip, #0
 801dabc:	dc5f      	bgt.n	801db7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801dabe:	9b07      	ldr	r3, [sp, #28]
 801dac0:	9a08      	ldr	r2, [sp, #32]
 801dac2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801daca:	441a      	add	r2, r3
 801dacc:	9208      	str	r2, [sp, #32]
 801dace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	f340 80e9 	ble.w	801dca8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801dad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dada:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dadc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dae0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dae4:	eef0 6a62 	vmov.f32	s13, s5
 801dae8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801daec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801daf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801daf4:	ee16 aa90 	vmov	sl, s13
 801daf8:	eef0 6a43 	vmov.f32	s13, s6
 801dafc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801db00:	ee16 8a90 	vmov	r8, s13
 801db04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db08:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db1c:	ee12 2a90 	vmov	r2, s5
 801db20:	eef0 2a47 	vmov.f32	s5, s14
 801db24:	fb92 f3f3 	sdiv	r3, r2, r3
 801db28:	ee13 2a10 	vmov	r2, s6
 801db2c:	932b      	str	r3, [sp, #172]	; 0xac
 801db2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db30:	eeb0 3a67 	vmov.f32	s6, s15
 801db34:	fb92 f3f3 	sdiv	r3, r2, r3
 801db38:	932c      	str	r3, [sp, #176]	; 0xb0
 801db3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801db3e:	3b01      	subs	r3, #1
 801db40:	930b      	str	r3, [sp, #44]	; 0x2c
 801db42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db44:	bf08      	it	eq
 801db46:	4613      	moveq	r3, r2
 801db48:	9307      	str	r3, [sp, #28]
 801db4a:	e6b1      	b.n	801d8b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801db4c:	1c47      	adds	r7, r0, #1
 801db4e:	d482      	bmi.n	801da56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801db50:	42bb      	cmp	r3, r7
 801db52:	db80      	blt.n	801da56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801db54:	1c67      	adds	r7, r4, #1
 801db56:	f53f af7e 	bmi.w	801da56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801db5a:	42be      	cmp	r6, r7
 801db5c:	f6ff af7b 	blt.w	801da56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801db60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801db62:	b236      	sxth	r6, r6
 801db64:	9001      	str	r0, [sp, #4]
 801db66:	b21b      	sxth	r3, r3
 801db68:	9600      	str	r6, [sp, #0]
 801db6a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801db6c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801db70:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801db74:	4629      	mov	r1, r5
 801db76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801db78:	f7ff fd82 	bl	801d680 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801db7c:	e76b      	b.n	801da56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801db7e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801db80:	ea4f 402a 	mov.w	r0, sl, asr #16
 801db84:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801db88:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801db8c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801db90:	ea4f 4128 	mov.w	r1, r8, asr #16
 801db94:	fb07 0101 	mla	r1, r7, r1, r0
 801db98:	980a      	ldr	r0, [sp, #40]	; 0x28
 801db9a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801db9e:	1844      	adds	r4, r0, r1
 801dba0:	5c40      	ldrb	r0, [r0, r1]
 801dba2:	78a6      	ldrb	r6, [r4, #2]
 801dba4:	7861      	ldrb	r1, [r4, #1]
 801dba6:	960f      	str	r6, [sp, #60]	; 0x3c
 801dba8:	78e6      	ldrb	r6, [r4, #3]
 801dbaa:	910d      	str	r1, [sp, #52]	; 0x34
 801dbac:	9610      	str	r6, [sp, #64]	; 0x40
 801dbae:	f894 9004 	ldrb.w	r9, [r4, #4]
 801dbb2:	f894 b005 	ldrb.w	fp, [r4, #5]
 801dbb6:	b192      	cbz	r2, 801dbde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801dbb8:	f06f 0604 	mvn.w	r6, #4
 801dbbc:	2103      	movs	r1, #3
 801dbbe:	3405      	adds	r4, #5
 801dbc0:	fb17 6701 	smlabb	r7, r7, r1, r6
 801dbc4:	19e6      	adds	r6, r4, r7
 801dbc6:	5de4      	ldrb	r4, [r4, r7]
 801dbc8:	9417      	str	r4, [sp, #92]	; 0x5c
 801dbca:	7874      	ldrb	r4, [r6, #1]
 801dbcc:	9419      	str	r4, [sp, #100]	; 0x64
 801dbce:	78b4      	ldrb	r4, [r6, #2]
 801dbd0:	941b      	str	r4, [sp, #108]	; 0x6c
 801dbd2:	78f4      	ldrb	r4, [r6, #3]
 801dbd4:	9418      	str	r4, [sp, #96]	; 0x60
 801dbd6:	7934      	ldrb	r4, [r6, #4]
 801dbd8:	941a      	str	r4, [sp, #104]	; 0x68
 801dbda:	7974      	ldrb	r4, [r6, #5]
 801dbdc:	941c      	str	r4, [sp, #112]	; 0x70
 801dbde:	b29b      	uxth	r3, r3
 801dbe0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801dbe2:	b292      	uxth	r2, r2
 801dbe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dbe6:	3503      	adds	r5, #3
 801dbe8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dbec:	fb03 f402 	mul.w	r4, r3, r2
 801dbf0:	011b      	lsls	r3, r3, #4
 801dbf2:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801dbf6:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801dbfa:	1b1b      	subs	r3, r3, r4
 801dbfc:	b292      	uxth	r2, r2
 801dbfe:	b29b      	uxth	r3, r3
 801dc00:	1ab6      	subs	r6, r6, r2
 801dc02:	435f      	muls	r7, r3
 801dc04:	b2b6      	uxth	r6, r6
 801dc06:	fb03 f909 	mul.w	r9, r3, r9
 801dc0a:	fb03 fb0b 	mul.w	fp, r3, fp
 801dc0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dc10:	fb06 7000 	mla	r0, r6, r0, r7
 801dc14:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801dc16:	fb06 bb03 	mla	fp, r6, r3, fp
 801dc1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dc1c:	fb02 0007 	mla	r0, r2, r7, r0
 801dc20:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801dc22:	fb02 bb03 	mla	fp, r2, r3, fp
 801dc26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dc28:	fb04 0007 	mla	r0, r4, r7, r0
 801dc2c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801dc30:	fb17 f701 	smulbb	r7, r7, r1
 801dc34:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dc38:	990d      	ldr	r1, [sp, #52]	; 0x34
 801dc3a:	fb00 700e 	mla	r0, r0, lr, r7
 801dc3e:	fb06 9101 	mla	r1, r6, r1, r9
 801dc42:	b280      	uxth	r0, r0
 801dc44:	1c47      	adds	r7, r0, #1
 801dc46:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801dc4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dc4c:	1200      	asrs	r0, r0, #8
 801dc4e:	f805 0c06 	strb.w	r0, [r5, #-6]
 801dc52:	9819      	ldr	r0, [sp, #100]	; 0x64
 801dc54:	fb02 1100 	mla	r1, r2, r0, r1
 801dc58:	981a      	ldr	r0, [sp, #104]	; 0x68
 801dc5a:	fb04 1100 	mla	r1, r4, r0, r1
 801dc5e:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801dc62:	fb04 b403 	mla	r4, r4, r3, fp
 801dc66:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801dc6a:	fb10 f007 	smulbb	r0, r0, r7
 801dc6e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dc72:	fb13 f307 	smulbb	r3, r3, r7
 801dc76:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801dc7a:	fb01 010e 	mla	r1, r1, lr, r0
 801dc7e:	fb04 340e 	mla	r4, r4, lr, r3
 801dc82:	b289      	uxth	r1, r1
 801dc84:	b2a4      	uxth	r4, r4
 801dc86:	1c48      	adds	r0, r1, #1
 801dc88:	1c63      	adds	r3, r4, #1
 801dc8a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801dc8e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801dc92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801dc94:	1209      	asrs	r1, r1, #8
 801dc96:	1224      	asrs	r4, r4, #8
 801dc98:	449a      	add	sl, r3
 801dc9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dc9c:	f805 1c05 	strb.w	r1, [r5, #-5]
 801dca0:	f805 4c04 	strb.w	r4, [r5, #-4]
 801dca4:	4498      	add	r8, r3
 801dca6:	e707      	b.n	801dab8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801dca8:	b01f      	add	sp, #124	; 0x7c
 801dcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dcae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801dcae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcb2:	b087      	sub	sp, #28
 801dcb4:	780d      	ldrb	r5, [r1, #0]
 801dcb6:	784c      	ldrb	r4, [r1, #1]
 801dcb8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801dcbc:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801dcc0:	9004      	str	r0, [sp, #16]
 801dcc2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801dcc6:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801dcca:	9005      	str	r0, [sp, #20]
 801dccc:	fb06 bc03 	mla	ip, r6, r3, fp
 801dcd0:	2e00      	cmp	r6, #0
 801dcd2:	7888      	ldrb	r0, [r1, #2]
 801dcd4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dcd8:	eb02 090c 	add.w	r9, r2, ip
 801dcdc:	f2c0 8084 	blt.w	801dde8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801dce0:	42b7      	cmp	r7, r6
 801dce2:	f340 8081 	ble.w	801dde8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801dce6:	f1bb 0f00 	cmp.w	fp, #0
 801dcea:	db79      	blt.n	801dde0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801dcec:	455b      	cmp	r3, fp
 801dcee:	dd77      	ble.n	801dde0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801dcf0:	f812 200c 	ldrb.w	r2, [r2, ip]
 801dcf4:	9201      	str	r2, [sp, #4]
 801dcf6:	f899 2001 	ldrb.w	r2, [r9, #1]
 801dcfa:	9202      	str	r2, [sp, #8]
 801dcfc:	f899 2002 	ldrb.w	r2, [r9, #2]
 801dd00:	9203      	str	r2, [sp, #12]
 801dd02:	f11b 0201 	adds.w	r2, fp, #1
 801dd06:	d476      	bmi.n	801ddf6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dd08:	4293      	cmp	r3, r2
 801dd0a:	dd74      	ble.n	801ddf6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dd0c:	9a04      	ldr	r2, [sp, #16]
 801dd0e:	2a00      	cmp	r2, #0
 801dd10:	d071      	beq.n	801ddf6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dd12:	f899 8003 	ldrb.w	r8, [r9, #3]
 801dd16:	f899 c004 	ldrb.w	ip, [r9, #4]
 801dd1a:	f899 a005 	ldrb.w	sl, [r9, #5]
 801dd1e:	3601      	adds	r6, #1
 801dd20:	d471      	bmi.n	801de06 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801dd22:	42b7      	cmp	r7, r6
 801dd24:	dd6f      	ble.n	801de06 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801dd26:	9a05      	ldr	r2, [sp, #20]
 801dd28:	2a00      	cmp	r2, #0
 801dd2a:	d06c      	beq.n	801de06 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801dd2c:	f1bb 0f00 	cmp.w	fp, #0
 801dd30:	db65      	blt.n	801ddfe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801dd32:	455b      	cmp	r3, fp
 801dd34:	dd63      	ble.n	801ddfe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801dd36:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801dd3a:	f819 e002 	ldrb.w	lr, [r9, r2]
 801dd3e:	2203      	movs	r2, #3
 801dd40:	fb03 9602 	mla	r6, r3, r2, r9
 801dd44:	7877      	ldrb	r7, [r6, #1]
 801dd46:	78b6      	ldrb	r6, [r6, #2]
 801dd48:	f11b 0b01 	adds.w	fp, fp, #1
 801dd4c:	d40c      	bmi.n	801dd68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801dd4e:	455b      	cmp	r3, fp
 801dd50:	dd0a      	ble.n	801dd68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801dd52:	9a04      	ldr	r2, [sp, #16]
 801dd54:	b142      	cbz	r2, 801dd68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801dd56:	2203      	movs	r2, #3
 801dd58:	fb13 2002 	smlabb	r0, r3, r2, r2
 801dd5c:	f819 5000 	ldrb.w	r5, [r9, r0]
 801dd60:	fb03 9002 	mla	r0, r3, r2, r9
 801dd64:	7904      	ldrb	r4, [r0, #4]
 801dd66:	7940      	ldrb	r0, [r0, #5]
 801dd68:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801dd6c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801dd70:	fb03 fb02 	mul.w	fp, r3, r2
 801dd74:	011b      	lsls	r3, r3, #4
 801dd76:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801dd7a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801dd7e:	eba3 030b 	sub.w	r3, r3, fp
 801dd82:	b292      	uxth	r2, r2
 801dd84:	b29b      	uxth	r3, r3
 801dd86:	eba9 0902 	sub.w	r9, r9, r2
 801dd8a:	9304      	str	r3, [sp, #16]
 801dd8c:	fa1f f989 	uxth.w	r9, r9
 801dd90:	fb03 f808 	mul.w	r8, r3, r8
 801dd94:	9b01      	ldr	r3, [sp, #4]
 801dd96:	fb09 8803 	mla	r8, r9, r3, r8
 801dd9a:	9b04      	ldr	r3, [sp, #16]
 801dd9c:	fb03 fc0c 	mul.w	ip, r3, ip
 801dda0:	9b02      	ldr	r3, [sp, #8]
 801dda2:	fb02 880e 	mla	r8, r2, lr, r8
 801dda6:	fb09 cc03 	mla	ip, r9, r3, ip
 801ddaa:	9b04      	ldr	r3, [sp, #16]
 801ddac:	fb0b 8805 	mla	r8, fp, r5, r8
 801ddb0:	fb02 c707 	mla	r7, r2, r7, ip
 801ddb4:	fb03 f30a 	mul.w	r3, r3, sl
 801ddb8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ddbc:	fb0b 7404 	mla	r4, fp, r4, r7
 801ddc0:	f881 8000 	strb.w	r8, [r1]
 801ddc4:	1224      	asrs	r4, r4, #8
 801ddc6:	704c      	strb	r4, [r1, #1]
 801ddc8:	9c03      	ldr	r4, [sp, #12]
 801ddca:	fb09 3904 	mla	r9, r9, r4, r3
 801ddce:	fb02 9206 	mla	r2, r2, r6, r9
 801ddd2:	fb0b 2000 	mla	r0, fp, r0, r2
 801ddd6:	1200      	asrs	r0, r0, #8
 801ddd8:	7088      	strb	r0, [r1, #2]
 801ddda:	b007      	add	sp, #28
 801dddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dde0:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801dde4:	9501      	str	r5, [sp, #4]
 801dde6:	e78c      	b.n	801dd02 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801dde8:	4682      	mov	sl, r0
 801ddea:	46a4      	mov	ip, r4
 801ddec:	46a8      	mov	r8, r5
 801ddee:	9501      	str	r5, [sp, #4]
 801ddf0:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ddf4:	e793      	b.n	801dd1e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ddf6:	4682      	mov	sl, r0
 801ddf8:	46a4      	mov	ip, r4
 801ddfa:	46a8      	mov	r8, r5
 801ddfc:	e78f      	b.n	801dd1e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ddfe:	4606      	mov	r6, r0
 801de00:	4627      	mov	r7, r4
 801de02:	46ae      	mov	lr, r5
 801de04:	e7a0      	b.n	801dd48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801de06:	4606      	mov	r6, r0
 801de08:	4627      	mov	r7, r4
 801de0a:	46ae      	mov	lr, r5
 801de0c:	e7ac      	b.n	801dd68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801de0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de12:	b09b      	sub	sp, #108	; 0x6c
 801de14:	920b      	str	r2, [sp, #44]	; 0x2c
 801de16:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801de18:	9019      	str	r0, [sp, #100]	; 0x64
 801de1a:	9109      	str	r1, [sp, #36]	; 0x24
 801de1c:	6850      	ldr	r0, [r2, #4]
 801de1e:	9306      	str	r3, [sp, #24]
 801de20:	6812      	ldr	r2, [r2, #0]
 801de22:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801de26:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801de2a:	fb00 1303 	mla	r3, r0, r3, r1
 801de2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de32:	18d3      	adds	r3, r2, r3
 801de34:	9307      	str	r3, [sp, #28]
 801de36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	9308      	str	r3, [sp, #32]
 801de3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de3e:	2b00      	cmp	r3, #0
 801de40:	dc03      	bgt.n	801de4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801de42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de44:	2b00      	cmp	r3, #0
 801de46:	f340 81ab 	ble.w	801e1a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801de4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801de4c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801de50:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801de54:	1e48      	subs	r0, r1, #1
 801de56:	1e55      	subs	r5, r2, #1
 801de58:	9b06      	ldr	r3, [sp, #24]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	f340 80b1 	ble.w	801dfc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801de60:	ea5f 462b 	movs.w	r6, fp, asr #16
 801de64:	ea4f 4324 	mov.w	r3, r4, asr #16
 801de68:	d406      	bmi.n	801de78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801de6a:	4286      	cmp	r6, r0
 801de6c:	da04      	bge.n	801de78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801de6e:	2b00      	cmp	r3, #0
 801de70:	db02      	blt.n	801de78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801de72:	42ab      	cmp	r3, r5
 801de74:	f2c0 80a6 	blt.w	801dfc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801de78:	3601      	adds	r6, #1
 801de7a:	f100 8097 	bmi.w	801dfac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801de7e:	42b1      	cmp	r1, r6
 801de80:	f2c0 8094 	blt.w	801dfac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801de84:	3301      	adds	r3, #1
 801de86:	f100 8091 	bmi.w	801dfac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801de8a:	429a      	cmp	r2, r3
 801de8c:	f2c0 808e 	blt.w	801dfac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801de90:	9b06      	ldr	r3, [sp, #24]
 801de92:	9e07      	ldr	r6, [sp, #28]
 801de94:	930a      	str	r3, [sp, #40]	; 0x28
 801de96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de98:	2b00      	cmp	r3, #0
 801de9a:	f340 80b0 	ble.w	801dffe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801de9e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801dea0:	1425      	asrs	r5, r4, #16
 801dea2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dea4:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801dea8:	68c7      	ldr	r7, [r0, #12]
 801deaa:	ea5f 402b 	movs.w	r0, fp, asr #16
 801deae:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801deb2:	689b      	ldr	r3, [r3, #8]
 801deb4:	f100 80ea 	bmi.w	801e08c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801deb8:	f103 3cff 	add.w	ip, r3, #4294967295
 801debc:	4560      	cmp	r0, ip
 801debe:	f280 80e5 	bge.w	801e08c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dec2:	2d00      	cmp	r5, #0
 801dec4:	f2c0 80e2 	blt.w	801e08c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dec8:	f107 3cff 	add.w	ip, r7, #4294967295
 801decc:	4565      	cmp	r5, ip
 801dece:	f280 80dd 	bge.w	801e08c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ded2:	b21b      	sxth	r3, r3
 801ded4:	fb05 0003 	mla	r0, r5, r3, r0
 801ded8:	9d08      	ldr	r5, [sp, #32]
 801deda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dede:	182f      	adds	r7, r5, r0
 801dee0:	5c2d      	ldrb	r5, [r5, r0]
 801dee2:	7878      	ldrb	r0, [r7, #1]
 801dee4:	f897 e002 	ldrb.w	lr, [r7, #2]
 801dee8:	900c      	str	r0, [sp, #48]	; 0x30
 801deea:	f897 9003 	ldrb.w	r9, [r7, #3]
 801deee:	f897 8004 	ldrb.w	r8, [r7, #4]
 801def2:	f897 a005 	ldrb.w	sl, [r7, #5]
 801def6:	b1c9      	cbz	r1, 801df2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801def8:	f04f 0c03 	mov.w	ip, #3
 801defc:	f06f 0004 	mvn.w	r0, #4
 801df00:	3705      	adds	r7, #5
 801df02:	fb13 030c 	smlabb	r3, r3, ip, r0
 801df06:	eb07 0c03 	add.w	ip, r7, r3
 801df0a:	5cfb      	ldrb	r3, [r7, r3]
 801df0c:	930d      	str	r3, [sp, #52]	; 0x34
 801df0e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801df12:	930f      	str	r3, [sp, #60]	; 0x3c
 801df14:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801df18:	9311      	str	r3, [sp, #68]	; 0x44
 801df1a:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801df1e:	930e      	str	r3, [sp, #56]	; 0x38
 801df20:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801df24:	9310      	str	r3, [sp, #64]	; 0x40
 801df26:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801df2a:	9312      	str	r3, [sp, #72]	; 0x48
 801df2c:	b292      	uxth	r2, r2
 801df2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801df30:	b289      	uxth	r1, r1
 801df32:	fb02 f301 	mul.w	r3, r2, r1
 801df36:	0112      	lsls	r2, r2, #4
 801df38:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801df3c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801df40:	1ad2      	subs	r2, r2, r3
 801df42:	b289      	uxth	r1, r1
 801df44:	b292      	uxth	r2, r2
 801df46:	1a7f      	subs	r7, r7, r1
 801df48:	fb02 f909 	mul.w	r9, r2, r9
 801df4c:	b2bf      	uxth	r7, r7
 801df4e:	fb02 f808 	mul.w	r8, r2, r8
 801df52:	fb02 fa0a 	mul.w	sl, r2, sl
 801df56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801df58:	fb07 9905 	mla	r9, r7, r5, r9
 801df5c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801df5e:	fb07 8800 	mla	r8, r7, r0, r8
 801df62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801df64:	fb07 aa0e 	mla	sl, r7, lr, sl
 801df68:	fb01 9905 	mla	r9, r1, r5, r9
 801df6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801df6e:	fb01 8800 	mla	r8, r1, r0, r8
 801df72:	9810      	ldr	r0, [sp, #64]	; 0x40
 801df74:	fb01 a102 	mla	r1, r1, r2, sl
 801df78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801df7a:	fb03 9905 	mla	r9, r3, r5, r9
 801df7e:	fb03 8800 	mla	r8, r3, r0, r8
 801df82:	fb03 1302 	mla	r3, r3, r2, r1
 801df86:	ea4f 2929 	mov.w	r9, r9, asr #8
 801df8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df8e:	121b      	asrs	r3, r3, #8
 801df90:	f886 9000 	strb.w	r9, [r6]
 801df94:	f886 8001 	strb.w	r8, [r6, #1]
 801df98:	70b3      	strb	r3, [r6, #2]
 801df9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801df9c:	3603      	adds	r6, #3
 801df9e:	449b      	add	fp, r3
 801dfa0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dfa2:	441c      	add	r4, r3
 801dfa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfa6:	3b01      	subs	r3, #1
 801dfa8:	930a      	str	r3, [sp, #40]	; 0x28
 801dfaa:	e774      	b.n	801de96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801dfac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dfae:	449b      	add	fp, r3
 801dfb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dfb2:	441c      	add	r4, r3
 801dfb4:	9b06      	ldr	r3, [sp, #24]
 801dfb6:	3b01      	subs	r3, #1
 801dfb8:	9306      	str	r3, [sp, #24]
 801dfba:	9b07      	ldr	r3, [sp, #28]
 801dfbc:	3303      	adds	r3, #3
 801dfbe:	9307      	str	r3, [sp, #28]
 801dfc0:	e74a      	b.n	801de58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dfc2:	d024      	beq.n	801e00e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801dfc4:	9b06      	ldr	r3, [sp, #24]
 801dfc6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801dfc8:	3b01      	subs	r3, #1
 801dfca:	fb00 b003 	mla	r0, r0, r3, fp
 801dfce:	1400      	asrs	r0, r0, #16
 801dfd0:	f53f af5e 	bmi.w	801de90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dfd4:	3901      	subs	r1, #1
 801dfd6:	4288      	cmp	r0, r1
 801dfd8:	f6bf af5a 	bge.w	801de90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dfdc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801dfde:	fb01 4303 	mla	r3, r1, r3, r4
 801dfe2:	141b      	asrs	r3, r3, #16
 801dfe4:	f53f af54 	bmi.w	801de90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dfe8:	3a01      	subs	r2, #1
 801dfea:	4293      	cmp	r3, r2
 801dfec:	f6bf af50 	bge.w	801de90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dff0:	9b07      	ldr	r3, [sp, #28]
 801dff2:	f8dd e018 	ldr.w	lr, [sp, #24]
 801dff6:	1cde      	adds	r6, r3, #3
 801dff8:	f1be 0f00 	cmp.w	lr, #0
 801dffc:	dc5f      	bgt.n	801e0be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801dffe:	9b06      	ldr	r3, [sp, #24]
 801e000:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e004:	9b07      	ldr	r3, [sp, #28]
 801e006:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e00a:	4423      	add	r3, r4
 801e00c:	9307      	str	r3, [sp, #28]
 801e00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e010:	2b00      	cmp	r3, #0
 801e012:	f340 80c5 	ble.w	801e1a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e01a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e01c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e020:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e024:	eef0 6a62 	vmov.f32	s13, s5
 801e028:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e02c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e030:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e034:	ee16 ba90 	vmov	fp, s13
 801e038:	eef0 6a43 	vmov.f32	s13, s6
 801e03c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e040:	ee16 4a90 	vmov	r4, s13
 801e044:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e048:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e04c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e050:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e054:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e058:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e05c:	ee12 2a90 	vmov	r2, s5
 801e060:	eef0 2a47 	vmov.f32	s5, s14
 801e064:	fb92 f3f3 	sdiv	r3, r2, r3
 801e068:	ee13 2a10 	vmov	r2, s6
 801e06c:	9327      	str	r3, [sp, #156]	; 0x9c
 801e06e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e070:	eeb0 3a67 	vmov.f32	s6, s15
 801e074:	fb92 f3f3 	sdiv	r3, r2, r3
 801e078:	9328      	str	r3, [sp, #160]	; 0xa0
 801e07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e07c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e07e:	3b01      	subs	r3, #1
 801e080:	9309      	str	r3, [sp, #36]	; 0x24
 801e082:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e084:	bf08      	it	eq
 801e086:	4613      	moveq	r3, r2
 801e088:	9306      	str	r3, [sp, #24]
 801e08a:	e6d7      	b.n	801de3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e08c:	f110 0c01 	adds.w	ip, r0, #1
 801e090:	d483      	bmi.n	801df9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e092:	4563      	cmp	r3, ip
 801e094:	db81      	blt.n	801df9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e096:	f115 0c01 	adds.w	ip, r5, #1
 801e09a:	f53f af7e 	bmi.w	801df9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e09e:	4567      	cmp	r7, ip
 801e0a0:	f6ff af7b 	blt.w	801df9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e0a4:	b23f      	sxth	r7, r7
 801e0a6:	b21b      	sxth	r3, r3
 801e0a8:	9700      	str	r7, [sp, #0]
 801e0aa:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801e0ae:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801e0b2:	9a08      	ldr	r2, [sp, #32]
 801e0b4:	4631      	mov	r1, r6
 801e0b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e0b8:	f7ff fdf9 	bl	801dcae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801e0bc:	e76d      	b.n	801df9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e0be:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e0c0:	ea4f 402b 	mov.w	r0, fp, asr #16
 801e0c4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801e0c8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e0cc:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e0d0:	1421      	asrs	r1, r4, #16
 801e0d2:	930a      	str	r3, [sp, #40]	; 0x28
 801e0d4:	fb0c 0101 	mla	r1, ip, r1, r0
 801e0d8:	9808      	ldr	r0, [sp, #32]
 801e0da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e0de:	1845      	adds	r5, r0, r1
 801e0e0:	5c40      	ldrb	r0, [r0, r1]
 801e0e2:	796f      	ldrb	r7, [r5, #5]
 801e0e4:	7869      	ldrb	r1, [r5, #1]
 801e0e6:	f895 8002 	ldrb.w	r8, [r5, #2]
 801e0ea:	f895 a003 	ldrb.w	sl, [r5, #3]
 801e0ee:	f895 9004 	ldrb.w	r9, [r5, #4]
 801e0f2:	970c      	str	r7, [sp, #48]	; 0x30
 801e0f4:	b1a2      	cbz	r2, 801e120 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801e0f6:	2703      	movs	r7, #3
 801e0f8:	f06f 0304 	mvn.w	r3, #4
 801e0fc:	3505      	adds	r5, #5
 801e0fe:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801e102:	eb05 070c 	add.w	r7, r5, ip
 801e106:	f815 500c 	ldrb.w	r5, [r5, ip]
 801e10a:	9513      	str	r5, [sp, #76]	; 0x4c
 801e10c:	787d      	ldrb	r5, [r7, #1]
 801e10e:	9515      	str	r5, [sp, #84]	; 0x54
 801e110:	78bd      	ldrb	r5, [r7, #2]
 801e112:	9517      	str	r5, [sp, #92]	; 0x5c
 801e114:	78fd      	ldrb	r5, [r7, #3]
 801e116:	9514      	str	r5, [sp, #80]	; 0x50
 801e118:	793d      	ldrb	r5, [r7, #4]
 801e11a:	9516      	str	r5, [sp, #88]	; 0x58
 801e11c:	797d      	ldrb	r5, [r7, #5]
 801e11e:	9518      	str	r5, [sp, #96]	; 0x60
 801e120:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801e124:	b292      	uxth	r2, r2
 801e126:	3603      	adds	r6, #3
 801e128:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e12c:	fb03 f502 	mul.w	r5, r3, r2
 801e130:	011b      	lsls	r3, r3, #4
 801e132:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801e136:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801e13a:	1b5b      	subs	r3, r3, r5
 801e13c:	b292      	uxth	r2, r2
 801e13e:	b29b      	uxth	r3, r3
 801e140:	1abf      	subs	r7, r7, r2
 801e142:	fb03 f909 	mul.w	r9, r3, r9
 801e146:	b2bf      	uxth	r7, r7
 801e148:	fb03 fa0a 	mul.w	sl, r3, sl
 801e14c:	fb07 9901 	mla	r9, r7, r1, r9
 801e150:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e152:	fb07 aa00 	mla	sl, r7, r0, sl
 801e156:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e158:	fb02 9901 	mla	r9, r2, r1, r9
 801e15c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e15e:	fb02 aa00 	mla	sl, r2, r0, sl
 801e162:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e164:	fb05 9901 	mla	r9, r5, r1, r9
 801e168:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e16a:	fb05 aa00 	mla	sl, r5, r0, sl
 801e16e:	434b      	muls	r3, r1
 801e170:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e172:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e176:	fb07 3308 	mla	r3, r7, r8, r3
 801e17a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e17e:	f806 ac06 	strb.w	sl, [r6, #-6]
 801e182:	fb02 3201 	mla	r2, r2, r1, r3
 801e186:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e188:	f806 9c05 	strb.w	r9, [r6, #-5]
 801e18c:	fb05 2503 	mla	r5, r5, r3, r2
 801e190:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e192:	122d      	asrs	r5, r5, #8
 801e194:	449b      	add	fp, r3
 801e196:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e198:	f806 5c04 	strb.w	r5, [r6, #-4]
 801e19c:	441c      	add	r4, r3
 801e19e:	e72b      	b.n	801dff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e1a0:	b01b      	add	sp, #108	; 0x6c
 801e1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e1a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801e1a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1aa:	b087      	sub	sp, #28
 801e1ac:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801e1b0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801e1b4:	fb05 7003 	mla	r0, r5, r3, r7
 801e1b8:	2d00      	cmp	r5, #0
 801e1ba:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801e1be:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801e1c2:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801e1c6:	f2c0 811f 	blt.w	801e408 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801e1ca:	45a8      	cmp	r8, r5
 801e1cc:	f340 811c 	ble.w	801e408 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801e1d0:	2f00      	cmp	r7, #0
 801e1d2:	f2c0 8117 	blt.w	801e404 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801e1d6:	42bb      	cmp	r3, r7
 801e1d8:	f340 8114 	ble.w	801e404 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801e1dc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801e1e0:	1c7a      	adds	r2, r7, #1
 801e1e2:	f100 8114 	bmi.w	801e40e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801e1e6:	4293      	cmp	r3, r2
 801e1e8:	f340 8111 	ble.w	801e40e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801e1ec:	2c00      	cmp	r4, #0
 801e1ee:	f000 8110 	beq.w	801e412 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801e1f2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801e1f6:	3501      	adds	r5, #1
 801e1f8:	f100 810f 	bmi.w	801e41a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801e1fc:	45a8      	cmp	r8, r5
 801e1fe:	f340 810c 	ble.w	801e41a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801e202:	f1be 0f00 	cmp.w	lr, #0
 801e206:	f000 810b 	beq.w	801e420 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801e20a:	2f00      	cmp	r7, #0
 801e20c:	f2c0 8103 	blt.w	801e416 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801e210:	42bb      	cmp	r3, r7
 801e212:	f340 8100 	ble.w	801e416 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801e216:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801e21a:	3701      	adds	r7, #1
 801e21c:	f100 8103 	bmi.w	801e426 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801e220:	42bb      	cmp	r3, r7
 801e222:	f340 8100 	ble.w	801e426 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801e226:	2c00      	cmp	r4, #0
 801e228:	f000 80ff 	beq.w	801e42a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801e22c:	3301      	adds	r3, #1
 801e22e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e232:	fa1f fc84 	uxth.w	ip, r4
 801e236:	fa1f fe8e 	uxth.w	lr, lr
 801e23a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e23e:	fb0c f90e 	mul.w	r9, ip, lr
 801e242:	0e13      	lsrs	r3, r2, #24
 801e244:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e248:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801e24c:	9302      	str	r3, [sp, #8]
 801e24e:	ebac 0709 	sub.w	r7, ip, r9
 801e252:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801e256:	fa1f f48e 	uxth.w	r4, lr
 801e25a:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801e25e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e262:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801e266:	fb0a fe0e 	mul.w	lr, sl, lr
 801e26a:	1b1b      	subs	r3, r3, r4
 801e26c:	fb0a f606 	mul.w	r6, sl, r6
 801e270:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e274:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e278:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e27c:	b29b      	uxth	r3, r3
 801e27e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e282:	b2bf      	uxth	r7, r7
 801e284:	9301      	str	r3, [sp, #4]
 801e286:	44e6      	add	lr, ip
 801e288:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e28c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e290:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e294:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801e298:	9303      	str	r3, [sp, #12]
 801e29a:	0a33      	lsrs	r3, r6, #8
 801e29c:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801e2a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e2a4:	9304      	str	r3, [sp, #16]
 801e2a6:	fb0b f606 	mul.w	r6, fp, r6
 801e2aa:	fb0b f000 	mul.w	r0, fp, r0
 801e2ae:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801e2b2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e2b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2ba:	44b6      	add	lr, r6
 801e2bc:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801e2c0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801e2c4:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801e2c8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e2cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2d0:	fb08 f606 	mul.w	r6, r8, r6
 801e2d4:	0a03      	lsrs	r3, r0, #8
 801e2d6:	fb08 f505 	mul.w	r5, r8, r5
 801e2da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2de:	0a30      	lsrs	r0, r6, #8
 801e2e0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e2e4:	9305      	str	r3, [sp, #20]
 801e2e6:	0e13      	lsrs	r3, r2, #24
 801e2e8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e2ec:	fb0e fe07 	mul.w	lr, lr, r7
 801e2f0:	4430      	add	r0, r6
 801e2f2:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801e2f6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e2fa:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801e2fe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e302:	0a00      	lsrs	r0, r0, #8
 801e304:	435e      	muls	r6, r3
 801e306:	0a2d      	lsrs	r5, r5, #8
 801e308:	435a      	muls	r2, r3
 801e30a:	9b03      	ldr	r3, [sp, #12]
 801e30c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801e310:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e314:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e318:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e31c:	44b4      	add	ip, r6
 801e31e:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801e322:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e326:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e32a:	9e01      	ldr	r6, [sp, #4]
 801e32c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e330:	fb03 ee06 	mla	lr, r3, r6, lr
 801e334:	9b04      	ldr	r3, [sp, #16]
 801e336:	0a12      	lsrs	r2, r2, #8
 801e338:	fb0c ee09 	mla	lr, ip, r9, lr
 801e33c:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801e340:	9b05      	ldr	r3, [sp, #20]
 801e342:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e346:	fb00 ee04 	mla	lr, r0, r4, lr
 801e34a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e34e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801e352:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801e356:	9b01      	ldr	r3, [sp, #4]
 801e358:	fb07 fe0e 	mul.w	lr, r7, lr
 801e35c:	fb07 f70b 	mul.w	r7, r7, fp
 801e360:	fb03 ee06 	mla	lr, r3, r6, lr
 801e364:	fb03 730a 	mla	r3, r3, sl, r7
 801e368:	fb09 e202 	mla	r2, r9, r2, lr
 801e36c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801e370:	fb04 2e0e 	mla	lr, r4, lr, r2
 801e374:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801e378:	fb04 3408 	mla	r4, r4, r8, r3
 801e37c:	9b02      	ldr	r3, [sp, #8]
 801e37e:	b292      	uxth	r2, r2
 801e380:	fb09 4903 	mla	r9, r9, r3, r4
 801e384:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e388:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e38c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e390:	fb09 f902 	mul.w	r9, r9, r2
 801e394:	ea40 0e0e 	orr.w	lr, r0, lr
 801e398:	f109 0301 	add.w	r3, r9, #1
 801e39c:	fa5f f08e 	uxtb.w	r0, lr
 801e3a0:	fb10 f002 	smulbb	r0, r0, r2
 801e3a4:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e3a8:	780b      	ldrb	r3, [r1, #0]
 801e3aa:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801e3ae:	fa5f f989 	uxtb.w	r9, r9
 801e3b2:	fb03 0309 	mla	r3, r3, r9, r0
 801e3b6:	b29b      	uxth	r3, r3
 801e3b8:	1c58      	adds	r0, r3, #1
 801e3ba:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e3be:	7848      	ldrb	r0, [r1, #1]
 801e3c0:	fb10 f009 	smulbb	r0, r0, r9
 801e3c4:	121b      	asrs	r3, r3, #8
 801e3c6:	700b      	strb	r3, [r1, #0]
 801e3c8:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801e3cc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e3d0:	fb03 0302 	mla	r3, r3, r2, r0
 801e3d4:	b29b      	uxth	r3, r3
 801e3d6:	1c58      	adds	r0, r3, #1
 801e3d8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e3dc:	121b      	asrs	r3, r3, #8
 801e3de:	704b      	strb	r3, [r1, #1]
 801e3e0:	788b      	ldrb	r3, [r1, #2]
 801e3e2:	fb13 f909 	smulbb	r9, r3, r9
 801e3e6:	fb0e 9e02 	mla	lr, lr, r2, r9
 801e3ea:	fa1f fe8e 	uxth.w	lr, lr
 801e3ee:	f10e 0301 	add.w	r3, lr, #1
 801e3f2:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801e3f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e3fa:	f881 e002 	strb.w	lr, [r1, #2]
 801e3fe:	b007      	add	sp, #28
 801e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e404:	2600      	movs	r6, #0
 801e406:	e6eb      	b.n	801e1e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801e408:	2000      	movs	r0, #0
 801e40a:	4606      	mov	r6, r0
 801e40c:	e6f3      	b.n	801e1f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e40e:	2000      	movs	r0, #0
 801e410:	e6f1      	b.n	801e1f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e412:	4620      	mov	r0, r4
 801e414:	e6ef      	b.n	801e1f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e416:	2500      	movs	r5, #0
 801e418:	e6ff      	b.n	801e21a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801e41a:	2200      	movs	r2, #0
 801e41c:	4615      	mov	r5, r2
 801e41e:	e708      	b.n	801e232 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e420:	4672      	mov	r2, lr
 801e422:	4675      	mov	r5, lr
 801e424:	e705      	b.n	801e232 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e426:	2200      	movs	r2, #0
 801e428:	e703      	b.n	801e232 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e42a:	4622      	mov	r2, r4
 801e42c:	e701      	b.n	801e232 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801e42e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e42e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e432:	b09d      	sub	sp, #116	; 0x74
 801e434:	9219      	str	r2, [sp, #100]	; 0x64
 801e436:	9307      	str	r3, [sp, #28]
 801e438:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e43a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801e43e:	901b      	str	r0, [sp, #108]	; 0x6c
 801e440:	931a      	str	r3, [sp, #104]	; 0x68
 801e442:	6850      	ldr	r0, [r2, #4]
 801e444:	9117      	str	r1, [sp, #92]	; 0x5c
 801e446:	6812      	ldr	r2, [r2, #0]
 801e448:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e44c:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801e450:	fb00 1303 	mla	r3, r0, r3, r1
 801e454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e458:	18d3      	adds	r3, r2, r3
 801e45a:	930a      	str	r3, [sp, #40]	; 0x28
 801e45c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	9310      	str	r3, [sp, #64]	; 0x40
 801e462:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801e466:	930b      	str	r3, [sp, #44]	; 0x2c
 801e468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	dc03      	bgt.n	801e476 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e46e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e470:	2b00      	cmp	r3, #0
 801e472:	f340 8368 	ble.w	801eb46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e476:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e478:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e47c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e480:	1e48      	subs	r0, r1, #1
 801e482:	1e57      	subs	r7, r2, #1
 801e484:	9b07      	ldr	r3, [sp, #28]
 801e486:	2b00      	cmp	r3, #0
 801e488:	f340 8187 	ble.w	801e79a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e48c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e490:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e494:	d406      	bmi.n	801e4a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e496:	4584      	cmp	ip, r0
 801e498:	da04      	bge.n	801e4a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	db02      	blt.n	801e4a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e49e:	42bb      	cmp	r3, r7
 801e4a0:	f2c0 817c 	blt.w	801e79c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e4a4:	f11c 0c01 	adds.w	ip, ip, #1
 801e4a8:	f100 816c 	bmi.w	801e784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e4ac:	4561      	cmp	r1, ip
 801e4ae:	f2c0 8169 	blt.w	801e784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e4b2:	3301      	adds	r3, #1
 801e4b4:	f100 8166 	bmi.w	801e784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e4b8:	429a      	cmp	r2, r3
 801e4ba:	f2c0 8163 	blt.w	801e784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e4be:	9b07      	ldr	r3, [sp, #28]
 801e4c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e4c2:	9318      	str	r3, [sp, #96]	; 0x60
 801e4c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	f340 8186 	ble.w	801e7d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e4cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e4ce:	142a      	asrs	r2, r5, #16
 801e4d0:	ea4f 4026 	mov.w	r0, r6, asr #16
 801e4d4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e4d8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e4dc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801e4e0:	f100 81cb 	bmi.w	801e87a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e4e4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e4e8:	4542      	cmp	r2, r8
 801e4ea:	f280 81c6 	bge.w	801e87a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e4ee:	2800      	cmp	r0, #0
 801e4f0:	f2c0 81c3 	blt.w	801e87a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e4f4:	f103 38ff 	add.w	r8, r3, #4294967295
 801e4f8:	4540      	cmp	r0, r8
 801e4fa:	f280 81be 	bge.w	801e87a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e4fe:	fa0f f38e 	sxth.w	r3, lr
 801e502:	fb00 2203 	mla	r2, r0, r3, r2
 801e506:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e508:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801e50c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801e510:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801e514:	2900      	cmp	r1, #0
 801e516:	f000 81a6 	beq.w	801e866 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801e51a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e51e:	900c      	str	r0, [sp, #48]	; 0x30
 801e520:	0e00      	lsrs	r0, r0, #24
 801e522:	9013      	str	r0, [sp, #76]	; 0x4c
 801e524:	f1bc 0f00 	cmp.w	ip, #0
 801e528:	d00f      	beq.n	801e54a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e52a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e52e:	3b01      	subs	r3, #1
 801e530:	009b      	lsls	r3, r3, #2
 801e532:	3304      	adds	r3, #4
 801e534:	eb08 0003 	add.w	r0, r8, r3
 801e538:	f858 3003 	ldr.w	r3, [r8, r3]
 801e53c:	9308      	str	r3, [sp, #32]
 801e53e:	0e1b      	lsrs	r3, r3, #24
 801e540:	9311      	str	r3, [sp, #68]	; 0x44
 801e542:	6843      	ldr	r3, [r0, #4]
 801e544:	930d      	str	r3, [sp, #52]	; 0x34
 801e546:	0e1b      	lsrs	r3, r3, #24
 801e548:	9314      	str	r3, [sp, #80]	; 0x50
 801e54a:	b289      	uxth	r1, r1
 801e54c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e54e:	fa1f fc8c 	uxth.w	ip, ip
 801e552:	0108      	lsls	r0, r1, #4
 801e554:	fb01 f90c 	mul.w	r9, r1, ip
 801e558:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801e55c:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801e560:	eba0 0809 	sub.w	r8, r0, r9
 801e564:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e566:	fa1f f18c 	uxth.w	r1, ip
 801e56a:	fa1f f888 	uxth.w	r8, r8
 801e56e:	1a5b      	subs	r3, r3, r1
 801e570:	fb08 f000 	mul.w	r0, r8, r0
 801e574:	b29b      	uxth	r3, r3
 801e576:	fb03 000e 	mla	r0, r3, lr, r0
 801e57a:	fb01 0004 	mla	r0, r1, r4, r0
 801e57e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e580:	fb09 0004 	mla	r0, r9, r4, r0
 801e584:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e588:	2800      	cmp	r0, #0
 801e58a:	f000 80f2 	beq.w	801e772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e58e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e592:	d01b      	beq.n	801e5cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e594:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801e598:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e59c:	fb0e fa0a 	mul.w	sl, lr, sl
 801e5a0:	fb0e fe02 	mul.w	lr, lr, r2
 801e5a4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801e5a8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e5ac:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e5b0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e5b4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e5b8:	4452      	add	r2, sl
 801e5ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e5be:	0a12      	lsrs	r2, r2, #8
 801e5c0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e5c4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e5c8:	ea42 020c 	orr.w	r2, r2, ip
 801e5cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e5ce:	2cff      	cmp	r4, #255	; 0xff
 801e5d0:	d021      	beq.n	801e616 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e5d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e5d4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e5d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e5da:	fb04 fb0b 	mul.w	fp, r4, fp
 801e5de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e5e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e5e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e5e6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e5ea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e5ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801e5f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e5f6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e5fa:	44de      	add	lr, fp
 801e5fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e600:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e604:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e608:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e60c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e610:	ea4e 040a 	orr.w	r4, lr, sl
 801e614:	940c      	str	r4, [sp, #48]	; 0x30
 801e616:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e618:	2cff      	cmp	r4, #255	; 0xff
 801e61a:	d021      	beq.n	801e660 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801e61c:	9c08      	ldr	r4, [sp, #32]
 801e61e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e622:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e624:	fb04 fb0b 	mul.w	fp, r4, fp
 801e628:	9c08      	ldr	r4, [sp, #32]
 801e62a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e62e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e630:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e634:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e638:	fb04 fa0a 	mul.w	sl, r4, sl
 801e63c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e640:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e644:	44de      	add	lr, fp
 801e646:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e64a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e64e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e652:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e656:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e65a:	ea4e 040a 	orr.w	r4, lr, sl
 801e65e:	9408      	str	r4, [sp, #32]
 801e660:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e662:	2cff      	cmp	r4, #255	; 0xff
 801e664:	d021      	beq.n	801e6aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e666:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e668:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e66c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e66e:	fb04 fb0b 	mul.w	fp, r4, fp
 801e672:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e674:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e678:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e67a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e67e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e682:	fb04 fa0a 	mul.w	sl, r4, sl
 801e686:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e68a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e68e:	44de      	add	lr, fp
 801e690:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e694:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e698:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e69c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e6a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e6a4:	ea4e 040a 	orr.w	r4, lr, sl
 801e6a8:	940d      	str	r4, [sp, #52]	; 0x34
 801e6aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e6ac:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801e6b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e6b4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e6b8:	9c08      	ldr	r4, [sp, #32]
 801e6ba:	fb08 fc0c 	mul.w	ip, r8, ip
 801e6be:	fb03 cc0e 	mla	ip, r3, lr, ip
 801e6c2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e6c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e6c8:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e6cc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e6d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e6d2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e6d6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e6da:	fb08 f80e 	mul.w	r8, r8, lr
 801e6de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6e2:	fb03 8202 	mla	r2, r3, r2, r8
 801e6e6:	9b08      	ldr	r3, [sp, #32]
 801e6e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e6ec:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801e6f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e6f2:	fb01 220a 	mla	r2, r1, sl, r2
 801e6f6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801e6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6fc:	fb09 2901 	mla	r9, r9, r1, r2
 801e700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e702:	4343      	muls	r3, r0
 801e704:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e708:	1c58      	adds	r0, r3, #1
 801e70a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e70e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e712:	783b      	ldrb	r3, [r7, #0]
 801e714:	ea4c 0c09 	orr.w	ip, ip, r9
 801e718:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e71c:	fa5f f28c 	uxtb.w	r2, ip
 801e720:	b2c0      	uxtb	r0, r0
 801e722:	fb12 f201 	smulbb	r2, r2, r1
 801e726:	fb03 2300 	mla	r3, r3, r0, r2
 801e72a:	b29b      	uxth	r3, r3
 801e72c:	1c5a      	adds	r2, r3, #1
 801e72e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e732:	787a      	ldrb	r2, [r7, #1]
 801e734:	fb12 f200 	smulbb	r2, r2, r0
 801e738:	121b      	asrs	r3, r3, #8
 801e73a:	703b      	strb	r3, [r7, #0]
 801e73c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e740:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e744:	fb03 2301 	mla	r3, r3, r1, r2
 801e748:	b29b      	uxth	r3, r3
 801e74a:	1c5a      	adds	r2, r3, #1
 801e74c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e750:	121b      	asrs	r3, r3, #8
 801e752:	707b      	strb	r3, [r7, #1]
 801e754:	78bb      	ldrb	r3, [r7, #2]
 801e756:	fb13 f000 	smulbb	r0, r3, r0
 801e75a:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e75e:	fa1f fc8c 	uxth.w	ip, ip
 801e762:	f10c 0301 	add.w	r3, ip, #1
 801e766:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e76a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e76e:	f887 c002 	strb.w	ip, [r7, #2]
 801e772:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e774:	3703      	adds	r7, #3
 801e776:	441d      	add	r5, r3
 801e778:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e77a:	441e      	add	r6, r3
 801e77c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e77e:	3b01      	subs	r3, #1
 801e780:	9318      	str	r3, [sp, #96]	; 0x60
 801e782:	e69f      	b.n	801e4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e784:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e786:	441d      	add	r5, r3
 801e788:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e78a:	441e      	add	r6, r3
 801e78c:	9b07      	ldr	r3, [sp, #28]
 801e78e:	3b01      	subs	r3, #1
 801e790:	9307      	str	r3, [sp, #28]
 801e792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e794:	3303      	adds	r3, #3
 801e796:	930a      	str	r3, [sp, #40]	; 0x28
 801e798:	e674      	b.n	801e484 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e79a:	d025      	beq.n	801e7e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801e79c:	9b07      	ldr	r3, [sp, #28]
 801e79e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801e7a0:	3b01      	subs	r3, #1
 801e7a2:	fb00 5003 	mla	r0, r0, r3, r5
 801e7a6:	1400      	asrs	r0, r0, #16
 801e7a8:	f53f ae89 	bmi.w	801e4be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e7ac:	3901      	subs	r1, #1
 801e7ae:	4288      	cmp	r0, r1
 801e7b0:	f6bf ae85 	bge.w	801e4be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e7b4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e7b6:	fb01 6303 	mla	r3, r1, r3, r6
 801e7ba:	141b      	asrs	r3, r3, #16
 801e7bc:	f53f ae7f 	bmi.w	801e4be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e7c0:	3a01      	subs	r2, #1
 801e7c2:	4293      	cmp	r3, r2
 801e7c4:	f6bf ae7b 	bge.w	801e4be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7ca:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e7ce:	f103 0e03 	add.w	lr, r3, #3
 801e7d2:	f1bb 0f00 	cmp.w	fp, #0
 801e7d6:	dc6e      	bgt.n	801e8b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801e7d8:	9b07      	ldr	r3, [sp, #28]
 801e7da:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e7e4:	4423      	add	r3, r4
 801e7e6:	930a      	str	r3, [sp, #40]	; 0x28
 801e7e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	f340 81ab 	ble.w	801eb46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e7f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e7f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e7f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e7fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e7fe:	eef0 6a62 	vmov.f32	s13, s5
 801e802:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e806:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e80a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e80e:	ee16 5a90 	vmov	r5, s13
 801e812:	eef0 6a43 	vmov.f32	s13, s6
 801e816:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e81a:	ee16 6a90 	vmov	r6, s13
 801e81e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e822:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e826:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e82a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e82e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e832:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e836:	ee12 2a90 	vmov	r2, s5
 801e83a:	eef0 2a47 	vmov.f32	s5, s14
 801e83e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e842:	ee13 2a10 	vmov	r2, s6
 801e846:	9329      	str	r3, [sp, #164]	; 0xa4
 801e848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e84a:	eeb0 3a67 	vmov.f32	s6, s15
 801e84e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e852:	932a      	str	r3, [sp, #168]	; 0xa8
 801e854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e856:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e858:	3b01      	subs	r3, #1
 801e85a:	9317      	str	r3, [sp, #92]	; 0x5c
 801e85c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e85e:	bf08      	it	eq
 801e860:	4613      	moveq	r3, r2
 801e862:	9307      	str	r3, [sp, #28]
 801e864:	e600      	b.n	801e468 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e866:	f1bc 0f00 	cmp.w	ip, #0
 801e86a:	f43f ae6e 	beq.w	801e54a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e86e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e872:	9308      	str	r3, [sp, #32]
 801e874:	0e1b      	lsrs	r3, r3, #24
 801e876:	9311      	str	r3, [sp, #68]	; 0x44
 801e878:	e667      	b.n	801e54a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e87a:	f112 0801 	adds.w	r8, r2, #1
 801e87e:	f53f af78 	bmi.w	801e772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e882:	45c6      	cmp	lr, r8
 801e884:	f6ff af75 	blt.w	801e772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e888:	f110 0801 	adds.w	r8, r0, #1
 801e88c:	f53f af71 	bmi.w	801e772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e890:	4543      	cmp	r3, r8
 801e892:	f6ff af6e 	blt.w	801e772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e896:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e898:	b21b      	sxth	r3, r3
 801e89a:	9201      	str	r2, [sp, #4]
 801e89c:	9300      	str	r3, [sp, #0]
 801e89e:	fa0f f38e 	sxth.w	r3, lr
 801e8a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8a8:	e9cd c404 	strd	ip, r4, [sp, #16]
 801e8ac:	4639      	mov	r1, r7
 801e8ae:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801e8b0:	f7ff fc79 	bl	801e1a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801e8b4:	e75d      	b.n	801e772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e8b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e8b8:	142f      	asrs	r7, r5, #16
 801e8ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e8bc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e8c0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801e8c4:	1433      	asrs	r3, r6, #16
 801e8c6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e8ca:	fb02 7303 	mla	r3, r2, r3, r7
 801e8ce:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801e8d2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e8d6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e8da:	2900      	cmp	r1, #0
 801e8dc:	f000 812a 	beq.w	801eb34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801e8e0:	687c      	ldr	r4, [r7, #4]
 801e8e2:	940e      	str	r4, [sp, #56]	; 0x38
 801e8e4:	0e24      	lsrs	r4, r4, #24
 801e8e6:	9415      	str	r4, [sp, #84]	; 0x54
 801e8e8:	b178      	cbz	r0, 801e90a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e8ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801e8ee:	3a01      	subs	r2, #1
 801e8f0:	0092      	lsls	r2, r2, #2
 801e8f2:	3204      	adds	r2, #4
 801e8f4:	eb07 0802 	add.w	r8, r7, r2
 801e8f8:	58ba      	ldr	r2, [r7, r2]
 801e8fa:	9209      	str	r2, [sp, #36]	; 0x24
 801e8fc:	0e12      	lsrs	r2, r2, #24
 801e8fe:	9212      	str	r2, [sp, #72]	; 0x48
 801e900:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e904:	920f      	str	r2, [sp, #60]	; 0x3c
 801e906:	0e12      	lsrs	r2, r2, #24
 801e908:	9216      	str	r2, [sp, #88]	; 0x58
 801e90a:	b289      	uxth	r1, r1
 801e90c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e90e:	b280      	uxth	r0, r0
 801e910:	fb01 f900 	mul.w	r9, r1, r0
 801e914:	0109      	lsls	r1, r1, #4
 801e916:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e91a:	eba1 0809 	sub.w	r8, r1, r9
 801e91e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801e922:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e924:	b280      	uxth	r0, r0
 801e926:	fa1f f888 	uxth.w	r8, r8
 801e92a:	1a12      	subs	r2, r2, r0
 801e92c:	fb08 f101 	mul.w	r1, r8, r1
 801e930:	b292      	uxth	r2, r2
 801e932:	fb02 110c 	mla	r1, r2, ip, r1
 801e936:	fb00 1104 	mla	r1, r0, r4, r1
 801e93a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e93c:	fb09 1104 	mla	r1, r9, r4, r1
 801e940:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e944:	2900      	cmp	r1, #0
 801e946:	f000 80ec 	beq.w	801eb22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801e94a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e94e:	d019      	beq.n	801e984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801e950:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e954:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e958:	fb0c fa0a 	mul.w	sl, ip, sl
 801e95c:	fb0c fc03 	mul.w	ip, ip, r3
 801e960:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e964:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e968:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e96c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e970:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e974:	4453      	add	r3, sl
 801e976:	0a3f      	lsrs	r7, r7, #8
 801e978:	0a1b      	lsrs	r3, r3, #8
 801e97a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e97e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e982:	433b      	orrs	r3, r7
 801e984:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e986:	2cff      	cmp	r4, #255	; 0xff
 801e988:	d020      	beq.n	801e9cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801e98a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e98c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e990:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e992:	4367      	muls	r7, r4
 801e994:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e996:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e99a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e99e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e9a0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e9a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9a8:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9ac:	44bc      	add	ip, r7
 801e9ae:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e9b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9b6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e9c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e9c6:	ea4c 040a 	orr.w	r4, ip, sl
 801e9ca:	940e      	str	r4, [sp, #56]	; 0x38
 801e9cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9ce:	2cff      	cmp	r4, #255	; 0xff
 801e9d0:	d020      	beq.n	801ea14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801e9d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9d4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e9d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9da:	4367      	muls	r7, r4
 801e9dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9de:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e9e2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e9e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9e8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e9ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9f0:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9f4:	44bc      	add	ip, r7
 801e9f6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e9fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea0e:	ea4c 040a 	orr.w	r4, ip, sl
 801ea12:	9409      	str	r4, [sp, #36]	; 0x24
 801ea14:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ea16:	2cff      	cmp	r4, #255	; 0xff
 801ea18:	d020      	beq.n	801ea5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801ea1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ea1c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ea20:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ea22:	4367      	muls	r7, r4
 801ea24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ea26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea2e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ea30:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ea34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea38:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea3c:	44bc      	add	ip, r7
 801ea3e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ea42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea56:	ea4c 040a 	orr.w	r4, ip, sl
 801ea5a:	940f      	str	r4, [sp, #60]	; 0x3c
 801ea5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea5e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ea62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ea66:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ea6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ea6c:	fb08 f707 	mul.w	r7, r8, r7
 801ea70:	fb02 770c 	mla	r7, r2, ip, r7
 801ea74:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ea78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ea7a:	fb00 770c 	mla	r7, r0, ip, r7
 801ea7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ea82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea84:	fb09 770c 	mla	r7, r9, ip, r7
 801ea88:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ea8c:	fb08 f80c 	mul.w	r8, r8, ip
 801ea90:	0a3f      	lsrs	r7, r7, #8
 801ea92:	fb02 8303 	mla	r3, r2, r3, r8
 801ea96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea98:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ea9c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801eaa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eaa2:	fb00 330a 	mla	r3, r0, sl, r3
 801eaa6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801eaaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801eaac:	fb09 3c0c 	mla	ip, r9, ip, r3
 801eab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eab2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eab6:	434b      	muls	r3, r1
 801eab8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801eabc:	1c59      	adds	r1, r3, #1
 801eabe:	ea47 070c 	orr.w	r7, r7, ip
 801eac2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801eac6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801eaca:	b2fa      	uxtb	r2, r7
 801eacc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ead0:	fb12 f200 	smulbb	r2, r2, r0
 801ead4:	b2c9      	uxtb	r1, r1
 801ead6:	fb03 2301 	mla	r3, r3, r1, r2
 801eada:	b29b      	uxth	r3, r3
 801eadc:	1c5a      	adds	r2, r3, #1
 801eade:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801eae2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801eae6:	fb12 f201 	smulbb	r2, r2, r1
 801eaea:	121b      	asrs	r3, r3, #8
 801eaec:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801eaf0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801eaf4:	0c3f      	lsrs	r7, r7, #16
 801eaf6:	fb03 2300 	mla	r3, r3, r0, r2
 801eafa:	b29b      	uxth	r3, r3
 801eafc:	1c5a      	adds	r2, r3, #1
 801eafe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801eb02:	121b      	asrs	r3, r3, #8
 801eb04:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801eb08:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801eb0c:	fb13 f101 	smulbb	r1, r3, r1
 801eb10:	fb07 1700 	mla	r7, r7, r0, r1
 801eb14:	b2bf      	uxth	r7, r7
 801eb16:	1c79      	adds	r1, r7, #1
 801eb18:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801eb1c:	123f      	asrs	r7, r7, #8
 801eb1e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801eb22:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eb24:	f10e 0e03 	add.w	lr, lr, #3
 801eb28:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb2c:	441d      	add	r5, r3
 801eb2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eb30:	441e      	add	r6, r3
 801eb32:	e64e      	b.n	801e7d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801eb34:	2800      	cmp	r0, #0
 801eb36:	f43f aee8 	beq.w	801e90a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801eb3a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801eb3e:	9209      	str	r2, [sp, #36]	; 0x24
 801eb40:	0e12      	lsrs	r2, r2, #24
 801eb42:	9212      	str	r2, [sp, #72]	; 0x48
 801eb44:	e6e1      	b.n	801e90a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801eb46:	b01d      	add	sp, #116	; 0x74
 801eb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb4c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801eb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb50:	b087      	sub	sp, #28
 801eb52:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801eb56:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801eb5a:	fb05 7003 	mla	r0, r5, r3, r7
 801eb5e:	2d00      	cmp	r5, #0
 801eb60:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801eb64:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801eb68:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801eb6c:	f2c0 810a 	blt.w	801ed84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801eb70:	45a8      	cmp	r8, r5
 801eb72:	f340 8107 	ble.w	801ed84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801eb76:	2f00      	cmp	r7, #0
 801eb78:	f2c0 8102 	blt.w	801ed80 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801eb7c:	42bb      	cmp	r3, r7
 801eb7e:	f340 80ff 	ble.w	801ed80 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801eb82:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801eb86:	1c7a      	adds	r2, r7, #1
 801eb88:	f100 80ff 	bmi.w	801ed8a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801eb8c:	4293      	cmp	r3, r2
 801eb8e:	f340 80fc 	ble.w	801ed8a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801eb92:	2c00      	cmp	r4, #0
 801eb94:	f000 80fb 	beq.w	801ed8e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801eb98:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801eb9c:	3501      	adds	r5, #1
 801eb9e:	f100 80fa 	bmi.w	801ed96 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801eba2:	45a8      	cmp	r8, r5
 801eba4:	f340 80f7 	ble.w	801ed96 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801eba8:	f1be 0f00 	cmp.w	lr, #0
 801ebac:	f000 80f6 	beq.w	801ed9c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801ebb0:	2f00      	cmp	r7, #0
 801ebb2:	f2c0 80ee 	blt.w	801ed92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801ebb6:	42bb      	cmp	r3, r7
 801ebb8:	f340 80eb 	ble.w	801ed92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801ebbc:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801ebc0:	3701      	adds	r7, #1
 801ebc2:	f100 80ee 	bmi.w	801eda2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801ebc6:	42bb      	cmp	r3, r7
 801ebc8:	f340 80eb 	ble.w	801eda2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801ebcc:	2c00      	cmp	r4, #0
 801ebce:	f000 80ea 	beq.w	801eda6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801ebd2:	3301      	adds	r3, #1
 801ebd4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ebd8:	fa1f fc84 	uxth.w	ip, r4
 801ebdc:	fa1f fe8e 	uxth.w	lr, lr
 801ebe0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ebe4:	fb0c f90e 	mul.w	r9, ip, lr
 801ebe8:	0e13      	lsrs	r3, r2, #24
 801ebea:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ebee:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ebf2:	9302      	str	r3, [sp, #8]
 801ebf4:	ebac 0709 	sub.w	r7, ip, r9
 801ebf8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ebfc:	fa1f f48e 	uxth.w	r4, lr
 801ec00:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801ec04:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ec08:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ec0c:	fb0a fe0e 	mul.w	lr, sl, lr
 801ec10:	1b1b      	subs	r3, r3, r4
 801ec12:	fb0a f606 	mul.w	r6, sl, r6
 801ec16:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ec1a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ec1e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ec22:	b29b      	uxth	r3, r3
 801ec24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec28:	b2bf      	uxth	r7, r7
 801ec2a:	9301      	str	r3, [sp, #4]
 801ec2c:	44e6      	add	lr, ip
 801ec2e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ec32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec36:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ec3a:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801ec3e:	9303      	str	r3, [sp, #12]
 801ec40:	0a33      	lsrs	r3, r6, #8
 801ec42:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801ec46:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ec4a:	9304      	str	r3, [sp, #16]
 801ec4c:	fb0b f606 	mul.w	r6, fp, r6
 801ec50:	fb0b f000 	mul.w	r0, fp, r0
 801ec54:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ec58:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ec5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ec60:	44b6      	add	lr, r6
 801ec62:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801ec66:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ec6a:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801ec6e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ec72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec76:	fb08 f606 	mul.w	r6, r8, r6
 801ec7a:	0a03      	lsrs	r3, r0, #8
 801ec7c:	fb08 f505 	mul.w	r5, r8, r5
 801ec80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ec84:	0a30      	lsrs	r0, r6, #8
 801ec86:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ec8a:	9305      	str	r3, [sp, #20]
 801ec8c:	0e13      	lsrs	r3, r2, #24
 801ec8e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ec92:	fb0e fe07 	mul.w	lr, lr, r7
 801ec96:	4430      	add	r0, r6
 801ec98:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801ec9c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801eca0:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801eca4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801eca8:	0a00      	lsrs	r0, r0, #8
 801ecaa:	435e      	muls	r6, r3
 801ecac:	0a2d      	lsrs	r5, r5, #8
 801ecae:	435a      	muls	r2, r3
 801ecb0:	9b03      	ldr	r3, [sp, #12]
 801ecb2:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ecb6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ecba:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ecbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ecc2:	44b4      	add	ip, r6
 801ecc4:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801ecc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eccc:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801ecd0:	9e01      	ldr	r6, [sp, #4]
 801ecd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ecd6:	fb03 ee06 	mla	lr, r3, r6, lr
 801ecda:	9b04      	ldr	r3, [sp, #16]
 801ecdc:	0a12      	lsrs	r2, r2, #8
 801ecde:	fb0c ee09 	mla	lr, ip, r9, lr
 801ece2:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801ece6:	9b05      	ldr	r3, [sp, #20]
 801ece8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ecec:	fb00 ee04 	mla	lr, r0, r4, lr
 801ecf0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ecf4:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801ecf8:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801ecfc:	9b01      	ldr	r3, [sp, #4]
 801ecfe:	fb07 fe0e 	mul.w	lr, r7, lr
 801ed02:	fb07 f70b 	mul.w	r7, r7, fp
 801ed06:	fb03 ee06 	mla	lr, r3, r6, lr
 801ed0a:	fb03 730a 	mla	r3, r3, sl, r7
 801ed0e:	fb09 e202 	mla	r2, r9, r2, lr
 801ed12:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801ed16:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ed1a:	fb04 3408 	mla	r4, r4, r8, r3
 801ed1e:	9b02      	ldr	r3, [sp, #8]
 801ed20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed24:	fb09 4903 	mla	r9, r9, r3, r4
 801ed28:	780b      	ldrb	r3, [r1, #0]
 801ed2a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ed2e:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801ed32:	ea40 0e0e 	orr.w	lr, r0, lr
 801ed36:	fa5f f989 	uxtb.w	r9, r9
 801ed3a:	fb03 f209 	mul.w	r2, r3, r9
 801ed3e:	1c53      	adds	r3, r2, #1
 801ed40:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ed44:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ed48:	700b      	strb	r3, [r1, #0]
 801ed4a:	784b      	ldrb	r3, [r1, #1]
 801ed4c:	fb03 f309 	mul.w	r3, r3, r9
 801ed50:	1c5a      	adds	r2, r3, #1
 801ed52:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ed56:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801ed5a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801ed5e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ed62:	704b      	strb	r3, [r1, #1]
 801ed64:	788b      	ldrb	r3, [r1, #2]
 801ed66:	fb03 f909 	mul.w	r9, r3, r9
 801ed6a:	f109 0301 	add.w	r3, r9, #1
 801ed6e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ed72:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801ed76:	f881 e002 	strb.w	lr, [r1, #2]
 801ed7a:	b007      	add	sp, #28
 801ed7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed80:	2600      	movs	r6, #0
 801ed82:	e700      	b.n	801eb86 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801ed84:	2000      	movs	r0, #0
 801ed86:	4606      	mov	r6, r0
 801ed88:	e708      	b.n	801eb9c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ed8a:	2000      	movs	r0, #0
 801ed8c:	e706      	b.n	801eb9c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ed8e:	4620      	mov	r0, r4
 801ed90:	e704      	b.n	801eb9c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ed92:	2500      	movs	r5, #0
 801ed94:	e714      	b.n	801ebc0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801ed96:	2200      	movs	r2, #0
 801ed98:	4615      	mov	r5, r2
 801ed9a:	e71d      	b.n	801ebd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801ed9c:	4672      	mov	r2, lr
 801ed9e:	4675      	mov	r5, lr
 801eda0:	e71a      	b.n	801ebd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eda2:	2200      	movs	r2, #0
 801eda4:	e718      	b.n	801ebd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eda6:	4622      	mov	r2, r4
 801eda8:	e716      	b.n	801ebd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801edaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801edaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edae:	b099      	sub	sp, #100	; 0x64
 801edb0:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801edb4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801edb6:	9017      	str	r0, [sp, #92]	; 0x5c
 801edb8:	9306      	str	r3, [sp, #24]
 801edba:	6850      	ldr	r0, [r2, #4]
 801edbc:	6812      	ldr	r2, [r2, #0]
 801edbe:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801edc2:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801edc6:	fb00 1303 	mla	r3, r0, r3, r1
 801edca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edce:	18d3      	adds	r3, r2, r3
 801edd0:	9309      	str	r3, [sp, #36]	; 0x24
 801edd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	930e      	str	r3, [sp, #56]	; 0x38
 801edd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801edda:	2b00      	cmp	r3, #0
 801eddc:	dc03      	bgt.n	801ede6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801edde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	f340 8360 	ble.w	801f4a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801ede6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ede8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801edec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801edf0:	1e48      	subs	r0, r1, #1
 801edf2:	1e57      	subs	r7, r2, #1
 801edf4:	9b06      	ldr	r3, [sp, #24]
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	f340 817b 	ble.w	801f0f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801edfc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ee00:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ee04:	d406      	bmi.n	801ee14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ee06:	4584      	cmp	ip, r0
 801ee08:	da04      	bge.n	801ee14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	db02      	blt.n	801ee14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ee0e:	42bb      	cmp	r3, r7
 801ee10:	f2c0 8170 	blt.w	801f0f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ee14:	f11c 0c01 	adds.w	ip, ip, #1
 801ee18:	f100 8160 	bmi.w	801f0dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ee1c:	4561      	cmp	r1, ip
 801ee1e:	f2c0 815d 	blt.w	801f0dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ee22:	3301      	adds	r3, #1
 801ee24:	f100 815a 	bmi.w	801f0dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ee28:	429a      	cmp	r2, r3
 801ee2a:	f2c0 8157 	blt.w	801f0dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ee2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ee32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ee34:	f1b8 0f00 	cmp.w	r8, #0
 801ee38:	f340 8179 	ble.w	801f12e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ee3c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ee3e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ee42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ee44:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ee48:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ee4c:	142a      	asrs	r2, r5, #16
 801ee4e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ee52:	689b      	ldr	r3, [r3, #8]
 801ee54:	f100 81be 	bmi.w	801f1d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ee58:	f103 39ff 	add.w	r9, r3, #4294967295
 801ee5c:	454a      	cmp	r2, r9
 801ee5e:	f280 81b9 	bge.w	801f1d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ee62:	f1bc 0f00 	cmp.w	ip, #0
 801ee66:	f2c0 81b5 	blt.w	801f1d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ee6a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ee6e:	45cc      	cmp	ip, r9
 801ee70:	f280 81b0 	bge.w	801f1d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ee74:	b21b      	sxth	r3, r3
 801ee76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee78:	fb0c 2203 	mla	r2, ip, r3, r2
 801ee7c:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801ee80:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ee84:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ee88:	2900      	cmp	r1, #0
 801ee8a:	f000 8197 	beq.w	801f1bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ee8e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ee92:	940a      	str	r4, [sp, #40]	; 0x28
 801ee94:	0e24      	lsrs	r4, r4, #24
 801ee96:	9411      	str	r4, [sp, #68]	; 0x44
 801ee98:	b180      	cbz	r0, 801eebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ee9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ee9e:	3b01      	subs	r3, #1
 801eea0:	009b      	lsls	r3, r3, #2
 801eea2:	3304      	adds	r3, #4
 801eea4:	eb09 0c03 	add.w	ip, r9, r3
 801eea8:	f859 3003 	ldr.w	r3, [r9, r3]
 801eeac:	9307      	str	r3, [sp, #28]
 801eeae:	0e1b      	lsrs	r3, r3, #24
 801eeb0:	930f      	str	r3, [sp, #60]	; 0x3c
 801eeb2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801eeb6:	930b      	str	r3, [sp, #44]	; 0x2c
 801eeb8:	0e1b      	lsrs	r3, r3, #24
 801eeba:	9312      	str	r3, [sp, #72]	; 0x48
 801eebc:	b289      	uxth	r1, r1
 801eebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eec0:	b280      	uxth	r0, r0
 801eec2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801eec4:	fb01 fa00 	mul.w	sl, r1, r0
 801eec8:	0109      	lsls	r1, r1, #4
 801eeca:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801eece:	eba1 090a 	sub.w	r9, r1, sl
 801eed2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801eed6:	b280      	uxth	r0, r0
 801eed8:	fa1f f989 	uxth.w	r9, r9
 801eedc:	1a09      	subs	r1, r1, r0
 801eede:	fb09 f303 	mul.w	r3, r9, r3
 801eee2:	b289      	uxth	r1, r1
 801eee4:	fb01 330e 	mla	r3, r1, lr, r3
 801eee8:	fb00 3304 	mla	r3, r0, r4, r3
 801eeec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eeee:	fb0a 3304 	mla	r3, sl, r4, r3
 801eef2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	f000 80e8 	beq.w	801f0cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801eefc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ef00:	d01b      	beq.n	801ef3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ef02:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801ef06:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ef0a:	fb0e fb0b 	mul.w	fp, lr, fp
 801ef0e:	fb0e fe02 	mul.w	lr, lr, r2
 801ef12:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ef16:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ef1a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ef1e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ef22:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ef26:	445a      	add	r2, fp
 801ef28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef2c:	0a12      	lsrs	r2, r2, #8
 801ef2e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ef32:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ef36:	ea42 020c 	orr.w	r2, r2, ip
 801ef3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ef3c:	2cff      	cmp	r4, #255	; 0xff
 801ef3e:	d021      	beq.n	801ef84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801ef40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ef42:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ef46:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ef48:	fb04 fc0c 	mul.w	ip, r4, ip
 801ef4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ef4e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ef52:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ef56:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ef58:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ef5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ef60:	fb04 fb0b 	mul.w	fp, r4, fp
 801ef64:	44e6      	add	lr, ip
 801ef66:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ef6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ef6e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ef72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ef76:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ef7a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ef7e:	ea4e 040b 	orr.w	r4, lr, fp
 801ef82:	940a      	str	r4, [sp, #40]	; 0x28
 801ef84:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ef86:	2cff      	cmp	r4, #255	; 0xff
 801ef88:	d021      	beq.n	801efce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ef8a:	9c07      	ldr	r4, [sp, #28]
 801ef8c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ef90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ef92:	fb04 fc0c 	mul.w	ip, r4, ip
 801ef96:	9c07      	ldr	r4, [sp, #28]
 801ef98:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ef9c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801efa0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801efa2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801efa6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801efaa:	fb04 fb0b 	mul.w	fp, r4, fp
 801efae:	44e6      	add	lr, ip
 801efb0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801efb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801efb8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801efbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801efc0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801efc4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801efc8:	ea4e 040b 	orr.w	r4, lr, fp
 801efcc:	9407      	str	r4, [sp, #28]
 801efce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801efd0:	2cff      	cmp	r4, #255	; 0xff
 801efd2:	d021      	beq.n	801f018 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801efd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801efd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801efda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801efdc:	fb04 fc0c 	mul.w	ip, r4, ip
 801efe0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801efe2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801efe6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801efea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801efec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801eff0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eff4:	fb04 fb0b 	mul.w	fp, r4, fp
 801eff8:	44e6      	add	lr, ip
 801effa:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801effe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f002:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f006:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f00a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f00e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f012:	ea4e 040b 	orr.w	r4, lr, fp
 801f016:	940b      	str	r4, [sp, #44]	; 0x2c
 801f018:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f01a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f01e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f022:	2bff      	cmp	r3, #255	; 0xff
 801f024:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f028:	9c07      	ldr	r4, [sp, #28]
 801f02a:	fb09 fc0c 	mul.w	ip, r9, ip
 801f02e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f032:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f036:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f038:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f03c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f040:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f042:	fb0a cc0e 	mla	ip, sl, lr, ip
 801f046:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f04a:	fb09 f90e 	mul.w	r9, r9, lr
 801f04e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f052:	fb01 9202 	mla	r2, r1, r2, r9
 801f056:	9907      	ldr	r1, [sp, #28]
 801f058:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f05c:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801f060:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f062:	fb00 220b 	mla	r2, r0, fp, r2
 801f066:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801f06a:	fb0a 2a00 	mla	sl, sl, r0, r2
 801f06e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f072:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f076:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f07a:	fa5f f08c 	uxtb.w	r0, ip
 801f07e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f082:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f086:	f000 80a2 	beq.w	801f1ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801f08a:	43db      	mvns	r3, r3
 801f08c:	783a      	ldrb	r2, [r7, #0]
 801f08e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f092:	b2db      	uxtb	r3, r3
 801f094:	fb02 fe03 	mul.w	lr, r2, r3
 801f098:	fb0a fa03 	mul.w	sl, sl, r3
 801f09c:	f10e 0201 	add.w	r2, lr, #1
 801f0a0:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801f0a4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f0a8:	703a      	strb	r2, [r7, #0]
 801f0aa:	787a      	ldrb	r2, [r7, #1]
 801f0ac:	fb02 f003 	mul.w	r0, r2, r3
 801f0b0:	f10a 0301 	add.w	r3, sl, #1
 801f0b4:	1c42      	adds	r2, r0, #1
 801f0b6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f0ba:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f0be:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f0c2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f0c6:	707a      	strb	r2, [r7, #1]
 801f0c8:	f887 c002 	strb.w	ip, [r7, #2]
 801f0cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f0ce:	3703      	adds	r7, #3
 801f0d0:	f108 38ff 	add.w	r8, r8, #4294967295
 801f0d4:	441d      	add	r5, r3
 801f0d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f0d8:	441e      	add	r6, r3
 801f0da:	e6ab      	b.n	801ee34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f0dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f0de:	441d      	add	r5, r3
 801f0e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f0e2:	441e      	add	r6, r3
 801f0e4:	9b06      	ldr	r3, [sp, #24]
 801f0e6:	3b01      	subs	r3, #1
 801f0e8:	9306      	str	r3, [sp, #24]
 801f0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0ec:	3303      	adds	r3, #3
 801f0ee:	9309      	str	r3, [sp, #36]	; 0x24
 801f0f0:	e680      	b.n	801edf4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f0f2:	d024      	beq.n	801f13e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f0f4:	9b06      	ldr	r3, [sp, #24]
 801f0f6:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f0f8:	3b01      	subs	r3, #1
 801f0fa:	fb00 5003 	mla	r0, r0, r3, r5
 801f0fe:	1400      	asrs	r0, r0, #16
 801f100:	f53f ae95 	bmi.w	801ee2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f104:	3901      	subs	r1, #1
 801f106:	4288      	cmp	r0, r1
 801f108:	f6bf ae91 	bge.w	801ee2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f10c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f10e:	fb01 6303 	mla	r3, r1, r3, r6
 801f112:	141b      	asrs	r3, r3, #16
 801f114:	f53f ae8b 	bmi.w	801ee2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f118:	3a01      	subs	r2, #1
 801f11a:	4293      	cmp	r3, r2
 801f11c:	f6bf ae87 	bge.w	801ee2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f122:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f126:	1cdf      	adds	r7, r3, #3
 801f128:	f1bb 0f00 	cmp.w	fp, #0
 801f12c:	dc6e      	bgt.n	801f20c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801f12e:	9b06      	ldr	r3, [sp, #24]
 801f130:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f136:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f13a:	4423      	add	r3, r4
 801f13c:	9309      	str	r3, [sp, #36]	; 0x24
 801f13e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f140:	2b00      	cmp	r3, #0
 801f142:	f340 81b0 	ble.w	801f4a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801f146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f14a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f14c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f150:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f154:	eef0 6a62 	vmov.f32	s13, s5
 801f158:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f15c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f160:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f164:	ee16 5a90 	vmov	r5, s13
 801f168:	eef0 6a43 	vmov.f32	s13, s6
 801f16c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f170:	ee16 6a90 	vmov	r6, s13
 801f174:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f178:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f17c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f180:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f184:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f188:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f18c:	ee12 2a90 	vmov	r2, s5
 801f190:	eef0 2a47 	vmov.f32	s5, s14
 801f194:	fb92 f3f3 	sdiv	r3, r2, r3
 801f198:	ee13 2a10 	vmov	r2, s6
 801f19c:	9325      	str	r3, [sp, #148]	; 0x94
 801f19e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f1a0:	eeb0 3a67 	vmov.f32	s6, s15
 801f1a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1a8:	9326      	str	r3, [sp, #152]	; 0x98
 801f1aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f1ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f1ae:	3b01      	subs	r3, #1
 801f1b0:	9315      	str	r3, [sp, #84]	; 0x54
 801f1b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f1b4:	bf08      	it	eq
 801f1b6:	4613      	moveq	r3, r2
 801f1b8:	9306      	str	r3, [sp, #24]
 801f1ba:	e60d      	b.n	801edd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f1bc:	2800      	cmp	r0, #0
 801f1be:	f43f ae7d 	beq.w	801eebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f1c2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f1c6:	9307      	str	r3, [sp, #28]
 801f1c8:	0e1b      	lsrs	r3, r3, #24
 801f1ca:	930f      	str	r3, [sp, #60]	; 0x3c
 801f1cc:	e676      	b.n	801eebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f1ce:	7038      	strb	r0, [r7, #0]
 801f1d0:	7079      	strb	r1, [r7, #1]
 801f1d2:	e779      	b.n	801f0c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f1d4:	f112 0901 	adds.w	r9, r2, #1
 801f1d8:	f53f af78 	bmi.w	801f0cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f1dc:	454b      	cmp	r3, r9
 801f1de:	f6ff af75 	blt.w	801f0cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f1e2:	f11c 0901 	adds.w	r9, ip, #1
 801f1e6:	f53f af71 	bmi.w	801f0cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f1ea:	45ce      	cmp	lr, r9
 801f1ec:	f6ff af6e 	blt.w	801f0cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f1f0:	b21b      	sxth	r3, r3
 801f1f2:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801f1f6:	fa0f f28e 	sxth.w	r2, lr
 801f1fa:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801f1fe:	9200      	str	r2, [sp, #0]
 801f200:	4639      	mov	r1, r7
 801f202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f204:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f206:	f7ff fca1 	bl	801eb4c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801f20a:	e75f      	b.n	801f0cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f20c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f20e:	1429      	asrs	r1, r5, #16
 801f210:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f212:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f216:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801f21a:	1433      	asrs	r3, r6, #16
 801f21c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f220:	fb0c 1303 	mla	r3, ip, r3, r1
 801f224:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f226:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f22a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f22e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f232:	2a00      	cmp	r2, #0
 801f234:	f000 8129 	beq.w	801f48a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801f238:	684c      	ldr	r4, [r1, #4]
 801f23a:	940c      	str	r4, [sp, #48]	; 0x30
 801f23c:	0e24      	lsrs	r4, r4, #24
 801f23e:	9413      	str	r4, [sp, #76]	; 0x4c
 801f240:	b198      	cbz	r0, 801f26a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f242:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801f246:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f24a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f24e:	f10c 0c04 	add.w	ip, ip, #4
 801f252:	eb01 080c 	add.w	r8, r1, ip
 801f256:	f851 100c 	ldr.w	r1, [r1, ip]
 801f25a:	9108      	str	r1, [sp, #32]
 801f25c:	0e09      	lsrs	r1, r1, #24
 801f25e:	9110      	str	r1, [sp, #64]	; 0x40
 801f260:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f264:	910d      	str	r1, [sp, #52]	; 0x34
 801f266:	0e09      	lsrs	r1, r1, #24
 801f268:	9114      	str	r1, [sp, #80]	; 0x50
 801f26a:	b292      	uxth	r2, r2
 801f26c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f26e:	b280      	uxth	r0, r0
 801f270:	fb02 f900 	mul.w	r9, r2, r0
 801f274:	0112      	lsls	r2, r2, #4
 801f276:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f27a:	eba2 0809 	sub.w	r8, r2, r9
 801f27e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801f282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f284:	b280      	uxth	r0, r0
 801f286:	fa1f f888 	uxth.w	r8, r8
 801f28a:	1a09      	subs	r1, r1, r0
 801f28c:	fb08 f202 	mul.w	r2, r8, r2
 801f290:	b289      	uxth	r1, r1
 801f292:	fb01 220e 	mla	r2, r1, lr, r2
 801f296:	fb00 2204 	mla	r2, r0, r4, r2
 801f29a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f29c:	fb09 2204 	mla	r2, r9, r4, r2
 801f2a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f2a4:	2a00      	cmp	r2, #0
 801f2a6:	f000 80e8 	beq.w	801f47a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801f2aa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f2ae:	d01b      	beq.n	801f2e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801f2b0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f2b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f2b8:	fb0e fa0a 	mul.w	sl, lr, sl
 801f2bc:	fb0e fe03 	mul.w	lr, lr, r3
 801f2c0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f2c4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f2c8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f2cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f2d0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f2d4:	4453      	add	r3, sl
 801f2d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f2da:	0a1b      	lsrs	r3, r3, #8
 801f2dc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f2e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f2e4:	ea43 030c 	orr.w	r3, r3, ip
 801f2e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f2ea:	2cff      	cmp	r4, #255	; 0xff
 801f2ec:	d021      	beq.n	801f332 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801f2ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f2f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f2f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f2f6:	fb04 fc0c 	mul.w	ip, r4, ip
 801f2fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f2fc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f300:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f304:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f306:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f30a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f30e:	fb04 fa0a 	mul.w	sl, r4, sl
 801f312:	44e6      	add	lr, ip
 801f314:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f318:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f31c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f320:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f324:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f328:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f32c:	ea4e 040a 	orr.w	r4, lr, sl
 801f330:	940c      	str	r4, [sp, #48]	; 0x30
 801f332:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f334:	2cff      	cmp	r4, #255	; 0xff
 801f336:	d021      	beq.n	801f37c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801f338:	9c08      	ldr	r4, [sp, #32]
 801f33a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f33e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f340:	fb04 fc0c 	mul.w	ip, r4, ip
 801f344:	9c08      	ldr	r4, [sp, #32]
 801f346:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f34a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f34c:	fb04 fa0e 	mul.w	sl, r4, lr
 801f350:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f354:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f358:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f35c:	44e6      	add	lr, ip
 801f35e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f362:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f36a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f36e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f372:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f376:	ea4e 040a 	orr.w	r4, lr, sl
 801f37a:	9408      	str	r4, [sp, #32]
 801f37c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f37e:	2cff      	cmp	r4, #255	; 0xff
 801f380:	d021      	beq.n	801f3c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801f382:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f384:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f388:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f38a:	fb04 fc0c 	mul.w	ip, r4, ip
 801f38e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f390:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f394:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f398:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f39a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f39e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f3a2:	fb04 fa0a 	mul.w	sl, r4, sl
 801f3a6:	44e6      	add	lr, ip
 801f3a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f3ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f3b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f3b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f3b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f3bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f3c0:	ea4e 040a 	orr.w	r4, lr, sl
 801f3c4:	940d      	str	r4, [sp, #52]	; 0x34
 801f3c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f3c8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f3cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f3d0:	2aff      	cmp	r2, #255	; 0xff
 801f3d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f3d6:	9c08      	ldr	r4, [sp, #32]
 801f3d8:	fb08 fc0c 	mul.w	ip, r8, ip
 801f3dc:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f3e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f3e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f3e6:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f3ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f3ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f3f0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f3f4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f3f8:	fb08 f80e 	mul.w	r8, r8, lr
 801f3fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f400:	fb01 8303 	mla	r3, r1, r3, r8
 801f404:	9908      	ldr	r1, [sp, #32]
 801f406:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f40a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801f40e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f410:	fb00 330a 	mla	r3, r0, sl, r3
 801f414:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801f418:	fb09 3e0e 	mla	lr, r9, lr, r3
 801f41c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f420:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f424:	ea4c 0c0e 	orr.w	ip, ip, lr
 801f428:	fa5f f08c 	uxtb.w	r0, ip
 801f42c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f430:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f434:	d032      	beq.n	801f49c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801f436:	43d2      	mvns	r2, r2
 801f438:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801f43c:	b2d2      	uxtb	r2, r2
 801f43e:	fb0e fe02 	mul.w	lr, lr, r2
 801f442:	f10e 0301 	add.w	r3, lr, #1
 801f446:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801f44a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f44e:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801f452:	4350      	muls	r0, r2
 801f454:	f807 3c03 	strb.w	r3, [r7, #-3]
 801f458:	1c43      	adds	r3, r0, #1
 801f45a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f45e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f462:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801f466:	4353      	muls	r3, r2
 801f468:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f46c:	1c5a      	adds	r2, r3, #1
 801f46e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f472:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801f476:	f807 cc01 	strb.w	ip, [r7, #-1]
 801f47a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f47c:	3703      	adds	r7, #3
 801f47e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f482:	441d      	add	r5, r3
 801f484:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f486:	441e      	add	r6, r3
 801f488:	e64e      	b.n	801f128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801f48a:	2800      	cmp	r0, #0
 801f48c:	f43f aeed 	beq.w	801f26a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f490:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801f494:	9108      	str	r1, [sp, #32]
 801f496:	0e09      	lsrs	r1, r1, #24
 801f498:	9110      	str	r1, [sp, #64]	; 0x40
 801f49a:	e6e6      	b.n	801f26a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f49c:	f807 0c03 	strb.w	r0, [r7, #-3]
 801f4a0:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f4a4:	e7e7      	b.n	801f476 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801f4a6:	b019      	add	sp, #100	; 0x64
 801f4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801f4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4b0:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801f4b4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801f4b8:	2c00      	cmp	r4, #0
 801f4ba:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801f4be:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801f4c2:	fb00 4e03 	mla	lr, r0, r3, r4
 801f4c6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801f4ca:	f2c0 80b8 	blt.w	801f63e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f4ce:	45a1      	cmp	r9, r4
 801f4d0:	f340 80b5 	ble.w	801f63e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f4d4:	2800      	cmp	r0, #0
 801f4d6:	f2c0 80b2 	blt.w	801f63e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f4da:	4580      	cmp	r8, r0
 801f4dc:	f340 80af 	ble.w	801f63e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f4e0:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801f4e4:	f01e 0f01 	tst.w	lr, #1
 801f4e8:	5d56      	ldrb	r6, [r2, r5]
 801f4ea:	bf0c      	ite	eq
 801f4ec:	f006 060f 	andeq.w	r6, r6, #15
 801f4f0:	1136      	asrne	r6, r6, #4
 801f4f2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f4f6:	b2f6      	uxtb	r6, r6
 801f4f8:	f114 0a01 	adds.w	sl, r4, #1
 801f4fc:	f100 80a1 	bmi.w	801f642 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f500:	45d1      	cmp	r9, sl
 801f502:	f340 809e 	ble.w	801f642 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f506:	2800      	cmp	r0, #0
 801f508:	f2c0 809b 	blt.w	801f642 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f50c:	4580      	cmp	r8, r0
 801f50e:	f340 8098 	ble.w	801f642 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f512:	2f00      	cmp	r7, #0
 801f514:	f000 8097 	beq.w	801f646 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801f518:	f10e 0b01 	add.w	fp, lr, #1
 801f51c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801f520:	f01b 0f01 	tst.w	fp, #1
 801f524:	5d55      	ldrb	r5, [r2, r5]
 801f526:	bf0c      	ite	eq
 801f528:	f005 050f 	andeq.w	r5, r5, #15
 801f52c:	112d      	asrne	r5, r5, #4
 801f52e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801f532:	b2ed      	uxtb	r5, r5
 801f534:	f1bc 0f00 	cmp.w	ip, #0
 801f538:	f000 8089 	beq.w	801f64e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801f53c:	2c00      	cmp	r4, #0
 801f53e:	f100 0001 	add.w	r0, r0, #1
 801f542:	f2c0 8082 	blt.w	801f64a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f546:	45a1      	cmp	r9, r4
 801f548:	dd7f      	ble.n	801f64a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f54a:	2800      	cmp	r0, #0
 801f54c:	db7d      	blt.n	801f64a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f54e:	4580      	cmp	r8, r0
 801f550:	dd7b      	ble.n	801f64a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f552:	eb03 0b0e 	add.w	fp, r3, lr
 801f556:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801f55a:	f01b 0f01 	tst.w	fp, #1
 801f55e:	5d14      	ldrb	r4, [r2, r4]
 801f560:	bf0c      	ite	eq
 801f562:	f004 040f 	andeq.w	r4, r4, #15
 801f566:	1124      	asrne	r4, r4, #4
 801f568:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f56c:	b2e4      	uxtb	r4, r4
 801f56e:	f1ba 0f00 	cmp.w	sl, #0
 801f572:	db6f      	blt.n	801f654 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f574:	45d1      	cmp	r9, sl
 801f576:	dd6d      	ble.n	801f654 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f578:	2800      	cmp	r0, #0
 801f57a:	db6b      	blt.n	801f654 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f57c:	4580      	cmp	r8, r0
 801f57e:	dd69      	ble.n	801f654 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f580:	2f00      	cmp	r7, #0
 801f582:	d069      	beq.n	801f658 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801f584:	3301      	adds	r3, #1
 801f586:	449e      	add	lr, r3
 801f588:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f58c:	f01e 0f01 	tst.w	lr, #1
 801f590:	5cd0      	ldrb	r0, [r2, r3]
 801f592:	bf0c      	ite	eq
 801f594:	f000 000f 	andeq.w	r0, r0, #15
 801f598:	1100      	asrne	r0, r0, #4
 801f59a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f59e:	b2c3      	uxtb	r3, r0
 801f5a0:	b2ba      	uxth	r2, r7
 801f5a2:	fa1f fc8c 	uxth.w	ip, ip
 801f5a6:	fb02 f00c 	mul.w	r0, r2, ip
 801f5aa:	0112      	lsls	r2, r2, #4
 801f5ac:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801f5b0:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801f5b4:	1a12      	subs	r2, r2, r0
 801f5b6:	fa1f fc8c 	uxth.w	ip, ip
 801f5ba:	b292      	uxth	r2, r2
 801f5bc:	eba7 070c 	sub.w	r7, r7, ip
 801f5c0:	436a      	muls	r2, r5
 801f5c2:	b2bf      	uxth	r7, r7
 801f5c4:	fb06 2207 	mla	r2, r6, r7, r2
 801f5c8:	fb0c 2404 	mla	r4, ip, r4, r2
 801f5cc:	fb00 4303 	mla	r3, r0, r3, r4
 801f5d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f5d4:	b38b      	cbz	r3, 801f63a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801f5d6:	4a21      	ldr	r2, [pc, #132]	; (801f65c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801f5d8:	6814      	ldr	r4, [r2, #0]
 801f5da:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801f5de:	b2e5      	uxtb	r5, r4
 801f5e0:	4353      	muls	r3, r2
 801f5e2:	1c5a      	adds	r2, r3, #1
 801f5e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f5e8:	1212      	asrs	r2, r2, #8
 801f5ea:	b290      	uxth	r0, r2
 801f5ec:	43d2      	mvns	r2, r2
 801f5ee:	fb15 f500 	smulbb	r5, r5, r0
 801f5f2:	b2d3      	uxtb	r3, r2
 801f5f4:	780a      	ldrb	r2, [r1, #0]
 801f5f6:	fb02 5203 	mla	r2, r2, r3, r5
 801f5fa:	b292      	uxth	r2, r2
 801f5fc:	1c55      	adds	r5, r2, #1
 801f5fe:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f602:	784d      	ldrb	r5, [r1, #1]
 801f604:	fb15 f503 	smulbb	r5, r5, r3
 801f608:	1212      	asrs	r2, r2, #8
 801f60a:	700a      	strb	r2, [r1, #0]
 801f60c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f610:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801f614:	fb02 5200 	mla	r2, r2, r0, r5
 801f618:	b292      	uxth	r2, r2
 801f61a:	1c55      	adds	r5, r2, #1
 801f61c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f620:	1212      	asrs	r2, r2, #8
 801f622:	704a      	strb	r2, [r1, #1]
 801f624:	788a      	ldrb	r2, [r1, #2]
 801f626:	fb12 f303 	smulbb	r3, r2, r3
 801f62a:	fb04 3300 	mla	r3, r4, r0, r3
 801f62e:	b29b      	uxth	r3, r3
 801f630:	1c5a      	adds	r2, r3, #1
 801f632:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f636:	121b      	asrs	r3, r3, #8
 801f638:	708b      	strb	r3, [r1, #2]
 801f63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f63e:	2600      	movs	r6, #0
 801f640:	e75a      	b.n	801f4f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801f642:	2500      	movs	r5, #0
 801f644:	e776      	b.n	801f534 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f646:	463d      	mov	r5, r7
 801f648:	e774      	b.n	801f534 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f64a:	2400      	movs	r4, #0
 801f64c:	e78f      	b.n	801f56e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801f64e:	4663      	mov	r3, ip
 801f650:	4664      	mov	r4, ip
 801f652:	e7a5      	b.n	801f5a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f654:	2300      	movs	r3, #0
 801f656:	e7a3      	b.n	801f5a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f658:	463b      	mov	r3, r7
 801f65a:	e7a1      	b.n	801f5a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f65c:	2400c7fc 	.word	0x2400c7fc

0801f660 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f664:	b097      	sub	sp, #92	; 0x5c
 801f666:	9214      	str	r2, [sp, #80]	; 0x50
 801f668:	9309      	str	r3, [sp, #36]	; 0x24
 801f66a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f66c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801f670:	9015      	str	r0, [sp, #84]	; 0x54
 801f672:	910c      	str	r1, [sp, #48]	; 0x30
 801f674:	6850      	ldr	r0, [r2, #4]
 801f676:	930e      	str	r3, [sp, #56]	; 0x38
 801f678:	6812      	ldr	r2, [r2, #0]
 801f67a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801f67e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801f682:	fb00 1303 	mla	r3, r0, r3, r1
 801f686:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f68a:	eb02 0a03 	add.w	sl, r2, r3
 801f68e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f690:	689b      	ldr	r3, [r3, #8]
 801f692:	3301      	adds	r3, #1
 801f694:	f023 0301 	bic.w	r3, r3, #1
 801f698:	930f      	str	r3, [sp, #60]	; 0x3c
 801f69a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f69c:	681f      	ldr	r7, [r3, #0]
 801f69e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	dc03      	bgt.n	801f6ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f6a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	f340 8247 	ble.w	801fb3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f6ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f6ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f6b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f6b6:	1e48      	subs	r0, r1, #1
 801f6b8:	f102 3cff 	add.w	ip, r2, #4294967295
 801f6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	f340 80e5 	ble.w	801f88e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801f6c4:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801f6c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f6cc:	d406      	bmi.n	801f6dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f6ce:	4586      	cmp	lr, r0
 801f6d0:	da04      	bge.n	801f6dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	db02      	blt.n	801f6dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f6d6:	4563      	cmp	r3, ip
 801f6d8:	f2c0 80da 	blt.w	801f890 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801f6dc:	f11e 0e01 	adds.w	lr, lr, #1
 801f6e0:	f100 80cb 	bmi.w	801f87a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f6e4:	4571      	cmp	r1, lr
 801f6e6:	f2c0 80c8 	blt.w	801f87a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f6ea:	3301      	adds	r3, #1
 801f6ec:	f100 80c5 	bmi.w	801f87a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f6f0:	429a      	cmp	r2, r3
 801f6f2:	f2c0 80c2 	blt.w	801f87a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6f8:	46d0      	mov	r8, sl
 801f6fa:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801f6fe:	930d      	str	r3, [sp, #52]	; 0x34
 801f700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f702:	2b00      	cmp	r3, #0
 801f704:	f340 80e3 	ble.w	801f8ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f708:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f70a:	1430      	asrs	r0, r6, #16
 801f70c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f710:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f714:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801f718:	142b      	asrs	r3, r5, #16
 801f71a:	f100 812e 	bmi.w	801f97a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f71e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801f722:	455b      	cmp	r3, fp
 801f724:	f280 8129 	bge.w	801f97a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f728:	2800      	cmp	r0, #0
 801f72a:	f2c0 8126 	blt.w	801f97a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f72e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801f732:	4558      	cmp	r0, fp
 801f734:	f280 8121 	bge.w	801f97a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f738:	fb00 3309 	mla	r3, r0, r9, r3
 801f73c:	0858      	lsrs	r0, r3, #1
 801f73e:	07dc      	lsls	r4, r3, #31
 801f740:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f744:	bf54      	ite	pl
 801f746:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f74a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f74e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f752:	fa5f fc8c 	uxtb.w	ip, ip
 801f756:	2a00      	cmp	r2, #0
 801f758:	f000 80fe 	beq.w	801f958 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f75c:	1c58      	adds	r0, r3, #1
 801f75e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801f762:	07c0      	lsls	r0, r0, #31
 801f764:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f768:	bf54      	ite	pl
 801f76a:	f00e 0e0f 	andpl.w	lr, lr, #15
 801f76e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801f772:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801f776:	fa5f f08e 	uxtb.w	r0, lr
 801f77a:	9010      	str	r0, [sp, #64]	; 0x40
 801f77c:	b1d9      	cbz	r1, 801f7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f77e:	444b      	add	r3, r9
 801f780:	0858      	lsrs	r0, r3, #1
 801f782:	07dc      	lsls	r4, r3, #31
 801f784:	f103 0301 	add.w	r3, r3, #1
 801f788:	5c38      	ldrb	r0, [r7, r0]
 801f78a:	bf54      	ite	pl
 801f78c:	f000 000f 	andpl.w	r0, r0, #15
 801f790:	1100      	asrmi	r0, r0, #4
 801f792:	07dc      	lsls	r4, r3, #31
 801f794:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f798:	b2c0      	uxtb	r0, r0
 801f79a:	900a      	str	r0, [sp, #40]	; 0x28
 801f79c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801f7a0:	f817 e000 	ldrb.w	lr, [r7, r0]
 801f7a4:	bf54      	ite	pl
 801f7a6:	f00e 030f 	andpl.w	r3, lr, #15
 801f7aa:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801f7ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f7b2:	b2db      	uxtb	r3, r3
 801f7b4:	9311      	str	r3, [sp, #68]	; 0x44
 801f7b6:	b292      	uxth	r2, r2
 801f7b8:	b289      	uxth	r1, r1
 801f7ba:	0113      	lsls	r3, r2, #4
 801f7bc:	fb02 f001 	mul.w	r0, r2, r1
 801f7c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f7c2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f7c6:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801f7ca:	1a1b      	subs	r3, r3, r0
 801f7cc:	b289      	uxth	r1, r1
 801f7ce:	b29b      	uxth	r3, r3
 801f7d0:	ebae 0e01 	sub.w	lr, lr, r1
 801f7d4:	4353      	muls	r3, r2
 801f7d6:	fa1f fe8e 	uxth.w	lr, lr
 801f7da:	fb0c 320e 	mla	r2, ip, lr, r3
 801f7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7e0:	fb01 2203 	mla	r2, r1, r3, r2
 801f7e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f7e6:	fb00 2203 	mla	r2, r0, r3, r2
 801f7ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f7ee:	2a00      	cmp	r2, #0
 801f7f0:	d039      	beq.n	801f866 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f7f2:	4bc7      	ldr	r3, [pc, #796]	; (801fb10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801f7f4:	6819      	ldr	r1, [r3, #0]
 801f7f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7f8:	fa5f fc81 	uxtb.w	ip, r1
 801f7fc:	435a      	muls	r2, r3
 801f7fe:	1c53      	adds	r3, r2, #1
 801f800:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f804:	1212      	asrs	r2, r2, #8
 801f806:	b290      	uxth	r0, r2
 801f808:	43d2      	mvns	r2, r2
 801f80a:	fb1c fc00 	smulbb	ip, ip, r0
 801f80e:	b2d3      	uxtb	r3, r2
 801f810:	f898 2000 	ldrb.w	r2, [r8]
 801f814:	fb02 c203 	mla	r2, r2, r3, ip
 801f818:	b292      	uxth	r2, r2
 801f81a:	f102 0c01 	add.w	ip, r2, #1
 801f81e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f822:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f826:	fb1c fc03 	smulbb	ip, ip, r3
 801f82a:	1212      	asrs	r2, r2, #8
 801f82c:	f888 2000 	strb.w	r2, [r8]
 801f830:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801f834:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801f838:	fb02 c200 	mla	r2, r2, r0, ip
 801f83c:	b292      	uxth	r2, r2
 801f83e:	f102 0c01 	add.w	ip, r2, #1
 801f842:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f846:	1212      	asrs	r2, r2, #8
 801f848:	f888 2001 	strb.w	r2, [r8, #1]
 801f84c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801f850:	fb12 f303 	smulbb	r3, r2, r3
 801f854:	fb01 3300 	mla	r3, r1, r0, r3
 801f858:	b29b      	uxth	r3, r3
 801f85a:	1c5a      	adds	r2, r3, #1
 801f85c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f860:	121b      	asrs	r3, r3, #8
 801f862:	f888 3002 	strb.w	r3, [r8, #2]
 801f866:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f868:	f108 0803 	add.w	r8, r8, #3
 801f86c:	441d      	add	r5, r3
 801f86e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f870:	441e      	add	r6, r3
 801f872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f874:	3b01      	subs	r3, #1
 801f876:	930d      	str	r3, [sp, #52]	; 0x34
 801f878:	e742      	b.n	801f700 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f87a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f87c:	f10a 0a03 	add.w	sl, sl, #3
 801f880:	441d      	add	r5, r3
 801f882:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f884:	441e      	add	r6, r3
 801f886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f888:	3b01      	subs	r3, #1
 801f88a:	9309      	str	r3, [sp, #36]	; 0x24
 801f88c:	e716      	b.n	801f6bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f88e:	d024      	beq.n	801f8da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f892:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f894:	3b01      	subs	r3, #1
 801f896:	fb00 5003 	mla	r0, r0, r3, r5
 801f89a:	1400      	asrs	r0, r0, #16
 801f89c:	f53f af2b 	bmi.w	801f6f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8a0:	3901      	subs	r1, #1
 801f8a2:	4288      	cmp	r0, r1
 801f8a4:	f6bf af27 	bge.w	801f6f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f8aa:	fb01 6303 	mla	r3, r1, r3, r6
 801f8ae:	141b      	asrs	r3, r3, #16
 801f8b0:	f53f af21 	bmi.w	801f6f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8b4:	3a01      	subs	r2, #1
 801f8b6:	4293      	cmp	r3, r2
 801f8b8:	f6bf af1d 	bge.w	801f6f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8bc:	f10a 0e03 	add.w	lr, sl, #3
 801f8c0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801f8c4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801f8c8:	f1b8 0f00 	cmp.w	r8, #0
 801f8cc:	dc76      	bgt.n	801f9bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801f8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f8d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f8d8:	44a2      	add	sl, r4
 801f8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	f340 812c 	ble.w	801fb3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f8e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f8e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f8e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8f0:	eef0 6a62 	vmov.f32	s13, s5
 801f8f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f8f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f900:	ee16 5a90 	vmov	r5, s13
 801f904:	eef0 6a43 	vmov.f32	s13, s6
 801f908:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f90c:	ee16 6a90 	vmov	r6, s13
 801f910:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f914:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f918:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f91c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f920:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f924:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f928:	ee12 2a90 	vmov	r2, s5
 801f92c:	eef0 2a47 	vmov.f32	s5, s14
 801f930:	fb92 f3f3 	sdiv	r3, r2, r3
 801f934:	ee13 2a10 	vmov	r2, s6
 801f938:	9323      	str	r3, [sp, #140]	; 0x8c
 801f93a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f93c:	eeb0 3a67 	vmov.f32	s6, s15
 801f940:	fb92 f3f3 	sdiv	r3, r2, r3
 801f944:	9324      	str	r3, [sp, #144]	; 0x90
 801f946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f94a:	3b01      	subs	r3, #1
 801f94c:	930c      	str	r3, [sp, #48]	; 0x30
 801f94e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f950:	bf08      	it	eq
 801f952:	4613      	moveq	r3, r2
 801f954:	9309      	str	r3, [sp, #36]	; 0x24
 801f956:	e6a2      	b.n	801f69e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f958:	2900      	cmp	r1, #0
 801f95a:	f43f af2c 	beq.w	801f7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f95e:	eb09 0003 	add.w	r0, r9, r3
 801f962:	0843      	lsrs	r3, r0, #1
 801f964:	07c0      	lsls	r0, r0, #31
 801f966:	5cfb      	ldrb	r3, [r7, r3]
 801f968:	bf54      	ite	pl
 801f96a:	f003 030f 	andpl.w	r3, r3, #15
 801f96e:	111b      	asrmi	r3, r3, #4
 801f970:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f974:	b2db      	uxtb	r3, r3
 801f976:	930a      	str	r3, [sp, #40]	; 0x28
 801f978:	e71d      	b.n	801f7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f97a:	f113 0b01 	adds.w	fp, r3, #1
 801f97e:	f53f af72 	bmi.w	801f866 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f982:	45dc      	cmp	ip, fp
 801f984:	f6ff af6f 	blt.w	801f866 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f988:	f110 0b01 	adds.w	fp, r0, #1
 801f98c:	f53f af6b 	bmi.w	801f866 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f990:	45de      	cmp	lr, fp
 801f992:	f6ff af68 	blt.w	801f866 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f996:	9302      	str	r3, [sp, #8]
 801f998:	fa0f f38e 	sxth.w	r3, lr
 801f99c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f99e:	9301      	str	r3, [sp, #4]
 801f9a0:	fa0f f38c 	sxth.w	r3, ip
 801f9a4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801f9a8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f9ac:	9300      	str	r3, [sp, #0]
 801f9ae:	463a      	mov	r2, r7
 801f9b0:	464b      	mov	r3, r9
 801f9b2:	4641      	mov	r1, r8
 801f9b4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f9b6:	f7ff fd79 	bl	801f4ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801f9ba:	e754      	b.n	801f866 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f9bc:	142a      	asrs	r2, r5, #16
 801f9be:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f9c2:	1433      	asrs	r3, r6, #16
 801f9c4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f9c8:	fb09 2303 	mla	r3, r9, r3, r2
 801f9cc:	085a      	lsrs	r2, r3, #1
 801f9ce:	07dc      	lsls	r4, r3, #31
 801f9d0:	5cba      	ldrb	r2, [r7, r2]
 801f9d2:	bf54      	ite	pl
 801f9d4:	f002 020f 	andpl.w	r2, r2, #15
 801f9d8:	1112      	asrmi	r2, r2, #4
 801f9da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f9de:	b2d2      	uxtb	r2, r2
 801f9e0:	2900      	cmp	r1, #0
 801f9e2:	f000 8097 	beq.w	801fb14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f9e6:	f103 0b01 	add.w	fp, r3, #1
 801f9ea:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801f9ee:	f01b 0f01 	tst.w	fp, #1
 801f9f2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f9f6:	bf0c      	ite	eq
 801f9f8:	f00c 0c0f 	andeq.w	ip, ip, #15
 801f9fc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801fa00:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fa04:	fa5f f48c 	uxtb.w	r4, ip
 801fa08:	9412      	str	r4, [sp, #72]	; 0x48
 801fa0a:	b300      	cbz	r0, 801fa4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fa0c:	444b      	add	r3, r9
 801fa0e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fa12:	07dc      	lsls	r4, r3, #31
 801fa14:	f103 0301 	add.w	r3, r3, #1
 801fa18:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fa1c:	bf54      	ite	pl
 801fa1e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fa22:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fa26:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fa2a:	fa5f f48c 	uxtb.w	r4, ip
 801fa2e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fa32:	940b      	str	r4, [sp, #44]	; 0x2c
 801fa34:	07dc      	lsls	r4, r3, #31
 801fa36:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fa3a:	bf54      	ite	pl
 801fa3c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fa40:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fa44:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fa48:	fa5f f38c 	uxtb.w	r3, ip
 801fa4c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fa4e:	b289      	uxth	r1, r1
 801fa50:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fa52:	b280      	uxth	r0, r0
 801fa54:	fb01 f300 	mul.w	r3, r1, r0
 801fa58:	0109      	lsls	r1, r1, #4
 801fa5a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801fa5e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801fa62:	1ac9      	subs	r1, r1, r3
 801fa64:	b280      	uxth	r0, r0
 801fa66:	b289      	uxth	r1, r1
 801fa68:	ebac 0c00 	sub.w	ip, ip, r0
 801fa6c:	4361      	muls	r1, r4
 801fa6e:	fa1f fc8c 	uxth.w	ip, ip
 801fa72:	fb02 120c 	mla	r2, r2, ip, r1
 801fa76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fa78:	fb00 2001 	mla	r0, r0, r1, r2
 801fa7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa7e:	fb03 0302 	mla	r3, r3, r2, r0
 801fa82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	d039      	beq.n	801fafe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fa8a:	4a21      	ldr	r2, [pc, #132]	; (801fb10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801fa8c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801fa90:	6810      	ldr	r0, [r2, #0]
 801fa92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fa94:	fa5f fc80 	uxtb.w	ip, r0
 801fa98:	4353      	muls	r3, r2
 801fa9a:	1c5a      	adds	r2, r3, #1
 801fa9c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801faa0:	121b      	asrs	r3, r3, #8
 801faa2:	b29a      	uxth	r2, r3
 801faa4:	43db      	mvns	r3, r3
 801faa6:	fb1c fc02 	smulbb	ip, ip, r2
 801faaa:	b2db      	uxtb	r3, r3
 801faac:	fb01 c103 	mla	r1, r1, r3, ip
 801fab0:	b289      	uxth	r1, r1
 801fab2:	f101 0c01 	add.w	ip, r1, #1
 801fab6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801faba:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801fabe:	fb1c fc03 	smulbb	ip, ip, r3
 801fac2:	1209      	asrs	r1, r1, #8
 801fac4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801fac8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801facc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801fad0:	fb01 c102 	mla	r1, r1, r2, ip
 801fad4:	b289      	uxth	r1, r1
 801fad6:	f101 0c01 	add.w	ip, r1, #1
 801fada:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801fade:	1209      	asrs	r1, r1, #8
 801fae0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801fae4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801fae8:	fb11 f303 	smulbb	r3, r1, r3
 801faec:	fb00 3002 	mla	r0, r0, r2, r3
 801faf0:	b280      	uxth	r0, r0
 801faf2:	1c42      	adds	r2, r0, #1
 801faf4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801faf8:	1200      	asrs	r0, r0, #8
 801fafa:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801fafe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb00:	f10e 0e03 	add.w	lr, lr, #3
 801fb04:	f108 38ff 	add.w	r8, r8, #4294967295
 801fb08:	441d      	add	r5, r3
 801fb0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb0c:	441e      	add	r6, r3
 801fb0e:	e6db      	b.n	801f8c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801fb10:	2400c7fc 	.word	0x2400c7fc
 801fb14:	2800      	cmp	r0, #0
 801fb16:	d09a      	beq.n	801fa4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fb18:	444b      	add	r3, r9
 801fb1a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fb1e:	07db      	lsls	r3, r3, #31
 801fb20:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fb24:	bf54      	ite	pl
 801fb26:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fb2a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fb2e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fb32:	fa5f f38c 	uxtb.w	r3, ip
 801fb36:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb38:	e789      	b.n	801fa4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fb3a:	b017      	add	sp, #92	; 0x5c
 801fb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb40 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb44:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801fb48:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801fb4c:	2d00      	cmp	r5, #0
 801fb4e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801fb52:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801fb56:	fb04 5e03 	mla	lr, r4, r3, r5
 801fb5a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801fb5e:	f2c0 80b1 	blt.w	801fcc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fb62:	45a9      	cmp	r9, r5
 801fb64:	f340 80ae 	ble.w	801fcc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fb68:	2c00      	cmp	r4, #0
 801fb6a:	f2c0 80ab 	blt.w	801fcc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fb6e:	45a0      	cmp	r8, r4
 801fb70:	f340 80a8 	ble.w	801fcc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fb74:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801fb78:	f01e 0f01 	tst.w	lr, #1
 801fb7c:	5d97      	ldrb	r7, [r2, r6]
 801fb7e:	bf0c      	ite	eq
 801fb80:	f007 070f 	andeq.w	r7, r7, #15
 801fb84:	113f      	asrne	r7, r7, #4
 801fb86:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801fb8a:	b2ff      	uxtb	r7, r7
 801fb8c:	f115 0a01 	adds.w	sl, r5, #1
 801fb90:	f100 809a 	bmi.w	801fcc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fb94:	45d1      	cmp	r9, sl
 801fb96:	f340 8097 	ble.w	801fcc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fb9a:	2c00      	cmp	r4, #0
 801fb9c:	f2c0 8094 	blt.w	801fcc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fba0:	45a0      	cmp	r8, r4
 801fba2:	f340 8091 	ble.w	801fcc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fba6:	2800      	cmp	r0, #0
 801fba8:	f000 8090 	beq.w	801fccc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801fbac:	f10e 0b01 	add.w	fp, lr, #1
 801fbb0:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801fbb4:	f01b 0f01 	tst.w	fp, #1
 801fbb8:	5d96      	ldrb	r6, [r2, r6]
 801fbba:	bf0c      	ite	eq
 801fbbc:	f006 060f 	andeq.w	r6, r6, #15
 801fbc0:	1136      	asrne	r6, r6, #4
 801fbc2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801fbc6:	b2f6      	uxtb	r6, r6
 801fbc8:	f1bc 0f00 	cmp.w	ip, #0
 801fbcc:	f000 8082 	beq.w	801fcd4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801fbd0:	2d00      	cmp	r5, #0
 801fbd2:	f104 0401 	add.w	r4, r4, #1
 801fbd6:	db7b      	blt.n	801fcd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fbd8:	45a9      	cmp	r9, r5
 801fbda:	dd79      	ble.n	801fcd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fbdc:	2c00      	cmp	r4, #0
 801fbde:	db77      	blt.n	801fcd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fbe0:	45a0      	cmp	r8, r4
 801fbe2:	dd75      	ble.n	801fcd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fbe4:	eb03 0b0e 	add.w	fp, r3, lr
 801fbe8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801fbec:	f01b 0f01 	tst.w	fp, #1
 801fbf0:	5d55      	ldrb	r5, [r2, r5]
 801fbf2:	bf0c      	ite	eq
 801fbf4:	f005 050f 	andeq.w	r5, r5, #15
 801fbf8:	112d      	asrne	r5, r5, #4
 801fbfa:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801fbfe:	b2ed      	uxtb	r5, r5
 801fc00:	f1ba 0f00 	cmp.w	sl, #0
 801fc04:	db69      	blt.n	801fcda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fc06:	45d1      	cmp	r9, sl
 801fc08:	dd67      	ble.n	801fcda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fc0a:	2c00      	cmp	r4, #0
 801fc0c:	db65      	blt.n	801fcda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fc0e:	45a0      	cmp	r8, r4
 801fc10:	dd63      	ble.n	801fcda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fc12:	2800      	cmp	r0, #0
 801fc14:	d063      	beq.n	801fcde <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801fc16:	3301      	adds	r3, #1
 801fc18:	449e      	add	lr, r3
 801fc1a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801fc1e:	f01e 0f01 	tst.w	lr, #1
 801fc22:	5cd4      	ldrb	r4, [r2, r3]
 801fc24:	bf0c      	ite	eq
 801fc26:	f004 040f 	andeq.w	r4, r4, #15
 801fc2a:	1124      	asrne	r4, r4, #4
 801fc2c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801fc30:	b2e3      	uxtb	r3, r4
 801fc32:	b282      	uxth	r2, r0
 801fc34:	fa1f fc8c 	uxth.w	ip, ip
 801fc38:	fb02 f40c 	mul.w	r4, r2, ip
 801fc3c:	0112      	lsls	r2, r2, #4
 801fc3e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801fc42:	fa1f f08c 	uxth.w	r0, ip
 801fc46:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801fc4a:	1b12      	subs	r2, r2, r4
 801fc4c:	ebac 0c00 	sub.w	ip, ip, r0
 801fc50:	b292      	uxth	r2, r2
 801fc52:	fa1f fc8c 	uxth.w	ip, ip
 801fc56:	4372      	muls	r2, r6
 801fc58:	fb07 220c 	mla	r2, r7, ip, r2
 801fc5c:	fb00 2005 	mla	r0, r0, r5, r2
 801fc60:	fb04 0303 	mla	r3, r4, r3, r0
 801fc64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fc68:	b353      	cbz	r3, 801fcc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801fc6a:	4a1e      	ldr	r2, [pc, #120]	; (801fce4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801fc6c:	7808      	ldrb	r0, [r1, #0]
 801fc6e:	6814      	ldr	r4, [r2, #0]
 801fc70:	b29a      	uxth	r2, r3
 801fc72:	43db      	mvns	r3, r3
 801fc74:	b2e5      	uxtb	r5, r4
 801fc76:	b2db      	uxtb	r3, r3
 801fc78:	fb15 f502 	smulbb	r5, r5, r2
 801fc7c:	fb00 5003 	mla	r0, r0, r3, r5
 801fc80:	b280      	uxth	r0, r0
 801fc82:	1c45      	adds	r5, r0, #1
 801fc84:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fc88:	784d      	ldrb	r5, [r1, #1]
 801fc8a:	fb15 f503 	smulbb	r5, r5, r3
 801fc8e:	1200      	asrs	r0, r0, #8
 801fc90:	7008      	strb	r0, [r1, #0]
 801fc92:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801fc96:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801fc9a:	fb00 5002 	mla	r0, r0, r2, r5
 801fc9e:	b280      	uxth	r0, r0
 801fca0:	1c45      	adds	r5, r0, #1
 801fca2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fca6:	1200      	asrs	r0, r0, #8
 801fca8:	7048      	strb	r0, [r1, #1]
 801fcaa:	7888      	ldrb	r0, [r1, #2]
 801fcac:	fb10 f303 	smulbb	r3, r0, r3
 801fcb0:	fb04 3202 	mla	r2, r4, r2, r3
 801fcb4:	b292      	uxth	r2, r2
 801fcb6:	1c53      	adds	r3, r2, #1
 801fcb8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fcbc:	1212      	asrs	r2, r2, #8
 801fcbe:	708a      	strb	r2, [r1, #2]
 801fcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcc4:	2700      	movs	r7, #0
 801fcc6:	e761      	b.n	801fb8c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801fcc8:	2600      	movs	r6, #0
 801fcca:	e77d      	b.n	801fbc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801fccc:	4606      	mov	r6, r0
 801fcce:	e77b      	b.n	801fbc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801fcd0:	2500      	movs	r5, #0
 801fcd2:	e795      	b.n	801fc00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801fcd4:	4663      	mov	r3, ip
 801fcd6:	4665      	mov	r5, ip
 801fcd8:	e7ab      	b.n	801fc32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fcda:	2300      	movs	r3, #0
 801fcdc:	e7a9      	b.n	801fc32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fcde:	4603      	mov	r3, r0
 801fce0:	e7a7      	b.n	801fc32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fce2:	bf00      	nop
 801fce4:	2400c7fc 	.word	0x2400c7fc

0801fce8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcec:	b093      	sub	sp, #76	; 0x4c
 801fcee:	461c      	mov	r4, r3
 801fcf0:	920c      	str	r2, [sp, #48]	; 0x30
 801fcf2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fcf4:	9011      	str	r0, [sp, #68]	; 0x44
 801fcf6:	9107      	str	r1, [sp, #28]
 801fcf8:	6850      	ldr	r0, [r2, #4]
 801fcfa:	6812      	ldr	r2, [r2, #0]
 801fcfc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801fd00:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801fd04:	fb00 1303 	mla	r3, r0, r3, r1
 801fd08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd0c:	eb02 0b03 	add.w	fp, r2, r3
 801fd10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd12:	689b      	ldr	r3, [r3, #8]
 801fd14:	3301      	adds	r3, #1
 801fd16:	f023 0301 	bic.w	r3, r3, #1
 801fd1a:	9309      	str	r3, [sp, #36]	; 0x24
 801fd1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd1e:	f8d3 8000 	ldr.w	r8, [r3]
 801fd22:	9b07      	ldr	r3, [sp, #28]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	dc03      	bgt.n	801fd30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	f340 822b 	ble.w	8020186 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fd30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fd36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fd3a:	1e48      	subs	r0, r1, #1
 801fd3c:	1e57      	subs	r7, r2, #1
 801fd3e:	2c00      	cmp	r4, #0
 801fd40:	f340 80d7 	ble.w	801fef2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801fd44:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fd48:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fd4c:	d406      	bmi.n	801fd5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fd4e:	4584      	cmp	ip, r0
 801fd50:	da04      	bge.n	801fd5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	db02      	blt.n	801fd5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fd56:	42bb      	cmp	r3, r7
 801fd58:	f2c0 80cc 	blt.w	801fef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fd5c:	f11c 0c01 	adds.w	ip, ip, #1
 801fd60:	f100 80bf 	bmi.w	801fee2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fd64:	4561      	cmp	r1, ip
 801fd66:	f2c0 80bc 	blt.w	801fee2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fd6a:	3301      	adds	r3, #1
 801fd6c:	f100 80b9 	bmi.w	801fee2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fd70:	429a      	cmp	r2, r3
 801fd72:	f2c0 80b6 	blt.w	801fee2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fd76:	46a2      	mov	sl, r4
 801fd78:	465f      	mov	r7, fp
 801fd7a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801fd7e:	f1ba 0f00 	cmp.w	sl, #0
 801fd82:	f340 80d4 	ble.w	801ff2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801fd86:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801fd8a:	1430      	asrs	r0, r6, #16
 801fd8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fd90:	9308      	str	r3, [sp, #32]
 801fd92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd94:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801fd98:	142b      	asrs	r3, r5, #16
 801fd9a:	f100 8124 	bmi.w	801ffe6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd9e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801fda2:	4293      	cmp	r3, r2
 801fda4:	f280 811f 	bge.w	801ffe6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fda8:	2800      	cmp	r0, #0
 801fdaa:	f2c0 811c 	blt.w	801ffe6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fdae:	f10e 32ff 	add.w	r2, lr, #4294967295
 801fdb2:	4290      	cmp	r0, r2
 801fdb4:	f280 8117 	bge.w	801ffe6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fdb8:	fb00 3309 	mla	r3, r0, r9, r3
 801fdbc:	0858      	lsrs	r0, r3, #1
 801fdbe:	07da      	lsls	r2, r3, #31
 801fdc0:	9a08      	ldr	r2, [sp, #32]
 801fdc2:	f818 c000 	ldrb.w	ip, [r8, r0]
 801fdc6:	bf54      	ite	pl
 801fdc8:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fdcc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fdd0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fdd4:	fa5f fc8c 	uxtb.w	ip, ip
 801fdd8:	2a00      	cmp	r2, #0
 801fdda:	f000 80ed 	beq.w	801ffb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801fdde:	1c58      	adds	r0, r3, #1
 801fde0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801fde4:	07c0      	lsls	r0, r0, #31
 801fde6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801fdea:	bf54      	ite	pl
 801fdec:	f00e 0e0f 	andpl.w	lr, lr, #15
 801fdf0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801fdf4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801fdf8:	fa5f fe8e 	uxtb.w	lr, lr
 801fdfc:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801fe00:	b1c9      	cbz	r1, 801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fe02:	444b      	add	r3, r9
 801fe04:	0858      	lsrs	r0, r3, #1
 801fe06:	07da      	lsls	r2, r3, #31
 801fe08:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fe0c:	bf54      	ite	pl
 801fe0e:	f000 000f 	andpl.w	r0, r0, #15
 801fe12:	1100      	asrmi	r0, r0, #4
 801fe14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fe18:	b2c0      	uxtb	r0, r0
 801fe1a:	900a      	str	r0, [sp, #40]	; 0x28
 801fe1c:	1c58      	adds	r0, r3, #1
 801fe1e:	0843      	lsrs	r3, r0, #1
 801fe20:	07c2      	lsls	r2, r0, #31
 801fe22:	f818 3003 	ldrb.w	r3, [r8, r3]
 801fe26:	bf54      	ite	pl
 801fe28:	f003 030f 	andpl.w	r3, r3, #15
 801fe2c:	111b      	asrmi	r3, r3, #4
 801fe2e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fe32:	b2db      	uxtb	r3, r3
 801fe34:	930e      	str	r3, [sp, #56]	; 0x38
 801fe36:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fe3a:	b289      	uxth	r1, r1
 801fe3c:	fb02 f301 	mul.w	r3, r2, r1
 801fe40:	0112      	lsls	r2, r2, #4
 801fe42:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801fe46:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801fe4a:	1ad2      	subs	r2, r2, r3
 801fe4c:	b289      	uxth	r1, r1
 801fe4e:	b292      	uxth	r2, r2
 801fe50:	1a40      	subs	r0, r0, r1
 801fe52:	fa1f fe80 	uxth.w	lr, r0
 801fe56:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fe58:	4342      	muls	r2, r0
 801fe5a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801fe5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fe60:	fb01 c102 	mla	r1, r1, r2, ip
 801fe64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fe66:	fb03 1302 	mla	r3, r3, r2, r1
 801fe6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fe6e:	b383      	cbz	r3, 801fed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fe70:	4ac6      	ldr	r2, [pc, #792]	; (802018c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801fe72:	2bff      	cmp	r3, #255	; 0xff
 801fe74:	6812      	ldr	r2, [r2, #0]
 801fe76:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801fe7a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801fe7e:	b2d2      	uxtb	r2, r2
 801fe80:	f000 80ac 	beq.w	801ffdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fe84:	b299      	uxth	r1, r3
 801fe86:	43db      	mvns	r3, r3
 801fe88:	f897 c000 	ldrb.w	ip, [r7]
 801fe8c:	fb12 f201 	smulbb	r2, r2, r1
 801fe90:	b2db      	uxtb	r3, r3
 801fe92:	fb10 f001 	smulbb	r0, r0, r1
 801fe96:	fb0c 2203 	mla	r2, ip, r3, r2
 801fe9a:	fb1e f101 	smulbb	r1, lr, r1
 801fe9e:	b292      	uxth	r2, r2
 801fea0:	f102 0c01 	add.w	ip, r2, #1
 801fea4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fea8:	1212      	asrs	r2, r2, #8
 801feaa:	703a      	strb	r2, [r7, #0]
 801feac:	787a      	ldrb	r2, [r7, #1]
 801feae:	fb02 0003 	mla	r0, r2, r3, r0
 801feb2:	b280      	uxth	r0, r0
 801feb4:	1c42      	adds	r2, r0, #1
 801feb6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801feba:	78ba      	ldrb	r2, [r7, #2]
 801febc:	fb02 1303 	mla	r3, r2, r3, r1
 801fec0:	1200      	asrs	r0, r0, #8
 801fec2:	b29b      	uxth	r3, r3
 801fec4:	7078      	strb	r0, [r7, #1]
 801fec6:	f103 0e01 	add.w	lr, r3, #1
 801feca:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801fece:	121b      	asrs	r3, r3, #8
 801fed0:	70bb      	strb	r3, [r7, #2]
 801fed2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fed4:	3703      	adds	r7, #3
 801fed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801feda:	441d      	add	r5, r3
 801fedc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fede:	441e      	add	r6, r3
 801fee0:	e74d      	b.n	801fd7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fee2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fee4:	3c01      	subs	r4, #1
 801fee6:	f10b 0b03 	add.w	fp, fp, #3
 801feea:	441d      	add	r5, r3
 801feec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801feee:	441e      	add	r6, r3
 801fef0:	e725      	b.n	801fd3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801fef2:	d021      	beq.n	801ff38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fef4:	1e63      	subs	r3, r4, #1
 801fef6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fef8:	fb00 5003 	mla	r0, r0, r3, r5
 801fefc:	1400      	asrs	r0, r0, #16
 801fefe:	f53f af3a 	bmi.w	801fd76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ff02:	3901      	subs	r1, #1
 801ff04:	4288      	cmp	r0, r1
 801ff06:	f6bf af36 	bge.w	801fd76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ff0a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ff0c:	fb01 6303 	mla	r3, r1, r3, r6
 801ff10:	141b      	asrs	r3, r3, #16
 801ff12:	f53f af30 	bmi.w	801fd76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ff16:	3a01      	subs	r2, #1
 801ff18:	4293      	cmp	r3, r2
 801ff1a:	f6bf af2c 	bge.w	801fd76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ff1e:	f10b 0c03 	add.w	ip, fp, #3
 801ff22:	46a6      	mov	lr, r4
 801ff24:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ff28:	f1be 0f00 	cmp.w	lr, #0
 801ff2c:	dc79      	bgt.n	8020022 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801ff2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801ff32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ff36:	44a3      	add	fp, r4
 801ff38:	9b07      	ldr	r3, [sp, #28]
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	f340 8123 	ble.w	8020186 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ff40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff4e:	eef0 6a62 	vmov.f32	s13, s5
 801ff52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ff56:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff5e:	ee16 5a90 	vmov	r5, s13
 801ff62:	eef0 6a43 	vmov.f32	s13, s6
 801ff66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff6a:	ee16 6a90 	vmov	r6, s13
 801ff6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff76:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff86:	ee12 2a90 	vmov	r2, s5
 801ff8a:	eef0 2a47 	vmov.f32	s5, s14
 801ff8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff92:	ee13 2a10 	vmov	r2, s6
 801ff96:	931f      	str	r3, [sp, #124]	; 0x7c
 801ff98:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff9a:	eeb0 3a67 	vmov.f32	s6, s15
 801ff9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffa2:	9320      	str	r3, [sp, #128]	; 0x80
 801ffa4:	9b07      	ldr	r3, [sp, #28]
 801ffa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ffa8:	3b01      	subs	r3, #1
 801ffaa:	9307      	str	r3, [sp, #28]
 801ffac:	bf08      	it	eq
 801ffae:	4614      	moveq	r4, r2
 801ffb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ffb2:	bf18      	it	ne
 801ffb4:	461c      	movne	r4, r3
 801ffb6:	e6b4      	b.n	801fd22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ffb8:	2900      	cmp	r1, #0
 801ffba:	f43f af3c 	beq.w	801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ffbe:	eb09 0003 	add.w	r0, r9, r3
 801ffc2:	0843      	lsrs	r3, r0, #1
 801ffc4:	07c0      	lsls	r0, r0, #31
 801ffc6:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ffca:	bf54      	ite	pl
 801ffcc:	f003 030f 	andpl.w	r3, r3, #15
 801ffd0:	111b      	asrmi	r3, r3, #4
 801ffd2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ffd6:	b2db      	uxtb	r3, r3
 801ffd8:	930a      	str	r3, [sp, #40]	; 0x28
 801ffda:	e72c      	b.n	801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ffdc:	703a      	strb	r2, [r7, #0]
 801ffde:	7078      	strb	r0, [r7, #1]
 801ffe0:	f887 e002 	strb.w	lr, [r7, #2]
 801ffe4:	e775      	b.n	801fed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ffe6:	1c5a      	adds	r2, r3, #1
 801ffe8:	f53f af73 	bmi.w	801fed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ffec:	4594      	cmp	ip, r2
 801ffee:	f6ff af70 	blt.w	801fed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fff2:	1c42      	adds	r2, r0, #1
 801fff4:	f53f af6d 	bmi.w	801fed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fff8:	4596      	cmp	lr, r2
 801fffa:	f6ff af6a 	blt.w	801fed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fffe:	9302      	str	r3, [sp, #8]
 8020000:	fa0f f38e 	sxth.w	r3, lr
 8020004:	9a08      	ldr	r2, [sp, #32]
 8020006:	9301      	str	r3, [sp, #4]
 8020008:	fa0f f38c 	sxth.w	r3, ip
 802000c:	9105      	str	r1, [sp, #20]
 802000e:	4639      	mov	r1, r7
 8020010:	9300      	str	r3, [sp, #0]
 8020012:	464b      	mov	r3, r9
 8020014:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020018:	4642      	mov	r2, r8
 802001a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802001c:	f7ff fd90 	bl	801fb40 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8020020:	e757      	b.n	801fed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020022:	142a      	asrs	r2, r5, #16
 8020024:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020028:	1433      	asrs	r3, r6, #16
 802002a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802002e:	fb09 2303 	mla	r3, r9, r3, r2
 8020032:	085a      	lsrs	r2, r3, #1
 8020034:	07d9      	lsls	r1, r3, #31
 8020036:	f818 2002 	ldrb.w	r2, [r8, r2]
 802003a:	bf54      	ite	pl
 802003c:	f002 020f 	andpl.w	r2, r2, #15
 8020040:	1112      	asrmi	r2, r2, #4
 8020042:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020046:	b2d2      	uxtb	r2, r2
 8020048:	2800      	cmp	r0, #0
 802004a:	f000 8085 	beq.w	8020158 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802004e:	f103 0a01 	add.w	sl, r3, #1
 8020052:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8020056:	f01a 0f01 	tst.w	sl, #1
 802005a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802005e:	bf0c      	ite	eq
 8020060:	f001 010f 	andeq.w	r1, r1, #15
 8020064:	1109      	asrne	r1, r1, #4
 8020066:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802006a:	b2c9      	uxtb	r1, r1
 802006c:	910f      	str	r1, [sp, #60]	; 0x3c
 802006e:	b1df      	cbz	r7, 80200a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020070:	444b      	add	r3, r9
 8020072:	0859      	lsrs	r1, r3, #1
 8020074:	f013 0f01 	tst.w	r3, #1
 8020078:	f103 0301 	add.w	r3, r3, #1
 802007c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020080:	bf0c      	ite	eq
 8020082:	f001 010f 	andeq.w	r1, r1, #15
 8020086:	1109      	asrne	r1, r1, #4
 8020088:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802008c:	b2c9      	uxtb	r1, r1
 802008e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020090:	0859      	lsrs	r1, r3, #1
 8020092:	07db      	lsls	r3, r3, #31
 8020094:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020098:	bf54      	ite	pl
 802009a:	f001 010f 	andpl.w	r1, r1, #15
 802009e:	1109      	asrmi	r1, r1, #4
 80200a0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80200a4:	b2c9      	uxtb	r1, r1
 80200a6:	9110      	str	r1, [sp, #64]	; 0x40
 80200a8:	b280      	uxth	r0, r0
 80200aa:	b2bf      	uxth	r7, r7
 80200ac:	fb00 f307 	mul.w	r3, r0, r7
 80200b0:	0100      	lsls	r0, r0, #4
 80200b2:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80200b6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80200ba:	1ac0      	subs	r0, r0, r3
 80200bc:	b2bf      	uxth	r7, r7
 80200be:	b280      	uxth	r0, r0
 80200c0:	1bc9      	subs	r1, r1, r7
 80200c2:	fa1f fa81 	uxth.w	sl, r1
 80200c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80200c8:	4348      	muls	r0, r1
 80200ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80200cc:	fb02 020a 	mla	r2, r2, sl, r0
 80200d0:	fb07 2701 	mla	r7, r7, r1, r2
 80200d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80200d6:	fb03 7302 	mla	r3, r3, r2, r7
 80200da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80200de:	b393      	cbz	r3, 8020146 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80200e0:	4a2a      	ldr	r2, [pc, #168]	; (802018c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80200e2:	2bff      	cmp	r3, #255	; 0xff
 80200e4:	6811      	ldr	r1, [r2, #0]
 80200e6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80200ea:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80200ee:	b2c9      	uxtb	r1, r1
 80200f0:	d042      	beq.n	8020178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80200f2:	b298      	uxth	r0, r3
 80200f4:	43db      	mvns	r3, r3
 80200f6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80200fa:	fb11 f100 	smulbb	r1, r1, r0
 80200fe:	b2db      	uxtb	r3, r3
 8020100:	fb17 f700 	smulbb	r7, r7, r0
 8020104:	fb02 1103 	mla	r1, r2, r3, r1
 8020108:	fb1a f000 	smulbb	r0, sl, r0
 802010c:	b289      	uxth	r1, r1
 802010e:	1c4a      	adds	r2, r1, #1
 8020110:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020114:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8020118:	fb02 7703 	mla	r7, r2, r3, r7
 802011c:	1209      	asrs	r1, r1, #8
 802011e:	b2bf      	uxth	r7, r7
 8020120:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020124:	1c7a      	adds	r2, r7, #1
 8020126:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802012a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802012e:	fb02 0303 	mla	r3, r2, r3, r0
 8020132:	123f      	asrs	r7, r7, #8
 8020134:	b29b      	uxth	r3, r3
 8020136:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802013a:	1c5a      	adds	r2, r3, #1
 802013c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020140:	121b      	asrs	r3, r3, #8
 8020142:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8020146:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020148:	f10c 0c03 	add.w	ip, ip, #3
 802014c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020150:	441d      	add	r5, r3
 8020152:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020154:	441e      	add	r6, r3
 8020156:	e6e7      	b.n	801ff28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020158:	2f00      	cmp	r7, #0
 802015a:	d0a5      	beq.n	80200a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802015c:	444b      	add	r3, r9
 802015e:	0859      	lsrs	r1, r3, #1
 8020160:	07db      	lsls	r3, r3, #31
 8020162:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020166:	bf54      	ite	pl
 8020168:	f001 010f 	andpl.w	r1, r1, #15
 802016c:	1109      	asrmi	r1, r1, #4
 802016e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020172:	b2c9      	uxtb	r1, r1
 8020174:	910b      	str	r1, [sp, #44]	; 0x2c
 8020176:	e797      	b.n	80200a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020178:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802017c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8020180:	f80c ac01 	strb.w	sl, [ip, #-1]
 8020184:	e7df      	b.n	8020146 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020186:	b013      	add	sp, #76	; 0x4c
 8020188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802018c:	2400c7fc 	.word	0x2400c7fc

08020190 <CRC_Lock>:
 8020190:	4a20      	ldr	r2, [pc, #128]	; (8020214 <CRC_Lock+0x84>)
 8020192:	b530      	push	{r4, r5, lr}
 8020194:	6813      	ldr	r3, [r2, #0]
 8020196:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802019a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802019e:	f023 0301 	bic.w	r3, r3, #1
 80201a2:	6013      	str	r3, [r2, #0]
 80201a4:	4b1c      	ldr	r3, [pc, #112]	; (8020218 <CRC_Lock+0x88>)
 80201a6:	681a      	ldr	r2, [r3, #0]
 80201a8:	4022      	ands	r2, r4
 80201aa:	42aa      	cmp	r2, r5
 80201ac:	d005      	beq.n	80201ba <CRC_Lock+0x2a>
 80201ae:	681b      	ldr	r3, [r3, #0]
 80201b0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80201b4:	4023      	ands	r3, r4
 80201b6:	4293      	cmp	r3, r2
 80201b8:	d124      	bne.n	8020204 <CRC_Lock+0x74>
 80201ba:	4b18      	ldr	r3, [pc, #96]	; (802021c <CRC_Lock+0x8c>)
 80201bc:	681b      	ldr	r3, [r3, #0]
 80201be:	bb0b      	cbnz	r3, 8020204 <CRC_Lock+0x74>
 80201c0:	4b17      	ldr	r3, [pc, #92]	; (8020220 <CRC_Lock+0x90>)
 80201c2:	681a      	ldr	r2, [r3, #0]
 80201c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80201c8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80201cc:	d00d      	beq.n	80201ea <CRC_Lock+0x5a>
 80201ce:	681a      	ldr	r2, [r3, #0]
 80201d0:	f240 4483 	movw	r4, #1155	; 0x483
 80201d4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80201d8:	42a2      	cmp	r2, r4
 80201da:	d006      	beq.n	80201ea <CRC_Lock+0x5a>
 80201dc:	681b      	ldr	r3, [r3, #0]
 80201de:	f240 4285 	movw	r2, #1157	; 0x485
 80201e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80201e6:	4293      	cmp	r3, r2
 80201e8:	d10c      	bne.n	8020204 <CRC_Lock+0x74>
 80201ea:	4b0e      	ldr	r3, [pc, #56]	; (8020224 <CRC_Lock+0x94>)
 80201ec:	2201      	movs	r2, #1
 80201ee:	601a      	str	r2, [r3, #0]
 80201f0:	681a      	ldr	r2, [r3, #0]
 80201f2:	2a00      	cmp	r2, #0
 80201f4:	d1fc      	bne.n	80201f0 <CRC_Lock+0x60>
 80201f6:	4b0c      	ldr	r3, [pc, #48]	; (8020228 <CRC_Lock+0x98>)
 80201f8:	6018      	str	r0, [r3, #0]
 80201fa:	6818      	ldr	r0, [r3, #0]
 80201fc:	1a43      	subs	r3, r0, r1
 80201fe:	4258      	negs	r0, r3
 8020200:	4158      	adcs	r0, r3
 8020202:	bd30      	pop	{r4, r5, pc}
 8020204:	4b09      	ldr	r3, [pc, #36]	; (802022c <CRC_Lock+0x9c>)
 8020206:	2201      	movs	r2, #1
 8020208:	601a      	str	r2, [r3, #0]
 802020a:	681a      	ldr	r2, [r3, #0]
 802020c:	2a00      	cmp	r2, #0
 802020e:	d1fc      	bne.n	802020a <CRC_Lock+0x7a>
 8020210:	4b07      	ldr	r3, [pc, #28]	; (8020230 <CRC_Lock+0xa0>)
 8020212:	e7f1      	b.n	80201f8 <CRC_Lock+0x68>
 8020214:	e0002000 	.word	0xe0002000
 8020218:	e000ed00 	.word	0xe000ed00
 802021c:	e0042000 	.word	0xe0042000
 8020220:	5c001000 	.word	0x5c001000
 8020224:	58024c08 	.word	0x58024c08
 8020228:	58024c00 	.word	0x58024c00
 802022c:	40023008 	.word	0x40023008
 8020230:	40023000 	.word	0x40023000

08020234 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020234:	6101      	str	r1, [r0, #16]
 8020236:	4770      	bx	lr

08020238 <_ZN8touchgfx8Gestures4tickEv>:
 8020238:	7b83      	ldrb	r3, [r0, #14]
 802023a:	b14b      	cbz	r3, 8020250 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802023c:	8903      	ldrh	r3, [r0, #8]
 802023e:	3301      	adds	r3, #1
 8020240:	b29b      	uxth	r3, r3
 8020242:	2b07      	cmp	r3, #7
 8020244:	8103      	strh	r3, [r0, #8]
 8020246:	bf81      	itttt	hi
 8020248:	2300      	movhi	r3, #0
 802024a:	8143      	strhhi	r3, [r0, #10]
 802024c:	8183      	strhhi	r3, [r0, #12]
 802024e:	7383      	strbhi	r3, [r0, #14]
 8020250:	4770      	bx	lr
	...

08020254 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020258:	4698      	mov	r8, r3
 802025a:	8883      	ldrh	r3, [r0, #4]
 802025c:	4604      	mov	r4, r0
 802025e:	4617      	mov	r7, r2
 8020260:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020264:	eba8 0303 	sub.w	r3, r8, r3
 8020268:	4a19      	ldr	r2, [pc, #100]	; (80202d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802026a:	460e      	mov	r6, r1
 802026c:	b21b      	sxth	r3, r3
 802026e:	88c1      	ldrh	r1, [r0, #6]
 8020270:	9200      	str	r2, [sp, #0]
 8020272:	2000      	movs	r0, #0
 8020274:	2b00      	cmp	r3, #0
 8020276:	8aa2      	ldrh	r2, [r4, #20]
 8020278:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802027c:	bfb8      	it	lt
 802027e:	425b      	neglt	r3, r3
 8020280:	f88d 0004 	strb.w	r0, [sp, #4]
 8020284:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020288:	b21b      	sxth	r3, r3
 802028a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802028e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020292:	4293      	cmp	r3, r2
 8020294:	dc07      	bgt.n	80202a6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8020296:	1a69      	subs	r1, r5, r1
 8020298:	b209      	sxth	r1, r1
 802029a:	2900      	cmp	r1, #0
 802029c:	bfb8      	it	lt
 802029e:	4249      	neglt	r1, r1
 80202a0:	b209      	sxth	r1, r1
 80202a2:	428a      	cmp	r2, r1
 80202a4:	da10      	bge.n	80202c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80202a6:	6920      	ldr	r0, [r4, #16]
 80202a8:	4669      	mov	r1, sp
 80202aa:	eba8 0606 	sub.w	r6, r8, r6
 80202ae:	1bef      	subs	r7, r5, r7
 80202b0:	6803      	ldr	r3, [r0, #0]
 80202b2:	685b      	ldr	r3, [r3, #4]
 80202b4:	4798      	blx	r3
 80202b6:	2300      	movs	r3, #0
 80202b8:	2001      	movs	r0, #1
 80202ba:	8166      	strh	r6, [r4, #10]
 80202bc:	8123      	strh	r3, [r4, #8]
 80202be:	81a7      	strh	r7, [r4, #12]
 80202c0:	f8a4 8004 	strh.w	r8, [r4, #4]
 80202c4:	80e5      	strh	r5, [r4, #6]
 80202c6:	73a0      	strb	r0, [r4, #14]
 80202c8:	b004      	add	sp, #16
 80202ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202ce:	bf00      	nop
 80202d0:	08023ac8 	.word	0x08023ac8

080202d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80202d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202d6:	461e      	mov	r6, r3
 80202d8:	1e4b      	subs	r3, r1, #1
 80202da:	b085      	sub	sp, #20
 80202dc:	4604      	mov	r4, r0
 80202de:	2b01      	cmp	r3, #1
 80202e0:	460d      	mov	r5, r1
 80202e2:	4617      	mov	r7, r2
 80202e4:	d84b      	bhi.n	802037e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80202e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80202ea:	1cd3      	adds	r3, r2, #3
 80202ec:	b29b      	uxth	r3, r3
 80202ee:	2b06      	cmp	r3, #6
 80202f0:	d916      	bls.n	8020320 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80202f2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8020394 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80202f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80202fa:	f8cd c004 	str.w	ip, [sp, #4]
 80202fe:	f04f 0c00 	mov.w	ip, #0
 8020302:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020306:	6900      	ldr	r0, [r0, #16]
 8020308:	f8ad 100c 	strh.w	r1, [sp, #12]
 802030c:	a901      	add	r1, sp, #4
 802030e:	f88d c008 	strb.w	ip, [sp, #8]
 8020312:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020316:	f8ad 300e 	strh.w	r3, [sp, #14]
 802031a:	6803      	ldr	r3, [r0, #0]
 802031c:	689b      	ldr	r3, [r3, #8]
 802031e:	4798      	blx	r3
 8020320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020324:	1cd3      	adds	r3, r2, #3
 8020326:	b29b      	uxth	r3, r3
 8020328:	2b06      	cmp	r3, #6
 802032a:	d916      	bls.n	802035a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802032c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8020394 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020330:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020334:	f8cd c004 	str.w	ip, [sp, #4]
 8020338:	f04f 0c01 	mov.w	ip, #1
 802033c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020340:	6920      	ldr	r0, [r4, #16]
 8020342:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020346:	a901      	add	r1, sp, #4
 8020348:	f88d c008 	strb.w	ip, [sp, #8]
 802034c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020350:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020354:	6803      	ldr	r3, [r0, #0]
 8020356:	689b      	ldr	r3, [r3, #8]
 8020358:	4798      	blx	r3
 802035a:	4b0d      	ldr	r3, [pc, #52]	; (8020390 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802035c:	a901      	add	r1, sp, #4
 802035e:	6920      	ldr	r0, [r4, #16]
 8020360:	9301      	str	r3, [sp, #4]
 8020362:	2300      	movs	r3, #0
 8020364:	f88d 5008 	strb.w	r5, [sp, #8]
 8020368:	f8ad 700a 	strh.w	r7, [sp, #10]
 802036c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8020370:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020374:	6803      	ldr	r3, [r0, #0]
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	4798      	blx	r3
 802037a:	b005      	add	sp, #20
 802037c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802037e:	2900      	cmp	r1, #0
 8020380:	d1eb      	bne.n	802035a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020382:	80a2      	strh	r2, [r4, #4]
 8020384:	80c6      	strh	r6, [r0, #6]
 8020386:	60a1      	str	r1, [r4, #8]
 8020388:	81a1      	strh	r1, [r4, #12]
 802038a:	73a1      	strb	r1, [r4, #14]
 802038c:	e7e5      	b.n	802035a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802038e:	bf00      	nop
 8020390:	080238c0 	.word	0x080238c0
 8020394:	08023adc 	.word	0x08023adc

08020398 <__aeabi_atexit>:
 8020398:	460b      	mov	r3, r1
 802039a:	4601      	mov	r1, r0
 802039c:	4618      	mov	r0, r3
 802039e:	f000 b853 	b.w	8020448 <__cxa_atexit>

080203a2 <_ZdlPvj>:
 80203a2:	f000 b812 	b.w	80203ca <_ZdlPv>

080203a6 <__cxa_guard_acquire>:
 80203a6:	6803      	ldr	r3, [r0, #0]
 80203a8:	07db      	lsls	r3, r3, #31
 80203aa:	d406      	bmi.n	80203ba <__cxa_guard_acquire+0x14>
 80203ac:	7843      	ldrb	r3, [r0, #1]
 80203ae:	b103      	cbz	r3, 80203b2 <__cxa_guard_acquire+0xc>
 80203b0:	deff      	udf	#255	; 0xff
 80203b2:	2301      	movs	r3, #1
 80203b4:	7043      	strb	r3, [r0, #1]
 80203b6:	4618      	mov	r0, r3
 80203b8:	4770      	bx	lr
 80203ba:	2000      	movs	r0, #0
 80203bc:	4770      	bx	lr

080203be <__cxa_guard_release>:
 80203be:	2301      	movs	r3, #1
 80203c0:	6003      	str	r3, [r0, #0]
 80203c2:	4770      	bx	lr

080203c4 <__cxa_pure_virtual>:
 80203c4:	b508      	push	{r3, lr}
 80203c6:	f000 f80f 	bl	80203e8 <_ZSt9terminatev>

080203ca <_ZdlPv>:
 80203ca:	f000 b989 	b.w	80206e0 <free>

080203ce <_ZN10__cxxabiv111__terminateEPFvvE>:
 80203ce:	b508      	push	{r3, lr}
 80203d0:	4780      	blx	r0
 80203d2:	f000 f80e 	bl	80203f2 <abort>
	...

080203d8 <_ZSt13get_terminatev>:
 80203d8:	4b02      	ldr	r3, [pc, #8]	; (80203e4 <_ZSt13get_terminatev+0xc>)
 80203da:	6818      	ldr	r0, [r3, #0]
 80203dc:	f3bf 8f5b 	dmb	ish
 80203e0:	4770      	bx	lr
 80203e2:	bf00      	nop
 80203e4:	240000d8 	.word	0x240000d8

080203e8 <_ZSt9terminatev>:
 80203e8:	b508      	push	{r3, lr}
 80203ea:	f7ff fff5 	bl	80203d8 <_ZSt13get_terminatev>
 80203ee:	f7ff ffee 	bl	80203ce <_ZN10__cxxabiv111__terminateEPFvvE>

080203f2 <abort>:
 80203f2:	b508      	push	{r3, lr}
 80203f4:	2006      	movs	r0, #6
 80203f6:	f000 fe11 	bl	802101c <raise>
 80203fa:	2001      	movs	r0, #1
 80203fc:	f7e2 ffac 	bl	8003358 <_exit>

08020400 <__assert_func>:
 8020400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020402:	4614      	mov	r4, r2
 8020404:	461a      	mov	r2, r3
 8020406:	4b09      	ldr	r3, [pc, #36]	; (802042c <__assert_func+0x2c>)
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	4605      	mov	r5, r0
 802040c:	68d8      	ldr	r0, [r3, #12]
 802040e:	b14c      	cbz	r4, 8020424 <__assert_func+0x24>
 8020410:	4b07      	ldr	r3, [pc, #28]	; (8020430 <__assert_func+0x30>)
 8020412:	9100      	str	r1, [sp, #0]
 8020414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020418:	4906      	ldr	r1, [pc, #24]	; (8020434 <__assert_func+0x34>)
 802041a:	462b      	mov	r3, r5
 802041c:	f000 f8fe 	bl	802061c <fiprintf>
 8020420:	f7ff ffe7 	bl	80203f2 <abort>
 8020424:	4b04      	ldr	r3, [pc, #16]	; (8020438 <__assert_func+0x38>)
 8020426:	461c      	mov	r4, r3
 8020428:	e7f3      	b.n	8020412 <__assert_func+0x12>
 802042a:	bf00      	nop
 802042c:	240000dc 	.word	0x240000dc
 8020430:	08023d04 	.word	0x08023d04
 8020434:	08023d11 	.word	0x08023d11
 8020438:	08023d3f 	.word	0x08023d3f

0802043c <atexit>:
 802043c:	2300      	movs	r3, #0
 802043e:	4601      	mov	r1, r0
 8020440:	461a      	mov	r2, r3
 8020442:	4618      	mov	r0, r3
 8020444:	f000 bfa4 	b.w	8021390 <__register_exitproc>

08020448 <__cxa_atexit>:
 8020448:	b510      	push	{r4, lr}
 802044a:	4c05      	ldr	r4, [pc, #20]	; (8020460 <__cxa_atexit+0x18>)
 802044c:	4613      	mov	r3, r2
 802044e:	b12c      	cbz	r4, 802045c <__cxa_atexit+0x14>
 8020450:	460a      	mov	r2, r1
 8020452:	4601      	mov	r1, r0
 8020454:	2002      	movs	r0, #2
 8020456:	f000 ff9b 	bl	8021390 <__register_exitproc>
 802045a:	bd10      	pop	{r4, pc}
 802045c:	4620      	mov	r0, r4
 802045e:	e7fc      	b.n	802045a <__cxa_atexit+0x12>
 8020460:	08021391 	.word	0x08021391

08020464 <__errno>:
 8020464:	4b01      	ldr	r3, [pc, #4]	; (802046c <__errno+0x8>)
 8020466:	6818      	ldr	r0, [r3, #0]
 8020468:	4770      	bx	lr
 802046a:	bf00      	nop
 802046c:	240000dc 	.word	0x240000dc

08020470 <std>:
 8020470:	2300      	movs	r3, #0
 8020472:	b510      	push	{r4, lr}
 8020474:	4604      	mov	r4, r0
 8020476:	e9c0 3300 	strd	r3, r3, [r0]
 802047a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802047e:	6083      	str	r3, [r0, #8]
 8020480:	8181      	strh	r1, [r0, #12]
 8020482:	6643      	str	r3, [r0, #100]	; 0x64
 8020484:	81c2      	strh	r2, [r0, #14]
 8020486:	6183      	str	r3, [r0, #24]
 8020488:	4619      	mov	r1, r3
 802048a:	2208      	movs	r2, #8
 802048c:	305c      	adds	r0, #92	; 0x5c
 802048e:	f000 f94d 	bl	802072c <memset>
 8020492:	4b05      	ldr	r3, [pc, #20]	; (80204a8 <std+0x38>)
 8020494:	6263      	str	r3, [r4, #36]	; 0x24
 8020496:	4b05      	ldr	r3, [pc, #20]	; (80204ac <std+0x3c>)
 8020498:	62a3      	str	r3, [r4, #40]	; 0x28
 802049a:	4b05      	ldr	r3, [pc, #20]	; (80204b0 <std+0x40>)
 802049c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802049e:	4b05      	ldr	r3, [pc, #20]	; (80204b4 <std+0x44>)
 80204a0:	6224      	str	r4, [r4, #32]
 80204a2:	6323      	str	r3, [r4, #48]	; 0x30
 80204a4:	bd10      	pop	{r4, pc}
 80204a6:	bf00      	nop
 80204a8:	08021095 	.word	0x08021095
 80204ac:	080210b7 	.word	0x080210b7
 80204b0:	080210ef 	.word	0x080210ef
 80204b4:	08021113 	.word	0x08021113

080204b8 <_cleanup_r>:
 80204b8:	4901      	ldr	r1, [pc, #4]	; (80204c0 <_cleanup_r+0x8>)
 80204ba:	f000 b8c1 	b.w	8020640 <_fwalk_reent>
 80204be:	bf00      	nop
 80204c0:	08021581 	.word	0x08021581

080204c4 <__sfmoreglue>:
 80204c4:	b570      	push	{r4, r5, r6, lr}
 80204c6:	2268      	movs	r2, #104	; 0x68
 80204c8:	1e4d      	subs	r5, r1, #1
 80204ca:	4355      	muls	r5, r2
 80204cc:	460e      	mov	r6, r1
 80204ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80204d2:	f000 f99f 	bl	8020814 <_malloc_r>
 80204d6:	4604      	mov	r4, r0
 80204d8:	b140      	cbz	r0, 80204ec <__sfmoreglue+0x28>
 80204da:	2100      	movs	r1, #0
 80204dc:	e9c0 1600 	strd	r1, r6, [r0]
 80204e0:	300c      	adds	r0, #12
 80204e2:	60a0      	str	r0, [r4, #8]
 80204e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80204e8:	f000 f920 	bl	802072c <memset>
 80204ec:	4620      	mov	r0, r4
 80204ee:	bd70      	pop	{r4, r5, r6, pc}

080204f0 <__sfp_lock_acquire>:
 80204f0:	4801      	ldr	r0, [pc, #4]	; (80204f8 <__sfp_lock_acquire+0x8>)
 80204f2:	f000 b8ea 	b.w	80206ca <__retarget_lock_acquire_recursive>
 80204f6:	bf00      	nop
 80204f8:	2400c8d2 	.word	0x2400c8d2

080204fc <__sfp_lock_release>:
 80204fc:	4801      	ldr	r0, [pc, #4]	; (8020504 <__sfp_lock_release+0x8>)
 80204fe:	f000 b8e6 	b.w	80206ce <__retarget_lock_release_recursive>
 8020502:	bf00      	nop
 8020504:	2400c8d2 	.word	0x2400c8d2

08020508 <__sinit_lock_acquire>:
 8020508:	4801      	ldr	r0, [pc, #4]	; (8020510 <__sinit_lock_acquire+0x8>)
 802050a:	f000 b8de 	b.w	80206ca <__retarget_lock_acquire_recursive>
 802050e:	bf00      	nop
 8020510:	2400c8d3 	.word	0x2400c8d3

08020514 <__sinit_lock_release>:
 8020514:	4801      	ldr	r0, [pc, #4]	; (802051c <__sinit_lock_release+0x8>)
 8020516:	f000 b8da 	b.w	80206ce <__retarget_lock_release_recursive>
 802051a:	bf00      	nop
 802051c:	2400c8d3 	.word	0x2400c8d3

08020520 <__sinit>:
 8020520:	b510      	push	{r4, lr}
 8020522:	4604      	mov	r4, r0
 8020524:	f7ff fff0 	bl	8020508 <__sinit_lock_acquire>
 8020528:	69a3      	ldr	r3, [r4, #24]
 802052a:	b11b      	cbz	r3, 8020534 <__sinit+0x14>
 802052c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020530:	f7ff bff0 	b.w	8020514 <__sinit_lock_release>
 8020534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020538:	6523      	str	r3, [r4, #80]	; 0x50
 802053a:	4b13      	ldr	r3, [pc, #76]	; (8020588 <__sinit+0x68>)
 802053c:	4a13      	ldr	r2, [pc, #76]	; (802058c <__sinit+0x6c>)
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	62a2      	str	r2, [r4, #40]	; 0x28
 8020542:	42a3      	cmp	r3, r4
 8020544:	bf04      	itt	eq
 8020546:	2301      	moveq	r3, #1
 8020548:	61a3      	streq	r3, [r4, #24]
 802054a:	4620      	mov	r0, r4
 802054c:	f000 f820 	bl	8020590 <__sfp>
 8020550:	6060      	str	r0, [r4, #4]
 8020552:	4620      	mov	r0, r4
 8020554:	f000 f81c 	bl	8020590 <__sfp>
 8020558:	60a0      	str	r0, [r4, #8]
 802055a:	4620      	mov	r0, r4
 802055c:	f000 f818 	bl	8020590 <__sfp>
 8020560:	2200      	movs	r2, #0
 8020562:	60e0      	str	r0, [r4, #12]
 8020564:	2104      	movs	r1, #4
 8020566:	6860      	ldr	r0, [r4, #4]
 8020568:	f7ff ff82 	bl	8020470 <std>
 802056c:	68a0      	ldr	r0, [r4, #8]
 802056e:	2201      	movs	r2, #1
 8020570:	2109      	movs	r1, #9
 8020572:	f7ff ff7d 	bl	8020470 <std>
 8020576:	68e0      	ldr	r0, [r4, #12]
 8020578:	2202      	movs	r2, #2
 802057a:	2112      	movs	r1, #18
 802057c:	f7ff ff78 	bl	8020470 <std>
 8020580:	2301      	movs	r3, #1
 8020582:	61a3      	str	r3, [r4, #24]
 8020584:	e7d2      	b.n	802052c <__sinit+0xc>
 8020586:	bf00      	nop
 8020588:	08023da0 	.word	0x08023da0
 802058c:	080204b9 	.word	0x080204b9

08020590 <__sfp>:
 8020590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020592:	4607      	mov	r7, r0
 8020594:	f7ff ffac 	bl	80204f0 <__sfp_lock_acquire>
 8020598:	4b1e      	ldr	r3, [pc, #120]	; (8020614 <__sfp+0x84>)
 802059a:	681e      	ldr	r6, [r3, #0]
 802059c:	69b3      	ldr	r3, [r6, #24]
 802059e:	b913      	cbnz	r3, 80205a6 <__sfp+0x16>
 80205a0:	4630      	mov	r0, r6
 80205a2:	f7ff ffbd 	bl	8020520 <__sinit>
 80205a6:	3648      	adds	r6, #72	; 0x48
 80205a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80205ac:	3b01      	subs	r3, #1
 80205ae:	d503      	bpl.n	80205b8 <__sfp+0x28>
 80205b0:	6833      	ldr	r3, [r6, #0]
 80205b2:	b30b      	cbz	r3, 80205f8 <__sfp+0x68>
 80205b4:	6836      	ldr	r6, [r6, #0]
 80205b6:	e7f7      	b.n	80205a8 <__sfp+0x18>
 80205b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80205bc:	b9d5      	cbnz	r5, 80205f4 <__sfp+0x64>
 80205be:	4b16      	ldr	r3, [pc, #88]	; (8020618 <__sfp+0x88>)
 80205c0:	60e3      	str	r3, [r4, #12]
 80205c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80205c6:	6665      	str	r5, [r4, #100]	; 0x64
 80205c8:	f000 f87e 	bl	80206c8 <__retarget_lock_init_recursive>
 80205cc:	f7ff ff96 	bl	80204fc <__sfp_lock_release>
 80205d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80205d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80205d8:	6025      	str	r5, [r4, #0]
 80205da:	61a5      	str	r5, [r4, #24]
 80205dc:	2208      	movs	r2, #8
 80205de:	4629      	mov	r1, r5
 80205e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80205e4:	f000 f8a2 	bl	802072c <memset>
 80205e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80205ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80205f0:	4620      	mov	r0, r4
 80205f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205f4:	3468      	adds	r4, #104	; 0x68
 80205f6:	e7d9      	b.n	80205ac <__sfp+0x1c>
 80205f8:	2104      	movs	r1, #4
 80205fa:	4638      	mov	r0, r7
 80205fc:	f7ff ff62 	bl	80204c4 <__sfmoreglue>
 8020600:	4604      	mov	r4, r0
 8020602:	6030      	str	r0, [r6, #0]
 8020604:	2800      	cmp	r0, #0
 8020606:	d1d5      	bne.n	80205b4 <__sfp+0x24>
 8020608:	f7ff ff78 	bl	80204fc <__sfp_lock_release>
 802060c:	230c      	movs	r3, #12
 802060e:	603b      	str	r3, [r7, #0]
 8020610:	e7ee      	b.n	80205f0 <__sfp+0x60>
 8020612:	bf00      	nop
 8020614:	08023da0 	.word	0x08023da0
 8020618:	ffff0001 	.word	0xffff0001

0802061c <fiprintf>:
 802061c:	b40e      	push	{r1, r2, r3}
 802061e:	b503      	push	{r0, r1, lr}
 8020620:	4601      	mov	r1, r0
 8020622:	ab03      	add	r3, sp, #12
 8020624:	4805      	ldr	r0, [pc, #20]	; (802063c <fiprintf+0x20>)
 8020626:	f853 2b04 	ldr.w	r2, [r3], #4
 802062a:	6800      	ldr	r0, [r0, #0]
 802062c:	9301      	str	r3, [sp, #4]
 802062e:	f000 f98f 	bl	8020950 <_vfiprintf_r>
 8020632:	b002      	add	sp, #8
 8020634:	f85d eb04 	ldr.w	lr, [sp], #4
 8020638:	b003      	add	sp, #12
 802063a:	4770      	bx	lr
 802063c:	240000dc 	.word	0x240000dc

08020640 <_fwalk_reent>:
 8020640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020644:	4606      	mov	r6, r0
 8020646:	4688      	mov	r8, r1
 8020648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802064c:	2700      	movs	r7, #0
 802064e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020652:	f1b9 0901 	subs.w	r9, r9, #1
 8020656:	d505      	bpl.n	8020664 <_fwalk_reent+0x24>
 8020658:	6824      	ldr	r4, [r4, #0]
 802065a:	2c00      	cmp	r4, #0
 802065c:	d1f7      	bne.n	802064e <_fwalk_reent+0xe>
 802065e:	4638      	mov	r0, r7
 8020660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020664:	89ab      	ldrh	r3, [r5, #12]
 8020666:	2b01      	cmp	r3, #1
 8020668:	d907      	bls.n	802067a <_fwalk_reent+0x3a>
 802066a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802066e:	3301      	adds	r3, #1
 8020670:	d003      	beq.n	802067a <_fwalk_reent+0x3a>
 8020672:	4629      	mov	r1, r5
 8020674:	4630      	mov	r0, r6
 8020676:	47c0      	blx	r8
 8020678:	4307      	orrs	r7, r0
 802067a:	3568      	adds	r5, #104	; 0x68
 802067c:	e7e9      	b.n	8020652 <_fwalk_reent+0x12>
	...

08020680 <__libc_init_array>:
 8020680:	b570      	push	{r4, r5, r6, lr}
 8020682:	4d0d      	ldr	r5, [pc, #52]	; (80206b8 <__libc_init_array+0x38>)
 8020684:	4c0d      	ldr	r4, [pc, #52]	; (80206bc <__libc_init_array+0x3c>)
 8020686:	1b64      	subs	r4, r4, r5
 8020688:	10a4      	asrs	r4, r4, #2
 802068a:	2600      	movs	r6, #0
 802068c:	42a6      	cmp	r6, r4
 802068e:	d109      	bne.n	80206a4 <__libc_init_array+0x24>
 8020690:	4d0b      	ldr	r5, [pc, #44]	; (80206c0 <__libc_init_array+0x40>)
 8020692:	4c0c      	ldr	r4, [pc, #48]	; (80206c4 <__libc_init_array+0x44>)
 8020694:	f001 fa14 	bl	8021ac0 <_init>
 8020698:	1b64      	subs	r4, r4, r5
 802069a:	10a4      	asrs	r4, r4, #2
 802069c:	2600      	movs	r6, #0
 802069e:	42a6      	cmp	r6, r4
 80206a0:	d105      	bne.n	80206ae <__libc_init_array+0x2e>
 80206a2:	bd70      	pop	{r4, r5, r6, pc}
 80206a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80206a8:	4798      	blx	r3
 80206aa:	3601      	adds	r6, #1
 80206ac:	e7ee      	b.n	802068c <__libc_init_array+0xc>
 80206ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80206b2:	4798      	blx	r3
 80206b4:	3601      	adds	r6, #1
 80206b6:	e7f2      	b.n	802069e <__libc_init_array+0x1e>
 80206b8:	0802428c 	.word	0x0802428c
 80206bc:	0802428c 	.word	0x0802428c
 80206c0:	0802428c 	.word	0x0802428c
 80206c4:	080242b4 	.word	0x080242b4

080206c8 <__retarget_lock_init_recursive>:
 80206c8:	4770      	bx	lr

080206ca <__retarget_lock_acquire_recursive>:
 80206ca:	4770      	bx	lr

080206cc <__retarget_lock_release>:
 80206cc:	4770      	bx	lr

080206ce <__retarget_lock_release_recursive>:
 80206ce:	4770      	bx	lr

080206d0 <malloc>:
 80206d0:	4b02      	ldr	r3, [pc, #8]	; (80206dc <malloc+0xc>)
 80206d2:	4601      	mov	r1, r0
 80206d4:	6818      	ldr	r0, [r3, #0]
 80206d6:	f000 b89d 	b.w	8020814 <_malloc_r>
 80206da:	bf00      	nop
 80206dc:	240000dc 	.word	0x240000dc

080206e0 <free>:
 80206e0:	4b02      	ldr	r3, [pc, #8]	; (80206ec <free+0xc>)
 80206e2:	4601      	mov	r1, r0
 80206e4:	6818      	ldr	r0, [r3, #0]
 80206e6:	f000 b829 	b.w	802073c <_free_r>
 80206ea:	bf00      	nop
 80206ec:	240000dc 	.word	0x240000dc

080206f0 <memcmp>:
 80206f0:	b510      	push	{r4, lr}
 80206f2:	3901      	subs	r1, #1
 80206f4:	4402      	add	r2, r0
 80206f6:	4290      	cmp	r0, r2
 80206f8:	d101      	bne.n	80206fe <memcmp+0xe>
 80206fa:	2000      	movs	r0, #0
 80206fc:	e005      	b.n	802070a <memcmp+0x1a>
 80206fe:	7803      	ldrb	r3, [r0, #0]
 8020700:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020704:	42a3      	cmp	r3, r4
 8020706:	d001      	beq.n	802070c <memcmp+0x1c>
 8020708:	1b18      	subs	r0, r3, r4
 802070a:	bd10      	pop	{r4, pc}
 802070c:	3001      	adds	r0, #1
 802070e:	e7f2      	b.n	80206f6 <memcmp+0x6>

08020710 <memcpy>:
 8020710:	440a      	add	r2, r1
 8020712:	4291      	cmp	r1, r2
 8020714:	f100 33ff 	add.w	r3, r0, #4294967295
 8020718:	d100      	bne.n	802071c <memcpy+0xc>
 802071a:	4770      	bx	lr
 802071c:	b510      	push	{r4, lr}
 802071e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020726:	4291      	cmp	r1, r2
 8020728:	d1f9      	bne.n	802071e <memcpy+0xe>
 802072a:	bd10      	pop	{r4, pc}

0802072c <memset>:
 802072c:	4402      	add	r2, r0
 802072e:	4603      	mov	r3, r0
 8020730:	4293      	cmp	r3, r2
 8020732:	d100      	bne.n	8020736 <memset+0xa>
 8020734:	4770      	bx	lr
 8020736:	f803 1b01 	strb.w	r1, [r3], #1
 802073a:	e7f9      	b.n	8020730 <memset+0x4>

0802073c <_free_r>:
 802073c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802073e:	2900      	cmp	r1, #0
 8020740:	d044      	beq.n	80207cc <_free_r+0x90>
 8020742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020746:	9001      	str	r0, [sp, #4]
 8020748:	2b00      	cmp	r3, #0
 802074a:	f1a1 0404 	sub.w	r4, r1, #4
 802074e:	bfb8      	it	lt
 8020750:	18e4      	addlt	r4, r4, r3
 8020752:	f000 ffe3 	bl	802171c <__malloc_lock>
 8020756:	4a1e      	ldr	r2, [pc, #120]	; (80207d0 <_free_r+0x94>)
 8020758:	9801      	ldr	r0, [sp, #4]
 802075a:	6813      	ldr	r3, [r2, #0]
 802075c:	b933      	cbnz	r3, 802076c <_free_r+0x30>
 802075e:	6063      	str	r3, [r4, #4]
 8020760:	6014      	str	r4, [r2, #0]
 8020762:	b003      	add	sp, #12
 8020764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020768:	f000 bfde 	b.w	8021728 <__malloc_unlock>
 802076c:	42a3      	cmp	r3, r4
 802076e:	d908      	bls.n	8020782 <_free_r+0x46>
 8020770:	6825      	ldr	r5, [r4, #0]
 8020772:	1961      	adds	r1, r4, r5
 8020774:	428b      	cmp	r3, r1
 8020776:	bf01      	itttt	eq
 8020778:	6819      	ldreq	r1, [r3, #0]
 802077a:	685b      	ldreq	r3, [r3, #4]
 802077c:	1949      	addeq	r1, r1, r5
 802077e:	6021      	streq	r1, [r4, #0]
 8020780:	e7ed      	b.n	802075e <_free_r+0x22>
 8020782:	461a      	mov	r2, r3
 8020784:	685b      	ldr	r3, [r3, #4]
 8020786:	b10b      	cbz	r3, 802078c <_free_r+0x50>
 8020788:	42a3      	cmp	r3, r4
 802078a:	d9fa      	bls.n	8020782 <_free_r+0x46>
 802078c:	6811      	ldr	r1, [r2, #0]
 802078e:	1855      	adds	r5, r2, r1
 8020790:	42a5      	cmp	r5, r4
 8020792:	d10b      	bne.n	80207ac <_free_r+0x70>
 8020794:	6824      	ldr	r4, [r4, #0]
 8020796:	4421      	add	r1, r4
 8020798:	1854      	adds	r4, r2, r1
 802079a:	42a3      	cmp	r3, r4
 802079c:	6011      	str	r1, [r2, #0]
 802079e:	d1e0      	bne.n	8020762 <_free_r+0x26>
 80207a0:	681c      	ldr	r4, [r3, #0]
 80207a2:	685b      	ldr	r3, [r3, #4]
 80207a4:	6053      	str	r3, [r2, #4]
 80207a6:	4421      	add	r1, r4
 80207a8:	6011      	str	r1, [r2, #0]
 80207aa:	e7da      	b.n	8020762 <_free_r+0x26>
 80207ac:	d902      	bls.n	80207b4 <_free_r+0x78>
 80207ae:	230c      	movs	r3, #12
 80207b0:	6003      	str	r3, [r0, #0]
 80207b2:	e7d6      	b.n	8020762 <_free_r+0x26>
 80207b4:	6825      	ldr	r5, [r4, #0]
 80207b6:	1961      	adds	r1, r4, r5
 80207b8:	428b      	cmp	r3, r1
 80207ba:	bf04      	itt	eq
 80207bc:	6819      	ldreq	r1, [r3, #0]
 80207be:	685b      	ldreq	r3, [r3, #4]
 80207c0:	6063      	str	r3, [r4, #4]
 80207c2:	bf04      	itt	eq
 80207c4:	1949      	addeq	r1, r1, r5
 80207c6:	6021      	streq	r1, [r4, #0]
 80207c8:	6054      	str	r4, [r2, #4]
 80207ca:	e7ca      	b.n	8020762 <_free_r+0x26>
 80207cc:	b003      	add	sp, #12
 80207ce:	bd30      	pop	{r4, r5, pc}
 80207d0:	2400c8d4 	.word	0x2400c8d4

080207d4 <sbrk_aligned>:
 80207d4:	b570      	push	{r4, r5, r6, lr}
 80207d6:	4e0e      	ldr	r6, [pc, #56]	; (8020810 <sbrk_aligned+0x3c>)
 80207d8:	460c      	mov	r4, r1
 80207da:	6831      	ldr	r1, [r6, #0]
 80207dc:	4605      	mov	r5, r0
 80207de:	b911      	cbnz	r1, 80207e6 <sbrk_aligned+0x12>
 80207e0:	f000 fbe4 	bl	8020fac <_sbrk_r>
 80207e4:	6030      	str	r0, [r6, #0]
 80207e6:	4621      	mov	r1, r4
 80207e8:	4628      	mov	r0, r5
 80207ea:	f000 fbdf 	bl	8020fac <_sbrk_r>
 80207ee:	1c43      	adds	r3, r0, #1
 80207f0:	d00a      	beq.n	8020808 <sbrk_aligned+0x34>
 80207f2:	1cc4      	adds	r4, r0, #3
 80207f4:	f024 0403 	bic.w	r4, r4, #3
 80207f8:	42a0      	cmp	r0, r4
 80207fa:	d007      	beq.n	802080c <sbrk_aligned+0x38>
 80207fc:	1a21      	subs	r1, r4, r0
 80207fe:	4628      	mov	r0, r5
 8020800:	f000 fbd4 	bl	8020fac <_sbrk_r>
 8020804:	3001      	adds	r0, #1
 8020806:	d101      	bne.n	802080c <sbrk_aligned+0x38>
 8020808:	f04f 34ff 	mov.w	r4, #4294967295
 802080c:	4620      	mov	r0, r4
 802080e:	bd70      	pop	{r4, r5, r6, pc}
 8020810:	2400c8d8 	.word	0x2400c8d8

08020814 <_malloc_r>:
 8020814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020818:	1ccd      	adds	r5, r1, #3
 802081a:	f025 0503 	bic.w	r5, r5, #3
 802081e:	3508      	adds	r5, #8
 8020820:	2d0c      	cmp	r5, #12
 8020822:	bf38      	it	cc
 8020824:	250c      	movcc	r5, #12
 8020826:	2d00      	cmp	r5, #0
 8020828:	4607      	mov	r7, r0
 802082a:	db01      	blt.n	8020830 <_malloc_r+0x1c>
 802082c:	42a9      	cmp	r1, r5
 802082e:	d905      	bls.n	802083c <_malloc_r+0x28>
 8020830:	230c      	movs	r3, #12
 8020832:	603b      	str	r3, [r7, #0]
 8020834:	2600      	movs	r6, #0
 8020836:	4630      	mov	r0, r6
 8020838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802083c:	4e2e      	ldr	r6, [pc, #184]	; (80208f8 <_malloc_r+0xe4>)
 802083e:	f000 ff6d 	bl	802171c <__malloc_lock>
 8020842:	6833      	ldr	r3, [r6, #0]
 8020844:	461c      	mov	r4, r3
 8020846:	bb34      	cbnz	r4, 8020896 <_malloc_r+0x82>
 8020848:	4629      	mov	r1, r5
 802084a:	4638      	mov	r0, r7
 802084c:	f7ff ffc2 	bl	80207d4 <sbrk_aligned>
 8020850:	1c43      	adds	r3, r0, #1
 8020852:	4604      	mov	r4, r0
 8020854:	d14d      	bne.n	80208f2 <_malloc_r+0xde>
 8020856:	6834      	ldr	r4, [r6, #0]
 8020858:	4626      	mov	r6, r4
 802085a:	2e00      	cmp	r6, #0
 802085c:	d140      	bne.n	80208e0 <_malloc_r+0xcc>
 802085e:	6823      	ldr	r3, [r4, #0]
 8020860:	4631      	mov	r1, r6
 8020862:	4638      	mov	r0, r7
 8020864:	eb04 0803 	add.w	r8, r4, r3
 8020868:	f000 fba0 	bl	8020fac <_sbrk_r>
 802086c:	4580      	cmp	r8, r0
 802086e:	d13a      	bne.n	80208e6 <_malloc_r+0xd2>
 8020870:	6821      	ldr	r1, [r4, #0]
 8020872:	3503      	adds	r5, #3
 8020874:	1a6d      	subs	r5, r5, r1
 8020876:	f025 0503 	bic.w	r5, r5, #3
 802087a:	3508      	adds	r5, #8
 802087c:	2d0c      	cmp	r5, #12
 802087e:	bf38      	it	cc
 8020880:	250c      	movcc	r5, #12
 8020882:	4629      	mov	r1, r5
 8020884:	4638      	mov	r0, r7
 8020886:	f7ff ffa5 	bl	80207d4 <sbrk_aligned>
 802088a:	3001      	adds	r0, #1
 802088c:	d02b      	beq.n	80208e6 <_malloc_r+0xd2>
 802088e:	6823      	ldr	r3, [r4, #0]
 8020890:	442b      	add	r3, r5
 8020892:	6023      	str	r3, [r4, #0]
 8020894:	e00e      	b.n	80208b4 <_malloc_r+0xa0>
 8020896:	6822      	ldr	r2, [r4, #0]
 8020898:	1b52      	subs	r2, r2, r5
 802089a:	d41e      	bmi.n	80208da <_malloc_r+0xc6>
 802089c:	2a0b      	cmp	r2, #11
 802089e:	d916      	bls.n	80208ce <_malloc_r+0xba>
 80208a0:	1961      	adds	r1, r4, r5
 80208a2:	42a3      	cmp	r3, r4
 80208a4:	6025      	str	r5, [r4, #0]
 80208a6:	bf18      	it	ne
 80208a8:	6059      	strne	r1, [r3, #4]
 80208aa:	6863      	ldr	r3, [r4, #4]
 80208ac:	bf08      	it	eq
 80208ae:	6031      	streq	r1, [r6, #0]
 80208b0:	5162      	str	r2, [r4, r5]
 80208b2:	604b      	str	r3, [r1, #4]
 80208b4:	4638      	mov	r0, r7
 80208b6:	f104 060b 	add.w	r6, r4, #11
 80208ba:	f000 ff35 	bl	8021728 <__malloc_unlock>
 80208be:	f026 0607 	bic.w	r6, r6, #7
 80208c2:	1d23      	adds	r3, r4, #4
 80208c4:	1af2      	subs	r2, r6, r3
 80208c6:	d0b6      	beq.n	8020836 <_malloc_r+0x22>
 80208c8:	1b9b      	subs	r3, r3, r6
 80208ca:	50a3      	str	r3, [r4, r2]
 80208cc:	e7b3      	b.n	8020836 <_malloc_r+0x22>
 80208ce:	6862      	ldr	r2, [r4, #4]
 80208d0:	42a3      	cmp	r3, r4
 80208d2:	bf0c      	ite	eq
 80208d4:	6032      	streq	r2, [r6, #0]
 80208d6:	605a      	strne	r2, [r3, #4]
 80208d8:	e7ec      	b.n	80208b4 <_malloc_r+0xa0>
 80208da:	4623      	mov	r3, r4
 80208dc:	6864      	ldr	r4, [r4, #4]
 80208de:	e7b2      	b.n	8020846 <_malloc_r+0x32>
 80208e0:	4634      	mov	r4, r6
 80208e2:	6876      	ldr	r6, [r6, #4]
 80208e4:	e7b9      	b.n	802085a <_malloc_r+0x46>
 80208e6:	230c      	movs	r3, #12
 80208e8:	603b      	str	r3, [r7, #0]
 80208ea:	4638      	mov	r0, r7
 80208ec:	f000 ff1c 	bl	8021728 <__malloc_unlock>
 80208f0:	e7a1      	b.n	8020836 <_malloc_r+0x22>
 80208f2:	6025      	str	r5, [r4, #0]
 80208f4:	e7de      	b.n	80208b4 <_malloc_r+0xa0>
 80208f6:	bf00      	nop
 80208f8:	2400c8d4 	.word	0x2400c8d4

080208fc <__sfputc_r>:
 80208fc:	6893      	ldr	r3, [r2, #8]
 80208fe:	3b01      	subs	r3, #1
 8020900:	2b00      	cmp	r3, #0
 8020902:	b410      	push	{r4}
 8020904:	6093      	str	r3, [r2, #8]
 8020906:	da08      	bge.n	802091a <__sfputc_r+0x1e>
 8020908:	6994      	ldr	r4, [r2, #24]
 802090a:	42a3      	cmp	r3, r4
 802090c:	db01      	blt.n	8020912 <__sfputc_r+0x16>
 802090e:	290a      	cmp	r1, #10
 8020910:	d103      	bne.n	802091a <__sfputc_r+0x1e>
 8020912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020916:	f000 bc69 	b.w	80211ec <__swbuf_r>
 802091a:	6813      	ldr	r3, [r2, #0]
 802091c:	1c58      	adds	r0, r3, #1
 802091e:	6010      	str	r0, [r2, #0]
 8020920:	7019      	strb	r1, [r3, #0]
 8020922:	4608      	mov	r0, r1
 8020924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020928:	4770      	bx	lr

0802092a <__sfputs_r>:
 802092a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802092c:	4606      	mov	r6, r0
 802092e:	460f      	mov	r7, r1
 8020930:	4614      	mov	r4, r2
 8020932:	18d5      	adds	r5, r2, r3
 8020934:	42ac      	cmp	r4, r5
 8020936:	d101      	bne.n	802093c <__sfputs_r+0x12>
 8020938:	2000      	movs	r0, #0
 802093a:	e007      	b.n	802094c <__sfputs_r+0x22>
 802093c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020940:	463a      	mov	r2, r7
 8020942:	4630      	mov	r0, r6
 8020944:	f7ff ffda 	bl	80208fc <__sfputc_r>
 8020948:	1c43      	adds	r3, r0, #1
 802094a:	d1f3      	bne.n	8020934 <__sfputs_r+0xa>
 802094c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020950 <_vfiprintf_r>:
 8020950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020954:	460d      	mov	r5, r1
 8020956:	b09d      	sub	sp, #116	; 0x74
 8020958:	4614      	mov	r4, r2
 802095a:	4698      	mov	r8, r3
 802095c:	4606      	mov	r6, r0
 802095e:	b118      	cbz	r0, 8020968 <_vfiprintf_r+0x18>
 8020960:	6983      	ldr	r3, [r0, #24]
 8020962:	b90b      	cbnz	r3, 8020968 <_vfiprintf_r+0x18>
 8020964:	f7ff fddc 	bl	8020520 <__sinit>
 8020968:	4b89      	ldr	r3, [pc, #548]	; (8020b90 <_vfiprintf_r+0x240>)
 802096a:	429d      	cmp	r5, r3
 802096c:	d11b      	bne.n	80209a6 <_vfiprintf_r+0x56>
 802096e:	6875      	ldr	r5, [r6, #4]
 8020970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020972:	07d9      	lsls	r1, r3, #31
 8020974:	d405      	bmi.n	8020982 <_vfiprintf_r+0x32>
 8020976:	89ab      	ldrh	r3, [r5, #12]
 8020978:	059a      	lsls	r2, r3, #22
 802097a:	d402      	bmi.n	8020982 <_vfiprintf_r+0x32>
 802097c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802097e:	f7ff fea4 	bl	80206ca <__retarget_lock_acquire_recursive>
 8020982:	89ab      	ldrh	r3, [r5, #12]
 8020984:	071b      	lsls	r3, r3, #28
 8020986:	d501      	bpl.n	802098c <_vfiprintf_r+0x3c>
 8020988:	692b      	ldr	r3, [r5, #16]
 802098a:	b9eb      	cbnz	r3, 80209c8 <_vfiprintf_r+0x78>
 802098c:	4629      	mov	r1, r5
 802098e:	4630      	mov	r0, r6
 8020990:	f000 fc90 	bl	80212b4 <__swsetup_r>
 8020994:	b1c0      	cbz	r0, 80209c8 <_vfiprintf_r+0x78>
 8020996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020998:	07dc      	lsls	r4, r3, #31
 802099a:	d50e      	bpl.n	80209ba <_vfiprintf_r+0x6a>
 802099c:	f04f 30ff 	mov.w	r0, #4294967295
 80209a0:	b01d      	add	sp, #116	; 0x74
 80209a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209a6:	4b7b      	ldr	r3, [pc, #492]	; (8020b94 <_vfiprintf_r+0x244>)
 80209a8:	429d      	cmp	r5, r3
 80209aa:	d101      	bne.n	80209b0 <_vfiprintf_r+0x60>
 80209ac:	68b5      	ldr	r5, [r6, #8]
 80209ae:	e7df      	b.n	8020970 <_vfiprintf_r+0x20>
 80209b0:	4b79      	ldr	r3, [pc, #484]	; (8020b98 <_vfiprintf_r+0x248>)
 80209b2:	429d      	cmp	r5, r3
 80209b4:	bf08      	it	eq
 80209b6:	68f5      	ldreq	r5, [r6, #12]
 80209b8:	e7da      	b.n	8020970 <_vfiprintf_r+0x20>
 80209ba:	89ab      	ldrh	r3, [r5, #12]
 80209bc:	0598      	lsls	r0, r3, #22
 80209be:	d4ed      	bmi.n	802099c <_vfiprintf_r+0x4c>
 80209c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80209c2:	f7ff fe84 	bl	80206ce <__retarget_lock_release_recursive>
 80209c6:	e7e9      	b.n	802099c <_vfiprintf_r+0x4c>
 80209c8:	2300      	movs	r3, #0
 80209ca:	9309      	str	r3, [sp, #36]	; 0x24
 80209cc:	2320      	movs	r3, #32
 80209ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80209d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80209d6:	2330      	movs	r3, #48	; 0x30
 80209d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020b9c <_vfiprintf_r+0x24c>
 80209dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80209e0:	f04f 0901 	mov.w	r9, #1
 80209e4:	4623      	mov	r3, r4
 80209e6:	469a      	mov	sl, r3
 80209e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80209ec:	b10a      	cbz	r2, 80209f2 <_vfiprintf_r+0xa2>
 80209ee:	2a25      	cmp	r2, #37	; 0x25
 80209f0:	d1f9      	bne.n	80209e6 <_vfiprintf_r+0x96>
 80209f2:	ebba 0b04 	subs.w	fp, sl, r4
 80209f6:	d00b      	beq.n	8020a10 <_vfiprintf_r+0xc0>
 80209f8:	465b      	mov	r3, fp
 80209fa:	4622      	mov	r2, r4
 80209fc:	4629      	mov	r1, r5
 80209fe:	4630      	mov	r0, r6
 8020a00:	f7ff ff93 	bl	802092a <__sfputs_r>
 8020a04:	3001      	adds	r0, #1
 8020a06:	f000 80aa 	beq.w	8020b5e <_vfiprintf_r+0x20e>
 8020a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020a0c:	445a      	add	r2, fp
 8020a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8020a10:	f89a 3000 	ldrb.w	r3, [sl]
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	f000 80a2 	beq.w	8020b5e <_vfiprintf_r+0x20e>
 8020a1a:	2300      	movs	r3, #0
 8020a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8020a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020a24:	f10a 0a01 	add.w	sl, sl, #1
 8020a28:	9304      	str	r3, [sp, #16]
 8020a2a:	9307      	str	r3, [sp, #28]
 8020a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020a30:	931a      	str	r3, [sp, #104]	; 0x68
 8020a32:	4654      	mov	r4, sl
 8020a34:	2205      	movs	r2, #5
 8020a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a3a:	4858      	ldr	r0, [pc, #352]	; (8020b9c <_vfiprintf_r+0x24c>)
 8020a3c:	f7df fc70 	bl	8000320 <memchr>
 8020a40:	9a04      	ldr	r2, [sp, #16]
 8020a42:	b9d8      	cbnz	r0, 8020a7c <_vfiprintf_r+0x12c>
 8020a44:	06d1      	lsls	r1, r2, #27
 8020a46:	bf44      	itt	mi
 8020a48:	2320      	movmi	r3, #32
 8020a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020a4e:	0713      	lsls	r3, r2, #28
 8020a50:	bf44      	itt	mi
 8020a52:	232b      	movmi	r3, #43	; 0x2b
 8020a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020a58:	f89a 3000 	ldrb.w	r3, [sl]
 8020a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8020a5e:	d015      	beq.n	8020a8c <_vfiprintf_r+0x13c>
 8020a60:	9a07      	ldr	r2, [sp, #28]
 8020a62:	4654      	mov	r4, sl
 8020a64:	2000      	movs	r0, #0
 8020a66:	f04f 0c0a 	mov.w	ip, #10
 8020a6a:	4621      	mov	r1, r4
 8020a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020a70:	3b30      	subs	r3, #48	; 0x30
 8020a72:	2b09      	cmp	r3, #9
 8020a74:	d94e      	bls.n	8020b14 <_vfiprintf_r+0x1c4>
 8020a76:	b1b0      	cbz	r0, 8020aa6 <_vfiprintf_r+0x156>
 8020a78:	9207      	str	r2, [sp, #28]
 8020a7a:	e014      	b.n	8020aa6 <_vfiprintf_r+0x156>
 8020a7c:	eba0 0308 	sub.w	r3, r0, r8
 8020a80:	fa09 f303 	lsl.w	r3, r9, r3
 8020a84:	4313      	orrs	r3, r2
 8020a86:	9304      	str	r3, [sp, #16]
 8020a88:	46a2      	mov	sl, r4
 8020a8a:	e7d2      	b.n	8020a32 <_vfiprintf_r+0xe2>
 8020a8c:	9b03      	ldr	r3, [sp, #12]
 8020a8e:	1d19      	adds	r1, r3, #4
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	9103      	str	r1, [sp, #12]
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	bfbb      	ittet	lt
 8020a98:	425b      	neglt	r3, r3
 8020a9a:	f042 0202 	orrlt.w	r2, r2, #2
 8020a9e:	9307      	strge	r3, [sp, #28]
 8020aa0:	9307      	strlt	r3, [sp, #28]
 8020aa2:	bfb8      	it	lt
 8020aa4:	9204      	strlt	r2, [sp, #16]
 8020aa6:	7823      	ldrb	r3, [r4, #0]
 8020aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8020aaa:	d10c      	bne.n	8020ac6 <_vfiprintf_r+0x176>
 8020aac:	7863      	ldrb	r3, [r4, #1]
 8020aae:	2b2a      	cmp	r3, #42	; 0x2a
 8020ab0:	d135      	bne.n	8020b1e <_vfiprintf_r+0x1ce>
 8020ab2:	9b03      	ldr	r3, [sp, #12]
 8020ab4:	1d1a      	adds	r2, r3, #4
 8020ab6:	681b      	ldr	r3, [r3, #0]
 8020ab8:	9203      	str	r2, [sp, #12]
 8020aba:	2b00      	cmp	r3, #0
 8020abc:	bfb8      	it	lt
 8020abe:	f04f 33ff 	movlt.w	r3, #4294967295
 8020ac2:	3402      	adds	r4, #2
 8020ac4:	9305      	str	r3, [sp, #20]
 8020ac6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020bac <_vfiprintf_r+0x25c>
 8020aca:	7821      	ldrb	r1, [r4, #0]
 8020acc:	2203      	movs	r2, #3
 8020ace:	4650      	mov	r0, sl
 8020ad0:	f7df fc26 	bl	8000320 <memchr>
 8020ad4:	b140      	cbz	r0, 8020ae8 <_vfiprintf_r+0x198>
 8020ad6:	2340      	movs	r3, #64	; 0x40
 8020ad8:	eba0 000a 	sub.w	r0, r0, sl
 8020adc:	fa03 f000 	lsl.w	r0, r3, r0
 8020ae0:	9b04      	ldr	r3, [sp, #16]
 8020ae2:	4303      	orrs	r3, r0
 8020ae4:	3401      	adds	r4, #1
 8020ae6:	9304      	str	r3, [sp, #16]
 8020ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020aec:	482c      	ldr	r0, [pc, #176]	; (8020ba0 <_vfiprintf_r+0x250>)
 8020aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020af2:	2206      	movs	r2, #6
 8020af4:	f7df fc14 	bl	8000320 <memchr>
 8020af8:	2800      	cmp	r0, #0
 8020afa:	d03f      	beq.n	8020b7c <_vfiprintf_r+0x22c>
 8020afc:	4b29      	ldr	r3, [pc, #164]	; (8020ba4 <_vfiprintf_r+0x254>)
 8020afe:	bb1b      	cbnz	r3, 8020b48 <_vfiprintf_r+0x1f8>
 8020b00:	9b03      	ldr	r3, [sp, #12]
 8020b02:	3307      	adds	r3, #7
 8020b04:	f023 0307 	bic.w	r3, r3, #7
 8020b08:	3308      	adds	r3, #8
 8020b0a:	9303      	str	r3, [sp, #12]
 8020b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b0e:	443b      	add	r3, r7
 8020b10:	9309      	str	r3, [sp, #36]	; 0x24
 8020b12:	e767      	b.n	80209e4 <_vfiprintf_r+0x94>
 8020b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8020b18:	460c      	mov	r4, r1
 8020b1a:	2001      	movs	r0, #1
 8020b1c:	e7a5      	b.n	8020a6a <_vfiprintf_r+0x11a>
 8020b1e:	2300      	movs	r3, #0
 8020b20:	3401      	adds	r4, #1
 8020b22:	9305      	str	r3, [sp, #20]
 8020b24:	4619      	mov	r1, r3
 8020b26:	f04f 0c0a 	mov.w	ip, #10
 8020b2a:	4620      	mov	r0, r4
 8020b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020b30:	3a30      	subs	r2, #48	; 0x30
 8020b32:	2a09      	cmp	r2, #9
 8020b34:	d903      	bls.n	8020b3e <_vfiprintf_r+0x1ee>
 8020b36:	2b00      	cmp	r3, #0
 8020b38:	d0c5      	beq.n	8020ac6 <_vfiprintf_r+0x176>
 8020b3a:	9105      	str	r1, [sp, #20]
 8020b3c:	e7c3      	b.n	8020ac6 <_vfiprintf_r+0x176>
 8020b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8020b42:	4604      	mov	r4, r0
 8020b44:	2301      	movs	r3, #1
 8020b46:	e7f0      	b.n	8020b2a <_vfiprintf_r+0x1da>
 8020b48:	ab03      	add	r3, sp, #12
 8020b4a:	9300      	str	r3, [sp, #0]
 8020b4c:	462a      	mov	r2, r5
 8020b4e:	4b16      	ldr	r3, [pc, #88]	; (8020ba8 <_vfiprintf_r+0x258>)
 8020b50:	a904      	add	r1, sp, #16
 8020b52:	4630      	mov	r0, r6
 8020b54:	f3af 8000 	nop.w
 8020b58:	4607      	mov	r7, r0
 8020b5a:	1c78      	adds	r0, r7, #1
 8020b5c:	d1d6      	bne.n	8020b0c <_vfiprintf_r+0x1bc>
 8020b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020b60:	07d9      	lsls	r1, r3, #31
 8020b62:	d405      	bmi.n	8020b70 <_vfiprintf_r+0x220>
 8020b64:	89ab      	ldrh	r3, [r5, #12]
 8020b66:	059a      	lsls	r2, r3, #22
 8020b68:	d402      	bmi.n	8020b70 <_vfiprintf_r+0x220>
 8020b6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020b6c:	f7ff fdaf 	bl	80206ce <__retarget_lock_release_recursive>
 8020b70:	89ab      	ldrh	r3, [r5, #12]
 8020b72:	065b      	lsls	r3, r3, #25
 8020b74:	f53f af12 	bmi.w	802099c <_vfiprintf_r+0x4c>
 8020b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020b7a:	e711      	b.n	80209a0 <_vfiprintf_r+0x50>
 8020b7c:	ab03      	add	r3, sp, #12
 8020b7e:	9300      	str	r3, [sp, #0]
 8020b80:	462a      	mov	r2, r5
 8020b82:	4b09      	ldr	r3, [pc, #36]	; (8020ba8 <_vfiprintf_r+0x258>)
 8020b84:	a904      	add	r1, sp, #16
 8020b86:	4630      	mov	r0, r6
 8020b88:	f000 f880 	bl	8020c8c <_printf_i>
 8020b8c:	e7e4      	b.n	8020b58 <_vfiprintf_r+0x208>
 8020b8e:	bf00      	nop
 8020b90:	08023d60 	.word	0x08023d60
 8020b94:	08023d80 	.word	0x08023d80
 8020b98:	08023d40 	.word	0x08023d40
 8020b9c:	08023da4 	.word	0x08023da4
 8020ba0:	08023dae 	.word	0x08023dae
 8020ba4:	00000000 	.word	0x00000000
 8020ba8:	0802092b 	.word	0x0802092b
 8020bac:	08023daa 	.word	0x08023daa

08020bb0 <_printf_common>:
 8020bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bb4:	4616      	mov	r6, r2
 8020bb6:	4699      	mov	r9, r3
 8020bb8:	688a      	ldr	r2, [r1, #8]
 8020bba:	690b      	ldr	r3, [r1, #16]
 8020bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020bc0:	4293      	cmp	r3, r2
 8020bc2:	bfb8      	it	lt
 8020bc4:	4613      	movlt	r3, r2
 8020bc6:	6033      	str	r3, [r6, #0]
 8020bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020bcc:	4607      	mov	r7, r0
 8020bce:	460c      	mov	r4, r1
 8020bd0:	b10a      	cbz	r2, 8020bd6 <_printf_common+0x26>
 8020bd2:	3301      	adds	r3, #1
 8020bd4:	6033      	str	r3, [r6, #0]
 8020bd6:	6823      	ldr	r3, [r4, #0]
 8020bd8:	0699      	lsls	r1, r3, #26
 8020bda:	bf42      	ittt	mi
 8020bdc:	6833      	ldrmi	r3, [r6, #0]
 8020bde:	3302      	addmi	r3, #2
 8020be0:	6033      	strmi	r3, [r6, #0]
 8020be2:	6825      	ldr	r5, [r4, #0]
 8020be4:	f015 0506 	ands.w	r5, r5, #6
 8020be8:	d106      	bne.n	8020bf8 <_printf_common+0x48>
 8020bea:	f104 0a19 	add.w	sl, r4, #25
 8020bee:	68e3      	ldr	r3, [r4, #12]
 8020bf0:	6832      	ldr	r2, [r6, #0]
 8020bf2:	1a9b      	subs	r3, r3, r2
 8020bf4:	42ab      	cmp	r3, r5
 8020bf6:	dc26      	bgt.n	8020c46 <_printf_common+0x96>
 8020bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020bfc:	1e13      	subs	r3, r2, #0
 8020bfe:	6822      	ldr	r2, [r4, #0]
 8020c00:	bf18      	it	ne
 8020c02:	2301      	movne	r3, #1
 8020c04:	0692      	lsls	r2, r2, #26
 8020c06:	d42b      	bmi.n	8020c60 <_printf_common+0xb0>
 8020c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020c0c:	4649      	mov	r1, r9
 8020c0e:	4638      	mov	r0, r7
 8020c10:	47c0      	blx	r8
 8020c12:	3001      	adds	r0, #1
 8020c14:	d01e      	beq.n	8020c54 <_printf_common+0xa4>
 8020c16:	6823      	ldr	r3, [r4, #0]
 8020c18:	68e5      	ldr	r5, [r4, #12]
 8020c1a:	6832      	ldr	r2, [r6, #0]
 8020c1c:	f003 0306 	and.w	r3, r3, #6
 8020c20:	2b04      	cmp	r3, #4
 8020c22:	bf08      	it	eq
 8020c24:	1aad      	subeq	r5, r5, r2
 8020c26:	68a3      	ldr	r3, [r4, #8]
 8020c28:	6922      	ldr	r2, [r4, #16]
 8020c2a:	bf0c      	ite	eq
 8020c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020c30:	2500      	movne	r5, #0
 8020c32:	4293      	cmp	r3, r2
 8020c34:	bfc4      	itt	gt
 8020c36:	1a9b      	subgt	r3, r3, r2
 8020c38:	18ed      	addgt	r5, r5, r3
 8020c3a:	2600      	movs	r6, #0
 8020c3c:	341a      	adds	r4, #26
 8020c3e:	42b5      	cmp	r5, r6
 8020c40:	d11a      	bne.n	8020c78 <_printf_common+0xc8>
 8020c42:	2000      	movs	r0, #0
 8020c44:	e008      	b.n	8020c58 <_printf_common+0xa8>
 8020c46:	2301      	movs	r3, #1
 8020c48:	4652      	mov	r2, sl
 8020c4a:	4649      	mov	r1, r9
 8020c4c:	4638      	mov	r0, r7
 8020c4e:	47c0      	blx	r8
 8020c50:	3001      	adds	r0, #1
 8020c52:	d103      	bne.n	8020c5c <_printf_common+0xac>
 8020c54:	f04f 30ff 	mov.w	r0, #4294967295
 8020c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c5c:	3501      	adds	r5, #1
 8020c5e:	e7c6      	b.n	8020bee <_printf_common+0x3e>
 8020c60:	18e1      	adds	r1, r4, r3
 8020c62:	1c5a      	adds	r2, r3, #1
 8020c64:	2030      	movs	r0, #48	; 0x30
 8020c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020c6a:	4422      	add	r2, r4
 8020c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020c74:	3302      	adds	r3, #2
 8020c76:	e7c7      	b.n	8020c08 <_printf_common+0x58>
 8020c78:	2301      	movs	r3, #1
 8020c7a:	4622      	mov	r2, r4
 8020c7c:	4649      	mov	r1, r9
 8020c7e:	4638      	mov	r0, r7
 8020c80:	47c0      	blx	r8
 8020c82:	3001      	adds	r0, #1
 8020c84:	d0e6      	beq.n	8020c54 <_printf_common+0xa4>
 8020c86:	3601      	adds	r6, #1
 8020c88:	e7d9      	b.n	8020c3e <_printf_common+0x8e>
	...

08020c8c <_printf_i>:
 8020c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020c90:	7e0f      	ldrb	r7, [r1, #24]
 8020c92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020c94:	2f78      	cmp	r7, #120	; 0x78
 8020c96:	4691      	mov	r9, r2
 8020c98:	4680      	mov	r8, r0
 8020c9a:	460c      	mov	r4, r1
 8020c9c:	469a      	mov	sl, r3
 8020c9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020ca2:	d807      	bhi.n	8020cb4 <_printf_i+0x28>
 8020ca4:	2f62      	cmp	r7, #98	; 0x62
 8020ca6:	d80a      	bhi.n	8020cbe <_printf_i+0x32>
 8020ca8:	2f00      	cmp	r7, #0
 8020caa:	f000 80d8 	beq.w	8020e5e <_printf_i+0x1d2>
 8020cae:	2f58      	cmp	r7, #88	; 0x58
 8020cb0:	f000 80a3 	beq.w	8020dfa <_printf_i+0x16e>
 8020cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020cbc:	e03a      	b.n	8020d34 <_printf_i+0xa8>
 8020cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020cc2:	2b15      	cmp	r3, #21
 8020cc4:	d8f6      	bhi.n	8020cb4 <_printf_i+0x28>
 8020cc6:	a101      	add	r1, pc, #4	; (adr r1, 8020ccc <_printf_i+0x40>)
 8020cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020ccc:	08020d25 	.word	0x08020d25
 8020cd0:	08020d39 	.word	0x08020d39
 8020cd4:	08020cb5 	.word	0x08020cb5
 8020cd8:	08020cb5 	.word	0x08020cb5
 8020cdc:	08020cb5 	.word	0x08020cb5
 8020ce0:	08020cb5 	.word	0x08020cb5
 8020ce4:	08020d39 	.word	0x08020d39
 8020ce8:	08020cb5 	.word	0x08020cb5
 8020cec:	08020cb5 	.word	0x08020cb5
 8020cf0:	08020cb5 	.word	0x08020cb5
 8020cf4:	08020cb5 	.word	0x08020cb5
 8020cf8:	08020e45 	.word	0x08020e45
 8020cfc:	08020d69 	.word	0x08020d69
 8020d00:	08020e27 	.word	0x08020e27
 8020d04:	08020cb5 	.word	0x08020cb5
 8020d08:	08020cb5 	.word	0x08020cb5
 8020d0c:	08020e67 	.word	0x08020e67
 8020d10:	08020cb5 	.word	0x08020cb5
 8020d14:	08020d69 	.word	0x08020d69
 8020d18:	08020cb5 	.word	0x08020cb5
 8020d1c:	08020cb5 	.word	0x08020cb5
 8020d20:	08020e2f 	.word	0x08020e2f
 8020d24:	682b      	ldr	r3, [r5, #0]
 8020d26:	1d1a      	adds	r2, r3, #4
 8020d28:	681b      	ldr	r3, [r3, #0]
 8020d2a:	602a      	str	r2, [r5, #0]
 8020d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020d34:	2301      	movs	r3, #1
 8020d36:	e0a3      	b.n	8020e80 <_printf_i+0x1f4>
 8020d38:	6820      	ldr	r0, [r4, #0]
 8020d3a:	6829      	ldr	r1, [r5, #0]
 8020d3c:	0606      	lsls	r6, r0, #24
 8020d3e:	f101 0304 	add.w	r3, r1, #4
 8020d42:	d50a      	bpl.n	8020d5a <_printf_i+0xce>
 8020d44:	680e      	ldr	r6, [r1, #0]
 8020d46:	602b      	str	r3, [r5, #0]
 8020d48:	2e00      	cmp	r6, #0
 8020d4a:	da03      	bge.n	8020d54 <_printf_i+0xc8>
 8020d4c:	232d      	movs	r3, #45	; 0x2d
 8020d4e:	4276      	negs	r6, r6
 8020d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020d54:	485e      	ldr	r0, [pc, #376]	; (8020ed0 <_printf_i+0x244>)
 8020d56:	230a      	movs	r3, #10
 8020d58:	e019      	b.n	8020d8e <_printf_i+0x102>
 8020d5a:	680e      	ldr	r6, [r1, #0]
 8020d5c:	602b      	str	r3, [r5, #0]
 8020d5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020d62:	bf18      	it	ne
 8020d64:	b236      	sxthne	r6, r6
 8020d66:	e7ef      	b.n	8020d48 <_printf_i+0xbc>
 8020d68:	682b      	ldr	r3, [r5, #0]
 8020d6a:	6820      	ldr	r0, [r4, #0]
 8020d6c:	1d19      	adds	r1, r3, #4
 8020d6e:	6029      	str	r1, [r5, #0]
 8020d70:	0601      	lsls	r1, r0, #24
 8020d72:	d501      	bpl.n	8020d78 <_printf_i+0xec>
 8020d74:	681e      	ldr	r6, [r3, #0]
 8020d76:	e002      	b.n	8020d7e <_printf_i+0xf2>
 8020d78:	0646      	lsls	r6, r0, #25
 8020d7a:	d5fb      	bpl.n	8020d74 <_printf_i+0xe8>
 8020d7c:	881e      	ldrh	r6, [r3, #0]
 8020d7e:	4854      	ldr	r0, [pc, #336]	; (8020ed0 <_printf_i+0x244>)
 8020d80:	2f6f      	cmp	r7, #111	; 0x6f
 8020d82:	bf0c      	ite	eq
 8020d84:	2308      	moveq	r3, #8
 8020d86:	230a      	movne	r3, #10
 8020d88:	2100      	movs	r1, #0
 8020d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020d8e:	6865      	ldr	r5, [r4, #4]
 8020d90:	60a5      	str	r5, [r4, #8]
 8020d92:	2d00      	cmp	r5, #0
 8020d94:	bfa2      	ittt	ge
 8020d96:	6821      	ldrge	r1, [r4, #0]
 8020d98:	f021 0104 	bicge.w	r1, r1, #4
 8020d9c:	6021      	strge	r1, [r4, #0]
 8020d9e:	b90e      	cbnz	r6, 8020da4 <_printf_i+0x118>
 8020da0:	2d00      	cmp	r5, #0
 8020da2:	d04d      	beq.n	8020e40 <_printf_i+0x1b4>
 8020da4:	4615      	mov	r5, r2
 8020da6:	fbb6 f1f3 	udiv	r1, r6, r3
 8020daa:	fb03 6711 	mls	r7, r3, r1, r6
 8020dae:	5dc7      	ldrb	r7, [r0, r7]
 8020db0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020db4:	4637      	mov	r7, r6
 8020db6:	42bb      	cmp	r3, r7
 8020db8:	460e      	mov	r6, r1
 8020dba:	d9f4      	bls.n	8020da6 <_printf_i+0x11a>
 8020dbc:	2b08      	cmp	r3, #8
 8020dbe:	d10b      	bne.n	8020dd8 <_printf_i+0x14c>
 8020dc0:	6823      	ldr	r3, [r4, #0]
 8020dc2:	07de      	lsls	r6, r3, #31
 8020dc4:	d508      	bpl.n	8020dd8 <_printf_i+0x14c>
 8020dc6:	6923      	ldr	r3, [r4, #16]
 8020dc8:	6861      	ldr	r1, [r4, #4]
 8020dca:	4299      	cmp	r1, r3
 8020dcc:	bfde      	ittt	le
 8020dce:	2330      	movle	r3, #48	; 0x30
 8020dd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020dd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020dd8:	1b52      	subs	r2, r2, r5
 8020dda:	6122      	str	r2, [r4, #16]
 8020ddc:	f8cd a000 	str.w	sl, [sp]
 8020de0:	464b      	mov	r3, r9
 8020de2:	aa03      	add	r2, sp, #12
 8020de4:	4621      	mov	r1, r4
 8020de6:	4640      	mov	r0, r8
 8020de8:	f7ff fee2 	bl	8020bb0 <_printf_common>
 8020dec:	3001      	adds	r0, #1
 8020dee:	d14c      	bne.n	8020e8a <_printf_i+0x1fe>
 8020df0:	f04f 30ff 	mov.w	r0, #4294967295
 8020df4:	b004      	add	sp, #16
 8020df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020dfa:	4835      	ldr	r0, [pc, #212]	; (8020ed0 <_printf_i+0x244>)
 8020dfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020e00:	6829      	ldr	r1, [r5, #0]
 8020e02:	6823      	ldr	r3, [r4, #0]
 8020e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8020e08:	6029      	str	r1, [r5, #0]
 8020e0a:	061d      	lsls	r5, r3, #24
 8020e0c:	d514      	bpl.n	8020e38 <_printf_i+0x1ac>
 8020e0e:	07df      	lsls	r7, r3, #31
 8020e10:	bf44      	itt	mi
 8020e12:	f043 0320 	orrmi.w	r3, r3, #32
 8020e16:	6023      	strmi	r3, [r4, #0]
 8020e18:	b91e      	cbnz	r6, 8020e22 <_printf_i+0x196>
 8020e1a:	6823      	ldr	r3, [r4, #0]
 8020e1c:	f023 0320 	bic.w	r3, r3, #32
 8020e20:	6023      	str	r3, [r4, #0]
 8020e22:	2310      	movs	r3, #16
 8020e24:	e7b0      	b.n	8020d88 <_printf_i+0xfc>
 8020e26:	6823      	ldr	r3, [r4, #0]
 8020e28:	f043 0320 	orr.w	r3, r3, #32
 8020e2c:	6023      	str	r3, [r4, #0]
 8020e2e:	2378      	movs	r3, #120	; 0x78
 8020e30:	4828      	ldr	r0, [pc, #160]	; (8020ed4 <_printf_i+0x248>)
 8020e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020e36:	e7e3      	b.n	8020e00 <_printf_i+0x174>
 8020e38:	0659      	lsls	r1, r3, #25
 8020e3a:	bf48      	it	mi
 8020e3c:	b2b6      	uxthmi	r6, r6
 8020e3e:	e7e6      	b.n	8020e0e <_printf_i+0x182>
 8020e40:	4615      	mov	r5, r2
 8020e42:	e7bb      	b.n	8020dbc <_printf_i+0x130>
 8020e44:	682b      	ldr	r3, [r5, #0]
 8020e46:	6826      	ldr	r6, [r4, #0]
 8020e48:	6961      	ldr	r1, [r4, #20]
 8020e4a:	1d18      	adds	r0, r3, #4
 8020e4c:	6028      	str	r0, [r5, #0]
 8020e4e:	0635      	lsls	r5, r6, #24
 8020e50:	681b      	ldr	r3, [r3, #0]
 8020e52:	d501      	bpl.n	8020e58 <_printf_i+0x1cc>
 8020e54:	6019      	str	r1, [r3, #0]
 8020e56:	e002      	b.n	8020e5e <_printf_i+0x1d2>
 8020e58:	0670      	lsls	r0, r6, #25
 8020e5a:	d5fb      	bpl.n	8020e54 <_printf_i+0x1c8>
 8020e5c:	8019      	strh	r1, [r3, #0]
 8020e5e:	2300      	movs	r3, #0
 8020e60:	6123      	str	r3, [r4, #16]
 8020e62:	4615      	mov	r5, r2
 8020e64:	e7ba      	b.n	8020ddc <_printf_i+0x150>
 8020e66:	682b      	ldr	r3, [r5, #0]
 8020e68:	1d1a      	adds	r2, r3, #4
 8020e6a:	602a      	str	r2, [r5, #0]
 8020e6c:	681d      	ldr	r5, [r3, #0]
 8020e6e:	6862      	ldr	r2, [r4, #4]
 8020e70:	2100      	movs	r1, #0
 8020e72:	4628      	mov	r0, r5
 8020e74:	f7df fa54 	bl	8000320 <memchr>
 8020e78:	b108      	cbz	r0, 8020e7e <_printf_i+0x1f2>
 8020e7a:	1b40      	subs	r0, r0, r5
 8020e7c:	6060      	str	r0, [r4, #4]
 8020e7e:	6863      	ldr	r3, [r4, #4]
 8020e80:	6123      	str	r3, [r4, #16]
 8020e82:	2300      	movs	r3, #0
 8020e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020e88:	e7a8      	b.n	8020ddc <_printf_i+0x150>
 8020e8a:	6923      	ldr	r3, [r4, #16]
 8020e8c:	462a      	mov	r2, r5
 8020e8e:	4649      	mov	r1, r9
 8020e90:	4640      	mov	r0, r8
 8020e92:	47d0      	blx	sl
 8020e94:	3001      	adds	r0, #1
 8020e96:	d0ab      	beq.n	8020df0 <_printf_i+0x164>
 8020e98:	6823      	ldr	r3, [r4, #0]
 8020e9a:	079b      	lsls	r3, r3, #30
 8020e9c:	d413      	bmi.n	8020ec6 <_printf_i+0x23a>
 8020e9e:	68e0      	ldr	r0, [r4, #12]
 8020ea0:	9b03      	ldr	r3, [sp, #12]
 8020ea2:	4298      	cmp	r0, r3
 8020ea4:	bfb8      	it	lt
 8020ea6:	4618      	movlt	r0, r3
 8020ea8:	e7a4      	b.n	8020df4 <_printf_i+0x168>
 8020eaa:	2301      	movs	r3, #1
 8020eac:	4632      	mov	r2, r6
 8020eae:	4649      	mov	r1, r9
 8020eb0:	4640      	mov	r0, r8
 8020eb2:	47d0      	blx	sl
 8020eb4:	3001      	adds	r0, #1
 8020eb6:	d09b      	beq.n	8020df0 <_printf_i+0x164>
 8020eb8:	3501      	adds	r5, #1
 8020eba:	68e3      	ldr	r3, [r4, #12]
 8020ebc:	9903      	ldr	r1, [sp, #12]
 8020ebe:	1a5b      	subs	r3, r3, r1
 8020ec0:	42ab      	cmp	r3, r5
 8020ec2:	dcf2      	bgt.n	8020eaa <_printf_i+0x21e>
 8020ec4:	e7eb      	b.n	8020e9e <_printf_i+0x212>
 8020ec6:	2500      	movs	r5, #0
 8020ec8:	f104 0619 	add.w	r6, r4, #25
 8020ecc:	e7f5      	b.n	8020eba <_printf_i+0x22e>
 8020ece:	bf00      	nop
 8020ed0:	08023db5 	.word	0x08023db5
 8020ed4:	08023dc6 	.word	0x08023dc6

08020ed8 <cleanup_glue>:
 8020ed8:	b538      	push	{r3, r4, r5, lr}
 8020eda:	460c      	mov	r4, r1
 8020edc:	6809      	ldr	r1, [r1, #0]
 8020ede:	4605      	mov	r5, r0
 8020ee0:	b109      	cbz	r1, 8020ee6 <cleanup_glue+0xe>
 8020ee2:	f7ff fff9 	bl	8020ed8 <cleanup_glue>
 8020ee6:	4621      	mov	r1, r4
 8020ee8:	4628      	mov	r0, r5
 8020eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020eee:	f7ff bc25 	b.w	802073c <_free_r>
	...

08020ef4 <_reclaim_reent>:
 8020ef4:	4b2c      	ldr	r3, [pc, #176]	; (8020fa8 <_reclaim_reent+0xb4>)
 8020ef6:	681b      	ldr	r3, [r3, #0]
 8020ef8:	4283      	cmp	r3, r0
 8020efa:	b570      	push	{r4, r5, r6, lr}
 8020efc:	4604      	mov	r4, r0
 8020efe:	d051      	beq.n	8020fa4 <_reclaim_reent+0xb0>
 8020f00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8020f02:	b143      	cbz	r3, 8020f16 <_reclaim_reent+0x22>
 8020f04:	68db      	ldr	r3, [r3, #12]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d14a      	bne.n	8020fa0 <_reclaim_reent+0xac>
 8020f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f0c:	6819      	ldr	r1, [r3, #0]
 8020f0e:	b111      	cbz	r1, 8020f16 <_reclaim_reent+0x22>
 8020f10:	4620      	mov	r0, r4
 8020f12:	f7ff fc13 	bl	802073c <_free_r>
 8020f16:	6961      	ldr	r1, [r4, #20]
 8020f18:	b111      	cbz	r1, 8020f20 <_reclaim_reent+0x2c>
 8020f1a:	4620      	mov	r0, r4
 8020f1c:	f7ff fc0e 	bl	802073c <_free_r>
 8020f20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8020f22:	b111      	cbz	r1, 8020f2a <_reclaim_reent+0x36>
 8020f24:	4620      	mov	r0, r4
 8020f26:	f7ff fc09 	bl	802073c <_free_r>
 8020f2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020f2c:	b111      	cbz	r1, 8020f34 <_reclaim_reent+0x40>
 8020f2e:	4620      	mov	r0, r4
 8020f30:	f7ff fc04 	bl	802073c <_free_r>
 8020f34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8020f36:	b111      	cbz	r1, 8020f3e <_reclaim_reent+0x4a>
 8020f38:	4620      	mov	r0, r4
 8020f3a:	f7ff fbff 	bl	802073c <_free_r>
 8020f3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020f40:	b111      	cbz	r1, 8020f48 <_reclaim_reent+0x54>
 8020f42:	4620      	mov	r0, r4
 8020f44:	f7ff fbfa 	bl	802073c <_free_r>
 8020f48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8020f4a:	b111      	cbz	r1, 8020f52 <_reclaim_reent+0x5e>
 8020f4c:	4620      	mov	r0, r4
 8020f4e:	f7ff fbf5 	bl	802073c <_free_r>
 8020f52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8020f54:	b111      	cbz	r1, 8020f5c <_reclaim_reent+0x68>
 8020f56:	4620      	mov	r0, r4
 8020f58:	f7ff fbf0 	bl	802073c <_free_r>
 8020f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020f5e:	b111      	cbz	r1, 8020f66 <_reclaim_reent+0x72>
 8020f60:	4620      	mov	r0, r4
 8020f62:	f7ff fbeb 	bl	802073c <_free_r>
 8020f66:	69a3      	ldr	r3, [r4, #24]
 8020f68:	b1e3      	cbz	r3, 8020fa4 <_reclaim_reent+0xb0>
 8020f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020f6c:	4620      	mov	r0, r4
 8020f6e:	4798      	blx	r3
 8020f70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8020f72:	b1b9      	cbz	r1, 8020fa4 <_reclaim_reent+0xb0>
 8020f74:	4620      	mov	r0, r4
 8020f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020f7a:	f7ff bfad 	b.w	8020ed8 <cleanup_glue>
 8020f7e:	5949      	ldr	r1, [r1, r5]
 8020f80:	b941      	cbnz	r1, 8020f94 <_reclaim_reent+0xa0>
 8020f82:	3504      	adds	r5, #4
 8020f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f86:	2d80      	cmp	r5, #128	; 0x80
 8020f88:	68d9      	ldr	r1, [r3, #12]
 8020f8a:	d1f8      	bne.n	8020f7e <_reclaim_reent+0x8a>
 8020f8c:	4620      	mov	r0, r4
 8020f8e:	f7ff fbd5 	bl	802073c <_free_r>
 8020f92:	e7ba      	b.n	8020f0a <_reclaim_reent+0x16>
 8020f94:	680e      	ldr	r6, [r1, #0]
 8020f96:	4620      	mov	r0, r4
 8020f98:	f7ff fbd0 	bl	802073c <_free_r>
 8020f9c:	4631      	mov	r1, r6
 8020f9e:	e7ef      	b.n	8020f80 <_reclaim_reent+0x8c>
 8020fa0:	2500      	movs	r5, #0
 8020fa2:	e7ef      	b.n	8020f84 <_reclaim_reent+0x90>
 8020fa4:	bd70      	pop	{r4, r5, r6, pc}
 8020fa6:	bf00      	nop
 8020fa8:	240000dc 	.word	0x240000dc

08020fac <_sbrk_r>:
 8020fac:	b538      	push	{r3, r4, r5, lr}
 8020fae:	4d06      	ldr	r5, [pc, #24]	; (8020fc8 <_sbrk_r+0x1c>)
 8020fb0:	2300      	movs	r3, #0
 8020fb2:	4604      	mov	r4, r0
 8020fb4:	4608      	mov	r0, r1
 8020fb6:	602b      	str	r3, [r5, #0]
 8020fb8:	f7e2 f9fe 	bl	80033b8 <_sbrk>
 8020fbc:	1c43      	adds	r3, r0, #1
 8020fbe:	d102      	bne.n	8020fc6 <_sbrk_r+0x1a>
 8020fc0:	682b      	ldr	r3, [r5, #0]
 8020fc2:	b103      	cbz	r3, 8020fc6 <_sbrk_r+0x1a>
 8020fc4:	6023      	str	r3, [r4, #0]
 8020fc6:	bd38      	pop	{r3, r4, r5, pc}
 8020fc8:	2400c9e4 	.word	0x2400c9e4

08020fcc <_raise_r>:
 8020fcc:	291f      	cmp	r1, #31
 8020fce:	b538      	push	{r3, r4, r5, lr}
 8020fd0:	4604      	mov	r4, r0
 8020fd2:	460d      	mov	r5, r1
 8020fd4:	d904      	bls.n	8020fe0 <_raise_r+0x14>
 8020fd6:	2316      	movs	r3, #22
 8020fd8:	6003      	str	r3, [r0, #0]
 8020fda:	f04f 30ff 	mov.w	r0, #4294967295
 8020fde:	bd38      	pop	{r3, r4, r5, pc}
 8020fe0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020fe2:	b112      	cbz	r2, 8020fea <_raise_r+0x1e>
 8020fe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020fe8:	b94b      	cbnz	r3, 8020ffe <_raise_r+0x32>
 8020fea:	4620      	mov	r0, r4
 8020fec:	f000 f830 	bl	8021050 <_getpid_r>
 8020ff0:	462a      	mov	r2, r5
 8020ff2:	4601      	mov	r1, r0
 8020ff4:	4620      	mov	r0, r4
 8020ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020ffa:	f000 b817 	b.w	802102c <_kill_r>
 8020ffe:	2b01      	cmp	r3, #1
 8021000:	d00a      	beq.n	8021018 <_raise_r+0x4c>
 8021002:	1c59      	adds	r1, r3, #1
 8021004:	d103      	bne.n	802100e <_raise_r+0x42>
 8021006:	2316      	movs	r3, #22
 8021008:	6003      	str	r3, [r0, #0]
 802100a:	2001      	movs	r0, #1
 802100c:	e7e7      	b.n	8020fde <_raise_r+0x12>
 802100e:	2400      	movs	r4, #0
 8021010:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021014:	4628      	mov	r0, r5
 8021016:	4798      	blx	r3
 8021018:	2000      	movs	r0, #0
 802101a:	e7e0      	b.n	8020fde <_raise_r+0x12>

0802101c <raise>:
 802101c:	4b02      	ldr	r3, [pc, #8]	; (8021028 <raise+0xc>)
 802101e:	4601      	mov	r1, r0
 8021020:	6818      	ldr	r0, [r3, #0]
 8021022:	f7ff bfd3 	b.w	8020fcc <_raise_r>
 8021026:	bf00      	nop
 8021028:	240000dc 	.word	0x240000dc

0802102c <_kill_r>:
 802102c:	b538      	push	{r3, r4, r5, lr}
 802102e:	4d07      	ldr	r5, [pc, #28]	; (802104c <_kill_r+0x20>)
 8021030:	2300      	movs	r3, #0
 8021032:	4604      	mov	r4, r0
 8021034:	4608      	mov	r0, r1
 8021036:	4611      	mov	r1, r2
 8021038:	602b      	str	r3, [r5, #0]
 802103a:	f7e2 f985 	bl	8003348 <_kill>
 802103e:	1c43      	adds	r3, r0, #1
 8021040:	d102      	bne.n	8021048 <_kill_r+0x1c>
 8021042:	682b      	ldr	r3, [r5, #0]
 8021044:	b103      	cbz	r3, 8021048 <_kill_r+0x1c>
 8021046:	6023      	str	r3, [r4, #0]
 8021048:	bd38      	pop	{r3, r4, r5, pc}
 802104a:	bf00      	nop
 802104c:	2400c9e4 	.word	0x2400c9e4

08021050 <_getpid_r>:
 8021050:	f7e2 b978 	b.w	8003344 <_getpid>

08021054 <siprintf>:
 8021054:	b40e      	push	{r1, r2, r3}
 8021056:	b500      	push	{lr}
 8021058:	b09c      	sub	sp, #112	; 0x70
 802105a:	ab1d      	add	r3, sp, #116	; 0x74
 802105c:	9002      	str	r0, [sp, #8]
 802105e:	9006      	str	r0, [sp, #24]
 8021060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021064:	4809      	ldr	r0, [pc, #36]	; (802108c <siprintf+0x38>)
 8021066:	9107      	str	r1, [sp, #28]
 8021068:	9104      	str	r1, [sp, #16]
 802106a:	4909      	ldr	r1, [pc, #36]	; (8021090 <siprintf+0x3c>)
 802106c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021070:	9105      	str	r1, [sp, #20]
 8021072:	6800      	ldr	r0, [r0, #0]
 8021074:	9301      	str	r3, [sp, #4]
 8021076:	a902      	add	r1, sp, #8
 8021078:	f000 fbe6 	bl	8021848 <_svfiprintf_r>
 802107c:	9b02      	ldr	r3, [sp, #8]
 802107e:	2200      	movs	r2, #0
 8021080:	701a      	strb	r2, [r3, #0]
 8021082:	b01c      	add	sp, #112	; 0x70
 8021084:	f85d eb04 	ldr.w	lr, [sp], #4
 8021088:	b003      	add	sp, #12
 802108a:	4770      	bx	lr
 802108c:	240000dc 	.word	0x240000dc
 8021090:	ffff0208 	.word	0xffff0208

08021094 <__sread>:
 8021094:	b510      	push	{r4, lr}
 8021096:	460c      	mov	r4, r1
 8021098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802109c:	f000 fcd4 	bl	8021a48 <_read_r>
 80210a0:	2800      	cmp	r0, #0
 80210a2:	bfab      	itete	ge
 80210a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80210a6:	89a3      	ldrhlt	r3, [r4, #12]
 80210a8:	181b      	addge	r3, r3, r0
 80210aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80210ae:	bfac      	ite	ge
 80210b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80210b2:	81a3      	strhlt	r3, [r4, #12]
 80210b4:	bd10      	pop	{r4, pc}

080210b6 <__swrite>:
 80210b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210ba:	461f      	mov	r7, r3
 80210bc:	898b      	ldrh	r3, [r1, #12]
 80210be:	05db      	lsls	r3, r3, #23
 80210c0:	4605      	mov	r5, r0
 80210c2:	460c      	mov	r4, r1
 80210c4:	4616      	mov	r6, r2
 80210c6:	d505      	bpl.n	80210d4 <__swrite+0x1e>
 80210c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80210cc:	2302      	movs	r3, #2
 80210ce:	2200      	movs	r2, #0
 80210d0:	f000 fa92 	bl	80215f8 <_lseek_r>
 80210d4:	89a3      	ldrh	r3, [r4, #12]
 80210d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80210da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80210de:	81a3      	strh	r3, [r4, #12]
 80210e0:	4632      	mov	r2, r6
 80210e2:	463b      	mov	r3, r7
 80210e4:	4628      	mov	r0, r5
 80210e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80210ea:	f000 b8d1 	b.w	8021290 <_write_r>

080210ee <__sseek>:
 80210ee:	b510      	push	{r4, lr}
 80210f0:	460c      	mov	r4, r1
 80210f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80210f6:	f000 fa7f 	bl	80215f8 <_lseek_r>
 80210fa:	1c43      	adds	r3, r0, #1
 80210fc:	89a3      	ldrh	r3, [r4, #12]
 80210fe:	bf15      	itete	ne
 8021100:	6560      	strne	r0, [r4, #84]	; 0x54
 8021102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802110a:	81a3      	strheq	r3, [r4, #12]
 802110c:	bf18      	it	ne
 802110e:	81a3      	strhne	r3, [r4, #12]
 8021110:	bd10      	pop	{r4, pc}

08021112 <__sclose>:
 8021112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021116:	f000 b99d 	b.w	8021454 <_close_r>

0802111a <strncmp>:
 802111a:	b510      	push	{r4, lr}
 802111c:	b17a      	cbz	r2, 802113e <strncmp+0x24>
 802111e:	4603      	mov	r3, r0
 8021120:	3901      	subs	r1, #1
 8021122:	1884      	adds	r4, r0, r2
 8021124:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021128:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802112c:	4290      	cmp	r0, r2
 802112e:	d101      	bne.n	8021134 <strncmp+0x1a>
 8021130:	42a3      	cmp	r3, r4
 8021132:	d101      	bne.n	8021138 <strncmp+0x1e>
 8021134:	1a80      	subs	r0, r0, r2
 8021136:	bd10      	pop	{r4, pc}
 8021138:	2800      	cmp	r0, #0
 802113a:	d1f3      	bne.n	8021124 <strncmp+0xa>
 802113c:	e7fa      	b.n	8021134 <strncmp+0x1a>
 802113e:	4610      	mov	r0, r2
 8021140:	e7f9      	b.n	8021136 <strncmp+0x1c>

08021142 <strncpy>:
 8021142:	b510      	push	{r4, lr}
 8021144:	3901      	subs	r1, #1
 8021146:	4603      	mov	r3, r0
 8021148:	b132      	cbz	r2, 8021158 <strncpy+0x16>
 802114a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802114e:	f803 4b01 	strb.w	r4, [r3], #1
 8021152:	3a01      	subs	r2, #1
 8021154:	2c00      	cmp	r4, #0
 8021156:	d1f7      	bne.n	8021148 <strncpy+0x6>
 8021158:	441a      	add	r2, r3
 802115a:	2100      	movs	r1, #0
 802115c:	4293      	cmp	r3, r2
 802115e:	d100      	bne.n	8021162 <strncpy+0x20>
 8021160:	bd10      	pop	{r4, pc}
 8021162:	f803 1b01 	strb.w	r1, [r3], #1
 8021166:	e7f9      	b.n	802115c <strncpy+0x1a>

08021168 <strstr>:
 8021168:	780a      	ldrb	r2, [r1, #0]
 802116a:	b570      	push	{r4, r5, r6, lr}
 802116c:	b96a      	cbnz	r2, 802118a <strstr+0x22>
 802116e:	bd70      	pop	{r4, r5, r6, pc}
 8021170:	429a      	cmp	r2, r3
 8021172:	d109      	bne.n	8021188 <strstr+0x20>
 8021174:	460c      	mov	r4, r1
 8021176:	4605      	mov	r5, r0
 8021178:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802117c:	2b00      	cmp	r3, #0
 802117e:	d0f6      	beq.n	802116e <strstr+0x6>
 8021180:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021184:	429e      	cmp	r6, r3
 8021186:	d0f7      	beq.n	8021178 <strstr+0x10>
 8021188:	3001      	adds	r0, #1
 802118a:	7803      	ldrb	r3, [r0, #0]
 802118c:	2b00      	cmp	r3, #0
 802118e:	d1ef      	bne.n	8021170 <strstr+0x8>
 8021190:	4618      	mov	r0, r3
 8021192:	e7ec      	b.n	802116e <strstr+0x6>

08021194 <__strtok_r>:
 8021194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021196:	b908      	cbnz	r0, 802119c <__strtok_r+0x8>
 8021198:	6810      	ldr	r0, [r2, #0]
 802119a:	b188      	cbz	r0, 80211c0 <__strtok_r+0x2c>
 802119c:	4604      	mov	r4, r0
 802119e:	4620      	mov	r0, r4
 80211a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80211a4:	460f      	mov	r7, r1
 80211a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80211aa:	b91e      	cbnz	r6, 80211b4 <__strtok_r+0x20>
 80211ac:	b965      	cbnz	r5, 80211c8 <__strtok_r+0x34>
 80211ae:	6015      	str	r5, [r2, #0]
 80211b0:	4628      	mov	r0, r5
 80211b2:	e005      	b.n	80211c0 <__strtok_r+0x2c>
 80211b4:	42b5      	cmp	r5, r6
 80211b6:	d1f6      	bne.n	80211a6 <__strtok_r+0x12>
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	d1f0      	bne.n	802119e <__strtok_r+0xa>
 80211bc:	6014      	str	r4, [r2, #0]
 80211be:	7003      	strb	r3, [r0, #0]
 80211c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211c2:	461c      	mov	r4, r3
 80211c4:	e00c      	b.n	80211e0 <__strtok_r+0x4c>
 80211c6:	b915      	cbnz	r5, 80211ce <__strtok_r+0x3a>
 80211c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80211cc:	460e      	mov	r6, r1
 80211ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80211d2:	42ab      	cmp	r3, r5
 80211d4:	d1f7      	bne.n	80211c6 <__strtok_r+0x32>
 80211d6:	2b00      	cmp	r3, #0
 80211d8:	d0f3      	beq.n	80211c2 <__strtok_r+0x2e>
 80211da:	2300      	movs	r3, #0
 80211dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80211e0:	6014      	str	r4, [r2, #0]
 80211e2:	e7ed      	b.n	80211c0 <__strtok_r+0x2c>

080211e4 <strtok_r>:
 80211e4:	2301      	movs	r3, #1
 80211e6:	f7ff bfd5 	b.w	8021194 <__strtok_r>
	...

080211ec <__swbuf_r>:
 80211ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211ee:	460e      	mov	r6, r1
 80211f0:	4614      	mov	r4, r2
 80211f2:	4605      	mov	r5, r0
 80211f4:	b118      	cbz	r0, 80211fe <__swbuf_r+0x12>
 80211f6:	6983      	ldr	r3, [r0, #24]
 80211f8:	b90b      	cbnz	r3, 80211fe <__swbuf_r+0x12>
 80211fa:	f7ff f991 	bl	8020520 <__sinit>
 80211fe:	4b21      	ldr	r3, [pc, #132]	; (8021284 <__swbuf_r+0x98>)
 8021200:	429c      	cmp	r4, r3
 8021202:	d12b      	bne.n	802125c <__swbuf_r+0x70>
 8021204:	686c      	ldr	r4, [r5, #4]
 8021206:	69a3      	ldr	r3, [r4, #24]
 8021208:	60a3      	str	r3, [r4, #8]
 802120a:	89a3      	ldrh	r3, [r4, #12]
 802120c:	071a      	lsls	r2, r3, #28
 802120e:	d52f      	bpl.n	8021270 <__swbuf_r+0x84>
 8021210:	6923      	ldr	r3, [r4, #16]
 8021212:	b36b      	cbz	r3, 8021270 <__swbuf_r+0x84>
 8021214:	6923      	ldr	r3, [r4, #16]
 8021216:	6820      	ldr	r0, [r4, #0]
 8021218:	1ac0      	subs	r0, r0, r3
 802121a:	6963      	ldr	r3, [r4, #20]
 802121c:	b2f6      	uxtb	r6, r6
 802121e:	4283      	cmp	r3, r0
 8021220:	4637      	mov	r7, r6
 8021222:	dc04      	bgt.n	802122e <__swbuf_r+0x42>
 8021224:	4621      	mov	r1, r4
 8021226:	4628      	mov	r0, r5
 8021228:	f000 f9aa 	bl	8021580 <_fflush_r>
 802122c:	bb30      	cbnz	r0, 802127c <__swbuf_r+0x90>
 802122e:	68a3      	ldr	r3, [r4, #8]
 8021230:	3b01      	subs	r3, #1
 8021232:	60a3      	str	r3, [r4, #8]
 8021234:	6823      	ldr	r3, [r4, #0]
 8021236:	1c5a      	adds	r2, r3, #1
 8021238:	6022      	str	r2, [r4, #0]
 802123a:	701e      	strb	r6, [r3, #0]
 802123c:	6963      	ldr	r3, [r4, #20]
 802123e:	3001      	adds	r0, #1
 8021240:	4283      	cmp	r3, r0
 8021242:	d004      	beq.n	802124e <__swbuf_r+0x62>
 8021244:	89a3      	ldrh	r3, [r4, #12]
 8021246:	07db      	lsls	r3, r3, #31
 8021248:	d506      	bpl.n	8021258 <__swbuf_r+0x6c>
 802124a:	2e0a      	cmp	r6, #10
 802124c:	d104      	bne.n	8021258 <__swbuf_r+0x6c>
 802124e:	4621      	mov	r1, r4
 8021250:	4628      	mov	r0, r5
 8021252:	f000 f995 	bl	8021580 <_fflush_r>
 8021256:	b988      	cbnz	r0, 802127c <__swbuf_r+0x90>
 8021258:	4638      	mov	r0, r7
 802125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802125c:	4b0a      	ldr	r3, [pc, #40]	; (8021288 <__swbuf_r+0x9c>)
 802125e:	429c      	cmp	r4, r3
 8021260:	d101      	bne.n	8021266 <__swbuf_r+0x7a>
 8021262:	68ac      	ldr	r4, [r5, #8]
 8021264:	e7cf      	b.n	8021206 <__swbuf_r+0x1a>
 8021266:	4b09      	ldr	r3, [pc, #36]	; (802128c <__swbuf_r+0xa0>)
 8021268:	429c      	cmp	r4, r3
 802126a:	bf08      	it	eq
 802126c:	68ec      	ldreq	r4, [r5, #12]
 802126e:	e7ca      	b.n	8021206 <__swbuf_r+0x1a>
 8021270:	4621      	mov	r1, r4
 8021272:	4628      	mov	r0, r5
 8021274:	f000 f81e 	bl	80212b4 <__swsetup_r>
 8021278:	2800      	cmp	r0, #0
 802127a:	d0cb      	beq.n	8021214 <__swbuf_r+0x28>
 802127c:	f04f 37ff 	mov.w	r7, #4294967295
 8021280:	e7ea      	b.n	8021258 <__swbuf_r+0x6c>
 8021282:	bf00      	nop
 8021284:	08023d60 	.word	0x08023d60
 8021288:	08023d80 	.word	0x08023d80
 802128c:	08023d40 	.word	0x08023d40

08021290 <_write_r>:
 8021290:	b538      	push	{r3, r4, r5, lr}
 8021292:	4d07      	ldr	r5, [pc, #28]	; (80212b0 <_write_r+0x20>)
 8021294:	4604      	mov	r4, r0
 8021296:	4608      	mov	r0, r1
 8021298:	4611      	mov	r1, r2
 802129a:	2200      	movs	r2, #0
 802129c:	602a      	str	r2, [r5, #0]
 802129e:	461a      	mov	r2, r3
 80212a0:	f7e2 f870 	bl	8003384 <_write>
 80212a4:	1c43      	adds	r3, r0, #1
 80212a6:	d102      	bne.n	80212ae <_write_r+0x1e>
 80212a8:	682b      	ldr	r3, [r5, #0]
 80212aa:	b103      	cbz	r3, 80212ae <_write_r+0x1e>
 80212ac:	6023      	str	r3, [r4, #0]
 80212ae:	bd38      	pop	{r3, r4, r5, pc}
 80212b0:	2400c9e4 	.word	0x2400c9e4

080212b4 <__swsetup_r>:
 80212b4:	4b32      	ldr	r3, [pc, #200]	; (8021380 <__swsetup_r+0xcc>)
 80212b6:	b570      	push	{r4, r5, r6, lr}
 80212b8:	681d      	ldr	r5, [r3, #0]
 80212ba:	4606      	mov	r6, r0
 80212bc:	460c      	mov	r4, r1
 80212be:	b125      	cbz	r5, 80212ca <__swsetup_r+0x16>
 80212c0:	69ab      	ldr	r3, [r5, #24]
 80212c2:	b913      	cbnz	r3, 80212ca <__swsetup_r+0x16>
 80212c4:	4628      	mov	r0, r5
 80212c6:	f7ff f92b 	bl	8020520 <__sinit>
 80212ca:	4b2e      	ldr	r3, [pc, #184]	; (8021384 <__swsetup_r+0xd0>)
 80212cc:	429c      	cmp	r4, r3
 80212ce:	d10f      	bne.n	80212f0 <__swsetup_r+0x3c>
 80212d0:	686c      	ldr	r4, [r5, #4]
 80212d2:	89a3      	ldrh	r3, [r4, #12]
 80212d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80212d8:	0719      	lsls	r1, r3, #28
 80212da:	d42c      	bmi.n	8021336 <__swsetup_r+0x82>
 80212dc:	06dd      	lsls	r5, r3, #27
 80212de:	d411      	bmi.n	8021304 <__swsetup_r+0x50>
 80212e0:	2309      	movs	r3, #9
 80212e2:	6033      	str	r3, [r6, #0]
 80212e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80212e8:	81a3      	strh	r3, [r4, #12]
 80212ea:	f04f 30ff 	mov.w	r0, #4294967295
 80212ee:	e03e      	b.n	802136e <__swsetup_r+0xba>
 80212f0:	4b25      	ldr	r3, [pc, #148]	; (8021388 <__swsetup_r+0xd4>)
 80212f2:	429c      	cmp	r4, r3
 80212f4:	d101      	bne.n	80212fa <__swsetup_r+0x46>
 80212f6:	68ac      	ldr	r4, [r5, #8]
 80212f8:	e7eb      	b.n	80212d2 <__swsetup_r+0x1e>
 80212fa:	4b24      	ldr	r3, [pc, #144]	; (802138c <__swsetup_r+0xd8>)
 80212fc:	429c      	cmp	r4, r3
 80212fe:	bf08      	it	eq
 8021300:	68ec      	ldreq	r4, [r5, #12]
 8021302:	e7e6      	b.n	80212d2 <__swsetup_r+0x1e>
 8021304:	0758      	lsls	r0, r3, #29
 8021306:	d512      	bpl.n	802132e <__swsetup_r+0x7a>
 8021308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802130a:	b141      	cbz	r1, 802131e <__swsetup_r+0x6a>
 802130c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021310:	4299      	cmp	r1, r3
 8021312:	d002      	beq.n	802131a <__swsetup_r+0x66>
 8021314:	4630      	mov	r0, r6
 8021316:	f7ff fa11 	bl	802073c <_free_r>
 802131a:	2300      	movs	r3, #0
 802131c:	6363      	str	r3, [r4, #52]	; 0x34
 802131e:	89a3      	ldrh	r3, [r4, #12]
 8021320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021324:	81a3      	strh	r3, [r4, #12]
 8021326:	2300      	movs	r3, #0
 8021328:	6063      	str	r3, [r4, #4]
 802132a:	6923      	ldr	r3, [r4, #16]
 802132c:	6023      	str	r3, [r4, #0]
 802132e:	89a3      	ldrh	r3, [r4, #12]
 8021330:	f043 0308 	orr.w	r3, r3, #8
 8021334:	81a3      	strh	r3, [r4, #12]
 8021336:	6923      	ldr	r3, [r4, #16]
 8021338:	b94b      	cbnz	r3, 802134e <__swsetup_r+0x9a>
 802133a:	89a3      	ldrh	r3, [r4, #12]
 802133c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021344:	d003      	beq.n	802134e <__swsetup_r+0x9a>
 8021346:	4621      	mov	r1, r4
 8021348:	4630      	mov	r0, r6
 802134a:	f000 f98d 	bl	8021668 <__smakebuf_r>
 802134e:	89a0      	ldrh	r0, [r4, #12]
 8021350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021354:	f010 0301 	ands.w	r3, r0, #1
 8021358:	d00a      	beq.n	8021370 <__swsetup_r+0xbc>
 802135a:	2300      	movs	r3, #0
 802135c:	60a3      	str	r3, [r4, #8]
 802135e:	6963      	ldr	r3, [r4, #20]
 8021360:	425b      	negs	r3, r3
 8021362:	61a3      	str	r3, [r4, #24]
 8021364:	6923      	ldr	r3, [r4, #16]
 8021366:	b943      	cbnz	r3, 802137a <__swsetup_r+0xc6>
 8021368:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802136c:	d1ba      	bne.n	80212e4 <__swsetup_r+0x30>
 802136e:	bd70      	pop	{r4, r5, r6, pc}
 8021370:	0781      	lsls	r1, r0, #30
 8021372:	bf58      	it	pl
 8021374:	6963      	ldrpl	r3, [r4, #20]
 8021376:	60a3      	str	r3, [r4, #8]
 8021378:	e7f4      	b.n	8021364 <__swsetup_r+0xb0>
 802137a:	2000      	movs	r0, #0
 802137c:	e7f7      	b.n	802136e <__swsetup_r+0xba>
 802137e:	bf00      	nop
 8021380:	240000dc 	.word	0x240000dc
 8021384:	08023d60 	.word	0x08023d60
 8021388:	08023d80 	.word	0x08023d80
 802138c:	08023d40 	.word	0x08023d40

08021390 <__register_exitproc>:
 8021390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021394:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8021450 <__register_exitproc+0xc0>
 8021398:	4606      	mov	r6, r0
 802139a:	f8d8 0000 	ldr.w	r0, [r8]
 802139e:	461f      	mov	r7, r3
 80213a0:	460d      	mov	r5, r1
 80213a2:	4691      	mov	r9, r2
 80213a4:	f7ff f991 	bl	80206ca <__retarget_lock_acquire_recursive>
 80213a8:	4b25      	ldr	r3, [pc, #148]	; (8021440 <__register_exitproc+0xb0>)
 80213aa:	681c      	ldr	r4, [r3, #0]
 80213ac:	b934      	cbnz	r4, 80213bc <__register_exitproc+0x2c>
 80213ae:	4c25      	ldr	r4, [pc, #148]	; (8021444 <__register_exitproc+0xb4>)
 80213b0:	601c      	str	r4, [r3, #0]
 80213b2:	4b25      	ldr	r3, [pc, #148]	; (8021448 <__register_exitproc+0xb8>)
 80213b4:	b113      	cbz	r3, 80213bc <__register_exitproc+0x2c>
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80213bc:	6863      	ldr	r3, [r4, #4]
 80213be:	2b1f      	cmp	r3, #31
 80213c0:	dd07      	ble.n	80213d2 <__register_exitproc+0x42>
 80213c2:	f8d8 0000 	ldr.w	r0, [r8]
 80213c6:	f7ff f982 	bl	80206ce <__retarget_lock_release_recursive>
 80213ca:	f04f 30ff 	mov.w	r0, #4294967295
 80213ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80213d2:	b34e      	cbz	r6, 8021428 <__register_exitproc+0x98>
 80213d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80213d8:	b988      	cbnz	r0, 80213fe <__register_exitproc+0x6e>
 80213da:	4b1c      	ldr	r3, [pc, #112]	; (802144c <__register_exitproc+0xbc>)
 80213dc:	b923      	cbnz	r3, 80213e8 <__register_exitproc+0x58>
 80213de:	f8d8 0000 	ldr.w	r0, [r8]
 80213e2:	f7ff f973 	bl	80206cc <__retarget_lock_release>
 80213e6:	e7f0      	b.n	80213ca <__register_exitproc+0x3a>
 80213e8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80213ec:	f7ff f970 	bl	80206d0 <malloc>
 80213f0:	2800      	cmp	r0, #0
 80213f2:	d0f4      	beq.n	80213de <__register_exitproc+0x4e>
 80213f4:	2300      	movs	r3, #0
 80213f6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80213fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80213fe:	6863      	ldr	r3, [r4, #4]
 8021400:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021404:	2201      	movs	r2, #1
 8021406:	409a      	lsls	r2, r3
 8021408:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802140c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021410:	4313      	orrs	r3, r2
 8021412:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021416:	2e02      	cmp	r6, #2
 8021418:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802141c:	bf02      	ittt	eq
 802141e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8021422:	4313      	orreq	r3, r2
 8021424:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8021428:	6863      	ldr	r3, [r4, #4]
 802142a:	f8d8 0000 	ldr.w	r0, [r8]
 802142e:	1c5a      	adds	r2, r3, #1
 8021430:	3302      	adds	r3, #2
 8021432:	6062      	str	r2, [r4, #4]
 8021434:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021438:	f7ff f949 	bl	80206ce <__retarget_lock_release_recursive>
 802143c:	2000      	movs	r0, #0
 802143e:	e7c6      	b.n	80213ce <__register_exitproc+0x3e>
 8021440:	2400ca74 	.word	0x2400ca74
 8021444:	2400c9e8 	.word	0x2400c9e8
 8021448:	08023dd8 	.word	0x08023dd8
 802144c:	080206d1 	.word	0x080206d1
 8021450:	24000140 	.word	0x24000140

08021454 <_close_r>:
 8021454:	b538      	push	{r3, r4, r5, lr}
 8021456:	4d06      	ldr	r5, [pc, #24]	; (8021470 <_close_r+0x1c>)
 8021458:	2300      	movs	r3, #0
 802145a:	4604      	mov	r4, r0
 802145c:	4608      	mov	r0, r1
 802145e:	602b      	str	r3, [r5, #0]
 8021460:	f7e1 ff9e 	bl	80033a0 <_close>
 8021464:	1c43      	adds	r3, r0, #1
 8021466:	d102      	bne.n	802146e <_close_r+0x1a>
 8021468:	682b      	ldr	r3, [r5, #0]
 802146a:	b103      	cbz	r3, 802146e <_close_r+0x1a>
 802146c:	6023      	str	r3, [r4, #0]
 802146e:	bd38      	pop	{r3, r4, r5, pc}
 8021470:	2400c9e4 	.word	0x2400c9e4

08021474 <__sflush_r>:
 8021474:	898a      	ldrh	r2, [r1, #12]
 8021476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802147a:	4605      	mov	r5, r0
 802147c:	0710      	lsls	r0, r2, #28
 802147e:	460c      	mov	r4, r1
 8021480:	d458      	bmi.n	8021534 <__sflush_r+0xc0>
 8021482:	684b      	ldr	r3, [r1, #4]
 8021484:	2b00      	cmp	r3, #0
 8021486:	dc05      	bgt.n	8021494 <__sflush_r+0x20>
 8021488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802148a:	2b00      	cmp	r3, #0
 802148c:	dc02      	bgt.n	8021494 <__sflush_r+0x20>
 802148e:	2000      	movs	r0, #0
 8021490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021496:	2e00      	cmp	r6, #0
 8021498:	d0f9      	beq.n	802148e <__sflush_r+0x1a>
 802149a:	2300      	movs	r3, #0
 802149c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80214a0:	682f      	ldr	r7, [r5, #0]
 80214a2:	602b      	str	r3, [r5, #0]
 80214a4:	d032      	beq.n	802150c <__sflush_r+0x98>
 80214a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80214a8:	89a3      	ldrh	r3, [r4, #12]
 80214aa:	075a      	lsls	r2, r3, #29
 80214ac:	d505      	bpl.n	80214ba <__sflush_r+0x46>
 80214ae:	6863      	ldr	r3, [r4, #4]
 80214b0:	1ac0      	subs	r0, r0, r3
 80214b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80214b4:	b10b      	cbz	r3, 80214ba <__sflush_r+0x46>
 80214b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80214b8:	1ac0      	subs	r0, r0, r3
 80214ba:	2300      	movs	r3, #0
 80214bc:	4602      	mov	r2, r0
 80214be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80214c0:	6a21      	ldr	r1, [r4, #32]
 80214c2:	4628      	mov	r0, r5
 80214c4:	47b0      	blx	r6
 80214c6:	1c43      	adds	r3, r0, #1
 80214c8:	89a3      	ldrh	r3, [r4, #12]
 80214ca:	d106      	bne.n	80214da <__sflush_r+0x66>
 80214cc:	6829      	ldr	r1, [r5, #0]
 80214ce:	291d      	cmp	r1, #29
 80214d0:	d82c      	bhi.n	802152c <__sflush_r+0xb8>
 80214d2:	4a2a      	ldr	r2, [pc, #168]	; (802157c <__sflush_r+0x108>)
 80214d4:	40ca      	lsrs	r2, r1
 80214d6:	07d6      	lsls	r6, r2, #31
 80214d8:	d528      	bpl.n	802152c <__sflush_r+0xb8>
 80214da:	2200      	movs	r2, #0
 80214dc:	6062      	str	r2, [r4, #4]
 80214de:	04d9      	lsls	r1, r3, #19
 80214e0:	6922      	ldr	r2, [r4, #16]
 80214e2:	6022      	str	r2, [r4, #0]
 80214e4:	d504      	bpl.n	80214f0 <__sflush_r+0x7c>
 80214e6:	1c42      	adds	r2, r0, #1
 80214e8:	d101      	bne.n	80214ee <__sflush_r+0x7a>
 80214ea:	682b      	ldr	r3, [r5, #0]
 80214ec:	b903      	cbnz	r3, 80214f0 <__sflush_r+0x7c>
 80214ee:	6560      	str	r0, [r4, #84]	; 0x54
 80214f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80214f2:	602f      	str	r7, [r5, #0]
 80214f4:	2900      	cmp	r1, #0
 80214f6:	d0ca      	beq.n	802148e <__sflush_r+0x1a>
 80214f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80214fc:	4299      	cmp	r1, r3
 80214fe:	d002      	beq.n	8021506 <__sflush_r+0x92>
 8021500:	4628      	mov	r0, r5
 8021502:	f7ff f91b 	bl	802073c <_free_r>
 8021506:	2000      	movs	r0, #0
 8021508:	6360      	str	r0, [r4, #52]	; 0x34
 802150a:	e7c1      	b.n	8021490 <__sflush_r+0x1c>
 802150c:	6a21      	ldr	r1, [r4, #32]
 802150e:	2301      	movs	r3, #1
 8021510:	4628      	mov	r0, r5
 8021512:	47b0      	blx	r6
 8021514:	1c41      	adds	r1, r0, #1
 8021516:	d1c7      	bne.n	80214a8 <__sflush_r+0x34>
 8021518:	682b      	ldr	r3, [r5, #0]
 802151a:	2b00      	cmp	r3, #0
 802151c:	d0c4      	beq.n	80214a8 <__sflush_r+0x34>
 802151e:	2b1d      	cmp	r3, #29
 8021520:	d001      	beq.n	8021526 <__sflush_r+0xb2>
 8021522:	2b16      	cmp	r3, #22
 8021524:	d101      	bne.n	802152a <__sflush_r+0xb6>
 8021526:	602f      	str	r7, [r5, #0]
 8021528:	e7b1      	b.n	802148e <__sflush_r+0x1a>
 802152a:	89a3      	ldrh	r3, [r4, #12]
 802152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021530:	81a3      	strh	r3, [r4, #12]
 8021532:	e7ad      	b.n	8021490 <__sflush_r+0x1c>
 8021534:	690f      	ldr	r7, [r1, #16]
 8021536:	2f00      	cmp	r7, #0
 8021538:	d0a9      	beq.n	802148e <__sflush_r+0x1a>
 802153a:	0793      	lsls	r3, r2, #30
 802153c:	680e      	ldr	r6, [r1, #0]
 802153e:	bf08      	it	eq
 8021540:	694b      	ldreq	r3, [r1, #20]
 8021542:	600f      	str	r7, [r1, #0]
 8021544:	bf18      	it	ne
 8021546:	2300      	movne	r3, #0
 8021548:	eba6 0807 	sub.w	r8, r6, r7
 802154c:	608b      	str	r3, [r1, #8]
 802154e:	f1b8 0f00 	cmp.w	r8, #0
 8021552:	dd9c      	ble.n	802148e <__sflush_r+0x1a>
 8021554:	6a21      	ldr	r1, [r4, #32]
 8021556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021558:	4643      	mov	r3, r8
 802155a:	463a      	mov	r2, r7
 802155c:	4628      	mov	r0, r5
 802155e:	47b0      	blx	r6
 8021560:	2800      	cmp	r0, #0
 8021562:	dc06      	bgt.n	8021572 <__sflush_r+0xfe>
 8021564:	89a3      	ldrh	r3, [r4, #12]
 8021566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802156a:	81a3      	strh	r3, [r4, #12]
 802156c:	f04f 30ff 	mov.w	r0, #4294967295
 8021570:	e78e      	b.n	8021490 <__sflush_r+0x1c>
 8021572:	4407      	add	r7, r0
 8021574:	eba8 0800 	sub.w	r8, r8, r0
 8021578:	e7e9      	b.n	802154e <__sflush_r+0xda>
 802157a:	bf00      	nop
 802157c:	20400001 	.word	0x20400001

08021580 <_fflush_r>:
 8021580:	b538      	push	{r3, r4, r5, lr}
 8021582:	690b      	ldr	r3, [r1, #16]
 8021584:	4605      	mov	r5, r0
 8021586:	460c      	mov	r4, r1
 8021588:	b913      	cbnz	r3, 8021590 <_fflush_r+0x10>
 802158a:	2500      	movs	r5, #0
 802158c:	4628      	mov	r0, r5
 802158e:	bd38      	pop	{r3, r4, r5, pc}
 8021590:	b118      	cbz	r0, 802159a <_fflush_r+0x1a>
 8021592:	6983      	ldr	r3, [r0, #24]
 8021594:	b90b      	cbnz	r3, 802159a <_fflush_r+0x1a>
 8021596:	f7fe ffc3 	bl	8020520 <__sinit>
 802159a:	4b14      	ldr	r3, [pc, #80]	; (80215ec <_fflush_r+0x6c>)
 802159c:	429c      	cmp	r4, r3
 802159e:	d11b      	bne.n	80215d8 <_fflush_r+0x58>
 80215a0:	686c      	ldr	r4, [r5, #4]
 80215a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	d0ef      	beq.n	802158a <_fflush_r+0xa>
 80215aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80215ac:	07d0      	lsls	r0, r2, #31
 80215ae:	d404      	bmi.n	80215ba <_fflush_r+0x3a>
 80215b0:	0599      	lsls	r1, r3, #22
 80215b2:	d402      	bmi.n	80215ba <_fflush_r+0x3a>
 80215b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80215b6:	f7ff f888 	bl	80206ca <__retarget_lock_acquire_recursive>
 80215ba:	4628      	mov	r0, r5
 80215bc:	4621      	mov	r1, r4
 80215be:	f7ff ff59 	bl	8021474 <__sflush_r>
 80215c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80215c4:	07da      	lsls	r2, r3, #31
 80215c6:	4605      	mov	r5, r0
 80215c8:	d4e0      	bmi.n	802158c <_fflush_r+0xc>
 80215ca:	89a3      	ldrh	r3, [r4, #12]
 80215cc:	059b      	lsls	r3, r3, #22
 80215ce:	d4dd      	bmi.n	802158c <_fflush_r+0xc>
 80215d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80215d2:	f7ff f87c 	bl	80206ce <__retarget_lock_release_recursive>
 80215d6:	e7d9      	b.n	802158c <_fflush_r+0xc>
 80215d8:	4b05      	ldr	r3, [pc, #20]	; (80215f0 <_fflush_r+0x70>)
 80215da:	429c      	cmp	r4, r3
 80215dc:	d101      	bne.n	80215e2 <_fflush_r+0x62>
 80215de:	68ac      	ldr	r4, [r5, #8]
 80215e0:	e7df      	b.n	80215a2 <_fflush_r+0x22>
 80215e2:	4b04      	ldr	r3, [pc, #16]	; (80215f4 <_fflush_r+0x74>)
 80215e4:	429c      	cmp	r4, r3
 80215e6:	bf08      	it	eq
 80215e8:	68ec      	ldreq	r4, [r5, #12]
 80215ea:	e7da      	b.n	80215a2 <_fflush_r+0x22>
 80215ec:	08023d60 	.word	0x08023d60
 80215f0:	08023d80 	.word	0x08023d80
 80215f4:	08023d40 	.word	0x08023d40

080215f8 <_lseek_r>:
 80215f8:	b538      	push	{r3, r4, r5, lr}
 80215fa:	4d07      	ldr	r5, [pc, #28]	; (8021618 <_lseek_r+0x20>)
 80215fc:	4604      	mov	r4, r0
 80215fe:	4608      	mov	r0, r1
 8021600:	4611      	mov	r1, r2
 8021602:	2200      	movs	r2, #0
 8021604:	602a      	str	r2, [r5, #0]
 8021606:	461a      	mov	r2, r3
 8021608:	f7e1 fed4 	bl	80033b4 <_lseek>
 802160c:	1c43      	adds	r3, r0, #1
 802160e:	d102      	bne.n	8021616 <_lseek_r+0x1e>
 8021610:	682b      	ldr	r3, [r5, #0]
 8021612:	b103      	cbz	r3, 8021616 <_lseek_r+0x1e>
 8021614:	6023      	str	r3, [r4, #0]
 8021616:	bd38      	pop	{r3, r4, r5, pc}
 8021618:	2400c9e4 	.word	0x2400c9e4

0802161c <__swhatbuf_r>:
 802161c:	b570      	push	{r4, r5, r6, lr}
 802161e:	460e      	mov	r6, r1
 8021620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021624:	2900      	cmp	r1, #0
 8021626:	b096      	sub	sp, #88	; 0x58
 8021628:	4614      	mov	r4, r2
 802162a:	461d      	mov	r5, r3
 802162c:	da08      	bge.n	8021640 <__swhatbuf_r+0x24>
 802162e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021632:	2200      	movs	r2, #0
 8021634:	602a      	str	r2, [r5, #0]
 8021636:	061a      	lsls	r2, r3, #24
 8021638:	d410      	bmi.n	802165c <__swhatbuf_r+0x40>
 802163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802163e:	e00e      	b.n	802165e <__swhatbuf_r+0x42>
 8021640:	466a      	mov	r2, sp
 8021642:	f000 fa13 	bl	8021a6c <_fstat_r>
 8021646:	2800      	cmp	r0, #0
 8021648:	dbf1      	blt.n	802162e <__swhatbuf_r+0x12>
 802164a:	9a01      	ldr	r2, [sp, #4]
 802164c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021654:	425a      	negs	r2, r3
 8021656:	415a      	adcs	r2, r3
 8021658:	602a      	str	r2, [r5, #0]
 802165a:	e7ee      	b.n	802163a <__swhatbuf_r+0x1e>
 802165c:	2340      	movs	r3, #64	; 0x40
 802165e:	2000      	movs	r0, #0
 8021660:	6023      	str	r3, [r4, #0]
 8021662:	b016      	add	sp, #88	; 0x58
 8021664:	bd70      	pop	{r4, r5, r6, pc}
	...

08021668 <__smakebuf_r>:
 8021668:	898b      	ldrh	r3, [r1, #12]
 802166a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802166c:	079d      	lsls	r5, r3, #30
 802166e:	4606      	mov	r6, r0
 8021670:	460c      	mov	r4, r1
 8021672:	d507      	bpl.n	8021684 <__smakebuf_r+0x1c>
 8021674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021678:	6023      	str	r3, [r4, #0]
 802167a:	6123      	str	r3, [r4, #16]
 802167c:	2301      	movs	r3, #1
 802167e:	6163      	str	r3, [r4, #20]
 8021680:	b002      	add	sp, #8
 8021682:	bd70      	pop	{r4, r5, r6, pc}
 8021684:	ab01      	add	r3, sp, #4
 8021686:	466a      	mov	r2, sp
 8021688:	f7ff ffc8 	bl	802161c <__swhatbuf_r>
 802168c:	9900      	ldr	r1, [sp, #0]
 802168e:	4605      	mov	r5, r0
 8021690:	4630      	mov	r0, r6
 8021692:	f7ff f8bf 	bl	8020814 <_malloc_r>
 8021696:	b948      	cbnz	r0, 80216ac <__smakebuf_r+0x44>
 8021698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802169c:	059a      	lsls	r2, r3, #22
 802169e:	d4ef      	bmi.n	8021680 <__smakebuf_r+0x18>
 80216a0:	f023 0303 	bic.w	r3, r3, #3
 80216a4:	f043 0302 	orr.w	r3, r3, #2
 80216a8:	81a3      	strh	r3, [r4, #12]
 80216aa:	e7e3      	b.n	8021674 <__smakebuf_r+0xc>
 80216ac:	4b0d      	ldr	r3, [pc, #52]	; (80216e4 <__smakebuf_r+0x7c>)
 80216ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80216b0:	89a3      	ldrh	r3, [r4, #12]
 80216b2:	6020      	str	r0, [r4, #0]
 80216b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80216b8:	81a3      	strh	r3, [r4, #12]
 80216ba:	9b00      	ldr	r3, [sp, #0]
 80216bc:	6163      	str	r3, [r4, #20]
 80216be:	9b01      	ldr	r3, [sp, #4]
 80216c0:	6120      	str	r0, [r4, #16]
 80216c2:	b15b      	cbz	r3, 80216dc <__smakebuf_r+0x74>
 80216c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80216c8:	4630      	mov	r0, r6
 80216ca:	f000 f9e1 	bl	8021a90 <_isatty_r>
 80216ce:	b128      	cbz	r0, 80216dc <__smakebuf_r+0x74>
 80216d0:	89a3      	ldrh	r3, [r4, #12]
 80216d2:	f023 0303 	bic.w	r3, r3, #3
 80216d6:	f043 0301 	orr.w	r3, r3, #1
 80216da:	81a3      	strh	r3, [r4, #12]
 80216dc:	89a0      	ldrh	r0, [r4, #12]
 80216de:	4305      	orrs	r5, r0
 80216e0:	81a5      	strh	r5, [r4, #12]
 80216e2:	e7cd      	b.n	8021680 <__smakebuf_r+0x18>
 80216e4:	080204b9 	.word	0x080204b9

080216e8 <memmove>:
 80216e8:	4288      	cmp	r0, r1
 80216ea:	b510      	push	{r4, lr}
 80216ec:	eb01 0402 	add.w	r4, r1, r2
 80216f0:	d902      	bls.n	80216f8 <memmove+0x10>
 80216f2:	4284      	cmp	r4, r0
 80216f4:	4623      	mov	r3, r4
 80216f6:	d807      	bhi.n	8021708 <memmove+0x20>
 80216f8:	1e43      	subs	r3, r0, #1
 80216fa:	42a1      	cmp	r1, r4
 80216fc:	d008      	beq.n	8021710 <memmove+0x28>
 80216fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021706:	e7f8      	b.n	80216fa <memmove+0x12>
 8021708:	4402      	add	r2, r0
 802170a:	4601      	mov	r1, r0
 802170c:	428a      	cmp	r2, r1
 802170e:	d100      	bne.n	8021712 <memmove+0x2a>
 8021710:	bd10      	pop	{r4, pc}
 8021712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802171a:	e7f7      	b.n	802170c <memmove+0x24>

0802171c <__malloc_lock>:
 802171c:	4801      	ldr	r0, [pc, #4]	; (8021724 <__malloc_lock+0x8>)
 802171e:	f7fe bfd4 	b.w	80206ca <__retarget_lock_acquire_recursive>
 8021722:	bf00      	nop
 8021724:	2400c8d1 	.word	0x2400c8d1

08021728 <__malloc_unlock>:
 8021728:	4801      	ldr	r0, [pc, #4]	; (8021730 <__malloc_unlock+0x8>)
 802172a:	f7fe bfd0 	b.w	80206ce <__retarget_lock_release_recursive>
 802172e:	bf00      	nop
 8021730:	2400c8d1 	.word	0x2400c8d1

08021734 <_realloc_r>:
 8021734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021738:	4680      	mov	r8, r0
 802173a:	4614      	mov	r4, r2
 802173c:	460e      	mov	r6, r1
 802173e:	b921      	cbnz	r1, 802174a <_realloc_r+0x16>
 8021740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021744:	4611      	mov	r1, r2
 8021746:	f7ff b865 	b.w	8020814 <_malloc_r>
 802174a:	b92a      	cbnz	r2, 8021758 <_realloc_r+0x24>
 802174c:	f7fe fff6 	bl	802073c <_free_r>
 8021750:	4625      	mov	r5, r4
 8021752:	4628      	mov	r0, r5
 8021754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021758:	f000 f9aa 	bl	8021ab0 <_malloc_usable_size_r>
 802175c:	4284      	cmp	r4, r0
 802175e:	4607      	mov	r7, r0
 8021760:	d802      	bhi.n	8021768 <_realloc_r+0x34>
 8021762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021766:	d812      	bhi.n	802178e <_realloc_r+0x5a>
 8021768:	4621      	mov	r1, r4
 802176a:	4640      	mov	r0, r8
 802176c:	f7ff f852 	bl	8020814 <_malloc_r>
 8021770:	4605      	mov	r5, r0
 8021772:	2800      	cmp	r0, #0
 8021774:	d0ed      	beq.n	8021752 <_realloc_r+0x1e>
 8021776:	42bc      	cmp	r4, r7
 8021778:	4622      	mov	r2, r4
 802177a:	4631      	mov	r1, r6
 802177c:	bf28      	it	cs
 802177e:	463a      	movcs	r2, r7
 8021780:	f7fe ffc6 	bl	8020710 <memcpy>
 8021784:	4631      	mov	r1, r6
 8021786:	4640      	mov	r0, r8
 8021788:	f7fe ffd8 	bl	802073c <_free_r>
 802178c:	e7e1      	b.n	8021752 <_realloc_r+0x1e>
 802178e:	4635      	mov	r5, r6
 8021790:	e7df      	b.n	8021752 <_realloc_r+0x1e>

08021792 <__ssputs_r>:
 8021792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021796:	688e      	ldr	r6, [r1, #8]
 8021798:	429e      	cmp	r6, r3
 802179a:	4682      	mov	sl, r0
 802179c:	460c      	mov	r4, r1
 802179e:	4690      	mov	r8, r2
 80217a0:	461f      	mov	r7, r3
 80217a2:	d838      	bhi.n	8021816 <__ssputs_r+0x84>
 80217a4:	898a      	ldrh	r2, [r1, #12]
 80217a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80217aa:	d032      	beq.n	8021812 <__ssputs_r+0x80>
 80217ac:	6825      	ldr	r5, [r4, #0]
 80217ae:	6909      	ldr	r1, [r1, #16]
 80217b0:	eba5 0901 	sub.w	r9, r5, r1
 80217b4:	6965      	ldr	r5, [r4, #20]
 80217b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80217ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80217be:	3301      	adds	r3, #1
 80217c0:	444b      	add	r3, r9
 80217c2:	106d      	asrs	r5, r5, #1
 80217c4:	429d      	cmp	r5, r3
 80217c6:	bf38      	it	cc
 80217c8:	461d      	movcc	r5, r3
 80217ca:	0553      	lsls	r3, r2, #21
 80217cc:	d531      	bpl.n	8021832 <__ssputs_r+0xa0>
 80217ce:	4629      	mov	r1, r5
 80217d0:	f7ff f820 	bl	8020814 <_malloc_r>
 80217d4:	4606      	mov	r6, r0
 80217d6:	b950      	cbnz	r0, 80217ee <__ssputs_r+0x5c>
 80217d8:	230c      	movs	r3, #12
 80217da:	f8ca 3000 	str.w	r3, [sl]
 80217de:	89a3      	ldrh	r3, [r4, #12]
 80217e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80217e4:	81a3      	strh	r3, [r4, #12]
 80217e6:	f04f 30ff 	mov.w	r0, #4294967295
 80217ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80217ee:	6921      	ldr	r1, [r4, #16]
 80217f0:	464a      	mov	r2, r9
 80217f2:	f7fe ff8d 	bl	8020710 <memcpy>
 80217f6:	89a3      	ldrh	r3, [r4, #12]
 80217f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80217fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021800:	81a3      	strh	r3, [r4, #12]
 8021802:	6126      	str	r6, [r4, #16]
 8021804:	6165      	str	r5, [r4, #20]
 8021806:	444e      	add	r6, r9
 8021808:	eba5 0509 	sub.w	r5, r5, r9
 802180c:	6026      	str	r6, [r4, #0]
 802180e:	60a5      	str	r5, [r4, #8]
 8021810:	463e      	mov	r6, r7
 8021812:	42be      	cmp	r6, r7
 8021814:	d900      	bls.n	8021818 <__ssputs_r+0x86>
 8021816:	463e      	mov	r6, r7
 8021818:	6820      	ldr	r0, [r4, #0]
 802181a:	4632      	mov	r2, r6
 802181c:	4641      	mov	r1, r8
 802181e:	f7ff ff63 	bl	80216e8 <memmove>
 8021822:	68a3      	ldr	r3, [r4, #8]
 8021824:	1b9b      	subs	r3, r3, r6
 8021826:	60a3      	str	r3, [r4, #8]
 8021828:	6823      	ldr	r3, [r4, #0]
 802182a:	4433      	add	r3, r6
 802182c:	6023      	str	r3, [r4, #0]
 802182e:	2000      	movs	r0, #0
 8021830:	e7db      	b.n	80217ea <__ssputs_r+0x58>
 8021832:	462a      	mov	r2, r5
 8021834:	f7ff ff7e 	bl	8021734 <_realloc_r>
 8021838:	4606      	mov	r6, r0
 802183a:	2800      	cmp	r0, #0
 802183c:	d1e1      	bne.n	8021802 <__ssputs_r+0x70>
 802183e:	6921      	ldr	r1, [r4, #16]
 8021840:	4650      	mov	r0, sl
 8021842:	f7fe ff7b 	bl	802073c <_free_r>
 8021846:	e7c7      	b.n	80217d8 <__ssputs_r+0x46>

08021848 <_svfiprintf_r>:
 8021848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802184c:	4698      	mov	r8, r3
 802184e:	898b      	ldrh	r3, [r1, #12]
 8021850:	061b      	lsls	r3, r3, #24
 8021852:	b09d      	sub	sp, #116	; 0x74
 8021854:	4607      	mov	r7, r0
 8021856:	460d      	mov	r5, r1
 8021858:	4614      	mov	r4, r2
 802185a:	d50e      	bpl.n	802187a <_svfiprintf_r+0x32>
 802185c:	690b      	ldr	r3, [r1, #16]
 802185e:	b963      	cbnz	r3, 802187a <_svfiprintf_r+0x32>
 8021860:	2140      	movs	r1, #64	; 0x40
 8021862:	f7fe ffd7 	bl	8020814 <_malloc_r>
 8021866:	6028      	str	r0, [r5, #0]
 8021868:	6128      	str	r0, [r5, #16]
 802186a:	b920      	cbnz	r0, 8021876 <_svfiprintf_r+0x2e>
 802186c:	230c      	movs	r3, #12
 802186e:	603b      	str	r3, [r7, #0]
 8021870:	f04f 30ff 	mov.w	r0, #4294967295
 8021874:	e0d1      	b.n	8021a1a <_svfiprintf_r+0x1d2>
 8021876:	2340      	movs	r3, #64	; 0x40
 8021878:	616b      	str	r3, [r5, #20]
 802187a:	2300      	movs	r3, #0
 802187c:	9309      	str	r3, [sp, #36]	; 0x24
 802187e:	2320      	movs	r3, #32
 8021880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021884:	f8cd 800c 	str.w	r8, [sp, #12]
 8021888:	2330      	movs	r3, #48	; 0x30
 802188a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021a34 <_svfiprintf_r+0x1ec>
 802188e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021892:	f04f 0901 	mov.w	r9, #1
 8021896:	4623      	mov	r3, r4
 8021898:	469a      	mov	sl, r3
 802189a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802189e:	b10a      	cbz	r2, 80218a4 <_svfiprintf_r+0x5c>
 80218a0:	2a25      	cmp	r2, #37	; 0x25
 80218a2:	d1f9      	bne.n	8021898 <_svfiprintf_r+0x50>
 80218a4:	ebba 0b04 	subs.w	fp, sl, r4
 80218a8:	d00b      	beq.n	80218c2 <_svfiprintf_r+0x7a>
 80218aa:	465b      	mov	r3, fp
 80218ac:	4622      	mov	r2, r4
 80218ae:	4629      	mov	r1, r5
 80218b0:	4638      	mov	r0, r7
 80218b2:	f7ff ff6e 	bl	8021792 <__ssputs_r>
 80218b6:	3001      	adds	r0, #1
 80218b8:	f000 80aa 	beq.w	8021a10 <_svfiprintf_r+0x1c8>
 80218bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218be:	445a      	add	r2, fp
 80218c0:	9209      	str	r2, [sp, #36]	; 0x24
 80218c2:	f89a 3000 	ldrb.w	r3, [sl]
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	f000 80a2 	beq.w	8021a10 <_svfiprintf_r+0x1c8>
 80218cc:	2300      	movs	r3, #0
 80218ce:	f04f 32ff 	mov.w	r2, #4294967295
 80218d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80218d6:	f10a 0a01 	add.w	sl, sl, #1
 80218da:	9304      	str	r3, [sp, #16]
 80218dc:	9307      	str	r3, [sp, #28]
 80218de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80218e2:	931a      	str	r3, [sp, #104]	; 0x68
 80218e4:	4654      	mov	r4, sl
 80218e6:	2205      	movs	r2, #5
 80218e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80218ec:	4851      	ldr	r0, [pc, #324]	; (8021a34 <_svfiprintf_r+0x1ec>)
 80218ee:	f7de fd17 	bl	8000320 <memchr>
 80218f2:	9a04      	ldr	r2, [sp, #16]
 80218f4:	b9d8      	cbnz	r0, 802192e <_svfiprintf_r+0xe6>
 80218f6:	06d0      	lsls	r0, r2, #27
 80218f8:	bf44      	itt	mi
 80218fa:	2320      	movmi	r3, #32
 80218fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021900:	0711      	lsls	r1, r2, #28
 8021902:	bf44      	itt	mi
 8021904:	232b      	movmi	r3, #43	; 0x2b
 8021906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802190a:	f89a 3000 	ldrb.w	r3, [sl]
 802190e:	2b2a      	cmp	r3, #42	; 0x2a
 8021910:	d015      	beq.n	802193e <_svfiprintf_r+0xf6>
 8021912:	9a07      	ldr	r2, [sp, #28]
 8021914:	4654      	mov	r4, sl
 8021916:	2000      	movs	r0, #0
 8021918:	f04f 0c0a 	mov.w	ip, #10
 802191c:	4621      	mov	r1, r4
 802191e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021922:	3b30      	subs	r3, #48	; 0x30
 8021924:	2b09      	cmp	r3, #9
 8021926:	d94e      	bls.n	80219c6 <_svfiprintf_r+0x17e>
 8021928:	b1b0      	cbz	r0, 8021958 <_svfiprintf_r+0x110>
 802192a:	9207      	str	r2, [sp, #28]
 802192c:	e014      	b.n	8021958 <_svfiprintf_r+0x110>
 802192e:	eba0 0308 	sub.w	r3, r0, r8
 8021932:	fa09 f303 	lsl.w	r3, r9, r3
 8021936:	4313      	orrs	r3, r2
 8021938:	9304      	str	r3, [sp, #16]
 802193a:	46a2      	mov	sl, r4
 802193c:	e7d2      	b.n	80218e4 <_svfiprintf_r+0x9c>
 802193e:	9b03      	ldr	r3, [sp, #12]
 8021940:	1d19      	adds	r1, r3, #4
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	9103      	str	r1, [sp, #12]
 8021946:	2b00      	cmp	r3, #0
 8021948:	bfbb      	ittet	lt
 802194a:	425b      	neglt	r3, r3
 802194c:	f042 0202 	orrlt.w	r2, r2, #2
 8021950:	9307      	strge	r3, [sp, #28]
 8021952:	9307      	strlt	r3, [sp, #28]
 8021954:	bfb8      	it	lt
 8021956:	9204      	strlt	r2, [sp, #16]
 8021958:	7823      	ldrb	r3, [r4, #0]
 802195a:	2b2e      	cmp	r3, #46	; 0x2e
 802195c:	d10c      	bne.n	8021978 <_svfiprintf_r+0x130>
 802195e:	7863      	ldrb	r3, [r4, #1]
 8021960:	2b2a      	cmp	r3, #42	; 0x2a
 8021962:	d135      	bne.n	80219d0 <_svfiprintf_r+0x188>
 8021964:	9b03      	ldr	r3, [sp, #12]
 8021966:	1d1a      	adds	r2, r3, #4
 8021968:	681b      	ldr	r3, [r3, #0]
 802196a:	9203      	str	r2, [sp, #12]
 802196c:	2b00      	cmp	r3, #0
 802196e:	bfb8      	it	lt
 8021970:	f04f 33ff 	movlt.w	r3, #4294967295
 8021974:	3402      	adds	r4, #2
 8021976:	9305      	str	r3, [sp, #20]
 8021978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021a44 <_svfiprintf_r+0x1fc>
 802197c:	7821      	ldrb	r1, [r4, #0]
 802197e:	2203      	movs	r2, #3
 8021980:	4650      	mov	r0, sl
 8021982:	f7de fccd 	bl	8000320 <memchr>
 8021986:	b140      	cbz	r0, 802199a <_svfiprintf_r+0x152>
 8021988:	2340      	movs	r3, #64	; 0x40
 802198a:	eba0 000a 	sub.w	r0, r0, sl
 802198e:	fa03 f000 	lsl.w	r0, r3, r0
 8021992:	9b04      	ldr	r3, [sp, #16]
 8021994:	4303      	orrs	r3, r0
 8021996:	3401      	adds	r4, #1
 8021998:	9304      	str	r3, [sp, #16]
 802199a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802199e:	4826      	ldr	r0, [pc, #152]	; (8021a38 <_svfiprintf_r+0x1f0>)
 80219a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80219a4:	2206      	movs	r2, #6
 80219a6:	f7de fcbb 	bl	8000320 <memchr>
 80219aa:	2800      	cmp	r0, #0
 80219ac:	d038      	beq.n	8021a20 <_svfiprintf_r+0x1d8>
 80219ae:	4b23      	ldr	r3, [pc, #140]	; (8021a3c <_svfiprintf_r+0x1f4>)
 80219b0:	bb1b      	cbnz	r3, 80219fa <_svfiprintf_r+0x1b2>
 80219b2:	9b03      	ldr	r3, [sp, #12]
 80219b4:	3307      	adds	r3, #7
 80219b6:	f023 0307 	bic.w	r3, r3, #7
 80219ba:	3308      	adds	r3, #8
 80219bc:	9303      	str	r3, [sp, #12]
 80219be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219c0:	4433      	add	r3, r6
 80219c2:	9309      	str	r3, [sp, #36]	; 0x24
 80219c4:	e767      	b.n	8021896 <_svfiprintf_r+0x4e>
 80219c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80219ca:	460c      	mov	r4, r1
 80219cc:	2001      	movs	r0, #1
 80219ce:	e7a5      	b.n	802191c <_svfiprintf_r+0xd4>
 80219d0:	2300      	movs	r3, #0
 80219d2:	3401      	adds	r4, #1
 80219d4:	9305      	str	r3, [sp, #20]
 80219d6:	4619      	mov	r1, r3
 80219d8:	f04f 0c0a 	mov.w	ip, #10
 80219dc:	4620      	mov	r0, r4
 80219de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80219e2:	3a30      	subs	r2, #48	; 0x30
 80219e4:	2a09      	cmp	r2, #9
 80219e6:	d903      	bls.n	80219f0 <_svfiprintf_r+0x1a8>
 80219e8:	2b00      	cmp	r3, #0
 80219ea:	d0c5      	beq.n	8021978 <_svfiprintf_r+0x130>
 80219ec:	9105      	str	r1, [sp, #20]
 80219ee:	e7c3      	b.n	8021978 <_svfiprintf_r+0x130>
 80219f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80219f4:	4604      	mov	r4, r0
 80219f6:	2301      	movs	r3, #1
 80219f8:	e7f0      	b.n	80219dc <_svfiprintf_r+0x194>
 80219fa:	ab03      	add	r3, sp, #12
 80219fc:	9300      	str	r3, [sp, #0]
 80219fe:	462a      	mov	r2, r5
 8021a00:	4b0f      	ldr	r3, [pc, #60]	; (8021a40 <_svfiprintf_r+0x1f8>)
 8021a02:	a904      	add	r1, sp, #16
 8021a04:	4638      	mov	r0, r7
 8021a06:	f3af 8000 	nop.w
 8021a0a:	1c42      	adds	r2, r0, #1
 8021a0c:	4606      	mov	r6, r0
 8021a0e:	d1d6      	bne.n	80219be <_svfiprintf_r+0x176>
 8021a10:	89ab      	ldrh	r3, [r5, #12]
 8021a12:	065b      	lsls	r3, r3, #25
 8021a14:	f53f af2c 	bmi.w	8021870 <_svfiprintf_r+0x28>
 8021a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a1a:	b01d      	add	sp, #116	; 0x74
 8021a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a20:	ab03      	add	r3, sp, #12
 8021a22:	9300      	str	r3, [sp, #0]
 8021a24:	462a      	mov	r2, r5
 8021a26:	4b06      	ldr	r3, [pc, #24]	; (8021a40 <_svfiprintf_r+0x1f8>)
 8021a28:	a904      	add	r1, sp, #16
 8021a2a:	4638      	mov	r0, r7
 8021a2c:	f7ff f92e 	bl	8020c8c <_printf_i>
 8021a30:	e7eb      	b.n	8021a0a <_svfiprintf_r+0x1c2>
 8021a32:	bf00      	nop
 8021a34:	08023da4 	.word	0x08023da4
 8021a38:	08023dae 	.word	0x08023dae
 8021a3c:	00000000 	.word	0x00000000
 8021a40:	08021793 	.word	0x08021793
 8021a44:	08023daa 	.word	0x08023daa

08021a48 <_read_r>:
 8021a48:	b538      	push	{r3, r4, r5, lr}
 8021a4a:	4d07      	ldr	r5, [pc, #28]	; (8021a68 <_read_r+0x20>)
 8021a4c:	4604      	mov	r4, r0
 8021a4e:	4608      	mov	r0, r1
 8021a50:	4611      	mov	r1, r2
 8021a52:	2200      	movs	r2, #0
 8021a54:	602a      	str	r2, [r5, #0]
 8021a56:	461a      	mov	r2, r3
 8021a58:	f7e1 fc84 	bl	8003364 <_read>
 8021a5c:	1c43      	adds	r3, r0, #1
 8021a5e:	d102      	bne.n	8021a66 <_read_r+0x1e>
 8021a60:	682b      	ldr	r3, [r5, #0]
 8021a62:	b103      	cbz	r3, 8021a66 <_read_r+0x1e>
 8021a64:	6023      	str	r3, [r4, #0]
 8021a66:	bd38      	pop	{r3, r4, r5, pc}
 8021a68:	2400c9e4 	.word	0x2400c9e4

08021a6c <_fstat_r>:
 8021a6c:	b538      	push	{r3, r4, r5, lr}
 8021a6e:	4d07      	ldr	r5, [pc, #28]	; (8021a8c <_fstat_r+0x20>)
 8021a70:	2300      	movs	r3, #0
 8021a72:	4604      	mov	r4, r0
 8021a74:	4608      	mov	r0, r1
 8021a76:	4611      	mov	r1, r2
 8021a78:	602b      	str	r3, [r5, #0]
 8021a7a:	f7e1 fc94 	bl	80033a6 <_fstat>
 8021a7e:	1c43      	adds	r3, r0, #1
 8021a80:	d102      	bne.n	8021a88 <_fstat_r+0x1c>
 8021a82:	682b      	ldr	r3, [r5, #0]
 8021a84:	b103      	cbz	r3, 8021a88 <_fstat_r+0x1c>
 8021a86:	6023      	str	r3, [r4, #0]
 8021a88:	bd38      	pop	{r3, r4, r5, pc}
 8021a8a:	bf00      	nop
 8021a8c:	2400c9e4 	.word	0x2400c9e4

08021a90 <_isatty_r>:
 8021a90:	b538      	push	{r3, r4, r5, lr}
 8021a92:	4d06      	ldr	r5, [pc, #24]	; (8021aac <_isatty_r+0x1c>)
 8021a94:	2300      	movs	r3, #0
 8021a96:	4604      	mov	r4, r0
 8021a98:	4608      	mov	r0, r1
 8021a9a:	602b      	str	r3, [r5, #0]
 8021a9c:	f7e1 fc88 	bl	80033b0 <_isatty>
 8021aa0:	1c43      	adds	r3, r0, #1
 8021aa2:	d102      	bne.n	8021aaa <_isatty_r+0x1a>
 8021aa4:	682b      	ldr	r3, [r5, #0]
 8021aa6:	b103      	cbz	r3, 8021aaa <_isatty_r+0x1a>
 8021aa8:	6023      	str	r3, [r4, #0]
 8021aaa:	bd38      	pop	{r3, r4, r5, pc}
 8021aac:	2400c9e4 	.word	0x2400c9e4

08021ab0 <_malloc_usable_size_r>:
 8021ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021ab4:	1f18      	subs	r0, r3, #4
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	bfbc      	itt	lt
 8021aba:	580b      	ldrlt	r3, [r1, r0]
 8021abc:	18c0      	addlt	r0, r0, r3
 8021abe:	4770      	bx	lr

08021ac0 <_init>:
 8021ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ac2:	bf00      	nop
 8021ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ac6:	bc08      	pop	{r3}
 8021ac8:	469e      	mov	lr, r3
 8021aca:	4770      	bx	lr

08021acc <_fini>:
 8021acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ace:	bf00      	nop
 8021ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ad2:	bc08      	pop	{r3}
 8021ad4:	469e      	mov	lr, r3
 8021ad6:	4770      	bx	lr
