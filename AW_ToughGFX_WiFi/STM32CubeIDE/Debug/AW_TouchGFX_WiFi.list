
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021974  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  08021c24  08021c24  00031c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000078c  08023f8c  08023f8c  00033f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08024718  08024718  0018d0c8  2**0
                  CONTENTS
  5 .ARM          00000000  08024718  08024718  0018d0c8  2**0
                  CONTENTS
  6 .preinit_array 00000000  08024718  08024718  0018d0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000028  08024718  08024718  00034718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000001c  08024740  08024740  00034740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000144  24000000  0802475c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000c994  24000144  080248a0  00040144  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400cad8  080248a0  0004cad8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0018d0c8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 14 FontFlashSection 0000bf60  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000088  9000bf60  9000bf60  0005bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 001310e0  9000bfe8  9000bfe8  0005bfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   00069cec  00000000  00000000  0018d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000dc68c  00000000  00000000  001f6de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00016dcc  00000000  00000000  002d346e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004130  00000000  00000000  002ea240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017c1cd  00000000  00000000  002ee370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000042b0  00000000  00000000  0046a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00041ff0  00000000  00000000  0046e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  000426a7  00000000  00000000  004b07e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  004f2e87  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000bda0  00000000  00000000  004f2f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000144 	.word	0x24000144
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08021c0c 	.word	0x08021c0c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000148 	.word	0x24000148
 80002ec:	08021c0c 	.word	0x08021c0c

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003c6:	e003      	b.n	80003d0 <LoopCopyDataInit>

080003c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ce:	3104      	adds	r1, #4

080003d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d8:	d3f6      	bcc.n	80003c8 <CopyDataInit>
  ldr  r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003dc:	e002      	b.n	80003e4 <LoopFillZerobss>

080003de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003e0:	f842 3b04 	str.w	r3, [r2], #4

080003e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e8:	d3f9      	bcc.n	80003de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ea:	f008 ff2b 	bl	8009244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f020 f9ed 	bl	80207cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f002 f917 	bl	8002624 <main>
  bx  lr
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003fc:	0802475c 	.word	0x0802475c
  ldr  r0, =_sdata
 8000400:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000404:	24000144 	.word	0x24000144
  ldr  r2, =_sbss
 8000408:	24000144 	.word	0x24000144
  ldr  r3, = _ebss
 800040c:	2400cad8 	.word	0x2400cad8

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>

08000412 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000412:	4770      	bx	lr

08000414 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000414:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000416:	f000 ff6d 	bl	80012f4 <touchgfx_init>
}
 800041a:	bd08      	pop	{r3, pc}

0800041c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800041c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800041e:	f000 ffe3 	bl	80013e8 <touchgfx_taskEntry>
}
 8000422:	bd08      	pop	{r3, pc}

08000424 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000424:	4a02      	ldr	r2, [pc, #8]	; (8000430 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8000426:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8000428:	4a02      	ldr	r2, [pc, #8]	; (8000434 <_ZN20STM32TouchControllerD1Ev+0x10>)
 800042a:	6002      	str	r2, [r0, #0]
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	08021c84 	.word	0x08021c84
 8000434:	08021c6c 	.word	0x08021c6c

08000438 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000438:	b500      	push	{lr}
 800043a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800043c:	2308      	movs	r3, #8
 800043e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000440:	2000      	movs	r0, #0
 8000442:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <_ZN20STM32TouchController4initEv+0x24>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <_ZN20STM32TouchController4initEv+0x28>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000450:	4669      	mov	r1, sp
 8000452:	f008 fe03 	bl	800905c <BSP_TS_Init>
}
 8000456:	b005      	add	sp, #20
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	2400c84e 	.word	0x2400c84e
 8000460:	2400c850 	.word	0x2400c850

08000464 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	b085      	sub	sp, #20
 8000468:	460d      	mov	r5, r1
 800046a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800046c:	2000      	movs	r0, #0
 800046e:	9001      	str	r0, [sp, #4]
 8000470:	9002      	str	r0, [sp, #8]
 8000472:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000474:	a901      	add	r1, sp, #4
 8000476:	f008 fe61 	bl	800913c <BSP_TS_GetState>
 800047a:	b140      	cbz	r0, 800048e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000480:	f383 8811 	msr	BASEPRI, r3
 8000484:	f3bf 8f6f 	isb	sy
 8000488:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800048c:	e7fe      	b.n	800048c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800048e:	9b01      	ldr	r3, [sp, #4]
 8000490:	b913      	cbnz	r3, 8000498 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000492:	2000      	movs	r0, #0
}
 8000494:	b005      	add	sp, #20
 8000496:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800049c:	9b03      	ldr	r3, [sp, #12]
 800049e:	6023      	str	r3, [r4, #0]
        return true;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e7f7      	b.n	8000494 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

080004a4 <_ZN20STM32TouchControllerD0Ev>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4604      	mov	r4, r0
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <_ZN20STM32TouchControllerD0Ev+0x18>)
 80004aa:	6003      	str	r3, [r0, #0]
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 80004ae:	6003      	str	r3, [r0, #0]
 80004b0:	2104      	movs	r1, #4
 80004b2:	f020 f81c 	bl	80204ee <_ZdlPvj>
 80004b6:	4620      	mov	r0, r4
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	08021c84 	.word	0x08021c84
 80004c0:	08021c6c 	.word	0x08021c6c

080004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80004c4:	b508      	push	{r3, lr}
    switch (id)
 80004c6:	2803      	cmp	r0, #3
 80004c8:	d80e      	bhi.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 80004ca:	e8df f000 	tbb	[pc, r0]
 80004ce:	0e02      	.short	0x0e02
 80004d0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	4815      	ldr	r0, [pc, #84]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004e4:	f009 fcc9 	bl	8009e7a <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004e8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f009 fcbd 	bl	8009e7a <HAL_GPIO_WritePin>
        break;
 8000500:	e7f2      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8000504:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000508:	fab2 f282 	clz	r2, r2
 800050c:	0952      	lsrs	r2, r2, #5
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 8000514:	f009 fcb1 	bl	8009e7a <HAL_GPIO_WritePin>
        break;
 8000518:	e7e6      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 800051c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000520:	fab2 f282 	clz	r2, r2
 8000524:	0952      	lsrs	r2, r2, #5
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 800052c:	f009 fca5 	bl	8009e7a <HAL_GPIO_WritePin>
}
 8000530:	e7da      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000532:	bf00      	nop
 8000534:	24000160 	.word	0x24000160
 8000538:	58021c00 	.word	0x58021c00
 800053c:	58022000 	.word	0x58022000

08000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000540:	b508      	push	{r3, lr}
    switch (id)
 8000542:	2803      	cmp	r0, #3
 8000544:	d80e      	bhi.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000546:	e8df f000 	tbb	[pc, r0]
 800054a:	0e02      	.short	0x0e02
 800054c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b103      	cbz	r3, 8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000556:	2001      	movs	r0, #1
 8000558:	4602      	mov	r2, r0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000560:	f009 fc8b 	bl	8009e7a <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000564:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000568:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056c:	b903      	cbnz	r3, 8000570 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800056e:	2000      	movs	r0, #0
 8000570:	4602      	mov	r2, r0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f009 fc7f 	bl	8009e7a <HAL_GPIO_WritePin>
        break;
 800057c:	e7f2      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000584:	b133      	cbz	r3, 8000594 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800058e:	f009 fc74 	bl	8009e7a <HAL_GPIO_WritePin>
        break;
 8000592:	e7e7      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000594:	2200      	movs	r2, #0
 8000596:	e7f7      	b.n	8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800059a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800059e:	b133      	cbz	r3, 80005ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 80005a8:	f009 fc67 	bl	8009e7a <HAL_GPIO_WritePin>
}
 80005ac:	e7da      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80005ae:	2200      	movs	r2, #0
 80005b0:	e7f7      	b.n	80005a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 80005b2:	bf00      	nop
 80005b4:	24000160 	.word	0x24000160
 80005b8:	58021c00 	.word	0x58021c00
 80005bc:	58022000 	.word	0x58022000

080005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80005c0:	b508      	push	{r3, lr}
    switch (id)
 80005c2:	2803      	cmp	r0, #3
 80005c4:	d808      	bhi.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005c6:	e8df f000 	tbb	[pc, r0]
 80005ca:	0802      	.short	0x0802
 80005cc:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005d4:	f009 fc57 	bl	8009e86 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005d8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005e0:	f009 fc51 	bl	8009e86 <HAL_GPIO_TogglePin>
        break;
 80005e4:	e7f8      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005ec:	f009 fc4b 	bl	8009e86 <HAL_GPIO_TogglePin>
        break;
 80005f0:	e7f2      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005f8:	f009 fc45 	bl	8009e86 <HAL_GPIO_TogglePin>
}
 80005fc:	e7ec      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005fe:	bf00      	nop
 8000600:	58021c00 	.word	0x58021c00
 8000604:	58022000 	.word	0x58022000

08000608 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8000608:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800060c:	2301      	movs	r3, #1
 800060e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000612:	4770      	bx	lr

08000614 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000614:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8000616:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800061a:	b123      	cbz	r3, 8000626 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 800061c:	6840      	ldr	r0, [r0, #4]
 800061e:	6803      	ldr	r3, [r0, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8000624:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8000626:	2000      	movs	r0, #0
 8000628:	e7fc      	b.n	8000624 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0800062a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800062a:	2000      	movs	r0, #0
 800062c:	4770      	bx	lr
	...

08000630 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000630:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000632:	3900      	subs	r1, #0
 8000634:	bf18      	it	ne
 8000636:	2101      	movne	r1, #1
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800063a:	7019      	strb	r1, [r3, #0]
    }
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2400c853 	.word	0x2400c853

08000644 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000644:	2000      	movs	r0, #0
 8000646:	4770      	bx	lr

08000648 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000648:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800064a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800064c:	b10b      	cbz	r3, 8000652 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800064e:	4608      	mov	r0, r1
 8000650:	4798      	blx	r3
        }
    }
 8000652:	bd08      	pop	{r3, pc}

08000654 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000658:	4770      	bx	lr

0800065a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800065a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800065c:	6840      	ldr	r0, [r0, #4]
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4798      	blx	r3
    }
 8000664:	bd08      	pop	{r3, pc}
	...

08000668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000668:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800066c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000670:	429a      	cmp	r2, r3
 8000672:	d00c      	beq.n	800068e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b9ab      	cbnz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800067c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000680:	8818      	ldrh	r0, [r3, #0]
 8000682:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000684:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b143      	cbz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000696:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800069a:	8818      	ldrh	r0, [r3, #0]
 800069c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800069e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
        }
    }
 80006a6:	4770      	bx	lr
 80006a8:	2400c84c 	.word	0x2400c84c
 80006ac:	2400c84a 	.word	0x2400c84a
 80006b0:	2400c848 	.word	0x2400c848

080006b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <_ZN11TouchGFXHALD1Ev+0x10>)
 80006b6:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <_ZN11TouchGFXHALD1Ev+0x14>)
 80006ba:	6002      	str	r2, [r0, #0]
    {
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <_ZN11TouchGFXHALD1Ev+0x18>)
 80006be:	6002      	str	r2, [r0, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	08021e14 	.word	0x08021e14
 80006c8:	08022424 	.word	0x08022424
 80006cc:	08023758 	.word	0x08023758

080006d0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006d0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006d2:	f001 fc55 	bl	8001f80 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006d6:	bd08      	pop	{r3, pc}

080006d8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006d8:	b508      	push	{r3, lr}
 80006da:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e2:	4798      	blx	r3
    enableInterrupts();
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006e8:	4620      	mov	r0, r4
 80006ea:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006ec:	f000 f920 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f4:	4620      	mov	r0, r4
 80006f6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006fe:	f009 fbbc 	bl	8009e7a <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000702:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	4628      	mov	r0, r5
 800070a:	f009 fbb6 	bl	8009e7a <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f008 fe16 	bl	8009340 <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2102      	movs	r1, #2
 8000718:	4628      	mov	r0, r5
 800071a:	f009 fbae 	bl	8009e7a <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800071e:	f000 f907 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000726:	4620      	mov	r0, r4
 8000728:	4798      	blx	r3
    for (;;)
 800072a:	e7f8      	b.n	800071e <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 800072c:	58022800 	.word	0x58022800
 8000730:	58020000 	.word	0x58020000

08000734 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000734:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000736:	f001 f97d 	bl	8001a34 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800073a:	bd08      	pop	{r3, pc}

0800073c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800073c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800073e:	f001 f97f 	bl	8001a40 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000742:	bd08      	pop	{r3, pc}

08000744 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000744:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000746:	f001 fc43 	bl	8001fd0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000756:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800075a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800075e:	e000      	b.n	8000762 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000760:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000762:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000766:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800076a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800076e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000774:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000778:	4613      	mov	r3, r2
 800077a:	3a01      	subs	r2, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f2      	bne.n	8000766 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	2800      	cmp	r0, #0
 8000784:	d1ec      	bne.n	8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000794:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000796:	f001 f90b 	bl	80019b0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800079a:	bd08      	pop	{r3, pc}

0800079c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800079c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800079e:	f001 f911 	bl	80019c4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80007a4:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80007a6:	f001 f917 	bl	80019d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80007aa:	bd08      	pop	{r3, pc}

080007ac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80007ac:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80007ae:	f001 f927 	bl	8001a00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80007b2:	bd08      	pop	{r3, pc}

080007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007b4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007b6:	b161      	cbz	r1, 80007d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007b8:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80007ba:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80007bc:	3a00      	subs	r2, #0
 80007be:	bf18      	it	ne
 80007c0:	2201      	movne	r2, #1
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80007c4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80007c6:	6802      	ldr	r2, [r0, #0]
 80007c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4790      	blx	r2
    }
 80007d0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007dc:	f01f feb6 	bl	802054c <__assert_func>
 80007e0:	2400c852 	.word	0x2400c852
 80007e4:	08021c94 	.word	0x08021c94
 80007e8:	08021ccc 	.word	0x08021ccc
 80007ec:	08021d1c 	.word	0x08021d1c

080007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007f0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d808      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4293      	cmp	r3, r2
 8000800:	d804      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000804:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000808:	801a      	strh	r2, [r3, #0]
    }
 800080a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000810:	219e      	movs	r1, #158	; 0x9e
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000814:	f01f fe9a 	bl	802054c <__assert_func>
 8000818:	2400c848 	.word	0x2400c848
 800081c:	2400c84a 	.word	0x2400c84a
 8000820:	2400c84e 	.word	0x2400c84e
 8000824:	2400c850 	.word	0x2400c850
 8000828:	08021d64 	.word	0x08021d64
 800082c:	08021dc8 	.word	0x08021dc8
 8000830:	08021d1c 	.word	0x08021d1c

08000834 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000838:	f012 fa4c 	bl	8012cd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000842:	4620      	mov	r0, r4
 8000844:	4798      	blx	r3
    }
 8000846:	bd10      	pop	{r4, pc}

08000848 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000848:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800084a:	f011 fc9c 	bl	8012186 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800084e:	bd08      	pop	{r3, pc}

08000850 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000856:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <_ZN11TouchGFXHALD0Ev+0x20>)
 800085a:	6003      	str	r3, [r0, #0]
    {
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_ZN11TouchGFXHALD0Ev+0x24>)
 800085e:	6003      	str	r3, [r0, #0]
 8000860:	217c      	movs	r1, #124	; 0x7c
 8000862:	f01f fe44 	bl	80204ee <_ZdlPvj>
 8000866:	4620      	mov	r0, r4
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	08021e14 	.word	0x08021e14
 8000870:	08022424 	.word	0x08022424
 8000874:	08023758 	.word	0x08023758

08000878 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000878:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4608      	mov	r0, r1
 8000880:	f00d fc70 	bl	800e164 <osSemaphoreNew>
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000886:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000888:	b140      	cbz	r0, 800089c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f00d fd27 	bl	800e2e2 <osMessageQueueNew>
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000896:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000898:	b130      	cbz	r0, 80008a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800089a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008a0:	2128      	movs	r1, #40	; 0x28
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008a4:	f01f fe52 	bl	802054c <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008ac:	212c      	movs	r1, #44	; 0x2c
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008b0:	f01f fe4c 	bl	802054c <__assert_func>
 80008b4:	24000174 	.word	0x24000174
 80008b8:	24000170 	.word	0x24000170
 80008bc:	08021ee4 	.word	0x08021ee4
 80008c0:	08021f30 	.word	0x08021f30
 80008c4:	08021f60 	.word	0x08021f60
 80008c8:	08021fc0 	.word	0x08021fc0

080008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80008cc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80008ce:	f04f 31ff 	mov.w	r1, #4294967295
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f00d fca1 	bl	800e21c <osSemaphoreAcquire>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000174 	.word	0x24000174

080008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008e0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008e2:	4b02      	ldr	r3, [pc, #8]	; (80008ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f00d fccd 	bl	800e284 <osSemaphoreRelease>
}
 80008ea:	bd08      	pop	{r3, pc}
 80008ec:	24000174 	.word	0x24000174

080008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008f0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	f00d fc90 	bl	800e21c <osSemaphoreAcquire>
}
 80008fc:	bd08      	pop	{r3, pc}
 80008fe:	bf00      	nop
 8000900:	24000174 	.word	0x24000174

08000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000904:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f00d fcbb 	bl	800e284 <osSemaphoreRelease>
}
 800090e:	bd08      	pop	{r3, pc}
 8000910:	24000174 	.word	0x24000174

08000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000914:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	461a      	mov	r2, r3
 800091a:	4903      	ldr	r1, [pc, #12]	; (8000928 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	f00d fd2b 	bl	800e37a <osMessageQueuePut>
}
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	24000004 	.word	0x24000004
 800092c:	24000170 	.word	0x24000170

08000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000934:	4c07      	ldr	r4, [pc, #28]	; (8000954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000936:	2300      	movs	r3, #0
 8000938:	461a      	mov	r2, r3
 800093a:	a901      	add	r1, sp, #4
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f00d fd5c 	bl	800e3fa <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2200      	movs	r2, #0
 8000948:	a901      	add	r1, sp, #4
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f00d fd55 	bl	800e3fa <osMessageQueueGet>
}
 8000950:	b002      	add	sp, #8
 8000952:	bd10      	pop	{r4, pc}
 8000954:	24000170 	.word	0x24000170

08000958 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000958:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800095a:	6803      	ldr	r3, [r0, #0]
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4798      	blx	r3
    }
 8000960:	bd08      	pop	{r3, pc}

08000962 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000962:	2001      	movs	r0, #1
 8000964:	4770      	bx	lr

08000966 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000966:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	4798      	blx	r3
    }
 800096e:	bd08      	pop	{r3, pc}

08000970 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000970:	b508      	push	{r3, lr}
        return instance;
 8000972:	4b03      	ldr	r3, [pc, #12]	; (8000980 <DMA2D_XferCpltCallback+0x10>)
 8000974:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	6803      	ldr	r3, [r0, #0]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800097e:	bd08      	pop	{r3, pc}
 8000980:	2400c854 	.word	0x2400c854

08000984 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <_ZN8STM32DMAD1Ev+0x24>)
 8000986:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_ZN8STM32DMAD1Ev+0x28>)
 800098a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800098e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000996:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_ZN8STM32DMAD1Ev+0x2c>)
 800099c:	60c2      	str	r2, [r0, #12]
    {
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_ZN8STM32DMAD1Ev+0x30>)
 80009a0:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_ZN8STM32DMAD1Ev+0x34>)
 80009a4:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 80009a6:	4770      	bx	lr
 80009a8:	080221a0 	.word	0x080221a0
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	08023880 	.word	0x08023880
 80009b4:	0802217c 	.word	0x0802217c
 80009b8:	08023830 	.word	0x08023830

080009bc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80009bc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <_ZN8STM32DMA10initializeEv+0x40>)
 80009c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009c4:	f042 0210 	orr.w	r2, r2, #16
 80009c8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80009cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009d0:	f002 0210 	and.w	r2, r2, #16
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009da:	f042 0210 	orr.w	r2, r2, #16
 80009de:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009e2:	f022 0210 	bic.w	r2, r2, #16
 80009e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_ZN8STM32DMA10initializeEv+0x44>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN8STM32DMA10initializeEv+0x48>)
 80009ec:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009f6:	b002      	add	sp, #8
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	58024400 	.word	0x58024400
 8000a00:	240018a4 	.word	0x240018a4
 8000a04:	08000971 	.word	0x08000971
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000a0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a10:	4770      	bx	lr

08000a12 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000a12:	b510      	push	{r4, lr}
 8000a14:	4604      	mov	r4, r0
}
 8000a16:	f7ff ffb5 	bl	8000984 <_ZN8STM32DMAD1Ev>
 8000a1a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f01f fd65 	bl	80204ee <_ZdlPvj>
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd10      	pop	{r4, pc}

08000a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000a28:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000a2a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d809      	bhi.n	8000a44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a30:	e8df f003 	tbb	[pc, r3]
 8000a34:	080e1006 	.word	0x080e1006
 8000a38:	10080808 	.word	0x10080808
 8000a3c:	1010      	.short	0x1010
 8000a3e:	10          	.byte	0x10
 8000a3f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a40:	2002      	movs	r0, #2
        break;
 8000a42:	e008      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a48:	2187      	movs	r1, #135	; 0x87
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a4c:	f01f fd7e 	bl	802054c <__assert_func>
    switch (format)
 8000a50:	2000      	movs	r0, #0
 8000a52:	e000      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a54:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a58:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a5a:	8aca      	ldrh	r2, [r1, #22]
 8000a5c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a66:	690a      	ldr	r2, [r1, #16]
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a6a:	8b4a      	ldrh	r2, [r1, #26]
 8000a6c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a70:	eba2 020c 	sub.w	r2, r2, ip
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a76:	680b      	ldr	r3, [r1, #0]
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d008      	beq.n	8000a8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a7e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a84:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a8a:	601a      	str	r2, [r3, #0]
    }
}
 8000a8c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a8e:	8b4a      	ldrh	r2, [r1, #26]
 8000a90:	8a8b      	ldrh	r3, [r1, #20]
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a96:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a98:	8b4a      	ldrh	r2, [r1, #26]
 8000a9a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a9e:	eba2 020c 	sub.w	r2, r2, ip
 8000aa2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000aa4:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000aa6:	7f08      	ldrb	r0, [r1, #28]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000aaa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000ab2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab4:	690a      	ldr	r2, [r1, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab8:	690a      	ldr	r2, [r1, #16]
 8000aba:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e7e4      	b.n	8000a8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000ac2:	bf00      	nop
 8000ac4:	08022004 	.word	0x08022004
 8000ac8:	08022020 	.word	0x08022020
 8000acc:	0802206c 	.word	0x0802206c
 8000ad0:	52001000 	.word	0x52001000
 8000ad4:	00030201 	.word	0x00030201
 8000ad8:	00010009 	.word	0x00010009
 8000adc:	00020201 	.word	0x00020201

08000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ae2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ae4:	2b0b      	cmp	r3, #11
 8000ae6:	d815      	bhi.n	8000b14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ae8:	e8df f003 	tbb	[pc, r3]
 8000aec:	141a1c06 	.word	0x141a1c06
 8000af0:	12141414 	.word	0x12141414
 8000af4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000afa:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d820      	bhi.n	8000b42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000b00:	e8df f003 	tbb	[pc, r3]
 8000b04:	1f252712 	.word	0x1f252712
 8000b08:	1d1f1f1f 	.word	0x1d1f1f1f
 8000b0c:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b10:	2005      	movs	r0, #5
        break;
 8000b12:	e7f2      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000b14:	4b75      	ldr	r3, [pc, #468]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b16:	4a76      	ldr	r2, [pc, #472]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b18:	2166      	movs	r1, #102	; 0x66
 8000b1a:	4876      	ldr	r0, [pc, #472]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b1c:	f01f fd16 	bl	802054c <__assert_func>
    switch (format)
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ea      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e7e8      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000b28:	2402      	movs	r4, #2
    switch (format)
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d815      	bhi.n	8000b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000b2e:	e8df f003 	tbb	[pc, r3]
 8000b32:	1c12      	.short	0x1c12
 8000b34:	1414141a 	.word	0x1414141a
 8000b38:	1c1c1c14 	.word	0x1c1c1c14
 8000b3c:	1c          	.byte	0x1c
 8000b3d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b3e:	2405      	movs	r4, #5
        break;
 8000b40:	e7f3      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b44:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b46:	2166      	movs	r1, #102	; 0x66
 8000b48:	486a      	ldr	r0, [pc, #424]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b4a:	f01f fcff 	bl	802054c <__assert_func>
    switch (format)
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e7eb      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b52:	2401      	movs	r4, #1
 8000b54:	e7e9      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b56:	2502      	movs	r5, #2
        break;
 8000b58:	e008      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b5e:	2187      	movs	r1, #135	; 0x87
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b62:	f01f fcf3 	bl	802054c <__assert_func>
    switch (format)
 8000b66:	2500      	movs	r5, #0
 8000b68:	e000      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b6a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b6c:	8b4a      	ldrh	r2, [r1, #26]
 8000b6e:	8a8b      	ldrh	r3, [r1, #20]
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b76:	8b4a      	ldrh	r2, [r1, #26]
 8000b78:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b7c:	eba2 020c 	sub.w	r2, r2, ip
 8000b80:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b82:	8b0a      	ldrh	r2, [r1, #24]
 8000b84:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b88:	eba2 020c 	sub.w	r2, r2, ip
 8000b8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b8e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b90:	8aca      	ldrh	r2, [r1, #22]
 8000b92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b96:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b9a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b9c:	690a      	ldr	r2, [r1, #16]
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000ba0:	684a      	ldr	r2, [r1, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	2b80      	cmp	r3, #128	; 0x80
 8000ba8:	d036      	beq.n	8000c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000baa:	d813      	bhi.n	8000bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d07c      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb0:	2b40      	cmp	r3, #64	; 0x40
 8000bb2:	d07a      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	f040 8085 	bne.w	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bba:	7f0b      	ldrb	r3, [r1, #28]
 8000bbc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bc0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bc6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bc8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bca:	690a      	ldr	r2, [r1, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bd0:	601a      	str	r2, [r3, #0]
        break;
 8000bd2:	e020      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d010      	beq.n	8000bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d171      	bne.n	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be0:	7f0b      	ldrb	r3, [r1, #28]
 8000be2:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bea:	61da      	str	r2, [r3, #28]
 8000bec:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bee:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf2:	690a      	ldr	r2, [r1, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bf6:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bf8:	601a      	str	r2, [r3, #0]
        break;
 8000bfa:	e00c      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bfc:	7f0b      	ldrb	r3, [r1, #28]
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000c00:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0e:	690a      	ldr	r2, [r1, #16]
 8000c10:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000c18:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c1a:	7f0b      	ldrb	r3, [r1, #28]
 8000c1c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c26:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c28:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c2a:	6908      	ldr	r0, [r1, #16]
 8000c2c:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000c2e:	1d10      	adds	r0, r2, #4
 8000c30:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	b18b      	cbz	r3, 8000c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d12c      	bne.n	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c3a:	7f0b      	ldrb	r3, [r1, #28]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d027      	beq.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c40:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c44:	69c4      	ldr	r4, [r0, #28]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c48:	4023      	ands	r3, r4
 8000c4a:	8852      	ldrh	r2, [r2, #2]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	61c3      	str	r3, [r0, #28]
                break;
 8000c58:	e009      	b.n	8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c5a:	4928      	ldr	r1, [pc, #160]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c5c:	69c8      	ldr	r0, [r1, #28]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c60:	4003      	ands	r3, r0
 8000c62:	8852      	ldrh	r2, [r2, #2]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c6a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c6c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	69d3      	ldr	r3, [r2, #28]
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f013 0f20 	tst.w	r3, #32
 8000c80:	d1fa      	bne.n	8000c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c88:	b159      	cbz	r1, 8000ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e7c2      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c90:	2100      	movs	r1, #0
 8000c92:	e7d6      	b.n	8000c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c98:	f240 1101 	movw	r1, #257	; 0x101
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c9e:	f01f fc55 	bl	802054c <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7b5      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000caa:	7f0b      	ldrb	r3, [r1, #28]
 8000cac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cb0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000cb8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cba:	690a      	ldr	r2, [r1, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000cc0:	601a      	str	r2, [r3, #0]
        break;
 8000cc2:	e7a8      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cc4:	7f0b      	ldrb	r3, [r1, #28]
 8000cc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cca:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cd0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cd2:	7f4a      	ldrb	r2, [r1, #29]
 8000cd4:	7f8b      	ldrb	r3, [r1, #30]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d003      	beq.n	8000ce2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e799      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ce4:	f240 2201 	movw	r2, #513	; 0x201
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	e794      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cec:	08022004 	.word	0x08022004
 8000cf0:	080220cc 	.word	0x080220cc
 8000cf4:	0802206c 	.word	0x0802206c
 8000cf8:	08022020 	.word	0x08022020
 8000cfc:	52001000 	.word	0x52001000
 8000d00:	00020201 	.word	0x00020201
 8000d04:	00020009 	.word	0x00020009
 8000d08:	0002000a 	.word	0x0002000a
 8000d0c:	ffff00ef 	.word	0xffff00ef
 8000d10:	08022118 	.word	0x08022118
 8000d14:	08022134 	.word	0x08022134
 8000d18:	00010201 	.word	0x00010201

08000d1c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_ZN8STM32DMAC1Ev+0x38>)
 8000d22:	f840 3b0c 	str.w	r3, [r0], #12
 8000d26:	6068      	str	r0, [r5, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	722b      	strb	r3, [r5, #8]
 8000d2c:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000d2e:	462c      	mov	r4, r5
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d32:	f844 3b20 	str.w	r3, [r4], #32
 8000d36:	2260      	movs	r2, #96	; 0x60
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f012 f90d 	bl	8012f58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d3e:	235f      	movs	r3, #95	; 0x5f
 8000d40:	e003      	b.n	8000d4a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60e2      	str	r2, [r4, #12]
 8000d46:	3424      	adds	r4, #36	; 0x24
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	daf9      	bge.n	8000d42 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d4e:	4628      	mov	r0, r5
 8000d50:	bd38      	pop	{r3, r4, r5, pc}
 8000d52:	bf00      	nop
 8000d54:	08023830 	.word	0x08023830
 8000d58:	080221a0 	.word	0x080221a0

08000d5c <_ZN8touchgfx9TypedTextD1Ev>:
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <_ZN8touchgfx9TypedTextD1Ev+0x8>)
 8000d5e:	6003      	str	r3, [r0, #0]
    }
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	080221f0 	.word	0x080221f0

08000d68 <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d68:	4b01      	ldr	r3, [pc, #4]	; (8000d70 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d6a:	6003      	str	r3, [r0, #0]
    }
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	08022214 	.word	0x08022214

08000d74 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d74:	4770      	bx	lr

08000d76 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d76:	4770      	bx	lr

08000d78 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d78:	4770      	bx	lr

08000d7a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d7a:	4770      	bx	lr

08000d7c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d7c:	4770      	bx	lr

08000d7e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d7e:	4770      	bx	lr

08000d80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d82:	6003      	str	r3, [r0, #0]
    }
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	08022224 	.word	0x08022224

08000d8c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d8c:	4770      	bx	lr

08000d8e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d8e:	4770      	bx	lr

08000d90 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d90:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d94:	6808      	ldr	r0, [r1, #0]
 8000d96:	6849      	ldr	r1, [r1, #4]
 8000d98:	c303      	stmia	r3!, {r0, r1}
    }
 8000d9a:	4770      	bx	lr

08000d9c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000da0:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000da4:	b158      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4798      	blx	r3
 8000dac:	b138      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000dae:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000db2:	6803      	ldr	r3, [r0, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000dc2:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000dc6:	6002      	str	r2, [r0, #0]
    {
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000dca:	6002      	str	r2, [r0, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	08022264 	.word	0x08022264
 8000dd4:	08023b80 	.word	0x08023b80
 8000dd8:	08022224 	.word	0x08022224

08000ddc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000dde:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000de2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000de8:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000dee:	6002      	str	r2, [r0, #0]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000df6:	6002      	str	r2, [r0, #0]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	080222c8 	.word	0x080222c8
 8000e00:	080222b0 	.word	0x080222b0
 8000e04:	0802224c 	.word	0x0802224c
 8000e08:	08022264 	.word	0x08022264
 8000e0c:	08023b80 	.word	0x08023b80
 8000e10:	08022224 	.word	0x08022224

08000e14 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <_ZN19FrontendApplicationD1Ev+0x24>)
 8000e16:	6002      	str	r2, [r0, #0]
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <_ZN19FrontendApplicationD1Ev+0x28>)
 8000e1a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000e1e:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000e24:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <_ZN19FrontendApplicationD1Ev+0x34>)
 8000e2a:	6002      	str	r2, [r0, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <_ZN19FrontendApplicationD1Ev+0x38>)
 8000e2e:	6002      	str	r2, [r0, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000e32:	6002      	str	r2, [r0, #0]
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	08022314 	.word	0x08022314
 8000e3c:	080222c8 	.word	0x080222c8
 8000e40:	080222b0 	.word	0x080222b0
 8000e44:	0802224c 	.word	0x0802224c
 8000e48:	08022264 	.word	0x08022264
 8000e4c:	08023b80 	.word	0x08023b80
 8000e50:	08022224 	.word	0x08022224

08000e54 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e54:	4a02      	ldr	r2, [pc, #8]	; (8000e60 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e56:	6002      	str	r2, [r0, #0]
    {
 8000e58:	4a02      	ldr	r2, [pc, #8]	; (8000e64 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e5a:	6002      	str	r2, [r0, #0]
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	08022360 	.word	0x08022360
 8000e64:	08022214 	.word	0x08022214

08000e68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e68:	4a02      	ldr	r2, [pc, #8]	; (8000e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e6a:	6002      	str	r2, [r0, #0]
    {
 8000e6c:	4a02      	ldr	r2, [pc, #8]	; (8000e78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e6e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	080222b0 	.word	0x080222b0
 8000e78:	0802224c 	.word	0x0802224c

08000e7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e80:	200c      	movs	r0, #12
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e88:	0089      	lsls	r1, r1, #2
 8000e8a:	3108      	adds	r1, #8
    }
 8000e8c:	4408      	add	r0, r1
 8000e8e:	4770      	bx	lr

08000e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e94:	0089      	lsls	r1, r1, #2
 8000e96:	3108      	adds	r1, #8
    }
 8000e98:	4408      	add	r0, r1
 8000e9a:	4770      	bx	lr

08000e9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	4770      	bx	lr

08000ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ea0:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ea6:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 8000eaa:	fb03 f101 	mul.w	r1, r3, r1
 8000eae:	3108      	adds	r1, #8
    }
 8000eb0:	4408      	add	r0, r1
 8000eb2:	4770      	bx	lr

08000eb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb4:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 8000eb8:	fb03 f101 	mul.w	r1, r3, r1
 8000ebc:	3108      	adds	r1, #8
    }
 8000ebe:	4408      	add	r0, r1
 8000ec0:	4770      	bx	lr

08000ec2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4770      	bx	lr

08000ec6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	4770      	bx	lr

08000eca <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eca:	0109      	lsls	r1, r1, #4
 8000ecc:	3108      	adds	r1, #8
    }
 8000ece:	4408      	add	r0, r1
 8000ed0:	4770      	bx	lr

08000ed2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ed2:	0109      	lsls	r1, r1, #4
 8000ed4:	3108      	adds	r1, #8
    }
 8000ed6:	4408      	add	r0, r1
 8000ed8:	4770      	bx	lr

08000eda <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000eda:	b508      	push	{r3, lr}
 8000edc:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000ede:	6841      	ldr	r1, [r0, #4]
 8000ee0:	68c2      	ldr	r2, [r0, #12]
 8000ee2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ee6:	f012 0f01 	tst.w	r2, #1
 8000eea:	d102      	bne.n	8000ef2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	4798      	blx	r3
    }
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000ef6:	f851 200c 	ldr.w	r2, [r1, ip]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	58d3      	ldr	r3, [r2, r3]
 8000efe:	e7f6      	b.n	8000eee <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000f00 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000f00:	6843      	ldr	r3, [r0, #4]
 8000f02:	b14b      	cbz	r3, 8000f18 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000f04:	6883      	ldr	r3, [r0, #8]
 8000f06:	b10b      	cbz	r3, 8000f0c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4770      	bx	lr
 8000f0c:	68c3      	ldr	r3, [r0, #12]
 8000f0e:	f013 0f01 	tst.w	r3, #1
 8000f12:	d003      	beq.n	8000f1c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000f14:	2001      	movs	r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	2000      	movs	r0, #0
    }
 8000f1e:	4770      	bx	lr

08000f20 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000f20:	b510      	push	{r4, lr}
 8000f22:	4604      	mov	r4, r0
    {
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000f26:	6003      	str	r3, [r0, #0]
    }
 8000f28:	2104      	movs	r1, #4
 8000f2a:	f01f fae0 	bl	80204ee <_ZdlPvj>
 8000f2e:	4620      	mov	r0, r4
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	bf00      	nop
 8000f34:	08022224 	.word	0x08022224

08000f38 <_ZN16FrontendHeapBaseD0Ev>:
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000f3e:	6003      	str	r3, [r0, #0]
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f42:	6003      	str	r3, [r0, #0]
 8000f44:	2114      	movs	r1, #20
 8000f46:	f01f fad2 	bl	80204ee <_ZdlPvj>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	bd10      	pop	{r4, pc}
 8000f4e:	bf00      	nop
 8000f50:	08022360 	.word	0x08022360
 8000f54:	08022214 	.word	0x08022214

08000f58 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
    {
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f5e:	6003      	str	r3, [r0, #0]
    }
 8000f60:	2114      	movs	r1, #20
 8000f62:	f01f fac4 	bl	80204ee <_ZdlPvj>
 8000f66:	4620      	mov	r0, r4
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	bf00      	nop
 8000f6c:	08022214 	.word	0x08022214

08000f70 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
    {
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <_ZN8touchgfx9TypedTextD0Ev+0x14>)
 8000f76:	6003      	str	r3, [r0, #0]
    }
 8000f78:	2108      	movs	r1, #8
 8000f7a:	f01f fab8 	bl	80204ee <_ZdlPvj>
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	bf00      	nop
 8000f84:	080221f0 	.word	0x080221f0

08000f88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f8e:	6003      	str	r3, [r0, #0]
    {
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f92:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f94:	2110      	movs	r1, #16
 8000f96:	f01f faaa 	bl	80204ee <_ZdlPvj>
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	bf00      	nop
 8000fa0:	080222b0 	.word	0x080222b0
 8000fa4:	0802224c 	.word	0x0802224c

08000fa8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000fb2:	6003      	str	r3, [r0, #0]
    {
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000fb6:	6003      	str	r3, [r0, #0]
 8000fb8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000fbc:	f01f fa97 	bl	80204ee <_ZdlPvj>
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	08022264 	.word	0x08022264
 8000fc8:	08023b80 	.word	0x08023b80
 8000fcc:	08022224 	.word	0x08022224

08000fd0 <_ZN23FrontendApplicationBaseD0Ev>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000fda:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000fe0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000fe6:	6003      	str	r3, [r0, #0]
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000fea:	6003      	str	r3, [r0, #0]
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000fee:	6003      	str	r3, [r0, #0]
 8000ff0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000ff4:	f01f fa7b 	bl	80204ee <_ZdlPvj>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	080222c8 	.word	0x080222c8
 8001000:	080222b0 	.word	0x080222b0
 8001004:	0802224c 	.word	0x0802224c
 8001008:	08022264 	.word	0x08022264
 800100c:	08023b80 	.word	0x08023b80
 8001010:	08022224 	.word	0x08022224

08001014 <_ZN19FrontendApplicationD0Ev>:
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <_ZN19FrontendApplicationD0Ev+0x30>)
 800101a:	6003      	str	r3, [r0, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZN19FrontendApplicationD0Ev+0x34>)
 800101e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <_ZN19FrontendApplicationD0Ev+0x38>)
 8001022:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8001028:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <_ZN19FrontendApplicationD0Ev+0x40>)
 800102e:	6003      	str	r3, [r0, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <_ZN19FrontendApplicationD0Ev+0x44>)
 8001032:	6003      	str	r3, [r0, #0]
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <_ZN19FrontendApplicationD0Ev+0x48>)
 8001036:	6003      	str	r3, [r0, #0]
 8001038:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800103c:	f01f fa57 	bl	80204ee <_ZdlPvj>
 8001040:	4620      	mov	r0, r4
 8001042:	bd10      	pop	{r4, pc}
 8001044:	08022314 	.word	0x08022314
 8001048:	080222c8 	.word	0x080222c8
 800104c:	080222b0 	.word	0x080222b0
 8001050:	0802224c 	.word	0x0802224c
 8001054:	08022264 	.word	0x08022264
 8001058:	08023b80 	.word	0x08023b80
 800105c:	08022224 	.word	0x08022224

08001060 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001060:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 8001062:	4608      	mov	r0, r1
 8001064:	f002 fdac 	bl	8003bc0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001068:	bd08      	pop	{r3, pc}

0800106a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800106a:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 800106c:	f002 fda8 	bl	8003bc0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001070:	bd08      	pop	{r3, pc}

08001072 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001072:	b510      	push	{r4, lr}
 8001074:	4604      	mov	r4, r0
    {
        model.tick();
 8001076:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800107a:	f004 f9f6 	bl	800546a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800107e:	4620      	mov	r0, r4
 8001080:	f014 fbbe 	bl	8015800 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001084:	bd10      	pop	{r4, pc}
	...

08001088 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800108e:	6003      	str	r3, [r0, #0]
 8001090:	f010 fd53 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001094:	4620      	mov	r0, r4
 8001096:	bd10      	pop	{r4, pc}
 8001098:	080223dc 	.word	0x080223dc

0800109c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800109c:	b510      	push	{r4, lr}
 800109e:	4604      	mov	r4, r0
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010a2:	6003      	str	r3, [r0, #0]
 80010a4:	f010 fd49 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010a8:	2114      	movs	r1, #20
 80010aa:	4620      	mov	r0, r4
 80010ac:	f01f fa1f 	bl	80204ee <_ZdlPvj>
 80010b0:	4620      	mov	r0, r4
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	080223dc 	.word	0x080223dc

080010b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010b8:	b510      	push	{r4, lr}
 80010ba:	4604      	mov	r4, r0
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010be:	6003      	str	r3, [r0, #0]
 80010c0:	f010 fd3b 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010c4:	4620      	mov	r0, r4
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	080223a8 	.word	0x080223a8

080010cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 80010d2:	6003      	str	r3, [r0, #0]
 80010d4:	f010 fd31 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010d8:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 80010dc:	4620      	mov	r0, r4
 80010de:	f01f fa06 	bl	80204ee <_ZdlPvj>
 80010e2:	4620      	mov	r0, r4
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	080223a8 	.word	0x080223a8

080010ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	4604      	mov	r4, r0
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010f2:	6003      	str	r3, [r0, #0]
 80010f4:	f010 fd21 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010f8:	4620      	mov	r0, r4
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	08022374 	.word	0x08022374

08001100 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001106:	6003      	str	r3, [r0, #0]
 8001108:	f010 fd17 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800110c:	2118      	movs	r1, #24
 800110e:	4620      	mov	r0, r4
 8001110:	f01f f9ed 	bl	80204ee <_ZdlPvj>
 8001114:	4620      	mov	r0, r4
 8001116:	bd10      	pop	{r4, pc}
 8001118:	08022374 	.word	0x08022374

0800111c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800111c:	b510      	push	{r4, lr}
 800111e:	4604      	mov	r4, r0
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <_ZN12FrontendHeapD1Ev+0x64>)
 8001122:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <_ZN12FrontendHeapD1Ev+0x68>)
 8001126:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
    virtual ~FrontendApplicationBase() { }
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <_ZN12FrontendHeapD1Ev+0x6c>)
 800112c:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <_ZN12FrontendHeapD1Ev+0x70>)
 8001132:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
    {
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <_ZN12FrontendHeapD1Ev+0x74>)
 8001138:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_ZN12FrontendHeapD1Ev+0x78>)
 800113e:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_ZN12FrontendHeapD1Ev+0x7c>)
 8001144:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <_ZN12FrontendHeapD1Ev+0x80>)
 800114a:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <_ZN12FrontendHeapD1Ev+0x84>)
 8001150:	f8c0 3310 	str.w	r3, [r0, #784]	; 0x310
 8001154:	f500 7044 	add.w	r0, r0, #784	; 0x310
 8001158:	f010 fcef 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800115c:	4620      	mov	r0, r4
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_ZN12FrontendHeapD1Ev+0x88>)
 8001160:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001164:	f010 fce9 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001168:	4620      	mov	r0, r4
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <_ZN12FrontendHeapD1Ev+0x8c>)
 800116c:	f840 3f14 	str.w	r3, [r0, #20]!
 8001170:	f010 fce3 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <_ZN12FrontendHeapD1Ev+0x90>)
 8001176:	6023      	str	r3, [r4, #0]
    {
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <_ZN12FrontendHeapD1Ev+0x94>)
 800117a:	6023      	str	r3, [r4, #0]
 800117c:	4620      	mov	r0, r4
 800117e:	bd10      	pop	{r4, pc}
 8001180:	08022410 	.word	0x08022410
 8001184:	08022314 	.word	0x08022314
 8001188:	080222c8 	.word	0x080222c8
 800118c:	080222b0 	.word	0x080222b0
 8001190:	0802224c 	.word	0x0802224c
 8001194:	08022264 	.word	0x08022264
 8001198:	08023b80 	.word	0x08023b80
 800119c:	08022224 	.word	0x08022224
 80011a0:	080223dc 	.word	0x080223dc
 80011a4:	080223a8 	.word	0x080223a8
 80011a8:	08022374 	.word	0x08022374
 80011ac:	08022360 	.word	0x08022360
 80011b0:	08022214 	.word	0x08022214

080011b4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80011b4:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 80011b6:	4c18      	ldr	r4, [pc, #96]	; (8001218 <__tcf_0+0x64>)
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <__tcf_0+0x68>)
 80011ba:	6023      	str	r3, [r4, #0]
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <__tcf_0+0x6c>)
 80011be:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <__tcf_0+0x70>)
 80011c4:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <__tcf_0+0x74>)
 80011ca:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
    {
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <__tcf_0+0x78>)
 80011d0:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <__tcf_0+0x7c>)
 80011d6:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <__tcf_0+0x80>)
 80011dc:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <__tcf_0+0x84>)
 80011e2:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <__tcf_0+0x88>)
 80011e8:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
 80011ec:	f504 7044 	add.w	r0, r4, #784	; 0x310
 80011f0:	f010 fca3 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011f4:	4620      	mov	r0, r4
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <__tcf_0+0x8c>)
 80011f8:	f840 3f2c 	str.w	r3, [r0, #44]!
 80011fc:	f010 fc9d 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001200:	4620      	mov	r0, r4
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <__tcf_0+0x90>)
 8001204:	f840 3f14 	str.w	r3, [r0, #20]!
 8001208:	f010 fc97 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <__tcf_0+0x94>)
 800120e:	6023      	str	r3, [r4, #0]
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <__tcf_0+0x98>)
 8001212:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 8001214:	bd10      	pop	{r4, pc}
 8001216:	bf00      	nop
 8001218:	2400017c 	.word	0x2400017c
 800121c:	08022410 	.word	0x08022410
 8001220:	08022314 	.word	0x08022314
 8001224:	080222c8 	.word	0x080222c8
 8001228:	080222b0 	.word	0x080222b0
 800122c:	0802224c 	.word	0x0802224c
 8001230:	08022264 	.word	0x08022264
 8001234:	08023b80 	.word	0x08023b80
 8001238:	08022224 	.word	0x08022224
 800123c:	080223dc 	.word	0x080223dc
 8001240:	080223a8 	.word	0x080223a8
 8001244:	08022374 	.word	0x08022374
 8001248:	08022360 	.word	0x08022360
 800124c:	08022214 	.word	0x08022214

08001250 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <_ZN12FrontendHeapD0Ev+0x70>)
 8001256:	6003      	str	r3, [r0, #0]
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <_ZN12FrontendHeapD0Ev+0x74>)
 800125a:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <_ZN12FrontendHeapD0Ev+0x78>)
 8001260:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <_ZN12FrontendHeapD0Ev+0x7c>)
 8001266:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
    {
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <_ZN12FrontendHeapD0Ev+0x80>)
 800126c:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <_ZN12FrontendHeapD0Ev+0x84>)
 8001272:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <_ZN12FrontendHeapD0Ev+0x88>)
 8001278:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <_ZN12FrontendHeapD0Ev+0x8c>)
 800127e:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <_ZN12FrontendHeapD0Ev+0x90>)
 8001284:	f8c0 3310 	str.w	r3, [r0, #784]	; 0x310
 8001288:	f500 7044 	add.w	r0, r0, #784	; 0x310
 800128c:	f010 fc55 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001290:	4620      	mov	r0, r4
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <_ZN12FrontendHeapD0Ev+0x94>)
 8001294:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001298:	f010 fc4f 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800129c:	4620      	mov	r0, r4
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <_ZN12FrontendHeapD0Ev+0x98>)
 80012a0:	f840 3f14 	str.w	r3, [r0, #20]!
 80012a4:	f010 fc49 	bl	8011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_ZN12FrontendHeapD0Ev+0x9c>)
 80012aa:	6023      	str	r3, [r4, #0]
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_ZN12FrontendHeapD0Ev+0xa0>)
 80012ae:	6023      	str	r3, [r4, #0]
 80012b0:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80012b4:	4620      	mov	r0, r4
 80012b6:	f01f f91a 	bl	80204ee <_ZdlPvj>
 80012ba:	4620      	mov	r0, r4
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	bf00      	nop
 80012c0:	08022410 	.word	0x08022410
 80012c4:	08022314 	.word	0x08022314
 80012c8:	080222c8 	.word	0x080222c8
 80012cc:	080222b0 	.word	0x080222b0
 80012d0:	0802224c 	.word	0x0802224c
 80012d4:	08022264 	.word	0x08022264
 80012d8:	08023b80 	.word	0x08023b80
 80012dc:	08022224 	.word	0x08022224
 80012e0:	080223dc 	.word	0x080223dc
 80012e4:	080223a8 	.word	0x080223a8
 80012e8:	08022374 	.word	0x08022374
 80012ec:	08022360 	.word	0x08022360
 80012f0:	08022214 	.word	0x08022214

080012f4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80012f8:	f002 f98a 	bl	8003610 <_ZN14BitmapDatabase11getInstanceEv>
 80012fc:	4605      	mov	r5, r0
 80012fe:	f002 f98b 	bl	8003618 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001302:	4601      	mov	r1, r0
 8001304:	2400      	movs	r4, #0
 8001306:	9400      	str	r4, [sp, #0]
 8001308:	4623      	mov	r3, r4
 800130a:	4622      	mov	r2, r4
 800130c:	4628      	mov	r0, r5
 800130e:	f016 ffff 	bl	8018310 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <touchgfx_init+0xc0>)
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <touchgfx_init+0xc4>)
 8001316:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001318:	4620      	mov	r0, r4
 800131a:	f003 f86f 	bl	80043fc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800131e:	4827      	ldr	r0, [pc, #156]	; (80013bc <touchgfx_init+0xc8>)
 8001320:	f016 fea4 	bl	801806c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <touchgfx_init+0xcc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f3bf 8f5b 	dmb	ish
 800132c:	f013 0f01 	tst.w	r3, #1
 8001330:	d004      	beq.n	800133c <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001332:	4824      	ldr	r0, [pc, #144]	; (80013c4 <touchgfx_init+0xd0>)
 8001334:	f7ff f9cc 	bl	80006d0 <_ZN11TouchGFXHAL10initializeEv>
}
 8001338:	b003      	add	sp, #12
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <touchgfx_init+0xcc>)
 800133e:	f01f f8d8 	bl	80204f2 <__cxa_guard_acquire>
 8001342:	2800      	cmp	r0, #0
 8001344:	d0f5      	beq.n	8001332 <touchgfx_init+0x3e>
          frontendApplication(app)
 8001346:	4c20      	ldr	r4, [pc, #128]	; (80013c8 <touchgfx_init+0xd4>)
 8001348:	4620      	mov	r0, r4
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <touchgfx_init+0xd8>)
 800134c:	f840 3b14 	str.w	r3, [r0], #20
 8001350:	6060      	str	r0, [r4, #4]
 8001352:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8001356:	60a7      	str	r7, [r4, #8]
 8001358:	f504 7644 	add.w	r6, r4, #784	; 0x310
 800135c:	60e6      	str	r6, [r4, #12]
 800135e:	f504 754a 	add.w	r5, r4, #808	; 0x328
 8001362:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <touchgfx_init+0xdc>)
 8001366:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <touchgfx_init+0xe0>)
 800136a:	6023      	str	r3, [r4, #0]
 800136c:	f010 fbe6 	bl	8011b3c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <touchgfx_init+0xe4>)
 8001372:	6163      	str	r3, [r4, #20]
 8001374:	4638      	mov	r0, r7
 8001376:	f010 fbe1 	bl	8011b3c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <touchgfx_init+0xe8>)
 800137c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800137e:	4630      	mov	r0, r6
 8001380:	f010 fbdc 	bl	8011b3c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <touchgfx_init+0xec>)
 8001386:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
 800138a:	f504 7649 	add.w	r6, r4, #804	; 0x324
 800138e:	4630      	mov	r0, r6
 8001390:	f004 f868 	bl	8005464 <_ZN5ModelC1Ev>
 8001394:	4622      	mov	r2, r4
 8001396:	4631      	mov	r1, r6
 8001398:	4628      	mov	r0, r5
 800139a:	f004 f859 	bl	8005450 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 800139e:	4628      	mov	r0, r5
 80013a0:	f002 fc0e 	bl	8003bc0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 80013a4:	480f      	ldr	r0, [pc, #60]	; (80013e4 <touchgfx_init+0xf0>)
 80013a6:	f01f f8ef 	bl	8020588 <atexit>
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <touchgfx_init+0xcc>)
 80013ac:	f01f f8ad 	bl	802050a <__cxa_guard_release>
 80013b0:	e7bf      	b.n	8001332 <touchgfx_init+0x3e>
 80013b2:	bf00      	nop
 80013b4:	2400c8b0 	.word	0x2400c8b0
 80013b8:	2400147c 	.word	0x2400147c
 80013bc:	24000008 	.word	0x24000008
 80013c0:	24000178 	.word	0x24000178
 80013c4:	24001400 	.word	0x24001400
 80013c8:	2400017c 	.word	0x2400017c
 80013cc:	08022214 	.word	0x08022214
 80013d0:	08022360 	.word	0x08022360
 80013d4:	08022410 	.word	0x08022410
 80013d8:	08022374 	.word	0x08022374
 80013dc:	080223a8 	.word	0x080223a8
 80013e0:	080223dc 	.word	0x080223dc
 80013e4:	080011b5 	.word	0x080011b5

080013e8 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 80013e8:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80013ea:	4802      	ldr	r0, [pc, #8]	; (80013f4 <touchgfx_taskEntry+0xc>)
 80013ec:	f7ff f974 	bl	80006d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80013f0:	bd08      	pop	{r3, pc}
 80013f2:	bf00      	nop
 80013f4:	24001400 	.word	0x24001400

080013f8 <_Z41__static_initialization_and_destruction_0ii>:
 80013f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013fc:	4604      	mov	r4, r0
 80013fe:	460d      	mov	r5, r1
 8001400:	2801      	cmp	r0, #1
 8001402:	d007      	beq.n	8001414 <_Z41__static_initialization_and_destruction_0ii+0x1c>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8001404:	b924      	cbnz	r4, 8001410 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8001406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140a:	429d      	cmp	r5, r3
 800140c:	f000 8279 	beq.w	8001902 <_Z41__static_initialization_and_destruction_0ii+0x50a>
}
 8001410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001418:	4299      	cmp	r1, r3
 800141a:	d1f3      	bne.n	8001404 <_Z41__static_initialization_and_destruction_0ii+0xc>
    {27, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 4,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {28, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 5,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {29, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 6,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},

    {30, Rect(SPACE_X, KEY_ROW_4_Y, SPACE_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_SPACE_ID}
};
 800141c:	4be9      	ldr	r3, [pc, #932]	; (80017c4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001422:	f04f 0c0c 	mov.w	ip, #12
 8001426:	f8a3 c002 	strh.w	ip, [r3, #2]
 800142a:	2064      	movs	r0, #100	; 0x64
 800142c:	8098      	strh	r0, [r3, #4]
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	80da      	strh	r2, [r3, #6]
 8001432:	811a      	strh	r2, [r3, #8]
 8001434:	2106      	movs	r1, #6
 8001436:	8159      	strh	r1, [r3, #10]
 8001438:	2602      	movs	r6, #2
 800143a:	731e      	strb	r6, [r3, #12]
 800143c:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001440:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001444:	8218      	strh	r0, [r3, #16]
 8001446:	825a      	strh	r2, [r3, #18]
 8001448:	829a      	strh	r2, [r3, #20]
 800144a:	82d9      	strh	r1, [r3, #22]
 800144c:	f04f 0603 	mov.w	r6, #3
 8001450:	761e      	strb	r6, [r3, #24]
 8001452:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001456:	835e      	strh	r6, [r3, #26]
 8001458:	8398      	strh	r0, [r3, #28]
 800145a:	83da      	strh	r2, [r3, #30]
 800145c:	841a      	strh	r2, [r3, #32]
 800145e:	8459      	strh	r1, [r3, #34]	; 0x22
 8001460:	f04f 0704 	mov.w	r7, #4
 8001464:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 8001468:	f04f 088a 	mov.w	r8, #138	; 0x8a
 800146c:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001470:	8518      	strh	r0, [r3, #40]	; 0x28
 8001472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001474:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001476:	85d9      	strh	r1, [r3, #46]	; 0x2e
 8001478:	f04f 0705 	mov.w	r7, #5
 800147c:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
 8001480:	27b4      	movs	r7, #180	; 0xb4
 8001482:	865f      	strh	r7, [r3, #50]	; 0x32
 8001484:	8698      	strh	r0, [r3, #52]	; 0x34
 8001486:	86da      	strh	r2, [r3, #54]	; 0x36
 8001488:	871a      	strh	r2, [r3, #56]	; 0x38
 800148a:	8759      	strh	r1, [r3, #58]	; 0x3a
 800148c:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 8001490:	f04f 0ede 	mov.w	lr, #222	; 0xde
 8001494:	f8a3 e03e 	strh.w	lr, [r3, #62]	; 0x3e
 8001498:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 800149c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80014a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80014a4:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
 80014a8:	f04f 0907 	mov.w	r9, #7
 80014ac:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 80014b0:	f44f 7984 	mov.w	r9, #264	; 0x108
 80014b4:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80014b8:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
 80014bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80014c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80014c4:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
 80014c8:	f04f 0b08 	mov.w	fp, #8
 80014cc:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80014d0:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80014d4:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80014d8:	f8a3 0058 	strh.w	r0, [r3, #88]	; 0x58
 80014dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80014e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80014e4:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 80014e8:	f04f 0e09 	mov.w	lr, #9
 80014ec:	f883 e060 	strb.w	lr, [r3, #96]	; 0x60
 80014f0:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80014f4:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80014f8:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 80014fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001500:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001504:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
 8001508:	f04f 0e0a 	mov.w	lr, #10
 800150c:	f883 e06c 	strb.w	lr, [r3, #108]	; 0x6c
 8001510:	f44f 7ec3 	mov.w	lr, #390	; 0x186
 8001514:	f8a3 e06e 	strh.w	lr, [r3, #110]	; 0x6e
 8001518:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
 800151c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001520:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001524:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
 8001528:	f04f 090b 	mov.w	r9, #11
 800152c:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001530:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001534:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8001538:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 800153c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001540:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001544:	f8a3 1082 	strh.w	r1, [r3, #130]	; 0x82
 8001548:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
 800154c:	f8a3 c086 	strh.w	ip, [r3, #134]	; 0x86
 8001550:	208e      	movs	r0, #142	; 0x8e
 8001552:	f8a3 0088 	strh.w	r0, [r3, #136]	; 0x88
 8001556:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800155a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800155e:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
 8001562:	f04f 060d 	mov.w	r6, #13
 8001566:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 800156a:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 800156e:	f8a3 0094 	strh.w	r0, [r3, #148]	; 0x94
 8001572:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001576:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800157a:	f8a3 109a 	strh.w	r1, [r3, #154]	; 0x9a
 800157e:	f04f 0a0e 	mov.w	sl, #14
 8001582:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8001586:	f04f 0660 	mov.w	r6, #96	; 0x60
 800158a:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 800158e:	f8a3 00a0 	strh.w	r0, [r3, #160]	; 0xa0
 8001592:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001596:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800159a:	f8a3 10a6 	strh.w	r1, [r3, #166]	; 0xa6
 800159e:	f04f 0a0f 	mov.w	sl, #15
 80015a2:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 80015a6:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 80015aa:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80015ae:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80015b2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80015b6:	f8a3 10b2 	strh.w	r1, [r3, #178]	; 0xb2
 80015ba:	f04f 0a10 	mov.w	sl, #16
 80015be:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80015c2:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80015c6:	f8a3 00b8 	strh.w	r0, [r3, #184]	; 0xb8
 80015ca:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80015ce:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80015d2:	f8a3 10be 	strh.w	r1, [r3, #190]	; 0xbe
 80015d6:	f04f 0a11 	mov.w	sl, #17
 80015da:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80015de:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80015e2:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80015e6:	f8a3 00c4 	strh.w	r0, [r3, #196]	; 0xc4
 80015ea:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80015ee:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80015f2:	f8a3 10ca 	strh.w	r1, [r3, #202]	; 0xca
 80015f6:	f04f 0a12 	mov.w	sl, #18
 80015fa:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80015fe:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001602:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001606:	f8a3 00d0 	strh.w	r0, [r3, #208]	; 0xd0
 800160a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 800160e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001612:	f8a3 10d6 	strh.w	r1, [r3, #214]	; 0xd6
 8001616:	f04f 0a13 	mov.w	sl, #19
 800161a:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 800161e:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001622:	4656      	mov	r6, sl
 8001624:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8001628:	f8a3 00dc 	strh.w	r0, [r3, #220]	; 0xdc
 800162c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001630:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001634:	f8a3 10e2 	strh.w	r1, [r3, #226]	; 0xe2
 8001638:	f04f 0a14 	mov.w	sl, #20
 800163c:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001640:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001644:	f8a3 00e8 	strh.w	r0, [r3, #232]	; 0xe8
 8001648:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800164c:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001650:	f8a3 10ee 	strh.w	r1, [r3, #238]	; 0xee
 8001654:	f04f 0a15 	mov.w	sl, #21
 8001658:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 800165c:	f8a3 e0f2 	strh.w	lr, [r3, #242]	; 0xf2
 8001660:	f8a3 00f4 	strh.w	r0, [r3, #244]	; 0xf4
 8001664:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001668:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800166c:	f8a3 10fa 	strh.w	r1, [r3, #250]	; 0xfa
 8001670:	f04f 0a16 	mov.w	sl, #22
 8001674:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8001678:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 800167c:	f8a3 0100 	strh.w	r0, [r3, #256]	; 0x100
 8001680:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001684:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8001688:	f8a3 1106 	strh.w	r1, [r3, #262]	; 0x106
 800168c:	2017      	movs	r0, #23
 800168e:	f883 0108 	strb.w	r0, [r3, #264]	; 0x108
 8001692:	f04f 0060 	mov.w	r0, #96	; 0x60
 8001696:	f8a3 010a 	strh.w	r0, [r3, #266]	; 0x10a
 800169a:	20b8      	movs	r0, #184	; 0xb8
 800169c:	f8a3 010c 	strh.w	r0, [r3, #268]	; 0x10c
 80016a0:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 80016a4:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 80016a8:	f8a3 1112 	strh.w	r1, [r3, #274]	; 0x112
 80016ac:	f04f 0918 	mov.w	r9, #24
 80016b0:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 80016b4:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80016b8:	f8a3 0118 	strh.w	r0, [r3, #280]	; 0x118
 80016bc:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80016c0:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80016c4:	f8a3 111e 	strh.w	r1, [r3, #286]	; 0x11e
 80016c8:	f04f 0819 	mov.w	r8, #25
 80016cc:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80016d0:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80016d4:	f8a3 0124 	strh.w	r0, [r3, #292]	; 0x124
 80016d8:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80016dc:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80016e0:	f8a3 112a 	strh.w	r1, [r3, #298]	; 0x12a
 80016e4:	271a      	movs	r7, #26
 80016e6:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80016ea:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80016ee:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80016f2:	f8a3 0130 	strh.w	r0, [r3, #304]	; 0x130
 80016f6:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80016fa:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80016fe:	f8a3 1136 	strh.w	r1, [r3, #310]	; 0x136
 8001702:	271b      	movs	r7, #27
 8001704:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8001708:	f44f 7a84 	mov.w	sl, #264	; 0x108
 800170c:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001710:	f8a3 013c 	strh.w	r0, [r3, #316]	; 0x13c
 8001714:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8001718:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 800171c:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
 8001720:	271c      	movs	r7, #28
 8001722:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001726:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 800172a:	f8a3 0148 	strh.w	r0, [r3, #328]	; 0x148
 800172e:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001732:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001736:	f8a3 114e 	strh.w	r1, [r3, #334]	; 0x14e
 800173a:	271d      	movs	r7, #29
 800173c:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001740:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001744:	f8a3 0154 	strh.w	r0, [r3, #340]	; 0x154
 8001748:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 800174c:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001750:	f8a3 115a 	strh.w	r1, [r3, #346]	; 0x15a
 8001754:	211e      	movs	r1, #30
 8001756:	f883 115c 	strb.w	r1, [r3, #348]	; 0x15c
 800175a:	f04f 0160 	mov.w	r1, #96	; 0x60
 800175e:	f8a3 115e 	strh.w	r1, [r3, #350]	; 0x15e
 8001762:	21e2      	movs	r1, #226	; 0xe2
 8001764:	f8a3 1160 	strh.w	r1, [r3, #352]	; 0x160
 8001768:	f44f 7690 	mov.w	r6, #288	; 0x120
 800176c:	f8a3 6162 	strh.w	r6, [r3, #354]	; 0x162
 8001770:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001774:	f04f 0608 	mov.w	r6, #8
 8001778:	f8a3 6166 	strh.w	r6, [r3, #358]	; 0x166
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800177e:	f8a3 c000 	strh.w	ip, [r3]
 8001782:	8058      	strh	r0, [r3, #2]
 8001784:	274e      	movs	r7, #78	; 0x4e
 8001786:	809f      	strh	r7, [r3, #4]
 8001788:	80da      	strh	r2, [r3, #6]
{
    {Rect(CAPS_LOCK_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_CAPSLOCK_ID},    // caps-lock
    {Rect(BACKSPACE_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_BACKSPACE_ID},   // backspace    
    {Rect(MODE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_MODE_ID},        // mode
    {Rect(DONE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_DONE_ID}         // done
};
 800178a:	2600      	movs	r6, #0
 800178c:	609e      	str	r6, [r3, #8]
 800178e:	f04f 0804 	mov.w	r8, #4
 8001792:	f8a3 800c 	strh.w	r8, [r3, #12]
 8001796:	f8a3 e010 	strh.w	lr, [r3, #16]
 800179a:	8258      	strh	r0, [r3, #18]
 800179c:	829f      	strh	r7, [r3, #20]
 800179e:	82da      	strh	r2, [r3, #22]
 80017a0:	619e      	str	r6, [r3, #24]
 80017a2:	f04f 0003 	mov.w	r0, #3
 80017a6:	8398      	strh	r0, [r3, #28]
 80017a8:	f8a3 c020 	strh.w	ip, [r3, #32]
 80017ac:	8459      	strh	r1, [r3, #34]	; 0x22
 80017ae:	849f      	strh	r7, [r3, #36]	; 0x24
 80017b0:	84da      	strh	r2, [r3, #38]	; 0x26
 80017b2:	629e      	str	r6, [r3, #40]	; 0x28
 80017b4:	f04f 0007 	mov.w	r0, #7
 80017b8:	8598      	strh	r0, [r3, #44]	; 0x2c
 80017ba:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
 80017be:	8659      	strh	r1, [r3, #50]	; 0x32
 80017c0:	869f      	strh	r7, [r3, #52]	; 0x34
 80017c2:	e003      	b.n	80017cc <_Z41__static_initialization_and_destruction_0ii+0x3d4>
 80017c4:	24001508 	.word	0x24001508
 80017c8:	240005fc 	.word	0x240005fc
 80017cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80017ce:	639e      	str	r6, [r3, #56]	; 0x38
 80017d0:	f04f 0205 	mov.w	r2, #5
 80017d4:	879a      	strh	r2, [r3, #60]	; 0x3c
 80017d6:	4621      	mov	r1, r4
 80017d8:	3340      	adds	r3, #64	; 0x40
 80017da:	2900      	cmp	r1, #0
 80017dc:	db0b      	blt.n	80017f6 <_Z41__static_initialization_and_destruction_0ii+0x3fe>
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	805a      	strh	r2, [r3, #2]
 80017ec:	809a      	strh	r2, [r3, #4]
 80017ee:	80da      	strh	r2, [r3, #6]
 80017f0:	3310      	adds	r3, #16
 80017f2:	3901      	subs	r1, #1
 80017f4:	e7f1      	b.n	80017da <_Z41__static_initialization_and_destruction_0ii+0x3e2>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80017f6:	4b51      	ldr	r3, [pc, #324]	; (800193c <_Z41__static_initialization_and_destruction_0ii+0x544>)
 80017f8:	2205      	movs	r2, #5
 80017fa:	825a      	strh	r2, [r3, #18]
 80017fc:	222d      	movs	r2, #45	; 0x2d
 80017fe:	829a      	strh	r2, [r3, #20]
 8001800:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001804:	82da      	strh	r2, [r3, #22]
 8001806:	2246      	movs	r2, #70	; 0x46
 8001808:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 800180a:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 800180c:	61da      	str	r2, [r3, #28]
 800180e:	2600      	movs	r6, #0
 8001810:	841e      	strh	r6, [r3, #32]
        : color(col)
 8001812:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
 8001818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
class TouchController
 800181e:	4f49      	ldr	r7, [pc, #292]	; (8001944 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8001820:	4b49      	ldr	r3, [pc, #292]	; (8001948 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001822:	603b      	str	r3, [r7, #0]
{
public:

    STM32TouchController() {}
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8001826:	603b      	str	r3, [r7, #0]
static STM32DMA dma;
 8001828:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8001990 <_Z41__static_initialization_and_destruction_0ii+0x598>
 800182c:	4648      	mov	r0, r9
 800182e:	f7ff fa75 	bl	8000d1c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001832:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8001984 <_Z41__static_initialization_and_destruction_0ii+0x58c>
 8001836:	4640      	mov	r0, r8
 8001838:	f018 ff84 	bl	801a744 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 800183c:	4b44      	ldr	r3, [pc, #272]	; (8001950 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 800183e:	4a45      	ldr	r2, [pc, #276]	; (8001954 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f8c3 9004 	str.w	r9, [r3, #4]
 8001846:	f8c3 8008 	str.w	r8, [r3, #8]
 800184a:	60df      	str	r7, [r3, #12]
 800184c:	611e      	str	r6, [r3, #16]
 800184e:	615e      	str	r6, [r3, #20]
 8001850:	619e      	str	r6, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001852:	839e      	strh	r6, [r3, #28]
 8001854:	83de      	strh	r6, [r3, #30]
 8001856:	841e      	strh	r6, [r3, #32]
 8001858:	845e      	strh	r6, [r3, #34]	; 0x22
 800185a:	849e      	strh	r6, [r3, #36]	; 0x24
 800185c:	84de      	strh	r6, [r3, #38]	; 0x26
 800185e:	851e      	strh	r6, [r3, #40]	; 0x28
 8001860:	f883 602a 	strb.w	r6, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001864:	62de      	str	r6, [r3, #44]	; 0x2c
 8001866:	861e      	strh	r6, [r3, #48]	; 0x30
 8001868:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
 800186c:	639e      	str	r6, [r3, #56]	; 0x38
 800186e:	63de      	str	r6, [r3, #60]	; 0x3c
 8001870:	641e      	str	r6, [r3, #64]	; 0x40
 8001872:	645e      	str	r6, [r3, #68]	; 0x44
 8001874:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800187e:	f883 604a 	strb.w	r6, [r3, #74]	; 0x4a
 8001882:	f883 604b 	strb.w	r6, [r3, #75]	; 0x4b
 8001886:	64de      	str	r6, [r3, #76]	; 0x4c
        : x(0), y(0), width(0), height(0)
 8001888:	f8a3 6050 	strh.w	r6, [r3, #80]	; 0x50
 800188c:	f8a3 6052 	strh.w	r6, [r3, #82]	; 0x52
 8001890:	f8a3 6054 	strh.w	r6, [r3, #84]	; 0x54
 8001894:	f8a3 6056 	strh.w	r6, [r3, #86]	; 0x56
 8001898:	659e      	str	r6, [r3, #88]	; 0x58
 800189a:	65de      	str	r6, [r3, #92]	; 0x5c
 800189c:	661e      	str	r6, [r3, #96]	; 0x60
 800189e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80018a2:	f883 6065 	strb.w	r6, [r3, #101]	; 0x65
 80018a6:	f883 6066 	strb.w	r6, [r3, #102]	; 0x66
 80018aa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80018ae:	f883 6068 	strb.w	r6, [r3, #104]	; 0x68
 80018b2:	f883 6069 	strb.w	r6, [r3, #105]	; 0x69
 80018b6:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
 80018ba:	f883 606b 	strb.w	r6, [r3, #107]	; 0x6b
 80018be:	f883 606c 	strb.w	r6, [r3, #108]	; 0x6c
 80018c2:	671e      	str	r6, [r3, #112]	; 0x70
 80018c4:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
 80018c8:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 80018cc:	f883 6076 	strb.w	r6, [r3, #118]	; 0x76
 80018d0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80018d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80018d8:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 80018da:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80018dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018e0:	491e      	ldr	r1, [pc, #120]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x564>)
 80018e2:	800a      	strh	r2, [r1, #0]
 80018e4:	491e      	ldr	r1, [pc, #120]	; (8001960 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 80018e6:	800a      	strh	r2, [r1, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80018e8:	f44f 7288 	mov.w	r2, #272	; 0x110
 80018ec:	491d      	ldr	r1, [pc, #116]	; (8001964 <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 80018ee:	800a      	strh	r2, [r1, #0]
 80018f0:	491d      	ldr	r1, [pc, #116]	; (8001968 <_Z41__static_initialization_and_destruction_0ii+0x570>)
 80018f2:	800a      	strh	r2, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <_Z41__static_initialization_and_destruction_0ii+0x574>)
 80018f6:	7016      	strb	r6, [r2, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 80018fa:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80018fc:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 80018fe:	601a      	str	r2, [r3, #0]
    }
 8001900:	e580      	b.n	8001404 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 8001906:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 800190a:	601a      	str	r2, [r3, #0]
    {
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 800190e:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId WIFIERRORSMALL = 5; // Saira_Medium_22_4bpp
    static const touchgfx::FontId WIFIBUTTON = 6;     // SairaSemiCondensed_Medium_18_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x580>)
 8001912:	4a1a      	ldr	r2, [pc, #104]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x584>)
 8001914:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 8001918:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800191e:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 8001920:	4a1a      	ldr	r2, [pc, #104]	; (800198c <_Z41__static_initialization_and_destruction_0ii+0x594>)
 8001922:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 8001924:	481a      	ldr	r0, [pc, #104]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 8001926:	f7ff f82d 	bl	8000984 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 800192e:	601a      	str	r2, [r3, #0]
    {
 8001930:	4a05      	ldr	r2, [pc, #20]	; (8001948 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001932:	601a      	str	r2, [r3, #0]
    {
 8001934:	4b01      	ldr	r3, [pc, #4]	; (800193c <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8001936:	4a02      	ldr	r2, [pc, #8]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 8001938:	61da      	str	r2, [r3, #28]
}
 800193a:	e569      	b.n	8001410 <_Z41__static_initialization_and_destruction_0ii+0x18>
 800193c:	24001480 	.word	0x24001480
 8001940:	080221f0 	.word	0x080221f0
 8001944:	2400065c 	.word	0x2400065c
 8001948:	08021c6c 	.word	0x08021c6c
 800194c:	08021c84 	.word	0x08021c84
 8001950:	24001400 	.word	0x24001400
 8001954:	08023758 	.word	0x08023758
 8001958:	2400c854 	.word	0x2400c854
 800195c:	2400c848 	.word	0x2400c848
 8001960:	2400c84e 	.word	0x2400c84e
 8001964:	2400c84a 	.word	0x2400c84a
 8001968:	2400c850 	.word	0x2400c850
 800196c:	2400c84c 	.word	0x2400c84c
 8001970:	08022424 	.word	0x08022424
 8001974:	08021e14 	.word	0x08021e14
 8001978:	24000008 	.word	0x24000008
 800197c:	080225a4 	.word	0x080225a4
 8001980:	08022200 	.word	0x08022200
 8001984:	240014b0 	.word	0x240014b0
 8001988:	08023e64 	.word	0x08023e64
 800198c:	08023b28 	.word	0x08023b28
 8001990:	24000660 	.word	0x24000660

08001994 <_GLOBAL__sub_I_touchgfx_init>:
 8001994:	b508      	push	{r3, lr}
 8001996:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fd2c 	bl	80013f8 <_Z41__static_initialization_and_destruction_0ii>
 80019a0:	bd08      	pop	{r3, pc}

080019a2 <_GLOBAL__sub_D_touchgfx_init>:
 80019a2:	b508      	push	{r3, lr}
 80019a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fd25 	bl	80013f8 <_Z41__static_initialization_and_destruction_0ii>
 80019ae:	bd08      	pop	{r3, pc}

080019b0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80019b2:	2290      	movs	r2, #144	; 0x90
 80019b4:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80019b8:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80019c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d0:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80019da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80019e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80019f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019f6:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001a00:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001a02:	68d3      	ldr	r3, [r2, #12]
 8001a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001a0e:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001a10:	6911      	ldr	r1, [r2, #16]
 8001a12:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001a16:	3901      	subs	r1, #1
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 8001a1a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001a1e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001a26:	4770      	bx	lr
 8001a28:	50001000 	.word	0x50001000
 8001a2c:	2400186c 	.word	0x2400186c
 8001a30:	2400186a 	.word	0x2400186a

08001a34 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001a34:	4b01      	ldr	r3, [pc, #4]	; (8001a3c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001a36:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8001a3a:	4770      	bx	lr
 8001a3c:	50001000 	.word	0x50001000

08001a40 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001a40:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8001a42:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001a46:	2201      	movs	r2, #1
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a4a:	4770      	bx	lr
 8001a4c:	50001000 	.word	0x50001000

08001a50 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a58:	d025      	beq.n	8001aa6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 8001a5a:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a64:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001a68:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a6c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001a70:	e000      	b.n	8001a74 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 8001a72:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a74:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a78:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001a7c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001a80:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001a84:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a86:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	3a01      	subs	r2, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f2      	bne.n	8001a78 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001a92:	1e43      	subs	r3, r0, #1
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d1ec      	bne.n	8001a72 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 8001a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a9c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ab4:	d025      	beq.n	8001b02 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 8001ab6:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001ac4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ac8:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001acc:	e000      	b.n	8001ad0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001ace:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ad0:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ad4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ad8:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001adc:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001ae0:	4908      	ldr	r1, [pc, #32]	; (8001b04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ae2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f2      	bne.n	8001ad4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 8001aee:	1e43      	subs	r3, r0, #1
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d1ec      	bne.n	8001ace <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001af8:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <_ZN20TouchGFXGeneratedHALD1Ev>:
 8001b08:	4a02      	ldr	r2, [pc, #8]	; (8001b14 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 8001b0a:	6002      	str	r2, [r0, #0]
 8001b0c:	4a02      	ldr	r2, [pc, #8]	; (8001b18 <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 8001b0e:	6002      	str	r2, [r0, #0]
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	08022424 	.word	0x08022424
 8001b18:	08023758 	.word	0x08023758

08001b1c <_Z41__static_initialization_and_destruction_0ii>:
            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
}
 8001b1c:	2801      	cmp	r0, #1
 8001b1e:	d006      	beq.n	8001b2e <_Z41__static_initialization_and_destruction_0ii+0x12>

/**
 * The layout for the CustomKeyboard.
 */
static const Keyboard::Layout layout =
 8001b20:	b920      	cbnz	r0, 8001b2c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8001b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b26:	4299      	cmp	r1, r3
 8001b28:	f000 8222 	beq.w	8001f70 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8001b2c:	4770      	bx	lr
 8001b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b32:	4299      	cmp	r1, r3
 8001b34:	d1f4      	bne.n	8001b20 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8001b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8001b3a:	4bf0      	ldr	r3, [pc, #960]	; (8001efc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001b40:	240c      	movs	r4, #12
 8001b42:	805c      	strh	r4, [r3, #2]
 8001b44:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8001b48:	f8a3 e004 	strh.w	lr, [r3, #4]
 8001b4c:	2224      	movs	r2, #36	; 0x24
 8001b4e:	80da      	strh	r2, [r3, #6]
 8001b50:	811a      	strh	r2, [r3, #8]
 8001b52:	f04f 0c06 	mov.w	ip, #6
 8001b56:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8001b5a:	2502      	movs	r5, #2
 8001b5c:	731d      	strb	r5, [r3, #12]
 8001b5e:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001b62:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001b66:	f8a3 e010 	strh.w	lr, [r3, #16]
 8001b6a:	825a      	strh	r2, [r3, #18]
 8001b6c:	829a      	strh	r2, [r3, #20]
 8001b6e:	f8a3 c016 	strh.w	ip, [r3, #22]
 8001b72:	f04f 0503 	mov.w	r5, #3
 8001b76:	761d      	strb	r5, [r3, #24]
 8001b78:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001b7c:	835e      	strh	r6, [r3, #26]
 8001b7e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001b82:	83da      	strh	r2, [r3, #30]
 8001b84:	841a      	strh	r2, [r3, #32]
 8001b86:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8001b8a:	f04f 0504 	mov.w	r5, #4
 8001b8e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8001b92:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8001b96:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001b9a:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8001b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001ba2:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8001ba6:	f04f 0505 	mov.w	r5, #5
 8001baa:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8001bae:	27b4      	movs	r7, #180	; 0xb4
 8001bb0:	865f      	strh	r7, [r3, #50]	; 0x32
 8001bb2:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8001bb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bb8:	871a      	strh	r2, [r3, #56]	; 0x38
 8001bba:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8001bbe:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8001bc2:	f04f 05de 	mov.w	r5, #222	; 0xde
 8001bc6:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8001bc8:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8001bcc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8001bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001bd4:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8001bd8:	f04f 0907 	mov.w	r9, #7
 8001bdc:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8001be0:	f44f 7984 	mov.w	r9, #264	; 0x108
 8001be4:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8001be8:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8001bec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8001bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8001bf4:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8001bf8:	f04f 0b08 	mov.w	fp, #8
 8001bfc:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8001c00:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8001c04:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8001c08:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8001c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8001c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c14:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8001c18:	2509      	movs	r5, #9
 8001c1a:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8001c1e:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8001c22:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8001c26:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8001c2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001c32:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8001c36:	250a      	movs	r5, #10
 8001c38:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8001c3c:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8001c40:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8001c44:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8001c48:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001c4c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001c50:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8001c54:	f04f 090b 	mov.w	r9, #11
 8001c58:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001c5c:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001c60:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8001c64:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8001c68:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001c6c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001c70:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8001c74:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8001c78:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8001c7c:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8001c80:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8001c84:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8001c88:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8001c8c:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8001c90:	f04f 060d 	mov.w	r6, #13
 8001c94:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8001c98:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8001c9c:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8001ca0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001ca4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8001ca8:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8001cac:	f04f 0a0e 	mov.w	sl, #14
 8001cb0:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8001cb4:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001cb8:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8001cbc:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8001cc0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001cc4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001cc8:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8001ccc:	f04f 0a0f 	mov.w	sl, #15
 8001cd0:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8001cd4:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8001cd8:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8001cdc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8001ce0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8001ce4:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8001ce8:	f04f 0a10 	mov.w	sl, #16
 8001cec:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8001cf0:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8001cf4:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8001cf8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8001cfc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8001d00:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8001d04:	f04f 0a11 	mov.w	sl, #17
 8001d08:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8001d0c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001d10:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8001d14:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8001d18:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8001d1c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001d20:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8001d24:	f04f 0a12 	mov.w	sl, #18
 8001d28:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8001d2c:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001d30:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001d34:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8001d38:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8001d3c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001d40:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8001d44:	f04f 0a13 	mov.w	sl, #19
 8001d48:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8001d4c:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001d50:	4656      	mov	r6, sl
 8001d52:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8001d56:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8001d5a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001d5e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001d62:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8001d66:	f04f 0a14 	mov.w	sl, #20
 8001d6a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001d6e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001d72:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8001d76:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8001d7a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001d7e:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8001d82:	f04f 0a15 	mov.w	sl, #21
 8001d86:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8001d8a:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8001d8e:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8001d92:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001d96:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8001d9a:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8001d9e:	f04f 0a16 	mov.w	sl, #22
 8001da2:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8001da6:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8001daa:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8001dae:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001db2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8001db6:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8001dba:	f04f 0e17 	mov.w	lr, #23
 8001dbe:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8001dc2:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8001dc6:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8001dca:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8001dce:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8001dd2:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8001dd6:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8001dda:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8001dde:	f04f 0918 	mov.w	r9, #24
 8001de2:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8001de6:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8001dea:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8001dee:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8001df2:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8001df6:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8001dfa:	f04f 0819 	mov.w	r8, #25
 8001dfe:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8001e02:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8001e06:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8001e0a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8001e0e:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8001e12:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8001e16:	271a      	movs	r7, #26
 8001e18:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8001e1c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001e20:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8001e24:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8001e28:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8001e2c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001e30:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8001e34:	271b      	movs	r7, #27
 8001e36:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8001e3a:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001e3e:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001e42:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8001e46:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8001e4a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8001e4e:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8001e52:	271c      	movs	r7, #28
 8001e54:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001e58:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8001e5c:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8001e60:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001e64:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001e68:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8001e6c:	271d      	movs	r7, #29
 8001e6e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001e72:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001e76:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8001e7a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8001e7e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001e82:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8001e86:	271e      	movs	r7, #30
 8001e88:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8001e8c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001e90:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8001e94:	26e2      	movs	r6, #226	; 0xe2
 8001e96:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8001e9a:	f44f 7790 	mov.w	r7, #288	; 0x120
 8001e9e:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8001ea2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001ea6:	f04f 0708 	mov.w	r7, #8
 8001eaa:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8001eb0:	801c      	strh	r4, [r3, #0]
 8001eb2:	f8a3 e002 	strh.w	lr, [r3, #2]
 8001eb6:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8001eba:	f8a3 c004 	strh.w	ip, [r3, #4]
 8001ebe:	80da      	strh	r2, [r3, #6]
};
 8001ec0:	2700      	movs	r7, #0
 8001ec2:	609f      	str	r7, [r3, #8]
 8001ec4:	f04f 0804 	mov.w	r8, #4
 8001ec8:	f8a3 800c 	strh.w	r8, [r3, #12]
 8001ecc:	821d      	strh	r5, [r3, #16]
 8001ece:	f8a3 e012 	strh.w	lr, [r3, #18]
 8001ed2:	f8a3 c014 	strh.w	ip, [r3, #20]
 8001ed6:	82da      	strh	r2, [r3, #22]
 8001ed8:	619f      	str	r7, [r3, #24]
 8001eda:	f04f 0e03 	mov.w	lr, #3
 8001ede:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001ee2:	841c      	strh	r4, [r3, #32]
 8001ee4:	845e      	strh	r6, [r3, #34]	; 0x22
 8001ee6:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8001eea:	84da      	strh	r2, [r3, #38]	; 0x26
 8001eec:	629f      	str	r7, [r3, #40]	; 0x28
 8001eee:	f04f 0407 	mov.w	r4, #7
 8001ef2:	859c      	strh	r4, [r3, #44]	; 0x2c
 8001ef4:	861d      	strh	r5, [r3, #48]	; 0x30
 8001ef6:	865e      	strh	r6, [r3, #50]	; 0x32
 8001ef8:	e004      	b.n	8001f04 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8001efa:	bf00      	nop
 8001efc:	24001700 	.word	0x24001700
 8001f00:	24001670 	.word	0x24001670
 8001f04:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8001f08:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f0a:	639f      	str	r7, [r3, #56]	; 0x38
 8001f0c:	f04f 0205 	mov.w	r2, #5
 8001f10:	879a      	strh	r2, [r3, #60]	; 0x3c
 8001f12:	4604      	mov	r4, r0
 8001f14:	3340      	adds	r3, #64	; 0x40
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	db0b      	blt.n	8001f32 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	805a      	strh	r2, [r3, #2]
 8001f28:	809a      	strh	r2, [r3, #4]
 8001f2a:	80da      	strh	r2, [r3, #6]
 8001f2c:	3310      	adds	r3, #16
 8001f2e:	3c01      	subs	r4, #1
 8001f30:	e7f1      	b.n	8001f16 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f34:	2205      	movs	r2, #5
 8001f36:	825a      	strh	r2, [r3, #18]
 8001f38:	222d      	movs	r2, #45	; 0x2d
 8001f3a:	829a      	strh	r2, [r3, #20]
 8001f3c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001f40:	82da      	strh	r2, [r3, #22]
 8001f42:	2246      	movs	r2, #70	; 0x46
 8001f44:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f48:	61da      	str	r2, [r3, #28]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	841a      	strh	r2, [r3, #32]
        : color(col)
 8001f4e:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
 8001f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8001f5a:	b918      	cbnz	r0, 8001f64 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f60:	4299      	cmp	r1, r3
 8001f62:	d001      	beq.n	8001f68 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8001f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f6c:	61da      	str	r2, [r3, #28]
 8001f6e:	e7f9      	b.n	8001f64 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f70:	4b01      	ldr	r3, [pc, #4]	; (8001f78 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f72:	4a02      	ldr	r2, [pc, #8]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f74:	61da      	str	r2, [r3, #28]
 8001f76:	4770      	bx	lr
 8001f78:	240016d0 	.word	0x240016d0
 8001f7c:	080221f0 	.word	0x080221f0

08001f80 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	4604      	mov	r4, r0
    HAL::initialize();
 8001f84:	f010 f955 	bl	8012232 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001f8c:	f013 fd22 	bl	80159d4 <_ZN8touchgfx11Application11getInstanceEv>
 8001f90:	4601      	mov	r1, r0
 8001f92:	4620      	mov	r0, r4
 8001f94:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	4a02      	ldr	r2, [pc, #8]	; (8001fa8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 8001fa0:	4902      	ldr	r1, [pc, #8]	; (8001fac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	47a8      	blx	r5
}
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	2409fa00 	.word	0x2409fa00
 8001fac:	24040000 	.word	0x24040000

08001fb0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 8001fb0:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 8001fb2:	f010 f925 	bl	8012200 <_ZN8touchgfx3HAL10beginFrameEv>
}
 8001fb6:	bd08      	pop	{r3, pc}

08001fb8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8001fb8:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 8001fba:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8001fbe:	b113      	cbz	r3, 8001fc6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001fc6:	f010 f927 	bl	8012218 <_ZN8touchgfx3HAL8endFrameEv>
}
 8001fca:	bd08      	pop	{r3, pc}
 8001fcc:	24001868 	.word	0x24001868

08001fd0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001fd0:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8001fd2:	f010 f8de 	bl	8012192 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001fde:	d021      	beq.n	8002024 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001fe8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001fec:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ff0:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001ff4:	e000      	b.n	8001ff8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8001ff6:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ff8:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ffc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002000:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8002004:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800200a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800200e:	4613      	mov	r3, r2
 8002010:	3a01      	subs	r2, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f2      	bne.n	8001ffc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8002016:	1e43      	subs	r3, r0, #1
 8002018:	2800      	cmp	r0, #0
 800201a:	d1ec      	bne.n	8001ff6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 800201c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002020:	f3bf 8f6f 	isb	sy
}
 8002024:	bd10      	pop	{r4, pc}
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 800202c:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800202e:	f010 fa1a 	bl	8012466 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8002032:	bd08      	pop	{r3, pc}

08002034 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8002034:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8002036:	f010 f8a6 	bl	8012186 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800203a:	bd08      	pop	{r3, pc}

0800203c <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800203c:	b510      	push	{r4, lr}
 800203e:	4604      	mov	r4, r0
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8002042:	6003      	str	r3, [r0, #0]
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8002046:	6003      	str	r3, [r0, #0]
 8002048:	217c      	movs	r1, #124	; 0x7c
 800204a:	f01e fa50 	bl	80204ee <_ZdlPvj>
 800204e:	4620      	mov	r0, r4
 8002050:	bd10      	pop	{r4, pc}
 8002052:	bf00      	nop
 8002054:	08022424 	.word	0x08022424
 8002058:	08023758 	.word	0x08023758

0800205c <HAL_LTDC_LineEventCallback>:
        return instance;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_LTDC_LineEventCallback+0x54>)
 800205e:	681b      	ldr	r3, [r3, #0]
        if (!HAL::getInstance())
 8002060:	b32b      	cbz	r3, 80020ae <HAL_LTDC_LineEventCallback+0x52>
    {
 8002062:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_LTDC_LineEventCallback+0x58>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <HAL_LTDC_LineEventCallback+0x5c>)
 800206a:	8811      	ldrh	r1, [r2, #0]
 800206c:	428b      	cmp	r3, r1
 800206e:	d00a      	beq.n	8002086 <HAL_LTDC_LineEventCallback+0x2a>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002070:	f008 fd60 	bl	800ab34 <HAL_LTDC_ProgramLineEvent>
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_LTDC_LineEventCallback+0x54>)
 8002076:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8002078:	6803      	ldr	r3, [r0, #0]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 800207e:	2000      	movs	r0, #0
 8002080:	f7fe fa5e 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002084:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_LTDC_LineEventCallback+0x60>)
 8002088:	8819      	ldrh	r1, [r3, #0]
 800208a:	f008 fd53 	bl	800ab34 <HAL_LTDC_ProgramLineEvent>
        return instance;
 800208e:	4c08      	ldr	r4, [pc, #32]	; (80020b0 <HAL_LTDC_LineEventCallback+0x54>)
 8002090:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002092:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002096:	3301      	adds	r3, #1
 8002098:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 800209c:	f7fe fc3a 	bl	8000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80020a0:	6820      	ldr	r0, [r4, #0]
 80020a2:	f010 fe17 	bl	8012cd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7fe fa0c 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80020ac:	e7ea      	b.n	8002084 <HAL_LTDC_LineEventCallback+0x28>
 80020ae:	4770      	bx	lr
 80020b0:	2400c854 	.word	0x2400c854
 80020b4:	50001000 	.word	0x50001000
 80020b8:	2400186c 	.word	0x2400186c
 80020bc:	2400186a 	.word	0x2400186a

080020c0 <_GLOBAL__sub_I__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
}
 80020c0:	b508      	push	{r3, lr}
 80020c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff fd28 	bl	8001b1c <_Z41__static_initialization_and_destruction_0ii>
 80020cc:	bd08      	pop	{r3, pc}

080020ce <_GLOBAL__sub_D__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 80020ce:	b508      	push	{r3, lr}
 80020d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff fd21 	bl	8001b1c <_Z41__static_initialization_and_destruction_0ii>
 80020da:	bd08      	pop	{r3, pc}

080020dc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80020dc:	b530      	push	{r4, r5, lr}
 80020de:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020e0:	2400      	movs	r4, #0
 80020e2:	9400      	str	r4, [sp, #0]
 80020e4:	9401      	str	r4, [sp, #4]
 80020e6:	9402      	str	r4, [sp, #8]
 80020e8:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020ea:	f007 f9a5 	bl	8009438 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020ee:	2501      	movs	r5, #1
 80020f0:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020f4:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80020f8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80020fc:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80020fe:	231b      	movs	r3, #27
 8002100:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002104:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002108:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800210c:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002110:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002114:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002118:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800211c:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002120:	4668      	mov	r0, sp
 8002122:	f007 f9a7 	bl	8009474 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002126:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800212a:	2319      	movs	r3, #25
 800212c:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002130:	2403      	movs	r4, #3
 8002132:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002136:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800213a:	4668      	mov	r0, sp
 800213c:	f007 f99a 	bl	8009474 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002140:	2302      	movs	r3, #2
 8002142:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8002146:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800214a:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800214c:	2313      	movs	r3, #19
 800214e:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002152:	4668      	mov	r0, sp
 8002154:	f007 f98e 	bl	8009474 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002158:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800215c:	2311      	movs	r3, #17
 800215e:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002162:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002166:	4668      	mov	r0, sp
 8002168:	f007 f984 	bl	8009474 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800216c:	2004      	movs	r0, #4
 800216e:	f007 f971 	bl	8009454 <HAL_MPU_Enable>

}
 8002172:	b005      	add	sp, #20
 8002174:	bd30      	pop	{r4, r5, pc}
	...

08002178 <MX_CRC_Init>:
{
 8002178:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <MX_CRC_Init+0x1c>)
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_CRC_Init+0x20>)
 800217e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002184:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002186:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002188:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800218a:	2301      	movs	r3, #1
 800218c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800218e:	f007 f9a1 	bl	80094d4 <HAL_CRC_Init>
}
 8002192:	bd08      	pop	{r3, pc}
 8002194:	24001880 	.word	0x24001880
 8002198:	40023000 	.word	0x40023000

0800219c <MX_GPIO_Init>:
{
 800219c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021a0:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	2400      	movs	r4, #0
 80021a4:	9409      	str	r4, [sp, #36]	; 0x24
 80021a6:	940a      	str	r4, [sp, #40]	; 0x28
 80021a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80021aa:	940c      	str	r4, [sp, #48]	; 0x30
 80021ac:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021ae:	4b76      	ldr	r3, [pc, #472]	; (8002388 <MX_GPIO_Init+0x1ec>)
 80021b0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021c0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80021c4:	9201      	str	r2, [sp, #4]
 80021c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021d8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80021dc:	9202      	str	r2, [sp, #8]
 80021de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021e0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021f0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80021f4:	9203      	str	r2, [sp, #12]
 80021f6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002200:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002204:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002208:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800220c:	9204      	str	r2, [sp, #16]
 800220e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002210:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002218:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800221c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002220:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002224:	9205      	str	r2, [sp, #20]
 8002226:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002234:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002238:	f002 0201 	and.w	r2, r2, #1
 800223c:	9206      	str	r2, [sp, #24]
 800223e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002240:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002244:	f042 0204 	orr.w	r2, r2, #4
 8002248:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800224c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002250:	f002 0204 	and.w	r2, r2, #4
 8002254:	9207      	str	r2, [sp, #28]
 8002256:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002258:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800225c:	f042 0208 	orr.w	r2, r2, #8
 8002260:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002264:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	9308      	str	r3, [sp, #32]
 800226e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|FRAME_RATE_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8002270:	4e46      	ldr	r6, [pc, #280]	; (800238c <MX_GPIO_Init+0x1f0>)
 8002272:	4622      	mov	r2, r4
 8002274:	f240 210e 	movw	r1, #526	; 0x20e
 8002278:	4630      	mov	r0, r6
 800227a:	f007 fdfe 	bl	8009e7a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800227e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8002398 <MX_GPIO_Init+0x1fc>
 8002282:	4622      	mov	r2, r4
 8002284:	f640 0104 	movw	r1, #2052	; 0x804
 8002288:	4650      	mov	r0, sl
 800228a:	f007 fdf6 	bl	8009e7a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800228e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800239c <MX_GPIO_Init+0x200>
 8002292:	4622      	mov	r2, r4
 8002294:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8002298:	4640      	mov	r0, r8
 800229a:	f007 fdee 	bl	8009e7a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 800229e:	4f3c      	ldr	r7, [pc, #240]	; (8002390 <MX_GPIO_Init+0x1f4>)
 80022a0:	4622      	mov	r2, r4
 80022a2:	2106      	movs	r1, #6
 80022a4:	4638      	mov	r0, r7
 80022a6:	f007 fde8 	bl	8009e7a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80022aa:	2330      	movs	r3, #48	; 0x30
 80022ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ae:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
 80022b2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022b8:	a909      	add	r1, sp, #36	; 0x24
 80022ba:	4630      	mov	r0, r6
 80022bc:	f007 fc1e 	bl	8009afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80022c0:	230e      	movs	r3, #14
 80022c2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2501      	movs	r5, #1
 80022c6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022cc:	a909      	add	r1, sp, #36	; 0x24
 80022ce:	4630      	mov	r0, r6
 80022d0:	f007 fc14 	bl	8009afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80022d4:	f640 0304 	movw	r3, #2052	; 0x804
 80022d8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022e0:	a909      	add	r1, sp, #36	; 0x24
 80022e2:	4650      	mov	r0, sl
 80022e4:	f007 fc0a 	bl	8009afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80022e8:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80022ec:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	f04f 0a03 	mov.w	sl, #3
 80022f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022fa:	a909      	add	r1, sp, #36	; 0x24
 80022fc:	4640      	mov	r0, r8
 80022fe:	f007 fbfd 	bl	8009afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8002302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002306:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8002310:	a909      	add	r1, sp, #36	; 0x24
 8002312:	4630      	mov	r0, r6
 8002314:	f007 fbf2 	bl	8009afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8002318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800231e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002324:	a909      	add	r1, sp, #36	; 0x24
 8002326:	481b      	ldr	r0, [pc, #108]	; (8002394 <MX_GPIO_Init+0x1f8>)
 8002328:	f007 fbe8 	bl	8009afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800232c:	2604      	movs	r6, #4
 800232e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002330:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002334:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002336:	a909      	add	r1, sp, #36	; 0x24
 8002338:	4640      	mov	r0, r8
 800233a:	f007 fbdf 	bl	8009afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800233e:	2302      	movs	r3, #2
 8002340:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002348:	a909      	add	r1, sp, #36	; 0x24
 800234a:	4638      	mov	r0, r7
 800234c:	f007 fbd6 	bl	8009afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8002350:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002352:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8002358:	a909      	add	r1, sp, #36	; 0x24
 800235a:	4638      	mov	r0, r7
 800235c:	f007 fbce 	bl	8009afc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002360:	4622      	mov	r2, r4
 8002362:	2105      	movs	r1, #5
 8002364:	2017      	movs	r0, #23
 8002366:	f007 f811 	bl	800938c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800236a:	2017      	movs	r0, #23
 800236c:	f007 f844 	bl	80093f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002370:	4622      	mov	r2, r4
 8002372:	2105      	movs	r1, #5
 8002374:	2028      	movs	r0, #40	; 0x28
 8002376:	f007 f809 	bl	800938c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800237a:	2028      	movs	r0, #40	; 0x28
 800237c:	f007 f83c 	bl	80093f8 <HAL_NVIC_EnableIRQ>
}
 8002380:	b00e      	add	sp, #56	; 0x38
 8002382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002386:	bf00      	nop
 8002388:	58024400 	.word	0x58024400
 800238c:	58022000 	.word	0x58022000
 8002390:	58020000 	.word	0x58020000
 8002394:	58020800 	.word	0x58020800
 8002398:	58021800 	.word	0x58021800
 800239c:	58021c00 	.word	0x58021c00

080023a0 <MX_DMA2D_Init>:
{
 80023a0:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 80023a2:	4c0b      	ldr	r4, [pc, #44]	; (80023d0 <MX_DMA2D_Init+0x30>)
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_DMA2D_Init+0x34>)
 80023a6:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80023a8:	2300      	movs	r3, #0
 80023aa:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80023ac:	2202      	movs	r2, #2
 80023ae:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 80023b0:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80023b2:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80023b4:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80023b6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80023b8:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80023ba:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80023bc:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80023be:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80023c0:	4620      	mov	r0, r4
 80023c2:	f007 fa37 	bl	8009834 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80023c6:	2101      	movs	r1, #1
 80023c8:	4620      	mov	r0, r4
 80023ca:	f007 fb15 	bl	80099f8 <HAL_DMA2D_ConfigLayer>
}
 80023ce:	bd10      	pop	{r4, pc}
 80023d0:	240018a4 	.word	0x240018a4
 80023d4:	52001000 	.word	0x52001000

080023d8 <MX_LTDC_Init>:
{
 80023d8:	b530      	push	{r4, r5, lr}
 80023da:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80023dc:	2234      	movs	r2, #52	; 0x34
 80023de:	2100      	movs	r1, #0
 80023e0:	a801      	add	r0, sp, #4
 80023e2:	f01e fa49 	bl	8020878 <memset>
  hltdc.Instance = LTDC;
 80023e6:	4c23      	ldr	r4, [pc, #140]	; (8002474 <MX_LTDC_Init+0x9c>)
 80023e8:	4b23      	ldr	r3, [pc, #140]	; (8002478 <MX_LTDC_Init+0xa0>)
 80023ea:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023ec:	2500      	movs	r5, #0
 80023ee:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80023f0:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80023f2:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023f4:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 80023f6:	2328      	movs	r3, #40	; 0x28
 80023f8:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 80023fa:	2309      	movs	r3, #9
 80023fc:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80023fe:	232a      	movs	r3, #42	; 0x2a
 8002400:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002402:	230b      	movs	r3, #11
 8002404:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8002406:	f240 230a 	movw	r3, #522	; 0x20a
 800240a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800240c:	f240 131b 	movw	r3, #283	; 0x11b
 8002410:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8002412:	f240 232a 	movw	r3, #554	; 0x22a
 8002416:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002418:	f240 131d 	movw	r3, #285	; 0x11d
 800241c:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800241e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002422:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002426:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800242a:	4620      	mov	r0, r4
 800242c:	f008 fa64 	bl	800a8f8 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8002430:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8002432:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002436:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8002438:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 800243a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800243e:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002440:	2301      	movs	r3, #1
 8002442:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8002444:	23ff      	movs	r3, #255	; 0xff
 8002446:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8002448:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800244a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800244e:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002450:	2005      	movs	r0, #5
 8002452:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002454:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002456:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002458:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 800245a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800245e:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002462:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002466:	462a      	mov	r2, r5
 8002468:	a901      	add	r1, sp, #4
 800246a:	4620      	mov	r0, r4
 800246c:	f008 fb2d 	bl	800aaca <HAL_LTDC_ConfigLayer>
}
 8002470:	b00f      	add	sp, #60	; 0x3c
 8002472:	bd30      	pop	{r4, r5, pc}
 8002474:	24001958 	.word	0x24001958
 8002478:	50001000 	.word	0x50001000

0800247c <MX_I2C4_Init>:
{
 800247c:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 800247e:	4c0d      	ldr	r4, [pc, #52]	; (80024b4 <MX_I2C4_Init+0x38>)
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <MX_I2C4_Init+0x3c>)
 8002482:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <MX_I2C4_Init+0x40>)
 8002486:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002488:	2500      	movs	r5, #0
 800248a:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800248c:	2301      	movs	r3, #1
 800248e:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002490:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002492:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002494:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002496:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002498:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800249a:	4620      	mov	r0, r4
 800249c:	f007 fecc 	bl	800a238 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80024a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a4:	4620      	mov	r0, r4
 80024a6:	f008 f8f0 	bl	800a68a <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80024aa:	4629      	mov	r1, r5
 80024ac:	4620      	mov	r0, r4
 80024ae:	f008 f91a 	bl	800a6e6 <HAL_I2CEx_ConfigDigitalFilter>
}
 80024b2:	bd38      	pop	{r3, r4, r5, pc}
 80024b4:	2400190c 	.word	0x2400190c
 80024b8:	58001c00 	.word	0x58001c00
 80024bc:	30808bd0 	.word	0x30808bd0

080024c0 <MX_OCTOSPI1_Init>:
{
 80024c0:	b530      	push	{r4, r5, lr}
 80024c2:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 80024c4:	4814      	ldr	r0, [pc, #80]	; (8002518 <MX_OCTOSPI1_Init+0x58>)
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <MX_OCTOSPI1_Init+0x5c>)
 80024c8:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 80024ca:	2501      	movs	r5, #1
 80024cc:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80024ce:	2400      	movs	r4, #0
 80024d0:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80024d2:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 80024d4:	231a      	movs	r3, #26
 80024d6:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80024d8:	2302      	movs	r3, #2
 80024da:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80024dc:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80024de:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80024e0:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 80024e2:	2303      	movs	r3, #3
 80024e4:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80024e6:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80024e8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80024ea:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80024ec:	2308      	movs	r3, #8
 80024ee:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80024f0:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 80024f2:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80024f4:	f008 ff9c 	bl	800b430 <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80024f8:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 80024fc:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8002500:	4620      	mov	r0, r4
 8002502:	f006 fc95 	bl	8008e30 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8002506:	a901      	add	r1, sp, #4
 8002508:	4620      	mov	r0, r4
 800250a:	f006 fd0b 	bl	8008f24 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 800250e:	4620      	mov	r0, r4
 8002510:	f006 fc36 	bl	8008d80 <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8002514:	b003      	add	sp, #12
 8002516:	bd30      	pop	{r4, r5, pc}
 8002518:	24001a00 	.word	0x24001a00
 800251c:	52005000 	.word	0x52005000

08002520 <MX_SPI2_Init>:
{
 8002520:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8002522:	4812      	ldr	r0, [pc, #72]	; (800256c <MX_SPI2_Init+0x4c>)
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <MX_SPI2_Init+0x50>)
 8002526:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002528:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800252c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800252e:	2300      	movs	r3, #0
 8002530:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002532:	220f      	movs	r2, #15
 8002534:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002536:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002538:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800253a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800253e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002540:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002544:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002546:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002548:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800254c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800254e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002552:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002554:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002556:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002558:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800255a:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800255c:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800255e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002560:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002562:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002564:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002566:	f00a fcdf 	bl	800cf28 <HAL_SPI_Init>
}
 800256a:	bd08      	pop	{r3, pc}
 800256c:	24001a5c 	.word	0x24001a5c
 8002570:	40003800 	.word	0x40003800

08002574 <SystemClock_Config>:
{
 8002574:	b510      	push	{r4, lr}
 8002576:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002578:	224c      	movs	r2, #76	; 0x4c
 800257a:	2100      	movs	r1, #0
 800257c:	a809      	add	r0, sp, #36	; 0x24
 800257e:	f01e f97b 	bl	8020878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002582:	2220      	movs	r2, #32
 8002584:	2100      	movs	r1, #0
 8002586:	a801      	add	r0, sp, #4
 8002588:	f01e f976 	bl	8020878 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <SystemClock_Config+0xa8>)
 800258e:	f04f 32ff 	mov.w	r2, #4294967295
 8002592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002596:	2004      	movs	r0, #4
 8002598:	f008 ffce 	bl	800b538 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800259c:	2300      	movs	r3, #0
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <SystemClock_Config+0xac>)
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025a8:	619a      	str	r2, [r3, #24]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <SystemClock_Config+0xac>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80025bc:	d0fa      	beq.n	80025b4 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <SystemClock_Config+0xa8>)
 80025c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d6:	2302      	movs	r3, #2
 80025d8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025da:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80025dc:	220c      	movs	r2, #12
 80025de:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80025e0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80025e4:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80025e6:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025e8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025ea:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80025ec:	2304      	movs	r3, #4
 80025ee:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025f0:	2400      	movs	r4, #0
 80025f2:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80025f4:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f6:	a809      	add	r0, sp, #36	; 0x24
 80025f8:	f008 ffe8 	bl	800b5cc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fc:	233f      	movs	r3, #63	; 0x3f
 80025fe:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002600:	2103      	movs	r1, #3
 8002602:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002604:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002606:	2308      	movs	r3, #8
 8002608:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800260a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800260c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800260e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002610:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002612:	a801      	add	r0, sp, #4
 8002614:	f009 fbe6 	bl	800bde4 <HAL_RCC_ClockConfig>
}
 8002618:	b01c      	add	sp, #112	; 0x70
 800261a:	bd10      	pop	{r4, pc}
 800261c:	58024400 	.word	0x58024400
 8002620:	58024800 	.word	0x58024800

08002624 <main>:
{
 8002624:	b508      	push	{r3, lr}
  MPU_Config();
 8002626:	f7ff fd59 	bl	80020dc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800262a:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <main+0x104>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002632:	d113      	bne.n	800265c <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8002634:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002638:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800263c:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <main+0x104>)
 800263e:	2200      	movs	r2, #0
 8002640:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002644:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002648:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002652:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002654:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002658:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <main+0x104>)
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002664:	d127      	bne.n	80026b6 <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <main+0x104>)
 8002668:	2200      	movs	r2, #0
 800266a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800266e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002672:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002676:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800267a:	e000      	b.n	800267e <main+0x5a>
    } while(sets-- != 0U);
 800267c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800267e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002682:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002686:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800268a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800268e:	4926      	ldr	r1, [pc, #152]	; (8002728 <main+0x104>)
 8002690:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002694:	4613      	mov	r3, r2
 8002696:	3a01      	subs	r2, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f2      	bne.n	8002682 <main+0x5e>
    } while(sets-- != 0U);
 800269c:	1e43      	subs	r3, r0, #1
 800269e:	2800      	cmp	r0, #0
 80026a0:	d1ec      	bne.n	800267c <main+0x58>
 80026a2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80026a6:	694b      	ldr	r3, [r1, #20]
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	614b      	str	r3, [r1, #20]
 80026ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026b2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80026b6:	f006 fe03 	bl	80092c0 <HAL_Init>
  SystemClock_Config();
 80026ba:	f7ff ff5b 	bl	8002574 <SystemClock_Config>
  MX_CRC_Init();
 80026be:	f7ff fd5b 	bl	8002178 <MX_CRC_Init>
  MX_GPIO_Init();
 80026c2:	f7ff fd6b 	bl	800219c <MX_GPIO_Init>
  MX_DMA2D_Init();
 80026c6:	f7ff fe6b 	bl	80023a0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80026ca:	f7ff fe85 	bl	80023d8 <MX_LTDC_Init>
  MX_I2C4_Init();
 80026ce:	f7ff fed5 	bl	800247c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 80026d2:	f7ff fef5 	bl	80024c0 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 80026d6:	f7ff ff23 	bl	8002520 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 80026da:	f7fd fe9b 	bl	8000414 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80026de:	f7fd fe98 	bl	8000412 <MX_TouchGFX_PreOSInit>
  wifi_initialise();
 80026e2:	f000 fead 	bl	8003440 <wifi_initialise>
  osKernelInitialize();
 80026e6:	f00b fcb1 	bl	800e04c <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <main+0x108>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	200a      	movs	r0, #10
 80026f0:	f00b fdf7 	bl	800e2e2 <osMessageQueueNew>
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <main+0x10c>)
 80026f6:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <main+0x110>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	200a      	movs	r0, #10
 80026fe:	f00b fdf0 	bl	800e2e2 <osMessageQueueNew>
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <main+0x114>)
 8002704:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 8002706:	4a0d      	ldr	r2, [pc, #52]	; (800273c <main+0x118>)
 8002708:	2100      	movs	r1, #0
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <main+0x11c>)
 800270c:	f00b fccc 	bl	800e0a8 <osThreadNew>
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <main+0x120>)
 8002712:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8002714:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <main+0x124>)
 8002716:	2100      	movs	r1, #0
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <main+0x128>)
 800271a:	f00b fcc5 	bl	800e0a8 <osThreadNew>
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <main+0x12c>)
 8002720:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002722:	f00b fca5 	bl	800e070 <osKernelStart>
  while (1)
 8002726:	e7fe      	b.n	8002726 <main+0x102>
 8002728:	e000ed00 	.word	0xe000ed00
 800272c:	08022524 	.word	0x08022524
 8002730:	24001870 	.word	0x24001870
 8002734:	08022560 	.word	0x08022560
 8002738:	24001878 	.word	0x24001878
 800273c:	08022578 	.word	0x08022578
 8002740:	080034d5 	.word	0x080034d5
 8002744:	2400187c 	.word	0x2400187c
 8002748:	0802253c 	.word	0x0802253c
 800274c:	0800041d 	.word	0x0800041d
 8002750:	24001874 	.word	0x24001874

08002754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002756:	6802      	ldr	r2, [r0, #0]
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800275a:	429a      	cmp	r2, r3
 800275c:	d000      	beq.n	8002760 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800275e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002760:	f006 fddc 	bl	800931c <HAL_IncTick>
}
 8002764:	e7fb      	b.n	800275e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002766:	bf00      	nop
 8002768:	40001000 	.word	0x40001000

0800276c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800276c:	4770      	bx	lr
	...

08002770 <wait_cmddata_rdy_rising_event>:
}



int32_t wait_cmddata_rdy_rising_event(int32_t timeout)
{
 8002770:	b538      	push	{r3, r4, r5, lr}
 8002772:	4605      	mov	r5, r0
#ifdef SEM_WAIT
    return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
    int32_t tickstart = HAL_GetTick();
 8002774:	f006 fdde 	bl	8009334 <HAL_GetTick>
 8002778:	4604      	mov	r4, r0
    while (cmddata_rdy_rising_event == 1)
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <wait_cmddata_rdy_rising_event+0x28>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <wait_cmddata_rdy_rising_event+0x22>
    {
        if ((HAL_GetTick() - tickstart) > timeout)
 8002782:	f006 fdd7 	bl	8009334 <HAL_GetTick>
 8002786:	1b00      	subs	r0, r0, r4
 8002788:	42a8      	cmp	r0, r5
 800278a:	d9f6      	bls.n	800277a <wait_cmddata_rdy_rising_event+0xa>
        {
            return -1;
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	e000      	b.n	8002794 <wait_cmddata_rdy_rising_event+0x24>
        }
    }
    return 0;
 8002792:	2000      	movs	r0, #0
#endif /* SEM_WAIT */
}
 8002794:	bd38      	pop	{r3, r4, r5, pc}
 8002796:	bf00      	nop
 8002798:	2400218c 	.word	0x2400218c

0800279c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800279c:	b530      	push	{r4, r5, lr}
 800279e:	b083      	sub	sp, #12
 80027a0:	4604      	mov	r4, r0
    volatile        uint32_t ct = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	9301      	str	r3, [sp, #4]
    uint32_t        loop_per_us = 0;
    static uint32_t cycle_per_loop = 0;

    /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
    /* 10 cycle for STM32L4 */
    if (cycle_per_loop == 0)
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <SPI_WIFI_DelayUs+0x74>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b16b      	cbz	r3, 80027c8 <SPI_WIFI_DelayUs+0x2c>
        {
            cycle_per_loop = 1;
        }
    }

    loop_per_us = SystemCoreClock / 1000000UL / cycle_per_loop;
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <SPI_WIFI_DelayUs+0x78>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4819      	ldr	r0, [pc, #100]	; (8002818 <SPI_WIFI_DelayUs+0x7c>)
 80027b2:	fba0 2303 	umull	r2, r3, r0, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <SPI_WIFI_DelayUs+0x74>)
 80027ba:	6810      	ldr	r0, [r2, #0]
 80027bc:	fbb3 f3f0 	udiv	r3, r3, r0
    ct = n * loop_per_us;
 80027c0:	fb04 f303 	mul.w	r3, r4, r3
 80027c4:	9301      	str	r3, [sp, #4]
    while (ct)
 80027c6:	e01d      	b.n	8002804 <SPI_WIFI_DelayUs+0x68>
        uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <SPI_WIFI_DelayUs+0x78>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <SPI_WIFI_DelayUs+0x80>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	099b      	lsrs	r3, r3, #6
        ct = cycle_per_ms;
 80027d4:	9301      	str	r3, [sp, #4]
        tick = HAL_GetTick();
 80027d6:	f006 fdad 	bl	8009334 <HAL_GetTick>
 80027da:	4605      	mov	r5, r0
        while (ct)
 80027dc:	e002      	b.n	80027e4 <SPI_WIFI_DelayUs+0x48>
            ct--;
 80027de:	9b01      	ldr	r3, [sp, #4]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	9301      	str	r3, [sp, #4]
        while (ct)
 80027e4:	9b01      	ldr	r3, [sp, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f9      	bne.n	80027de <SPI_WIFI_DelayUs+0x42>
        cycle_per_loop = HAL_GetTick() - tick;
 80027ea:	f006 fda3 	bl	8009334 <HAL_GetTick>
 80027ee:	1b40      	subs	r0, r0, r5
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <SPI_WIFI_DelayUs+0x74>)
 80027f2:	6018      	str	r0, [r3, #0]
        if (cycle_per_loop == 0)
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d1d9      	bne.n	80027ac <SPI_WIFI_DelayUs+0x10>
            cycle_per_loop = 1;
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e7d6      	b.n	80027ac <SPI_WIFI_DelayUs+0x10>
    {
        ct--;
 80027fe:	9b01      	ldr	r3, [sp, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
    while (ct)
 8002804:	9b01      	ldr	r3, [sp, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f9      	bne.n	80027fe <SPI_WIFI_DelayUs+0x62>
    }
    return;
}
 800280a:	b003      	add	sp, #12
 800280c:	bd30      	pop	{r4, r5, pc}
 800280e:	bf00      	nop
 8002810:	24002190 	.word	0x24002190
 8002814:	24000070 	.word	0x24000070
 8002818:	431bde83 	.word	0x431bde83
 800281c:	10624dd3 	.word	0x10624dd3

08002820 <wait_spi_rx_event>:
{
 8002820:	b538      	push	{r3, r4, r5, lr}
 8002822:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002824:	f006 fd86 	bl	8009334 <HAL_GetTick>
 8002828:	4604      	mov	r4, r0
    while (spi_rx_event == 1)
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <wait_spi_rx_event+0x28>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <wait_spi_rx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002832:	f006 fd7f 	bl	8009334 <HAL_GetTick>
 8002836:	1b00      	subs	r0, r0, r4
 8002838:	42a8      	cmp	r0, r5
 800283a:	d9f6      	bls.n	800282a <wait_spi_rx_event+0xa>
            return -1;
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	e000      	b.n	8002844 <wait_spi_rx_event+0x24>
    return 0;
 8002842:	2000      	movs	r0, #0
}
 8002844:	bd38      	pop	{r3, r4, r5, pc}
 8002846:	bf00      	nop
 8002848:	24002194 	.word	0x24002194

0800284c <wait_spi_tx_event>:
{
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002850:	f006 fd70 	bl	8009334 <HAL_GetTick>
 8002854:	4604      	mov	r4, r0
    while (spi_tx_event == 1)
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <wait_spi_tx_event+0x28>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <wait_spi_tx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 800285e:	f006 fd69 	bl	8009334 <HAL_GetTick>
 8002862:	1b00      	subs	r0, r0, r4
 8002864:	42a8      	cmp	r0, r5
 8002866:	d9f6      	bls.n	8002856 <wait_spi_tx_event+0xa>
            return -1;
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	e000      	b.n	8002870 <wait_spi_tx_event+0x24>
    return 0;
 800286e:	2000      	movs	r0, #0
}
 8002870:	bd38      	pop	{r3, r4, r5, pc}
 8002872:	bf00      	nop
 8002874:	24002198 	.word	0x24002198

08002878 <SPI_WIFI_ResetModule>:
{
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	b082      	sub	sp, #8
    uint32_t tickstart = HAL_GetTick();
 800287c:	f006 fd5a 	bl	8009334 <HAL_GetTick>
 8002880:	4606      	mov	r6, r0
    WIFI_RESET_MODULE();
 8002882:	4c38      	ldr	r4, [pc, #224]	; (8002964 <SPI_WIFI_ResetModule+0xec>)
 8002884:	2200      	movs	r2, #0
 8002886:	2102      	movs	r1, #2
 8002888:	4620      	mov	r0, r4
 800288a:	f007 faf6 	bl	8009e7a <HAL_GPIO_WritePin>
 800288e:	200a      	movs	r0, #10
 8002890:	f006 fd56 	bl	8009340 <HAL_Delay>
 8002894:	2201      	movs	r2, #1
 8002896:	2102      	movs	r1, #2
 8002898:	4620      	mov	r0, r4
 800289a:	f007 faee 	bl	8009e7a <HAL_GPIO_WritePin>
 800289e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028a2:	f006 fd4d 	bl	8009340 <HAL_Delay>
    WIFI_ENABLE_NSS();
 80028a6:	2200      	movs	r2, #0
 80028a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ac:	482e      	ldr	r0, [pc, #184]	; (8002968 <SPI_WIFI_ResetModule+0xf0>)
 80028ae:	f007 fae4 	bl	8009e7a <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80028b2:	200a      	movs	r0, #10
 80028b4:	f7ff ff72 	bl	800279c <SPI_WIFI_DelayUs>
    uint8_t count = 0;
 80028b8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80028ba:	2120      	movs	r1, #32
 80028bc:	4829      	ldr	r0, [pc, #164]	; (8002964 <SPI_WIFI_ResetModule+0xec>)
 80028be:	f007 fad5 	bl	8009e6c <HAL_GPIO_ReadPin>
 80028c2:	2801      	cmp	r0, #1
 80028c4:	d11c      	bne.n	8002900 <SPI_WIFI_ResetModule+0x88>
        Status = HAL_SPI_Receive(&hspi2, &Prompt[count], 1, 0xFFFF);
 80028c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ca:	2201      	movs	r2, #1
 80028cc:	eb0d 0104 	add.w	r1, sp, r4
 80028d0:	4826      	ldr	r0, [pc, #152]	; (800296c <SPI_WIFI_ResetModule+0xf4>)
 80028d2:	f00a fd7d 	bl	800d3d0 <HAL_SPI_Receive>
 80028d6:	4605      	mov	r5, r0
        count += 2;
 80028d8:	3402      	adds	r4, #2
 80028da:	b2e4      	uxtb	r4, r4
        if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80028dc:	f006 fd2a 	bl	8009334 <HAL_GetTick>
 80028e0:	1b83      	subs	r3, r0, r6
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e6:	d201      	bcs.n	80028ec <SPI_WIFI_ResetModule+0x74>
 80028e8:	2d00      	cmp	r5, #0
 80028ea:	d0e6      	beq.n	80028ba <SPI_WIFI_ResetModule+0x42>
            WIFI_DISABLE_NSS();
 80028ec:	2201      	movs	r2, #1
 80028ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028f2:	481d      	ldr	r0, [pc, #116]	; (8002968 <SPI_WIFI_ResetModule+0xf0>)
 80028f4:	f007 fac1 	bl	8009e7a <HAL_GPIO_WritePin>
            return -1;
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80028fc:	b002      	add	sp, #8
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
    WIFI_DISABLE_NSS();
 8002900:	2201      	movs	r2, #1
 8002902:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002906:	4818      	ldr	r0, [pc, #96]	; (8002968 <SPI_WIFI_ResetModule+0xf0>)
 8002908:	f007 fab7 	bl	8009e7a <HAL_GPIO_WritePin>
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800290c:	f89d 3000 	ldrb.w	r3, [sp]
 8002910:	2b15      	cmp	r3, #21
 8002912:	d115      	bne.n	8002940 <SPI_WIFI_ResetModule+0xc8>
 8002914:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002918:	2b15      	cmp	r3, #21
 800291a:	d114      	bne.n	8002946 <SPI_WIFI_ResetModule+0xce>
 800291c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002920:	2b0d      	cmp	r3, #13
 8002922:	d113      	bne.n	800294c <SPI_WIFI_ResetModule+0xd4>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002924:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002928:	2b0a      	cmp	r3, #10
 800292a:	d112      	bne.n	8002952 <SPI_WIFI_ResetModule+0xda>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 800292c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002930:	2b3e      	cmp	r3, #62	; 0x3e
 8002932:	d111      	bne.n	8002958 <SPI_WIFI_ResetModule+0xe0>
 8002934:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002938:	2b20      	cmp	r3, #32
 800293a:	d110      	bne.n	800295e <SPI_WIFI_ResetModule+0xe6>
    return 0;
 800293c:	2000      	movs	r0, #0
 800293e:	e7dd      	b.n	80028fc <SPI_WIFI_ResetModule+0x84>
        return -1;
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	e7da      	b.n	80028fc <SPI_WIFI_ResetModule+0x84>
 8002946:	f04f 30ff 	mov.w	r0, #4294967295
 800294a:	e7d7      	b.n	80028fc <SPI_WIFI_ResetModule+0x84>
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	e7d4      	b.n	80028fc <SPI_WIFI_ResetModule+0x84>
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	e7d1      	b.n	80028fc <SPI_WIFI_ResetModule+0x84>
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	e7ce      	b.n	80028fc <SPI_WIFI_ResetModule+0x84>
 800295e:	f04f 30ff 	mov.w	r0, #4294967295
 8002962:	e7cb      	b.n	80028fc <SPI_WIFI_ResetModule+0x84>
 8002964:	58022000 	.word	0x58022000
 8002968:	58020000 	.word	0x58020000
 800296c:	24001a5c 	.word	0x24001a5c

08002970 <SPI_WIFI_ReceiveData>:
{
 8002970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002972:	b083      	sub	sp, #12
 8002974:	4605      	mov	r5, r0
 8002976:	460e      	mov	r6, r1
 8002978:	4617      	mov	r7, r2
    WIFI_DISABLE_NSS();
 800297a:	2201      	movs	r2, #1
 800297c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002980:	482b      	ldr	r0, [pc, #172]	; (8002a30 <SPI_WIFI_ReceiveData+0xc0>)
 8002982:	f007 fa7a 	bl	8009e7a <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 8002986:	200a      	movs	r0, #10
 8002988:	f7ff ff08 	bl	800279c <SPI_WIFI_DelayUs>
    if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800298c:	4638      	mov	r0, r7
 800298e:	f7ff feef 	bl	8002770 <wait_cmddata_rdy_rising_event>
 8002992:	2800      	cmp	r0, #0
 8002994:	db48      	blt.n	8002a28 <SPI_WIFI_ReceiveData+0xb8>
    WIFI_ENABLE_NSS();
 8002996:	2200      	movs	r2, #0
 8002998:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800299c:	4824      	ldr	r0, [pc, #144]	; (8002a30 <SPI_WIFI_ReceiveData+0xc0>)
 800299e:	f007 fa6c 	bl	8009e7a <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(30);
 80029a2:	201e      	movs	r0, #30
 80029a4:	f7ff fefa 	bl	800279c <SPI_WIFI_DelayUs>
    int16_t length = 0;
 80029a8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80029aa:	e016      	b.n	80029da <SPI_WIFI_ReceiveData+0x6a>
            spi_rx_event = 1;
 80029ac:	2201      	movs	r2, #1
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <SPI_WIFI_ReceiveData+0xc4>)
 80029b0:	601a      	str	r2, [r3, #0]
            if (HAL_SPI_Receive_IT(&hspi2, tmp, 1) != HAL_OK)
 80029b2:	a901      	add	r1, sp, #4
 80029b4:	4820      	ldr	r0, [pc, #128]	; (8002a38 <SPI_WIFI_ReceiveData+0xc8>)
 80029b6:	f00a ffb7 	bl	800d928 <HAL_SPI_Receive_IT>
 80029ba:	bb08      	cbnz	r0, 8002a00 <SPI_WIFI_ReceiveData+0x90>
            wait_spi_rx_event(timeout);
 80029bc:	4638      	mov	r0, r7
 80029be:	f7ff ff2f 	bl	8002820 <wait_spi_rx_event>
            pData[0] = tmp[0];
 80029c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029c6:	702b      	strb	r3, [r5, #0]
            pData[1] = tmp[1];
 80029c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029cc:	706b      	strb	r3, [r5, #1]
            length += 2;
 80029ce:	3402      	adds	r4, #2
 80029d0:	b224      	sxth	r4, r4
            pData  += 2;
 80029d2:	3502      	adds	r5, #2
            if (length >= ES_WIFI_DATA_SIZE)
 80029d4:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 80029d8:	da1b      	bge.n	8002a12 <SPI_WIFI_ReceiveData+0xa2>
    while (WIFI_IS_CMDDATA_READY())
 80029da:	2120      	movs	r1, #32
 80029dc:	4817      	ldr	r0, [pc, #92]	; (8002a3c <SPI_WIFI_ReceiveData+0xcc>)
 80029de:	f007 fa45 	bl	8009e6c <HAL_GPIO_ReadPin>
 80029e2:	2801      	cmp	r0, #1
 80029e4:	d103      	bne.n	80029ee <SPI_WIFI_ReceiveData+0x7e>
        if ((length < len) || (!len))
 80029e6:	42b4      	cmp	r4, r6
 80029e8:	dbe0      	blt.n	80029ac <SPI_WIFI_ReceiveData+0x3c>
 80029ea:	2e00      	cmp	r6, #0
 80029ec:	d0de      	beq.n	80029ac <SPI_WIFI_ReceiveData+0x3c>
    WIFI_DISABLE_NSS();
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029f4:	480e      	ldr	r0, [pc, #56]	; (8002a30 <SPI_WIFI_ReceiveData+0xc0>)
 80029f6:	f007 fa40 	bl	8009e7a <HAL_GPIO_WritePin>
}
 80029fa:	4620      	mov	r0, r4
 80029fc:	b003      	add	sp, #12
 80029fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                WIFI_DISABLE_NSS();
 8002a00:	2201      	movs	r2, #1
 8002a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a06:	480a      	ldr	r0, [pc, #40]	; (8002a30 <SPI_WIFI_ReceiveData+0xc0>)
 8002a08:	f007 fa37 	bl	8009e7a <HAL_GPIO_WritePin>
                return ES_WIFI_ERROR_SPI_FAILED;
 8002a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8002a10:	e7f3      	b.n	80029fa <SPI_WIFI_ReceiveData+0x8a>
                WIFI_DISABLE_NSS();
 8002a12:	2201      	movs	r2, #1
 8002a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a18:	4805      	ldr	r0, [pc, #20]	; (8002a30 <SPI_WIFI_ReceiveData+0xc0>)
 8002a1a:	f007 fa2e 	bl	8009e7a <HAL_GPIO_WritePin>
                SPI_WIFI_ResetModule();
 8002a1e:	f7ff ff2b 	bl	8002878 <SPI_WIFI_ResetModule>
                return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002a22:	f06f 0403 	mvn.w	r4, #3
 8002a26:	e7e8      	b.n	80029fa <SPI_WIFI_ReceiveData+0x8a>
        return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002a28:	f06f 0402 	mvn.w	r4, #2
 8002a2c:	e7e5      	b.n	80029fa <SPI_WIFI_ReceiveData+0x8a>
 8002a2e:	bf00      	nop
 8002a30:	58020000 	.word	0x58020000
 8002a34:	24002194 	.word	0x24002194
 8002a38:	24001a5c 	.word	0x24001a5c
 8002a3c:	58022000 	.word	0x58022000

08002a40 <SPI_WIFI_DeInit>:
{
 8002a40:	b508      	push	{r3, lr}
    HAL_SPI_DeInit(&hspi2);
 8002a42:	4802      	ldr	r0, [pc, #8]	; (8002a4c <SPI_WIFI_DeInit+0xc>)
 8002a44:	f00a fb24 	bl	800d090 <HAL_SPI_DeInit>
}
 8002a48:	2000      	movs	r0, #0
 8002a4a:	bd08      	pop	{r3, pc}
 8002a4c:	24001a5c 	.word	0x24001a5c

08002a50 <SPI_WIFI_MspInit>:
{
 8002a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a54:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a56:	4b4e      	ldr	r3, [pc, #312]	; (8002b90 <SPI_WIFI_MspInit+0x140>)
 8002a58:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a60:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002a64:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a68:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a6c:	9201      	str	r2, [sp, #4]
 8002a6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI2_FORCE_RESET();
 8002a70:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_SPI2_RELEASE_RESET();
 8002a7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a88:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002a94:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002a98:	f002 0201 	and.w	r2, r2, #1
 8002a9c:	9202      	str	r2, [sp, #8]
 8002a9e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002aa4:	f042 0204 	orr.w	r2, r2, #4
 8002aa8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002aac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ab0:	f002 0204 	and.w	r2, r2, #4
 8002ab4:	9203      	str	r2, [sp, #12]
 8002ab6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ab8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	9304      	str	r3, [sp, #16]
 8002ace:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ad0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002b94 <SPI_WIFI_MspInit+0x144>
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	4640      	mov	r0, r8
 8002ada:	f007 f9ce 	bl	8009e7a <HAL_GPIO_WritePin>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002ade:	f04f 0904 	mov.w	r9, #4
 8002ae2:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ae6:	2501      	movs	r5, #1
 8002ae8:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002aea:	2400      	movs	r4, #0
 8002aec:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002aee:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002af0:	a905      	add	r1, sp, #20
 8002af2:	4640      	mov	r0, r8
 8002af4:	f007 f802 	bl	8009afc <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_5;
 8002af8:	2320      	movs	r3, #32
 8002afa:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002afc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b00:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b02:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b04:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b06:	a905      	add	r1, sp, #20
 8002b08:	4640      	mov	r0, r8
 8002b0a:	f006 fff7 	bl	8009afc <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_1;
 8002b0e:	2702      	movs	r7, #2
 8002b10:	9705      	str	r7, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b12:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b14:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b16:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b18:	2605      	movs	r6, #5
 8002b1a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b1c:	a905      	add	r1, sp, #20
 8002b1e:	4640      	mov	r0, r8
 8002b20:	f006 ffec 	bl	8009afc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002b24:	f5a8 5800 	sub.w	r8, r8, #8192	; 0x2000
 8002b28:	462a      	mov	r2, r5
 8002b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b2e:	4640      	mov	r0, r8
 8002b30:	f007 f9a3 	bl	8009e7a <HAL_GPIO_WritePin>
    GPIO_Init.Pin       =  GPIO_PIN_11;
 8002b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b38:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b3a:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b3c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b3e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b40:	a905      	add	r1, sp, #20
 8002b42:	4640      	mov	r0, r8
 8002b44:	f006 ffda 	bl	8009afc <HAL_GPIO_Init>
    GPIO_Init.Pin       =  GPIO_PIN_12;
 8002b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4c:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b4e:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b50:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b52:	9508      	str	r5, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b54:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b56:	a905      	add	r1, sp, #20
 8002b58:	4640      	mov	r0, r8
 8002b5a:	f006 ffcf 	bl	8009afc <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_3;
 8002b5e:	2308      	movs	r3, #8
 8002b60:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b62:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b64:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b66:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b68:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002b6a:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8002b6e:	a905      	add	r1, sp, #20
 8002b70:	4640      	mov	r0, r8
 8002b72:	f006 ffc3 	bl	8009afc <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002b76:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b7a:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_PULLUP;
 8002b7c:	9507      	str	r5, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b7e:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b80:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002b82:	a905      	add	r1, sp, #20
 8002b84:	4640      	mov	r0, r8
 8002b86:	f006 ffb9 	bl	8009afc <HAL_GPIO_Init>
}
 8002b8a:	b00b      	add	sp, #44	; 0x2c
 8002b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b90:	58024400 	.word	0x58024400
 8002b94:	58022000 	.word	0x58022000

08002b98 <SPI_WIFI_Init>:
{
 8002b98:	b510      	push	{r4, lr}
    if (mode == ES_WIFI_INIT)
 8002b9a:	bb78      	cbnz	r0, 8002bfc <SPI_WIFI_Init+0x64>
        hspi2.Instance               = SPI2;
 8002b9c:	4c1a      	ldr	r4, [pc, #104]	; (8002c08 <SPI_WIFI_Init+0x70>)
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <SPI_WIFI_Init+0x74>)
 8002ba0:	6023      	str	r3, [r4, #0]
        SPI_WIFI_MspInit(&hspi2);
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff ff54 	bl	8002a50 <SPI_WIFI_MspInit>
        hspi2.Init.Mode              = SPI_MODE_MASTER;
 8002ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bac:	6063      	str	r3, [r4, #4]
        hspi2.Init.Direction         = SPI_DIRECTION_2LINES;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60a3      	str	r3, [r4, #8]
        hspi2.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	60e2      	str	r2, [r4, #12]
        hspi2.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002bb6:	6123      	str	r3, [r4, #16]
        hspi2.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002bb8:	6163      	str	r3, [r4, #20]
        hspi2.Init.NSS               = SPI_NSS_SOFT;
 8002bba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bbe:	61a2      	str	r2, [r4, #24]
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /* 280/16 = 17.5MHz (Inventek WIFI module supports up to 20MHz)*/
 8002bc0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002bc4:	61e2      	str	r2, [r4, #28]
        hspi2.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002bc6:	6223      	str	r3, [r4, #32]
        hspi2.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002bc8:	6263      	str	r3, [r4, #36]	; 0x24
        hspi2.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002bca:	62a3      	str	r3, [r4, #40]	; 0x28
        hspi2.Init.CRCPolynomial     = 0;
 8002bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f00a f9aa 	bl	800cf28 <HAL_SPI_Init>
 8002bd4:	b9a8      	cbnz	r0, 8002c02 <SPI_WIFI_Init+0x6a>
        HAL_NVIC_SetPriority((IRQn_Type)DATA_READY_IRQ, SPI_INTERFACE_PRIO, 0x00);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4611      	mov	r1, r2
 8002bda:	2017      	movs	r0, #23
 8002bdc:	f006 fbd6 	bl	800938c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)DATA_READY_IRQ);
 8002be0:	2017      	movs	r0, #23
 8002be2:	f006 fc09 	bl	80093f8 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority((IRQn_Type)SPI2_IRQn, SPI_INTERFACE_PRIO, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	4611      	mov	r1, r2
 8002bea:	2024      	movs	r0, #36	; 0x24
 8002bec:	f006 fbce 	bl	800938c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)SPI2_IRQn);
 8002bf0:	2024      	movs	r0, #36	; 0x24
 8002bf2:	f006 fc01 	bl	80093f8 <HAL_NVIC_EnableIRQ>
        SPI_WIFI_DelayUs(10);
 8002bf6:	200a      	movs	r0, #10
 8002bf8:	f7ff fdd0 	bl	800279c <SPI_WIFI_DelayUs>
    rc = SPI_WIFI_ResetModule();
 8002bfc:	f7ff fe3c 	bl	8002878 <SPI_WIFI_ResetModule>
}
 8002c00:	bd10      	pop	{r4, pc}
            return -1;
 8002c02:	f04f 30ff 	mov.w	r0, #4294967295
 8002c06:	e7fb      	b.n	8002c00 <SPI_WIFI_Init+0x68>
 8002c08:	24001a5c 	.word	0x24001a5c
 8002c0c:	40003800 	.word	0x40003800

08002c10 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_rx_event)
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <HAL_SPI_RxCpltCallback+0x10>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b113      	cbz	r3, 8002c1c <HAL_SPI_RxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_rx_sem);
        spi_rx_event = 0;
 8002c16:	4b02      	ldr	r3, [pc, #8]	; (8002c20 <HAL_SPI_RxCpltCallback+0x10>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    }
}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	24002194 	.word	0x24002194

08002c24 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_tx_event)
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_SPI_TxCpltCallback+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b113      	cbz	r3, 8002c30 <HAL_SPI_TxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_tx_sem);
        spi_tx_event = 0;
 8002c2a:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <HAL_SPI_TxCpltCallback+0x10>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
    }
}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	24002198 	.word	0x24002198

08002c38 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
    if (cmddata_rdy_rising_event == 1)
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <SPI_WIFI_ISR+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d000      	beq.n	8002c42 <SPI_WIFI_ISR+0xa>
    {
        SEM_SIGNAL(cmddata_rdy_rising_sem);
        cmddata_rdy_rising_event = 0;
    }
}
 8002c40:	4770      	bx	lr
        cmddata_rdy_rising_event = 0;
 8002c42:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <SPI_WIFI_ISR+0x14>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
}
 8002c48:	e7fa      	b.n	8002c40 <SPI_WIFI_ISR+0x8>
 8002c4a:	bf00      	nop
 8002c4c:	2400218c 	.word	0x2400218c

08002c50 <wait_cmddata_rdy_high>:
{
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002c54:	f006 fb6e 	bl	8009334 <HAL_GetTick>
 8002c58:	4604      	mov	r4, r0
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c5a:	e001      	b.n	8002c60 <wait_cmddata_rdy_high+0x10>
        SPI_WIFI_ISR();
 8002c5c:	f7ff ffec 	bl	8002c38 <SPI_WIFI_ISR>
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c60:	2120      	movs	r1, #32
 8002c62:	4807      	ldr	r0, [pc, #28]	; (8002c80 <wait_cmddata_rdy_high+0x30>)
 8002c64:	f007 f902 	bl	8009e6c <HAL_GPIO_ReadPin>
 8002c68:	2801      	cmp	r0, #1
 8002c6a:	d007      	beq.n	8002c7c <wait_cmddata_rdy_high+0x2c>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002c6c:	f006 fb62 	bl	8009334 <HAL_GetTick>
 8002c70:	1b00      	subs	r0, r0, r4
 8002c72:	42a8      	cmp	r0, r5
 8002c74:	d9f2      	bls.n	8002c5c <wait_cmddata_rdy_high+0xc>
            return -1;
 8002c76:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7a:	e000      	b.n	8002c7e <wait_cmddata_rdy_high+0x2e>
    return 0;
 8002c7c:	2000      	movs	r0, #0
}
 8002c7e:	bd38      	pop	{r3, r4, r5, pc}
 8002c80:	58022000 	.word	0x58022000

08002c84 <SPI_WIFI_SendData>:
{
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	4606      	mov	r6, r0
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	4615      	mov	r5, r2
    if (wait_cmddata_rdy_high(timeout) < 0)
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f7ff ffde 	bl	8002c50 <wait_cmddata_rdy_high>
 8002c94:	2800      	cmp	r0, #0
 8002c96:	db47      	blt.n	8002d28 <SPI_WIFI_SendData+0xa4>
    cmddata_rdy_rising_event = 1;
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <SPI_WIFI_SendData+0xac>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
    WIFI_ENABLE_NSS();
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca4:	4823      	ldr	r0, [pc, #140]	; (8002d34 <SPI_WIFI_SendData+0xb0>)
 8002ca6:	f007 f8e8 	bl	8009e7a <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 8002caa:	200a      	movs	r0, #10
 8002cac:	f7ff fd76 	bl	800279c <SPI_WIFI_DelayUs>
    if (len > 1)
 8002cb0:	2c01      	cmp	r4, #1
 8002cb2:	d805      	bhi.n	8002cc0 <SPI_WIFI_SendData+0x3c>
    if (len & 1)
 8002cb4:	f014 0f01 	tst.w	r4, #1
 8002cb8:	d119      	bne.n	8002cee <SPI_WIFI_SendData+0x6a>
    return len;
 8002cba:	b220      	sxth	r0, r4
}
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
        spi_tx_event = 1;
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <SPI_WIFI_SendData+0xb4>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)pdata, len / 2) != HAL_OK)
 8002cc6:	fa24 f202 	lsr.w	r2, r4, r2
 8002cca:	4631      	mov	r1, r6
 8002ccc:	481b      	ldr	r0, [pc, #108]	; (8002d3c <SPI_WIFI_SendData+0xb8>)
 8002cce:	f00a fca1 	bl	800d614 <HAL_SPI_Transmit_IT>
 8002cd2:	b918      	cbnz	r0, 8002cdc <SPI_WIFI_SendData+0x58>
        wait_spi_tx_event(timeout);
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f7ff fdb9 	bl	800284c <wait_spi_tx_event>
 8002cda:	e7eb      	b.n	8002cb4 <SPI_WIFI_SendData+0x30>
            WIFI_DISABLE_NSS();
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ce2:	4814      	ldr	r0, [pc, #80]	; (8002d34 <SPI_WIFI_SendData+0xb0>)
 8002ce4:	f007 f8c9 	bl	8009e7a <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	e7e6      	b.n	8002cbc <SPI_WIFI_SendData+0x38>
        Padding[0] = pdata[len - 1];
 8002cee:	1930      	adds	r0, r6, r4
 8002cf0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002cf4:	f88d 3004 	strb.w	r3, [sp, #4]
        Padding[1] = '\n';
 8002cf8:	230a      	movs	r3, #10
 8002cfa:	f88d 3005 	strb.w	r3, [sp, #5]
        spi_tx_event = 1;
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <SPI_WIFI_SendData+0xb4>)
 8002d02:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, Padding, 1) != HAL_OK)
 8002d04:	a901      	add	r1, sp, #4
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <SPI_WIFI_SendData+0xb8>)
 8002d08:	f00a fc84 	bl	800d614 <HAL_SPI_Transmit_IT>
 8002d0c:	b918      	cbnz	r0, 8002d16 <SPI_WIFI_SendData+0x92>
        wait_spi_tx_event(timeout);
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f7ff fd9c 	bl	800284c <wait_spi_tx_event>
 8002d14:	e7d1      	b.n	8002cba <SPI_WIFI_SendData+0x36>
            WIFI_DISABLE_NSS();
 8002d16:	2201      	movs	r2, #1
 8002d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <SPI_WIFI_SendData+0xb0>)
 8002d1e:	f007 f8ac 	bl	8009e7a <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002d22:	f04f 30ff 	mov.w	r0, #4294967295
 8002d26:	e7c9      	b.n	8002cbc <SPI_WIFI_SendData+0x38>
        return ES_WIFI_ERROR_SPI_FAILED;
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	e7c6      	b.n	8002cbc <SPI_WIFI_SendData+0x38>
 8002d2e:	bf00      	nop
 8002d30:	2400218c 	.word	0x2400218c
 8002d34:	58020000 	.word	0x58020000
 8002d38:	24002198 	.word	0x24002198
 8002d3c:	24001a5c 	.word	0x24001a5c

08002d40 <wifi_probe>:
  * @brief  probe function to register wifi to connectivity framwotk
  * @param  None
  * @retval None
  */
int32_t wifi_probe(void **ll_drv_context)
{
 8002d40:	b510      	push	{r4, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	4604      	mov	r4, r0
    if (ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <wifi_probe+0x2c>)
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <wifi_probe+0x30>)
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <wifi_probe+0x34>)
 8002d50:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <wifi_probe+0x38>)
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <wifi_probe+0x3c>)
 8002d54:	480a      	ldr	r0, [pc, #40]	; (8002d80 <wifi_probe+0x40>)
 8002d56:	f003 fee9 	bl	8006b2c <ES_WIFI_RegisterBusIO>
 8002d5a:	b918      	cbnz	r0, 8002d64 <wifi_probe+0x24>
                              SPI_WIFI_DeInit,
                              HAL_Delay,
                              SPI_WIFI_SendData,
                              SPI_WIFI_ReceiveData) == 0)
    {
        *ll_drv_context = &EsWifiObj;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <wifi_probe+0x40>)
 8002d5e:	6023      	str	r3, [r4, #0]
        return 0;
    }
    return -1;
}
 8002d60:	b002      	add	sp, #8
 8002d62:	bd10      	pop	{r4, pc}
    return -1;
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	e7fa      	b.n	8002d60 <wifi_probe+0x20>
 8002d6a:	bf00      	nop
 8002d6c:	08002971 	.word	0x08002971
 8002d70:	08002c85 	.word	0x08002c85
 8002d74:	08009341 	.word	0x08009341
 8002d78:	08002a41 	.word	0x08002a41
 8002d7c:	08002b99 	.word	0x08002b99
 8002d80:	24001ae4 	.word	0x24001ae4

08002d84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_5)
 8002d84:	2820      	cmp	r0, #32
 8002d86:	d000      	beq.n	8002d8a <HAL_GPIO_EXTI_Callback+0x6>
  {
    cmddata_rdy_rising_event = 0;
  }
}
 8002d88:	4770      	bx	lr
    cmddata_rdy_rising_event = 0;
 8002d8a:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x10>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
}
 8002d90:	e7fa      	b.n	8002d88 <HAL_GPIO_EXTI_Callback+0x4>
 8002d92:	bf00      	nop
 8002d94:	2400218c 	.word	0x2400218c

08002d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d98:	b500      	push	{lr}
 8002d9a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_MspInit+0x30>)
 8002d9e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8002da2:	f042 0202 	orr.w	r2, r2, #2
 8002da6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8002daa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	210f      	movs	r1, #15
 8002dba:	f06f 0001 	mvn.w	r0, #1
 8002dbe:	f006 fae5 	bl	800938c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc2:	b003      	add	sp, #12
 8002dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dc8:	58024400 	.word	0x58024400

08002dcc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002dcc:	6802      	ldr	r2, [r0, #0]
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_CRC_MspInit+0x2c>)
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d000      	beq.n	8002dd6 <HAL_CRC_MspInit+0xa>
 8002dd4:	4770      	bx	lr
{
 8002dd6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_CRC_MspInit+0x30>)
 8002dda:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8002dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002de6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002df2:	b002      	add	sp, #8
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023000 	.word	0x40023000
 8002dfc:	58024400 	.word	0x58024400

08002e00 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002e00:	6802      	ldr	r2, [r0, #0]
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_DMA2D_MspInit+0x40>)
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d000      	beq.n	8002e0a <HAL_DMA2D_MspInit+0xa>
 8002e08:	4770      	bx	lr
{
 8002e0a:	b500      	push	{lr}
 8002e0c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HAL_DMA2D_MspInit+0x44>)
 8002e10:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002e14:	f042 0210 	orr.w	r2, r2, #16
 8002e18:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002e1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2105      	movs	r1, #5
 8002e2c:	205a      	movs	r0, #90	; 0x5a
 8002e2e:	f006 faad 	bl	800938c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002e32:	205a      	movs	r0, #90	; 0x5a
 8002e34:	f006 fae0 	bl	80093f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002e38:	b003      	add	sp, #12
 8002e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e3e:	bf00      	nop
 8002e40:	52001000 	.word	0x52001000
 8002e44:	58024400 	.word	0x58024400

08002e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	b0b6      	sub	sp, #216	; 0xd8
 8002e4c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4e:	2100      	movs	r1, #0
 8002e50:	9131      	str	r1, [sp, #196]	; 0xc4
 8002e52:	9132      	str	r1, [sp, #200]	; 0xc8
 8002e54:	9133      	str	r1, [sp, #204]	; 0xcc
 8002e56:	9134      	str	r1, [sp, #208]	; 0xd0
 8002e58:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e5a:	22b8      	movs	r2, #184	; 0xb8
 8002e5c:	a803      	add	r0, sp, #12
 8002e5e:	f01d fd0b 	bl	8020878 <memset>
  if(hi2c->Instance==I2C4)
 8002e62:	6822      	ldr	r2, [r4, #0]
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_I2C_MspInit+0x8c>)
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002e6a:	b036      	add	sp, #216	; 0xd8
 8002e6c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002e6e:	2310      	movs	r3, #16
 8002e70:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e72:	a803      	add	r0, sp, #12
 8002e74:	f009 fa7c 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
 8002e78:	bb40      	cbnz	r0, 8002ecc <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7a:	4c17      	ldr	r4, [pc, #92]	; (8002ed8 <HAL_I2C_MspInit+0x90>)
 8002e7c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002e88:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002e94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e98:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9a:	2312      	movs	r3, #18
 8002e9c:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eaa:	a931      	add	r1, sp, #196	; 0xc4
 8002eac:	480b      	ldr	r0, [pc, #44]	; (8002edc <HAL_I2C_MspInit+0x94>)
 8002eae:	f006 fe25 	bl	8009afc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002eb2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8002ebe:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	9b02      	ldr	r3, [sp, #8]
}
 8002eca:	e7ce      	b.n	8002e6a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002ecc:	f7ff fc4e 	bl	800276c <Error_Handler>
 8002ed0:	e7d3      	b.n	8002e7a <HAL_I2C_MspInit+0x32>
 8002ed2:	bf00      	nop
 8002ed4:	58001c00 	.word	0x58001c00
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	58020c00 	.word	0x58020c00

08002ee0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8002ee0:	6802      	ldr	r2, [r0, #0]
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_I2C_MspDeInit+0x34>)
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d000      	beq.n	8002eea <HAL_I2C_MspDeInit+0xa>
 8002ee8:	4770      	bx	lr
{
 8002eea:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002eec:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <HAL_I2C_MspDeInit+0x38>)
 8002eee:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8002ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8002efa:	4c08      	ldr	r4, [pc, #32]	; (8002f1c <HAL_I2C_MspDeInit+0x3c>)
 8002efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f00:	4620      	mov	r0, r4
 8002f02:	f006 ff0b 	bl	8009d1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8002f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f006 ff06 	bl	8009d1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	bf00      	nop
 8002f14:	58001c00 	.word	0x58001c00
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	58020c00 	.word	0x58020c00

08002f20 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	b0b8      	sub	sp, #224	; 0xe0
 8002f24:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	2100      	movs	r1, #0
 8002f28:	9133      	str	r1, [sp, #204]	; 0xcc
 8002f2a:	9134      	str	r1, [sp, #208]	; 0xd0
 8002f2c:	9135      	str	r1, [sp, #212]	; 0xd4
 8002f2e:	9136      	str	r1, [sp, #216]	; 0xd8
 8002f30:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f32:	22b8      	movs	r2, #184	; 0xb8
 8002f34:	a805      	add	r0, sp, #20
 8002f36:	f01d fc9f 	bl	8020878 <memset>
  if(hltdc->Instance==LTDC)
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <HAL_LTDC_MspInit+0x114>)
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f42:	b038      	add	sp, #224	; 0xe0
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f4a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8002f4c:	2318      	movs	r3, #24
 8002f4e:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8002f50:	23c9      	movs	r3, #201	; 0xc9
 8002f52:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002f54:	2302      	movs	r3, #2
 8002f56:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002f58:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8002f5a:	2315      	movs	r3, #21
 8002f5c:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f62:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8002f64:	f241 5356 	movw	r3, #5462	; 0x1556
 8002f68:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f6a:	a805      	add	r0, sp, #20
 8002f6c:	f009 fa00 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d15c      	bne.n	800302e <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002f74:	4b30      	ldr	r3, [pc, #192]	; (8003038 <HAL_LTDC_MspInit+0x118>)
 8002f76:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002f7a:	f042 0208 	orr.w	r2, r2, #8
 8002f7e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8002f82:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002f86:	f002 0208 	and.w	r2, r2, #8
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f8e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f96:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002f9a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002f9e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002fa2:	9202      	str	r2, [sp, #8]
 8002fa4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fa6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fb2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fb6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002fba:	9203      	str	r2, [sp, #12]
 8002fbc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fbe:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	9304      	str	r3, [sp, #16]
 8002fd4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8002fd6:	23ff      	movs	r3, #255	; 0xff
 8002fd8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2602      	movs	r6, #2
 8002fdc:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2400      	movs	r4, #0
 8002fe0:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fe4:	250e      	movs	r5, #14
 8002fe6:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002fe8:	a933      	add	r1, sp, #204	; 0xcc
 8002fea:	4814      	ldr	r0, [pc, #80]	; (800303c <HAL_LTDC_MspInit+0x11c>)
 8002fec:	f006 fd86 	bl	8009afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8002ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ff4:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ffc:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002ffe:	a933      	add	r1, sp, #204	; 0xcc
 8003000:	480f      	ldr	r0, [pc, #60]	; (8003040 <HAL_LTDC_MspInit+0x120>)
 8003002:	f006 fd7b 	bl	8009afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8003006:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800300a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003010:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003012:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003014:	a933      	add	r1, sp, #204	; 0xcc
 8003016:	480b      	ldr	r0, [pc, #44]	; (8003044 <HAL_LTDC_MspInit+0x124>)
 8003018:	f006 fd70 	bl	8009afc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800301c:	4622      	mov	r2, r4
 800301e:	2105      	movs	r1, #5
 8003020:	2058      	movs	r0, #88	; 0x58
 8003022:	f006 f9b3 	bl	800938c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003026:	2058      	movs	r0, #88	; 0x58
 8003028:	f006 f9e6 	bl	80093f8 <HAL_NVIC_EnableIRQ>
}
 800302c:	e789      	b.n	8002f42 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 800302e:	f7ff fb9d 	bl	800276c <Error_Handler>
 8003032:	e79f      	b.n	8002f74 <HAL_LTDC_MspInit+0x54>
 8003034:	50001000 	.word	0x50001000
 8003038:	58024400 	.word	0x58024400
 800303c:	58022800 	.word	0x58022800
 8003040:	58022400 	.word	0x58022400
 8003044:	58022000 	.word	0x58022000

08003048 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003048:	b510      	push	{r4, lr}
 800304a:	b0b0      	sub	sp, #192	; 0xc0
 800304c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800304e:	22b8      	movs	r2, #184	; 0xb8
 8003050:	2100      	movs	r1, #0
 8003052:	a802      	add	r0, sp, #8
 8003054:	f01d fc10 	bl	8020878 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003058:	6822      	ldr	r2, [r4, #0]
 800305a:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <HAL_OSPI_MspInit+0x8c>)
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003060:	b030      	add	sp, #192	; 0xc0
 8003062:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003068:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800306a:	2318      	movs	r3, #24
 800306c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 800306e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003072:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003074:	2302      	movs	r3, #2
 8003076:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003078:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800307a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800307c:	2320      	movs	r3, #32
 800307e:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003080:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003082:	a802      	add	r0, sp, #8
 8003084:	f009 f974 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
 8003088:	bb08      	cbnz	r0, 80030ce <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_OSPI_MspInit+0x90>)
 800308c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003090:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003094:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8003098:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800309c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030a0:	9200      	str	r2, [sp, #0]
 80030a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80030a4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80030b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80030b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2105      	movs	r1, #5
 80030c0:	205c      	movs	r0, #92	; 0x5c
 80030c2:	f006 f963 	bl	800938c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80030c6:	205c      	movs	r0, #92	; 0x5c
 80030c8:	f006 f996 	bl	80093f8 <HAL_NVIC_EnableIRQ>
}
 80030cc:	e7c8      	b.n	8003060 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80030ce:	f7ff fb4d 	bl	800276c <Error_Handler>
 80030d2:	e7da      	b.n	800308a <HAL_OSPI_MspInit+0x42>
 80030d4:	52005000 	.word	0x52005000
 80030d8:	58024400 	.word	0x58024400

080030dc <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80030dc:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80030de:	6802      	ldr	r2, [r0, #0]
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_OSPI_MspDeInit+0x30>)
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d000      	beq.n	80030e8 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80030e6:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_OSPI_MspDeInit+0x34>)
 80030ea:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030ee:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80030f2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80030f6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030fe:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8003102:	205c      	movs	r0, #92	; 0x5c
 8003104:	f006 f986 	bl	8009414 <HAL_NVIC_DisableIRQ>
}
 8003108:	e7ed      	b.n	80030e6 <HAL_OSPI_MspDeInit+0xa>
 800310a:	bf00      	nop
 800310c:	52005000 	.word	0x52005000
 8003110:	58024400 	.word	0x58024400

08003114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	b0b6      	sub	sp, #216	; 0xd8
 8003118:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311a:	2100      	movs	r1, #0
 800311c:	9131      	str	r1, [sp, #196]	; 0xc4
 800311e:	9132      	str	r1, [sp, #200]	; 0xc8
 8003120:	9133      	str	r1, [sp, #204]	; 0xcc
 8003122:	9134      	str	r1, [sp, #208]	; 0xd0
 8003124:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003126:	22b8      	movs	r2, #184	; 0xb8
 8003128:	a803      	add	r0, sp, #12
 800312a:	f01d fba5 	bl	8020878 <memset>
  if(hspi->Instance==SPI2)
 800312e:	6822      	ldr	r2, [r4, #0]
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_SPI_MspInit+0xc8>)
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003136:	b036      	add	sp, #216	; 0xd8
 8003138:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800313a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800313e:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003140:	a803      	add	r0, sp, #12
 8003142:	f009 f915 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
 8003146:	2800      	cmp	r0, #0
 8003148:	d145      	bne.n	80031d6 <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_SPI_MspInit+0xcc>)
 800314c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003154:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003158:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800315c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003160:	9200      	str	r2, [sp, #0]
 8003162:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003164:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003170:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003174:	f002 0201 	and.w	r2, r2, #1
 8003178:	9201      	str	r2, [sp, #4]
 800317a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800317c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003180:	f042 0204 	orr.w	r2, r2, #4
 8003184:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003188:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003198:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2602      	movs	r6, #2
 800319c:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2400      	movs	r4, #0
 80031a0:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031a4:	2505      	movs	r5, #5
 80031a6:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	a931      	add	r1, sp, #196	; 0xc4
 80031aa:	480e      	ldr	r0, [pc, #56]	; (80031e4 <HAL_SPI_MspInit+0xd0>)
 80031ac:	f006 fca6 	bl	8009afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031b0:	230c      	movs	r3, #12
 80031b2:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031ba:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031bc:	a931      	add	r1, sp, #196	; 0xc4
 80031be:	480a      	ldr	r0, [pc, #40]	; (80031e8 <HAL_SPI_MspInit+0xd4>)
 80031c0:	f006 fc9c 	bl	8009afc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80031c4:	4622      	mov	r2, r4
 80031c6:	4621      	mov	r1, r4
 80031c8:	2024      	movs	r0, #36	; 0x24
 80031ca:	f006 f8df 	bl	800938c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031ce:	2024      	movs	r0, #36	; 0x24
 80031d0:	f006 f912 	bl	80093f8 <HAL_NVIC_EnableIRQ>
}
 80031d4:	e7af      	b.n	8003136 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 80031d6:	f7ff fac9 	bl	800276c <Error_Handler>
 80031da:	e7b6      	b.n	800314a <HAL_SPI_MspInit+0x36>
 80031dc:	40003800 	.word	0x40003800
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58020000 	.word	0x58020000
 80031e8:	58020800 	.word	0x58020800

080031ec <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80031ec:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 80031ee:	6802      	ldr	r2, [r0, #0]
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_SPI_MspDeInit+0x34>)
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d000      	beq.n	80031f8 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80031f6:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 80031f8:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <HAL_SPI_MspDeInit+0x38>)
 80031fa:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 80031fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003202:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8003206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800320a:	4807      	ldr	r0, [pc, #28]	; (8003228 <HAL_SPI_MspDeInit+0x3c>)
 800320c:	f006 fd86 	bl	8009d1c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8003210:	210c      	movs	r1, #12
 8003212:	4806      	ldr	r0, [pc, #24]	; (800322c <HAL_SPI_MspDeInit+0x40>)
 8003214:	f006 fd82 	bl	8009d1c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8003218:	2024      	movs	r0, #36	; 0x24
 800321a:	f006 f8fb 	bl	8009414 <HAL_NVIC_DisableIRQ>
}
 800321e:	e7ea      	b.n	80031f6 <HAL_SPI_MspDeInit+0xa>
 8003220:	40003800 	.word	0x40003800
 8003224:	58024400 	.word	0x58024400
 8003228:	58020000 	.word	0x58020000
 800322c:	58020800 	.word	0x58020800

08003230 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003230:	280f      	cmp	r0, #15
 8003232:	d901      	bls.n	8003238 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8003234:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8003236:	4770      	bx	lr
{
 8003238:	b510      	push	{r4, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800323e:	2200      	movs	r2, #0
 8003240:	4601      	mov	r1, r0
 8003242:	2036      	movs	r0, #54	; 0x36
 8003244:	f006 f8a2 	bl	800938c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003248:	2036      	movs	r0, #54	; 0x36
 800324a:	f006 f8d5 	bl	80093f8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_InitTick+0x88>)
 8003250:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_InitTick+0x8c>)
 8003254:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003258:	f042 0210 	orr.w	r2, r2, #16
 800325c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003260:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800326c:	a901      	add	r1, sp, #4
 800326e:	a802      	add	r0, sp, #8
 8003270:	f008 ff48 	bl	800c104 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003274:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003276:	b9bb      	cbnz	r3, 80032a8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003278:	f008 ff20 	bl	800c0bc <HAL_RCC_GetPCLK1Freq>
 800327c:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800327e:	4810      	ldr	r0, [pc, #64]	; (80032c0 <HAL_InitTick+0x90>)
 8003280:	fba0 2303 	umull	r2, r3, r0, r3
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 8003288:	480e      	ldr	r0, [pc, #56]	; (80032c4 <HAL_InitTick+0x94>)
 800328a:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <HAL_InitTick+0x98>)
 800328c:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800328e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003292:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003294:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800329c:	f00a fe96 	bl	800dfcc <HAL_TIM_Base_Init>
 80032a0:	b130      	cbz	r0, 80032b0 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80032a2:	2001      	movs	r0, #1
}
 80032a4:	b00a      	add	sp, #40	; 0x28
 80032a6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032a8:	f008 ff08 	bl	800c0bc <HAL_RCC_GetPCLK1Freq>
 80032ac:	0043      	lsls	r3, r0, #1
 80032ae:	e7e6      	b.n	800327e <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80032b0:	4804      	ldr	r0, [pc, #16]	; (80032c4 <HAL_InitTick+0x94>)
 80032b2:	f00a fcef 	bl	800dc94 <HAL_TIM_Base_Start_IT>
 80032b6:	e7f5      	b.n	80032a4 <HAL_InitTick+0x74>
 80032b8:	2400007c 	.word	0x2400007c
 80032bc:	58024400 	.word	0x58024400
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	2400219c 	.word	0x2400219c
 80032c8:	40001000 	.word	0x40001000

080032cc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032cc:	4770      	bx	lr

080032ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <HardFault_Handler>

080032d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <MemManage_Handler>

080032d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <BusFault_Handler>

080032d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <UsageFault_Handler>

080032d6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d6:	4770      	bx	lr

080032d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_DATRDY_Pin);
 80032da:	2020      	movs	r0, #32
 80032dc:	f006 fddc 	bl	8009e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032e0:	bd08      	pop	{r3, pc}
	...

080032e4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80032e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80032e6:	4802      	ldr	r0, [pc, #8]	; (80032f0 <SPI2_IRQHandler+0xc>)
 80032e8:	f00a fba6 	bl	800da38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80032ec:	bd08      	pop	{r3, pc}
 80032ee:	bf00      	nop
 80032f0:	24001a5c 	.word	0x24001a5c

080032f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_Pin);
 80032f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032fa:	f006 fdcd 	bl	8009e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032fe:	bd08      	pop	{r3, pc}

08003300 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003300:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003302:	4802      	ldr	r0, [pc, #8]	; (800330c <TIM6_DAC_IRQHandler+0xc>)
 8003304:	f00a fd12 	bl	800dd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003308:	bd08      	pop	{r3, pc}
 800330a:	bf00      	nop
 800330c:	2400219c 	.word	0x2400219c

08003310 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003310:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003312:	4802      	ldr	r0, [pc, #8]	; (800331c <LTDC_IRQHandler+0xc>)
 8003314:	f007 fb6c 	bl	800a9f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003318:	bd08      	pop	{r3, pc}
 800331a:	bf00      	nop
 800331c:	24001958 	.word	0x24001958

08003320 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003320:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003322:	4802      	ldr	r0, [pc, #8]	; (800332c <DMA2D_IRQHandler+0xc>)
 8003324:	f006 faca 	bl	80098bc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003328:	bd08      	pop	{r3, pc}
 800332a:	bf00      	nop
 800332c:	240018a4 	.word	0x240018a4

08003330 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003332:	4802      	ldr	r0, [pc, #8]	; (800333c <OCTOSPI1_IRQHandler+0xc>)
 8003334:	f007 ff66 	bl	800b204 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003338:	bd08      	pop	{r3, pc}
 800333a:	bf00      	nop
 800333c:	24001a00 	.word	0x24001a00

08003340 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003340:	2001      	movs	r0, #1
 8003342:	4770      	bx	lr

08003344 <_kill>:

int _kill(int pid, int sig)
{
 8003344:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003346:	f01d f933 	bl	80205b0 <__errno>
 800334a:	2316      	movs	r3, #22
 800334c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800334e:	f04f 30ff 	mov.w	r0, #4294967295
 8003352:	bd08      	pop	{r3, pc}

08003354 <_exit>:

void _exit (int status)
{
 8003354:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003356:	f04f 31ff 	mov.w	r1, #4294967295
 800335a:	f7ff fff3 	bl	8003344 <_kill>
	while (1) {}		/* Make sure we hang here */
 800335e:	e7fe      	b.n	800335e <_exit+0xa>

08003360 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	460c      	mov	r4, r1
 8003364:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003366:	2500      	movs	r5, #0
 8003368:	e006      	b.n	8003378 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800336a:	f3af 8000 	nop.w
 800336e:	4621      	mov	r1, r4
 8003370:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003374:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003376:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003378:	42b5      	cmp	r5, r6
 800337a:	dbf6      	blt.n	800336a <_read+0xa>
	}

return len;
}
 800337c:	4630      	mov	r0, r6
 800337e:	bd70      	pop	{r4, r5, r6, pc}

08003380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	460c      	mov	r4, r1
 8003384:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003386:	2500      	movs	r5, #0
 8003388:	e004      	b.n	8003394 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800338a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800338e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003392:	3501      	adds	r5, #1
 8003394:	42b5      	cmp	r5, r6
 8003396:	dbf8      	blt.n	800338a <_write+0xa>
	}
	return len;
}
 8003398:	4630      	mov	r0, r6
 800339a:	bd70      	pop	{r4, r5, r6, pc}

0800339c <_close>:

int _close(int file)
{
	return -1;
}
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	4770      	bx	lr

080033a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80033a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80033a8:	2000      	movs	r0, #0
 80033aa:	4770      	bx	lr

080033ac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80033ac:	2001      	movs	r0, #1
 80033ae:	4770      	bx	lr

080033b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80033b0:	2000      	movs	r0, #0
 80033b2:	4770      	bx	lr

080033b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80033b4:	b508      	push	{r3, lr}
 80033b6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033b8:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <_sbrk+0x34>)
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	b142      	cbz	r2, 80033d0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <_sbrk+0x34>)
 80033c0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80033c2:	4403      	add	r3, r0
 80033c4:	466a      	mov	r2, sp
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d806      	bhi.n	80033d8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <_sbrk+0x34>)
 80033cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80033ce:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80033d0:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <_sbrk+0x34>)
 80033d2:	4906      	ldr	r1, [pc, #24]	; (80033ec <_sbrk+0x38>)
 80033d4:	6011      	str	r1, [r2, #0]
 80033d6:	e7f2      	b.n	80033be <_sbrk+0xa>
		errno = ENOMEM;
 80033d8:	f01d f8ea 	bl	80205b0 <__errno>
 80033dc:	230c      	movs	r3, #12
 80033de:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	e7f3      	b.n	80033ce <_sbrk+0x1a>
 80033e6:	bf00      	nop
 80033e8:	240021e8 	.word	0x240021e8
 80033ec:	2400cad8 	.word	0x2400cad8

080033f0 <wifi_networkInit>:
  * @brief  Network interface initialization
  * @param  none
  * @retval 0 in case of success, an error code otherwise
  */
static int wifi_networkInit(void)
{
 80033f0:	b510      	push	{r4, lr}
  if (net_if_init(&netif, es_wifi_driver_ptr, &net_handler) != NET_OK)
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <wifi_networkInit+0x44>)
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <wifi_networkInit+0x48>)
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	4810      	ldr	r0, [pc, #64]	; (800343c <wifi_networkInit+0x4c>)
 80033fa:	f00d facb 	bl	8010994 <net_if_init>
 80033fe:	b998      	cbnz	r0, 8003428 <wifi_networkInit+0x38>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_INITIALIZED,STATE_TRANSITION_TIMEOUT);
 8003400:	4c0e      	ldr	r4, [pc, #56]	; (800343c <wifi_networkInit+0x4c>)
 8003402:	f242 7210 	movw	r2, #10000	; 0x2710
 8003406:	2101      	movs	r1, #1
 8003408:	4620      	mov	r0, r4
 800340a:	f00d fa9c 	bl	8010946 <net_if_wait_state>
  if ( net_if_start (&netif) != NET_OK )
 800340e:	4620      	mov	r0, r4
 8003410:	f00d fad5 	bl	80109be <net_if_start>
 8003414:	4604      	mov	r4, r0
 8003416:	b950      	cbnz	r0, 800342e <wifi_networkInit+0x3e>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_READY,STATE_TRANSITION_TIMEOUT);
 8003418:	f242 7210 	movw	r2, #10000	; 0x2710
 800341c:	2103      	movs	r1, #3
 800341e:	4807      	ldr	r0, [pc, #28]	; (800343c <wifi_networkInit+0x4c>)
 8003420:	f00d fa91 	bl	8010946 <net_if_wait_state>

  return 0;
}
 8003424:	4620      	mov	r0, r4
 8003426:	bd10      	pop	{r4, pc}
    return -1;
 8003428:	f04f 34ff 	mov.w	r4, #4294967295
 800342c:	e7fa      	b.n	8003424 <wifi_networkInit+0x34>
    return -1;
 800342e:	f04f 34ff 	mov.w	r4, #4294967295
 8003432:	e7f7      	b.n	8003424 <wifi_networkInit+0x34>
 8003434:	240023f4 	.word	0x240023f4
 8003438:	2400000c 	.word	0x2400000c
 800343c:	240023fc 	.word	0x240023fc

08003440 <wifi_initialise>:
  * @brief  Initializes module wifi network interface
  * @param  none
  * @retval none
  */
void wifi_initialise(void)
{
 8003440:	b508      	push	{r3, lr}
    wifi_networkInit();
 8003442:	f7ff ffd5 	bl	80033f0 <wifi_networkInit>
}
 8003446:	bd08      	pop	{r3, pc}

08003448 <wifi_scan>:
  * @brief  Get available access points
  * @param  APs: pointer Access points structure
  * @retval ES Wifi status
  */
int32_t wifi_scan(net_wifi_scan_results_t *APs)
{
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4604      	mov	r4, r0
  int32_t ret;
  ret = net_wifi_scan(&netif,NET_WIFI_SCAN_PASSIVE,NULL);
 800344c:	2200      	movs	r2, #0
 800344e:	4611      	mov	r1, r2
 8003450:	4807      	ldr	r0, [pc, #28]	; (8003470 <wifi_scan+0x28>)
 8003452:	f00d fa0b 	bl	801086c <net_wifi_scan>
  if (ret == NET_OK)
 8003456:	4605      	mov	r5, r0
 8003458:	b108      	cbz	r0, 800345e <wifi_scan+0x16>
  {
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
    if (ret > 0) ret= NET_OK;
  }
  return ret;
}
 800345a:	4628      	mov	r0, r5
 800345c:	bd38      	pop	{r3, r4, r5, pc}
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 800345e:	220a      	movs	r2, #10
 8003460:	4621      	mov	r1, r4
 8003462:	4803      	ldr	r0, [pc, #12]	; (8003470 <wifi_scan+0x28>)
 8003464:	f00d fa1c 	bl	80108a0 <net_wifi_get_scan_results>
    if (ret > 0) ret= NET_OK;
 8003468:	2800      	cmp	r0, #0
 800346a:	dcf6      	bgt.n	800345a <wifi_scan+0x12>
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 800346c:	4605      	mov	r5, r0
  return ret;
 800346e:	e7f4      	b.n	800345a <wifi_scan+0x12>
 8003470:	240023fc 	.word	0x240023fc

08003474 <wifi_connect>:
  * @param  password:  access point password
  * @param  encryption : security mode
  * @retval 0 in case of success, an error code otherwise
  */
int8_t wifi_connect(char *ssid, uint8_t *password, int32_t encryption )
{  
 8003474:	b500      	push	{lr}
 8003476:	b085      	sub	sp, #20
  net_wifi_credentials_t  Credentials = 
 8003478:	9001      	str	r0, [sp, #4]
 800347a:	9102      	str	r1, [sp, #8]
 800347c:	9203      	str	r2, [sp, #12]
    (char const*) ssid,
    (char const*)password,
    encryption
  };
  
  if (net_wifi_set_credentials(&netif, &Credentials) != NET_OK)
 800347e:	a901      	add	r1, sp, #4
 8003480:	4813      	ldr	r0, [pc, #76]	; (80034d0 <wifi_connect+0x5c>)
 8003482:	f00d fa23 	bl	80108cc <net_wifi_set_credentials>
 8003486:	b9e8      	cbnz	r0, 80034c4 <wifi_connect+0x50>
  {
    return -1;
  }
  
  if (netif.state == NET_STATE_CONNECTING )
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <wifi_connect+0x5c>)
 800348a:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 800348e:	2b04      	cmp	r3, #4
 8003490:	d00b      	beq.n	80034aa <wifi_connect+0x36>
  {
    netif.state = NET_STATE_CONNECTED ; 
  }
    
  if (netif.state == NET_STATE_CONNECTED ) 
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <wifi_connect+0x5c>)
 8003494:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8003498:	2b05      	cmp	r3, #5
 800349a:	d00b      	beq.n	80034b4 <wifi_connect+0x40>
    {
      return  -1;
    }
  }
  
  if(net_if_connect (&netif) != NET_OK)
 800349c:	480c      	ldr	r0, [pc, #48]	; (80034d0 <wifi_connect+0x5c>)
 800349e:	f00d fa93 	bl	80109c8 <net_if_connect>
 80034a2:	b990      	cbnz	r0, 80034ca <wifi_connect+0x56>
  {
    return -1;
  }

  return NET_OK;
}
 80034a4:	b005      	add	sp, #20
 80034a6:	f85d fb04 	ldr.w	pc, [sp], #4
    netif.state = NET_STATE_CONNECTED ; 
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <wifi_connect+0x5c>)
 80034ac:	2205      	movs	r2, #5
 80034ae:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80034b2:	e7ee      	b.n	8003492 <wifi_connect+0x1e>
    if(net_if_disconnect(&netif)!= NET_OK)
 80034b4:	4806      	ldr	r0, [pc, #24]	; (80034d0 <wifi_connect+0x5c>)
 80034b6:	f00d fa8c 	bl	80109d2 <net_if_disconnect>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d0ee      	beq.n	800349c <wifi_connect+0x28>
      return  -1;
 80034be:	f04f 30ff 	mov.w	r0, #4294967295
 80034c2:	e7ef      	b.n	80034a4 <wifi_connect+0x30>
    return -1;
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	e7ec      	b.n	80034a4 <wifi_connect+0x30>
    return -1;
 80034ca:	f04f 30ff 	mov.w	r0, #4294967295
 80034ce:	e7e9      	b.n	80034a4 <wifi_connect+0x30>
 80034d0:	240023fc 	.word	0x240023fc

080034d4 <esWiFi_Task>:
 * WiFi Task
 * - Handle requests from GUI task
 * - Return status to GUI task
 */
void esWiFi_Task(void *argument)
{
 80034d4:	b500      	push	{lr}
 80034d6:	b083      	sub	sp, #12
    uint8_t msg;
    uint8_t retvalue;

    wifi_scan(&APs[0]);
 80034d8:	4824      	ldr	r0, [pc, #144]	; (800356c <esWiFi_Task+0x98>)
 80034da:	f7ff ffb5 	bl	8003448 <wifi_scan>
 80034de:	e015      	b.n	800350c <esWiFi_Task+0x38>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);

        switch(msg)
        {
            case UPDATE_WIFI_AP:
                memset(&APs, 0, sizeof(APs));
 80034e0:	4c22      	ldr	r4, [pc, #136]	; (800356c <esWiFi_Task+0x98>)
 80034e2:	f44f 7202 	mov.w	r2, #520	; 0x208
 80034e6:	2100      	movs	r1, #0
 80034e8:	4620      	mov	r0, r4
 80034ea:	f01d f9c5 	bl	8020878 <memset>

                if(wifi_scan(&APs[0]) == NET_OK)
 80034ee:	4620      	mov	r0, r4
 80034f0:	f7ff ffaa 	bl	8003448 <wifi_scan>
 80034f4:	b950      	cbnz	r0, 800350c <esWiFi_Task+0x38>
                {
                    retvalue = UPDATE_WIFI_AP_DONE;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 80034fc:	2300      	movs	r3, #0
 80034fe:	461a      	mov	r2, r3
 8003500:	f10d 0106 	add.w	r1, sp, #6
 8003504:	481a      	ldr	r0, [pc, #104]	; (8003570 <esWiFi_Task+0x9c>)
 8003506:	6800      	ldr	r0, [r0, #0]
 8003508:	f00a ff37 	bl	800e37a <osMessageQueuePut>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	2200      	movs	r2, #0
 8003512:	f10d 0107 	add.w	r1, sp, #7
 8003516:	4817      	ldr	r0, [pc, #92]	; (8003574 <esWiFi_Task+0xa0>)
 8003518:	6800      	ldr	r0, [r0, #0]
 800351a:	f00a ff6e 	bl	800e3fa <osMessageQueueGet>
        switch(msg)
 800351e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0dc      	beq.n	80034e0 <esWiFi_Task+0xc>
 8003526:	2b02      	cmp	r3, #2
 8003528:	d1f0      	bne.n	800350c <esWiFi_Task+0x38>
                }
            break;

            case CONNECTING_TO_WIFI:
                if(wifi_connect((char*)ssid_ascii, password_ascii, net_wifi_string_to_security((char*)encryption_ascii)) != NET_OK)
 800352a:	4813      	ldr	r0, [pc, #76]	; (8003578 <esWiFi_Task+0xa4>)
 800352c:	f00d f8dc 	bl	80106e8 <net_wifi_string_to_security>
 8003530:	4602      	mov	r2, r0
 8003532:	4912      	ldr	r1, [pc, #72]	; (800357c <esWiFi_Task+0xa8>)
 8003534:	4812      	ldr	r0, [pc, #72]	; (8003580 <esWiFi_Task+0xac>)
 8003536:	f7ff ff9d 	bl	8003474 <wifi_connect>
 800353a:	b158      	cbz	r0, 8003554 <esWiFi_Task+0x80>
                {
                    retvalue = CONNECTING_TO_WIFI_ERROR;
 800353c:	2304      	movs	r3, #4
 800353e:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8003542:	2300      	movs	r3, #0
 8003544:	461a      	mov	r2, r3
 8003546:	f10d 0106 	add.w	r1, sp, #6
 800354a:	4809      	ldr	r0, [pc, #36]	; (8003570 <esWiFi_Task+0x9c>)
 800354c:	6800      	ldr	r0, [r0, #0]
 800354e:	f00a ff14 	bl	800e37a <osMessageQueuePut>
 8003552:	e7db      	b.n	800350c <esWiFi_Task+0x38>
                }
                else
                {
                    retvalue = CONNECTING_TO_WIFI_OK;
 8003554:	2303      	movs	r3, #3
 8003556:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 800355a:	2300      	movs	r3, #0
 800355c:	461a      	mov	r2, r3
 800355e:	f10d 0106 	add.w	r1, sp, #6
 8003562:	4803      	ldr	r0, [pc, #12]	; (8003570 <esWiFi_Task+0x9c>)
 8003564:	6800      	ldr	r0, [r0, #0]
 8003566:	f00a ff08 	bl	800e37a <osMessageQueuePut>
 800356a:	e7cf      	b.n	800350c <esWiFi_Task+0x38>
 800356c:	240021ec 	.word	0x240021ec
 8003570:	24001870 	.word	0x24001870
 8003574:	24001878 	.word	0x24001878
 8003578:	24002a14 	.word	0x24002a14
 800357c:	24002a34 	.word	0x24002a34
 8003580:	24002a74 	.word	0x24002a74

08003584 <_ZN23ApplicationFontProviderD1Ev>:
 8003584:	4a02      	ldr	r2, [pc, #8]	; (8003590 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 8003586:	6002      	str	r2, [r0, #0]
 8003588:	4a02      	ldr	r2, [pc, #8]	; (8003594 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 800358a:	6002      	str	r2, [r0, #0]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	080225a4 	.word	0x080225a4
 8003594:	08022200 	.word	0x08022200

08003598 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003598:	b508      	push	{r3, lr}
    switch (typography)
 800359a:	2907      	cmp	r1, #7
 800359c:	d825      	bhi.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x52>
 800359e:	e8df f001 	tbb	[pc, r1]
 80035a2:	0804      	.short	0x0804
 80035a4:	1814100c 	.word	0x1814100c
 80035a8:	201c      	.short	0x201c
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80035aa:	f000 ff99 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 80035ae:	6800      	ldr	r0, [r0, #0]
        // SairaSemiCondensed_Medium_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
    default:
        return 0;
    }
}
 80035b0:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80035b2:	f000 ff95 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 80035b6:	6840      	ldr	r0, [r0, #4]
 80035b8:	e7fa      	b.n	80035b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80035ba:	f000 ff91 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 80035be:	6880      	ldr	r0, [r0, #8]
 80035c0:	e7f6      	b.n	80035b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80035c2:	f000 ff8d 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 80035c6:	68c0      	ldr	r0, [r0, #12]
 80035c8:	e7f2      	b.n	80035b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80035ca:	f000 ff89 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 80035ce:	6900      	ldr	r0, [r0, #16]
 80035d0:	e7ee      	b.n	80035b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80035d2:	f000 ff85 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 80035d6:	6900      	ldr	r0, [r0, #16]
 80035d8:	e7ea      	b.n	80035b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80035da:	f000 ff81 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 80035de:	6940      	ldr	r0, [r0, #20]
 80035e0:	e7e6      	b.n	80035b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80035e2:	f000 ff7d 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 80035e6:	6980      	ldr	r0, [r0, #24]
 80035e8:	e7e2      	b.n	80035b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
    switch (typography)
 80035ea:	2000      	movs	r0, #0
 80035ec:	e7e0      	b.n	80035b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
	...

080035f0 <_ZN23ApplicationFontProviderD0Ev>:
 80035f0:	b510      	push	{r4, lr}
 80035f2:	4604      	mov	r4, r0
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 80035f6:	6003      	str	r3, [r0, #0]
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 80035fa:	6003      	str	r3, [r0, #0]
 80035fc:	2104      	movs	r1, #4
 80035fe:	f01c ff76 	bl	80204ee <_ZdlPvj>
 8003602:	4620      	mov	r0, r4
 8003604:	bd10      	pop	{r4, pc}
 8003606:	bf00      	nop
 8003608:	080225a4 	.word	0x080225a4
 800360c:	08022200 	.word	0x08022200

08003610 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003610:	4800      	ldr	r0, [pc, #0]	; (8003614 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003612:	4770      	bx	lr
 8003614:	080225b0 	.word	0x080225b0

08003618 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003618:	200d      	movs	r0, #13
 800361a:	4770      	bx	lr

0800361c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 800361c:	b169      	cbz	r1, 800363a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800361e:	b510      	push	{r4, lr}
 8003620:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003626:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800362a:	6803      	ldr	r3, [r0, #0]
 800362c:	689c      	ldr	r4, [r3, #8]
 800362e:	f10d 0303 	add.w	r3, sp, #3
 8003632:	aa01      	add	r2, sp, #4
 8003634:	47a0      	blx	r4
        return glyph;
    }
 8003636:	b002      	add	sp, #8
 8003638:	bd10      	pop	{r4, pc}
            return 0;
 800363a:	2000      	movs	r0, #0
    }
 800363c:	4770      	bx	lr

0800363e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800363e:	8940      	ldrh	r0, [r0, #10]
 8003640:	4770      	bx	lr

08003642 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003642:	8980      	ldrh	r0, [r0, #12]
 8003644:	4770      	bx	lr

08003646 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003646:	8880      	ldrh	r0, [r0, #4]
 8003648:	4770      	bx	lr

0800364a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800364a:	8883      	ldrh	r3, [r0, #4]
 800364c:	7980      	ldrb	r0, [r0, #6]
 800364e:	4418      	add	r0, r3
    }
 8003650:	b280      	uxth	r0, r0
 8003652:	4770      	bx	lr

08003654 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003654:	79c0      	ldrb	r0, [r0, #7]
    }
 8003656:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800365a:	4770      	bx	lr

0800365c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800365c:	79c0      	ldrb	r0, [r0, #7]
    }
 800365e:	09c0      	lsrs	r0, r0, #7
 8003660:	4770      	bx	lr
	...

08003664 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8003664:	4b01      	ldr	r3, [pc, #4]	; (800366c <_ZN8touchgfx10TransitionD1Ev+0x8>)
 8003666:	6003      	str	r3, [r0, #0]
    }
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	080229e8 	.word	0x080229e8

08003670 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 8003670:	4770      	bx	lr

08003672 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003672:	4770      	bx	lr

08003674 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003674:	4770      	bx	lr

08003676 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003676:	6041      	str	r1, [r0, #4]
    }
 8003678:	4770      	bx	lr

0800367a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800367a:	2301      	movs	r3, #1
 800367c:	7203      	strb	r3, [r0, #8]
    }
 800367e:	4770      	bx	lr

08003680 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003680:	4a02      	ldr	r2, [pc, #8]	; (800368c <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 8003682:	6002      	str	r2, [r0, #0]
    {
 8003684:	4a02      	ldr	r2, [pc, #8]	; (8003690 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 8003686:	6002      	str	r2, [r0, #0]
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	08022a0c 	.word	0x08022a0c
 8003690:	080229e8 	.word	0x080229e8

08003694 <_Z41__static_initialization_and_destruction_0ii>:
}

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
 8003694:	2801      	cmp	r0, #1
 8003696:	d006      	beq.n	80036a6 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8003698:	b920      	cbnz	r0, 80036a4 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800369a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800369e:	4299      	cmp	r1, r3
 80036a0:	f000 8222 	beq.w	8003ae8 <_Z41__static_initialization_and_destruction_0ii+0x454>
 80036a4:	4770      	bx	lr
 80036a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036aa:	4299      	cmp	r1, r3
 80036ac:	d1f4      	bne.n	8003698 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80036ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80036b2:	4bf0      	ldr	r3, [pc, #960]	; (8003a74 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80036b8:	240c      	movs	r4, #12
 80036ba:	805c      	strh	r4, [r3, #2]
 80036bc:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80036c0:	f8a3 e004 	strh.w	lr, [r3, #4]
 80036c4:	2224      	movs	r2, #36	; 0x24
 80036c6:	80da      	strh	r2, [r3, #6]
 80036c8:	811a      	strh	r2, [r3, #8]
 80036ca:	f04f 0c06 	mov.w	ip, #6
 80036ce:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80036d2:	2502      	movs	r5, #2
 80036d4:	731d      	strb	r5, [r3, #12]
 80036d6:	f04f 0a36 	mov.w	sl, #54	; 0x36
 80036da:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80036de:	f8a3 e010 	strh.w	lr, [r3, #16]
 80036e2:	825a      	strh	r2, [r3, #18]
 80036e4:	829a      	strh	r2, [r3, #20]
 80036e6:	f8a3 c016 	strh.w	ip, [r3, #22]
 80036ea:	f04f 0503 	mov.w	r5, #3
 80036ee:	761d      	strb	r5, [r3, #24]
 80036f0:	f04f 0660 	mov.w	r6, #96	; 0x60
 80036f4:	835e      	strh	r6, [r3, #26]
 80036f6:	f8a3 e01c 	strh.w	lr, [r3, #28]
 80036fa:	83da      	strh	r2, [r3, #30]
 80036fc:	841a      	strh	r2, [r3, #32]
 80036fe:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8003702:	f04f 0504 	mov.w	r5, #4
 8003706:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 800370a:	f04f 088a 	mov.w	r8, #138	; 0x8a
 800370e:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8003712:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003718:	859a      	strh	r2, [r3, #44]	; 0x2c
 800371a:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 800371e:	f04f 0505 	mov.w	r5, #5
 8003722:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8003726:	27b4      	movs	r7, #180	; 0xb4
 8003728:	865f      	strh	r7, [r3, #50]	; 0x32
 800372a:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 800372e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003730:	871a      	strh	r2, [r3, #56]	; 0x38
 8003732:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8003736:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 800373a:	f04f 05de 	mov.w	r5, #222	; 0xde
 800373e:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8003740:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8003744:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8003748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800374c:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8003750:	f04f 0907 	mov.w	r9, #7
 8003754:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8003758:	f44f 7984 	mov.w	r9, #264	; 0x108
 800375c:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8003760:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8003764:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8003768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800376c:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8003770:	f04f 0b08 	mov.w	fp, #8
 8003774:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8003778:	f44f 7b99 	mov.w	fp, #306	; 0x132
 800377c:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8003780:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8003784:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8003788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800378c:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8003790:	2509      	movs	r5, #9
 8003792:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8003796:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 800379a:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 800379e:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80037a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80037a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80037aa:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80037ae:	250a      	movs	r5, #10
 80037b0:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80037b4:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80037b8:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80037bc:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 80037c0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80037c4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80037c8:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 80037cc:	f04f 090b 	mov.w	r9, #11
 80037d0:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80037d4:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 80037d8:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 80037dc:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 80037e0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80037e4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80037e8:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 80037ec:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 80037f0:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 80037f4:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 80037f8:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 80037fc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8003800:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8003804:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8003808:	f04f 060d 	mov.w	r6, #13
 800380c:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8003810:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8003814:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8003818:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800381c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8003820:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8003824:	f04f 0a0e 	mov.w	sl, #14
 8003828:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 800382c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003830:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8003834:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8003838:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800383c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003840:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8003844:	f04f 0a0f 	mov.w	sl, #15
 8003848:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 800384c:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8003850:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8003854:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8003858:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800385c:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8003860:	f04f 0a10 	mov.w	sl, #16
 8003864:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8003868:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 800386c:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8003870:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8003874:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8003878:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 800387c:	f04f 0a11 	mov.w	sl, #17
 8003880:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8003884:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8003888:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 800388c:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8003890:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8003894:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8003898:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 800389c:	f04f 0a12 	mov.w	sl, #18
 80038a0:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80038a4:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80038a8:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80038ac:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80038b0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80038b4:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80038b8:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80038bc:	f04f 0a13 	mov.w	sl, #19
 80038c0:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 80038c4:	f44f 7a99 	mov.w	sl, #306	; 0x132
 80038c8:	4656      	mov	r6, sl
 80038ca:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 80038ce:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80038d2:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80038d6:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80038da:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 80038de:	f04f 0a14 	mov.w	sl, #20
 80038e2:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 80038e6:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 80038ea:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 80038ee:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 80038f2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80038f6:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 80038fa:	f04f 0a15 	mov.w	sl, #21
 80038fe:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8003902:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8003906:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 800390a:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 800390e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8003912:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8003916:	f04f 0a16 	mov.w	sl, #22
 800391a:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 800391e:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8003922:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8003926:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800392a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800392e:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8003932:	f04f 0e17 	mov.w	lr, #23
 8003936:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800393a:	f04f 0e60 	mov.w	lr, #96	; 0x60
 800393e:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8003942:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8003946:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800394a:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 800394e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8003952:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8003956:	f04f 0918 	mov.w	r9, #24
 800395a:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 800395e:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8003962:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8003966:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 800396a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800396e:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8003972:	f04f 0819 	mov.w	r8, #25
 8003976:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 800397a:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 800397e:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8003982:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8003986:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 800398a:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 800398e:	271a      	movs	r7, #26
 8003990:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8003994:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8003998:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 800399c:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80039a0:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80039a4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80039a8:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80039ac:	271b      	movs	r7, #27
 80039ae:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80039b2:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80039b6:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80039ba:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 80039be:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80039c2:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 80039c6:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 80039ca:	271c      	movs	r7, #28
 80039cc:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 80039d0:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 80039d4:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 80039d8:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 80039dc:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 80039e0:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 80039e4:	271d      	movs	r7, #29
 80039e6:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 80039ea:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 80039ee:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 80039f2:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 80039f6:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 80039fa:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 80039fe:	271e      	movs	r7, #30
 8003a00:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8003a04:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003a08:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8003a0c:	26e2      	movs	r6, #226	; 0xe2
 8003a0e:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8003a12:	f44f 7790 	mov.w	r7, #288	; 0x120
 8003a16:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8003a1a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8003a1e:	f04f 0708 	mov.w	r7, #8
 8003a22:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8003a28:	801c      	strh	r4, [r3, #0]
 8003a2a:	f8a3 e002 	strh.w	lr, [r3, #2]
 8003a2e:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8003a32:	f8a3 c004 	strh.w	ip, [r3, #4]
 8003a36:	80da      	strh	r2, [r3, #6]
};
 8003a38:	2700      	movs	r7, #0
 8003a3a:	609f      	str	r7, [r3, #8]
 8003a3c:	f04f 0804 	mov.w	r8, #4
 8003a40:	f8a3 800c 	strh.w	r8, [r3, #12]
 8003a44:	821d      	strh	r5, [r3, #16]
 8003a46:	f8a3 e012 	strh.w	lr, [r3, #18]
 8003a4a:	f8a3 c014 	strh.w	ip, [r3, #20]
 8003a4e:	82da      	strh	r2, [r3, #22]
 8003a50:	619f      	str	r7, [r3, #24]
 8003a52:	f04f 0e03 	mov.w	lr, #3
 8003a56:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8003a5a:	841c      	strh	r4, [r3, #32]
 8003a5c:	845e      	strh	r6, [r3, #34]	; 0x22
 8003a5e:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8003a62:	84da      	strh	r2, [r3, #38]	; 0x26
 8003a64:	629f      	str	r7, [r3, #40]	; 0x28
 8003a66:	f04f 0407 	mov.w	r4, #7
 8003a6a:	859c      	strh	r4, [r3, #44]	; 0x2c
 8003a6c:	861d      	strh	r5, [r3, #48]	; 0x30
 8003a6e:	865e      	strh	r6, [r3, #50]	; 0x32
 8003a70:	e004      	b.n	8003a7c <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8003a72:	bf00      	nop
 8003a74:	24002584 	.word	0x24002584
 8003a78:	240024f4 	.word	0x240024f4
 8003a7c:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8003a80:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a82:	639f      	str	r7, [r3, #56]	; 0x38
 8003a84:	f04f 0205 	mov.w	r2, #5
 8003a88:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	3340      	adds	r3, #64	; 0x40
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	db0b      	blt.n	8003aaa <_Z41__static_initialization_and_destruction_0ii+0x416>
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	805a      	strh	r2, [r3, #2]
 8003aa0:	809a      	strh	r2, [r3, #4]
 8003aa2:	80da      	strh	r2, [r3, #6]
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	3c01      	subs	r4, #1
 8003aa8:	e7f1      	b.n	8003a8e <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003aac:	2205      	movs	r2, #5
 8003aae:	825a      	strh	r2, [r3, #18]
 8003ab0:	222d      	movs	r2, #45	; 0x2d
 8003ab2:	829a      	strh	r2, [r3, #20]
 8003ab4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003ab8:	82da      	strh	r2, [r3, #22]
 8003aba:	2246      	movs	r2, #70	; 0x46
 8003abc:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8003abe:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003ac0:	61da      	str	r2, [r3, #28]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	841a      	strh	r2, [r3, #32]
        : color(col)
 8003ac6:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
 8003acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8003ad2:	b918      	cbnz	r0, 8003adc <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad8:	4299      	cmp	r1, r3
 8003ada:	d001      	beq.n	8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8003adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003ae2:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003ae4:	61da      	str	r2, [r3, #28]
 8003ae6:	e7f9      	b.n	8003adc <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003aea:	4a02      	ldr	r2, [pc, #8]	; (8003af4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003aec:	61da      	str	r2, [r3, #28]
 8003aee:	4770      	bx	lr
 8003af0:	24002554 	.word	0x24002554
 8003af4:	080221f0 	.word	0x080221f0

08003af8 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003af8:	b510      	push	{r4, lr}
 8003afa:	4604      	mov	r4, r0
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 8003afe:	6003      	str	r3, [r0, #0]
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8003b02:	6003      	str	r3, [r0, #0]
 8003b04:	210c      	movs	r1, #12
 8003b06:	f01c fcf2 	bl	80204ee <_ZdlPvj>
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	bd10      	pop	{r4, pc}
 8003b0e:	bf00      	nop
 8003b10:	08022a0c 	.word	0x08022a0c
 8003b14:	080229e8 	.word	0x080229e8

08003b18 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	4604      	mov	r4, r0
    {
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <_ZN8touchgfx10TransitionD0Ev+0x14>)
 8003b1e:	6003      	str	r3, [r0, #0]
    }
 8003b20:	210c      	movs	r1, #12
 8003b22:	f01c fce4 	bl	80204ee <_ZdlPvj>
 8003b26:	4620      	mov	r0, r4
 8003b28:	bd10      	pop	{r4, pc}
 8003b2a:	bf00      	nop
 8003b2c:	080229e8 	.word	0x080229e8

08003b30 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003b30:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8003b32:	f011 ff4f 	bl	80159d4 <_ZN8touchgfx11Application11getInstanceEv>
 8003b36:	f012 faf3 	bl	8016120 <_ZN8touchgfx11Application10invalidateEv>
    }
 8003b3a:	bd08      	pop	{r3, pc}

08003b3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	4604      	mov	r4, r0
 8003b40:	460e      	mov	r6, r1
 8003b42:	4617      	mov	r7, r2
          pendingScreenTransitionCallback(0)
 8003b44:	f011 ff68 	bl	8015a18 <_ZN8touchgfx11ApplicationC1Ev>
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	2500      	movs	r5, #0
 8003b4e:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8003b52:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        instance = this;
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8003b58:	601c      	str	r4, [r3, #0]
      model(m)
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8003b5c:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8003b60:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 8003b66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003b6a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003b6e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8003b72:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8003b76:	f8c4 7150 	str.w	r7, [r4, #336]	; 0x150
 8003b7a:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        return instance;
 8003b7e:	4e0f      	ldr	r6, [pc, #60]	; (8003bbc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
 8003b80:	6830      	ldr	r0, [r6, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4629      	mov	r1, r5
 8003b88:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f000 fc36 	bl	80043fc <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b90:	6833      	ldr	r3, [r6, #0]
 8003b92:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003b96:	b10a      	cbz	r2, 8003b9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
 8003b98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003b9a:	b900      	cbnz	r0, 8003b9e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x62>
        return instance->lcdRef;
 8003b9c:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003b9e:	f017 fe82 	bl	801b8a6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08022264 	.word	0x08022264
 8003bac:	2400c8a0 	.word	0x2400c8a0
 8003bb0:	080222c8 	.word	0x080222c8
 8003bb4:	0802224c 	.word	0x0802224c
 8003bb8:	080222b0 	.word	0x080222b0
 8003bbc:	2400c854 	.word	0x2400c854

08003bc0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
{
 8003bc0:	b410      	push	{r4}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 8003bc6:	4a10      	ldr	r2, [pc, #64]	; (8003c08 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8003bc8:	9206      	str	r2, [sp, #24]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	9207      	str	r2, [sp, #28]
 8003bce:	46ec      	mov	ip, sp
 8003bd0:	aa08      	add	r2, sp, #32
 8003bd2:	e912 0003 	ldmdb	r2, {r0, r1}
 8003bd6:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8003bda:	4c0c      	ldr	r4, [pc, #48]	; (8003c0c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8003bdc:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8003be0:	9202      	str	r2, [sp, #8]
 8003be2:	9303      	str	r3, [sp, #12]
 8003be4:	aa04      	add	r2, sp, #16
 8003be6:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003bea:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8003bee:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 8003bf2:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 8003bf6:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8003bf8:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003bfc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003c00:	b009      	add	sp, #36	; 0x24
 8003c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	08003d65 	.word	0x08003d65
 8003c0c:	0802224c 	.word	0x0802224c
 8003c10:	080222b0 	.word	0x080222b0

08003c14 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c18:	4607      	mov	r7, r0
 8003c1a:	4688      	mov	r8, r1
 8003c1c:	4615      	mov	r5, r2
 8003c1e:	4699      	mov	r9, r3
 8003c20:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003c24:	6890      	ldr	r0, [r2, #8]
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4798      	blx	r3
 8003c2c:	f5b0 7f37 	cmp.w	r0, #732	; 0x2dc
 8003c30:	d376      	bcc.n	8003d20 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003c32:	6868      	ldr	r0, [r5, #4]
 8003c34:	6803      	ldr	r3, [r0, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4798      	blx	r3
 8003c3a:	280f      	cmp	r0, #15
 8003c3c:	d976      	bls.n	8003d2c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003c3e:	68e8      	ldr	r0, [r5, #12]
 8003c40:	6803      	ldr	r3, [r0, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	4798      	blx	r3
 8003c46:	280b      	cmp	r0, #11
 8003c48:	d976      	bls.n	8003d38 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
    Application::getInstance()->clearAllTimerWidgets();
 8003c4a:	f011 fec3 	bl	80159d4 <_ZN8touchgfx11Application11getInstanceEv>
 8003c4e:	f011 fec7 	bl	80159e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003c52:	f8d9 0000 	ldr.w	r0, [r9]
 8003c56:	b110      	cbz	r0, 8003c5e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x4a>
        (*currentTrans)->tearDown();
 8003c58:	6803      	ldr	r3, [r0, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4798      	blx	r3
    if (*currentTrans)
 8003c5e:	f8d9 0000 	ldr.w	r0, [r9]
 8003c62:	b110      	cbz	r0, 8003c6a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
        (*currentTrans)->~Transition();
 8003c64:	6803      	ldr	r3, [r0, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4798      	blx	r3
    if (*currentScreen)
 8003c6a:	6838      	ldr	r0, [r7, #0]
 8003c6c:	b110      	cbz	r0, 8003c74 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x60>
        (*currentScreen)->tearDownScreen();
 8003c6e:	6803      	ldr	r3, [r0, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4798      	blx	r3
    if (*currentPresenter)
 8003c74:	f8d8 0000 	ldr.w	r0, [r8]
 8003c78:	b110      	cbz	r0, 8003c80 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
        (*currentPresenter)->deactivate();
 8003c7a:	6803      	ldr	r3, [r0, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4798      	blx	r3
    if (*currentScreen)
 8003c80:	6838      	ldr	r0, [r7, #0]
 8003c82:	b110      	cbz	r0, 8003c8a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
        (*currentScreen)->~Screen();
 8003c84:	6803      	ldr	r3, [r0, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4798      	blx	r3
    if (*currentPresenter)
 8003c8a:	f8d8 0000 	ldr.w	r0, [r8]
 8003c8e:	b110      	cbz	r0, 8003c96 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
        (*currentPresenter)->~Presenter();
 8003c90:	6803      	ldr	r3, [r0, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003c96:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003c98:	6803      	ldr	r3, [r0, #0]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4798      	blx	r3
 8003ca0:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8003ca2:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8003ca4:	6003      	str	r3, [r0, #0]
 8003ca6:	f04f 0b00 	mov.w	fp, #0
 8003caa:	f8c0 b004 	str.w	fp, [r0, #4]
 8003cae:	f880 b008 	strb.w	fp, [r0, #8]
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8003cb4:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003cb6:	68a8      	ldr	r0, [r5, #8]
 8003cb8:	6803      	ldr	r3, [r0, #0]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	4798      	blx	r3
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	f002 fa83 	bl	80061cc <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003cc6:	6868      	ldr	r0, [r5, #4]
 8003cc8:	6803      	ldr	r3, [r0, #0]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	4659      	mov	r1, fp
 8003cce:	4798      	blx	r3
 8003cd0:	4605      	mov	r5, r0
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	f001 fe80 	bl	80059d8 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8003cd8:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003cdc:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8003ce0:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8003ce2:	2d00      	cmp	r5, #0
 8003ce4:	d02e      	beq.n	8003d44 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8003ce6:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003ce8:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003cec:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003cf0:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8003cf2:	6833      	ldr	r3, [r6, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	4798      	blx	r3
    newPresenter->activate();
 8003cfa:	682b      	ldr	r3, [r5, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4628      	mov	r0, r5
 8003d00:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003d02:	4621      	mov	r1, r4
 8003d04:	4630      	mov	r0, r6
 8003d06:	f013 fa37 	bl	8017178 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4798      	blx	r3
    newTransition->invalidate();
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	4620      	mov	r0, r4
 8003d18:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8003d22:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d24:	21a3      	movs	r1, #163	; 0xa3
 8003d26:	480c      	ldr	r0, [pc, #48]	; (8003d58 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d28:	f01c fc10 	bl	802054c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d30:	21a4      	movs	r1, #164	; 0xa4
 8003d32:	4809      	ldr	r0, [pc, #36]	; (8003d58 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d34:	f01c fc0a 	bl	802054c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8003d3a:	4a06      	ldr	r2, [pc, #24]	; (8003d54 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d3c:	21a5      	movs	r1, #165	; 0xa5
 8003d3e:	4806      	ldr	r0, [pc, #24]	; (8003d58 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d40:	f01c fc04 	bl	802054c <__assert_func>
    model->bind(newPresenter);
 8003d44:	462b      	mov	r3, r5
 8003d46:	e7cf      	b.n	8003ce8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd4>
 8003d48:	080229e8 	.word	0x080229e8
 8003d4c:	08022a0c 	.word	0x08022a0c
 8003d50:	080226b4 	.word	0x080226b4
 8003d54:	08022744 	.word	0x08022744
 8003d58:	08022850 	.word	0x08022850
 8003d5c:	08022898 	.word	0x08022898
 8003d60:	0802293c 	.word	0x0802293c

08003d64 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:
{
 8003d64:	b500      	push	{lr}
 8003d66:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003d68:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8003d70:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003d74:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8003d78:	4803      	ldr	r0, [pc, #12]	; (8003d88 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 8003d7a:	f7ff ff4b 	bl	8003c14 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003d7e:	b003      	add	sp, #12
 8003d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d84:	2400c894 	.word	0x2400c894
 8003d88:	2400c890 	.word	0x2400c890

08003d8c <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003d8c:	b508      	push	{r3, lr}
 8003d8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7ff fc7e 	bl	8003694 <_Z41__static_initialization_and_destruction_0ii>
 8003d98:	bd08      	pop	{r3, pc}

08003d9a <_GLOBAL__sub_D__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003d9a:	b508      	push	{r3, lr}
 8003d9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003da0:	2000      	movs	r0, #0
 8003da2:	f7ff fc77 	bl	8003694 <_Z41__static_initialization_and_destruction_0ii>
 8003da6:	bd08      	pop	{r3, pc}

08003da8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003da8:	6a00      	ldr	r0, [r0, #32]
 8003daa:	4770      	bx	lr

08003dac <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003dac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003dae:	4770      	bx	lr

08003db0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003db0:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 8003db2:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003db4:	4a03      	ldr	r2, [pc, #12]	; (8003dc4 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 8003db6:	6002      	str	r2, [r0, #0]
    {
 8003db8:	4a03      	ldr	r2, [pc, #12]	; (8003dc8 <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8003dba:	6002      	str	r2, [r0, #0]
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	08022a30 	.word	0x08022a30
 8003dc4:	08023c34 	.word	0x08023c34
 8003dc8:	08022c70 	.word	0x08022c70

08003dcc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003dcc:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003dce:	888b      	ldrh	r3, [r1, #4]
 8003dd0:	0adb      	lsrs	r3, r3, #11
 8003dd2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003dd6:	680b      	ldr	r3, [r1, #0]
}
 8003dd8:	4418      	add	r0, r3
 8003dda:	4770      	bx	lr

08003ddc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003ddc:	4694      	mov	ip, r2
 8003dde:	b1da      	cbz	r2, 8003e18 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8003de0:	7b13      	ldrb	r3, [r2, #12]
 8003de2:	b1db      	cbz	r3, 8003e1c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003de4:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003de6:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8003dea:	0200      	lsls	r0, r0, #8
 8003dec:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003df0:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8003df4:	ea40 000c 	orr.w	r0, r0, ip
 8003df8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b17b      	cbz	r3, 8003e20 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003e00:	8810      	ldrh	r0, [r2, #0]
 8003e02:	4288      	cmp	r0, r1
 8003e04:	d005      	beq.n	8003e12 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 8003e06:	4288      	cmp	r0, r1
 8003e08:	d80c      	bhi.n	8003e24 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3204      	adds	r2, #4
 8003e10:	e7f5      	b.n	8003dfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 8003e12:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8003e16:	4770      	bx	lr
        return 0;
 8003e18:	2000      	movs	r0, #0
 8003e1a:	4770      	bx	lr
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 8003e20:	2000      	movs	r0, #0
 8003e22:	4770      	bx	lr
 8003e24:	2000      	movs	r0, #0
}
 8003e26:	4770      	bx	lr

08003e28 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 8003e2e:	6003      	str	r3, [r0, #0]
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 8003e32:	6003      	str	r3, [r0, #0]
    {
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 8003e36:	6003      	str	r3, [r0, #0]
 8003e38:	2128      	movs	r1, #40	; 0x28
 8003e3a:	f01c fb58 	bl	80204ee <_ZdlPvj>
 8003e3e:	4620      	mov	r0, r4
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	bf00      	nop
 8003e44:	08022a30 	.word	0x08022a30
 8003e48:	08023c34 	.word	0x08023c34
 8003e4c:	08022c70 	.word	0x08022c70

08003e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003e50:	b530      	push	{r4, r5, lr}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003e56:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003e5a:	9506      	str	r5, [sp, #24]
 8003e5c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003e60:	9505      	str	r5, [sp, #20]
 8003e62:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003e66:	9504      	str	r5, [sp, #16]
 8003e68:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003e6c:	9503      	str	r5, [sp, #12]
 8003e6e:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003e72:	9502      	str	r5, [sp, #8]
 8003e74:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003e78:	9501      	str	r5, [sp, #4]
 8003e7a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003e7e:	9500      	str	r5, [sp, #0]
 8003e80:	f012 fdee 	bl	8016a60 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e8a:	61a3      	str	r3, [r4, #24]
 8003e8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e8e:	61e3      	str	r3, [r4, #28]
 8003e90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e92:	6223      	str	r3, [r4, #32]
 8003e94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e96:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003e98:	4620      	mov	r0, r4
 8003e9a:	b009      	add	sp, #36	; 0x24
 8003e9c:	bd30      	pop	{r4, r5, pc}
 8003e9e:	bf00      	nop
 8003ea0:	08022a30 	.word	0x08022a30

08003ea4 <__tcf_0>:
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <__tcf_0+0x10>)
 8003ea6:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <__tcf_0+0x14>)
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <__tcf_0+0x18>)
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <__tcf_0+0x1c>)
 8003eb0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_SairaSemiCondensed_Medium_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_18_4bpp();

touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_18_4bpp()
{
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003eb2:	4770      	bx	lr
 8003eb4:	240026f0 	.word	0x240026f0
 8003eb8:	08022a30 	.word	0x08022a30
 8003ebc:	08023c34 	.word	0x08023c34
 8003ec0:	08022c70 	.word	0x08022c70

08003ec4 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv>:
 8003ec4:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	f3bf 8f5b 	dmb	ish
 8003ecc:	f013 0f01 	tst.w	r3, #1
 8003ed0:	d001      	beq.n	8003ed6 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x12>
    return SairaSemiCondensed_Medium_18_4bpp;
}
 8003ed2:	4816      	ldr	r0, [pc, #88]	; (8003f2c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003ed4:	4770      	bx	lr
{
 8003ed6:	b500      	push	{lr}
 8003ed8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003eda:	4813      	ldr	r0, [pc, #76]	; (8003f28 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003edc:	f01c fb09 	bl	80204f2 <__cxa_guard_acquire>
 8003ee0:	b918      	cbnz	r0, 8003eea <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x26>
}
 8003ee2:	4812      	ldr	r0, [pc, #72]	; (8003f2c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003ee4:	b00d      	add	sp, #52	; 0x34
 8003ee6:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003eea:	2300      	movs	r3, #0
 8003eec:	930a      	str	r3, [sp, #40]	; 0x28
 8003eee:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef0:	9308      	str	r3, [sp, #32]
 8003ef2:	233f      	movs	r3, #63	; 0x3f
 8003ef4:	9307      	str	r3, [sp, #28]
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x6c>)
 8003ef8:	9306      	str	r3, [sp, #24]
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x70>)
 8003efc:	9305      	str	r3, [sp, #20]
 8003efe:	2301      	movs	r3, #1
 8003f00:	9304      	str	r3, [sp, #16]
 8003f02:	9303      	str	r3, [sp, #12]
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	2304      	movs	r3, #4
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	2312      	movs	r3, #18
 8003f0e:	226e      	movs	r2, #110	; 0x6e
 8003f10:	4909      	ldr	r1, [pc, #36]	; (8003f38 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x74>)
 8003f12:	4806      	ldr	r0, [pc, #24]	; (8003f2c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003f14:	f7ff ff9c 	bl	8003e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f18:	4808      	ldr	r0, [pc, #32]	; (8003f3c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x78>)
 8003f1a:	f01c fb35 	bl	8020588 <atexit>
 8003f1e:	4802      	ldr	r0, [pc, #8]	; (8003f28 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003f20:	f01c faf3 	bl	802050a <__cxa_guard_release>
 8003f24:	e7dd      	b.n	8003ee2 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x1e>
 8003f26:	bf00      	nop
 8003f28:	240026ec 	.word	0x240026ec
 8003f2c:	240026f0 	.word	0x240026f0
 8003f30:	08023f8c 	.word	0x08023f8c
 8003f34:	080246bc 	.word	0x080246bc
 8003f38:	9000a720 	.word	0x9000a720
 8003f3c:	08003ea5 	.word	0x08003ea5

08003f40 <__tcf_0>:
 8003f40:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <__tcf_0+0x10>)
 8003f42:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <__tcf_0+0x14>)
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <__tcf_0+0x18>)
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <__tcf_0+0x1c>)
 8003f4c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_Saira_Medium_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Saira_Medium_22_4bpp();

touchgfx::GeneratedFont& getFont_Saira_Medium_22_4bpp()
{
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003f4e:	4770      	bx	lr
 8003f50:	2400271c 	.word	0x2400271c
 8003f54:	08022a30 	.word	0x08022a30
 8003f58:	08023c34 	.word	0x08023c34
 8003f5c:	08022c70 	.word	0x08022c70

08003f60 <_Z28getFont_Saira_Medium_22_4bppv>:
 8003f60:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	f3bf 8f5b 	dmb	ish
 8003f68:	f013 0f01 	tst.w	r3, #1
 8003f6c:	d001      	beq.n	8003f72 <_Z28getFont_Saira_Medium_22_4bppv+0x12>
    return Saira_Medium_22_4bpp;
}
 8003f6e:	4816      	ldr	r0, [pc, #88]	; (8003fc8 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003f70:	4770      	bx	lr
{
 8003f72:	b500      	push	{lr}
 8003f74:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003f76:	4813      	ldr	r0, [pc, #76]	; (8003fc4 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003f78:	f01c fabb 	bl	80204f2 <__cxa_guard_acquire>
 8003f7c:	b918      	cbnz	r0, 8003f86 <_Z28getFont_Saira_Medium_22_4bppv+0x26>
}
 8003f7e:	4812      	ldr	r0, [pc, #72]	; (8003fc8 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003f80:	b00d      	add	sp, #52	; 0x34
 8003f82:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003f86:	2300      	movs	r3, #0
 8003f88:	930a      	str	r3, [sp, #40]	; 0x28
 8003f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8c:	9308      	str	r3, [sp, #32]
 8003f8e:	233f      	movs	r3, #63	; 0x3f
 8003f90:	9307      	str	r3, [sp, #28]
 8003f92:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <_Z28getFont_Saira_Medium_22_4bppv+0x6c>)
 8003f94:	9306      	str	r3, [sp, #24]
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <_Z28getFont_Saira_Medium_22_4bppv+0x70>)
 8003f98:	9305      	str	r3, [sp, #20]
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	9303      	str	r3, [sp, #12]
 8003fa0:	9302      	str	r3, [sp, #8]
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	2305      	movs	r3, #5
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2316      	movs	r3, #22
 8003fac:	226e      	movs	r2, #110	; 0x6e
 8003fae:	4909      	ldr	r1, [pc, #36]	; (8003fd4 <_Z28getFont_Saira_Medium_22_4bppv+0x74>)
 8003fb0:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003fb2:	f7ff ff4d 	bl	8003e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003fb6:	4808      	ldr	r0, [pc, #32]	; (8003fd8 <_Z28getFont_Saira_Medium_22_4bppv+0x78>)
 8003fb8:	f01c fae6 	bl	8020588 <atexit>
 8003fbc:	4801      	ldr	r0, [pc, #4]	; (8003fc4 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003fbe:	f01c faa4 	bl	802050a <__cxa_guard_release>
 8003fc2:	e7dc      	b.n	8003f7e <_Z28getFont_Saira_Medium_22_4bppv+0x1e>
 8003fc4:	24002718 	.word	0x24002718
 8003fc8:	2400271c 	.word	0x2400271c
 8003fcc:	080240f0 	.word	0x080240f0
 8003fd0:	080246d0 	.word	0x080246d0
 8003fd4:	9000ad24 	.word	0x9000ad24
 8003fd8:	08003f41 	.word	0x08003f41

08003fdc <__tcf_0>:
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <__tcf_0+0x10>)
 8003fde:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <__tcf_0+0x14>)
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <__tcf_0+0x18>)
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <__tcf_0+0x1c>)
 8003fe8:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003fea:	4770      	bx	lr
 8003fec:	24002748 	.word	0x24002748
 8003ff0:	08022a30 	.word	0x08022a30
 8003ff4:	08023c34 	.word	0x08023c34
 8003ff8:	08022c70 	.word	0x08022c70

08003ffc <_Z23getFont_verdana_10_4bppv>:
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <_Z23getFont_verdana_10_4bppv+0x60>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f3bf 8f5b 	dmb	ish
 8004004:	f013 0f01 	tst.w	r3, #1
 8004008:	d001      	beq.n	800400e <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 800400a:	4815      	ldr	r0, [pc, #84]	; (8004060 <_Z23getFont_verdana_10_4bppv+0x64>)
 800400c:	4770      	bx	lr
{
 800400e:	b500      	push	{lr}
 8004010:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004012:	4812      	ldr	r0, [pc, #72]	; (800405c <_Z23getFont_verdana_10_4bppv+0x60>)
 8004014:	f01c fa6d 	bl	80204f2 <__cxa_guard_acquire>
 8004018:	b918      	cbnz	r0, 8004022 <_Z23getFont_verdana_10_4bppv+0x26>
}
 800401a:	4811      	ldr	r0, [pc, #68]	; (8004060 <_Z23getFont_verdana_10_4bppv+0x64>)
 800401c:	b00d      	add	sp, #52	; 0x34
 800401e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004022:	2300      	movs	r3, #0
 8004024:	930a      	str	r3, [sp, #40]	; 0x28
 8004026:	9309      	str	r3, [sp, #36]	; 0x24
 8004028:	9308      	str	r3, [sp, #32]
 800402a:	223f      	movs	r2, #63	; 0x3f
 800402c:	9207      	str	r2, [sp, #28]
 800402e:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004030:	9206      	str	r2, [sp, #24]
 8004032:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004034:	9205      	str	r2, [sp, #20]
 8004036:	9304      	str	r3, [sp, #16]
 8004038:	9303      	str	r3, [sp, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	9202      	str	r2, [sp, #8]
 800403e:	2104      	movs	r1, #4
 8004040:	9101      	str	r1, [sp, #4]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	230a      	movs	r3, #10
 8004046:	4909      	ldr	r1, [pc, #36]	; (800406c <_Z23getFont_verdana_10_4bppv+0x70>)
 8004048:	4805      	ldr	r0, [pc, #20]	; (8004060 <_Z23getFont_verdana_10_4bppv+0x64>)
 800404a:	f7ff ff01 	bl	8003e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800404e:	4808      	ldr	r0, [pc, #32]	; (8004070 <_Z23getFont_verdana_10_4bppv+0x74>)
 8004050:	f01c fa9a 	bl	8020588 <atexit>
 8004054:	4801      	ldr	r0, [pc, #4]	; (800405c <_Z23getFont_verdana_10_4bppv+0x60>)
 8004056:	f01c fa58 	bl	802050a <__cxa_guard_release>
 800405a:	e7de      	b.n	800401a <_Z23getFont_verdana_10_4bppv+0x1e>
 800405c:	24002744 	.word	0x24002744
 8004060:	24002748 	.word	0x24002748
 8004064:	08024240 	.word	0x08024240
 8004068:	080246e4 	.word	0x080246e4
 800406c:	9000b328 	.word	0x9000b328
 8004070:	08003fdd 	.word	0x08003fdd

08004074 <__tcf_0>:
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <__tcf_0+0x10>)
 8004076:	4a04      	ldr	r2, [pc, #16]	; (8004088 <__tcf_0+0x14>)
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	4a04      	ldr	r2, [pc, #16]	; (800408c <__tcf_0+0x18>)
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	4a04      	ldr	r2, [pc, #16]	; (8004090 <__tcf_0+0x1c>)
 8004080:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 8004082:	4770      	bx	lr
 8004084:	24002774 	.word	0x24002774
 8004088:	08022a30 	.word	0x08022a30
 800408c:	08023c34 	.word	0x08023c34
 8004090:	08022c70 	.word	0x08022c70

08004094 <_Z23getFont_verdana_18_4bppv>:
 8004094:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <_Z23getFont_verdana_18_4bppv+0x64>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	f3bf 8f5b 	dmb	ish
 800409c:	f013 0f01 	tst.w	r3, #1
 80040a0:	d001      	beq.n	80040a6 <_Z23getFont_verdana_18_4bppv+0x12>
    return verdana_18_4bpp;
}
 80040a2:	4816      	ldr	r0, [pc, #88]	; (80040fc <_Z23getFont_verdana_18_4bppv+0x68>)
 80040a4:	4770      	bx	lr
{
 80040a6:	b500      	push	{lr}
 80040a8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 80040aa:	4813      	ldr	r0, [pc, #76]	; (80040f8 <_Z23getFont_verdana_18_4bppv+0x64>)
 80040ac:	f01c fa21 	bl	80204f2 <__cxa_guard_acquire>
 80040b0:	b918      	cbnz	r0, 80040ba <_Z23getFont_verdana_18_4bppv+0x26>
}
 80040b2:	4812      	ldr	r0, [pc, #72]	; (80040fc <_Z23getFont_verdana_18_4bppv+0x68>)
 80040b4:	b00d      	add	sp, #52	; 0x34
 80040b6:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 80040ba:	2300      	movs	r3, #0
 80040bc:	930a      	str	r3, [sp, #40]	; 0x28
 80040be:	9309      	str	r3, [sp, #36]	; 0x24
 80040c0:	9308      	str	r3, [sp, #32]
 80040c2:	233f      	movs	r3, #63	; 0x3f
 80040c4:	9307      	str	r3, [sp, #28]
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <_Z23getFont_verdana_18_4bppv+0x6c>)
 80040c8:	9306      	str	r3, [sp, #24]
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <_Z23getFont_verdana_18_4bppv+0x70>)
 80040cc:	9305      	str	r3, [sp, #20]
 80040ce:	2301      	movs	r3, #1
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	9303      	str	r3, [sp, #12]
 80040d4:	9302      	str	r3, [sp, #8]
 80040d6:	2304      	movs	r3, #4
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2312      	movs	r3, #18
 80040de:	226e      	movs	r2, #110	; 0x6e
 80040e0:	4909      	ldr	r1, [pc, #36]	; (8004108 <_Z23getFont_verdana_18_4bppv+0x74>)
 80040e2:	4806      	ldr	r0, [pc, #24]	; (80040fc <_Z23getFont_verdana_18_4bppv+0x68>)
 80040e4:	f7ff feb4 	bl	8003e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80040e8:	4808      	ldr	r0, [pc, #32]	; (800410c <_Z23getFont_verdana_18_4bppv+0x78>)
 80040ea:	f01c fa4d 	bl	8020588 <atexit>
 80040ee:	4802      	ldr	r0, [pc, #8]	; (80040f8 <_Z23getFont_verdana_18_4bppv+0x64>)
 80040f0:	f01c fa0b 	bl	802050a <__cxa_guard_release>
 80040f4:	e7dd      	b.n	80040b2 <_Z23getFont_verdana_18_4bppv+0x1e>
 80040f6:	bf00      	nop
 80040f8:	24002770 	.word	0x24002770
 80040fc:	24002774 	.word	0x24002774
 8004100:	08024244 	.word	0x08024244
 8004104:	080246e8 	.word	0x080246e8
 8004108:	9000b338 	.word	0x9000b338
 800410c:	08004075 	.word	0x08004075

08004110 <__tcf_0>:
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <__tcf_0+0x10>)
 8004112:	4a04      	ldr	r2, [pc, #16]	; (8004124 <__tcf_0+0x14>)
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	4a04      	ldr	r2, [pc, #16]	; (8004128 <__tcf_0+0x18>)
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	4a04      	ldr	r2, [pc, #16]	; (800412c <__tcf_0+0x1c>)
 800411c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800411e:	4770      	bx	lr
 8004120:	240027a0 	.word	0x240027a0
 8004124:	08022a30 	.word	0x08022a30
 8004128:	08023c34 	.word	0x08023c34
 800412c:	08022c70 	.word	0x08022c70

08004130 <_Z23getFont_verdana_20_4bppv>:
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f3bf 8f5b 	dmb	ish
 8004138:	f013 0f01 	tst.w	r3, #1
 800413c:	d001      	beq.n	8004142 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 800413e:	4815      	ldr	r0, [pc, #84]	; (8004194 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004140:	4770      	bx	lr
{
 8004142:	b500      	push	{lr}
 8004144:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004146:	4812      	ldr	r0, [pc, #72]	; (8004190 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004148:	f01c f9d3 	bl	80204f2 <__cxa_guard_acquire>
 800414c:	b918      	cbnz	r0, 8004156 <_Z23getFont_verdana_20_4bppv+0x26>
}
 800414e:	4811      	ldr	r0, [pc, #68]	; (8004194 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004150:	b00d      	add	sp, #52	; 0x34
 8004152:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004156:	2300      	movs	r3, #0
 8004158:	930a      	str	r3, [sp, #40]	; 0x28
 800415a:	9309      	str	r3, [sp, #36]	; 0x24
 800415c:	9308      	str	r3, [sp, #32]
 800415e:	223f      	movs	r2, #63	; 0x3f
 8004160:	9207      	str	r2, [sp, #28]
 8004162:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004164:	9206      	str	r2, [sp, #24]
 8004166:	4a0d      	ldr	r2, [pc, #52]	; (800419c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004168:	9205      	str	r2, [sp, #20]
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	9303      	str	r3, [sp, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	9202      	str	r2, [sp, #8]
 8004172:	2104      	movs	r1, #4
 8004174:	9101      	str	r1, [sp, #4]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2314      	movs	r3, #20
 800417a:	4909      	ldr	r1, [pc, #36]	; (80041a0 <_Z23getFont_verdana_20_4bppv+0x70>)
 800417c:	4805      	ldr	r0, [pc, #20]	; (8004194 <_Z23getFont_verdana_20_4bppv+0x64>)
 800417e:	f7ff fe67 	bl	8003e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004182:	4808      	ldr	r0, [pc, #32]	; (80041a4 <_Z23getFont_verdana_20_4bppv+0x74>)
 8004184:	f01c fa00 	bl	8020588 <atexit>
 8004188:	4801      	ldr	r0, [pc, #4]	; (8004190 <_Z23getFont_verdana_20_4bppv+0x60>)
 800418a:	f01c f9be 	bl	802050a <__cxa_guard_release>
 800418e:	e7de      	b.n	800414e <_Z23getFont_verdana_20_4bppv+0x1e>
 8004190:	2400279c 	.word	0x2400279c
 8004194:	240027a0 	.word	0x240027a0
 8004198:	080243c4 	.word	0x080243c4
 800419c:	080246fc 	.word	0x080246fc
 80041a0:	9000b93c 	.word	0x9000b93c
 80041a4:	08004111 	.word	0x08004111

080041a8 <__tcf_0>:
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <__tcf_0+0x10>)
 80041aa:	4a04      	ldr	r2, [pc, #16]	; (80041bc <__tcf_0+0x14>)
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <__tcf_0+0x18>)
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <__tcf_0+0x1c>)
 80041b4:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_34_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_34_4bpp();

touchgfx::GeneratedFont& getFont_verdana_34_4bpp()
{
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80041b6:	4770      	bx	lr
 80041b8:	240027cc 	.word	0x240027cc
 80041bc:	08022a30 	.word	0x08022a30
 80041c0:	08023c34 	.word	0x08023c34
 80041c4:	08022c70 	.word	0x08022c70

080041c8 <_Z23getFont_verdana_34_4bppv>:
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <_Z23getFont_verdana_34_4bppv+0x68>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f3bf 8f5b 	dmb	ish
 80041d0:	f013 0f01 	tst.w	r3, #1
 80041d4:	d001      	beq.n	80041da <_Z23getFont_verdana_34_4bppv+0x12>
    return verdana_34_4bpp;
}
 80041d6:	4817      	ldr	r0, [pc, #92]	; (8004234 <_Z23getFont_verdana_34_4bppv+0x6c>)
 80041d8:	4770      	bx	lr
{
 80041da:	b500      	push	{lr}
 80041dc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80041de:	4814      	ldr	r0, [pc, #80]	; (8004230 <_Z23getFont_verdana_34_4bppv+0x68>)
 80041e0:	f01c f987 	bl	80204f2 <__cxa_guard_acquire>
 80041e4:	b918      	cbnz	r0, 80041ee <_Z23getFont_verdana_34_4bppv+0x26>
}
 80041e6:	4813      	ldr	r0, [pc, #76]	; (8004234 <_Z23getFont_verdana_34_4bppv+0x6c>)
 80041e8:	b00d      	add	sp, #52	; 0x34
 80041ea:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80041ee:	2300      	movs	r3, #0
 80041f0:	930a      	str	r3, [sp, #40]	; 0x28
 80041f2:	9309      	str	r3, [sp, #36]	; 0x24
 80041f4:	9308      	str	r3, [sp, #32]
 80041f6:	233f      	movs	r3, #63	; 0x3f
 80041f8:	9307      	str	r3, [sp, #28]
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <_Z23getFont_verdana_34_4bppv+0x70>)
 80041fc:	9306      	str	r3, [sp, #24]
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <_Z23getFont_verdana_34_4bppv+0x74>)
 8004200:	9305      	str	r3, [sp, #20]
 8004202:	2302      	movs	r3, #2
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	2301      	movs	r3, #1
 8004208:	9303      	str	r3, [sp, #12]
 800420a:	9302      	str	r3, [sp, #8]
 800420c:	2304      	movs	r3, #4
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2307      	movs	r3, #7
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2322      	movs	r3, #34	; 0x22
 8004216:	226e      	movs	r2, #110	; 0x6e
 8004218:	4909      	ldr	r1, [pc, #36]	; (8004240 <_Z23getFont_verdana_34_4bppv+0x78>)
 800421a:	4806      	ldr	r0, [pc, #24]	; (8004234 <_Z23getFont_verdana_34_4bppv+0x6c>)
 800421c:	f7ff fe18 	bl	8003e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004220:	4808      	ldr	r0, [pc, #32]	; (8004244 <_Z23getFont_verdana_34_4bppv+0x7c>)
 8004222:	f01c f9b1 	bl	8020588 <atexit>
 8004226:	4802      	ldr	r0, [pc, #8]	; (8004230 <_Z23getFont_verdana_34_4bppv+0x68>)
 8004228:	f01c f96f 	bl	802050a <__cxa_guard_release>
 800422c:	e7db      	b.n	80041e6 <_Z23getFont_verdana_34_4bppv+0x1e>
 800422e:	bf00      	nop
 8004230:	240027c8 	.word	0x240027c8
 8004234:	240027cc 	.word	0x240027cc
 8004238:	080243c8 	.word	0x080243c8
 800423c:	08024700 	.word	0x08024700
 8004240:	9000b94c 	.word	0x9000b94c
 8004244:	080041a9 	.word	0x080041a9

08004248 <__tcf_0>:
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <__tcf_0+0x10>)
 800424a:	4a04      	ldr	r2, [pc, #16]	; (800425c <__tcf_0+0x14>)
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	4a04      	ldr	r2, [pc, #16]	; (8004260 <__tcf_0+0x18>)
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	4a04      	ldr	r2, [pc, #16]	; (8004264 <__tcf_0+0x1c>)
 8004254:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004256:	4770      	bx	lr
 8004258:	240027f8 	.word	0x240027f8
 800425c:	08022a30 	.word	0x08022a30
 8004260:	08023c34 	.word	0x08023c34
 8004264:	08022c70 	.word	0x08022c70

08004268 <_Z23getFont_verdana_40_4bppv>:
 8004268:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <_Z23getFont_verdana_40_4bppv+0x60>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	f3bf 8f5b 	dmb	ish
 8004270:	f013 0f01 	tst.w	r3, #1
 8004274:	d001      	beq.n	800427a <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 8004276:	4815      	ldr	r0, [pc, #84]	; (80042cc <_Z23getFont_verdana_40_4bppv+0x64>)
 8004278:	4770      	bx	lr
{
 800427a:	b500      	push	{lr}
 800427c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800427e:	4812      	ldr	r0, [pc, #72]	; (80042c8 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004280:	f01c f937 	bl	80204f2 <__cxa_guard_acquire>
 8004284:	b918      	cbnz	r0, 800428e <_Z23getFont_verdana_40_4bppv+0x26>
}
 8004286:	4811      	ldr	r0, [pc, #68]	; (80042cc <_Z23getFont_verdana_40_4bppv+0x64>)
 8004288:	b00d      	add	sp, #52	; 0x34
 800428a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800428e:	2300      	movs	r3, #0
 8004290:	930a      	str	r3, [sp, #40]	; 0x28
 8004292:	9309      	str	r3, [sp, #36]	; 0x24
 8004294:	9308      	str	r3, [sp, #32]
 8004296:	223f      	movs	r2, #63	; 0x3f
 8004298:	9207      	str	r2, [sp, #28]
 800429a:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800429c:	9206      	str	r2, [sp, #24]
 800429e:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80042a0:	9205      	str	r2, [sp, #20]
 80042a2:	9304      	str	r3, [sp, #16]
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	9202      	str	r2, [sp, #8]
 80042aa:	2104      	movs	r1, #4
 80042ac:	9101      	str	r1, [sp, #4]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2328      	movs	r3, #40	; 0x28
 80042b2:	4909      	ldr	r1, [pc, #36]	; (80042d8 <_Z23getFont_verdana_40_4bppv+0x70>)
 80042b4:	4805      	ldr	r0, [pc, #20]	; (80042cc <_Z23getFont_verdana_40_4bppv+0x64>)
 80042b6:	f7ff fdcb 	bl	8003e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042ba:	4808      	ldr	r0, [pc, #32]	; (80042dc <_Z23getFont_verdana_40_4bppv+0x74>)
 80042bc:	f01c f964 	bl	8020588 <atexit>
 80042c0:	4801      	ldr	r0, [pc, #4]	; (80042c8 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042c2:	f01c f922 	bl	802050a <__cxa_guard_release>
 80042c6:	e7de      	b.n	8004286 <_Z23getFont_verdana_40_4bppv+0x1e>
 80042c8:	240027f4 	.word	0x240027f4
 80042cc:	240027f8 	.word	0x240027f8
 80042d0:	080246b8 	.word	0x080246b8
 80042d4:	08024714 	.word	0x08024714
 80042d8:	9000bf50 	.word	0x9000bf50
 80042dc:	08004249 	.word	0x08004249

080042e0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 80042e0:	2000      	movs	r0, #0
 80042e2:	4770      	bx	lr

080042e4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80042e4:	2000      	movs	r0, #0
 80042e6:	4770      	bx	lr

080042e8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80042e8:	2000      	movs	r0, #0
 80042ea:	4770      	bx	lr

080042ec <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80042ec:	b40e      	push	{r1, r2, r3}
 80042ee:	b500      	push	{lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	ab03      	add	r3, sp, #12
 80042f4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80042f8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80042fa:	2100      	movs	r1, #0
 80042fc:	f012 f9e0 	bl	80166c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004300:	b002      	add	sp, #8
 8004302:	f85d eb04 	ldr.w	lr, [sp], #4
 8004306:	b003      	add	sp, #12
 8004308:	4770      	bx	lr

0800430a <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800430a:	b40c      	push	{r2, r3}
 800430c:	b500      	push	{lr}
 800430e:	b083      	sub	sp, #12
 8004310:	ab04      	add	r3, sp, #16
 8004312:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004316:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004318:	f012 f9d2 	bl	80166c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800431c:	b003      	add	sp, #12
 800431e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004322:	b002      	add	sp, #8
 8004324:	4770      	bx	lr
	...

08004328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8004328:	b510      	push	{r4, lr}
 800432a:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800432c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800432e:	b133      	cbz	r3, 800433e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004330:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8004332:	b143      	cbz	r3, 8004346 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8004334:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8004336:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800433a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800433c:	b94b      	cbnz	r3, 8004352 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800433e:	4620      	mov	r0, r4
 8004340:	f013 fb4c 	bl	80179dc <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8004344:	bd10      	pop	{r4, pc}
            assert(used > 0);
 8004346:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8004348:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800434a:	21c0      	movs	r1, #192	; 0xc0
 800434c:	481c      	ldr	r0, [pc, #112]	; (80043c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 800434e:	f01c f8fd 	bl	802054c <__assert_func>
        substituteGlyphs();
 8004352:	f013 fc41 	bl	8017bd8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004356:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8004358:	2801      	cmp	r0, #1
 800435a:	d91d      	bls.n	8004398 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 800435c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800435e:	1c4b      	adds	r3, r1, #1
 8004360:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004362:	2b09      	cmp	r3, #9
 8004364:	d81e      	bhi.n	80043a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 8004366:	461a      	mov	r2, r3
 8004368:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800436c:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004370:	f640 123f 	movw	r2, #2367	; 0x93f
 8004374:	4594      	cmp	ip, r2
 8004376:	d1e2      	bne.n	800433e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 8004378:	b1b8      	cbz	r0, 80043aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 800437a:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 800437e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004380:	2b09      	cmp	r3, #9
 8004382:	d900      	bls.n	8004386 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 8004384:	2300      	movs	r3, #0
 8004386:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800438a:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 800438c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004390:	f640 133f 	movw	r3, #2367	; 0x93f
 8004394:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 8004396:	e7d2      	b.n	800433e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 800439a:	4a0b      	ldr	r2, [pc, #44]	; (80043c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 800439c:	21c5      	movs	r1, #197	; 0xc5
 800439e:	4808      	ldr	r0, [pc, #32]	; (80043c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80043a0:	f01c f8d4 	bl	802054c <__assert_func>
            return buffer[index < size ? index : index - size];
 80043a4:	f1a3 020a 	sub.w	r2, r3, #10
 80043a8:	e7de      	b.n	8004368 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80043aa:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80043ac:	4a03      	ldr	r2, [pc, #12]	; (80043bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80043ae:	21c0      	movs	r1, #192	; 0xc0
 80043b0:	4803      	ldr	r0, [pc, #12]	; (80043c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80043b2:	f01c f8cb 	bl	802054c <__assert_func>
 80043b6:	bf00      	nop
 80043b8:	08022a80 	.word	0x08022a80
 80043bc:	08022a8c 	.word	0x08022a8c
 80043c0:	08022b38 	.word	0x08022b38
 80043c4:	08022b84 	.word	0x08022b84
 80043c8:	08022b94 	.word	0x08022b94

080043cc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80043cc:	b508      	push	{r3, lr}
    fillInputBuffer();
 80043ce:	f013 face 	bl	801796e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80043d2:	bd08      	pop	{r3, pc}

080043d4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80043d4:	b500      	push	{lr}
 80043d6:	b087      	sub	sp, #28
 80043d8:	f10d 0c08 	add.w	ip, sp, #8
 80043dc:	e88c 0006 	stmia.w	ip, {r1, r2}
 80043e0:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80043e2:	ab0a      	add	r3, sp, #40	; 0x28
 80043e4:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	9b08      	ldr	r3, [sp, #32]
 80043ee:	4661      	mov	r1, ip
 80043f0:	f010 fe8e 	bl	8015110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80043f4:	b007      	add	sp, #28
 80043f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080043fc <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80043fc:	bb40      	cbnz	r0, 8004450 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 80043fe:	b538      	push	{r3, r4, r5, lr}
 8004400:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004404:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004408:	b1c3      	cbz	r3, 800443c <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	4419      	add	r1, r3
 800440e:	4812      	ldr	r0, [pc, #72]	; (8004458 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004410:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	4419      	add	r1, r3
 8004416:	4811      	ldr	r0, [pc, #68]	; (800445c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004418:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800441a:	689c      	ldr	r4, [r3, #8]
 800441c:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 800441e:	b164      	cbz	r4, 800443a <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004422:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004424:	f000 f85c 	bl	80044e0 <_ZN17TypedTextDatabase8getFontsEv>
 8004428:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800442a:	f000 f857 	bl	80044dc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004430:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004434:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004438:	8018      	strh	r0, [r3, #0]
    }
}
 800443a:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800443e:	490c      	ldr	r1, [pc, #48]	; (8004470 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004440:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004444:	490b      	ldr	r1, [pc, #44]	; (8004474 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8004446:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 800444a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800444e:	e7e6      	b.n	800441e <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	24002820 	.word	0x24002820
 8004458:	24002824 	.word	0x24002824
 800445c:	24002828 	.word	0x24002828
 8004460:	2400282c 	.word	0x2400282c
 8004464:	2400c8a4 	.word	0x2400c8a4
 8004468:	2400c8ac 	.word	0x2400c8ac
 800446c:	2400c8a8 	.word	0x2400c8a8
 8004470:	9000bf7c 	.word	0x9000bf7c
 8004474:	9000bf60 	.word	0x9000bf60
 8004478:	9000bfe4 	.word	0x9000bfe4

0800447c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
 8004488:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	24002824 	.word	0x24002824
 8004494:	24002828 	.word	0x24002828

08004498 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_SairaSemiCondensed_Medium_18_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004498:	2801      	cmp	r0, #1
 800449a:	d000      	beq.n	800449e <_Z41__static_initialization_and_destruction_0ii+0x6>
 800449c:	4770      	bx	lr
 800449e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044a2:	4299      	cmp	r1, r3
 80044a4:	d1fa      	bne.n	800449c <_Z41__static_initialization_and_destruction_0ii+0x4>
 80044a6:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80044a8:	f7ff fe42 	bl	8004130 <_Z23getFont_verdana_20_4bppv>
};
 80044ac:	4c0a      	ldr	r4, [pc, #40]	; (80044d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80044ae:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80044b0:	f7ff feda 	bl	8004268 <_Z23getFont_verdana_40_4bppv>
};
 80044b4:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80044b6:	f7ff fda1 	bl	8003ffc <_Z23getFont_verdana_10_4bppv>
};
 80044ba:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_34_4bpp()),
 80044bc:	f7ff fe84 	bl	80041c8 <_Z23getFont_verdana_34_4bppv>
};
 80044c0:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_18_4bpp()),
 80044c2:	f7ff fde7 	bl	8004094 <_Z23getFont_verdana_18_4bppv>
};
 80044c6:	6120      	str	r0, [r4, #16]
    &(getFont_Saira_Medium_22_4bpp()),
 80044c8:	f7ff fd4a 	bl	8003f60 <_Z28getFont_Saira_Medium_22_4bppv>
};
 80044cc:	6160      	str	r0, [r4, #20]
    &(getFont_SairaSemiCondensed_Medium_18_4bpp())
 80044ce:	f7ff fcf9 	bl	8003ec4 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv>
};
 80044d2:	61a0      	str	r0, [r4, #24]
} // namespace TypedTextDatabase
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	bf00      	nop
 80044d8:	24002830 	.word	0x24002830

080044dc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 80044dc:	2007      	movs	r0, #7
 80044de:	4770      	bx	lr

080044e0 <_ZN17TypedTextDatabase8getFontsEv>:
}
 80044e0:	4800      	ldr	r0, [pc, #0]	; (80044e4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80044e2:	4770      	bx	lr
 80044e4:	24002830 	.word	0x24002830

080044e8 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 80044e8:	b508      	push	{r3, lr}
 80044ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044ee:	2001      	movs	r0, #1
 80044f0:	f7ff ffd2 	bl	8004498 <_Z41__static_initialization_and_destruction_0ii>
 80044f4:	bd08      	pop	{r3, pc}

080044f6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80044f6:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80044f8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80044fc:	b113      	cbz	r3, 8004504 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 80044fe:	6803      	ldr	r3, [r0, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	4798      	blx	r3
        }
    }
 8004504:	bd08      	pop	{r3, pc}

08004506 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8004506:	2000      	movs	r0, #0
 8004508:	4770      	bx	lr

0800450a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800450a:	8081      	strh	r1, [r0, #4]
    }
 800450c:	4770      	bx	lr

0800450e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800450e:	80c1      	strh	r1, [r0, #6]
    }
 8004510:	4770      	bx	lr

08004512 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8004512:	8101      	strh	r1, [r0, #8]
    }
 8004514:	4770      	bx	lr

08004516 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8004516:	8141      	strh	r1, [r0, #10]
    }
 8004518:	4770      	bx	lr

0800451a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800451a:	4770      	bx	lr

0800451c <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800451c:	4770      	bx	lr

0800451e <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800451e:	4770      	bx	lr

08004520 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8004520:	4770      	bx	lr

08004522 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8004522:	4770      	bx	lr

08004524 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004524:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8004526:	6804      	ldr	r4, [r0, #0]
 8004528:	6d64      	ldr	r4, [r4, #84]	; 0x54
 800452a:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800452e:	eba1 010c 	sub.w	r1, r1, ip
 8004532:	88c3      	ldrh	r3, [r0, #6]
 8004534:	1ad2      	subs	r2, r2, r3
 8004536:	b212      	sxth	r2, r2
 8004538:	b209      	sxth	r1, r1
 800453a:	47a0      	blx	r4
    }
 800453c:	bd10      	pop	{r4, pc}

0800453e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800453e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004542:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004544:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004546:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8004548:	6813      	ldr	r3, [r2, #0]
 800454a:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800454c:	6010      	str	r0, [r2, #0]
    }
 800454e:	4770      	bx	lr

08004550 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004550:	4770      	bx	lr

08004552 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004552:	4770      	bx	lr

08004554 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004554:	4770      	bx	lr

08004556 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004556:	4770      	bx	lr

08004558 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004558:	4770      	bx	lr

0800455a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 800455a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800455e:	b11a      	cbz	r2, 8004568 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8004560:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8004564:	b102      	cbz	r2, 8004568 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8004566:	6018      	str	r0, [r3, #0]
        }
    }
 8004568:	4770      	bx	lr
	...

0800456c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 800456c:	4a04      	ldr	r2, [pc, #16]	; (8004580 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 800456e:	6002      	str	r2, [r0, #0]
    {
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 8004572:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8004574:	4a04      	ldr	r2, [pc, #16]	; (8004588 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 8004576:	6042      	str	r2, [r0, #4]
    {
 8004578:	4a04      	ldr	r2, [pc, #16]	; (800458c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 800457a:	6042      	str	r2, [r0, #4]
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	08022d2c 	.word	0x08022d2c
 8004584:	08023ca0 	.word	0x08023ca0
 8004588:	08023694 	.word	0x08023694
 800458c:	08023bcc 	.word	0x08023bcc

08004590 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8004590:	b410      	push	{r4}
 8004592:	4a0b      	ldr	r2, [pc, #44]	; (80045c0 <_ZN18mainScreenViewBaseD1Ev+0x30>)
 8004594:	6002      	str	r2, [r0, #0]
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <_ZN18mainScreenViewBaseD1Ev+0x34>)
 8004598:	66c2      	str	r2, [r0, #108]	; 0x6c
class Widget : public Drawable
 800459a:	490b      	ldr	r1, [pc, #44]	; (80045c8 <_ZN18mainScreenViewBaseD1Ev+0x38>)
 800459c:	66c1      	str	r1, [r0, #108]	; 0x6c
 800459e:	4a0b      	ldr	r2, [pc, #44]	; (80045cc <_ZN18mainScreenViewBaseD1Ev+0x3c>)
 80045a0:	66c2      	str	r2, [r0, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 80045a2:	4c0b      	ldr	r4, [pc, #44]	; (80045d0 <_ZN18mainScreenViewBaseD1Ev+0x40>)
 80045a4:	6404      	str	r4, [r0, #64]	; 0x40
 80045a6:	6401      	str	r1, [r0, #64]	; 0x40
 80045a8:	6402      	str	r2, [r0, #64]	; 0x40
 80045aa:	490a      	ldr	r1, [pc, #40]	; (80045d4 <_ZN18mainScreenViewBaseD1Ev+0x44>)
 80045ac:	6001      	str	r1, [r0, #0]
 80045ae:	490a      	ldr	r1, [pc, #40]	; (80045d8 <_ZN18mainScreenViewBaseD1Ev+0x48>)
 80045b0:	6001      	str	r1, [r0, #0]
 80045b2:	490a      	ldr	r1, [pc, #40]	; (80045dc <_ZN18mainScreenViewBaseD1Ev+0x4c>)
 80045b4:	6041      	str	r1, [r0, #4]
 80045b6:	6042      	str	r2, [r0, #4]
 80045b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	08022d60 	.word	0x08022d60
 80045c4:	08023a2c 	.word	0x08023a2c
 80045c8:	08022cc4 	.word	0x08022cc4
 80045cc:	08023bcc 	.word	0x08023bcc
 80045d0:	08023934 	.word	0x08023934
 80045d4:	08022d2c 	.word	0x08022d2c
 80045d8:	08023ca0 	.word	0x08023ca0
 80045dc:	08023694 	.word	0x08023694

080045e0 <_ZN18mainScreenViewBase11setupScreenEv>:
}

void mainScreenViewBase::setupScreen()
{

}
 80045e0:	4770      	bx	lr
	...

080045e4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4604      	mov	r4, r0
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 80045ea:	6003      	str	r3, [r0, #0]
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 80045ee:	6003      	str	r3, [r0, #0]
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 80045f2:	6043      	str	r3, [r0, #4]
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 80045f6:	6043      	str	r3, [r0, #4]
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	f01b ff78 	bl	80204ee <_ZdlPvj>
 80045fe:	4620      	mov	r0, r4
 8004600:	bd10      	pop	{r4, pc}
 8004602:	bf00      	nop
 8004604:	08022d2c 	.word	0x08022d2c
 8004608:	08023ca0 	.word	0x08023ca0
 800460c:	08023694 	.word	0x08023694
 8004610:	08023bcc 	.word	0x08023bcc

08004614 <_ZN18mainScreenViewBaseD0Ev>:
 8004614:	b510      	push	{r4, lr}
 8004616:	4604      	mov	r4, r0
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <_ZN18mainScreenViewBaseD0Ev+0x34>)
 800461a:	6003      	str	r3, [r0, #0]
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <_ZN18mainScreenViewBaseD0Ev+0x38>)
 800461e:	66c3      	str	r3, [r0, #108]	; 0x6c
 8004620:	4a0b      	ldr	r2, [pc, #44]	; (8004650 <_ZN18mainScreenViewBaseD0Ev+0x3c>)
 8004622:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <_ZN18mainScreenViewBaseD0Ev+0x40>)
 8004626:	66c3      	str	r3, [r0, #108]	; 0x6c
 8004628:	490b      	ldr	r1, [pc, #44]	; (8004658 <_ZN18mainScreenViewBaseD0Ev+0x44>)
 800462a:	6401      	str	r1, [r0, #64]	; 0x40
 800462c:	6402      	str	r2, [r0, #64]	; 0x40
 800462e:	6403      	str	r3, [r0, #64]	; 0x40
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <_ZN18mainScreenViewBaseD0Ev+0x48>)
 8004632:	6002      	str	r2, [r0, #0]
 8004634:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <_ZN18mainScreenViewBaseD0Ev+0x4c>)
 8004636:	6002      	str	r2, [r0, #0]
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <_ZN18mainScreenViewBaseD0Ev+0x50>)
 800463a:	6042      	str	r2, [r0, #4]
 800463c:	6043      	str	r3, [r0, #4]
 800463e:	2198      	movs	r1, #152	; 0x98
 8004640:	f01b ff55 	bl	80204ee <_ZdlPvj>
 8004644:	4620      	mov	r0, r4
 8004646:	bd10      	pop	{r4, pc}
 8004648:	08022d60 	.word	0x08022d60
 800464c:	08023a2c 	.word	0x08023a2c
 8004650:	08022cc4 	.word	0x08022cc4
 8004654:	08023bcc 	.word	0x08023bcc
 8004658:	08023934 	.word	0x08023934
 800465c:	08022d2c 	.word	0x08022d2c
 8004660:	08023ca0 	.word	0x08023ca0
 8004664:	08023694 	.word	0x08023694

08004668 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	b083      	sub	sp, #12
 800466e:	4607      	mov	r7, r0
        : presenter(0)
 8004670:	f012 fbd6 	bl	8016e20 <_ZN8touchgfx6ScreenC1Ev>
 8004674:	4b47      	ldr	r3, [pc, #284]	; (8004794 <_ZN18mainScreenViewBaseC1Ev+0x12c>)
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	2400      	movs	r4, #0
 800467a:	63fc      	str	r4, [r7, #60]	; 0x3c
 800467c:	463d      	mov	r5, r7
 800467e:	4b46      	ldr	r3, [pc, #280]	; (8004798 <_ZN18mainScreenViewBaseC1Ev+0x130>)
 8004680:	f845 3b40 	str.w	r3, [r5], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004684:	f04f 0926 	mov.w	r9, #38	; 0x26
 8004688:	464a      	mov	r2, r9
 800468a:	4621      	mov	r1, r4
 800468c:	4628      	mov	r0, r5
 800468e:	f01c f8f3 	bl	8020878 <memset>
          visible(true)
 8004692:	f8df b114 	ldr.w	fp, [pc, #276]	; 80047a8 <_ZN18mainScreenViewBaseC1Ev+0x140>
 8004696:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 800469a:	80ac      	strh	r4, [r5, #4]
 800469c:	80ec      	strh	r4, [r5, #6]
 800469e:	812c      	strh	r4, [r5, #8]
 80046a0:	816c      	strh	r4, [r5, #10]
 80046a2:	81ac      	strh	r4, [r5, #12]
 80046a4:	81ec      	strh	r4, [r5, #14]
 80046a6:	822c      	strh	r4, [r5, #16]
 80046a8:	826c      	strh	r4, [r5, #18]
 80046aa:	616c      	str	r4, [r5, #20]
 80046ac:	61ac      	str	r4, [r5, #24]
 80046ae:	61ec      	str	r4, [r5, #28]
 80046b0:	842c      	strh	r4, [r5, #32]
 80046b2:	846c      	strh	r4, [r5, #34]	; 0x22
 80046b4:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 80046b8:	f04f 0a01 	mov.w	sl, #1
 80046bc:	f885 a025 	strb.w	sl, [r5, #37]	; 0x25
 80046c0:	4b36      	ldr	r3, [pc, #216]	; (800479c <_ZN18mainScreenViewBaseC1Ev+0x134>)
 80046c2:	643b      	str	r3, [r7, #64]	; 0x40
 80046c4:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <_ZN18mainScreenViewBaseC1Ev+0x138>)
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
 80046c8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80046cc:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
        : color(col)
 80046d0:	62ac      	str	r4, [r5, #40]	; 0x28
 80046d2:	f107 066c 	add.w	r6, r7, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80046d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046da:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 80046de:	464a      	mov	r2, r9
 80046e0:	4621      	mov	r1, r4
 80046e2:	4630      	mov	r0, r6
 80046e4:	f01c f8c8 	bl	8020878 <memset>
 80046e8:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 80046ec:	80b4      	strh	r4, [r6, #4]
 80046ee:	80f4      	strh	r4, [r6, #6]
 80046f0:	8134      	strh	r4, [r6, #8]
 80046f2:	8174      	strh	r4, [r6, #10]
 80046f4:	81b4      	strh	r4, [r6, #12]
 80046f6:	81f4      	strh	r4, [r6, #14]
 80046f8:	8234      	strh	r4, [r6, #16]
 80046fa:	8274      	strh	r4, [r6, #18]
 80046fc:	6174      	str	r4, [r6, #20]
 80046fe:	61b4      	str	r4, [r6, #24]
 8004700:	61f4      	str	r4, [r6, #28]
 8004702:	8434      	strh	r4, [r6, #32]
 8004704:	8474      	strh	r4, [r6, #34]	; 0x22
 8004706:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 800470a:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8004710:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <_ZN18mainScreenViewBaseC1Ev+0x13c>)
 8004714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004716:	f8bd 3000 	ldrh.w	r3, [sp]
 800471a:	84f3      	strh	r3, [r6, #38]	; 0x26
 800471c:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8004720:	4669      	mov	r1, sp
 8004722:	4630      	mov	r0, r6
 8004724:	f00f f8cc 	bl	80138c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8004728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	4621      	mov	r1, r4
 800472e:	4628      	mov	r0, r5
 8004730:	4798      	blx	r3
        setY(y);
 8004732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	4621      	mov	r1, r4
 8004738:	4628      	mov	r0, r5
 800473a:	4798      	blx	r3
        setWidth(width);
 800473c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004744:	4628      	mov	r0, r5
 8004746:	4798      	blx	r3
        setHeight(height);
 8004748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004750:	4628      	mov	r0, r5
 8004752:	4798      	blx	r3
        : color(col)
 8004754:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004758:	66bb      	str	r3, [r7, #104]	; 0x68
        setX(x);
 800475a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	4621      	mov	r1, r4
 8004760:	4630      	mov	r0, r6
 8004762:	4798      	blx	r3
        setY(y);
 8004764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	4621      	mov	r1, r4
 800476a:	4630      	mov	r0, r6
 800476c:	4798      	blx	r3
 800476e:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 8004772:	a901      	add	r1, sp, #4
 8004774:	4630      	mov	r0, r6
 8004776:	f00f f8a3 	bl	80138c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800477a:	1d3c      	adds	r4, r7, #4
 800477c:	4629      	mov	r1, r5
 800477e:	4620      	mov	r0, r4
 8004780:	f00d f9ee 	bl	8011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004784:	4631      	mov	r1, r6
 8004786:	4620      	mov	r0, r4
 8004788:	f00d f9ea 	bl	8011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800478c:	4638      	mov	r0, r7
 800478e:	b003      	add	sp, #12
 8004790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004794:	08022d2c 	.word	0x08022d2c
 8004798:	08022d60 	.word	0x08022d60
 800479c:	08022cc4 	.word	0x08022cc4
 80047a0:	08023934 	.word	0x08023934
 80047a4:	08023a2c 	.word	0x08023a2c
 80047a8:	08023bcc 	.word	0x08023bcc

080047ac <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80047ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80047ae:	4770      	bx	lr

080047b0 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80047b0:	b530      	push	{r4, r5, lr}
 80047b2:	b085      	sub	sp, #20
 80047b4:	4604      	mov	r4, r0
        rect.width = width;
 80047b6:	8101      	strh	r1, [r0, #8]
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80047b8:	466d      	mov	r5, sp
 80047ba:	6803      	ldr	r3, [r0, #0]
 80047bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c0:	4601      	mov	r1, r0
 80047c2:	4628      	mov	r0, r5
 80047c4:	4798      	blx	r3
 80047c6:	343c      	adds	r4, #60	; 0x3c
 80047c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80047d0:	b005      	add	sp, #20
 80047d2:	bd30      	pop	{r4, r5, pc}

080047d4 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80047d4:	b530      	push	{r4, r5, lr}
 80047d6:	b085      	sub	sp, #20
 80047d8:	4604      	mov	r4, r0
        rect.height = height;
 80047da:	8141      	strh	r1, [r0, #10]
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80047dc:	466d      	mov	r5, sp
 80047de:	6803      	ldr	r3, [r0, #0]
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	4601      	mov	r1, r0
 80047e6:	4628      	mov	r0, r5
 80047e8:	4798      	blx	r3
 80047ea:	343c      	adds	r4, #60	; 0x3c
 80047ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80047f4:	b005      	add	sp, #20
 80047f6:	bd30      	pop	{r4, r5, pc}

080047f8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80047f8:	2200      	movs	r2, #0
 80047fa:	8002      	strh	r2, [r0, #0]
 80047fc:	8042      	strh	r2, [r0, #2]
 80047fe:	8082      	strh	r2, [r0, #4]
 8004800:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004802:	4770      	bx	lr

08004804 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004804:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8004808:	4770      	bx	lr

0800480a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800480a:	b538      	push	{r3, r4, r5, lr}
 800480c:	4604      	mov	r4, r0
 800480e:	4615      	mov	r5, r2
    {
        setX(x);
 8004810:	6803      	ldr	r3, [r0, #0]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	4798      	blx	r3
        setBaselineY(baselineY);
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481a:	4629      	mov	r1, r5
 800481c:	4620      	mov	r0, r4
 800481e:	4798      	blx	r3
    }
 8004820:	bd38      	pop	{r3, r4, r5, pc}

08004822 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8004822:	2000      	movs	r0, #0
 8004824:	4770      	bx	lr

08004826 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004826:	2200      	movs	r2, #0
 8004828:	8002      	strh	r2, [r0, #0]
 800482a:	8042      	strh	r2, [r0, #2]
 800482c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004830:	8081      	strh	r1, [r0, #4]
 8004832:	80c1      	strh	r1, [r0, #6]
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8004834:	6082      	str	r2, [r0, #8]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 8004836:	4770      	bx	lr

08004838 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004838:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800483a:	4770      	bx	lr

0800483c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800483c:	4a06      	ldr	r2, [pc, #24]	; (8004858 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x1c>)
 800483e:	6002      	str	r2, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004840:	4a06      	ldr	r2, [pc, #24]	; (800485c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8004842:	6002      	str	r2, [r0, #0]
class TextArea : public Widget
 8004844:	4a06      	ldr	r2, [pc, #24]	; (8004860 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x24>)
 8004846:	6002      	str	r2, [r0, #0]
    {
 8004848:	4a06      	ldr	r2, [pc, #24]	; (8004864 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x28>)
 800484a:	6282      	str	r2, [r0, #40]	; 0x28
 800484c:	4a06      	ldr	r2, [pc, #24]	; (8004868 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x2c>)
 800484e:	6002      	str	r2, [r0, #0]
    {
 8004850:	4a06      	ldr	r2, [pc, #24]	; (800486c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x30>)
 8004852:	6002      	str	r2, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	08022e9c 	.word	0x08022e9c
 800485c:	0802399c 	.word	0x0802399c
 8004860:	080238a4 	.word	0x080238a4
 8004864:	080221f0 	.word	0x080221f0
 8004868:	08022cc4 	.word	0x08022cc4
 800486c:	08023bcc 	.word	0x08023bcc

08004870 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004870:	b510      	push	{r4, lr}
 8004872:	4604      	mov	r4, r0
 8004874:	4b08      	ldr	r3, [pc, #32]	; (8004898 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x28>)
 8004876:	6003      	str	r3, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004878:	4b08      	ldr	r3, [pc, #32]	; (800489c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x2c>)
 800487a:	6003      	str	r3, [r0, #0]
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x30>)
 800487e:	6003      	str	r3, [r0, #0]
 8004880:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x34>)
 8004882:	6283      	str	r3, [r0, #40]	; 0x28
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x38>)
 8004886:	6003      	str	r3, [r0, #0]
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x3c>)
 800488a:	6003      	str	r3, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800488c:	214c      	movs	r1, #76	; 0x4c
 800488e:	f01b fe2e 	bl	80204ee <_ZdlPvj>
 8004892:	4620      	mov	r0, r4
 8004894:	bd10      	pop	{r4, pc}
 8004896:	bf00      	nop
 8004898:	08022e9c 	.word	0x08022e9c
 800489c:	0802399c 	.word	0x0802399c
 80048a0:	080238a4 	.word	0x080238a4
 80048a4:	080221f0 	.word	0x080221f0
 80048a8:	08022cc4 	.word	0x08022cc4
 80048ac:	08023bcc 	.word	0x08023bcc

080048b0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
    virtual void setBaselineY(int16_t baselineY)
 80048b0:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80048b2:	6803      	ldr	r3, [r0, #0]
 80048b4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	b1a3      	cbz	r3, 80048e6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 80048bc:	4604      	mov	r4, r0
 80048be:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
 80048c0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80048c2:	4910      	ldr	r1, [pc, #64]	; (8004904 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80048c4:	8809      	ldrh	r1, [r1, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80048c6:	428a      	cmp	r2, r1
 80048c8:	d213      	bcs.n	80048f2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x42>
        return fonts[typedTexts[typedTextId].fontIdx];
 80048ca:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80048ce:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048d6:	6803      	ldr	r3, [r0, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	4798      	blx	r3
 80048dc:	1a31      	subs	r1, r6, r0
 80048de:	b209      	sxth	r1, r1
 80048e0:	4620      	mov	r0, r4
 80048e2:	47a8      	blx	r5
    }
 80048e4:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80048e8:	4a09      	ldr	r2, [pc, #36]	; (8004910 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80048ea:	216c      	movs	r1, #108	; 0x6c
 80048ec:	4809      	ldr	r0, [pc, #36]	; (8004914 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80048ee:	f01b fe2d 	bl	802054c <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80048f4:	4a06      	ldr	r2, [pc, #24]	; (8004910 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80048f6:	216d      	movs	r1, #109	; 0x6d
 80048f8:	4806      	ldr	r0, [pc, #24]	; (8004914 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80048fa:	f01b fe27 	bl	802054c <__assert_func>
 80048fe:	bf00      	nop
 8004900:	2400c8a4 	.word	0x2400c8a4
 8004904:	2400c8a8 	.word	0x2400c8a8
 8004908:	2400c8ac 	.word	0x2400c8ac
 800490c:	08022d8c 	.word	0x08022d8c
 8004910:	08022dd0 	.word	0x08022dd0
 8004914:	08022e0c 	.word	0x08022e0c
 8004918:	08022e54 	.word	0x08022e54

0800491c <_ZN14CustomKeyboardD1Ev>:
 */
class CustomKeyboard : public Container
{
public:
    CustomKeyboard();
    virtual ~CustomKeyboard() { }
 800491c:	b4f0      	push	{r4, r5, r6, r7}
 800491e:	4a23      	ldr	r2, [pc, #140]	; (80049ac <_ZN14CustomKeyboardD1Ev+0x90>)
 8004920:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004922:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <_ZN14CustomKeyboardD1Ev+0x94>)
 8004924:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    }
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <_ZN14CustomKeyboardD1Ev+0x98>)
 800492a:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800492e:	4922      	ldr	r1, [pc, #136]	; (80049b8 <_ZN14CustomKeyboardD1Ev+0x9c>)
 8004930:	f8c0 120c 	str.w	r1, [r0, #524]	; 0x20c
    {
 8004934:	4a21      	ldr	r2, [pc, #132]	; (80049bc <_ZN14CustomKeyboardD1Ev+0xa0>)
 8004936:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800493a:	f8c0 11fc 	str.w	r1, [r0, #508]	; 0x1fc
    {
 800493e:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004942:	f8c0 11ec 	str.w	r1, [r0, #492]	; 0x1ec
    {
 8004946:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800494a:	f8c0 11dc 	str.w	r1, [r0, #476]	; 0x1dc
    {
 800494e:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
class TextArea : public Widget
 8004952:	4e1b      	ldr	r6, [pc, #108]	; (80049c0 <_ZN14CustomKeyboardD1Ev+0xa4>)
 8004954:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
    {
 8004958:	4d1a      	ldr	r5, [pc, #104]	; (80049c4 <_ZN14CustomKeyboardD1Ev+0xa8>)
 800495a:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 800495e:	491a      	ldr	r1, [pc, #104]	; (80049c8 <_ZN14CustomKeyboardD1Ev+0xac>)
 8004960:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <_ZN14CustomKeyboardD1Ev+0xb0>)
 8004966:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 * A keyboard with multiple key mappings e.g. lower case alpha, upper case alpha and
 * numeric mappings can be created by implementing callback methods for shift and mode
 * areas in the provided bitmap and then changing the KeyMappingList when those areas
 * are pressed.
 */
class Keyboard : public Container
 800496a:	4c19      	ldr	r4, [pc, #100]	; (80049d0 <_ZN14CustomKeyboardD1Ev+0xb4>)
 800496c:	62c4      	str	r4, [r0, #44]	; 0x2c
class Image : public Widget
 800496e:	4c19      	ldr	r4, [pc, #100]	; (80049d4 <_ZN14CustomKeyboardD1Ev+0xb8>)
 8004970:	f8c0 40e4 	str.w	r4, [r0, #228]	; 0xe4
 8004974:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8004978:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 800497c:	4f16      	ldr	r7, [pc, #88]	; (80049d8 <_ZN14CustomKeyboardD1Ev+0xbc>)
 800497e:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8004982:	4f16      	ldr	r7, [pc, #88]	; (80049dc <_ZN14CustomKeyboardD1Ev+0xc0>)
 8004984:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8004988:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 800498c:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 8004990:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 8004994:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8004998:	6644      	str	r4, [r0, #100]	; 0x64
 800499a:	6641      	str	r1, [r0, #100]	; 0x64
 800499c:	6642      	str	r2, [r0, #100]	; 0x64
class Container : public Drawable
 800499e:	4910      	ldr	r1, [pc, #64]	; (80049e0 <_ZN14CustomKeyboardD1Ev+0xc4>)
 80049a0:	62c1      	str	r1, [r0, #44]	; 0x2c
 80049a2:	62c2      	str	r2, [r0, #44]	; 0x2c
 80049a4:	6001      	str	r1, [r0, #0]
 80049a6:	6002      	str	r2, [r0, #0]
 80049a8:	bcf0      	pop	{r4, r5, r6, r7}
 80049aa:	4770      	bx	lr
 80049ac:	08022f74 	.word	0x08022f74
 80049b0:	08022f5c 	.word	0x08022f5c
 80049b4:	08022f2c 	.word	0x08022f2c
 80049b8:	08022f44 	.word	0x08022f44
 80049bc:	0802224c 	.word	0x0802224c
 80049c0:	080238a4 	.word	0x080238a4
 80049c4:	080221f0 	.word	0x080221f0
 80049c8:	08022cc4 	.word	0x08022cc4
 80049cc:	08023bcc 	.word	0x08023bcc
 80049d0:	08023a98 	.word	0x08023a98
 80049d4:	08023a2c 	.word	0x08023a2c
 80049d8:	08022e9c 	.word	0x08022e9c
 80049dc:	0802399c 	.word	0x0802399c
 80049e0:	08023694 	.word	0x08023694

080049e4 <_ZN14CustomKeyboard18donePressedHandlerEv>:
    uppercaseKeys = !uppercaseKeys;
    setKeyMappingList();
}

void CustomKeyboard::donePressedHandler()
{
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
    if (doneReturnCallback && doneReturnCallback->isValid())
 80049e8:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
 80049ec:	b150      	cbz	r0, 8004a04 <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
 80049ee:	6803      	ldr	r3, [r0, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4798      	blx	r3
 80049f4:	b130      	cbz	r0, 8004a04 <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
    {
        doneReturnCallback->execute(buffer);
 80049f6:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
 80049fa:	6803      	ldr	r3, [r0, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8004a02:	4798      	blx	r3
    }
}
 8004a04:	bd10      	pop	{r4, pc}
	...

08004a08 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004a08:	4a02      	ldr	r2, [pc, #8]	; (8004a14 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0xc>)
 8004a0a:	6002      	str	r2, [r0, #0]
    }
 8004a0c:	4a02      	ldr	r2, [pc, #8]	; (8004a18 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0x10>)
 8004a0e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	08022f5c 	.word	0x08022f5c
 8004a18:	08022f2c 	.word	0x08022f2c

08004a1c <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004a1c:	4a02      	ldr	r2, [pc, #8]	; (8004a28 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0xc>)
 8004a1e:	6002      	str	r2, [r0, #0]
    {
 8004a20:	4a02      	ldr	r2, [pc, #8]	; (8004a2c <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0x10>)
 8004a22:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	08022f44 	.word	0x08022f44
 8004a2c:	0802224c 	.word	0x0802224c

08004a30 <_Z41__static_initialization_and_destruction_0ii>:

    uppercaseKeys = true;
    firstCharacterEntry = true;
    alphaKeys = true;
    setKeyMappingList();
}
 8004a30:	2801      	cmp	r0, #1
 8004a32:	d006      	beq.n	8004a42 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8004a34:	b920      	cbnz	r0, 8004a40 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8004a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a3a:	4299      	cmp	r1, r3
 8004a3c:	f000 8222 	beq.w	8004e84 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8004a40:	4770      	bx	lr
 8004a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a46:	4299      	cmp	r1, r3
 8004a48:	d1f4      	bne.n	8004a34 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8004a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8004a4e:	4bf0      	ldr	r3, [pc, #960]	; (8004e10 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	240c      	movs	r4, #12
 8004a56:	805c      	strh	r4, [r3, #2]
 8004a58:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8004a5c:	f8a3 e004 	strh.w	lr, [r3, #4]
 8004a60:	2224      	movs	r2, #36	; 0x24
 8004a62:	80da      	strh	r2, [r3, #6]
 8004a64:	811a      	strh	r2, [r3, #8]
 8004a66:	f04f 0c06 	mov.w	ip, #6
 8004a6a:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8004a6e:	2502      	movs	r5, #2
 8004a70:	731d      	strb	r5, [r3, #12]
 8004a72:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8004a76:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8004a7a:	f8a3 e010 	strh.w	lr, [r3, #16]
 8004a7e:	825a      	strh	r2, [r3, #18]
 8004a80:	829a      	strh	r2, [r3, #20]
 8004a82:	f8a3 c016 	strh.w	ip, [r3, #22]
 8004a86:	f04f 0503 	mov.w	r5, #3
 8004a8a:	761d      	strb	r5, [r3, #24]
 8004a8c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8004a90:	835e      	strh	r6, [r3, #26]
 8004a92:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8004a96:	83da      	strh	r2, [r3, #30]
 8004a98:	841a      	strh	r2, [r3, #32]
 8004a9a:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8004a9e:	f04f 0504 	mov.w	r5, #4
 8004aa2:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8004aa6:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8004aaa:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8004aae:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8004ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ab4:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004ab6:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8004aba:	f04f 0505 	mov.w	r5, #5
 8004abe:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8004ac2:	27b4      	movs	r7, #180	; 0xb4
 8004ac4:	865f      	strh	r7, [r3, #50]	; 0x32
 8004ac6:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8004aca:	86da      	strh	r2, [r3, #54]	; 0x36
 8004acc:	871a      	strh	r2, [r3, #56]	; 0x38
 8004ace:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8004ad2:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8004ad6:	f04f 05de 	mov.w	r5, #222	; 0xde
 8004ada:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8004adc:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8004ae0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8004ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8004ae8:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8004aec:	f04f 0907 	mov.w	r9, #7
 8004af0:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8004af4:	f44f 7984 	mov.w	r9, #264	; 0x108
 8004af8:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8004afc:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8004b00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004b04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8004b08:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8004b0c:	f04f 0b08 	mov.w	fp, #8
 8004b10:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8004b14:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8004b18:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8004b1c:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8004b20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8004b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b28:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8004b2c:	2509      	movs	r5, #9
 8004b2e:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8004b32:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8004b36:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8004b3a:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8004b3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8004b42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004b46:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8004b4a:	250a      	movs	r5, #10
 8004b4c:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8004b50:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8004b54:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8004b58:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8004b5c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004b60:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8004b64:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8004b68:	f04f 090b 	mov.w	r9, #11
 8004b6c:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8004b70:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8004b74:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8004b78:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8004b7c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8004b80:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8004b84:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8004b88:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8004b8c:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8004b90:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8004b94:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8004b98:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8004b9c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8004ba0:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8004ba4:	f04f 060d 	mov.w	r6, #13
 8004ba8:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8004bac:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8004bb0:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8004bb4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8004bb8:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8004bbc:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8004bc0:	f04f 0a0e 	mov.w	sl, #14
 8004bc4:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8004bc8:	f04f 0660 	mov.w	r6, #96	; 0x60
 8004bcc:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8004bd0:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8004bd4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8004bd8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004bdc:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8004be0:	f04f 0a0f 	mov.w	sl, #15
 8004be4:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8004be8:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8004bec:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8004bf0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8004bf4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8004bf8:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8004bfc:	f04f 0a10 	mov.w	sl, #16
 8004c00:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8004c04:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8004c08:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8004c0c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8004c10:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8004c14:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8004c18:	f04f 0a11 	mov.w	sl, #17
 8004c1c:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8004c20:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8004c24:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8004c28:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8004c2c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8004c30:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8004c34:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8004c38:	f04f 0a12 	mov.w	sl, #18
 8004c3c:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8004c40:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8004c44:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8004c48:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8004c4c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8004c50:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8004c54:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8004c58:	f04f 0a13 	mov.w	sl, #19
 8004c5c:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8004c60:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8004c64:	4656      	mov	r6, sl
 8004c66:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8004c6a:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8004c6e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8004c72:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8004c76:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8004c7a:	f04f 0a14 	mov.w	sl, #20
 8004c7e:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8004c82:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8004c86:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8004c8a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8004c8e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8004c92:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8004c96:	f04f 0a15 	mov.w	sl, #21
 8004c9a:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8004c9e:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8004ca2:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8004ca6:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8004caa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8004cae:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8004cb2:	f04f 0a16 	mov.w	sl, #22
 8004cb6:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8004cba:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8004cbe:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8004cc2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8004cc6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8004cca:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8004cce:	f04f 0e17 	mov.w	lr, #23
 8004cd2:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8004cd6:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8004cda:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8004cde:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8004ce2:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8004ce6:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8004cea:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8004cee:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8004cf2:	f04f 0918 	mov.w	r9, #24
 8004cf6:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8004cfa:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8004cfe:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8004d02:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8004d06:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8004d0a:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8004d0e:	f04f 0819 	mov.w	r8, #25
 8004d12:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8004d16:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8004d1a:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8004d1e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8004d22:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8004d26:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8004d2a:	271a      	movs	r7, #26
 8004d2c:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8004d30:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8004d34:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8004d38:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8004d3c:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8004d40:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8004d44:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8004d48:	271b      	movs	r7, #27
 8004d4a:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8004d4e:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8004d52:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8004d56:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8004d5a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8004d5e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8004d62:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8004d66:	271c      	movs	r7, #28
 8004d68:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8004d6c:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8004d70:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8004d74:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8004d78:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8004d7c:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8004d80:	271d      	movs	r7, #29
 8004d82:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8004d86:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8004d8a:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8004d8e:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8004d92:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8004d96:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8004d9a:	271e      	movs	r7, #30
 8004d9c:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8004da0:	f04f 0660 	mov.w	r6, #96	; 0x60
 8004da4:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8004da8:	26e2      	movs	r6, #226	; 0xe2
 8004daa:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8004dae:	f44f 7790 	mov.w	r7, #288	; 0x120
 8004db2:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8004db6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8004dba:	f04f 0708 	mov.w	r7, #8
 8004dbe:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8004dc2:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8004dc4:	801c      	strh	r4, [r3, #0]
 8004dc6:	f8a3 e002 	strh.w	lr, [r3, #2]
 8004dca:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8004dce:	f8a3 c004 	strh.w	ip, [r3, #4]
 8004dd2:	80da      	strh	r2, [r3, #6]
};
 8004dd4:	2700      	movs	r7, #0
 8004dd6:	609f      	str	r7, [r3, #8]
 8004dd8:	f04f 0804 	mov.w	r8, #4
 8004ddc:	f8a3 800c 	strh.w	r8, [r3, #12]
 8004de0:	821d      	strh	r5, [r3, #16]
 8004de2:	f8a3 e012 	strh.w	lr, [r3, #18]
 8004de6:	f8a3 c014 	strh.w	ip, [r3, #20]
 8004dea:	82da      	strh	r2, [r3, #22]
 8004dec:	619f      	str	r7, [r3, #24]
 8004dee:	f04f 0e03 	mov.w	lr, #3
 8004df2:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8004df6:	841c      	strh	r4, [r3, #32]
 8004df8:	845e      	strh	r6, [r3, #34]	; 0x22
 8004dfa:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8004dfe:	84da      	strh	r2, [r3, #38]	; 0x26
 8004e00:	629f      	str	r7, [r3, #40]	; 0x28
 8004e02:	f04f 0407 	mov.w	r4, #7
 8004e06:	859c      	strh	r4, [r3, #44]	; 0x2c
 8004e08:	861d      	strh	r5, [r3, #48]	; 0x30
 8004e0a:	865e      	strh	r6, [r3, #50]	; 0x32
 8004e0c:	e004      	b.n	8004e18 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8004e0e:	bf00      	nop
 8004e10:	240028ac 	.word	0x240028ac
 8004e14:	2400284c 	.word	0x2400284c
 8004e18:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8004e1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e1e:	639f      	str	r7, [r3, #56]	; 0x38
 8004e20:	f04f 0205 	mov.w	r2, #5
 8004e24:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004e26:	4604      	mov	r4, r0
 8004e28:	3340      	adds	r3, #64	; 0x40
 8004e2a:	2c00      	cmp	r4, #0
 8004e2c:	db0b      	blt.n	8004e46 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	609a      	str	r2, [r3, #8]
 8004e36:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	805a      	strh	r2, [r3, #2]
 8004e3c:	809a      	strh	r2, [r3, #4]
 8004e3e:	80da      	strh	r2, [r3, #6]
 8004e40:	3310      	adds	r3, #16
 8004e42:	3c01      	subs	r4, #1
 8004e44:	e7f1      	b.n	8004e2a <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004e46:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8004e48:	2205      	movs	r2, #5
 8004e4a:	825a      	strh	r2, [r3, #18]
 8004e4c:	222d      	movs	r2, #45	; 0x2d
 8004e4e:	829a      	strh	r2, [r3, #20]
 8004e50:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8004e54:	82da      	strh	r2, [r3, #22]
 8004e56:	2246      	movs	r2, #70	; 0x46
 8004e58:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8004e5a:	4a0d      	ldr	r2, [pc, #52]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8004e5c:	61da      	str	r2, [r3, #28]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	841a      	strh	r2, [r3, #32]
        : color(col)
 8004e62:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24
 8004e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8004e6e:	b918      	cbnz	r0, 8004e78 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8004e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e74:	4299      	cmp	r1, r3
 8004e76:	d001      	beq.n	8004e7c <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8004e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8004e7e:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8004e80:	61da      	str	r2, [r3, #28]
 8004e82:	e7f9      	b.n	8004e78 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8004e84:	4b01      	ldr	r3, [pc, #4]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8004e86:	4a02      	ldr	r2, [pc, #8]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8004e88:	61da      	str	r2, [r3, #28]
 8004e8a:	4770      	bx	lr
 8004e8c:	24000010 	.word	0x24000010
 8004e90:	080221f0 	.word	0x080221f0

08004e94 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt>:
    virtual void execute(T1 t1)
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004e98:	6844      	ldr	r4, [r0, #4]
 8004e9a:	68c2      	ldr	r2, [r0, #12]
 8004e9c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004ea0:	f012 0f01 	tst.w	r2, #1
 8004ea4:	d102      	bne.n	8004eac <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x18>
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4798      	blx	r3
    }
 8004eaa:	bd10      	pop	{r4, pc}
 8004eac:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8004eb0:	f854 200c 	ldr.w	r2, [r4, ip]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	58d3      	ldr	r3, [r2, r3]
 8004eb8:	e7f6      	b.n	8004ea8 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x14>

08004eba <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004eba:	6843      	ldr	r3, [r0, #4]
 8004ebc:	b14b      	cbz	r3, 8004ed2 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x18>
 8004ebe:	6883      	ldr	r3, [r0, #8]
 8004ec0:	b10b      	cbz	r3, 8004ec6 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0xc>
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	4770      	bx	lr
 8004ec6:	68c3      	ldr	r3, [r0, #12]
 8004ec8:	f013 0f01 	tst.w	r3, #1
 8004ecc:	d003      	beq.n	8004ed6 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x1c>
 8004ece:	2001      	movs	r0, #1
 8004ed0:	4770      	bx	lr
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	4770      	bx	lr
 8004ed6:	2000      	movs	r0, #0
    }
 8004ed8:	4770      	bx	lr

08004eda <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv>:
    virtual void execute()
 8004eda:	b508      	push	{r3, lr}
 8004edc:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8004ede:	6841      	ldr	r1, [r0, #4]
 8004ee0:	68c2      	ldr	r2, [r0, #12]
 8004ee2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8004ee6:	f012 0f01 	tst.w	r2, #1
 8004eea:	d102      	bne.n	8004ef2 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x18>
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	4798      	blx	r3
    }
 8004ef0:	bd08      	pop	{r3, pc}
 8004ef2:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8004ef6:	f851 200c 	ldr.w	r2, [r1, ip]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	58d3      	ldr	r3, [r2, r3]
 8004efe:	e7f6      	b.n	8004eee <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x14>

08004f00 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004f00:	6843      	ldr	r3, [r0, #4]
 8004f02:	b14b      	cbz	r3, 8004f18 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x18>
 8004f04:	6883      	ldr	r3, [r0, #8]
 8004f06:	b10b      	cbz	r3, 8004f0c <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0xc>
 8004f08:	2001      	movs	r0, #1
 8004f0a:	4770      	bx	lr
 8004f0c:	68c3      	ldr	r3, [r0, #12]
 8004f0e:	f013 0f01 	tst.w	r3, #1
 8004f12:	d003      	beq.n	8004f1c <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x1c>
 8004f14:	2001      	movs	r0, #1
 8004f16:	4770      	bx	lr
 8004f18:	2000      	movs	r0, #0
 8004f1a:	4770      	bx	lr
 8004f1c:	2000      	movs	r0, #0
    }
 8004f1e:	4770      	bx	lr

08004f20 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4604      	mov	r4, r0
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x18>)
 8004f26:	6003      	str	r3, [r0, #0]
    {
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x1c>)
 8004f2a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004f2c:	2110      	movs	r1, #16
 8004f2e:	f01b fade 	bl	80204ee <_ZdlPvj>
 8004f32:	4620      	mov	r0, r4
 8004f34:	bd10      	pop	{r4, pc}
 8004f36:	bf00      	nop
 8004f38:	08022f44 	.word	0x08022f44
 8004f3c:	0802224c 	.word	0x0802224c

08004f40 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004f40:	b510      	push	{r4, lr}
 8004f42:	4604      	mov	r4, r0
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x18>)
 8004f46:	6003      	str	r3, [r0, #0]
    }
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x1c>)
 8004f4a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004f4c:	2110      	movs	r1, #16
 8004f4e:	f01b face 	bl	80204ee <_ZdlPvj>
 8004f52:	4620      	mov	r0, r4
 8004f54:	bd10      	pop	{r4, pc}
 8004f56:	bf00      	nop
 8004f58:	08022f5c 	.word	0x08022f5c
 8004f5c:	08022f2c 	.word	0x08022f2c

08004f60 <_ZN14CustomKeyboardD0Ev>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	4604      	mov	r4, r0
 8004f64:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <_ZN14CustomKeyboardD0Ev+0x9c>)
 8004f66:	6003      	str	r3, [r0, #0]
 8004f68:	4b25      	ldr	r3, [pc, #148]	; (8005000 <_ZN14CustomKeyboardD0Ev+0xa0>)
 8004f6a:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    }
 8004f6e:	4b25      	ldr	r3, [pc, #148]	; (8005004 <_ZN14CustomKeyboardD0Ev+0xa4>)
 8004f70:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004f74:	4a24      	ldr	r2, [pc, #144]	; (8005008 <_ZN14CustomKeyboardD0Ev+0xa8>)
 8004f76:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
    {
 8004f7a:	4b24      	ldr	r3, [pc, #144]	; (800500c <_ZN14CustomKeyboardD0Ev+0xac>)
 8004f7c:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004f80:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
    {
 8004f84:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004f88:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
    {
 8004f8c:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004f90:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
    {
 8004f94:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
 8004f98:	4e1d      	ldr	r6, [pc, #116]	; (8005010 <_ZN14CustomKeyboardD0Ev+0xb0>)
 8004f9a:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
 8004f9e:	4d1d      	ldr	r5, [pc, #116]	; (8005014 <_ZN14CustomKeyboardD0Ev+0xb4>)
 8004fa0:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <_ZN14CustomKeyboardD0Ev+0xb8>)
 8004fa6:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8004faa:	4b1c      	ldr	r3, [pc, #112]	; (800501c <_ZN14CustomKeyboardD0Ev+0xbc>)
 8004fac:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 8004fb0:	491b      	ldr	r1, [pc, #108]	; (8005020 <_ZN14CustomKeyboardD0Ev+0xc0>)
 8004fb2:	62c1      	str	r1, [r0, #44]	; 0x2c
 8004fb4:	491b      	ldr	r1, [pc, #108]	; (8005024 <_ZN14CustomKeyboardD0Ev+0xc4>)
 8004fb6:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8004fba:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8004fbe:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004fc2:	4f19      	ldr	r7, [pc, #100]	; (8005028 <_ZN14CustomKeyboardD0Ev+0xc8>)
 8004fc4:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8004fc8:	4f18      	ldr	r7, [pc, #96]	; (800502c <_ZN14CustomKeyboardD0Ev+0xcc>)
 8004fca:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8004fce:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 8004fd2:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 8004fd6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8004fda:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8004fde:	6641      	str	r1, [r0, #100]	; 0x64
 8004fe0:	6642      	str	r2, [r0, #100]	; 0x64
 8004fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fe4:	4a12      	ldr	r2, [pc, #72]	; (8005030 <_ZN14CustomKeyboardD0Ev+0xd0>)
 8004fe6:	62c2      	str	r2, [r0, #44]	; 0x2c
 8004fe8:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004fea:	6002      	str	r2, [r0, #0]
 8004fec:	6003      	str	r3, [r0, #0]
 8004fee:	f44f 710d 	mov.w	r1, #564	; 0x234
 8004ff2:	f01b fa7c 	bl	80204ee <_ZdlPvj>
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	08022f74 	.word	0x08022f74
 8005000:	08022f5c 	.word	0x08022f5c
 8005004:	08022f2c 	.word	0x08022f2c
 8005008:	08022f44 	.word	0x08022f44
 800500c:	0802224c 	.word	0x0802224c
 8005010:	080238a4 	.word	0x080238a4
 8005014:	080221f0 	.word	0x080221f0
 8005018:	08022cc4 	.word	0x08022cc4
 800501c:	08023bcc 	.word	0x08023bcc
 8005020:	08023a98 	.word	0x08023a98
 8005024:	08023a2c 	.word	0x08023a2c
 8005028:	08022e9c 	.word	0x08022e9c
 800502c:	0802399c 	.word	0x0802399c
 8005030:	08023694 	.word	0x08023694

08005034 <_ZN14CustomKeyboard17setKeyMappingListEv>:
{
 8005034:	b530      	push	{r4, r5, lr}
 8005036:	b085      	sub	sp, #20
 8005038:	4604      	mov	r4, r0
    if (alphaKeys)
 800503a:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 800503e:	b1d3      	cbz	r3, 8005076 <_ZN14CustomKeyboard17setKeyMappingListEv+0x42>
        : typedTextId(id)
 8005040:	4d1a      	ldr	r5, [pc, #104]	; (80050ac <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8005042:	9500      	str	r5, [sp, #0]
 8005044:	2302      	movs	r3, #2
 8005046:	f8ad 3004 	strh.w	r3, [sp, #4]
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 800504a:	4669      	mov	r1, sp
 800504c:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8005050:	f00e faf6 	bl	8013640 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005054:	9500      	str	r5, [sp, #0]
        if (uppercaseKeys)
 8005056:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 800505a:	b133      	cbz	r3, 800506a <_ZN14CustomKeyboard17setKeyMappingListEv+0x36>
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 800505c:	4914      	ldr	r1, [pc, #80]	; (80050b0 <_ZN14CustomKeyboard17setKeyMappingListEv+0x7c>)
 800505e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005062:	f00f f82b 	bl	80140bc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8005066:	b005      	add	sp, #20
 8005068:	bd30      	pop	{r4, r5, pc}
            keyboard.setKeymappingList(&keyMappingListAlphaLower);
 800506a:	4912      	ldr	r1, [pc, #72]	; (80050b4 <_ZN14CustomKeyboard17setKeyMappingListEv+0x80>)
 800506c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005070:	f00f f824 	bl	80140bc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8005074:	e7f7      	b.n	8005066 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
        : typedTextId(id)
 8005076:	4d0d      	ldr	r5, [pc, #52]	; (80050ac <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8005078:	9502      	str	r5, [sp, #8]
 800507a:	2301      	movs	r3, #1
 800507c:	f8ad 300c 	strh.w	r3, [sp, #12]
        modeBtnTextArea.setTypedText(TypedText(T_NUMMODE));
 8005080:	a902      	add	r1, sp, #8
 8005082:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8005086:	f00e fadb 	bl	8013640 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 800508a:	9502      	str	r5, [sp, #8]
        if (uppercaseKeys)
 800508c:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8005090:	b12b      	cbz	r3, 800509e <_ZN14CustomKeyboard17setKeyMappingListEv+0x6a>
            keyboard.setKeymappingList(&keyMappingListNumUpper);
 8005092:	4909      	ldr	r1, [pc, #36]	; (80050b8 <_ZN14CustomKeyboard17setKeyMappingListEv+0x84>)
 8005094:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005098:	f00f f810 	bl	80140bc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 800509c:	e7e3      	b.n	8005066 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
            keyboard.setKeymappingList(&keyMappingListNumLower);
 800509e:	4907      	ldr	r1, [pc, #28]	; (80050bc <_ZN14CustomKeyboard17setKeyMappingListEv+0x88>)
 80050a0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80050a4:	f00f f80a 	bl	80140bc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 80050a8:	e7dd      	b.n	8005066 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
 80050aa:	bf00      	nop
 80050ac:	080221f0 	.word	0x080221f0
 80050b0:	080231f4 	.word	0x080231f4
 80050b4:	080231ec 	.word	0x080231ec
 80050b8:	080231e4 	.word	0x080231e4
 80050bc:	080231dc 	.word	0x080231dc

080050c0 <_ZN14CustomKeyboard23backspacePressedHandlerEv>:
{
 80050c0:	b538      	push	{r3, r4, r5, lr}
     *
     * @see setBufferPosition
     */
    uint16_t getBufferPosition()
    {
        return bufferPosition;
 80050c2:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
    if (pos > 0)
 80050c6:	b905      	cbnz	r5, 80050ca <_ZN14CustomKeyboard23backspacePressedHandlerEv+0xa>
}
 80050c8:	bd38      	pop	{r3, r4, r5, pc}
 80050ca:	4604      	mov	r4, r0
        buffer[pos - 1] = 0;
 80050cc:	1e69      	subs	r1, r5, #1
 80050ce:	f105 0387 	add.w	r3, r5, #135	; 0x87
 80050d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80050d6:	2200      	movs	r2, #0
 80050d8:	809a      	strh	r2, [r3, #4]
        keyboard.setBufferPosition(pos - 1);
 80050da:	b289      	uxth	r1, r1
 80050dc:	302c      	adds	r0, #44	; 0x2c
 80050de:	f00e ffe9 	bl	80140b4 <_ZN8touchgfx8Keyboard17setBufferPositionEt>
        if (1 == pos)
 80050e2:	2d01      	cmp	r5, #1
 80050e4:	d1f0      	bne.n	80050c8 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>
            firstCharacterEntry = true;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
            uppercaseKeys = true;
 80050ec:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
            setKeyMappingList();
 80050f0:	4620      	mov	r0, r4
 80050f2:	f7ff ff9f 	bl	8005034 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 80050f6:	e7e7      	b.n	80050c8 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>

080050f8 <_ZN14CustomKeyboard22capslockPressedHandlerEv>:
{
 80050f8:	b508      	push	{r3, lr}
    uppercaseKeys = !uppercaseKeys;
 80050fa:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
 80050fe:	f082 0201 	eor.w	r2, r2, #1
 8005102:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    setKeyMappingList();
 8005106:	f7ff ff95 	bl	8005034 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 800510a:	bd08      	pop	{r3, pc}

0800510c <_ZN14CustomKeyboard18modePressedHandlerEv>:
{
 800510c:	b508      	push	{r3, lr}
    alphaKeys = !alphaKeys;
 800510e:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8005112:	f083 0301 	eor.w	r3, r3, #1
 8005116:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (firstCharacterEntry && alphaKeys)
 800511a:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
 800511e:	b122      	cbz	r2, 800512a <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
 8005120:	b11b      	cbz	r3, 800512a <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
        uppercaseKeys = true;
 8005122:	2301      	movs	r3, #1
 8005124:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
 8005128:	e002      	b.n	8005130 <_ZN14CustomKeyboard18modePressedHandlerEv+0x24>
        uppercaseKeys = false;
 800512a:	2300      	movs	r3, #0
 800512c:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    setKeyMappingList();
 8005130:	f7ff ff80 	bl	8005034 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005134:	bd08      	pop	{r3, pc}

08005136 <_ZN14CustomKeyboard17keyPressedhandlerEt>:
{
 8005136:	b508      	push	{r3, lr}
    if (firstCharacterEntry && keyChar != 0)
 8005138:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
 800513c:	b103      	cbz	r3, 8005140 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
 800513e:	b901      	cbnz	r1, 8005142 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xc>
}
 8005140:	bd08      	pop	{r3, pc}
        firstCharacterEntry = false;
 8005142:	2300      	movs	r3, #0
 8005144:	f880 322e 	strb.w	r3, [r0, #558]	; 0x22e
        uppercaseKeys = false;
 8005148:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
        setKeyMappingList();
 800514c:	f7ff ff72 	bl	8005034 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005150:	e7f6      	b.n	8005140 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
	...

08005154 <_ZN14CustomKeyboardC1Ev>:
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005158:	b08d      	sub	sp, #52	; 0x34
 800515a:	4604      	mov	r4, r0
          visible(true)
 800515c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 80053f0 <_ZN14CustomKeyboardC1Ev+0x29c>
 8005160:	f8c0 9000 	str.w	r9, [r0]
        : x(0), y(0), width(0), height(0)
 8005164:	2500      	movs	r5, #0
 8005166:	8085      	strh	r5, [r0, #4]
 8005168:	80c5      	strh	r5, [r0, #6]
 800516a:	8105      	strh	r5, [r0, #8]
 800516c:	8145      	strh	r5, [r0, #10]
 800516e:	8185      	strh	r5, [r0, #12]
 8005170:	81c5      	strh	r5, [r0, #14]
 8005172:	8205      	strh	r5, [r0, #16]
 8005174:	8245      	strh	r5, [r0, #18]
 8005176:	6145      	str	r5, [r0, #20]
 8005178:	6185      	str	r5, [r0, #24]
 800517a:	61c5      	str	r5, [r0, #28]
 800517c:	8405      	strh	r5, [r0, #32]
 800517e:	8445      	strh	r5, [r0, #34]	; 0x22
 8005180:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8005184:	f04f 0801 	mov.w	r8, #1
 8005188:	f880 8025 	strb.w	r8, [r0, #37]	; 0x25
          firstChild(0)
 800518c:	4b8a      	ldr	r3, [pc, #552]	; (80053b8 <_ZN14CustomKeyboardC1Ev+0x264>)
 800518e:	6003      	str	r3, [r0, #0]
 8005190:	6285      	str	r5, [r0, #40]	; 0x28
    firstCharacterEntry(false)
 8005192:	4607      	mov	r7, r0
 8005194:	4b89      	ldr	r3, [pc, #548]	; (80053bc <_ZN14CustomKeyboardC1Ev+0x268>)
 8005196:	f847 3b2c 	str.w	r3, [r7], #44
 800519a:	4638      	mov	r0, r7
 800519c:	f00e fcbc 	bl	8013b18 <_ZN8touchgfx8KeyboardC1Ev>
 80051a0:	f504 76ca 	add.w	r6, r4, #404	; 0x194
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80051a4:	2226      	movs	r2, #38	; 0x26
 80051a6:	4629      	mov	r1, r5
 80051a8:	4630      	mov	r0, r6
 80051aa:	f01b fb65 	bl	8020878 <memset>
 80051ae:	f8c4 9194 	str.w	r9, [r4, #404]	; 0x194
 80051b2:	80b5      	strh	r5, [r6, #4]
 80051b4:	80f5      	strh	r5, [r6, #6]
 80051b6:	8135      	strh	r5, [r6, #8]
 80051b8:	8175      	strh	r5, [r6, #10]
 80051ba:	81b5      	strh	r5, [r6, #12]
 80051bc:	81f5      	strh	r5, [r6, #14]
 80051be:	8235      	strh	r5, [r6, #16]
 80051c0:	8275      	strh	r5, [r6, #18]
 80051c2:	6175      	str	r5, [r6, #20]
 80051c4:	61b5      	str	r5, [r6, #24]
 80051c6:	61f5      	str	r5, [r6, #28]
 80051c8:	8435      	strh	r5, [r6, #32]
 80051ca:	8475      	strh	r5, [r6, #34]	; 0x22
 80051cc:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
 80051d0:	f886 8025 	strb.w	r8, [r6, #37]	; 0x25
 80051d4:	4b7a      	ldr	r3, [pc, #488]	; (80053c0 <_ZN14CustomKeyboardC1Ev+0x26c>)
 80051d6:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 80051da:	4b7a      	ldr	r3, [pc, #488]	; (80053c4 <_ZN14CustomKeyboardC1Ev+0x270>)
 80051dc:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
        : typedTextId(id)
 80051e0:	4b79      	ldr	r3, [pc, #484]	; (80053c8 <_ZN14CustomKeyboardC1Ev+0x274>)
 80051e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80051e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051e8:	85b3      	strh	r3, [r6, #44]	; 0x2c
        : color(col)
 80051ea:	6335      	str	r5, [r6, #48]	; 0x30
 80051ec:	86b5      	strh	r5, [r6, #52]	; 0x34
 80051ee:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 80051f2:	f886 5037 	strb.w	r5, [r6, #55]	; 0x37
 80051f6:	f886 5038 	strb.w	r5, [r6, #56]	; 0x38
 80051fa:	f886 5039 	strb.w	r5, [r6, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80051fe:	87b5      	strh	r5, [r6, #60]	; 0x3c
 8005200:	87f5      	strh	r5, [r6, #62]	; 0x3e
 8005202:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
 8005206:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
              text(0)
 800520a:	6475      	str	r5, [r6, #68]	; 0x44
 800520c:	4b6f      	ldr	r3, [pc, #444]	; (80053cc <_ZN14CustomKeyboardC1Ev+0x278>)
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	9503      	str	r5, [sp, #12]
 8005212:	466b      	mov	r3, sp
 8005214:	aa02      	add	r2, sp, #8
 8005216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800521a:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 800521e:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80053f4 <_ZN14CustomKeyboardC1Ev+0x2a0>
 8005222:	f8c4 c1dc 	str.w	ip, [r4, #476]	; 0x1dc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005226:	4a6a      	ldr	r2, [pc, #424]	; (80053d0 <_ZN14CustomKeyboardC1Ev+0x27c>)
 8005228:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
 800522c:	f8c4 41e0 	str.w	r4, [r4, #480]	; 0x1e0
 8005230:	f504 7ef2 	add.w	lr, r4, #484	; 0x1e4
 8005234:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005238:	e88e 0003 	stmia.w	lr, {r0, r1}
 800523c:	4965      	ldr	r1, [pc, #404]	; (80053d4 <_ZN14CustomKeyboardC1Ev+0x280>)
 800523e:	9104      	str	r1, [sp, #16]
 8005240:	9505      	str	r5, [sp, #20]
 8005242:	a904      	add	r1, sp, #16
 8005244:	c903      	ldmia	r1, {r0, r1}
 8005246:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 800524a:	f8c4 c1ec 	str.w	ip, [r4, #492]	; 0x1ec
        : pobject(pObject), pmemfun(pmemfun_0)
 800524e:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
 8005252:	f8c4 41f0 	str.w	r4, [r4, #496]	; 0x1f0
 8005256:	f504 7efa 	add.w	lr, r4, #500	; 0x1f4
 800525a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800525e:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005262:	495d      	ldr	r1, [pc, #372]	; (80053d8 <_ZN14CustomKeyboardC1Ev+0x284>)
 8005264:	9106      	str	r1, [sp, #24]
 8005266:	9507      	str	r5, [sp, #28]
 8005268:	a906      	add	r1, sp, #24
 800526a:	c903      	ldmia	r1, {r0, r1}
 800526c:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005270:	f8c4 c1fc 	str.w	ip, [r4, #508]	; 0x1fc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005274:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
 8005278:	f8c4 4200 	str.w	r4, [r4, #512]	; 0x200
 800527c:	f504 7e01 	add.w	lr, r4, #516	; 0x204
 8005280:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005284:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005288:	4954      	ldr	r1, [pc, #336]	; (80053dc <_ZN14CustomKeyboardC1Ev+0x288>)
 800528a:	9108      	str	r1, [sp, #32]
 800528c:	9509      	str	r5, [sp, #36]	; 0x24
 800528e:	a908      	add	r1, sp, #32
 8005290:	c903      	ldmia	r1, {r0, r1}
 8005292:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005296:	f8c4 c20c 	str.w	ip, [r4, #524]	; 0x20c
        : pobject(pObject), pmemfun(pmemfun_0)
 800529a:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 800529e:	f8c4 4210 	str.w	r4, [r4, #528]	; 0x210
 80052a2:	f504 7205 	add.w	r2, r4, #532	; 0x214
 80052a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052aa:	e882 0003 	stmia.w	r2, {r0, r1}
 80052ae:	4a4c      	ldr	r2, [pc, #304]	; (80053e0 <_ZN14CustomKeyboardC1Ev+0x28c>)
 80052b0:	920a      	str	r2, [sp, #40]	; 0x28
 80052b2:	950b      	str	r5, [sp, #44]	; 0x2c
 80052b4:	aa0c      	add	r2, sp, #48	; 0x30
 80052b6:	e912 0003 	ldmdb	r2, {r0, r1}
 80052ba:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 80052be:	4a49      	ldr	r2, [pc, #292]	; (80053e4 <_ZN14CustomKeyboardC1Ev+0x290>)
 80052c0:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
        : pobject(pObject), pmemfun(pmemfun_1)
 80052c4:	4a48      	ldr	r2, [pc, #288]	; (80053e8 <_ZN14CustomKeyboardC1Ev+0x294>)
 80052c6:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 80052ca:	f8c4 4220 	str.w	r4, [r4, #544]	; 0x220
 80052ce:	f504 7209 	add.w	r2, r4, #548	; 0x224
 80052d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052d6:	e882 0003 	stmia.w	r2, {r0, r1}
 80052da:	f884 822c 	strb.w	r8, [r4, #556]	; 0x22c
 80052de:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
 80052e2:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
    layout.callbackAreaArray[0].callback = &capslockPressed;
 80052e6:	4941      	ldr	r1, [pc, #260]	; (80053ec <_ZN14CustomKeyboardC1Ev+0x298>)
 80052e8:	68cb      	ldr	r3, [r1, #12]
 80052ea:	f504 72ee 	add.w	r2, r4, #476	; 0x1dc
 80052ee:	609a      	str	r2, [r3, #8]
    layout.callbackAreaArray[1].callback = &backspacePressed;
 80052f0:	68cb      	ldr	r3, [r1, #12]
 80052f2:	f504 72f6 	add.w	r2, r4, #492	; 0x1ec
 80052f6:	619a      	str	r2, [r3, #24]
    layout.callbackAreaArray[2].callback = &modePressed;
 80052f8:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28
    layout.callbackAreaArray[3].callback = &donePressed;
 80052fe:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
    keyboard.setLayout(&layout);
 8005304:	4638      	mov	r0, r7
 8005306:	f00e fc80 	bl	8013c0a <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>
    keyboard.setKeyListener(keyPressed);
 800530a:	f504 7307 	add.w	r3, r4, #540	; 0x21c
     *
     * @note Backspace, shift and mode keys report a 0 as value.
     */
    void setKeyListener(GenericCallback<Unicode::UnicodeChar>& callback)
    {
        keyListener = &callback;
 800530e:	65a3      	str	r3, [r4, #88]	; 0x58
        setX(x);
 8005310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	4629      	mov	r1, r5
 8005316:	4638      	mov	r0, r7
 8005318:	4798      	blx	r3
        setY(y);
 800531a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	4629      	mov	r1, r5
 8005320:	4638      	mov	r0, r7
 8005322:	4798      	blx	r3
        setWidth(width);
 8005324:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800532c:	4638      	mov	r0, r7
 800532e:	4798      	blx	r3
        setHeight(height);
 8005330:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005338:	4638      	mov	r0, r7
 800533a:	4798      	blx	r3
    keyboard.setTextIndentation();
 800533c:	4638      	mov	r0, r7
 800533e:	f00e fc95 	bl	8013c6c <_ZN8touchgfx8Keyboard18setTextIndentationEv>
    memset(buffer, 0, sizeof(buffer));
 8005342:	f504 798a 	add.w	r9, r4, #276	; 0x114
 8005346:	227e      	movs	r2, #126	; 0x7e
 8005348:	4629      	mov	r1, r5
 800534a:	4648      	mov	r0, r9
 800534c:	f01b fa94 	bl	8020878 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 8005350:	223f      	movs	r2, #63	; 0x3f
 8005352:	4649      	mov	r1, r9
 8005354:	4638      	mov	r0, r7
 8005356:	f00e fc4d 	bl	8013bf4 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 800535a:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 800535e:	f884 822e 	strb.w	r8, [r4, #558]	; 0x22e
        setX(x);
 8005362:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	210c      	movs	r1, #12
 800536a:	4630      	mov	r0, r6
 800536c:	4798      	blx	r3
        setY(y);
 800536e:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	21e9      	movs	r1, #233	; 0xe9
 8005376:	4630      	mov	r0, r6
 8005378:	4798      	blx	r3
        setWidth(width);
 800537a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	214e      	movs	r1, #78	; 0x4e
 8005382:	4630      	mov	r0, r6
 8005384:	4798      	blx	r3
        setHeight(height);
 8005386:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800538a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538c:	2124      	movs	r1, #36	; 0x24
 800538e:	4630      	mov	r0, r6
 8005390:	4798      	blx	r3
        : color(col)
 8005392:	f04f 33ff 	mov.w	r3, #4294967295
        color = newColor;
 8005396:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    setKeyMappingList();
 800539a:	4620      	mov	r0, r4
 800539c:	f7ff fe4a 	bl	8005034 <_ZN14CustomKeyboard17setKeyMappingListEv>
    add(keyboard);
 80053a0:	4639      	mov	r1, r7
 80053a2:	4620      	mov	r0, r4
 80053a4:	f00c fbdc 	bl	8011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(modeBtnTextArea);
 80053a8:	4631      	mov	r1, r6
 80053aa:	4620      	mov	r0, r4
 80053ac:	f00c fbd8 	bl	8011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80053b0:	4620      	mov	r0, r4
 80053b2:	b00d      	add	sp, #52	; 0x34
 80053b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053b8:	08023694 	.word	0x08023694
 80053bc:	08022f74 	.word	0x08022f74
 80053c0:	08022cc4 	.word	0x08022cc4
 80053c4:	080238a4 	.word	0x080238a4
 80053c8:	080221f0 	.word	0x080221f0
 80053cc:	080050f9 	.word	0x080050f9
 80053d0:	08022f44 	.word	0x08022f44
 80053d4:	080050c1 	.word	0x080050c1
 80053d8:	0800510d 	.word	0x0800510d
 80053dc:	080049e5 	.word	0x080049e5
 80053e0:	08005137 	.word	0x08005137
 80053e4:	08022f2c 	.word	0x08022f2c
 80053e8:	08022f5c 	.word	0x08022f5c
 80053ec:	24000010 	.word	0x24000010
 80053f0:	08023bcc 	.word	0x08023bcc
 80053f4:	0802224c 	.word	0x0802224c

080053f8 <_ZN14CustomKeyboard34setKeyboardDoneReturnPressedActionERN8touchgfx15GenericCallbackIA_tvvEE>:
    doneReturnCallback = &callback;
 80053f8:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
}
 80053fc:	4770      	bx	lr

080053fe <_ZN14CustomKeyboard11clearBufferEv>:
{
 80053fe:	b538      	push	{r3, r4, r5, lr}
 8005400:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
 8005402:	f500 758a 	add.w	r5, r0, #276	; 0x114
 8005406:	227e      	movs	r2, #126	; 0x7e
 8005408:	2100      	movs	r1, #0
 800540a:	4628      	mov	r0, r5
 800540c:	f01b fa34 	bl	8020878 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 8005410:	223f      	movs	r2, #63	; 0x3f
 8005412:	4629      	mov	r1, r5
 8005414:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005418:	f00e fbec 	bl	8013bf4 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 800541c:	2301      	movs	r3, #1
 800541e:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 8005422:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    alphaKeys = true;
 8005426:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
    setKeyMappingList();
 800542a:	4620      	mov	r0, r4
 800542c:	f7ff fe02 	bl	8005034 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005430:	bd38      	pop	{r3, r4, r5, pc}

08005432 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
 8005432:	b508      	push	{r3, lr}
 8005434:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005438:	2001      	movs	r0, #1
 800543a:	f7ff faf9 	bl	8004a30 <_Z41__static_initialization_and_destruction_0ii>
 800543e:	bd08      	pop	{r3, pc}

08005440 <_GLOBAL__sub_D__ZN14CustomKeyboardC2Ev>:
 8005440:	b508      	push	{r3, lr}
 8005442:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005446:	2000      	movs	r0, #0
 8005448:	f7ff faf2 	bl	8004a30 <_Z41__static_initialization_and_destruction_0ii>
 800544c:	bd08      	pop	{r3, pc}
	...

08005450 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8005450:	b510      	push	{r4, lr}
 8005452:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8005454:	f7fe fb72 	bl	8003b3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005458:	4b01      	ldr	r3, [pc, #4]	; (8005460 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 800545a:	6023      	str	r3, [r4, #0]
{

}
 800545c:	4620      	mov	r0, r4
 800545e:	bd10      	pop	{r4, pc}
 8005460:	08022314 	.word	0x08022314

08005464 <_ZN5ModelC1Ev>:

uint8_t password_ascii[64];
uint8_t ssid_ascii[32];
uint8_t encryption_ascii[30];

Model::Model() : modelListener(0)
 8005464:	2200      	movs	r2, #0
 8005466:	6002      	str	r2, [r0, #0]
{

}
 8005468:	4770      	bx	lr

0800546a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800546a:	4770      	bx	lr

0800546c <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 800546c:	4770      	bx	lr

0800546e <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 800546e:	4770      	bx	lr

08005470 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 8005470:	4b01      	ldr	r3, [pc, #4]	; (8005478 <_ZN8touchgfx9PresenterD1Ev+0x8>)
 8005472:	6003      	str	r3, [r0, #0]
    }
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	08023204 	.word	0x08023204

0800547c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800547c:	4b01      	ldr	r3, [pc, #4]	; (8005484 <_ZN13ModelListenerD1Ev+0x8>)
 800547e:	6003      	str	r3, [r0, #0]
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	0802321c 	.word	0x0802321c

08005488 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8005488:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <_ZN19mainScreenPresenterD1Ev+0x18>)
 800548a:	f102 0108 	add.w	r1, r2, #8
 800548e:	6001      	str	r1, [r0, #0]
 8005490:	3220      	adds	r2, #32
 8005492:	6042      	str	r2, [r0, #4]
 8005494:	4a03      	ldr	r2, [pc, #12]	; (80054a4 <_ZN19mainScreenPresenterD1Ev+0x1c>)
 8005496:	6042      	str	r2, [r0, #4]
    {
 8005498:	4a03      	ldr	r2, [pc, #12]	; (80054a8 <_ZN19mainScreenPresenterD1Ev+0x20>)
 800549a:	6002      	str	r2, [r0, #0]
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	08023224 	.word	0x08023224
 80054a4:	0802321c 	.word	0x0802321c
 80054a8:	08023204 	.word	0x08023204

080054ac <_ZThn4_N19mainScreenPresenterD1Ev>:
 80054ac:	4603      	mov	r3, r0
 80054ae:	4a07      	ldr	r2, [pc, #28]	; (80054cc <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 80054b0:	f102 0108 	add.w	r1, r2, #8
 80054b4:	f840 1c04 	str.w	r1, [r0, #-4]
 80054b8:	3220      	adds	r2, #32
 80054ba:	f840 2904 	str.w	r2, [r0], #-4
 80054be:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 80054c0:	6042      	str	r2, [r0, #4]
 80054c2:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 80054c4:	f843 2c04 	str.w	r2, [r3, #-4]
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	08023224 	.word	0x08023224
 80054d0:	0802321c 	.word	0x0802321c
 80054d4:	08023204 	.word	0x08023204

080054d8 <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 80054d8:	4770      	bx	lr

080054da <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 80054da:	4770      	bx	lr

080054dc <_Z41__static_initialization_and_destruction_0ii>:
 80054dc:	2801      	cmp	r0, #1
 80054de:	d006      	beq.n	80054ee <_Z41__static_initialization_and_destruction_0ii+0x12>
 80054e0:	b920      	cbnz	r0, 80054ec <_Z41__static_initialization_and_destruction_0ii+0x10>
 80054e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054e6:	4299      	cmp	r1, r3
 80054e8:	f000 8222 	beq.w	8005930 <_Z41__static_initialization_and_destruction_0ii+0x454>
 80054ec:	4770      	bx	lr
 80054ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054f2:	4299      	cmp	r1, r3
 80054f4:	d1f4      	bne.n	80054e0 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80054f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80054fa:	4bf0      	ldr	r3, [pc, #960]	; (80058bc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005500:	240c      	movs	r4, #12
 8005502:	805c      	strh	r4, [r3, #2]
 8005504:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8005508:	f8a3 e004 	strh.w	lr, [r3, #4]
 800550c:	2224      	movs	r2, #36	; 0x24
 800550e:	80da      	strh	r2, [r3, #6]
 8005510:	811a      	strh	r2, [r3, #8]
 8005512:	f04f 0c06 	mov.w	ip, #6
 8005516:	f8a3 c00a 	strh.w	ip, [r3, #10]
 800551a:	2502      	movs	r5, #2
 800551c:	731d      	strb	r5, [r3, #12]
 800551e:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8005522:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8005526:	f8a3 e010 	strh.w	lr, [r3, #16]
 800552a:	825a      	strh	r2, [r3, #18]
 800552c:	829a      	strh	r2, [r3, #20]
 800552e:	f8a3 c016 	strh.w	ip, [r3, #22]
 8005532:	f04f 0503 	mov.w	r5, #3
 8005536:	761d      	strb	r5, [r3, #24]
 8005538:	f04f 0660 	mov.w	r6, #96	; 0x60
 800553c:	835e      	strh	r6, [r3, #26]
 800553e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005542:	83da      	strh	r2, [r3, #30]
 8005544:	841a      	strh	r2, [r3, #32]
 8005546:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 800554a:	f04f 0504 	mov.w	r5, #4
 800554e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8005552:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8005556:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 800555a:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 800555e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005560:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005562:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8005566:	f04f 0505 	mov.w	r5, #5
 800556a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 800556e:	27b4      	movs	r7, #180	; 0xb4
 8005570:	865f      	strh	r7, [r3, #50]	; 0x32
 8005572:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8005576:	86da      	strh	r2, [r3, #54]	; 0x36
 8005578:	871a      	strh	r2, [r3, #56]	; 0x38
 800557a:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 800557e:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8005582:	f04f 05de 	mov.w	r5, #222	; 0xde
 8005586:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8005588:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 800558c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005594:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8005598:	f04f 0907 	mov.w	r9, #7
 800559c:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 80055a0:	f44f 7984 	mov.w	r9, #264	; 0x108
 80055a4:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80055a8:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 80055ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80055b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80055b4:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 80055b8:	f04f 0b08 	mov.w	fp, #8
 80055bc:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80055c0:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80055c4:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80055c8:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80055cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80055d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055d4:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80055d8:	2509      	movs	r5, #9
 80055da:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80055de:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80055e2:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80055e6:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80055ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80055ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80055f2:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80055f6:	250a      	movs	r5, #10
 80055f8:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80055fc:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8005600:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8005604:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8005608:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800560c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005610:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8005614:	f04f 090b 	mov.w	r9, #11
 8005618:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 800561c:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8005620:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8005624:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8005628:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800562c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005630:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8005634:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8005638:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 800563c:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8005640:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8005644:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005648:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800564c:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8005650:	f04f 060d 	mov.w	r6, #13
 8005654:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8005658:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 800565c:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8005660:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005664:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005668:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 800566c:	f04f 0a0e 	mov.w	sl, #14
 8005670:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8005674:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005678:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 800567c:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8005680:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005684:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005688:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 800568c:	f04f 0a0f 	mov.w	sl, #15
 8005690:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8005694:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8005698:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 800569c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80056a0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80056a4:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 80056a8:	f04f 0a10 	mov.w	sl, #16
 80056ac:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80056b0:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80056b4:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 80056b8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80056bc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80056c0:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 80056c4:	f04f 0a11 	mov.w	sl, #17
 80056c8:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80056cc:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80056d0:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80056d4:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 80056d8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80056dc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80056e0:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 80056e4:	f04f 0a12 	mov.w	sl, #18
 80056e8:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80056ec:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80056f0:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80056f4:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80056f8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80056fc:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8005700:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8005704:	f04f 0a13 	mov.w	sl, #19
 8005708:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 800570c:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8005710:	4656      	mov	r6, sl
 8005712:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8005716:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 800571a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 800571e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8005722:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8005726:	f04f 0a14 	mov.w	sl, #20
 800572a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 800572e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8005732:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8005736:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800573a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800573e:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8005742:	f04f 0a15 	mov.w	sl, #21
 8005746:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 800574a:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 800574e:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8005752:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8005756:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800575a:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 800575e:	f04f 0a16 	mov.w	sl, #22
 8005762:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8005766:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 800576a:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 800576e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8005772:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8005776:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 800577a:	f04f 0e17 	mov.w	lr, #23
 800577e:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8005782:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8005786:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 800578a:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 800578e:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8005792:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8005796:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 800579a:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 800579e:	f04f 0918 	mov.w	r9, #24
 80057a2:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 80057a6:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80057aa:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 80057ae:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80057b2:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80057b6:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 80057ba:	f04f 0819 	mov.w	r8, #25
 80057be:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80057c2:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80057c6:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 80057ca:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80057ce:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80057d2:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 80057d6:	271a      	movs	r7, #26
 80057d8:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80057dc:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80057e0:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80057e4:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80057e8:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80057ec:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80057f0:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80057f4:	271b      	movs	r7, #27
 80057f6:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80057fa:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80057fe:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8005802:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8005806:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 800580a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 800580e:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8005812:	271c      	movs	r7, #28
 8005814:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8005818:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 800581c:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8005820:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8005824:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8005828:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 800582c:	271d      	movs	r7, #29
 800582e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8005832:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8005836:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 800583a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 800583e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8005842:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8005846:	271e      	movs	r7, #30
 8005848:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 800584c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005850:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8005854:	26e2      	movs	r6, #226	; 0xe2
 8005856:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 800585a:	f44f 7790 	mov.w	r7, #288	; 0x120
 800585e:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8005862:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8005866:	f04f 0708 	mov.w	r7, #8
 800586a:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8005870:	801c      	strh	r4, [r3, #0]
 8005872:	f8a3 e002 	strh.w	lr, [r3, #2]
 8005876:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 800587a:	f8a3 c004 	strh.w	ip, [r3, #4]
 800587e:	80da      	strh	r2, [r3, #6]
};
 8005880:	2700      	movs	r7, #0
 8005882:	609f      	str	r7, [r3, #8]
 8005884:	f04f 0804 	mov.w	r8, #4
 8005888:	f8a3 800c 	strh.w	r8, [r3, #12]
 800588c:	821d      	strh	r5, [r3, #16]
 800588e:	f8a3 e012 	strh.w	lr, [r3, #18]
 8005892:	f8a3 c014 	strh.w	ip, [r3, #20]
 8005896:	82da      	strh	r2, [r3, #22]
 8005898:	619f      	str	r7, [r3, #24]
 800589a:	f04f 0e03 	mov.w	lr, #3
 800589e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 80058a2:	841c      	strh	r4, [r3, #32]
 80058a4:	845e      	strh	r6, [r3, #34]	; 0x22
 80058a6:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 80058aa:	84da      	strh	r2, [r3, #38]	; 0x26
 80058ac:	629f      	str	r7, [r3, #40]	; 0x28
 80058ae:	f04f 0407 	mov.w	r4, #7
 80058b2:	859c      	strh	r4, [r3, #44]	; 0x2c
 80058b4:	861d      	strh	r5, [r3, #48]	; 0x30
 80058b6:	865e      	strh	r6, [r3, #50]	; 0x32
 80058b8:	e004      	b.n	80058c4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 80058ba:	bf00      	nop
 80058bc:	24002b24 	.word	0x24002b24
 80058c0:	24002a94 	.word	0x24002a94
 80058c4:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 80058c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80058ca:	639f      	str	r7, [r3, #56]	; 0x38
 80058cc:	f04f 0205 	mov.w	r2, #5
 80058d0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80058d2:	4604      	mov	r4, r0
 80058d4:	3340      	adds	r3, #64	; 0x40
 80058d6:	2c00      	cmp	r4, #0
 80058d8:	db0b      	blt.n	80058f2 <_Z41__static_initialization_and_destruction_0ii+0x416>
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	609a      	str	r2, [r3, #8]
 80058e2:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	805a      	strh	r2, [r3, #2]
 80058e8:	809a      	strh	r2, [r3, #4]
 80058ea:	80da      	strh	r2, [r3, #6]
 80058ec:	3310      	adds	r3, #16
 80058ee:	3c01      	subs	r4, #1
 80058f0:	e7f1      	b.n	80058d6 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80058f4:	2205      	movs	r2, #5
 80058f6:	825a      	strh	r2, [r3, #18]
 80058f8:	222d      	movs	r2, #45	; 0x2d
 80058fa:	829a      	strh	r2, [r3, #20]
 80058fc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005900:	82da      	strh	r2, [r3, #22]
 8005902:	2246      	movs	r2, #70	; 0x46
 8005904:	831a      	strh	r2, [r3, #24]
 8005906:	4a0d      	ldr	r2, [pc, #52]	; (800593c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005908:	61da      	str	r2, [r3, #28]
 800590a:	2200      	movs	r2, #0
 800590c:	841a      	strh	r2, [r3, #32]
        : color(col)
 800590e:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
 8005914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005918:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 800591a:	b918      	cbnz	r0, 8005924 <_Z41__static_initialization_and_destruction_0ii+0x448>
 800591c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005920:	4299      	cmp	r1, r3
 8005922:	d001      	beq.n	8005928 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8005924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 800592a:	4a04      	ldr	r2, [pc, #16]	; (800593c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 800592c:	61da      	str	r2, [r3, #28]
 800592e:	e7f9      	b.n	8005924 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005930:	4b01      	ldr	r3, [pc, #4]	; (8005938 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005932:	4a02      	ldr	r2, [pc, #8]	; (800593c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005934:	61da      	str	r2, [r3, #28]
 8005936:	4770      	bx	lr
 8005938:	24002af4 	.word	0x24002af4
 800593c:	080221f0 	.word	0x080221f0

08005940 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8005940:	b510      	push	{r4, lr}
 8005942:	4604      	mov	r4, r0
    {
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 8005946:	6003      	str	r3, [r0, #0]
    }
 8005948:	2104      	movs	r1, #4
 800594a:	f01a fdd0 	bl	80204ee <_ZdlPvj>
 800594e:	4620      	mov	r0, r4
 8005950:	bd10      	pop	{r4, pc}
 8005952:	bf00      	nop
 8005954:	08023204 	.word	0x08023204

08005958 <_ZN13ModelListenerD0Ev>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4604      	mov	r4, r0
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <_ZN13ModelListenerD0Ev+0x14>)
 800595e:	6003      	str	r3, [r0, #0]
 8005960:	2108      	movs	r1, #8
 8005962:	f01a fdc4 	bl	80204ee <_ZdlPvj>
 8005966:	4620      	mov	r0, r4
 8005968:	bd10      	pop	{r4, pc}
 800596a:	bf00      	nop
 800596c:	0802321c 	.word	0x0802321c

08005970 <_ZN19mainScreenPresenterD0Ev>:
 8005970:	b510      	push	{r4, lr}
 8005972:	4604      	mov	r4, r0
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <_ZN19mainScreenPresenterD0Ev+0x24>)
 8005976:	f103 0208 	add.w	r2, r3, #8
 800597a:	6002      	str	r2, [r0, #0]
 800597c:	3320      	adds	r3, #32
 800597e:	6043      	str	r3, [r0, #4]
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <_ZN19mainScreenPresenterD0Ev+0x28>)
 8005982:	6043      	str	r3, [r0, #4]
    {
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <_ZN19mainScreenPresenterD0Ev+0x2c>)
 8005986:	6003      	str	r3, [r0, #0]
 8005988:	2110      	movs	r1, #16
 800598a:	f01a fdb0 	bl	80204ee <_ZdlPvj>
 800598e:	4620      	mov	r0, r4
 8005990:	bd10      	pop	{r4, pc}
 8005992:	bf00      	nop
 8005994:	08023224 	.word	0x08023224
 8005998:	0802321c 	.word	0x0802321c
 800599c:	08023204 	.word	0x08023204

080059a0 <_ZThn4_N19mainScreenPresenterD0Ev>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4604      	mov	r4, r0
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 80059a6:	f103 0208 	add.w	r2, r3, #8
 80059aa:	f840 2c04 	str.w	r2, [r0, #-4]
 80059ae:	3320      	adds	r3, #32
 80059b0:	f844 3904 	str.w	r3, [r4], #-4
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 80059b6:	6063      	str	r3, [r4, #4]
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 80059ba:	f840 3c04 	str.w	r3, [r0, #-4]
 80059be:	2110      	movs	r1, #16
 80059c0:	4620      	mov	r0, r4
 80059c2:	f01a fd94 	bl	80204ee <_ZdlPvj>
 80059c6:	4620      	mov	r0, r4
 80059c8:	bd10      	pop	{r4, pc}
 80059ca:	bf00      	nop
 80059cc:	08023224 	.word	0x08023224
 80059d0:	0802321c 	.word	0x0802321c
 80059d4:	08023204 	.word	0x08023204

080059d8 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 80059d8:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 80059dc:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 80059de:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 80059e0:	6042      	str	r2, [r0, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	6082      	str	r2, [r0, #8]
    : view(v)
 80059e6:	4a07      	ldr	r2, [pc, #28]	; (8005a04 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 80059e8:	f102 0408 	add.w	r4, r2, #8
 80059ec:	6004      	str	r4, [r0, #0]
 80059ee:	3220      	adds	r2, #32
 80059f0:	6042      	str	r2, [r0, #4]
 80059f2:	60c1      	str	r1, [r0, #12]
}
 80059f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	08023204 	.word	0x08023204
 8005a00:	0802321c 	.word	0x0802321c
 8005a04:	08023224 	.word	0x08023224

08005a08 <_GLOBAL__sub_I__ZN19mainScreenPresenterC2ER14mainScreenView>:
}
 8005a08:	b508      	push	{r3, lr}
 8005a0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f7ff fd64 	bl	80054dc <_Z41__static_initialization_and_destruction_0ii>
 8005a14:	bd08      	pop	{r3, pc}

08005a16 <_GLOBAL__sub_D__ZN19mainScreenPresenterC2ER14mainScreenView>:
 8005a16:	b508      	push	{r3, lr}
 8005a18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	f7ff fd5d 	bl	80054dc <_Z41__static_initialization_and_destruction_0ii>
 8005a22:	bd08      	pop	{r3, pc}

08005a24 <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 8005a24:	4770      	bx	lr
	...

08005a28 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005a28:	4a02      	ldr	r2, [pc, #8]	; (8005a34 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0xc>)
 8005a2a:	6002      	str	r2, [r0, #0]
    }
 8005a2c:	4a02      	ldr	r2, [pc, #8]	; (8005a38 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0x10>)
 8005a2e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	0802326c 	.word	0x0802326c
 8005a38:	08023254 	.word	0x08023254

08005a3c <_Z41__static_initialization_and_destruction_0ii>:
void mainScreenView::keyboardDonePressed(Unicode::UnicodeChar buffer[])
{
    wifiKeyboard.clearBuffer();
    wifiKeyboard.setVisible(false);
    wifiKeyboard.invalidate();
}
 8005a3c:	2801      	cmp	r0, #1
 8005a3e:	d006      	beq.n	8005a4e <_Z41__static_initialization_and_destruction_0ii+0x12>
 8005a40:	b920      	cbnz	r0, 8005a4c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8005a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a46:	4299      	cmp	r1, r3
 8005a48:	f000 8222 	beq.w	8005e90 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8005a4c:	4770      	bx	lr
 8005a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a52:	4299      	cmp	r1, r3
 8005a54:	d1f4      	bne.n	8005a40 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8005a56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8005a5a:	4bf0      	ldr	r3, [pc, #960]	; (8005e1c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005a60:	240c      	movs	r4, #12
 8005a62:	805c      	strh	r4, [r3, #2]
 8005a64:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8005a68:	f8a3 e004 	strh.w	lr, [r3, #4]
 8005a6c:	2224      	movs	r2, #36	; 0x24
 8005a6e:	80da      	strh	r2, [r3, #6]
 8005a70:	811a      	strh	r2, [r3, #8]
 8005a72:	f04f 0c06 	mov.w	ip, #6
 8005a76:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8005a7a:	2502      	movs	r5, #2
 8005a7c:	731d      	strb	r5, [r3, #12]
 8005a7e:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8005a82:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8005a86:	f8a3 e010 	strh.w	lr, [r3, #16]
 8005a8a:	825a      	strh	r2, [r3, #18]
 8005a8c:	829a      	strh	r2, [r3, #20]
 8005a8e:	f8a3 c016 	strh.w	ip, [r3, #22]
 8005a92:	f04f 0503 	mov.w	r5, #3
 8005a96:	761d      	strb	r5, [r3, #24]
 8005a98:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005a9c:	835e      	strh	r6, [r3, #26]
 8005a9e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005aa2:	83da      	strh	r2, [r3, #30]
 8005aa4:	841a      	strh	r2, [r3, #32]
 8005aa6:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8005aaa:	f04f 0504 	mov.w	r5, #4
 8005aae:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8005ab2:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8005ab6:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8005aba:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8005abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ac0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005ac2:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8005ac6:	f04f 0505 	mov.w	r5, #5
 8005aca:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8005ace:	27b4      	movs	r7, #180	; 0xb4
 8005ad0:	865f      	strh	r7, [r3, #50]	; 0x32
 8005ad2:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8005ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ad8:	871a      	strh	r2, [r3, #56]	; 0x38
 8005ada:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8005ade:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8005ae2:	f04f 05de 	mov.w	r5, #222	; 0xde
 8005ae6:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8005ae8:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8005aec:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005af4:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8005af8:	f04f 0907 	mov.w	r9, #7
 8005afc:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8005b00:	f44f 7984 	mov.w	r9, #264	; 0x108
 8005b04:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8005b08:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8005b0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005b10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005b14:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8005b18:	f04f 0b08 	mov.w	fp, #8
 8005b1c:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8005b20:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8005b24:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8005b28:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8005b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005b30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b34:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8005b38:	2509      	movs	r5, #9
 8005b3a:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8005b3e:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8005b42:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8005b46:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8005b4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005b52:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8005b56:	250a      	movs	r5, #10
 8005b58:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8005b5c:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8005b60:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8005b64:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8005b68:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005b6c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005b70:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8005b74:	f04f 090b 	mov.w	r9, #11
 8005b78:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8005b7c:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8005b80:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8005b84:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8005b88:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005b8c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005b90:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8005b94:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8005b98:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8005b9c:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8005ba0:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8005ba4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005ba8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005bac:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8005bb0:	f04f 060d 	mov.w	r6, #13
 8005bb4:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8005bb8:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8005bbc:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8005bc0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005bc4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005bc8:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8005bcc:	f04f 0a0e 	mov.w	sl, #14
 8005bd0:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8005bd4:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005bd8:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8005bdc:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8005be0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005be4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005be8:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8005bec:	f04f 0a0f 	mov.w	sl, #15
 8005bf0:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8005bf4:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8005bf8:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8005bfc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005c00:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005c04:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8005c08:	f04f 0a10 	mov.w	sl, #16
 8005c0c:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8005c10:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8005c14:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8005c18:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005c1c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005c20:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8005c24:	f04f 0a11 	mov.w	sl, #17
 8005c28:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8005c2c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8005c30:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8005c34:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8005c38:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005c3c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005c40:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8005c44:	f04f 0a12 	mov.w	sl, #18
 8005c48:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8005c4c:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8005c50:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8005c54:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8005c58:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8005c5c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8005c60:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8005c64:	f04f 0a13 	mov.w	sl, #19
 8005c68:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8005c6c:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8005c70:	4656      	mov	r6, sl
 8005c72:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8005c76:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8005c7a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8005c7e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8005c82:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8005c86:	f04f 0a14 	mov.w	sl, #20
 8005c8a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8005c8e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8005c92:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8005c96:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8005c9a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8005c9e:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8005ca2:	f04f 0a15 	mov.w	sl, #21
 8005ca6:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8005caa:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8005cae:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8005cb2:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8005cb6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8005cba:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8005cbe:	f04f 0a16 	mov.w	sl, #22
 8005cc2:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8005cc6:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8005cca:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8005cce:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8005cd2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8005cd6:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8005cda:	f04f 0e17 	mov.w	lr, #23
 8005cde:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8005ce2:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8005ce6:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8005cea:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8005cee:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8005cf2:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8005cf6:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8005cfa:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8005cfe:	f04f 0918 	mov.w	r9, #24
 8005d02:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8005d06:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8005d0a:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8005d0e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8005d12:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8005d16:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8005d1a:	f04f 0819 	mov.w	r8, #25
 8005d1e:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8005d22:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8005d26:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8005d2a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8005d2e:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8005d32:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8005d36:	271a      	movs	r7, #26
 8005d38:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8005d3c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8005d40:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8005d44:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8005d48:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8005d4c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8005d50:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8005d54:	271b      	movs	r7, #27
 8005d56:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8005d5a:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8005d5e:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8005d62:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8005d66:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8005d6a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8005d6e:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8005d72:	271c      	movs	r7, #28
 8005d74:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8005d78:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8005d7c:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8005d80:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8005d84:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8005d88:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8005d8c:	271d      	movs	r7, #29
 8005d8e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8005d92:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8005d96:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8005d9a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8005d9e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8005da2:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8005da6:	271e      	movs	r7, #30
 8005da8:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8005dac:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005db0:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8005db4:	26e2      	movs	r6, #226	; 0xe2
 8005db6:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8005dba:	f44f 7790 	mov.w	r7, #288	; 0x120
 8005dbe:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8005dc2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8005dc6:	f04f 0708 	mov.w	r7, #8
 8005dca:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8005dce:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8005dd0:	801c      	strh	r4, [r3, #0]
 8005dd2:	f8a3 e002 	strh.w	lr, [r3, #2]
 8005dd6:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8005dda:	f8a3 c004 	strh.w	ip, [r3, #4]
 8005dde:	80da      	strh	r2, [r3, #6]
};
 8005de0:	2700      	movs	r7, #0
 8005de2:	609f      	str	r7, [r3, #8]
 8005de4:	f04f 0804 	mov.w	r8, #4
 8005de8:	f8a3 800c 	strh.w	r8, [r3, #12]
 8005dec:	821d      	strh	r5, [r3, #16]
 8005dee:	f8a3 e012 	strh.w	lr, [r3, #18]
 8005df2:	f8a3 c014 	strh.w	ip, [r3, #20]
 8005df6:	82da      	strh	r2, [r3, #22]
 8005df8:	619f      	str	r7, [r3, #24]
 8005dfa:	f04f 0e03 	mov.w	lr, #3
 8005dfe:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005e02:	841c      	strh	r4, [r3, #32]
 8005e04:	845e      	strh	r6, [r3, #34]	; 0x22
 8005e06:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8005e0a:	84da      	strh	r2, [r3, #38]	; 0x26
 8005e0c:	629f      	str	r7, [r3, #40]	; 0x28
 8005e0e:	f04f 0407 	mov.w	r4, #7
 8005e12:	859c      	strh	r4, [r3, #44]	; 0x2c
 8005e14:	861d      	strh	r5, [r3, #48]	; 0x30
 8005e16:	865e      	strh	r6, [r3, #50]	; 0x32
 8005e18:	e004      	b.n	8005e24 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8005e1a:	bf00      	nop
 8005e1c:	24002d1c 	.word	0x24002d1c
 8005e20:	24002c8c 	.word	0x24002c8c
 8005e24:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8005e28:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e2a:	639f      	str	r7, [r3, #56]	; 0x38
 8005e2c:	f04f 0205 	mov.w	r2, #5
 8005e30:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005e32:	4604      	mov	r4, r0
 8005e34:	3340      	adds	r3, #64	; 0x40
 8005e36:	2c00      	cmp	r4, #0
 8005e38:	db0b      	blt.n	8005e52 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	609a      	str	r2, [r3, #8]
 8005e42:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8005e44:	801a      	strh	r2, [r3, #0]
 8005e46:	805a      	strh	r2, [r3, #2]
 8005e48:	809a      	strh	r2, [r3, #4]
 8005e4a:	80da      	strh	r2, [r3, #6]
 8005e4c:	3310      	adds	r3, #16
 8005e4e:	3c01      	subs	r4, #1
 8005e50:	e7f1      	b.n	8005e36 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005e52:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005e54:	2205      	movs	r2, #5
 8005e56:	825a      	strh	r2, [r3, #18]
 8005e58:	222d      	movs	r2, #45	; 0x2d
 8005e5a:	829a      	strh	r2, [r3, #20]
 8005e5c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005e60:	82da      	strh	r2, [r3, #22]
 8005e62:	2246      	movs	r2, #70	; 0x46
 8005e64:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8005e66:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005e68:	61da      	str	r2, [r3, #28]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	841a      	strh	r2, [r3, #32]
        : color(col)
 8005e6e:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24
 8005e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e78:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8005e7a:	b918      	cbnz	r0, 8005e84 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e80:	4299      	cmp	r1, r3
 8005e82:	d001      	beq.n	8005e88 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8005e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8005e88:	4b03      	ldr	r3, [pc, #12]	; (8005e98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005e8a:	4a04      	ldr	r2, [pc, #16]	; (8005e9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005e8c:	61da      	str	r2, [r3, #28]
 8005e8e:	e7f9      	b.n	8005e84 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005e90:	4b01      	ldr	r3, [pc, #4]	; (8005e98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005e92:	4a02      	ldr	r2, [pc, #8]	; (8005e9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005e94:	61da      	str	r2, [r3, #28]
 8005e96:	4770      	bx	lr
 8005e98:	24002cec 	.word	0x24002cec
 8005e9c:	080221f0 	.word	0x080221f0

08005ea0 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt>:
    virtual void execute(T1 t1)
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8005ea4:	6844      	ldr	r4, [r0, #4]
 8005ea6:	68c2      	ldr	r2, [r0, #12]
 8005ea8:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005eac:	f012 0f01 	tst.w	r2, #1
 8005eb0:	d102      	bne.n	8005eb8 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x18>
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4798      	blx	r3
    }
 8005eb6:	bd10      	pop	{r4, pc}
 8005eb8:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8005ebc:	f854 200c 	ldr.w	r2, [r4, ip]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	58d3      	ldr	r3, [r2, r3]
 8005ec4:	e7f6      	b.n	8005eb4 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x14>

08005ec6 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005ec6:	6843      	ldr	r3, [r0, #4]
 8005ec8:	b14b      	cbz	r3, 8005ede <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x18>
 8005eca:	6883      	ldr	r3, [r0, #8]
 8005ecc:	b10b      	cbz	r3, 8005ed2 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0xc>
 8005ece:	2001      	movs	r0, #1
 8005ed0:	4770      	bx	lr
 8005ed2:	68c3      	ldr	r3, [r0, #12]
 8005ed4:	f013 0f01 	tst.w	r3, #1
 8005ed8:	d003      	beq.n	8005ee2 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x1c>
 8005eda:	2001      	movs	r0, #1
 8005edc:	4770      	bx	lr
 8005ede:	2000      	movs	r0, #0
 8005ee0:	4770      	bx	lr
 8005ee2:	2000      	movs	r0, #0
    }
 8005ee4:	4770      	bx	lr
	...

08005ee8 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	4604      	mov	r4, r0
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x18>)
 8005eee:	6003      	str	r3, [r0, #0]
    }
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x1c>)
 8005ef2:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005ef4:	2110      	movs	r1, #16
 8005ef6:	f01a fafa 	bl	80204ee <_ZdlPvj>
 8005efa:	4620      	mov	r0, r4
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	bf00      	nop
 8005f00:	0802326c 	.word	0x0802326c
 8005f04:	08023254 	.word	0x08023254

08005f08 <_ZN14mainScreenView11setupScreenEv>:
{
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4604      	mov	r4, r0
    mainScreenViewBase::setupScreen();
 8005f0c:	f7fe fb68 	bl	80045e0 <_ZN18mainScreenViewBase11setupScreenEv>
    wifiKeyboard.setPosition(0, 0, 480, 272);
 8005f10:	f104 0598 	add.w	r5, r4, #152	; 0x98
        setX(x);
 8005f14:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	4798      	blx	r3
        setY(y);
 8005f20:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	2100      	movs	r1, #0
 8005f28:	4628      	mov	r0, r5
 8005f2a:	4798      	blx	r3
        setWidth(width);
 8005f2c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005f36:	4628      	mov	r0, r5
 8005f38:	4798      	blx	r3
        setHeight(height);
 8005f3a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005f44:	4628      	mov	r0, r5
 8005f46:	4798      	blx	r3
    wifiKeyboard.setKeyboardDoneReturnPressedAction(keyboardDonePressedCallback);
 8005f48:	f504 7133 	add.w	r1, r4, #716	; 0x2cc
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f7ff fa53 	bl	80053f8 <_ZN14CustomKeyboard34setKeyboardDoneReturnPressedActionERN8touchgfx15GenericCallbackIA_tvvEE>
        visible = vis;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 8005f58:	4629      	mov	r1, r5
 8005f5a:	1d20      	adds	r0, r4, #4
 8005f5c:	f00b fe00 	bl	8011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005f60:	bd38      	pop	{r3, r4, r5, pc}

08005f62 <_ZN14mainScreenView19keyboardDonePressedEPt>:
{
 8005f62:	b538      	push	{r3, r4, r5, lr}
 8005f64:	4604      	mov	r4, r0
    wifiKeyboard.clearBuffer();
 8005f66:	f100 0598 	add.w	r5, r0, #152	; 0x98
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f7ff fa47 	bl	80053fe <_ZN14CustomKeyboard11clearBufferEv>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    wifiKeyboard.invalidate();
 8005f76:	4628      	mov	r0, r5
 8005f78:	f010 fcc4 	bl	8016904 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8005f7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005f80 <_ZN14mainScreenViewD0Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	4604      	mov	r4, r0
 8005f84:	4b34      	ldr	r3, [pc, #208]	; (8006058 <_ZN14mainScreenViewD0Ev+0xd8>)
 8005f86:	6003      	str	r3, [r0, #0]
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <_ZN14mainScreenViewD0Ev+0xdc>)
 8005f8a:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
    }
 8005f8e:	4b34      	ldr	r3, [pc, #208]	; (8006060 <_ZN14mainScreenViewD0Ev+0xe0>)
 8005f90:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
 8005f94:	f100 0398 	add.w	r3, r0, #152	; 0x98
 8005f98:	4a32      	ldr	r2, [pc, #200]	; (8006064 <_ZN14mainScreenViewD0Ev+0xe4>)
 8005f9a:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005f9e:	4a32      	ldr	r2, [pc, #200]	; (8006068 <_ZN14mainScreenViewD0Ev+0xe8>)
 8005fa0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }
 8005fa4:	4a31      	ldr	r2, [pc, #196]	; (800606c <_ZN14mainScreenViewD0Ev+0xec>)
 8005fa6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005faa:	4931      	ldr	r1, [pc, #196]	; (8006070 <_ZN14mainScreenViewD0Ev+0xf0>)
 8005fac:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
    {
 8005fb0:	4a30      	ldr	r2, [pc, #192]	; (8006074 <_ZN14mainScreenViewD0Ev+0xf4>)
 8005fb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005fb6:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
    {
 8005fba:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005fbe:	f8c3 11ec 	str.w	r1, [r3, #492]	; 0x1ec
    {
 8005fc2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005fc6:	f8c3 11dc 	str.w	r1, [r3, #476]	; 0x1dc
    {
 8005fca:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
class TextArea : public Widget
 8005fce:	4f2a      	ldr	r7, [pc, #168]	; (8006078 <_ZN14mainScreenViewD0Ev+0xf8>)
 8005fd0:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8005fd4:	4d29      	ldr	r5, [pc, #164]	; (800607c <_ZN14mainScreenViewD0Ev+0xfc>)
 8005fd6:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 8005fda:	4929      	ldr	r1, [pc, #164]	; (8006080 <_ZN14mainScreenViewD0Ev+0x100>)
 8005fdc:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
    {
 8005fe0:	4a28      	ldr	r2, [pc, #160]	; (8006084 <_ZN14mainScreenViewD0Ev+0x104>)
 8005fe2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
class Keyboard : public Container
 8005fe6:	4e28      	ldr	r6, [pc, #160]	; (8006088 <_ZN14mainScreenViewD0Ev+0x108>)
 8005fe8:	62de      	str	r6, [r3, #44]	; 0x2c
 8005fea:	4e28      	ldr	r6, [pc, #160]	; (800608c <_ZN14mainScreenViewD0Ev+0x10c>)
 8005fec:	f8c3 60e4 	str.w	r6, [r3, #228]	; 0xe4
 8005ff0:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8005ff4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8005ff8:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80060a4 <_ZN14mainScreenViewD0Ev+0x124>
 8005ffc:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8006000:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80060a8 <_ZN14mainScreenViewD0Ev+0x128>
 8006004:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8006008:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 800600c:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
 8006010:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8006014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006018:	665e      	str	r6, [r3, #100]	; 0x64
 800601a:	6659      	str	r1, [r3, #100]	; 0x64
 800601c:	665a      	str	r2, [r3, #100]	; 0x64
class Container : public Drawable
 800601e:	4d1c      	ldr	r5, [pc, #112]	; (8006090 <_ZN14mainScreenViewD0Ev+0x110>)
 8006020:	62dd      	str	r5, [r3, #44]	; 0x2c
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c
 8006024:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
 8006028:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
 800602c:	4b19      	ldr	r3, [pc, #100]	; (8006094 <_ZN14mainScreenViewD0Ev+0x114>)
 800602e:	6003      	str	r3, [r0, #0]
 8006030:	66c6      	str	r6, [r0, #108]	; 0x6c
 8006032:	66c1      	str	r1, [r0, #108]	; 0x6c
 8006034:	66c2      	str	r2, [r0, #108]	; 0x6c
class Box : public Widget
 8006036:	4b18      	ldr	r3, [pc, #96]	; (8006098 <_ZN14mainScreenViewD0Ev+0x118>)
 8006038:	6403      	str	r3, [r0, #64]	; 0x40
 800603a:	6401      	str	r1, [r0, #64]	; 0x40
 800603c:	6402      	str	r2, [r0, #64]	; 0x40
class View : public Screen
 800603e:	4b17      	ldr	r3, [pc, #92]	; (800609c <_ZN14mainScreenViewD0Ev+0x11c>)
 8006040:	6003      	str	r3, [r0, #0]
    {
 8006042:	4b17      	ldr	r3, [pc, #92]	; (80060a0 <_ZN14mainScreenViewD0Ev+0x120>)
 8006044:	6003      	str	r3, [r0, #0]
 8006046:	6045      	str	r5, [r0, #4]
 8006048:	6042      	str	r2, [r0, #4]
 800604a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800604e:	f01a fa4e 	bl	80204ee <_ZdlPvj>
 8006052:	4620      	mov	r0, r4
 8006054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006056:	bf00      	nop
 8006058:	08023284 	.word	0x08023284
 800605c:	0802326c 	.word	0x0802326c
 8006060:	08023254 	.word	0x08023254
 8006064:	08022f74 	.word	0x08022f74
 8006068:	08022f5c 	.word	0x08022f5c
 800606c:	08022f2c 	.word	0x08022f2c
 8006070:	08022f44 	.word	0x08022f44
 8006074:	0802224c 	.word	0x0802224c
 8006078:	080238a4 	.word	0x080238a4
 800607c:	080221f0 	.word	0x080221f0
 8006080:	08022cc4 	.word	0x08022cc4
 8006084:	08023bcc 	.word	0x08023bcc
 8006088:	08023a98 	.word	0x08023a98
 800608c:	08023a2c 	.word	0x08023a2c
 8006090:	08023694 	.word	0x08023694
 8006094:	08022d60 	.word	0x08022d60
 8006098:	08023934 	.word	0x08023934
 800609c:	08022d2c 	.word	0x08022d2c
 80060a0:	08023ca0 	.word	0x08023ca0
 80060a4:	08022e9c 	.word	0x08022e9c
 80060a8:	0802399c 	.word	0x0802399c

080060ac <_ZN14mainScreenViewD1Ev>:
 80060ac:	b4f0      	push	{r4, r5, r6, r7}
 80060ae:	4b32      	ldr	r3, [pc, #200]	; (8006178 <_ZN14mainScreenViewD1Ev+0xcc>)
 80060b0:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80060b2:	4b32      	ldr	r3, [pc, #200]	; (800617c <_ZN14mainScreenViewD1Ev+0xd0>)
 80060b4:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
    }
 80060b8:	4b31      	ldr	r3, [pc, #196]	; (8006180 <_ZN14mainScreenViewD1Ev+0xd4>)
 80060ba:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
 80060be:	f100 0398 	add.w	r3, r0, #152	; 0x98
 80060c2:	4930      	ldr	r1, [pc, #192]	; (8006184 <_ZN14mainScreenViewD1Ev+0xd8>)
 80060c4:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80060c8:	492f      	ldr	r1, [pc, #188]	; (8006188 <_ZN14mainScreenViewD1Ev+0xdc>)
 80060ca:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    }
 80060ce:	492f      	ldr	r1, [pc, #188]	; (800618c <_ZN14mainScreenViewD1Ev+0xe0>)
 80060d0:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80060d4:	4c2e      	ldr	r4, [pc, #184]	; (8006190 <_ZN14mainScreenViewD1Ev+0xe4>)
 80060d6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    {
 80060da:	492e      	ldr	r1, [pc, #184]	; (8006194 <_ZN14mainScreenViewD1Ev+0xe8>)
 80060dc:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80060e0:	f8c3 41fc 	str.w	r4, [r3, #508]	; 0x1fc
    {
 80060e4:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80060e8:	f8c3 41ec 	str.w	r4, [r3, #492]	; 0x1ec
    {
 80060ec:	f8c3 11ec 	str.w	r1, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80060f0:	f8c3 41dc 	str.w	r4, [r3, #476]	; 0x1dc
    {
 80060f4:	f8c3 11dc 	str.w	r1, [r3, #476]	; 0x1dc
 80060f8:	4f27      	ldr	r7, [pc, #156]	; (8006198 <_ZN14mainScreenViewD1Ev+0xec>)
 80060fa:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 80060fe:	4d27      	ldr	r5, [pc, #156]	; (800619c <_ZN14mainScreenViewD1Ev+0xf0>)
 8006100:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 8006104:	4c26      	ldr	r4, [pc, #152]	; (80061a0 <_ZN14mainScreenViewD1Ev+0xf4>)
 8006106:	f8c3 4194 	str.w	r4, [r3, #404]	; 0x194
 800610a:	4926      	ldr	r1, [pc, #152]	; (80061a4 <_ZN14mainScreenViewD1Ev+0xf8>)
 800610c:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 8006110:	4e25      	ldr	r6, [pc, #148]	; (80061a8 <_ZN14mainScreenViewD1Ev+0xfc>)
 8006112:	62de      	str	r6, [r3, #44]	; 0x2c
 8006114:	4e25      	ldr	r6, [pc, #148]	; (80061ac <_ZN14mainScreenViewD1Ev+0x100>)
 8006116:	f8c3 60e4 	str.w	r6, [r3, #228]	; 0xe4
 800611a:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 800611e:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8006122:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80061c4 <_ZN14mainScreenViewD1Ev+0x118>
 8006126:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 800612a:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80061c8 <_ZN14mainScreenViewD1Ev+0x11c>
 800612e:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8006132:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 8006136:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
 800613a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 800613e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8006142:	665e      	str	r6, [r3, #100]	; 0x64
 8006144:	665c      	str	r4, [r3, #100]	; 0x64
 8006146:	6659      	str	r1, [r3, #100]	; 0x64
 8006148:	4d19      	ldr	r5, [pc, #100]	; (80061b0 <_ZN14mainScreenViewD1Ev+0x104>)
 800614a:	62dd      	str	r5, [r3, #44]	; 0x2c
 800614c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800614e:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
 8006152:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 8006156:	4b17      	ldr	r3, [pc, #92]	; (80061b4 <_ZN14mainScreenViewD1Ev+0x108>)
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	66c6      	str	r6, [r0, #108]	; 0x6c
 800615c:	66c4      	str	r4, [r0, #108]	; 0x6c
 800615e:	66c1      	str	r1, [r0, #108]	; 0x6c
 8006160:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <_ZN14mainScreenViewD1Ev+0x10c>)
 8006162:	6403      	str	r3, [r0, #64]	; 0x40
 8006164:	6404      	str	r4, [r0, #64]	; 0x40
 8006166:	6401      	str	r1, [r0, #64]	; 0x40
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <_ZN14mainScreenViewD1Ev+0x110>)
 800616a:	6003      	str	r3, [r0, #0]
 800616c:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <_ZN14mainScreenViewD1Ev+0x114>)
 800616e:	6003      	str	r3, [r0, #0]
 8006170:	6045      	str	r5, [r0, #4]
 8006172:	6041      	str	r1, [r0, #4]
 8006174:	bcf0      	pop	{r4, r5, r6, r7}
 8006176:	4770      	bx	lr
 8006178:	08023284 	.word	0x08023284
 800617c:	0802326c 	.word	0x0802326c
 8006180:	08023254 	.word	0x08023254
 8006184:	08022f74 	.word	0x08022f74
 8006188:	08022f5c 	.word	0x08022f5c
 800618c:	08022f2c 	.word	0x08022f2c
 8006190:	08022f44 	.word	0x08022f44
 8006194:	0802224c 	.word	0x0802224c
 8006198:	080238a4 	.word	0x080238a4
 800619c:	080221f0 	.word	0x080221f0
 80061a0:	08022cc4 	.word	0x08022cc4
 80061a4:	08023bcc 	.word	0x08023bcc
 80061a8:	08023a98 	.word	0x08023a98
 80061ac:	08023a2c 	.word	0x08023a2c
 80061b0:	08023694 	.word	0x08023694
 80061b4:	08022d60 	.word	0x08022d60
 80061b8:	08023934 	.word	0x08023934
 80061bc:	08022d2c 	.word	0x08022d2c
 80061c0:	08023ca0 	.word	0x08023ca0
 80061c4:	08022e9c 	.word	0x08022e9c
 80061c8:	0802399c 	.word	0x0802399c

080061cc <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView() :
 80061cc:	b510      	push	{r4, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	4604      	mov	r4, r0
    keyboardDonePressedCallback(this, &mainScreenView::keyboardDonePressed)
 80061d2:	f7fe fa49 	bl	8004668 <_ZN18mainScreenViewBaseC1Ev>
 80061d6:	4620      	mov	r0, r4
 80061d8:	4b0e      	ldr	r3, [pc, #56]	; (8006214 <_ZN14mainScreenViewC1Ev+0x48>)
 80061da:	f840 3b98 	str.w	r3, [r0], #152
 80061de:	f7fe ffb9 	bl	8005154 <_ZN14CustomKeyboardC1Ev>
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <_ZN14mainScreenViewC1Ev+0x4c>)
 80061e4:	9302      	str	r3, [sp, #8]
 80061e6:	2300      	movs	r3, #0
 80061e8:	9303      	str	r3, [sp, #12]
 80061ea:	466b      	mov	r3, sp
 80061ec:	aa04      	add	r2, sp, #16
 80061ee:	e912 0003 	ldmdb	r2, {r0, r1}
 80061f2:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <_ZN14mainScreenViewC1Ev+0x50>)
 80061f8:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
        : pobject(pObject), pmemfun(pmemfun_1)
 80061fc:	4a08      	ldr	r2, [pc, #32]	; (8006220 <_ZN14mainScreenViewC1Ev+0x54>)
 80061fe:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 8006202:	f8c4 42d0 	str.w	r4, [r4, #720]	; 0x2d0
 8006206:	f504 7235 	add.w	r2, r4, #724	; 0x2d4
 800620a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800620e:	4620      	mov	r0, r4
 8006210:	b004      	add	sp, #16
 8006212:	bd10      	pop	{r4, pc}
 8006214:	08023284 	.word	0x08023284
 8006218:	08005f63 	.word	0x08005f63
 800621c:	08023254 	.word	0x08023254
 8006220:	0802326c 	.word	0x0802326c

08006224 <_GLOBAL__sub_I__ZN14mainScreenViewC2Ev>:
}
 8006224:	b508      	push	{r3, lr}
 8006226:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800622a:	2001      	movs	r0, #1
 800622c:	f7ff fc06 	bl	8005a3c <_Z41__static_initialization_and_destruction_0ii>
 8006230:	bd08      	pop	{r3, pc}

08006232 <_GLOBAL__sub_D__ZN14mainScreenViewC2Ev>:
 8006232:	b508      	push	{r3, lr}
 8006234:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006238:	2000      	movs	r0, #0
 800623a:	f7ff fbff 	bl	8005a3c <_Z41__static_initialization_and_destruction_0ii>
 800623e:	bd08      	pop	{r3, pc}

08006240 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8006240:	4603      	mov	r3, r0
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8006242:	3830      	subs	r0, #48	; 0x30
 8006244:	b2c0      	uxtb	r0, r0
 8006246:	2809      	cmp	r0, #9
 8006248:	d90a      	bls.n	8006260 <Hex2Num+0x20>
        return a - '0';
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800624a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	2a05      	cmp	r2, #5
 8006252:	d906      	bls.n	8006262 <Hex2Num+0x22>
        return (a - 'a') + 10;
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8006254:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	2a05      	cmp	r2, #5
 800625c:	d904      	bls.n	8006268 <Hex2Num+0x28>
        return (a - 'A') + 10;
    }

    return 0;
 800625e:	2000      	movs	r0, #0
}
 8006260:	4770      	bx	lr
        return (a - 'a') + 10;
 8006262:	3b57      	subs	r3, #87	; 0x57
 8006264:	b2d8      	uxtb	r0, r3
 8006266:	4770      	bx	lr
        return (a - 'A') + 10;
 8006268:	3b37      	subs	r3, #55	; 0x37
 800626a:	b2d8      	uxtb	r0, r3
 800626c:	4770      	bx	lr

0800626e <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800626e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006270:	4605      	mov	r5, r0
 8006272:	460e      	mov	r6, r1
    uint32_t sum = 0;
    uint8_t i = 0;
 8006274:	2400      	movs	r4, #0
    uint32_t sum = 0;
 8006276:	4627      	mov	r7, r4

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8006278:	e006      	b.n	8006288 <ParseHexNumber+0x1a>
        sum <<= 4;
 800627a:	013f      	lsls	r7, r7, #4
        sum += Hex2Num(*ptr);
 800627c:	f7ff ffe0 	bl	8006240 <Hex2Num>
 8006280:	4407      	add	r7, r0
        ptr++;
 8006282:	3501      	adds	r5, #1
        i++;
 8006284:	3401      	adds	r4, #1
 8006286:	b2e4      	uxtb	r4, r4
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8006288:	7828      	ldrb	r0, [r5, #0]
 800628a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b05      	cmp	r3, #5
 8006298:	bf88      	it	hi
 800629a:	2a09      	cmphi	r2, #9
 800629c:	d9ed      	bls.n	800627a <ParseHexNumber+0xc>
 800629e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b05      	cmp	r3, #5
 80062a6:	d9e8      	bls.n	800627a <ParseHexNumber+0xc>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 80062a8:	b106      	cbz	r6, 80062ac <ParseHexNumber+0x3e>
        *cnt = i;
 80062aa:	7034      	strb	r4, [r6, #0]
    }
    return sum;                                        		/* Return number */
}
 80062ac:	4638      	mov	r0, r7
 80062ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062b0 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 80062b0:	b510      	push	{r4, lr}
 80062b2:	4686      	mov	lr, r0
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 80062b4:	7803      	ldrb	r3, [r0, #0]
 80062b6:	2b2d      	cmp	r3, #45	; 0x2d
 80062b8:	d003      	beq.n	80062c2 <ParseNumber+0x12>
    uint8_t minus = 0, i = 0;
 80062ba:	2400      	movs	r4, #0
 80062bc:	46a4      	mov	ip, r4
 80062be:	2000      	movs	r0, #0
 80062c0:	e00e      	b.n	80062e0 <ParseNumber+0x30>
        minus = 1;
        ptr++;
 80062c2:	f100 0e01 	add.w	lr, r0, #1
        minus = 1;
 80062c6:	2401      	movs	r4, #1
 80062c8:	e7f8      	b.n	80062bc <ParseNumber+0xc>
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 80062ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80062ce:	3b30      	subs	r3, #48	; 0x30
 80062d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
        ptr++;
 80062d4:	f10e 0e01 	add.w	lr, lr, #1
        i++;
 80062d8:	f10c 0c01 	add.w	ip, ip, #1
 80062dc:	fa5f fc8c 	uxtb.w	ip, ip
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80062e0:	f89e 3000 	ldrb.w	r3, [lr]
 80062e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	2a09      	cmp	r2, #9
 80062ec:	d9ed      	bls.n	80062ca <ParseNumber+0x1a>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80062ee:	b109      	cbz	r1, 80062f4 <ParseNumber+0x44>
        *cnt = i;
 80062f0:	f881 c000 	strb.w	ip, [r1]
    }
    if (minus) {                                    		/* Minus detected */
 80062f4:	b904      	cbnz	r4, 80062f8 <ParseNumber+0x48>
        return 0 - sum;
    }
    return sum;                                       		/* Return number */
}
 80062f6:	bd10      	pop	{r4, pc}
        return 0 - sum;
 80062f8:	4240      	negs	r0, r0
 80062fa:	e7fc      	b.n	80062f6 <ParseNumber+0x46>

080062fc <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	4604      	mov	r4, r0
 8006302:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8006304:	2500      	movs	r5, #0

  while(* ptr) {
 8006306:	e002      	b.n	800630e <ParseMAC+0x12>
    hexcnt = 1;
    if(*ptr != ':')
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 8006308:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800630c:	441c      	add	r4, r3
  while(* ptr) {
 800630e:	7823      	ldrb	r3, [r4, #0]
 8006310:	b173      	cbz	r3, 8006330 <ParseMAC+0x34>
    hexcnt = 1;
 8006312:	2301      	movs	r3, #1
 8006314:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != ':')
 8006318:	7823      	ldrb	r3, [r4, #0]
 800631a:	2b3a      	cmp	r3, #58	; 0x3a
 800631c:	d0f4      	beq.n	8006308 <ParseMAC+0xc>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800631e:	f10d 0107 	add.w	r1, sp, #7
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff ffa3 	bl	800626e <ParseHexNumber>
 8006328:	1c6b      	adds	r3, r5, #1
 800632a:	5570      	strb	r0, [r6, r5]
 800632c:	b2dd      	uxtb	r5, r3
 800632e:	e7eb      	b.n	8006308 <ParseMAC+0xc>
  }
}
 8006330:	b002      	add	sp, #8
 8006332:	bd70      	pop	{r4, r5, r6, pc}

08006334 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	4604      	mov	r4, r0
 800633a:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 800633c:	2500      	movs	r5, #0

  while(* ptr) {
 800633e:	e002      	b.n	8006346 <ParseIP+0x12>
    hexcnt = 1;
    if(*ptr != '.')
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 8006340:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006344:	441c      	add	r4, r3
  while(* ptr) {
 8006346:	7823      	ldrb	r3, [r4, #0]
 8006348:	b173      	cbz	r3, 8006368 <ParseIP+0x34>
    hexcnt = 1;
 800634a:	2301      	movs	r3, #1
 800634c:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != '.')
 8006350:	7823      	ldrb	r3, [r4, #0]
 8006352:	2b2e      	cmp	r3, #46	; 0x2e
 8006354:	d0f4      	beq.n	8006340 <ParseIP+0xc>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8006356:	f10d 0107 	add.w	r1, sp, #7
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff ffa8 	bl	80062b0 <ParseNumber>
 8006360:	1c6b      	adds	r3, r5, #1
 8006362:	5570      	strb	r0, [r6, r5]
 8006364:	b2dd      	uxtb	r5, r3
 8006366:	e7eb      	b.n	8006340 <ParseIP+0xc>
  }
}
 8006368:	b002      	add	sp, #8
 800636a:	bd70      	pop	{r4, r5, r6, pc}

0800636c <ArrayTo32bit>:
  }
}

static uint32_t ArrayTo32bit(uint8_t * buf)
{
	return ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3] << 0));
 800636c:	7802      	ldrb	r2, [r0, #0]
 800636e:	7843      	ldrb	r3, [r0, #1]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006376:	7882      	ldrb	r2, [r0, #2]
 8006378:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800637c:	78c0      	ldrb	r0, [r0, #3]
}
 800637e:	4318      	orrs	r0, r3
 8006380:	4770      	bx	lr

08006382 <AT_ParseIsConnected>:
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8006382:	7883      	ldrb	r3, [r0, #2]
 8006384:	2b31      	cmp	r3, #49	; 0x31
 8006386:	bf14      	ite	ne
 8006388:	2300      	movne	r3, #0
 800638a:	2301      	moveq	r3, #1
 800638c:	700b      	strb	r3, [r1, #0]
}
 800638e:	4770      	bx	lr

08006390 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	4604      	mov	r4, r0
 8006394:	460d      	mov	r5, r1
 8006396:	4616      	mov	r6, r2
  int ret = 0;
  int16_t recv_len = 0;

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8006398:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800639c:	4608      	mov	r0, r1
 800639e:	f7f9 ffb1 	bl	8000304 <strlen>
 80063a2:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80063a6:	b281      	uxth	r1, r0
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b8      	blx	r7

  if( ret > 0)
 80063ac:	2800      	cmp	r0, #0
 80063ae:	dd25      	ble.n	80063fc <AT_ExecuteCommand+0x6c>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80063b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063b4:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80063b8:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80063bc:	4630      	mov	r0, r6
 80063be:	4798      	blx	r3
 80063c0:	4604      	mov	r4, r0
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80063c2:	1e43      	subs	r3, r0, #1
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80063ca:	d212      	bcs.n	80063f2 <AT_ExecuteCommand+0x62>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 80063cc:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 80063d0:	d008      	beq.n	80063e4 <AT_ExecuteCommand+0x54>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
      }
      *(pdata + recv_len) = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	5533      	strb	r3, [r6, r4]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 80063d6:	490c      	ldr	r1, [pc, #48]	; (8006408 <AT_ExecuteCommand+0x78>)
 80063d8:	4630      	mov	r0, r6
 80063da:	f01a ff6b 	bl	80212b4 <strstr>
 80063de:	b118      	cbz	r0, 80063e8 <AT_ExecuteCommand+0x58>
      {
        return ES_WIFI_STATUS_OK;
 80063e0:	2000      	movs	r0, #0
 80063e2:	e00a      	b.n	80063fa <AT_ExecuteCommand+0x6a>
        recv_len--;
 80063e4:	b21c      	sxth	r4, r3
 80063e6:	e7f4      	b.n	80063d2 <AT_ExecuteCommand+0x42>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80063e8:	4908      	ldr	r1, [pc, #32]	; (800640c <AT_ExecuteCommand+0x7c>)
 80063ea:	4630      	mov	r0, r6
 80063ec:	f01a ff62 	bl	80212b4 <strstr>
 80063f0:	b930      	cbnz	r0, 8006400 <AT_ExecuteCommand+0x70>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80063f2:	f114 0f04 	cmn.w	r4, #4
 80063f6:	d005      	beq.n	8006404 <AT_ExecuteCommand+0x74>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80063f8:	2004      	movs	r0, #4
}
 80063fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ES_WIFI_STATUS_IO_ERROR;
 80063fc:	2004      	movs	r0, #4
 80063fe:	e7fc      	b.n	80063fa <AT_ExecuteCommand+0x6a>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8006400:	2005      	movs	r0, #5
 8006402:	e7fa      	b.n	80063fa <AT_ExecuteCommand+0x6a>
      return ES_WIFI_STATUS_MODULE_CRASH;
 8006404:	2006      	movs	r0, #6
 8006406:	e7f8      	b.n	80063fa <AT_ExecuteCommand+0x6a>
 8006408:	080232b0 	.word	0x080232b0
 800640c:	080232bc 	.word	0x080232bc

08006410 <ParseSecurity>:
{
 8006410:	b510      	push	{r4, lr}
 8006412:	4604      	mov	r4, r0
  if(strstr(ptr,"Open")) return ES_WIFI_SEC_OPEN;
 8006414:	4915      	ldr	r1, [pc, #84]	; (800646c <ParseSecurity+0x5c>)
 8006416:	f01a ff4d 	bl	80212b4 <strstr>
 800641a:	b108      	cbz	r0, 8006420 <ParseSecurity+0x10>
 800641c:	2000      	movs	r0, #0
}
 800641e:	bd10      	pop	{r4, pc}
  else if(strstr(ptr,"WEP")) return ES_WIFI_SEC_WEP;
 8006420:	4913      	ldr	r1, [pc, #76]	; (8006470 <ParseSecurity+0x60>)
 8006422:	4620      	mov	r0, r4
 8006424:	f01a ff46 	bl	80212b4 <strstr>
 8006428:	b108      	cbz	r0, 800642e <ParseSecurity+0x1e>
 800642a:	2001      	movs	r0, #1
 800642c:	e7f7      	b.n	800641e <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 800642e:	4911      	ldr	r1, [pc, #68]	; (8006474 <ParseSecurity+0x64>)
 8006430:	4620      	mov	r0, r4
 8006432:	f01a ff3f 	bl	80212b4 <strstr>
 8006436:	b980      	cbnz	r0, 800645a <ParseSecurity+0x4a>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 8006438:	490f      	ldr	r1, [pc, #60]	; (8006478 <ParseSecurity+0x68>)
 800643a:	4620      	mov	r0, r4
 800643c:	f01a ff3a 	bl	80212b4 <strstr>
 8006440:	b968      	cbnz	r0, 800645e <ParseSecurity+0x4e>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 8006442:	490e      	ldr	r1, [pc, #56]	; (800647c <ParseSecurity+0x6c>)
 8006444:	4620      	mov	r0, r4
 8006446:	f01a ff35 	bl	80212b4 <strstr>
 800644a:	b950      	cbnz	r0, 8006462 <ParseSecurity+0x52>
  else if(strstr(ptr,"WPA")) return ES_WIFI_SEC_WPA;
 800644c:	490c      	ldr	r1, [pc, #48]	; (8006480 <ParseSecurity+0x70>)
 800644e:	4620      	mov	r0, r4
 8006450:	f01a ff30 	bl	80212b4 <strstr>
 8006454:	b138      	cbz	r0, 8006466 <ParseSecurity+0x56>
 8006456:	2002      	movs	r0, #2
 8006458:	e7e1      	b.n	800641e <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 800645a:	2004      	movs	r0, #4
 800645c:	e7df      	b.n	800641e <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 800645e:	2005      	movs	r0, #5
 8006460:	e7dd      	b.n	800641e <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 8006462:	2003      	movs	r0, #3
 8006464:	e7db      	b.n	800641e <ParseSecurity+0xe>
  else return ES_WIFI_SEC_UNKNOWN;
 8006466:	20ff      	movs	r0, #255	; 0xff
 8006468:	e7d9      	b.n	800641e <ParseSecurity+0xe>
 800646a:	bf00      	nop
 800646c:	080232c4 	.word	0x080232c4
 8006470:	080232cc 	.word	0x080232cc
 8006474:	080232d0 	.word	0x080232d0
 8006478:	080232dc 	.word	0x080232dc
 800647c:	080232d4 	.word	0x080232d4
 8006480:	080232e8 	.word	0x080232e8

08006484 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8006484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006488:	4604      	mov	r4, r0
 800648a:	460d      	mov	r5, r1
 800648c:	4617      	mov	r7, r2
 800648e:	461e      	mov	r6, r3
  int16_t send_len = 0;
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 8006490:	4608      	mov	r0, r1
 8006492:	f7f9 ff37 	bl	8000304 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8006496:	f010 0f01 	tst.w	r0, #1
 800649a:	d138      	bne.n	800650e <AT_RequestSendData+0x8a>
 800649c:	fa1f f880 	uxth.w	r8, r0
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80064a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80064a4:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80064a8:	4641      	mov	r1, r8
 80064aa:	4628      	mov	r0, r5
 80064ac:	4798      	blx	r3
 80064ae:	b280      	uxth	r0, r0
  if (n == cmd_len)
 80064b0:	4580      	cmp	r8, r0
 80064b2:	d002      	beq.n	80064ba <AT_RequestSendData+0x36>
    else
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80064b4:	2004      	movs	r0, #4
}
 80064b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80064ba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80064be:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80064c2:	4631      	mov	r1, r6
 80064c4:	4638      	mov	r0, r7
 80064c6:	4798      	blx	r3
    if (send_len == len)
 80064c8:	42b0      	cmp	r0, r6
 80064ca:	d122      	bne.n	8006512 <AT_RequestSendData+0x8e>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80064cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064d0:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80064d4:	2100      	movs	r1, #0
 80064d6:	9806      	ldr	r0, [sp, #24]
 80064d8:	4798      	blx	r3
      if (recv_len > 0)
 80064da:	2800      	cmp	r0, #0
 80064dc:	dd10      	ble.n	8006500 <AT_RequestSendData+0x7c>
        *(pdata+recv_len) = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	9a06      	ldr	r2, [sp, #24]
 80064e2:	5413      	strb	r3, [r2, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80064e4:	490d      	ldr	r1, [pc, #52]	; (800651c <AT_RequestSendData+0x98>)
 80064e6:	4610      	mov	r0, r2
 80064e8:	f01a fee4 	bl	80212b4 <strstr>
 80064ec:	b108      	cbz	r0, 80064f2 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 80064ee:	2000      	movs	r0, #0
 80064f0:	e7e1      	b.n	80064b6 <AT_RequestSendData+0x32>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80064f2:	490b      	ldr	r1, [pc, #44]	; (8006520 <AT_RequestSendData+0x9c>)
 80064f4:	9806      	ldr	r0, [sp, #24]
 80064f6:	f01a fedd 	bl	80212b4 <strstr>
 80064fa:	b160      	cbz	r0, 8006516 <AT_RequestSendData+0x92>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80064fc:	2005      	movs	r0, #5
 80064fe:	e7da      	b.n	80064b6 <AT_RequestSendData+0x32>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8006500:	f110 0f04 	cmn.w	r0, #4
 8006504:	d001      	beq.n	800650a <AT_RequestSendData+0x86>
      return ES_WIFI_STATUS_ERROR;
 8006506:	2002      	movs	r0, #2
 8006508:	e7d5      	b.n	80064b6 <AT_RequestSendData+0x32>
        return ES_WIFI_STATUS_MODULE_CRASH;
 800650a:	2006      	movs	r0, #6
 800650c:	e7d3      	b.n	80064b6 <AT_RequestSendData+0x32>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800650e:	2002      	movs	r0, #2
 8006510:	e7d1      	b.n	80064b6 <AT_RequestSendData+0x32>
      return ES_WIFI_STATUS_ERROR;
 8006512:	2002      	movs	r0, #2
 8006514:	e7cf      	b.n	80064b6 <AT_RequestSendData+0x32>
          return ES_WIFI_STATUS_ERROR;
 8006516:	2002      	movs	r0, #2
 8006518:	e7cd      	b.n	80064b6 <AT_RequestSendData+0x32>
 800651a:	bf00      	nop
 800651c:	080232b0 	.word	0x080232b0
 8006520:	080232bc 	.word	0x080232bc

08006524 <AT_ParseFWRev>:
{
 8006524:	b530      	push	{r4, r5, lr}
 8006526:	b083      	sub	sp, #12
 8006528:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 1, ".",&saveptr);
 800652a:	aa01      	add	r2, sp, #4
 800652c:	490e      	ldr	r1, [pc, #56]	; (8006568 <AT_ParseFWRev+0x44>)
 800652e:	3001      	adds	r0, #1
 8006530:	f01a fefe 	bl	8021330 <strtok_r>
  uint8_t num = 0;
 8006534:	2400      	movs	r4, #0
  while ((ptr != NULL) && (num < 4)) {
 8006536:	e006      	b.n	8006546 <AT_ParseFWRev+0x22>
    num++;
 8006538:	3401      	adds	r4, #1
 800653a:	b2e4      	uxtb	r4, r4
    ptr = strtok_r(NULL, ".",&saveptr);
 800653c:	aa01      	add	r2, sp, #4
 800653e:	490a      	ldr	r1, [pc, #40]	; (8006568 <AT_ParseFWRev+0x44>)
 8006540:	2000      	movs	r0, #0
 8006542:	f01a fef5 	bl	8021330 <strtok_r>
  while ((ptr != NULL) && (num < 4)) {
 8006546:	1e03      	subs	r3, r0, #0
 8006548:	bf18      	it	ne
 800654a:	2301      	movne	r3, #1
 800654c:	2c03      	cmp	r4, #3
 800654e:	bf88      	it	hi
 8006550:	2300      	movhi	r3, #0
 8006552:	b133      	cbz	r3, 8006562 <AT_ParseFWRev+0x3e>
    switch (num) {
 8006554:	2c03      	cmp	r4, #3
 8006556:	d8ef      	bhi.n	8006538 <AT_ParseFWRev+0x14>
      ver[num] =  ParseNumber(ptr,0);
 8006558:	2100      	movs	r1, #0
 800655a:	f7ff fea9 	bl	80062b0 <ParseNumber>
 800655e:	5528      	strb	r0, [r5, r4]
      break;
 8006560:	e7ea      	b.n	8006538 <AT_ParseFWRev+0x14>
}
 8006562:	b003      	add	sp, #12
 8006564:	bd30      	pop	{r4, r5, pc}
 8006566:	bf00      	nop
 8006568:	080232ec 	.word	0x080232ec

0800656c <AT_ParsePing>:
{
 800656c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800656e:	b083      	sub	sp, #12
 8006570:	4605      	mov	r5, r0
 8006572:	460c      	mov	r4, r1
 8006574:	4610      	mov	r0, r2
  ptr= strtok_r(pdata,",\n\r",&saveptr);
 8006576:	aa01      	add	r2, sp, #4
 8006578:	490f      	ldr	r1, [pc, #60]	; (80065b8 <AT_ParsePing+0x4c>)
 800657a:	f01a fed9 	bl	8021330 <strtok_r>
 800657e:	4603      	mov	r3, r0
  int i=0;
 8006580:	2600      	movs	r6, #0
  while(ptr)
 8006582:	b1bb      	cbz	r3, 80065b4 <AT_ParsePing+0x48>
    ptr = strtok_r(0,"\n\r",&saveptr);
 8006584:	aa01      	add	r2, sp, #4
 8006586:	490d      	ldr	r1, [pc, #52]	; (80065bc <AT_ParsePing+0x50>)
 8006588:	2000      	movs	r0, #0
 800658a:	f01a fed1 	bl	8021330 <strtok_r>
    if (ptr)
 800658e:	4603      	mov	r3, r0
 8006590:	2800      	cmp	r0, #0
 8006592:	d0f6      	beq.n	8006582 <AT_ParsePing+0x16>
      res[i++]=ParseNumber(ptr,0);
 8006594:	1c77      	adds	r7, r6, #1
 8006596:	2100      	movs	r1, #0
 8006598:	f7ff fe8a 	bl	80062b0 <ParseNumber>
 800659c:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      if (i==count) return;
 80065a0:	42bc      	cmp	r4, r7
 80065a2:	d007      	beq.n	80065b4 <AT_ParsePing+0x48>
      ptr = strtok_r(0,",\n\r",&saveptr);
 80065a4:	aa01      	add	r2, sp, #4
 80065a6:	4904      	ldr	r1, [pc, #16]	; (80065b8 <AT_ParsePing+0x4c>)
 80065a8:	2000      	movs	r0, #0
 80065aa:	f01a fec1 	bl	8021330 <strtok_r>
 80065ae:	4603      	mov	r3, r0
      res[i++]=ParseNumber(ptr,0);
 80065b0:	463e      	mov	r6, r7
 80065b2:	e7e6      	b.n	8006582 <AT_ParsePing+0x16>
}
 80065b4:	b003      	add	sp, #12
 80065b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b8:	080232f4 	.word	0x080232f4
 80065bc:	080232f8 	.word	0x080232f8

080065c0 <AT_ParseTransportSettings>:
{
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 80065c6:	aa01      	add	r2, sp, #4
 80065c8:	4937      	ldr	r1, [pc, #220]	; (80066a8 <AT_ParseTransportSettings+0xe8>)
 80065ca:	3002      	adds	r0, #2
 80065cc:	f01a feb0 	bl	8021330 <strtok_r>
 80065d0:	4603      	mov	r3, r0
  uint8_t num = 0;
 80065d2:	2600      	movs	r6, #0
  while (ptr != NULL) {
 80065d4:	e010      	b.n	80065f8 <AT_ParseTransportSettings+0x38>
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fe69 	bl	80062b0 <ParseNumber>
 80065de:	7028      	strb	r0, [r5, #0]
    ptr = strtok_r(NULL, ",",&saveptr);
 80065e0:	aa01      	add	r2, sp, #4
 80065e2:	4931      	ldr	r1, [pc, #196]	; (80066a8 <AT_ParseTransportSettings+0xe8>)
 80065e4:	2000      	movs	r0, #0
 80065e6:	f01a fea3 	bl	8021330 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80065ea:	4603      	mov	r3, r0
 80065ec:	b118      	cbz	r0, 80065f6 <AT_ParseTransportSettings+0x36>
 80065ee:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80065f2:	2a2c      	cmp	r2, #44	; 0x2c
 80065f4:	d053      	beq.n	800669e <AT_ParseTransportSettings+0xde>
{
 80065f6:	4626      	mov	r6, r4
  while (ptr != NULL) {
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d053      	beq.n	80066a4 <AT_ParseTransportSettings+0xe4>
    switch (num++) {
 80065fc:	1c74      	adds	r4, r6, #1
 80065fe:	b2e4      	uxtb	r4, r4
 8006600:	2e09      	cmp	r6, #9
 8006602:	d8ed      	bhi.n	80065e0 <AT_ParseTransportSettings+0x20>
 8006604:	a201      	add	r2, pc, #4	; (adr r2, 800660c <AT_ParseTransportSettings+0x4c>)
 8006606:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800660a:	bf00      	nop
 800660c:	080065d7 	.word	0x080065d7
 8006610:	08006635 	.word	0x08006635
 8006614:	0800663f 	.word	0x0800663f
 8006618:	0800664b 	.word	0x0800664b
 800661c:	08006657 	.word	0x08006657
 8006620:	08006663 	.word	0x08006663
 8006624:	0800666f 	.word	0x0800666f
 8006628:	0800667b 	.word	0x0800667b
 800662c:	08006687 	.word	0x08006687
 8006630:	08006693 	.word	0x08006693
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8006634:	1c69      	adds	r1, r5, #1
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fe7c 	bl	8006334 <ParseIP>
      break;
 800663c:	e7d0      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fe35 	bl	80062b0 <ParseNumber>
 8006646:	80e8      	strh	r0, [r5, #6]
      break;
 8006648:	e7ca      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 800664a:	f105 0108 	add.w	r1, r5, #8
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff fe70 	bl	8006334 <ParseIP>
      break;
 8006654:	e7c4      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8006656:	2100      	movs	r1, #0
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fe29 	bl	80062b0 <ParseNumber>
 800665e:	81a8      	strh	r0, [r5, #12]
      break;
 8006660:	e7be      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8006662:	2100      	movs	r1, #0
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff fe23 	bl	80062b0 <ParseNumber>
 800666a:	73a8      	strb	r0, [r5, #14]
      break;
 800666c:	e7b8      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fe1d 	bl	80062b0 <ParseNumber>
 8006676:	73e8      	strb	r0, [r5, #15]
      break;
 8006678:	e7b2      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fe17 	bl	80062b0 <ParseNumber>
 8006682:	7428      	strb	r0, [r5, #16]
      break;
 8006684:	e7ac      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fe11 	bl	80062b0 <ParseNumber>
 800668e:	7468      	strb	r0, [r5, #17]
      break;
 8006690:	e7a6      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff fe0b 	bl	80062b0 <ParseNumber>
 800669a:	74a8      	strb	r0, [r5, #18]
      break;
 800669c:	e7a0      	b.n	80065e0 <AT_ParseTransportSettings+0x20>
      num++;
 800669e:	1cb4      	adds	r4, r6, #2
 80066a0:	b2e4      	uxtb	r4, r4
 80066a2:	e7a8      	b.n	80065f6 <AT_ParseTransportSettings+0x36>
}
 80066a4:	b002      	add	sp, #8
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	080232f0 	.word	0x080232f0

080066ac <AT_ParseInfo>:
{
 80066ac:	b530      	push	{r4, r5, lr}
 80066ae:	b083      	sub	sp, #12
 80066b0:	4605      	mov	r5, r0
 80066b2:	4608      	mov	r0, r1
  ptr = strtok_r((char *)pdata + 2, ",", &saveptr);
 80066b4:	aa01      	add	r2, sp, #4
 80066b6:	492c      	ldr	r1, [pc, #176]	; (8006768 <AT_ParseInfo+0xbc>)
 80066b8:	3002      	adds	r0, #2
 80066ba:	f01a fe39 	bl	8021330 <strtok_r>
  uint8_t num = 0;
 80066be:	2300      	movs	r3, #0
  while (ptr != NULL){
 80066c0:	e00a      	b.n	80066d8 <AT_ParseInfo+0x2c>
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80066c2:	2220      	movs	r2, #32
 80066c4:	4601      	mov	r1, r0
 80066c6:	4628      	mov	r0, r5
 80066c8:	f01a fde1 	bl	802128e <strncpy>
    ptr = strtok_r(NULL, ",", &saveptr);
 80066cc:	aa01      	add	r2, sp, #4
 80066ce:	4926      	ldr	r1, [pc, #152]	; (8006768 <AT_ParseInfo+0xbc>)
 80066d0:	2000      	movs	r0, #0
 80066d2:	f01a fe2d 	bl	8021330 <strtok_r>
    switch (num++) {
 80066d6:	4623      	mov	r3, r4
  while (ptr != NULL){
 80066d8:	2800      	cmp	r0, #0
 80066da:	d042      	beq.n	8006762 <AT_ParseInfo+0xb6>
    switch (num++) {
 80066dc:	1c5c      	adds	r4, r3, #1
 80066de:	b2e4      	uxtb	r4, r4
 80066e0:	2b06      	cmp	r3, #6
 80066e2:	d8f3      	bhi.n	80066cc <AT_ParseInfo+0x20>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <AT_ParseInfo+0x40>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	080066c3 	.word	0x080066c3
 80066f0:	08006709 	.word	0x08006709
 80066f4:	08006717 	.word	0x08006717
 80066f8:	08006725 	.word	0x08006725
 80066fc:	08006733 	.word	0x08006733
 8006700:	08006741 	.word	0x08006741
 8006704:	0800674d 	.word	0x0800674d
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8006708:	2218      	movs	r2, #24
 800670a:	4601      	mov	r1, r0
 800670c:	f105 0020 	add.w	r0, r5, #32
 8006710:	f01a fdbd 	bl	802128e <strncpy>
      break;
 8006714:	e7da      	b.n	80066cc <AT_ParseInfo+0x20>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8006716:	2210      	movs	r2, #16
 8006718:	4601      	mov	r1, r0
 800671a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800671e:	f01a fdb6 	bl	802128e <strncpy>
      break;
 8006722:	e7d3      	b.n	80066cc <AT_ParseInfo+0x20>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8006724:	2210      	movs	r2, #16
 8006726:	4601      	mov	r1, r0
 8006728:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800672c:	f01a fdaf 	bl	802128e <strncpy>
      break;
 8006730:	e7cc      	b.n	80066cc <AT_ParseInfo+0x20>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8006732:	2210      	movs	r2, #16
 8006734:	4601      	mov	r1, r0
 8006736:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800673a:	f01a fda8 	bl	802128e <strncpy>
      break;
 800673e:	e7c5      	b.n	80066cc <AT_ParseInfo+0x20>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8006740:	2100      	movs	r1, #0
 8006742:	f7ff fdb5 	bl	80062b0 <ParseNumber>
 8006746:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
      break;
 800674a:	e7bf      	b.n	80066cc <AT_ParseInfo+0x20>
      ptr = strtok_r(ptr, "\r", &saveptr);
 800674c:	aa01      	add	r2, sp, #4
 800674e:	4907      	ldr	r1, [pc, #28]	; (800676c <AT_ParseInfo+0xc0>)
 8006750:	f01a fdee 	bl	8021330 <strtok_r>
 8006754:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8006756:	2220      	movs	r2, #32
 8006758:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800675c:	f01a fd97 	bl	802128e <strncpy>
      break;
 8006760:	e7b4      	b.n	80066cc <AT_ParseInfo+0x20>
}
 8006762:	b003      	add	sp, #12
 8006764:	bd30      	pop	{r4, r5, pc}
 8006766:	bf00      	nop
 8006768:	080232f0 	.word	0x080232f0
 800676c:	08023468 	.word	0x08023468

08006770 <AT_ParseSingleAP>:
{
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	460e      	mov	r6, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8006776:	aa01      	add	r2, sp, #4
 8006778:	4926      	ldr	r1, [pc, #152]	; (8006814 <AT_ParseSingleAP+0xa4>)
 800677a:	3002      	adds	r0, #2
 800677c:	f01a fdd8 	bl	8021330 <strtok_r>
 8006780:	4604      	mov	r4, r0
  uint8_t num = 0;
 8006782:	2300      	movs	r3, #0
  while (ptr != NULL) {
 8006784:	e011      	b.n	80067aa <AT_ParseSingleAP+0x3a>
      ptr[strlen(ptr) - 1] = 0;
 8006786:	4620      	mov	r0, r4
 8006788:	f7f9 fdbc 	bl	8000304 <strlen>
 800678c:	3801      	subs	r0, #1
 800678e:	2300      	movs	r3, #0
 8006790:	5423      	strb	r3, [r4, r0]
      strncpy((char *)AP->SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8006792:	2221      	movs	r2, #33	; 0x21
 8006794:	1c61      	adds	r1, r4, #1
 8006796:	4630      	mov	r0, r6
 8006798:	f01a fd79 	bl	802128e <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 800679c:	aa01      	add	r2, sp, #4
 800679e:	491d      	ldr	r1, [pc, #116]	; (8006814 <AT_ParseSingleAP+0xa4>)
 80067a0:	2000      	movs	r0, #0
 80067a2:	f01a fdc5 	bl	8021330 <strtok_r>
 80067a6:	4604      	mov	r4, r0
 80067a8:	462b      	mov	r3, r5
  while (ptr != NULL) {
 80067aa:	b38c      	cbz	r4, 8006810 <AT_ParseSingleAP+0xa0>
    switch (num++) {
 80067ac:	1c5d      	adds	r5, r3, #1
 80067ae:	b2ed      	uxtb	r5, r5
 80067b0:	3b01      	subs	r3, #1
 80067b2:	2b07      	cmp	r3, #7
 80067b4:	d8f2      	bhi.n	800679c <AT_ParseSingleAP+0x2c>
 80067b6:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <AT_ParseSingleAP+0x4c>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	08006787 	.word	0x08006787
 80067c0:	080067dd 	.word	0x080067dd
 80067c4:	080067e9 	.word	0x080067e9
 80067c8:	0800679d 	.word	0x0800679d
 80067cc:	0800679d 	.word	0x0800679d
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	0800679d 	.word	0x0800679d
 80067d8:	08006801 	.word	0x08006801
      ParseMAC(ptr, AP->MAC);
 80067dc:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80067e0:	4620      	mov	r0, r4
 80067e2:	f7ff fd8b 	bl	80062fc <ParseMAC>
      break;
 80067e6:	e7d9      	b.n	800679c <AT_ParseSingleAP+0x2c>
      AP->RSSI = ParseNumber(ptr, NULL);
 80067e8:	2100      	movs	r1, #0
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff fd60 	bl	80062b0 <ParseNumber>
 80067f0:	8470      	strh	r0, [r6, #34]	; 0x22
      break;
 80067f2:	e7d3      	b.n	800679c <AT_ParseSingleAP+0x2c>
      AP->Security = ParseSecurity(ptr);
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7ff fe0b 	bl	8006410 <ParseSecurity>
 80067fa:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 80067fe:	e7cd      	b.n	800679c <AT_ParseSingleAP+0x2c>
      AP->Channel = ParseNumber(ptr, NULL);
 8006800:	2100      	movs	r1, #0
 8006802:	4620      	mov	r0, r4
 8006804:	f7ff fd54 	bl	80062b0 <ParseNumber>
 8006808:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
      num = 1;
 800680c:	2501      	movs	r5, #1
      break;
 800680e:	e7c5      	b.n	800679c <AT_ParseSingleAP+0x2c>
}
 8006810:	b002      	add	sp, #8
 8006812:	bd70      	pop	{r4, r5, r6, pc}
 8006814:	080232f0 	.word	0x080232f0

08006818 <AT_ParseAP>:
{
 8006818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681a:	b083      	sub	sp, #12
 800681c:	460f      	mov	r7, r1
  APs->nbr = 0;
 800681e:	2400      	movs	r4, #0
 8006820:	f881 4370 	strb.w	r4, [r1, #880]	; 0x370
  ptr = strtok_r(pdata + 2, "," ,&saveptr);
 8006824:	aa01      	add	r2, sp, #4
 8006826:	4935      	ldr	r1, [pc, #212]	; (80068fc <AT_ParseAP+0xe4>)
 8006828:	3002      	adds	r0, #2
 800682a:	f01a fd81 	bl	8021330 <strtok_r>
 800682e:	4605      	mov	r5, r0
  uint8_t num = 0;
 8006830:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8006832:	e015      	b.n	8006860 <AT_ParseAP+0x48>
      ptr[strlen(ptr) - 1] = 0;
 8006834:	4628      	mov	r0, r5
 8006836:	f7f9 fd65 	bl	8000304 <strlen>
 800683a:	3801      	subs	r0, #1
 800683c:	2300      	movs	r3, #0
 800683e:	542b      	strb	r3, [r5, r0]
      strncpy((char *)APs->AP[APs->nbr].SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8006840:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8006844:	2221      	movs	r2, #33	; 0x21
 8006846:	1c69      	adds	r1, r5, #1
 8006848:	202c      	movs	r0, #44	; 0x2c
 800684a:	fb00 7003 	mla	r0, r0, r3, r7
 800684e:	f01a fd1e 	bl	802128e <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8006852:	aa01      	add	r2, sp, #4
 8006854:	4929      	ldr	r1, [pc, #164]	; (80068fc <AT_ParseAP+0xe4>)
 8006856:	2000      	movs	r0, #0
 8006858:	f01a fd6a 	bl	8021330 <strtok_r>
 800685c:	4605      	mov	r5, r0
 800685e:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8006860:	2d00      	cmp	r5, #0
 8006862:	d049      	beq.n	80068f8 <AT_ParseAP+0xe0>
 8006864:	f897 6370 	ldrb.w	r6, [r7, #880]	; 0x370
 8006868:	2e13      	cmp	r6, #19
 800686a:	d845      	bhi.n	80068f8 <AT_ParseAP+0xe0>
    switch (num++) {
 800686c:	1c5c      	adds	r4, r3, #1
 800686e:	b2e4      	uxtb	r4, r4
 8006870:	3b01      	subs	r3, #1
 8006872:	2b07      	cmp	r3, #7
 8006874:	d8ed      	bhi.n	8006852 <AT_ParseAP+0x3a>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <AT_ParseAP+0x64>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006835 	.word	0x08006835
 8006880:	0800689d 	.word	0x0800689d
 8006884:	080068b1 	.word	0x080068b1
 8006888:	08006853 	.word	0x08006853
 800688c:	08006853 	.word	0x08006853
 8006890:	080068c7 	.word	0x080068c7
 8006894:	08006853 	.word	0x08006853
 8006898:	080068d9 	.word	0x080068d9
      ParseMAC(ptr, APs->AP[APs->nbr].MAC);
 800689c:	212c      	movs	r1, #44	; 0x2c
 800689e:	fb06 f101 	mul.w	r1, r6, r1
 80068a2:	3120      	adds	r1, #32
 80068a4:	4439      	add	r1, r7
 80068a6:	3104      	adds	r1, #4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f7ff fd27 	bl	80062fc <ParseMAC>
      break;
 80068ae:	e7d0      	b.n	8006852 <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].RSSI = ParseNumber(ptr, NULL);
 80068b0:	2100      	movs	r1, #0
 80068b2:	4628      	mov	r0, r5
 80068b4:	f7ff fcfc 	bl	80062b0 <ParseNumber>
 80068b8:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 80068bc:	222c      	movs	r2, #44	; 0x2c
 80068be:	fb02 7303 	mla	r3, r2, r3, r7
 80068c2:	8458      	strh	r0, [r3, #34]	; 0x22
      break;
 80068c4:	e7c5      	b.n	8006852 <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Security = ParseSecurity(ptr);
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7ff fda2 	bl	8006410 <ParseSecurity>
 80068cc:	232c      	movs	r3, #44	; 0x2c
 80068ce:	fb03 7606 	mla	r6, r3, r6, r7
 80068d2:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 80068d6:	e7bc      	b.n	8006852 <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Channel = ParseNumber(ptr, NULL);
 80068d8:	2100      	movs	r1, #0
 80068da:	4628      	mov	r0, r5
 80068dc:	f7ff fce8 	bl	80062b0 <ParseNumber>
 80068e0:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 80068e4:	222c      	movs	r2, #44	; 0x2c
 80068e6:	fb02 7203 	mla	r2, r2, r3, r7
 80068ea:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
      APs->nbr++;
 80068ee:	3301      	adds	r3, #1
 80068f0:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
      num = 1;
 80068f4:	2401      	movs	r4, #1
      break;
 80068f6:	e7ac      	b.n	8006852 <AT_ParseAP+0x3a>
}
 80068f8:	b003      	add	sp, #12
 80068fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fc:	080232f0 	.word	0x080232f0

08006900 <AT_ParseConnSettings>:
{
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8006906:	aa01      	add	r2, sp, #4
 8006908:	4942      	ldr	r1, [pc, #264]	; (8006a14 <AT_ParseConnSettings+0x114>)
 800690a:	3002      	adds	r0, #2
 800690c:	f01a fd10 	bl	8021330 <strtok_r>
 8006910:	4603      	mov	r3, r0
  uint8_t num = 0;
 8006912:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8006914:	e010      	b.n	8006938 <AT_ParseConnSettings+0x38>
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8006916:	2221      	movs	r2, #33	; 0x21
 8006918:	4619      	mov	r1, r3
 800691a:	4628      	mov	r0, r5
 800691c:	f01a fcb7 	bl	802128e <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8006920:	aa01      	add	r2, sp, #4
 8006922:	493c      	ldr	r1, [pc, #240]	; (8006a14 <AT_ParseConnSettings+0x114>)
 8006924:	2000      	movs	r0, #0
 8006926:	f01a fd03 	bl	8021330 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 800692a:	4603      	mov	r3, r0
 800692c:	b118      	cbz	r0, 8006936 <AT_ParseConnSettings+0x36>
 800692e:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8006932:	2a2c      	cmp	r2, #44	; 0x2c
 8006934:	d069      	beq.n	8006a0a <AT_ParseConnSettings+0x10a>
{
 8006936:	4626      	mov	r6, r4
  while (ptr != NULL) {
 8006938:	2b00      	cmp	r3, #0
 800693a:	d069      	beq.n	8006a10 <AT_ParseConnSettings+0x110>
    switch (num++) {
 800693c:	1c74      	adds	r4, r6, #1
 800693e:	b2e4      	uxtb	r4, r4
 8006940:	2e0b      	cmp	r6, #11
 8006942:	d8ed      	bhi.n	8006920 <AT_ParseConnSettings+0x20>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <AT_ParseConnSettings+0x4c>)
 8006946:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006917 	.word	0x08006917
 8006950:	0800697d 	.word	0x0800697d
 8006954:	08006989 	.word	0x08006989
 8006958:	08006997 	.word	0x08006997
 800695c:	080069a5 	.word	0x080069a5
 8006960:	080069b3 	.word	0x080069b3
 8006964:	080069bf 	.word	0x080069bf
 8006968:	080069cb 	.word	0x080069cb
 800696c:	080069d7 	.word	0x080069d7
 8006970:	080069e3 	.word	0x080069e3
 8006974:	080069ef 	.word	0x080069ef
 8006978:	080069fd 	.word	0x080069fd
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800697c:	2221      	movs	r2, #33	; 0x21
 800697e:	4619      	mov	r1, r3
 8006980:	18a8      	adds	r0, r5, r2
 8006982:	f01a fc84 	bl	802128e <strncpy>
      break;
 8006986:	e7cb      	b.n	8006920 <AT_ParseConnSettings+0x20>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fc90 	bl	80062b0 <ParseNumber>
 8006990:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
        break;
 8006994:	e7c4      	b.n	8006920 <AT_ParseConnSettings+0x20>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8006996:	2100      	movs	r1, #0
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fc89 	bl	80062b0 <ParseNumber>
 800699e:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
      break;
 80069a2:	e7bd      	b.n	8006920 <AT_ParseConnSettings+0x20>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80069a4:	2100      	movs	r1, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fc82 	bl	80062b0 <ParseNumber>
 80069ac:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
      break;
 80069b0:	e7b6      	b.n	8006920 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Addr);
 80069b2:	f105 0148 	add.w	r1, r5, #72	; 0x48
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fcbc 	bl	8006334 <ParseIP>
      break;
 80069bc:	e7b0      	b.n	8006920 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Mask);
 80069be:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff fcb6 	bl	8006334 <ParseIP>
      break;
 80069c8:	e7aa      	b.n	8006920 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80069ca:	f105 0150 	add.w	r1, r5, #80	; 0x50
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fcb0 	bl	8006334 <ParseIP>
      break;
 80069d4:	e7a4      	b.n	8006920 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS1);
 80069d6:	f105 0154 	add.w	r1, r5, #84	; 0x54
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fcaa 	bl	8006334 <ParseIP>
      break;
 80069e0:	e79e      	b.n	8006920 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS2);
 80069e2:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fca4 	bl	8006334 <ParseIP>
      break;
 80069ec:	e798      	b.n	8006920 <AT_ParseConnSettings+0x20>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fc5d 	bl	80062b0 <ParseNumber>
 80069f6:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
      break;
 80069fa:	e791      	b.n	8006920 <AT_ParseConnSettings+0x20>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fc56 	bl	80062b0 <ParseNumber>
 8006a04:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
      break;
 8006a08:	e78a      	b.n	8006920 <AT_ParseConnSettings+0x20>
      num++;
 8006a0a:	1cb4      	adds	r4, r6, #2
 8006a0c:	b2e4      	uxtb	r4, r4
 8006a0e:	e792      	b.n	8006936 <AT_ParseConnSettings+0x36>
}
 8006a10:	b002      	add	sp, #8
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	080232f0 	.word	0x080232f0

08006a18 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8006a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	460d      	mov	r5, r1
 8006a20:	4690      	mov	r8, r2
 8006a22:	461e      	mov	r6, r3
  int len;
  uint8_t *p=Obj->CmdData;
 8006a24:	f500 7994 	add.w	r9, r0, #296	; 0x128

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8006a28:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	f7f9 fc69 	bl	8000304 <strlen>
 8006a32:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8006a36:	b281      	uxth	r1, r0
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	dd48      	ble.n	8006ad2 <AT_RequestReceiveData+0xba>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8006a40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006a44:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4648      	mov	r0, r9
 8006a4c:	4798      	blx	r3
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8006a4e:	f110 0f04 	cmn.w	r0, #4
 8006a52:	d041      	beq.n	8006ad8 <AT_RequestReceiveData+0xc0>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8006a54:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8006a58:	2b0d      	cmp	r3, #13
 8006a5a:	d13f      	bne.n	8006adc <AT_RequestReceiveData+0xc4>
 8006a5c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8006a60:	2b0a      	cmp	r3, #10
 8006a62:	d13d      	bne.n	8006ae0 <AT_RequestReceiveData+0xc8>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
    }
    len-=2;
 8006a64:	1e85      	subs	r5, r0, #2
    p+=2;
 8006a66:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    if (len >= AT_OK_STRING_LEN)
 8006a6a:	2d07      	cmp	r5, #7
 8006a6c:	d802      	bhi.n	8006a74 <AT_RequestReceiveData+0x5c>

     *ReadData = 0;
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8006a6e:	2004      	movs	r0, #4
 8006a70:	e030      	b.n	8006ad4 <AT_RequestReceiveData+0xbc>
     while(len && (p[len-1]==0x15)) len--;
 8006a72:	3d01      	subs	r5, #1
 8006a74:	b125      	cbz	r5, 8006a80 <AT_RequestReceiveData+0x68>
 8006a76:	1963      	adds	r3, r4, r5
 8006a78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006a7c:	2b15      	cmp	r3, #21
 8006a7e:	d0f8      	beq.n	8006a72 <AT_RequestReceiveData+0x5a>
     p[len] = '\0';
 8006a80:	2300      	movs	r3, #0
 8006a82:	5563      	strb	r3, [r4, r5]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8006a84:	f1a5 0008 	sub.w	r0, r5, #8
 8006a88:	4916      	ldr	r1, [pc, #88]	; (8006ae4 <AT_RequestReceiveData+0xcc>)
 8006a8a:	4420      	add	r0, r4
 8006a8c:	f01a fc12 	bl	80212b4 <strstr>
 8006a90:	b170      	cbz	r0, 8006ab0 <AT_RequestReceiveData+0x98>
       *ReadData = len - AT_OK_STRING_LEN;
 8006a92:	3d08      	subs	r5, #8
 8006a94:	b2ad      	uxth	r5, r5
 8006a96:	9b08      	ldr	r3, [sp, #32]
 8006a98:	801d      	strh	r5, [r3, #0]
	   if (*ReadData > Reqlen)
 8006a9a:	42b5      	cmp	r5, r6
 8006a9c:	d900      	bls.n	8006aa0 <AT_RequestReceiveData+0x88>
         *ReadData = Reqlen;
 8006a9e:	801e      	strh	r6, [r3, #0]
       memcpy(pdata, p, *ReadData);
 8006aa0:	9b08      	ldr	r3, [sp, #32]
 8006aa2:	881a      	ldrh	r2, [r3, #0]
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	f019 fed8 	bl	802085c <memcpy>
       return ES_WIFI_STATUS_OK;
 8006aac:	2000      	movs	r0, #0
 8006aae:	e011      	b.n	8006ad4 <AT_RequestReceiveData+0xbc>
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8006ab0:	1f28      	subs	r0, r5, #4
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	490c      	ldr	r1, [pc, #48]	; (8006ae8 <AT_RequestReceiveData+0xd0>)
 8006ab6:	4420      	add	r0, r4
 8006ab8:	f019 fec0 	bl	802083c <memcmp>
 8006abc:	b920      	cbnz	r0, 8006ac8 <AT_RequestReceiveData+0xb0>
       *ReadData = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9a08      	ldr	r2, [sp, #32]
 8006ac2:	8013      	strh	r3, [r2, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8006ac4:	2005      	movs	r0, #5
 8006ac6:	e005      	b.n	8006ad4 <AT_RequestReceiveData+0xbc>
     *ReadData = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9a08      	ldr	r2, [sp, #32]
 8006acc:	8013      	strh	r3, [r2, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8006ace:	2005      	movs	r0, #5
 8006ad0:	e000      	b.n	8006ad4 <AT_RequestReceiveData+0xbc>
  return ES_WIFI_STATUS_IO_ERROR;
 8006ad2:	2004      	movs	r0, #4
}
 8006ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return ES_WIFI_STATUS_MODULE_CRASH;
 8006ad8:	2006      	movs	r0, #6
 8006ada:	e7fb      	b.n	8006ad4 <AT_RequestReceiveData+0xbc>
     return  ES_WIFI_STATUS_IO_ERROR;
 8006adc:	2004      	movs	r0, #4
 8006ade:	e7f9      	b.n	8006ad4 <AT_RequestReceiveData+0xbc>
 8006ae0:	2004      	movs	r0, #4
 8006ae2:	e7f7      	b.n	8006ad4 <AT_RequestReceiveData+0xbc>
 8006ae4:	080232b0 	.word	0x080232b0
 8006ae8:	080232b4 	.word	0x080232b4

08006aec <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8006af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006af4:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8006af8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8006afc:	2000      	movs	r0, #0
 8006afe:	4798      	blx	r3
 8006b00:	b110      	cbz	r0, 8006b08 <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8006b02:	2502      	movs	r5, #2
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8006b04:	4628      	mov	r0, r5
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8006b08:	f504 7694 	add.w	r6, r4, #296	; 0x128
 8006b0c:	4632      	mov	r2, r6
 8006b0e:	4906      	ldr	r1, [pc, #24]	; (8006b28 <ES_WIFI_Init+0x3c>)
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7ff fc3d 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006b16:	4605      	mov	r5, r0
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d1f3      	bne.n	8006b04 <ES_WIFI_Init+0x18>
      AT_ParseInfo (Obj, Obj->CmdData);
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f7ff fdc4 	bl	80066ac <AT_ParseInfo>
 8006b24:	e7ee      	b.n	8006b04 <ES_WIFI_Init+0x18>
 8006b26:	bf00      	nop
 8006b28:	080232fc 	.word	0x080232fc

08006b2c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8006b2c:	b470      	push	{r4, r5, r6}
 8006b2e:	9c03      	ldr	r4, [sp, #12]
 8006b30:	9d04      	ldr	r5, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8006b32:	2900      	cmp	r1, #0
 8006b34:	bf18      	it	ne
 8006b36:	2800      	cmpne	r0, #0
 8006b38:	d013      	beq.n	8006b62 <ES_WIFI_RegisterBusIO+0x36>
 8006b3a:	460e      	mov	r6, r1
 8006b3c:	fab4 f184 	clz	r1, r4
 8006b40:	0949      	lsrs	r1, r1, #5
 8006b42:	b182      	cbz	r2, 8006b66 <ES_WIFI_RegisterBusIO+0x3a>
 8006b44:	b979      	cbnz	r1, 8006b66 <ES_WIFI_RegisterBusIO+0x3a>
 8006b46:	b185      	cbz	r5, 8006b6a <ES_WIFI_RegisterBusIO+0x3e>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8006b48:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8006b4c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8006b50:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8006b54:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8006b58:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8006b5c:	2000      	movs	r0, #0
}
 8006b5e:	bc70      	pop	{r4, r5, r6}
 8006b60:	4770      	bx	lr
    return ES_WIFI_STATUS_ERROR;
 8006b62:	2002      	movs	r0, #2
 8006b64:	e7fb      	b.n	8006b5e <ES_WIFI_RegisterBusIO+0x32>
 8006b66:	2002      	movs	r0, #2
 8006b68:	e7f9      	b.n	8006b5e <ES_WIFI_RegisterBusIO+0x32>
 8006b6a:	2002      	movs	r0, #2
 8006b6c:	e7f7      	b.n	8006b5e <ES_WIFI_RegisterBusIO+0x32>
	...

08006b70 <ES_WIFI_ListAccessPoints>:
  * @param  Obj: pointer to module handle
  * @param  APs: pointer Access points structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_ListAccessPoints(ES_WIFIObject_t *Obj, ES_WIFI_APs_t *APs)
{
 8006b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b72:	b083      	sub	sp, #12
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
  ES_WIFI_Status_t ret;
  int send_len;
  int16_t recv_len = 0;
  uint8_t version[4] = { 0 };
 8006b78:	2300      	movs	r3, #0
 8006b7a:	9301      	str	r3, [sp, #4]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, (char*)Obj->FW_Rev);
 8006b7c:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8006b80:	f100 0120 	add.w	r1, r0, #32
 8006b84:	4620      	mov	r0, r4
 8006b86:	f01a fb0b 	bl	80211a0 <siprintf>

  AT_ParseFWRev((char*)Obj->CmdData, version);
 8006b8a:	a901      	add	r1, sp, #4
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7ff fcc9 	bl	8006524 <AT_ParseFWRev>

  if (ArrayTo32bit(version) >= UPDATED_SCAN_PARAMETERS_FW_REV)
 8006b92:	a801      	add	r0, sp, #4
 8006b94:	f7ff fbea 	bl	800636c <ArrayTo32bit>
 8006b98:	4b36      	ldr	r3, [pc, #216]	; (8006c74 <ES_WIFI_ListAccessPoints+0x104>)
 8006b9a:	4298      	cmp	r0, r3
 8006b9c:	d958      	bls.n	8006c50 <ES_WIFI_ListAccessPoints+0xe0>
  {
    APs->nbr = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370

    sprintf((char*)Obj->CmdData,"F0=2\r");
 8006ba4:	4b34      	ldr	r3, [pc, #208]	; (8006c78 <ES_WIFI_ListAccessPoints+0x108>)
 8006ba6:	6818      	ldr	r0, [r3, #0]
 8006ba8:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
 8006bac:	889b      	ldrh	r3, [r3, #4]
 8006bae:	80a3      	strh	r3, [r4, #4]

    send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8006bb0:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f7f9 fba5 	bl	8000304 <strlen>
 8006bba:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8006bbe:	b281      	uxth	r1, r0
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	47a8      	blx	r5

    if (send_len == 5)
 8006bc4:	2805      	cmp	r0, #5
 8006bc6:	d019      	beq.n	8006bfc <ES_WIFI_ListAccessPoints+0x8c>
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
	  } while (send_len == 3);
    }

    UNLOCK_WIFI();
    return ES_WIFI_STATUS_IO_ERROR;
 8006bc8:	2504      	movs	r5, #4
      AT_ParseAP((char *)Obj->CmdData, APs);
    }
    UNLOCK_WIFI();
    return ret;
  }
}
 8006bca:	4628      	mov	r0, r5
 8006bcc:	b003      	add	sp, #12
 8006bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8006bd0:	f115 0f04 	cmn.w	r5, #4
 8006bd4:	d04b      	beq.n	8006c6e <ES_WIFI_ListAccessPoints+0xfe>
        if (APs->nbr < ES_WIFI_MAX_DETECTED_AP)
 8006bd6:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8006bda:	2b13      	cmp	r3, #19
 8006bdc:	d92c      	bls.n	8006c38 <ES_WIFI_ListAccessPoints+0xc8>
        sprintf((char*)Obj->CmdData,"MR\r");
 8006bde:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <ES_WIFI_ListAccessPoints+0x10c>)
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	6020      	str	r0, [r4, #0]
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8006be4:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7f9 fb8b 	bl	8000304 <strlen>
 8006bee:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8006bf2:	b281      	uxth	r1, r0
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	47a8      	blx	r5
	  } while (send_len == 3);
 8006bf8:	2803      	cmp	r0, #3
 8006bfa:	d1e5      	bne.n	8006bc8 <ES_WIFI_ListAccessPoints+0x58>
	    recv_len = Obj->fops.IO_Receive(Obj->CmdData, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8006bfc:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8006c00:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8006c04:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8006c08:	4620      	mov	r0, r4
 8006c0a:	4798      	blx	r3
 8006c0c:	4605      	mov	r5, r0
        if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8006c0e:	1e43      	subs	r3, r0, #1
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f240 5276 	movw	r2, #1398	; 0x576
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d8da      	bhi.n	8006bd0 <ES_WIFI_ListAccessPoints+0x60>
          *(Obj->CmdData + recv_len) = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	5423      	strb	r3, [r4, r0]
	      if(strstr((char *)Obj->CmdData, AT_OK_STRING))
 8006c1e:	4918      	ldr	r1, [pc, #96]	; (8006c80 <ES_WIFI_ListAccessPoints+0x110>)
 8006c20:	4620      	mov	r0, r4
 8006c22:	f01a fb47 	bl	80212b4 <strstr>
 8006c26:	bb00      	cbnz	r0, 8006c6a <ES_WIFI_ListAccessPoints+0xfa>
	      else if(strstr((char *)Obj->CmdData, AT_ERROR_STRING))
 8006c28:	4916      	ldr	r1, [pc, #88]	; (8006c84 <ES_WIFI_ListAccessPoints+0x114>)
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f01a fb42 	bl	80212b4 <strstr>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d0cd      	beq.n	8006bd0 <ES_WIFI_ListAccessPoints+0x60>
            return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8006c34:	2505      	movs	r5, #5
 8006c36:	e7c8      	b.n	8006bca <ES_WIFI_ListAccessPoints+0x5a>
          AT_ParseSingleAP((char *)Obj->CmdData, &(APs->AP[APs->nbr]));
 8006c38:	212c      	movs	r1, #44	; 0x2c
 8006c3a:	fb01 7103 	mla	r1, r1, r3, r7
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7ff fd96 	bl	8006770 <AT_ParseSingleAP>
          APs->nbr++;
 8006c44:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8006c48:	3301      	adds	r3, #1
 8006c4a:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
 8006c4e:	e7c6      	b.n	8006bde <ES_WIFI_ListAccessPoints+0x6e>
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"F0\r", Obj->CmdData);
 8006c50:	4622      	mov	r2, r4
 8006c52:	490d      	ldr	r1, [pc, #52]	; (8006c88 <ES_WIFI_ListAccessPoints+0x118>)
 8006c54:	4630      	mov	r0, r6
 8006c56:	f7ff fb9b 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d1b4      	bne.n	8006bca <ES_WIFI_ListAccessPoints+0x5a>
      AT_ParseAP((char *)Obj->CmdData, APs);
 8006c60:	4639      	mov	r1, r7
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7ff fdd8 	bl	8006818 <AT_ParseAP>
    return ret;
 8006c68:	e7af      	b.n	8006bca <ES_WIFI_ListAccessPoints+0x5a>
		    return ES_WIFI_STATUS_OK;
 8006c6a:	2500      	movs	r5, #0
 8006c6c:	e7ad      	b.n	8006bca <ES_WIFI_ListAccessPoints+0x5a>
	      return ES_WIFI_STATUS_MODULE_CRASH;
 8006c6e:	2506      	movs	r5, #6
 8006c70:	e7ab      	b.n	8006bca <ES_WIFI_ListAccessPoints+0x5a>
 8006c72:	bf00      	nop
 8006c74:	03050204 	.word	0x03050204
 8006c78:	08023304 	.word	0x08023304
 8006c7c:	0802330c 	.word	0x0802330c
 8006c80:	080232b0 	.word	0x080232b0
 8006c84:	080232bc 	.word	0x080232bc
 8006c88:	08023310 	.word	0x08023310

08006c8c <ES_WIFI_Connect>:
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	bf18      	it	ne
 8006c90:	2900      	cmpne	r1, #0
 8006c92:	d101      	bne.n	8006c98 <ES_WIFI_Connect+0xc>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8006c94:	2002      	movs	r0, #2
    }

    UNLOCK_WIFI();
  }
  return ret;
}
 8006c96:	4770      	bx	lr
{
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	461e      	mov	r6, r3
 8006c9e:	4617      	mov	r7, r2
    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8006ca0:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006ca4:	460a      	mov	r2, r1
 8006ca6:	491a      	ldr	r1, [pc, #104]	; (8006d10 <ES_WIFI_Connect+0x84>)
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f01a fa79 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006cae:	462a      	mov	r2, r5
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f7ff fb6c 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006cb8:	b100      	cbz	r0, 8006cbc <ES_WIFI_Connect+0x30>
}
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8006cbc:	463a      	mov	r2, r7
 8006cbe:	4915      	ldr	r1, [pc, #84]	; (8006d14 <ES_WIFI_Connect+0x88>)
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f01a fa6d 	bl	80211a0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4629      	mov	r1, r5
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff fb60 	bl	8006390 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d1f2      	bne.n	8006cba <ES_WIFI_Connect+0x2e>
        Obj->Security = SecType;
 8006cd4:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8006cd8:	4632      	mov	r2, r6
 8006cda:	490f      	ldr	r1, [pc, #60]	; (8006d18 <ES_WIFI_Connect+0x8c>)
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f01a fa5f 	bl	80211a0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ce2:	462a      	mov	r2, r5
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f7ff fb52 	bl	8006390 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d1e4      	bne.n	8006cba <ES_WIFI_Connect+0x2e>
          sprintf((char*)Obj->CmdData,"C0\r");
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <ES_WIFI_Connect+0x90>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006cf8:	462a      	mov	r2, r5
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f7ff fb47 	bl	8006390 <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d1d9      	bne.n	8006cba <ES_WIFI_Connect+0x2e>
            Obj->NetSettings.IsConnected = 1;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
 8006d0c:	e7d5      	b.n	8006cba <ES_WIFI_Connect+0x2e>
 8006d0e:	bf00      	nop
 8006d10:	08023314 	.word	0x08023314
 8006d14:	0802331c 	.word	0x0802331c
 8006d18:	08023324 	.word	0x08023324
 8006d1c:	0802332c 	.word	0x0802332c

08006d20 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8006d24:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006d28:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <ES_WIFI_IsConnected+0x30>)
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006d30:	462a      	mov	r2, r5
 8006d32:	4629      	mov	r1, r5
 8006d34:	4620      	mov	r0, r4
 8006d36:	f7ff fb2b 	bl	8006390 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8006d3a:	b110      	cbz	r0, 8006d42 <ES_WIFI_IsConnected+0x22>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8006d3c:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8006d40:	bd38      	pop	{r3, r4, r5, pc}
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8006d42:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
 8006d46:	4628      	mov	r0, r5
 8006d48:	f7ff fb1b 	bl	8006382 <AT_ParseIsConnected>
 8006d4c:	e7f6      	b.n	8006d3c <ES_WIFI_IsConnected+0x1c>
 8006d4e:	bf00      	nop
 8006d50:	08023330 	.word	0x08023330

08006d54 <ES_WIFI_Disconnect>:
  * @brief  Disconnect from a network.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj)
{
 8006d54:	b508      	push	{r3, lr}
 8006d56:	4603      	mov	r3, r0
   ES_WIFI_Status_t ret;
   LOCK_WIFI();
   sprintf((char*)Obj->CmdData,"CD\r");
 8006d58:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8006d5c:	4a04      	ldr	r2, [pc, #16]	; (8006d70 <ES_WIFI_Disconnect+0x1c>)
 8006d5e:	6810      	ldr	r0, [r2, #0]
 8006d60:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
   ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006d64:	460a      	mov	r2, r1
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff fb12 	bl	8006390 <AT_ExecuteCommand>
   UNLOCK_WIFI();
   return  ret;
}
 8006d6c:	bd08      	pop	{r3, pc}
 8006d6e:	bf00      	nop
 8006d70:	08023334 	.word	0x08023334

08006d74 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8006d78:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006d7c:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <ES_WIFI_GetNetworkSettings+0x30>)
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006d84:	462a      	mov	r2, r5
 8006d86:	4629      	mov	r1, r5
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f7ff fb01 	bl	8006390 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8006d8e:	4606      	mov	r6, r0
 8006d90:	b108      	cbz	r0, 8006d96 <ES_WIFI_GetNetworkSettings+0x22>
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
  }

  UNLOCK_WIFI();
  return ret;
}
 8006d92:	4630      	mov	r0, r6
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8006d96:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f7ff fdb0 	bl	8006900 <AT_ParseConnSettings>
 8006da0:	e7f7      	b.n	8006d92 <ES_WIFI_GetNetworkSettings+0x1e>
 8006da2:	bf00      	nop
 8006da4:	08023338 	.word	0x08023338

08006da8 <ES_WIFI_ActivateAP>:
  * @param  ip : AP IP address
  * @param  mac : AP MAC address
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ActivateAP(ES_WIFIObject_t *Obj, ES_WIFI_APConfig_t *ApConfig)
{
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	4604      	mov	r4, r0
 8006dac:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"AS=0,%s\r", ApConfig->SSID);
 8006dae:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006db2:	460a      	mov	r2, r1
 8006db4:	492b      	ldr	r1, [pc, #172]	; (8006e64 <ES_WIFI_ActivateAP+0xbc>)
 8006db6:	4628      	mov	r0, r5
 8006db8:	f01a f9f2 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7ff fae5 	bl	8006390 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	b108      	cbz	r0, 8006dce <ES_WIFI_ActivateAP+0x26>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8006dca:	4638      	mov	r0, r7
 8006dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sprintf((char*)Obj->CmdData,"A1=%c\r", (int)ApConfig->Security + '0');
 8006dce:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 8006dd2:	3230      	adds	r2, #48	; 0x30
 8006dd4:	4924      	ldr	r1, [pc, #144]	; (8006e68 <ES_WIFI_ActivateAP+0xc0>)
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f01a f9e2 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ddc:	462a      	mov	r2, r5
 8006dde:	4629      	mov	r1, r5
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7ff fad5 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006de6:	4607      	mov	r7, r0
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d1ee      	bne.n	8006dca <ES_WIFI_ActivateAP+0x22>
      sprintf((char*)Obj->CmdData,"A2=%s\r", ApConfig->Pass);
 8006dec:	f106 0221 	add.w	r2, r6, #33	; 0x21
 8006df0:	491e      	ldr	r1, [pc, #120]	; (8006e6c <ES_WIFI_ActivateAP+0xc4>)
 8006df2:	4628      	mov	r0, r5
 8006df4:	f01a f9d4 	bl	80211a0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006df8:	462a      	mov	r2, r5
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff fac7 	bl	8006390 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8006e02:	4607      	mov	r7, r0
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d1e0      	bne.n	8006dca <ES_WIFI_ActivateAP+0x22>
        sprintf((char*)Obj->CmdData,"AC=%d\r", ApConfig->Channel);
 8006e08:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8006e0c:	4918      	ldr	r1, [pc, #96]	; (8006e70 <ES_WIFI_ActivateAP+0xc8>)
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f01a f9c6 	bl	80211a0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006e14:	462a      	mov	r2, r5
 8006e16:	4629      	mov	r1, r5
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7ff fab9 	bl	8006390 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8006e1e:	4607      	mov	r7, r0
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d1d2      	bne.n	8006dca <ES_WIFI_ActivateAP+0x22>
          sprintf((char*)Obj->CmdData,"AT=%d\r", ApConfig->MaxConnections);
 8006e24:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 8006e28:	4912      	ldr	r1, [pc, #72]	; (8006e74 <ES_WIFI_ActivateAP+0xcc>)
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f01a f9b8 	bl	80211a0 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006e30:	462a      	mov	r2, r5
 8006e32:	4629      	mov	r1, r5
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff faab 	bl	8006390 <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8006e3a:	4607      	mov	r7, r0
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d1c4      	bne.n	8006dca <ES_WIFI_ActivateAP+0x22>
            sprintf((char*)Obj->CmdData,"A0\r");
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <ES_WIFI_ActivateAP+0xd0>)
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7ff fa9f 	bl	8006390 <AT_ExecuteCommand>
            if(ret == ES_WIFI_STATUS_OK)
 8006e52:	4607      	mov	r7, r0
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d1b8      	bne.n	8006dca <ES_WIFI_ActivateAP+0x22>
              if(strstr((char *)Obj->CmdData, "[AP     ]"))
 8006e58:	4908      	ldr	r1, [pc, #32]	; (8006e7c <ES_WIFI_ActivateAP+0xd4>)
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f01a fa2a 	bl	80212b4 <strstr>
 8006e60:	e7b3      	b.n	8006dca <ES_WIFI_ActivateAP+0x22>
 8006e62:	bf00      	nop
 8006e64:	0802333c 	.word	0x0802333c
 8006e68:	08023348 	.word	0x08023348
 8006e6c:	08023350 	.word	0x08023350
 8006e70:	08023358 	.word	0x08023358
 8006e74:	08023360 	.word	0x08023360
 8006e78:	08023368 	.word	0x08023368
 8006e7c:	0802336c 	.word	0x0802336c

08006e80 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	4604      	mov	r4, r0
 8006e86:	460d      	mov	r5, r1
  ES_WIFI_Status_t ret ;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8006e88:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <ES_WIFI_GetMACAddress+0x3c>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006e94:	460a      	mov	r2, r1
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7ff fa7a 	bl	8006390 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	b110      	cbz	r0, 8006ea6 <ES_WIFI_GetMACAddress+0x26>
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
    ParseMAC(ptr, mac) ;
  }
  UNLOCK_WIFI();
  return ret;
}
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	b002      	add	sp, #8
 8006ea4:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
 8006ea6:	aa01      	add	r2, sp, #4
 8006ea8:	4905      	ldr	r1, [pc, #20]	; (8006ec0 <ES_WIFI_GetMACAddress+0x40>)
 8006eaa:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8006eae:	f01a fa3f 	bl	8021330 <strtok_r>
    ParseMAC(ptr, mac) ;
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f7ff fa22 	bl	80062fc <ParseMAC>
 8006eb8:	e7f2      	b.n	8006ea0 <ES_WIFI_GetMACAddress+0x20>
 8006eba:	bf00      	nop
 8006ebc:	08023378 	.word	0x08023378
 8006ec0:	0802337c 	.word	0x0802337c

08006ec4 <ES_WIFI_Ping>:
  * @param  Obj: pointer to module handle
  * @param  Ping: ping structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Ping(ES_WIFIObject_t *Obj, uint8_t *address, uint16_t count, uint16_t interval_ms, int32_t result[])
{
 8006ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	4605      	mov	r5, r0
 8006ecc:	460c      	mov	r4, r1
 8006ece:	4617      	mov	r7, r2
 8006ed0:	4698      	mov	r8, r3
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  memset(result,-1,sizeof(int)*count);
 8006ed2:	0092      	lsls	r2, r2, #2
 8006ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed8:	9808      	ldr	r0, [sp, #32]
 8006eda:	f019 fccd 	bl	8020878 <memset>
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 8006ede:	f505 7694 	add.w	r6, r5, #296	; 0x128
          address[2],address[3]);
 8006ee2:	78a3      	ldrb	r3, [r4, #2]
 8006ee4:	78e2      	ldrb	r2, [r4, #3]
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 8006ee6:	9201      	str	r2, [sp, #4]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	7863      	ldrb	r3, [r4, #1]
 8006eec:	7822      	ldrb	r2, [r4, #0]
 8006eee:	491f      	ldr	r1, [pc, #124]	; (8006f6c <ES_WIFI_Ping+0xa8>)
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f01a f955 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ef6:	4632      	mov	r2, r6
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	f7ff fa48 	bl	8006390 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8006f00:	4604      	mov	r4, r0
 8006f02:	b118      	cbz	r0, 8006f0c <ES_WIFI_Ping+0x48>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8006f04:	4620      	mov	r0, r4
 8006f06:	b002      	add	sp, #8
 8006f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"T2=%d\r", count);
 8006f0c:	463a      	mov	r2, r7
 8006f0e:	4918      	ldr	r1, [pc, #96]	; (8006f70 <ES_WIFI_Ping+0xac>)
 8006f10:	4630      	mov	r0, r6
 8006f12:	f01a f945 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f16:	4632      	mov	r2, r6
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f7ff fa38 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8006f20:	4604      	mov	r4, r0
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d1ee      	bne.n	8006f04 <ES_WIFI_Ping+0x40>
      sprintf((char*)Obj->CmdData,"T3=%d\r", interval_ms);
 8006f26:	4642      	mov	r2, r8
 8006f28:	4912      	ldr	r1, [pc, #72]	; (8006f74 <ES_WIFI_Ping+0xb0>)
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f01a f938 	bl	80211a0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f30:	4632      	mov	r2, r6
 8006f32:	4631      	mov	r1, r6
 8006f34:	4628      	mov	r0, r5
 8006f36:	f7ff fa2b 	bl	8006390 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d1e1      	bne.n	8006f04 <ES_WIFI_Ping+0x40>
        sprintf((char*)Obj->CmdData,"T0=\r");
 8006f40:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <ES_WIFI_Ping+0xb4>)
 8006f42:	6818      	ldr	r0, [r3, #0]
 8006f44:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8006f48:	791b      	ldrb	r3, [r3, #4]
 8006f4a:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f4e:	4632      	mov	r2, r6
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	f7ff fa1c 	bl	8006390 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8006f58:	4604      	mov	r4, r0
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d1d2      	bne.n	8006f04 <ES_WIFI_Ping+0x40>
         AT_ParsePing(result,count,(char*)Obj->CmdData);
 8006f5e:	4632      	mov	r2, r6
 8006f60:	4639      	mov	r1, r7
 8006f62:	9808      	ldr	r0, [sp, #32]
 8006f64:	f7ff fb02 	bl	800656c <AT_ParsePing>
 8006f68:	e7cc      	b.n	8006f04 <ES_WIFI_Ping+0x40>
 8006f6a:	bf00      	nop
 8006f6c:	08023380 	.word	0x08023380
 8006f70:	08023390 	.word	0x08023390
 8006f74:	08023398 	.word	0x08023398
 8006f78:	080233a0 	.word	0x080233a0

08006f7c <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	4604      	mov	r4, r0
 8006f82:	4616      	mov	r6, r2
  ES_WIFI_Status_t ret;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8006f84:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8006f88:	460a      	mov	r2, r1
 8006f8a:	490c      	ldr	r1, [pc, #48]	; (8006fbc <ES_WIFI_DNS_LookUp+0x40>)
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f01a f907 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f92:	462a      	mov	r2, r5
 8006f94:	4629      	mov	r1, r5
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7ff f9fa 	bl	8006390 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	b110      	cbz	r0, 8006fa6 <ES_WIFI_DNS_LookUp+0x2a>
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
    ParseIP(ptr, ipaddress);
  }
  UNLOCK_WIFI();
  return ret;
}
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	b002      	add	sp, #8
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
 8006fa6:	aa01      	add	r2, sp, #4
 8006fa8:	4905      	ldr	r1, [pc, #20]	; (8006fc0 <ES_WIFI_DNS_LookUp+0x44>)
 8006faa:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8006fae:	f01a f9bf 	bl	8021330 <strtok_r>
    ParseIP(ptr, ipaddress);
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	f7ff f9be 	bl	8006334 <ParseIP>
 8006fb8:	e7f2      	b.n	8006fa0 <ES_WIFI_DNS_LookUp+0x24>
 8006fba:	bf00      	nop
 8006fbc:	080233a8 	.word	0x080233a8
 8006fc0:	08023468 	.word	0x08023468

08006fc4 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	4605      	mov	r5, r0
 8006fca:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8006fcc:	780b      	ldrb	r3, [r1, #0]
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	bf18      	it	ne
 8006fd2:	2b00      	cmpne	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <ES_WIFI_StartClientConnection+0x18>
 8006fd6:	888b      	ldrh	r3, [r1, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d079      	beq.n	80070d0 <ES_WIFI_StartClientConnection+0x10c>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8006fdc:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8006fe0:	78b2      	ldrb	r2, [r6, #2]
 8006fe2:	493c      	ldr	r1, [pc, #240]	; (80070d4 <ES_WIFI_StartClientConnection+0x110>)
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f01a f8db 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006fea:	4622      	mov	r2, r4
 8006fec:	4621      	mov	r1, r4
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f7ff f9ce 	bl	8006390 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8006ff4:	b1c0      	cbz	r0, 8007028 <ES_WIFI_StartClientConnection+0x64>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8006ff6:	b310      	cbz	r0, 800703e <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8006ff8:	b920      	cbnz	r0, 8007004 <ES_WIFI_StartClientConnection+0x40>
 8006ffa:	7833      	ldrb	r3, [r6, #0]
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	bf18      	it	ne
 8007000:	2b00      	cmpne	r3, #0
 8007002:	d027      	beq.n	8007054 <ES_WIFI_StartClientConnection+0x90>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8007004:	b920      	cbnz	r0, 8007010 <ES_WIFI_StartClientConnection+0x4c>
 8007006:	7833      	ldrb	r3, [r6, #0]
 8007008:	2b03      	cmp	r3, #3
 800700a:	bf18      	it	ne
 800700c:	2b00      	cmpne	r3, #0
 800700e:	d02c      	beq.n	800706a <ES_WIFI_StartClientConnection+0xa6>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8007010:	b910      	cbnz	r0, 8007018 <ES_WIFI_StartClientConnection+0x54>
 8007012:	7833      	ldrb	r3, [r6, #0]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d038      	beq.n	800708a <ES_WIFI_StartClientConnection+0xc6>
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8007018:	b910      	cbnz	r0, 8007020 <ES_WIFI_StartClientConnection+0x5c>
 800701a:	7833      	ldrb	r3, [r6, #0]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d03f      	beq.n	80070a0 <ES_WIFI_StartClientConnection+0xdc>
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 8007020:	2800      	cmp	r0, #0
 8007022:	d049      	beq.n	80070b8 <ES_WIFI_StartClientConnection+0xf4>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8007024:	b002      	add	sp, #8
 8007026:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8007028:	7832      	ldrb	r2, [r6, #0]
 800702a:	492b      	ldr	r1, [pc, #172]	; (80070d8 <ES_WIFI_StartClientConnection+0x114>)
 800702c:	4620      	mov	r0, r4
 800702e:	f01a f8b7 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007032:	4622      	mov	r2, r4
 8007034:	4621      	mov	r1, r4
 8007036:	4628      	mov	r0, r5
 8007038:	f7ff f9aa 	bl	8006390 <AT_ExecuteCommand>
 800703c:	e7db      	b.n	8006ff6 <ES_WIFI_StartClientConnection+0x32>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800703e:	88f2      	ldrh	r2, [r6, #6]
 8007040:	4926      	ldr	r1, [pc, #152]	; (80070dc <ES_WIFI_StartClientConnection+0x118>)
 8007042:	4620      	mov	r0, r4
 8007044:	f01a f8ac 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007048:	4622      	mov	r2, r4
 800704a:	4621      	mov	r1, r4
 800704c:	4628      	mov	r0, r5
 800704e:	f7ff f99f 	bl	8006390 <AT_ExecuteCommand>
 8007052:	e7d1      	b.n	8006ff8 <ES_WIFI_StartClientConnection+0x34>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8007054:	88b2      	ldrh	r2, [r6, #4]
 8007056:	4922      	ldr	r1, [pc, #136]	; (80070e0 <ES_WIFI_StartClientConnection+0x11c>)
 8007058:	4620      	mov	r0, r4
 800705a:	f01a f8a1 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800705e:	4622      	mov	r2, r4
 8007060:	4621      	mov	r1, r4
 8007062:	4628      	mov	r0, r5
 8007064:	f7ff f994 	bl	8006390 <AT_ExecuteCommand>
 8007068:	e7cc      	b.n	8007004 <ES_WIFI_StartClientConnection+0x40>
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800706a:	7ab3      	ldrb	r3, [r6, #10]
 800706c:	7af2      	ldrb	r2, [r6, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800706e:	9201      	str	r2, [sp, #4]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	7a73      	ldrb	r3, [r6, #9]
 8007074:	7a32      	ldrb	r2, [r6, #8]
 8007076:	491b      	ldr	r1, [pc, #108]	; (80070e4 <ES_WIFI_StartClientConnection+0x120>)
 8007078:	4620      	mov	r0, r4
 800707a:	f01a f891 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800707e:	4622      	mov	r2, r4
 8007080:	4621      	mov	r1, r4
 8007082:	4628      	mov	r0, r5
 8007084:	f7ff f984 	bl	8006390 <AT_ExecuteCommand>
 8007088:	e7c2      	b.n	8007010 <ES_WIFI_StartClientConnection+0x4c>
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 800708a:	7872      	ldrb	r2, [r6, #1]
 800708c:	4916      	ldr	r1, [pc, #88]	; (80070e8 <ES_WIFI_StartClientConnection+0x124>)
 800708e:	4620      	mov	r0, r4
 8007090:	f01a f886 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007094:	4622      	mov	r2, r4
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f7ff f979 	bl	8006390 <AT_ExecuteCommand>
 800709e:	e7bb      	b.n	8007018 <ES_WIFI_StartClientConnection+0x54>
    sprintf((char*)Obj->CmdData,"PB=0\r");
 80070a0:	4b12      	ldr	r3, [pc, #72]	; (80070ec <ES_WIFI_StartClientConnection+0x128>)
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80070a8:	889b      	ldrh	r3, [r3, #4]
 80070aa:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80070ac:	4622      	mov	r2, r4
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f7ff f96d 	bl	8006390 <AT_ExecuteCommand>
 80070b6:	e7b3      	b.n	8007020 <ES_WIFI_StartClientConnection+0x5c>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <ES_WIFI_StartClientConnection+0x12c>)
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80070c0:	889b      	ldrh	r3, [r3, #4]
 80070c2:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80070c4:	4622      	mov	r2, r4
 80070c6:	4621      	mov	r1, r4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f7ff f961 	bl	8006390 <AT_ExecuteCommand>
 80070ce:	e7a9      	b.n	8007024 <ES_WIFI_StartClientConnection+0x60>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80070d0:	2002      	movs	r0, #2
 80070d2:	e7a7      	b.n	8007024 <ES_WIFI_StartClientConnection+0x60>
 80070d4:	080233b0 	.word	0x080233b0
 80070d8:	080233b8 	.word	0x080233b8
 80070dc:	080233c0 	.word	0x080233c0
 80070e0:	080233c8 	.word	0x080233c8
 80070e4:	080233d0 	.word	0x080233d0
 80070e8:	080233e0 	.word	0x080233e0
 80070ec:	080233e8 	.word	0x080233e8
 80070f0:	080233f0 	.word	0x080233f0

080070f4 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80070f8:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80070fc:	788a      	ldrb	r2, [r1, #2]
 80070fe:	490c      	ldr	r1, [pc, #48]	; (8007130 <ES_WIFI_StopClientConnection+0x3c>)
 8007100:	4628      	mov	r0, r5
 8007102:	f01a f84d 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007106:	462a      	mov	r2, r5
 8007108:	4629      	mov	r1, r5
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff f940 	bl	8006390 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8007110:	b100      	cbz	r0, 8007114 <ES_WIFI_StopClientConnection+0x20>
    sprintf((char*)Obj->CmdData,"P6=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  UNLOCK_WIFI();
  return ret;
}
 8007112:	bd38      	pop	{r3, r4, r5, pc}
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8007114:	4b07      	ldr	r3, [pc, #28]	; (8007134 <ES_WIFI_StopClientConnection+0x40>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 800711c:	889b      	ldrh	r3, [r3, #4]
 800711e:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007122:	462a      	mov	r2, r5
 8007124:	4629      	mov	r1, r5
 8007126:	4620      	mov	r0, r4
 8007128:	f7ff f932 	bl	8006390 <AT_ExecuteCommand>
 800712c:	e7f1      	b.n	8007112 <ES_WIFI_StopClientConnection+0x1e>
 800712e:	bf00      	nop
 8007130:	080233b0 	.word	0x080233b0
 8007134:	080233f8 	.word	0x080233f8

08007138 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4605      	mov	r5, r0
 800713c:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800713e:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8007142:	788a      	ldrb	r2, [r1, #2]
 8007144:	492c      	ldr	r1, [pc, #176]	; (80071f8 <ES_WIFI_StartServerSingleConn+0xc0>)
 8007146:	4620      	mov	r0, r4
 8007148:	f01a f82a 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800714c:	4622      	mov	r2, r4
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f7ff f91d 	bl	8006390 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8007156:	4602      	mov	r2, r0
 8007158:	b928      	cbnz	r0, 8007166 <ES_WIFI_StartServerSingleConn+0x2e>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 800715a:	7833      	ldrb	r3, [r6, #0]
 800715c:	3b01      	subs	r3, #1
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	d802      	bhi.n	800716a <ES_WIFI_StartServerSingleConn+0x32>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8007164:	b18a      	cbz	r2, 800718a <ES_WIFI_StartServerSingleConn+0x52>
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 8007166:	4610      	mov	r0, r2
 8007168:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <ES_WIFI_StartServerSingleConn+0xc4>)
 800716c:	cb03      	ldmia	r3!, {r0, r1}
 800716e:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8007172:	6061      	str	r1, [r4, #4]
 8007174:	881a      	ldrh	r2, [r3, #0]
 8007176:	789b      	ldrb	r3, [r3, #2]
 8007178:	8122      	strh	r2, [r4, #8]
 800717a:	72a3      	strb	r3, [r4, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800717c:	4622      	mov	r2, r4
 800717e:	4621      	mov	r1, r4
 8007180:	4628      	mov	r0, r5
 8007182:	f7ff f905 	bl	8006390 <AT_ExecuteCommand>
 8007186:	4602      	mov	r2, r0
 8007188:	e7ec      	b.n	8007164 <ES_WIFI_StartServerSingleConn+0x2c>
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800718a:	7832      	ldrb	r2, [r6, #0]
 800718c:	491c      	ldr	r1, [pc, #112]	; (8007200 <ES_WIFI_StartServerSingleConn+0xc8>)
 800718e:	4620      	mov	r0, r4
 8007190:	f01a f806 	bl	80211a0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007194:	4622      	mov	r2, r4
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f7ff f8f9 	bl	8006390 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800719e:	4602      	mov	r2, r0
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d1e0      	bne.n	8007166 <ES_WIFI_StartServerSingleConn+0x2e>
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 80071a4:	7c32      	ldrb	r2, [r6, #16]
 80071a6:	4917      	ldr	r1, [pc, #92]	; (8007204 <ES_WIFI_StartServerSingleConn+0xcc>)
 80071a8:	4620      	mov	r0, r4
 80071aa:	f019 fff9 	bl	80211a0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80071ae:	4622      	mov	r2, r4
 80071b0:	4621      	mov	r1, r4
 80071b2:	4628      	mov	r0, r5
 80071b4:	f7ff f8ec 	bl	8006390 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 80071b8:	4602      	mov	r2, r0
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d1d3      	bne.n	8007166 <ES_WIFI_StartServerSingleConn+0x2e>
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80071be:	88f2      	ldrh	r2, [r6, #6]
 80071c0:	4911      	ldr	r1, [pc, #68]	; (8007208 <ES_WIFI_StartServerSingleConn+0xd0>)
 80071c2:	4620      	mov	r0, r4
 80071c4:	f019 ffec 	bl	80211a0 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80071c8:	4622      	mov	r2, r4
 80071ca:	4621      	mov	r1, r4
 80071cc:	4628      	mov	r0, r5
 80071ce:	f7ff f8df 	bl	8006390 <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 80071d2:	4602      	mov	r2, r0
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1c6      	bne.n	8007166 <ES_WIFI_StartServerSingleConn+0x2e>
            sprintf((char*)Obj->CmdData,"P5=11\r");
 80071d8:	4b0c      	ldr	r3, [pc, #48]	; (800720c <ES_WIFI_StartServerSingleConn+0xd4>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80071e0:	889a      	ldrh	r2, [r3, #4]
 80071e2:	799b      	ldrb	r3, [r3, #6]
 80071e4:	80a2      	strh	r2, [r4, #4]
 80071e6:	71a3      	strb	r3, [r4, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80071e8:	4622      	mov	r2, r4
 80071ea:	4621      	mov	r1, r4
 80071ec:	4628      	mov	r0, r5
 80071ee:	f7ff f8cf 	bl	8006390 <AT_ExecuteCommand>
 80071f2:	4602      	mov	r2, r0
 80071f4:	e7b7      	b.n	8007166 <ES_WIFI_StartServerSingleConn+0x2e>
 80071f6:	bf00      	nop
 80071f8:	080233b0 	.word	0x080233b0
 80071fc:	08023400 	.word	0x08023400
 8007200:	080233b8 	.word	0x080233b8
 8007204:	0802340c 	.word	0x0802340c
 8007208:	080233c0 	.word	0x080233c0
 800720c:	08023414 	.word	0x08023414

08007210 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	b083      	sub	sp, #12
 8007216:	4605      	mov	r5, r0
 8007218:	460f      	mov	r7, r1
 800721a:	4692      	mov	sl, r2
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;
  char          *saveptr;

  tstart=HAL_GetTick();
 800721c:	f002 f88a 	bl	8009334 <HAL_GetTick>
 8007220:	4680      	mov	r8, r0
  tlast=tstart+timeout;
  if (tlast < tstart )
 8007222:	eb10 0907 	adds.w	r9, r0, r7
 8007226:	d301      	bcc.n	800722c <ES_WIFI_WaitServerConnection+0x1c>
  {
	   tstart=0;
 8007228:	f04f 0800 	mov.w	r8, #0
 800722c:	2600      	movs	r6, #0
 800722e:	e02d      	b.n	800728c <ES_WIFI_WaitServerConnection+0x7c>
        if(strstr((char *)Obj->CmdData, "Accepted"))
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8007230:	4946      	ldr	r1, [pc, #280]	; (800734c <ES_WIFI_WaitServerConnection+0x13c>)
 8007232:	4620      	mov	r0, r4
 8007234:	f01a f83e 	bl	80212b4 <strstr>
 8007238:	2800      	cmp	r0, #0
 800723a:	f000 8081 	beq.w	8007340 <ES_WIFI_WaitServerConnection+0x130>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800723e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8007242:	2100      	movs	r1, #0
 8007244:	4620      	mov	r0, r4
 8007246:	f019 fb17 	bl	8020878 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 800724a:	4b41      	ldr	r3, [pc, #260]	; (8007350 <ES_WIFI_WaitServerConnection+0x140>)
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007252:	4622      	mov	r2, r4
 8007254:	4621      	mov	r1, r4
 8007256:	4628      	mov	r0, r5
 8007258:	f7ff f89a 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800725c:	4683      	mov	fp, r0
 800725e:	2800      	cmp	r0, #0
 8007260:	d171      	bne.n	8007346 <ES_WIFI_WaitServerConnection+0x136>
    {
      if(accepted && (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 8007262:	b136      	cbz	r6, 8007272 <ES_WIFI_WaitServerConnection+0x62>
 8007264:	220c      	movs	r2, #12
 8007266:	493b      	ldr	r1, [pc, #236]	; (8007354 <ES_WIFI_WaitServerConnection+0x144>)
 8007268:	4620      	mov	r0, r4
 800726a:	f019 fffc 	bl	8021266 <strncmp>
 800726e:	2800      	cmp	r0, #0
 8007270:	d133      	bne.n	80072da <ES_WIFI_WaitServerConnection+0xca>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 8007272:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8007276:	2064      	movs	r0, #100	; 0x64
 8007278:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 800727a:	f002 f85b 	bl	8009334 <HAL_GetTick>
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800727e:	b12f      	cbz	r7, 800728c <ES_WIFI_WaitServerConnection+0x7c>
 8007280:	464b      	mov	r3, r9
 8007282:	45c1      	cmp	r9, r8
 8007284:	bf38      	it	cc
 8007286:	4643      	movcc	r3, r8
 8007288:	4283      	cmp	r3, r0
 800728a:	d950      	bls.n	800732e <ES_WIFI_WaitServerConnection+0x11e>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800728c:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8007290:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8007294:	2100      	movs	r1, #0
 8007296:	4620      	mov	r0, r4
 8007298:	f019 faee 	bl	8020878 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 800729c:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <ES_WIFI_WaitServerConnection+0x148>)
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80072a4:	4622      	mov	r2, r4
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7ff f871 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d140      	bne.n	8007334 <ES_WIFI_WaitServerConnection+0x124>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80072b2:	492a      	ldr	r1, [pc, #168]	; (800735c <ES_WIFI_WaitServerConnection+0x14c>)
 80072b4:	4620      	mov	r0, r4
 80072b6:	f019 fffd 	bl	80212b4 <strstr>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d0bf      	beq.n	800723e <ES_WIFI_WaitServerConnection+0x2e>
 80072be:	4928      	ldr	r1, [pc, #160]	; (8007360 <ES_WIFI_WaitServerConnection+0x150>)
 80072c0:	4620      	mov	r0, r4
 80072c2:	f019 fff7 	bl	80212b4 <strstr>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d0b9      	beq.n	800723e <ES_WIFI_WaitServerConnection+0x2e>
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80072ca:	4926      	ldr	r1, [pc, #152]	; (8007364 <ES_WIFI_WaitServerConnection+0x154>)
 80072cc:	4620      	mov	r0, r4
 80072ce:	f019 fff1 	bl	80212b4 <strstr>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d0ac      	beq.n	8007230 <ES_WIFI_WaitServerConnection+0x20>
         accepted=true;// flushing out the MR messages
 80072d6:	2601      	movs	r6, #1
 80072d8:	e7b1      	b.n	800723e <ES_WIFI_WaitServerConnection+0x2e>
        ptr = strtok_r((char *)Obj->CmdData + 2, ",",&saveptr);
 80072da:	4c23      	ldr	r4, [pc, #140]	; (8007368 <ES_WIFI_WaitServerConnection+0x158>)
 80072dc:	aa01      	add	r2, sp, #4
 80072de:	4621      	mov	r1, r4
 80072e0:	f505 7095 	add.w	r0, r5, #298	; 0x12a
 80072e4:	f01a f824 	bl	8021330 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //port
 80072e8:	aa01      	add	r2, sp, #4
 80072ea:	4621      	mov	r1, r4
 80072ec:	2000      	movs	r0, #0
 80072ee:	f01a f81f 	bl	8021330 <strtok_r>
        ParseIP((char *)ptr, conn->RemoteIP);
 80072f2:	f10a 0108 	add.w	r1, sl, #8
 80072f6:	f7ff f81d 	bl	8006334 <ParseIP>
        ptr = strtok_r(0, ",",&saveptr); //port
 80072fa:	aa01      	add	r2, sp, #4
 80072fc:	4621      	mov	r1, r4
 80072fe:	2000      	movs	r0, #0
 8007300:	f01a f816 	bl	8021330 <strtok_r>
        conn->LocalPort=ParseNumber(ptr,0);
 8007304:	2100      	movs	r1, #0
 8007306:	f7fe ffd3 	bl	80062b0 <ParseNumber>
 800730a:	f8aa 0006 	strh.w	r0, [sl, #6]
        ptr = strtok_r(0, ",",&saveptr); //ip
 800730e:	aa01      	add	r2, sp, #4
 8007310:	4621      	mov	r1, r4
 8007312:	2000      	movs	r0, #0
 8007314:	f01a f80c 	bl	8021330 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //remote port
 8007318:	aa01      	add	r2, sp, #4
 800731a:	4621      	mov	r1, r4
 800731c:	2000      	movs	r0, #0
 800731e:	f01a f807 	bl	8021330 <strtok_r>
        conn->RemotePort=ParseNumber(ptr,0);
 8007322:	2100      	movs	r1, #0
 8007324:	f7fe ffc4 	bl	80062b0 <ParseNumber>
 8007328:	f8aa 0004 	strh.w	r0, [sl, #4]
        return ES_WIFI_STATUS_OK;
 800732c:	e004      	b.n	8007338 <ES_WIFI_WaitServerConnection+0x128>
  return ES_WIFI_STATUS_TIMEOUT;
 800732e:	f04f 0b03 	mov.w	fp, #3
 8007332:	e001      	b.n	8007338 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 8007334:	f04f 0b02 	mov.w	fp, #2
}
 8007338:	4658      	mov	r0, fp
 800733a:	b003      	add	sp, #12
 800733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return ES_WIFI_STATUS_ERROR;
 8007340:	f04f 0b02 	mov.w	fp, #2
 8007344:	e7f8      	b.n	8007338 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 8007346:	f04f 0b02 	mov.w	fp, #2
 800734a:	e7f5      	b.n	8007338 <ES_WIFI_WaitServerConnection+0x128>
 800734c:	08023438 	.word	0x08023438
 8007350:	08023448 	.word	0x08023448
 8007354:	0802344c 	.word	0x0802344c
 8007358:	0802330c 	.word	0x0802330c
 800735c:	0802341c 	.word	0x0802341c
 8007360:	08023424 	.word	0x08023424
 8007364:	0802342c 	.word	0x0802342c
 8007368:	080232f0 	.word	0x080232f0

0800736c <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4604      	mov	r4, r0
 8007370:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8007372:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007376:	490d      	ldr	r1, [pc, #52]	; (80073ac <ES_WIFI_CloseServerConnection+0x40>)
 8007378:	4628      	mov	r0, r5
 800737a:	f019 ff11 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800737e:	462a      	mov	r2, r5
 8007380:	4629      	mov	r1, r5
 8007382:	4620      	mov	r0, r4
 8007384:	f7ff f804 	bl	8006390 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8007388:	b100      	cbz	r0, 800738c <ES_WIFI_CloseServerConnection+0x20>
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 800738a:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 800738c:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <ES_WIFI_CloseServerConnection+0x44>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8007394:	889a      	ldrh	r2, [r3, #4]
 8007396:	799b      	ldrb	r3, [r3, #6]
 8007398:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
 800739c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80073a0:	462a      	mov	r2, r5
 80073a2:	4629      	mov	r1, r5
 80073a4:	4620      	mov	r0, r4
 80073a6:	f7fe fff3 	bl	8006390 <AT_ExecuteCommand>
  return ret;
 80073aa:	e7ee      	b.n	800738a <ES_WIFI_CloseServerConnection+0x1e>
 80073ac:	080233b0 	.word	0x080233b0
 80073b0:	0802345c 	.word	0x0802345c

080073b4 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4604      	mov	r4, r0
 80073b8:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80073ba:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80073be:	490c      	ldr	r1, [pc, #48]	; (80073f0 <ES_WIFI_StopServerSingleConn+0x3c>)
 80073c0:	4628      	mov	r0, r5
 80073c2:	f019 feed 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80073c6:	462a      	mov	r2, r5
 80073c8:	4629      	mov	r1, r5
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7fe ffe0 	bl	8006390 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80073d0:	b100      	cbz	r0, 80073d4 <ES_WIFI_StopServerSingleConn+0x20>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <ES_WIFI_StopServerSingleConn+0x40>)
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 80073dc:	889b      	ldrh	r3, [r3, #4]
 80073de:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80073e2:	462a      	mov	r2, r5
 80073e4:	4629      	mov	r1, r5
 80073e6:	4620      	mov	r0, r4
 80073e8:	f7fe ffd2 	bl	8006390 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80073ec:	e7f1      	b.n	80073d2 <ES_WIFI_StopServerSingleConn+0x1e>
 80073ee:	bf00      	nop
 80073f0:	080233b0 	.word	0x080233b0
 80073f4:	08023464 	.word	0x08023464

080073f8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	4605      	mov	r5, r0
 8007400:	4690      	mov	r8, r2
 8007402:	461c      	mov	r4, r3
 8007404:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007408:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 800740c:	f1b9 0f00 	cmp.w	r9, #0
 8007410:	d101      	bne.n	8007416 <ES_WIFI_SendData+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8007412:	f04f 0901 	mov.w	r9, #1
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8007416:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 800741a:	d301      	bcc.n	8007420 <ES_WIFI_SendData+0x28>
 800741c:	f44f 6496 	mov.w	r4, #1200	; 0x4b0

  *SentLen = Reqlen;
 8007420:	f8aa 4000 	strh.w	r4, [sl]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8007424:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8007428:	460a      	mov	r2, r1
 800742a:	491c      	ldr	r1, [pc, #112]	; (800749c <ES_WIFI_SendData+0xa4>)
 800742c:	4630      	mov	r0, r6
 800742e:	f019 feb7 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007432:	4632      	mov	r2, r6
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	f7fe ffaa 	bl	8006390 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800743c:	4607      	mov	r7, r0
 800743e:	b128      	cbz	r0, 800744c <ES_WIFI_SendData+0x54>
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8007440:	2f02      	cmp	r7, #2
 8007442:	d026      	beq.n	8007492 <ES_WIFI_SendData+0x9a>
  {
    *SentLen = 0;
  }
  UNLOCK_WIFI();
  return ret;
}
 8007444:	4638      	mov	r0, r7
 8007446:	b002      	add	sp, #8
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800744c:	464a      	mov	r2, r9
 800744e:	4914      	ldr	r1, [pc, #80]	; (80074a0 <ES_WIFI_SendData+0xa8>)
 8007450:	4630      	mov	r0, r6
 8007452:	f019 fea5 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007456:	4632      	mov	r2, r6
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	f7fe ff98 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007460:	4607      	mov	r7, r0
 8007462:	2800      	cmp	r0, #0
 8007464:	d1ec      	bne.n	8007440 <ES_WIFI_SendData+0x48>
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8007466:	4622      	mov	r2, r4
 8007468:	490e      	ldr	r1, [pc, #56]	; (80074a4 <ES_WIFI_SendData+0xac>)
 800746a:	4630      	mov	r0, r6
 800746c:	f019 fe98 	bl	80211a0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8007470:	9600      	str	r6, [sp, #0]
 8007472:	4623      	mov	r3, r4
 8007474:	4642      	mov	r2, r8
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	f7ff f803 	bl	8006484 <AT_RequestSendData>
      if(ret == ES_WIFI_STATUS_OK)
 800747e:	4607      	mov	r7, r0
 8007480:	2800      	cmp	r0, #0
 8007482:	d1dd      	bne.n	8007440 <ES_WIFI_SendData+0x48>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8007484:	4908      	ldr	r1, [pc, #32]	; (80074a8 <ES_WIFI_SendData+0xb0>)
 8007486:	4630      	mov	r0, r6
 8007488:	f019 ff14 	bl	80212b4 <strstr>
 800748c:	2800      	cmp	r0, #0
 800748e:	d0d7      	beq.n	8007440 <ES_WIFI_SendData+0x48>
          ret = ES_WIFI_STATUS_ERROR;
 8007490:	2702      	movs	r7, #2
    *SentLen = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	f8aa 3000 	strh.w	r3, [sl]
 8007498:	e7d4      	b.n	8007444 <ES_WIFI_SendData+0x4c>
 800749a:	bf00      	nop
 800749c:	080233b0 	.word	0x080233b0
 80074a0:	0802346c 	.word	0x0802346c
 80074a4:	08023474 	.word	0x08023474
 80074a8:	08023480 	.word	0x08023480

080074ac <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 80074ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	4606      	mov	r6, r0
 80074b4:	4690      	mov	r8, r2
 80074b6:	461f      	mov	r7, r3
 80074b8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80074bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80074c0:	f1b9 0f00 	cmp.w	r9, #0
 80074c4:	d101      	bne.n	80074ca <ES_WIFI_SendDataTo+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80074c6:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80074ca:	f506 7594 	add.w	r5, r6, #296	; 0x128
 80074ce:	460a      	mov	r2, r1
 80074d0:	493d      	ldr	r1, [pc, #244]	; (80075c8 <ES_WIFI_SendDataTo+0x11c>)
 80074d2:	4628      	mov	r0, r5
 80074d4:	f019 fe64 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80074d8:	462a      	mov	r2, r5
 80074da:	4629      	mov	r1, r5
 80074dc:	4630      	mov	r0, r6
 80074de:	f7fe ff57 	bl	8006390 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80074e2:	4604      	mov	r4, r0
 80074e4:	b300      	cbz	r0, 8007528 <ES_WIFI_SendDataTo+0x7c>
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 80074e6:	b364      	cbz	r4, 8007542 <ES_WIFI_SendDataTo+0x96>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80074e8:	2c00      	cmp	r4, #0
 80074ea:	d037      	beq.n	800755c <ES_WIFI_SendDataTo+0xb0>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80074ec:	b924      	cbnz	r4, 80074f8 <ES_WIFI_SendDataTo+0x4c>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 80074ee:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
 80074f2:	d301      	bcc.n	80074f8 <ES_WIFI_SendDataTo+0x4c>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80074f4:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 80074f8:	2c00      	cmp	r4, #0
 80074fa:	d044      	beq.n	8007586 <ES_WIFI_SendDataTo+0xda>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 80074fc:	2c00      	cmp	r4, #0
 80074fe:	d04e      	beq.n	800759e <ES_WIFI_SendDataTo+0xf2>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8007500:	2c00      	cmp	r4, #0
 8007502:	d15a      	bne.n	80075ba <ES_WIFI_SendDataTo+0x10e>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8007504:	4931      	ldr	r1, [pc, #196]	; (80075cc <ES_WIFI_SendDataTo+0x120>)
 8007506:	4628      	mov	r0, r5
 8007508:	f019 fed4 	bl	80212b4 <strstr>
    if(ptr != NULL)
 800750c:	2800      	cmp	r0, #0
 800750e:	d054      	beq.n	80075ba <ES_WIFI_SendDataTo+0x10e>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 8007510:	f506 66d4 	add.w	r6, r6, #1696	; 0x6a0
 8007514:	4286      	cmp	r6, r0
 8007516:	d855      	bhi.n	80075c4 <ES_WIFI_SendDataTo+0x118>
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8007518:	2404      	movs	r4, #4
    *SentLen = Reqlen;
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
    *SentLen = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800751e:	8013      	strh	r3, [r2, #0]
  }

  UNLOCK_WIFI();
  return ret;
}
 8007520:	4620      	mov	r0, r4
 8007522:	b002      	add	sp, #8
 8007524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 8007528:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 800752c:	4928      	ldr	r1, [pc, #160]	; (80075d0 <ES_WIFI_SendDataTo+0x124>)
 800752e:	4628      	mov	r0, r5
 8007530:	f019 fe36 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007534:	462a      	mov	r2, r5
 8007536:	4629      	mov	r1, r5
 8007538:	4630      	mov	r0, r6
 800753a:	f7fe ff29 	bl	8006390 <AT_ExecuteCommand>
 800753e:	4604      	mov	r4, r0
 8007540:	e7d1      	b.n	80074e6 <ES_WIFI_SendDataTo+0x3a>
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 8007542:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8007546:	4923      	ldr	r1, [pc, #140]	; (80075d4 <ES_WIFI_SendDataTo+0x128>)
 8007548:	4628      	mov	r0, r5
 800754a:	f019 fe29 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800754e:	462a      	mov	r2, r5
 8007550:	4629      	mov	r1, r5
 8007552:	4630      	mov	r0, r6
 8007554:	f7fe ff1c 	bl	8006390 <AT_ExecuteCommand>
 8007558:	4604      	mov	r4, r0
 800755a:	e7c5      	b.n	80074e8 <ES_WIFI_SendDataTo+0x3c>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 800755c:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8007560:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8007564:	9201      	str	r2, [sp, #4]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800756c:	f89a 2000 	ldrb.w	r2, [sl]
 8007570:	4919      	ldr	r1, [pc, #100]	; (80075d8 <ES_WIFI_SendDataTo+0x12c>)
 8007572:	4628      	mov	r0, r5
 8007574:	f019 fe14 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007578:	462a      	mov	r2, r5
 800757a:	4629      	mov	r1, r5
 800757c:	4630      	mov	r0, r6
 800757e:	f7fe ff07 	bl	8006390 <AT_ExecuteCommand>
 8007582:	4604      	mov	r4, r0
 8007584:	e7b2      	b.n	80074ec <ES_WIFI_SendDataTo+0x40>
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8007586:	464a      	mov	r2, r9
 8007588:	4914      	ldr	r1, [pc, #80]	; (80075dc <ES_WIFI_SendDataTo+0x130>)
 800758a:	4628      	mov	r0, r5
 800758c:	f019 fe08 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007590:	462a      	mov	r2, r5
 8007592:	4629      	mov	r1, r5
 8007594:	4630      	mov	r0, r6
 8007596:	f7fe fefb 	bl	8006390 <AT_ExecuteCommand>
 800759a:	4604      	mov	r4, r0
 800759c:	e7ae      	b.n	80074fc <ES_WIFI_SendDataTo+0x50>
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800759e:	463a      	mov	r2, r7
 80075a0:	490f      	ldr	r1, [pc, #60]	; (80075e0 <ES_WIFI_SendDataTo+0x134>)
 80075a2:	4628      	mov	r0, r5
 80075a4:	f019 fdfc 	bl	80211a0 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80075a8:	9500      	str	r5, [sp, #0]
 80075aa:	463b      	mov	r3, r7
 80075ac:	4642      	mov	r2, r8
 80075ae:	4629      	mov	r1, r5
 80075b0:	4630      	mov	r0, r6
 80075b2:	f7fe ff67 	bl	8006484 <AT_RequestSendData>
 80075b6:	4604      	mov	r4, r0
 80075b8:	e7a2      	b.n	8007500 <ES_WIFI_SendDataTo+0x54>
  if (ret == ES_WIFI_STATUS_OK)
 80075ba:	2c00      	cmp	r4, #0
 80075bc:	d1ad      	bne.n	800751a <ES_WIFI_SendDataTo+0x6e>
    *SentLen = Reqlen;
 80075be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c0:	801f      	strh	r7, [r3, #0]
 80075c2:	e7ad      	b.n	8007520 <ES_WIFI_SendDataTo+0x74>
        ret = ES_WIFI_STATUS_ERROR;
 80075c4:	2402      	movs	r4, #2
 80075c6:	e7a8      	b.n	800751a <ES_WIFI_SendDataTo+0x6e>
 80075c8:	080233b0 	.word	0x080233b0
 80075cc:	08023480 	.word	0x08023480
 80075d0:	080233c0 	.word	0x080233c0
 80075d4:	080233c8 	.word	0x080233c8
 80075d8:	080233d0 	.word	0x080233d0
 80075dc:	0802346c 	.word	0x0802346c
 80075e0:	08023474 	.word	0x08023474

080075e4 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80075e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	4604      	mov	r4, r0
 80075ec:	4690      	mov	r8, r2
 80075ee:	461d      	mov	r5, r3
 80075f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80075f2:	b906      	cbnz	r6, 80075f6 <ES_WIFI_ReceiveData+0x12>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80075f4:	2601      	movs	r6, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80075f6:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80075fa:	d903      	bls.n	8007604 <ES_WIFI_ReceiveData+0x20>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80075fc:	2002      	movs	r0, #2
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80075fe:	b002      	add	sp, #8
 8007600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8007604:	f504 7794 	add.w	r7, r4, #296	; 0x128
 8007608:	460a      	mov	r2, r1
 800760a:	491b      	ldr	r1, [pc, #108]	; (8007678 <ES_WIFI_ReceiveData+0x94>)
 800760c:	4638      	mov	r0, r7
 800760e:	f019 fdc7 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007612:	463a      	mov	r2, r7
 8007614:	4639      	mov	r1, r7
 8007616:	4620      	mov	r0, r4
 8007618:	f7fe feba 	bl	8006390 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800761c:	b120      	cbz	r0, 8007628 <ES_WIFI_ReceiveData+0x44>
      issue15++;
 800761e:	4a17      	ldr	r2, [pc, #92]	; (800767c <ES_WIFI_ReceiveData+0x98>)
 8007620:	6813      	ldr	r3, [r2, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	e7ea      	b.n	80075fe <ES_WIFI_ReceiveData+0x1a>
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8007628:	462a      	mov	r2, r5
 800762a:	4915      	ldr	r1, [pc, #84]	; (8007680 <ES_WIFI_ReceiveData+0x9c>)
 800762c:	4638      	mov	r0, r7
 800762e:	f019 fdb7 	bl	80211a0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007632:	463a      	mov	r2, r7
 8007634:	4639      	mov	r1, r7
 8007636:	4620      	mov	r0, r4
 8007638:	f7fe feaa 	bl	8006390 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800763c:	b118      	cbz	r0, 8007646 <ES_WIFI_ReceiveData+0x62>
        *Receivedlen = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	9a08      	ldr	r2, [sp, #32]
 8007642:	8013      	strh	r3, [r2, #0]
 8007644:	e7db      	b.n	80075fe <ES_WIFI_ReceiveData+0x1a>
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8007646:	4632      	mov	r2, r6
 8007648:	490e      	ldr	r1, [pc, #56]	; (8007684 <ES_WIFI_ReceiveData+0xa0>)
 800764a:	4638      	mov	r0, r7
 800764c:	f019 fda8 	bl	80211a0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007650:	463a      	mov	r2, r7
 8007652:	4639      	mov	r1, r7
 8007654:	4620      	mov	r0, r4
 8007656:	f7fe fe9b 	bl	8006390 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 800765a:	2800      	cmp	r0, #0
 800765c:	d1cf      	bne.n	80075fe <ES_WIFI_ReceiveData+0x1a>
          sprintf((char*)Obj->CmdData,"R0\r");
 800765e:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <ES_WIFI_ReceiveData+0xa4>)
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8007666:	9b08      	ldr	r3, [sp, #32]
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	462b      	mov	r3, r5
 800766c:	4642      	mov	r2, r8
 800766e:	4639      	mov	r1, r7
 8007670:	4620      	mov	r0, r4
 8007672:	f7ff f9d1 	bl	8006a18 <AT_RequestReceiveData>
            DEBUG("AT_RequestReceiveData  failed\n");
 8007676:	e7c2      	b.n	80075fe <ES_WIFI_ReceiveData+0x1a>
 8007678:	080233b0 	.word	0x080233b0
 800767c:	24002e84 	.word	0x24002e84
 8007680:	08023488 	.word	0x08023488
 8007684:	08023490 	.word	0x08023490
 8007688:	08023498 	.word	0x08023498

0800768c <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 800768c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007690:	b088      	sub	sp, #32
 8007692:	4605      	mov	r5, r0
 8007694:	4690      	mov	r8, r2
 8007696:	461e      	mov	r6, r3
 8007698:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800769a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	803b      	strh	r3, [r7, #0]


  if (Timeout == 0)
 80076a2:	f1b9 0f00 	cmp.w	r9, #0
 80076a6:	d101      	bne.n	80076ac <ES_WIFI_ReceiveDataFrom+0x20>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80076a8:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80076ac:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 80076b0:	d90f      	bls.n	80076d2 <ES_WIFI_ReceiveDataFrom+0x46>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80076b2:	2402      	movs	r4, #2
  else
  {
    DEBUG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80076b4:	b344      	cbz	r4, 8007708 <ES_WIFI_ReceiveDataFrom+0x7c>
  else
  {
    DEBUG("R1 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80076b6:	b3ac      	cbz	r4, 8007724 <ES_WIFI_ReceiveDataFrom+0x98>
  else
  {
    DEBUG("R2 failed.\n");
  }

  if (ret == ES_WIFI_STATUS_OK)
 80076b8:	b924      	cbnz	r4, 80076c4 <ES_WIFI_ReceiveDataFrom+0x38>
  {
    if (*Receivedlen > Reqlen)
 80076ba:	883b      	ldrh	r3, [r7, #0]
 80076bc:	42b3      	cmp	r3, r6
 80076be:	d85f      	bhi.n	8007780 <ES_WIFI_ReceiveDataFrom+0xf4>
      DEBUG("AT_RequestReceiveData overflow\n.");
      ret = ES_WIFI_STATUS_ERROR;
    }
    else
    {
      if (*Receivedlen > 0)
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d13d      	bne.n	8007740 <ES_WIFI_ReceiveDataFrom+0xb4>
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 80076c4:	b10c      	cbz	r4, 80076ca <ES_WIFI_ReceiveDataFrom+0x3e>
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
    *Receivedlen = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	803b      	strh	r3, [r7, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 80076ca:	4620      	mov	r0, r4
 80076cc:	b008      	add	sp, #32
 80076ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80076d2:	f505 7a94 	add.w	sl, r5, #296	; 0x128
 80076d6:	460a      	mov	r2, r1
 80076d8:	492a      	ldr	r1, [pc, #168]	; (8007784 <ES_WIFI_ReceiveDataFrom+0xf8>)
 80076da:	4650      	mov	r0, sl
 80076dc:	f019 fd60 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80076e0:	4652      	mov	r2, sl
 80076e2:	4651      	mov	r1, sl
 80076e4:	4628      	mov	r0, r5
 80076e6:	f7fe fe53 	bl	8006390 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80076ea:	4604      	mov	r4, r0
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1e1      	bne.n	80076b4 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80076f0:	4632      	mov	r2, r6
 80076f2:	4925      	ldr	r1, [pc, #148]	; (8007788 <ES_WIFI_ReceiveDataFrom+0xfc>)
 80076f4:	4650      	mov	r0, sl
 80076f6:	f019 fd53 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80076fa:	4652      	mov	r2, sl
 80076fc:	4651      	mov	r1, sl
 80076fe:	4628      	mov	r0, r5
 8007700:	f7fe fe46 	bl	8006390 <AT_ExecuteCommand>
 8007704:	4604      	mov	r4, r0
 8007706:	e7d5      	b.n	80076b4 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8007708:	f505 7494 	add.w	r4, r5, #296	; 0x128
 800770c:	464a      	mov	r2, r9
 800770e:	491f      	ldr	r1, [pc, #124]	; (800778c <ES_WIFI_ReceiveDataFrom+0x100>)
 8007710:	4620      	mov	r0, r4
 8007712:	f019 fd45 	bl	80211a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007716:	4622      	mov	r2, r4
 8007718:	4621      	mov	r1, r4
 800771a:	4628      	mov	r0, r5
 800771c:	f7fe fe38 	bl	8006390 <AT_ExecuteCommand>
 8007720:	4604      	mov	r4, r0
 8007722:	e7c8      	b.n	80076b6 <ES_WIFI_ReceiveDataFrom+0x2a>
    sprintf((char*)Obj->CmdData,"R0\r");
 8007724:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <ES_WIFI_ReceiveDataFrom+0x104>)
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800772c:	9700      	str	r7, [sp, #0]
 800772e:	4633      	mov	r3, r6
 8007730:	4642      	mov	r2, r8
 8007732:	f505 7194 	add.w	r1, r5, #296	; 0x128
 8007736:	4628      	mov	r0, r5
 8007738:	f7ff f96e 	bl	8006a18 <AT_RequestReceiveData>
 800773c:	4604      	mov	r4, r0
 800773e:	e7bb      	b.n	80076b8 <ES_WIFI_ReceiveDataFrom+0x2c>
        sprintf((char*)Obj->CmdData,"P?\r");
 8007740:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <ES_WIFI_ReceiveDataFrom+0x108>)
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800774c:	4632      	mov	r2, r6
 800774e:	4631      	mov	r1, r6
 8007750:	4628      	mov	r0, r5
 8007752:	f7fe fe1d 	bl	8006390 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8007756:	4604      	mov	r4, r0
 8007758:	2800      	cmp	r0, #0
 800775a:	d1b3      	bne.n	80076c4 <ES_WIFI_ReceiveDataFrom+0x38>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 800775c:	2300      	movs	r3, #0
 800775e:	9303      	str	r3, [sp, #12]
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	9306      	str	r3, [sp, #24]
 8007766:	9307      	str	r3, [sp, #28]
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8007768:	a903      	add	r1, sp, #12
 800776a:	4630      	mov	r0, r6
 800776c:	f7fe ff28 	bl	80065c0 <AT_ParseTransportSettings>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8007770:	9a05      	ldr	r2, [sp, #20]
 8007772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007774:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8007776:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800777a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e7a1      	b.n	80076c4 <ES_WIFI_ReceiveDataFrom+0x38>
      ret = ES_WIFI_STATUS_ERROR;
 8007780:	2402      	movs	r4, #2
 8007782:	e7a0      	b.n	80076c6 <ES_WIFI_ReceiveDataFrom+0x3a>
 8007784:	080233b0 	.word	0x080233b0
 8007788:	08023488 	.word	0x08023488
 800778c:	08023490 	.word	0x08023490
 8007790:	08023498 	.word	0x08023498
 8007794:	08023448 	.word	0x08023448

08007798 <ES_WIFI_SockInfo>:

ES_WIFI_Status_t  ES_WIFI_SockInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8007798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	4604      	mov	r4, r0
 80077a0:	4690      	mov	r8, r2
 80077a2:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80077a4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80077a8:	460a      	mov	r2, r1
 80077aa:	4916      	ldr	r1, [pc, #88]	; (8007804 <ES_WIFI_SockInfo+0x6c>)
 80077ac:	4628      	mov	r0, r5
 80077ae:	f019 fcf7 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80077b2:	462a      	mov	r2, r5
 80077b4:	4629      	mov	r1, r5
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7fe fdea 	bl	8006390 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80077bc:	4606      	mov	r6, r0
 80077be:	b118      	cbz	r0, 80077c8 <ES_WIFI_SockInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 80077c0:	4630      	mov	r0, r6
 80077c2:	b006      	add	sp, #24
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 80077c8:	4b0f      	ldr	r3, [pc, #60]	; (8007808 <ES_WIFI_SockInfo+0x70>)
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80077d0:	462a      	mov	r2, r5
 80077d2:	4629      	mov	r1, r5
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7fe fddb 	bl	8006390 <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 80077da:	4606      	mov	r6, r0
 80077dc:	2800      	cmp	r0, #0
 80077de:	d1ef      	bne.n	80077c0 <ES_WIFI_SockInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 80077e0:	2300      	movs	r3, #0
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	9302      	str	r3, [sp, #8]
 80077e6:	9303      	str	r3, [sp, #12]
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 80077ec:	a901      	add	r1, sp, #4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f7fe fee6 	bl	80065c0 <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Local_IP_Addr, 4);
 80077f4:	f8dd 3005 	ldr.w	r3, [sp, #5]
 80077f8:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Local_Port;
 80077fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007800:	803b      	strh	r3, [r7, #0]
 8007802:	e7dd      	b.n	80077c0 <ES_WIFI_SockInfo+0x28>
 8007804:	080233b0 	.word	0x080233b0
 8007808:	08023448 	.word	0x08023448

0800780c <ES_WIFI_PeerInfo>:


ES_WIFI_Status_t  ES_WIFI_PeerInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 800780c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007810:	b086      	sub	sp, #24
 8007812:	4604      	mov	r4, r0
 8007814:	4690      	mov	r8, r2
 8007816:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8007818:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800781c:	460a      	mov	r2, r1
 800781e:	4916      	ldr	r1, [pc, #88]	; (8007878 <ES_WIFI_PeerInfo+0x6c>)
 8007820:	4628      	mov	r0, r5
 8007822:	f019 fcbd 	bl	80211a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007826:	462a      	mov	r2, r5
 8007828:	4629      	mov	r1, r5
 800782a:	4620      	mov	r0, r4
 800782c:	f7fe fdb0 	bl	8006390 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8007830:	4606      	mov	r6, r0
 8007832:	b118      	cbz	r0, 800783c <ES_WIFI_PeerInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8007834:	4630      	mov	r0, r6
 8007836:	b006      	add	sp, #24
 8007838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <ES_WIFI_PeerInfo+0x70>)
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007844:	462a      	mov	r2, r5
 8007846:	4629      	mov	r1, r5
 8007848:	4620      	mov	r0, r4
 800784a:	f7fe fda1 	bl	8006390 <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 800784e:	4606      	mov	r6, r0
 8007850:	2800      	cmp	r0, #0
 8007852:	d1ef      	bne.n	8007834 <ES_WIFI_PeerInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8007854:	2300      	movs	r3, #0
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	9302      	str	r3, [sp, #8]
 800785a:	9303      	str	r3, [sp, #12]
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8007860:	a901      	add	r1, sp, #4
 8007862:	4628      	mov	r0, r5
 8007864:	f7fe feac 	bl	80065c0 <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Remote_Port;
 800786e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8007872:	803b      	strh	r3, [r7, #0]
 8007874:	e7de      	b.n	8007834 <ES_WIFI_PeerInfo+0x28>
 8007876:	bf00      	nop
 8007878:	080233b0 	.word	0x080233b0
 800787c:	08023448 	.word	0x08023448

08007880 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8007880:	2301      	movs	r3, #1
 8007882:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8007884:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8007886:	2305      	movs	r3, #5
 8007888:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800788a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800788e:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8007890:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007894:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8007896:	2000      	movs	r0, #0
 8007898:	4770      	bx	lr

0800789a <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 800789a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d001      	beq.n	80078a6 <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 80078a2:	2000      	movs	r0, #0
 80078a4:	4770      	bx	lr
    pObj->IsInitialized = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80078ac:	e7f9      	b.n	80078a2 <FT5336_DeInit+0x8>

080078ae <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 80078ae:	2000      	movs	r0, #0
 80078b0:	4770      	bx	lr

080078b2 <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 80078b2:	2000      	movs	r0, #0
 80078b4:	4770      	bx	lr

080078b6 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80078b6:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80078b8:	6904      	ldr	r4, [r0, #16]
 80078ba:	8900      	ldrh	r0, [r0, #8]
 80078bc:	47a0      	blx	r4
}
 80078be:	bd10      	pop	{r4, pc}

080078c0 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80078c0:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80078c2:	68c4      	ldr	r4, [r0, #12]
 80078c4:	8900      	ldrh	r0, [r0, #8]
 80078c6:	47a0      	blx	r4
}
 80078c8:	bd10      	pop	{r4, pc}

080078ca <FT5336_GestureConfig>:
{
 80078ca:	b570      	push	{r4, r5, r6, lr}
 80078cc:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80078ce:	f100 0518 	add.w	r5, r0, #24
 80078d2:	7809      	ldrb	r1, [r1, #0]
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 f91d 	bl	8007b14 <ft5336_radian_value>
 80078da:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80078dc:	7931      	ldrb	r1, [r6, #4]
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 f925 	bl	8007b2e <ft5336_offset_left_right>
 80078e4:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80078e6:	7a31      	ldrb	r1, [r6, #8]
 80078e8:	4628      	mov	r0, r5
 80078ea:	f000 f92d 	bl	8007b48 <ft5336_offset_up_down>
 80078ee:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80078f0:	7b31      	ldrb	r1, [r6, #12]
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 f935 	bl	8007b62 <ft5336_disatnce_left_right>
 80078f8:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80078fa:	7c31      	ldrb	r1, [r6, #16]
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f93d 	bl	8007b7c <ft5336_distance_up_down>
 8007902:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8007904:	7d31      	ldrb	r1, [r6, #20]
 8007906:	4628      	mov	r0, r5
 8007908:	f000 f945 	bl	8007b96 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 800790c:	1820      	adds	r0, r4, r0
 800790e:	d100      	bne.n	8007912 <FT5336_GestureConfig+0x48>
}
 8007910:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007916:	e7fb      	b.n	8007910 <FT5336_GestureConfig+0x46>

08007918 <FT5336_ReadID>:
{
 8007918:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800791a:	3018      	adds	r0, #24
 800791c:	f000 f955 	bl	8007bca <ft5336_chip_id>
}
 8007920:	bd08      	pop	{r3, pc}

08007922 <FT5336_DetectTouch>:
{
 8007922:	b500      	push	{lr}
 8007924:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8007926:	f10d 0107 	add.w	r1, sp, #7
 800792a:	3018      	adds	r0, #24
 800792c:	f000 f8e5 	bl	8007afa <ft5336_td_status>
 8007930:	b938      	cbnz	r0, 8007942 <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8007932:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007936:	2b05      	cmp	r3, #5
 8007938:	d800      	bhi.n	800793c <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 800793a:	4618      	mov	r0, r3
}
 800793c:	b003      	add	sp, #12
 800793e:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 8007942:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007946:	e7f9      	b.n	800793c <FT5336_DetectTouch+0x1a>

08007948 <FT5336_GetState>:
{
 8007948:	b530      	push	{r4, r5, lr}
 800794a:	b083      	sub	sp, #12
 800794c:	4605      	mov	r5, r0
 800794e:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8007950:	f7ff ffe7 	bl	8007922 <FT5336_DetectTouch>
 8007954:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8007956:	2304      	movs	r3, #4
 8007958:	eb0d 0203 	add.w	r2, sp, r3
 800795c:	2103      	movs	r1, #3
 800795e:	f105 0018 	add.w	r0, r5, #24
 8007962:	f000 f8b9 	bl	8007ad8 <ft5336_read_reg>
 8007966:	b998      	cbnz	r0, 8007990 <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8007968:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007972:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007976:	4313      	orrs	r3, r2
 8007978:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800797a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800797e:	021b      	lsls	r3, r3, #8
 8007980:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007984:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007988:	4313      	orrs	r3, r2
 800798a:	60a3      	str	r3, [r4, #8]
}
 800798c:	b003      	add	sp, #12
 800798e:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007994:	e7fa      	b.n	800798c <FT5336_GetState+0x44>

08007996 <FT5336_GetMultiTouchState>:
{
 8007996:	b530      	push	{r4, r5, lr}
 8007998:	b089      	sub	sp, #36	; 0x24
 800799a:	4604      	mov	r4, r0
 800799c:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800799e:	f7ff ffc0 	bl	8007922 <FT5336_DetectTouch>
 80079a2:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80079a4:	231e      	movs	r3, #30
 80079a6:	466a      	mov	r2, sp
 80079a8:	2103      	movs	r1, #3
 80079aa:	f104 0018 	add.w	r0, r4, #24
 80079ae:	f000 f893 	bl	8007ad8 <ft5336_read_reg>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d146      	bne.n	8007a44 <FT5336_GetMultiTouchState+0xae>
 80079b6:	4603      	mov	r3, r0
 80079b8:	e040      	b.n	8007a3c <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80079ba:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80079be:	004a      	lsls	r2, r1, #1
 80079c0:	ac08      	add	r4, sp, #32
 80079c2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80079c6:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 80079ca:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80079ce:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80079d2:	f102 0421 	add.w	r4, r2, #33	; 0x21
 80079d6:	446c      	add	r4, sp
 80079d8:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 80079dc:	4321      	orrs	r1, r4
 80079de:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 80079e2:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80079e4:	f102 0122 	add.w	r1, r2, #34	; 0x22
 80079e8:	4469      	add	r1, sp
 80079ea:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 80079ee:	0224      	lsls	r4, r4, #8
 80079f0:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80079f4:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80079f8:	4469      	add	r1, sp
 80079fa:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80079fe:	430c      	orrs	r4, r1
 8007a00:	1d99      	adds	r1, r3, #6
 8007a02:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8007a06:	ea4f 119c 	mov.w	r1, ip, lsr #6
 8007a0a:	f103 0410 	add.w	r4, r3, #16
 8007a0e:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8007a12:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8007a16:	4469      	add	r1, sp
 8007a18:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8007a1c:	f103 010a 	add.w	r1, r3, #10
 8007a20:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8007a24:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8007a26:	3225      	adds	r2, #37	; 0x25
 8007a28:	446a      	add	r2, sp
 8007a2a:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8007a2e:	0909      	lsrs	r1, r1, #4
 8007a30:	f103 0214 	add.w	r2, r3, #20
 8007a34:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8007a38:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d9bc      	bls.n	80079ba <FT5336_GetMultiTouchState+0x24>
}
 8007a40:	b009      	add	sp, #36	; 0x24
 8007a42:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8007a44:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007a48:	e7fa      	b.n	8007a40 <FT5336_GetMultiTouchState+0xaa>

08007a4a <FT5336_GetGesture>:
{
 8007a4a:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8007a4c:	3018      	adds	r0, #24
 8007a4e:	f000 f84d 	bl	8007aec <ft5336_gest_id>
}
 8007a52:	bd08      	pop	{r3, pc}

08007a54 <FT5336_EnableIT>:
{
 8007a54:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8007a56:	2101      	movs	r1, #1
 8007a58:	3018      	adds	r0, #24
 8007a5a:	f000 f8a9 	bl	8007bb0 <ft5336_g_mode>
}
 8007a5e:	bd08      	pop	{r3, pc}

08007a60 <FT5336_DisableIT>:
{
 8007a60:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8007a62:	2100      	movs	r1, #0
 8007a64:	3018      	adds	r0, #24
 8007a66:	f000 f8a3 	bl	8007bb0 <ft5336_g_mode>
}
 8007a6a:	bd08      	pop	{r3, pc}

08007a6c <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8007a6c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007a70:	b95b      	cbnz	r3, 8007a8a <FT5336_Init+0x1e>
{
 8007a72:	b510      	push	{r4, lr}
 8007a74:	4604      	mov	r4, r0
    pObj->IO.Init();
 8007a76:	6803      	ldr	r3, [r0, #0]
 8007a78:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff fff0 	bl	8007a60 <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 8007a80:	2201      	movs	r2, #1
 8007a82:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8007a86:	b910      	cbnz	r0, 8007a8e <FT5336_Init+0x22>
}
 8007a88:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8007a8a:	2000      	movs	r0, #0
}
 8007a8c:	4770      	bx	lr
    ret = FT5336_ERROR;
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007a92:	e7f9      	b.n	8007a88 <FT5336_Init+0x1c>

08007a94 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8007a94:	b1a8      	cbz	r0, 8007ac2 <FT5336_RegisterBusIO+0x2e>
{
 8007a96:	b508      	push	{r3, lr}
 8007a98:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8007a9a:	680a      	ldr	r2, [r1, #0]
 8007a9c:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007a9e:	6848      	ldr	r0, [r1, #4]
 8007aa0:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8007aa2:	8908      	ldrh	r0, [r1, #8]
 8007aa4:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007aa6:	68c8      	ldr	r0, [r1, #12]
 8007aa8:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007aaa:	6908      	ldr	r0, [r1, #16]
 8007aac:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8007aae:	6949      	ldr	r1, [r1, #20]
 8007ab0:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8007ab2:	4907      	ldr	r1, [pc, #28]	; (8007ad0 <FT5336_RegisterBusIO+0x3c>)
 8007ab4:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8007ab6:	4907      	ldr	r1, [pc, #28]	; (8007ad4 <FT5336_RegisterBusIO+0x40>)
 8007ab8:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8007aba:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 8007abc:	b122      	cbz	r2, 8007ac8 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 8007abe:	4790      	blx	r2
}
 8007ac0:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007ac6:	4770      	bx	lr
      ret = FT5336_ERROR;
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007acc:	e7f8      	b.n	8007ac0 <FT5336_RegisterBusIO+0x2c>
 8007ace:	bf00      	nop
 8007ad0:	080078b7 	.word	0x080078b7
 8007ad4:	080078c1 	.word	0x080078c1

08007ad8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8007ad8:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007ada:	6844      	ldr	r4, [r0, #4]
 8007adc:	6880      	ldr	r0, [r0, #8]
 8007ade:	47a0      	blx	r4
}
 8007ae0:	bd10      	pop	{r4, pc}

08007ae2 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8007ae2:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8007ae4:	6804      	ldr	r4, [r0, #0]
 8007ae6:	6880      	ldr	r0, [r0, #8]
 8007ae8:	47a0      	blx	r4
}
 8007aea:	bd10      	pop	{r4, pc}

08007aec <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8007aec:	b508      	push	{r3, lr}
 8007aee:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8007af0:	2301      	movs	r3, #1
 8007af2:	4619      	mov	r1, r3
 8007af4:	f7ff fff0 	bl	8007ad8 <ft5336_read_reg>
}
 8007af8:	bd08      	pop	{r3, pc}

08007afa <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8007afa:	b510      	push	{r4, lr}
 8007afc:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8007afe:	2301      	movs	r3, #1
 8007b00:	460a      	mov	r2, r1
 8007b02:	2102      	movs	r1, #2
 8007b04:	f7ff ffe8 	bl	8007ad8 <ft5336_read_reg>
  
  if(ret == 0)
 8007b08:	b918      	cbnz	r0, 8007b12 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8007b0a:	7823      	ldrb	r3, [r4, #0]
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8007b12:	bd10      	pop	{r4, pc}

08007b14 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8007b14:	b500      	push	{lr}
 8007b16:	b083      	sub	sp, #12
 8007b18:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f10d 0207 	add.w	r2, sp, #7
 8007b22:	2191      	movs	r1, #145	; 0x91
 8007b24:	f7ff ffdd 	bl	8007ae2 <ft5336_write_reg>
}
 8007b28:	b003      	add	sp, #12
 8007b2a:	f85d fb04 	ldr.w	pc, [sp], #4

08007b2e <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8007b2e:	b500      	push	{lr}
 8007b30:	b083      	sub	sp, #12
 8007b32:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8007b36:	2301      	movs	r3, #1
 8007b38:	f10d 0207 	add.w	r2, sp, #7
 8007b3c:	2192      	movs	r1, #146	; 0x92
 8007b3e:	f7ff ffd0 	bl	8007ae2 <ft5336_write_reg>
}
 8007b42:	b003      	add	sp, #12
 8007b44:	f85d fb04 	ldr.w	pc, [sp], #4

08007b48 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8007b48:	b500      	push	{lr}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8007b50:	2301      	movs	r3, #1
 8007b52:	f10d 0207 	add.w	r2, sp, #7
 8007b56:	2193      	movs	r1, #147	; 0x93
 8007b58:	f7ff ffc3 	bl	8007ae2 <ft5336_write_reg>
}
 8007b5c:	b003      	add	sp, #12
 8007b5e:	f85d fb04 	ldr.w	pc, [sp], #4

08007b62 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8007b62:	b500      	push	{lr}
 8007b64:	b083      	sub	sp, #12
 8007b66:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f10d 0207 	add.w	r2, sp, #7
 8007b70:	2194      	movs	r1, #148	; 0x94
 8007b72:	f7ff ffb6 	bl	8007ae2 <ft5336_write_reg>
}
 8007b76:	b003      	add	sp, #12
 8007b78:	f85d fb04 	ldr.w	pc, [sp], #4

08007b7c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8007b7c:	b500      	push	{lr}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8007b84:	2301      	movs	r3, #1
 8007b86:	f10d 0207 	add.w	r2, sp, #7
 8007b8a:	2195      	movs	r1, #149	; 0x95
 8007b8c:	f7ff ffa9 	bl	8007ae2 <ft5336_write_reg>
}
 8007b90:	b003      	add	sp, #12
 8007b92:	f85d fb04 	ldr.w	pc, [sp], #4

08007b96 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8007b96:	b500      	push	{lr}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f10d 0207 	add.w	r2, sp, #7
 8007ba4:	2196      	movs	r1, #150	; 0x96
 8007ba6:	f7ff ff9c 	bl	8007ae2 <ft5336_write_reg>
}
 8007baa:	b003      	add	sp, #12
 8007bac:	f85d fb04 	ldr.w	pc, [sp], #4

08007bb0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8007bb0:	b500      	push	{lr}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f10d 0207 	add.w	r2, sp, #7
 8007bbe:	21a4      	movs	r1, #164	; 0xa4
 8007bc0:	f7ff ff8f 	bl	8007ae2 <ft5336_write_reg>
}
 8007bc4:	b003      	add	sp, #12
 8007bc6:	f85d fb04 	ldr.w	pc, [sp], #4

08007bca <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8007bca:	b508      	push	{r3, lr}
 8007bcc:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8007bce:	2301      	movs	r3, #1
 8007bd0:	21a8      	movs	r1, #168	; 0xa8
 8007bd2:	f7ff ff81 	bl	8007ad8 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 8007bd6:	bd08      	pop	{r3, pc}

08007bd8 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8007bd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007bdc:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8007bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007be2:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8007be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be8:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8007bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bee:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8007bf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bf4:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8007bf6:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8007bf8:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8007bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bfe:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8007c00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c04:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 8007c06:	2000      	movs	r0, #0
 8007c08:	4770      	bx	lr

08007c0a <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8007c0a:	b570      	push	{r4, r5, r6, lr}
 8007c0c:	b09a      	sub	sp, #104	; 0x68
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8007c14:	2250      	movs	r2, #80	; 0x50
 8007c16:	2100      	movs	r1, #0
 8007c18:	a806      	add	r0, sp, #24
 8007c1a:	f018 fe2d 	bl	8020878 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	9302      	str	r3, [sp, #8]
 8007c24:	9303      	str	r3, [sp, #12]
 8007c26:	9304      	str	r3, [sp, #16]
 8007c28:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	bf08      	it	eq
 8007c2e:	2d01      	cmpeq	r5, #1
 8007c30:	d061      	beq.n	8007cf6 <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007c32:	2c00      	cmp	r4, #0
 8007c34:	d143      	bne.n	8007cbe <MX25LM51245G_AutoPollingMemReady+0xb4>
 8007c36:	2301      	movs	r3, #1
 8007c38:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007c3a:	2d01      	cmp	r5, #1
 8007c3c:	d041      	beq.n	8007cc2 <MX25LM51245G_AutoPollingMemReady+0xb8>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007c42:	2c00      	cmp	r4, #0
 8007c44:	d13f      	bne.n	8007cc6 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8007c46:	2300      	movs	r3, #0
 8007c48:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007c4a:	2c00      	cmp	r4, #0
 8007c4c:	d13d      	bne.n	8007cca <MX25LM51245G_AutoPollingMemReady+0xc0>
 8007c4e:	2305      	movs	r3, #5
 8007c50:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8007c52:	2c00      	cmp	r4, #0
 8007c54:	d13c      	bne.n	8007cd0 <MX25LM51245G_AutoPollingMemReady+0xc6>
 8007c56:	2300      	movs	r3, #0
 8007c58:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007c5a:	2d01      	cmp	r5, #1
 8007c5c:	d03b      	beq.n	8007cd6 <MX25LM51245G_AutoPollingMemReady+0xcc>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007c62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007c66:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007c68:	2c00      	cmp	r4, #0
 8007c6a:	d137      	bne.n	8007cdc <MX25LM51245G_AutoPollingMemReady+0xd2>
 8007c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c70:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007c72:	2d01      	cmp	r5, #1
 8007c74:	d035      	beq.n	8007ce2 <MX25LM51245G_AutoPollingMemReady+0xd8>
 8007c76:	2300      	movs	r3, #0
 8007c78:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007c7a:	bbac      	cbnz	r4, 8007ce8 <MX25LM51245G_AutoPollingMemReady+0xde>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007c80:	2d01      	cmp	r5, #1
 8007c82:	d033      	beq.n	8007cec <MX25LM51245G_AutoPollingMemReady+0xe2>
 8007c84:	2301      	movs	r3, #1
 8007c86:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007c88:	2d01      	cmp	r5, #1
 8007c8a:	d031      	beq.n	8007cf0 <MX25LM51245G_AutoPollingMemReady+0xe6>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8007c90:	2301      	movs	r3, #1
 8007c92:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8007c94:	2310      	movs	r3, #16
 8007c96:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007c98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c9c:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca2:	a906      	add	r1, sp, #24
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f003 f8dd 	bl	800ae64 <HAL_OSPI_Command>
 8007caa:	bb38      	cbnz	r0, 8007cfc <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb0:	a901      	add	r1, sp, #4
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f003 f9e7 	bl	800b086 <HAL_OSPI_AutoPolling>
 8007cb8:	bb18      	cbnz	r0, 8007d02 <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007cba:	b01a      	add	sp, #104	; 0x68
 8007cbc:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	e7ba      	b.n	8007c38 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	e7bc      	b.n	8007c40 <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007cc6:	2310      	movs	r3, #16
 8007cc8:	e7be      	b.n	8007c48 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007cca:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8007cce:	e7bf      	b.n	8007c50 <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8007cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd4:	e7c0      	b.n	8007c58 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cda:	e7c1      	b.n	8007c60 <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007cdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007ce0:	e7c6      	b.n	8007c70 <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007ce2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ce6:	e7c7      	b.n	8007c78 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007ce8:	2305      	movs	r3, #5
 8007cea:	e7c8      	b.n	8007c7e <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007cec:	2302      	movs	r3, #2
 8007cee:	e7ca      	b.n	8007c86 <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007cf0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007cf4:	e7cb      	b.n	8007c8e <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 8007cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfa:	e7de      	b.n	8007cba <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	e7db      	b.n	8007cba <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295
 8007d06:	e7d8      	b.n	8007cba <MX25LM51245G_AutoPollingMemReady+0xb0>

08007d08 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	b096      	sub	sp, #88	; 0x58
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8007d12:	2250      	movs	r2, #80	; 0x50
 8007d14:	2100      	movs	r1, #0
 8007d16:	a802      	add	r0, sp, #8
 8007d18:	f018 fdae 	bl	8020878 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8007d22:	2c01      	cmp	r4, #1
 8007d24:	bf08      	it	eq
 8007d26:	429d      	cmpeq	r5, r3
 8007d28:	d04e      	beq.n	8007dc8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007d2e:	b104      	cbz	r4, 8007d32 <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 8007d30:	2304      	movs	r3, #4
 8007d32:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007d34:	b92c      	cbnz	r4, 8007d42 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8007d36:	2300      	movs	r3, #0
 8007d38:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8007d3a:	b924      	cbnz	r4, 8007d46 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8007d3c:	bb15      	cbnz	r5, 8007d84 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 8007d3e:	230b      	movs	r3, #11
 8007d40:	e003      	b.n	8007d4a <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007d42:	2310      	movs	r3, #16
 8007d44:	e7f8      	b.n	8007d38 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8007d46:	f64e 4313 	movw	r3, #60435	; 0xec13
 8007d4a:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007d4c:	b9e4      	cbnz	r4, 8007d88 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 8007d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d52:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8007d54:	b9dd      	cbnz	r5, 8007d8e <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 8007d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d5a:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007d5c:	b9d4      	cbnz	r4, 8007d94 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8007d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d62:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8007d64:	b9cc      	cbnz	r4, 8007d9a <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 8007d66:	2308      	movs	r3, #8
 8007d68:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d6e:	a902      	add	r1, sp, #8
 8007d70:	4630      	mov	r0, r6
 8007d72:	f003 f877 	bl	800ae64 <HAL_OSPI_Command>
 8007d76:	bb50      	cbnz	r0, 8007dce <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8007d7c:	b97c      	cbnz	r4, 8007d9e <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 8007d7e:	b185      	cbz	r5, 8007da2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 8007d80:	2312      	movs	r3, #18
 8007d82:	e00e      	b.n	8007da2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8007d84:	230c      	movs	r3, #12
 8007d86:	e7e0      	b.n	8007d4a <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d8c:	e7e1      	b.n	8007d52 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8007d8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007d92:	e7e2      	b.n	8007d5a <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007d94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d98:	e7e3      	b.n	8007d62 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8007d9a:	2306      	movs	r3, #6
 8007d9c:	e7e4      	b.n	8007d68 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8007d9e:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8007da2:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dac:	a902      	add	r1, sp, #8
 8007dae:	4630      	mov	r0, r6
 8007db0:	f003 f858 	bl	800ae64 <HAL_OSPI_Command>
 8007db4:	b970      	cbnz	r0, 8007dd4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8007dba:	4669      	mov	r1, sp
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f003 f9bf 	bl	800b140 <HAL_OSPI_MemoryMapped>
 8007dc2:	b950      	cbnz	r0, 8007dda <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007dc4:	b016      	add	sp, #88	; 0x58
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	e7fa      	b.n	8007dc4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8007dce:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd2:	e7f7      	b.n	8007dc4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	e7f4      	b.n	8007dc4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295
 8007dde:	e7f1      	b.n	8007dc4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

08007de0 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8007de0:	b510      	push	{r4, lr}
 8007de2:	b096      	sub	sp, #88	; 0x58
 8007de4:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8007de6:	2250      	movs	r2, #80	; 0x50
 8007de8:	2100      	movs	r1, #0
 8007dea:	a802      	add	r0, sp, #8
 8007dec:	f018 fd44 	bl	8020878 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8007df0:	2300      	movs	r3, #0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8007df6:	2301      	movs	r3, #1
 8007df8:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8007dfa:	2304      	movs	r3, #4
 8007dfc:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8007dfe:	2308      	movs	r3, #8
 8007e00:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8007e02:	2310      	movs	r3, #16
 8007e04:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8007e06:	f64e 6311 	movw	r3, #60945	; 0xee11
 8007e0a:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8007e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e10:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8007e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e16:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007e18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007e1c:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8007e1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e22:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8007e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e28:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8007e2a:	2306      	movs	r3, #6
 8007e2c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8007e2e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007e32:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e38:	a902      	add	r1, sp, #8
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f003 f812 	bl	800ae64 <HAL_OSPI_Command>
 8007e40:	b9b8      	cbnz	r0, 8007e72 <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8007e42:	2302      	movs	r3, #2
 8007e44:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8007e46:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8007e4a:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8007e50:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e56:	a902      	add	r1, sp, #8
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f003 f803 	bl	800ae64 <HAL_OSPI_Command>
 8007e5e:	b958      	cbnz	r0, 8007e78 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8007e64:	4669      	mov	r1, sp
 8007e66:	4620      	mov	r0, r4
 8007e68:	f003 f96a 	bl	800b140 <HAL_OSPI_MemoryMapped>
 8007e6c:	b938      	cbnz	r0, 8007e7e <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007e6e:	b016      	add	sp, #88	; 0x58
 8007e70:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 8007e72:	f04f 30ff 	mov.w	r0, #4294967295
 8007e76:	e7fa      	b.n	8007e6e <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7c:	e7f7      	b.n	8007e6e <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e82:	e7f4      	b.n	8007e6e <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

08007e84 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	b09a      	sub	sp, #104	; 0x68
 8007e88:	4606      	mov	r6, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8007e8e:	2250      	movs	r2, #80	; 0x50
 8007e90:	2100      	movs	r1, #0
 8007e92:	a806      	add	r0, sp, #24
 8007e94:	f018 fcf0 	bl	8020878 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	9302      	str	r3, [sp, #8]
 8007e9e:	9303      	str	r3, [sp, #12]
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	bf08      	it	eq
 8007ea8:	2d01      	cmpeq	r5, #1
 8007eaa:	d076      	beq.n	8007f9a <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007eac:	2c00      	cmp	r4, #0
 8007eae:	d155      	bne.n	8007f5c <MX25LM51245G_WriteEnable+0xd8>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007eb4:	2d01      	cmp	r5, #1
 8007eb6:	d053      	beq.n	8007f60 <MX25LM51245G_WriteEnable+0xdc>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007ebc:	2c00      	cmp	r4, #0
 8007ebe:	d151      	bne.n	8007f64 <MX25LM51245G_WriteEnable+0xe0>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8007ec4:	2c00      	cmp	r4, #0
 8007ec6:	d14f      	bne.n	8007f68 <MX25LM51245G_WriteEnable+0xe4>
 8007ec8:	2306      	movs	r3, #6
 8007eca:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed0:	a906      	add	r1, sp, #24
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f002 ffc6 	bl	800ae64 <HAL_OSPI_Command>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d161      	bne.n	8007fa0 <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007edc:	2c00      	cmp	r4, #0
 8007ede:	d146      	bne.n	8007f6e <MX25LM51245G_WriteEnable+0xea>
 8007ee0:	2305      	movs	r3, #5
 8007ee2:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8007ee4:	2c00      	cmp	r4, #0
 8007ee6:	d145      	bne.n	8007f74 <MX25LM51245G_WriteEnable+0xf0>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007eec:	2d01      	cmp	r5, #1
 8007eee:	d044      	beq.n	8007f7a <MX25LM51245G_WriteEnable+0xf6>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8007ef4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007ef8:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	d13e      	bne.n	8007f80 <MX25LM51245G_WriteEnable+0xfc>
 8007f02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f06:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007f08:	2d01      	cmp	r5, #1
 8007f0a:	d03c      	beq.n	8007f86 <MX25LM51245G_WriteEnable+0x102>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007f10:	2c00      	cmp	r4, #0
 8007f12:	d13b      	bne.n	8007f8c <MX25LM51245G_WriteEnable+0x108>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007f18:	2d01      	cmp	r5, #1
 8007f1a:	d039      	beq.n	8007f90 <MX25LM51245G_WriteEnable+0x10c>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007f20:	2d01      	cmp	r5, #1
 8007f22:	d037      	beq.n	8007f94 <MX25LM51245G_WriteEnable+0x110>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f2c:	a906      	add	r1, sp, #24
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f002 ff98 	bl	800ae64 <HAL_OSPI_Command>
 8007f34:	bbb8      	cbnz	r0, 8007fa6 <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 8007f36:	2302      	movs	r3, #2
 8007f38:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 8007f3a:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8007f40:	2310      	movs	r3, #16
 8007f42:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007f44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f48:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f4e:	a901      	add	r1, sp, #4
 8007f50:	4630      	mov	r0, r6
 8007f52:	f003 f898 	bl	800b086 <HAL_OSPI_AutoPolling>
 8007f56:	bb48      	cbnz	r0, 8007fac <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007f58:	b01a      	add	sp, #104	; 0x68
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	e7a8      	b.n	8007eb2 <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007f60:	2308      	movs	r3, #8
 8007f62:	e7aa      	b.n	8007eba <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007f64:	2310      	movs	r3, #16
 8007f66:	e7ac      	b.n	8007ec2 <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8007f68:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8007f6c:	e7ad      	b.n	8007eca <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007f6e:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8007f72:	e7b6      	b.n	8007ee2 <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8007f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f78:	e7b7      	b.n	8007eea <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f7e:	e7b8      	b.n	8007ef2 <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007f80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f84:	e7bf      	b.n	8007f06 <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007f86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f8a:	e7c0      	b.n	8007f0e <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007f8c:	2305      	movs	r3, #5
 8007f8e:	e7c2      	b.n	8007f16 <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007f90:	2302      	movs	r3, #2
 8007f92:	e7c4      	b.n	8007f1e <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007f94:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007f98:	e7c5      	b.n	8007f26 <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 8007f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9e:	e7db      	b.n	8007f58 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	e7d8      	b.n	8007f58 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8007fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007faa:	e7d5      	b.n	8007f58 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	e7d2      	b.n	8007f58 <MX25LM51245G_WriteEnable+0xd4>

08007fb2 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8007fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb4:	b095      	sub	sp, #84	; 0x54
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	4615      	mov	r5, r2
 8007fbc:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8007fbe:	2250      	movs	r2, #80	; 0x50
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4668      	mov	r0, sp
 8007fc4:	f018 fc58 	bl	8020878 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	bf08      	it	eq
 8007fcc:	2d01      	cmpeq	r5, #1
 8007fce:	d04e      	beq.n	800806e <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007fd0:	bb24      	cbnz	r4, 800801c <MX25LM51245G_WriteCfg2Register+0x6a>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007fd6:	2d01      	cmp	r5, #1
 8007fd8:	d022      	beq.n	8008020 <MX25LM51245G_WriteCfg2Register+0x6e>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007fde:	bb0c      	cbnz	r4, 8008024 <MX25LM51245G_WriteCfg2Register+0x72>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8007fe4:	bb04      	cbnz	r4, 8008028 <MX25LM51245G_WriteCfg2Register+0x76>
 8007fe6:	2372      	movs	r3, #114	; 0x72
 8007fe8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007fea:	bb04      	cbnz	r4, 800802e <MX25LM51245G_WriteCfg2Register+0x7c>
 8007fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ff0:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007ff2:	2d01      	cmp	r5, #1
 8007ff4:	d01e      	beq.n	8008034 <MX25LM51245G_WriteCfg2Register+0x82>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007ffa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007ffe:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 8008000:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008002:	b9d4      	cbnz	r4, 800803a <MX25LM51245G_WriteCfg2Register+0x88>
 8008004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008008:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800800a:	2d01      	cmp	r5, #1
 800800c:	d018      	beq.n	8008040 <MX25LM51245G_WriteCfg2Register+0x8e>
 800800e:	2300      	movs	r3, #0
 8008010:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8008012:	b1d4      	cbz	r4, 800804a <MX25LM51245G_WriteCfg2Register+0x98>
 8008014:	2d01      	cmp	r5, #1
 8008016:	d016      	beq.n	8008046 <MX25LM51245G_WriteCfg2Register+0x94>
 8008018:	2301      	movs	r3, #1
 800801a:	e017      	b.n	800804c <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800801c:	2304      	movs	r3, #4
 800801e:	e7d9      	b.n	8007fd4 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008020:	2308      	movs	r3, #8
 8008022:	e7db      	b.n	8007fdc <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008024:	2310      	movs	r3, #16
 8008026:	e7dc      	b.n	8007fe2 <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8008028:	f247 238d 	movw	r3, #29325	; 0x728d
 800802c:	e7dc      	b.n	8007fe8 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800802e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008032:	e7dd      	b.n	8007ff0 <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008038:	e7de      	b.n	8007ff8 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800803a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800803e:	e7e3      	b.n	8008008 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008040:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008044:	e7e4      	b.n	8008010 <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8008046:	2302      	movs	r3, #2
 8008048:	e000      	b.n	800804c <MX25LM51245G_WriteCfg2Register+0x9a>
 800804a:	2301      	movs	r3, #1
 800804c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800804e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008052:	4669      	mov	r1, sp
 8008054:	4638      	mov	r0, r7
 8008056:	f002 ff05 	bl	800ae64 <HAL_OSPI_Command>
 800805a:	b958      	cbnz	r0, 8008074 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800805c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008060:	a91a      	add	r1, sp, #104	; 0x68
 8008062:	4638      	mov	r0, r7
 8008064:	f002 ff5f 	bl	800af26 <HAL_OSPI_Transmit>
 8008068:	b938      	cbnz	r0, 800807a <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800806a:	b015      	add	sp, #84	; 0x54
 800806c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 800806e:	f04f 30ff 	mov.w	r0, #4294967295
 8008072:	e7fa      	b.n	800806a <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	e7f7      	b.n	800806a <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 800807a:	f04f 30ff 	mov.w	r0, #4294967295
 800807e:	e7f4      	b.n	800806a <MX25LM51245G_WriteCfg2Register+0xb8>

08008080 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8008080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008082:	b095      	sub	sp, #84	; 0x54
 8008084:	4607      	mov	r7, r0
 8008086:	460c      	mov	r4, r1
 8008088:	4615      	mov	r5, r2
 800808a:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 800808c:	2250      	movs	r2, #80	; 0x50
 800808e:	2100      	movs	r1, #0
 8008090:	4668      	mov	r0, sp
 8008092:	f018 fbf1 	bl	8020878 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008096:	2c00      	cmp	r4, #0
 8008098:	bf08      	it	eq
 800809a:	2d01      	cmpeq	r5, #1
 800809c:	d05b      	beq.n	8008156 <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d13d      	bne.n	800811e <MX25LM51245G_ReadCfg2Register+0x9e>
 80080a2:	2301      	movs	r3, #1
 80080a4:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80080a6:	2d01      	cmp	r5, #1
 80080a8:	d03b      	beq.n	8008122 <MX25LM51245G_ReadCfg2Register+0xa2>
 80080aa:	2300      	movs	r3, #0
 80080ac:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	d139      	bne.n	8008126 <MX25LM51245G_ReadCfg2Register+0xa6>
 80080b2:	2300      	movs	r3, #0
 80080b4:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80080b6:	2c00      	cmp	r4, #0
 80080b8:	d137      	bne.n	800812a <MX25LM51245G_ReadCfg2Register+0xaa>
 80080ba:	2371      	movs	r3, #113	; 0x71
 80080bc:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80080be:	2c00      	cmp	r4, #0
 80080c0:	d136      	bne.n	8008130 <MX25LM51245G_ReadCfg2Register+0xb0>
 80080c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080c6:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80080c8:	2d01      	cmp	r5, #1
 80080ca:	d034      	beq.n	8008136 <MX25LM51245G_ReadCfg2Register+0xb6>
 80080cc:	2300      	movs	r3, #0
 80080ce:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80080d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80080d4:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 80080d6:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80080d8:	bb84      	cbnz	r4, 800813c <MX25LM51245G_ReadCfg2Register+0xbc>
 80080da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080de:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80080e0:	2d01      	cmp	r5, #1
 80080e2:	d02e      	beq.n	8008142 <MX25LM51245G_ReadCfg2Register+0xc2>
 80080e4:	2300      	movs	r3, #0
 80080e6:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80080e8:	bb74      	cbnz	r4, 8008148 <MX25LM51245G_ReadCfg2Register+0xc8>
 80080ea:	2300      	movs	r3, #0
 80080ec:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80080ee:	2d01      	cmp	r5, #1
 80080f0:	d02c      	beq.n	800814c <MX25LM51245G_ReadCfg2Register+0xcc>
 80080f2:	2301      	movs	r3, #1
 80080f4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80080f6:	2d01      	cmp	r5, #1
 80080f8:	d02a      	beq.n	8008150 <MX25LM51245G_ReadCfg2Register+0xd0>
 80080fa:	2300      	movs	r3, #0
 80080fc:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80080fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008102:	4669      	mov	r1, sp
 8008104:	4638      	mov	r0, r7
 8008106:	f002 fead 	bl	800ae64 <HAL_OSPI_Command>
 800810a:	bb38      	cbnz	r0, 800815c <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800810c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008110:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008112:	4638      	mov	r0, r7
 8008114:	f002 ff54 	bl	800afc0 <HAL_OSPI_Receive>
 8008118:	bb18      	cbnz	r0, 8008162 <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800811a:	b015      	add	sp, #84	; 0x54
 800811c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800811e:	2304      	movs	r3, #4
 8008120:	e7c0      	b.n	80080a4 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008122:	2308      	movs	r3, #8
 8008124:	e7c2      	b.n	80080ac <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008126:	2310      	movs	r3, #16
 8008128:	e7c4      	b.n	80080b4 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800812a:	f247 138e 	movw	r3, #29070	; 0x718e
 800812e:	e7c5      	b.n	80080bc <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008134:	e7c7      	b.n	80080c6 <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800813a:	e7c8      	b.n	80080ce <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800813c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008140:	e7cd      	b.n	80080de <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008142:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008146:	e7ce      	b.n	80080e6 <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008148:	2305      	movs	r3, #5
 800814a:	e7cf      	b.n	80080ec <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800814c:	2302      	movs	r3, #2
 800814e:	e7d1      	b.n	80080f4 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008150:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008154:	e7d2      	b.n	80080fc <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 8008156:	f04f 30ff 	mov.w	r0, #4294967295
 800815a:	e7de      	b.n	800811a <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	e7db      	b.n	800811a <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8008162:	f04f 30ff 	mov.w	r0, #4294967295
 8008166:	e7d8      	b.n	800811a <MX25LM51245G_ReadCfg2Register+0x9a>

08008168 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	b094      	sub	sp, #80	; 0x50
 800816c:	4606      	mov	r6, r0
 800816e:	460c      	mov	r4, r1
 8008170:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8008172:	2250      	movs	r2, #80	; 0x50
 8008174:	2100      	movs	r1, #0
 8008176:	4668      	mov	r0, sp
 8008178:	f018 fb7e 	bl	8020878 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800817c:	2c00      	cmp	r4, #0
 800817e:	bf08      	it	eq
 8008180:	2d01      	cmpeq	r5, #1
 8008182:	d01e      	beq.n	80081c2 <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008184:	b9a4      	cbnz	r4, 80081b0 <MX25LM51245G_ResetEnable+0x48>
 8008186:	2301      	movs	r3, #1
 8008188:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800818a:	2d01      	cmp	r5, #1
 800818c:	d012      	beq.n	80081b4 <MX25LM51245G_ResetEnable+0x4c>
 800818e:	2300      	movs	r3, #0
 8008190:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008192:	b98c      	cbnz	r4, 80081b8 <MX25LM51245G_ResetEnable+0x50>
 8008194:	2300      	movs	r3, #0
 8008196:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8008198:	b984      	cbnz	r4, 80081bc <MX25LM51245G_ResetEnable+0x54>
 800819a:	2366      	movs	r3, #102	; 0x66
 800819c:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800819e:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a2:	4669      	mov	r1, sp
 80081a4:	4630      	mov	r0, r6
 80081a6:	f002 fe5d 	bl	800ae64 <HAL_OSPI_Command>
 80081aa:	b968      	cbnz	r0, 80081c8 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80081ac:	b014      	add	sp, #80	; 0x50
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80081b0:	2304      	movs	r3, #4
 80081b2:	e7e9      	b.n	8008188 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80081b4:	2308      	movs	r3, #8
 80081b6:	e7eb      	b.n	8008190 <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80081b8:	2310      	movs	r3, #16
 80081ba:	e7ec      	b.n	8008196 <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80081bc:	f246 6399 	movw	r3, #26265	; 0x6699
 80081c0:	e7ec      	b.n	800819c <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 80081c2:	f04f 30ff 	mov.w	r0, #4294967295
 80081c6:	e7f1      	b.n	80081ac <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	e7ee      	b.n	80081ac <MX25LM51245G_ResetEnable+0x44>

080081ce <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	b094      	sub	sp, #80	; 0x50
 80081d2:	4606      	mov	r6, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80081d8:	2250      	movs	r2, #80	; 0x50
 80081da:	2100      	movs	r1, #0
 80081dc:	4668      	mov	r0, sp
 80081de:	f018 fb4b 	bl	8020878 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80081e2:	2c00      	cmp	r4, #0
 80081e4:	bf08      	it	eq
 80081e6:	2d01      	cmpeq	r5, #1
 80081e8:	d01e      	beq.n	8008228 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80081ea:	b9a4      	cbnz	r4, 8008216 <MX25LM51245G_ResetMemory+0x48>
 80081ec:	2301      	movs	r3, #1
 80081ee:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80081f0:	2d01      	cmp	r5, #1
 80081f2:	d012      	beq.n	800821a <MX25LM51245G_ResetMemory+0x4c>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80081f8:	b98c      	cbnz	r4, 800821e <MX25LM51245G_ResetMemory+0x50>
 80081fa:	2300      	movs	r3, #0
 80081fc:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80081fe:	b984      	cbnz	r4, 8008222 <MX25LM51245G_ResetMemory+0x54>
 8008200:	2399      	movs	r3, #153	; 0x99
 8008202:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008204:	f241 3288 	movw	r2, #5000	; 0x1388
 8008208:	4669      	mov	r1, sp
 800820a:	4630      	mov	r0, r6
 800820c:	f002 fe2a 	bl	800ae64 <HAL_OSPI_Command>
 8008210:	b968      	cbnz	r0, 800822e <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8008212:	b014      	add	sp, #80	; 0x50
 8008214:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008216:	2304      	movs	r3, #4
 8008218:	e7e9      	b.n	80081ee <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800821a:	2308      	movs	r3, #8
 800821c:	e7eb      	b.n	80081f6 <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800821e:	2310      	movs	r3, #16
 8008220:	e7ec      	b.n	80081fc <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8008222:	f649 1366 	movw	r3, #39270	; 0x9966
 8008226:	e7ec      	b.n	8008202 <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	e7f1      	b.n	8008212 <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 800822e:	f04f 30ff 	mov.w	r0, #4294967295
 8008232:	e7ee      	b.n	8008212 <MX25LM51245G_ResetMemory+0x44>

08008234 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008238:	4b32      	ldr	r3, [pc, #200]	; (8008304 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 800823a:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 800823e:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8008242:	4b31      	ldr	r3, [pc, #196]	; (8008308 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 8008244:	222c      	movs	r2, #44	; 0x2c
 8008246:	fb02 3101 	mla	r1, r2, r1, r3
 800824a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800824c:	68ca      	ldr	r2, [r1, #12]
 800824e:	eb03 0e02 	add.w	lr, r3, r2
 8008252:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8008256:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8008258:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800825a:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800825e:	690b      	ldr	r3, [r1, #16]
 8008260:	6a08      	ldr	r0, [r1, #32]
 8008262:	1a1e      	subs	r6, r3, r0
 8008264:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8008268:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800826a:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800826e:	694b      	ldr	r3, [r1, #20]
 8008270:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 8008274:	f1be 0f00 	cmp.w	lr, #0
 8008278:	dd08      	ble.n	800828c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 800827a:	2e00      	cmp	r6, #0
 800827c:	dd09      	ble.n	8008292 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800827e:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 8008280:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8008284:	2d0f      	cmp	r5, #15
 8008286:	d83b      	bhi.n	8008300 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008288:	2400      	movs	r4, #0
 800828a:	e02b      	b.n	80082e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 800828c:	f04f 0e00 	mov.w	lr, #0
 8008290:	e7f3      	b.n	800827a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 8008292:	2600      	movs	r6, #0
 8008294:	e7f3      	b.n	800827e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8008296:	3201      	adds	r2, #1
 8008298:	2a0f      	cmp	r2, #15
 800829a:	d822      	bhi.n	80082e2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800829c:	fb02 f300 	mul.w	r3, r2, r0
 80082a0:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80082a4:	459e      	cmp	lr, r3
 80082a6:	bf8c      	ite	hi
 80082a8:	2100      	movhi	r1, #0
 80082aa:	2101      	movls	r1, #1
 80082ac:	429e      	cmp	r6, r3
 80082ae:	bf38      	it	cc
 80082b0:	2100      	movcc	r1, #0
 80082b2:	2900      	cmp	r1, #0
 80082b4:	d0ef      	beq.n	8008296 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 80082b6:	45a9      	cmp	r9, r5
 80082b8:	d0ed      	beq.n	8008296 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80082ba:	4914      	ldr	r1, [pc, #80]	; (800830c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 80082bc:	680b      	ldr	r3, [r1, #0]
 80082be:	f8df a050 	ldr.w	sl, [pc, #80]	; 8008310 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 80082c2:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80082c6:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 80082ca:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80082ce:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80082d2:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 80082d6:	3301      	adds	r3, #1
 80082d8:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80082da:	2b7f      	cmp	r3, #127	; 0x7f
 80082dc:	d810      	bhi.n	8008300 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 80082de:	46a9      	mov	r9, r5
 80082e0:	e7d9      	b.n	8008296 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80082e2:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80082e4:	2c0f      	cmp	r4, #15
 80082e6:	d809      	bhi.n	80082fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80082e8:	1c67      	adds	r7, r4, #1
 80082ea:	1c68      	adds	r0, r5, #1
 80082ec:	fb04 0300 	mla	r3, r4, r0, r0
 80082f0:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 80082f4:	4598      	cmp	r8, r3
 80082f6:	d8f4      	bhi.n	80082e2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80082f8:	2200      	movs	r2, #0
 80082fa:	e7cd      	b.n	8008298 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80082fc:	3501      	adds	r5, #1
 80082fe:	e7c1      	b.n	8008284 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 8008300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008304:	3b9aca00 	.word	0x3b9aca00
 8008308:	0802349c 	.word	0x0802349c
 800830c:	2400388c 	.word	0x2400388c
 8008310:	24002e8c 	.word	0x24002e8c

08008314 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8008314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	b089      	sub	sp, #36	; 0x24
 800831a:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800831c:	4f4b      	ldr	r7, [pc, #300]	; (800844c <I2C_Compute_SCLL_SCLH+0x138>)
 800831e:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 8008322:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8008326:	494a      	ldr	r1, [pc, #296]	; (8008450 <I2C_Compute_SCLL_SCLH+0x13c>)
 8008328:	232c      	movs	r3, #44	; 0x2c
 800832a:	fb04 f303 	mul.w	r3, r4, r3
 800832e:	18ca      	adds	r2, r1, r3
 8008330:	58cb      	ldr	r3, [r1, r3]
 8008332:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 8008336:	fbb1 f1f3 	udiv	r1, r1, r3
 800833a:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800833c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800833e:	fb08 f303 	mul.w	r3, r8, r3
 8008342:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8008344:	6853      	ldr	r3, [r2, #4]
 8008346:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800834a:	6893      	ldr	r3, [r2, #8]
 800834c:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 8008350:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8008352:	2300      	movs	r3, #0
 8008354:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8008356:	f04f 33ff 	mov.w	r3, #4294967295
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800835e:	e060      	b.n	8008422 <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8008360:	1af2      	subs	r2, r6, r3
 8008362:	e02a      	b.n	80083ba <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8008364:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008366:	29ff      	cmp	r1, #255	; 0xff
 8008368:	d837      	bhi.n	80083da <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800836a:	1c4d      	adds	r5, r1, #1
 800836c:	fb01 0200 	mla	r2, r1, r0, r0
 8008370:	4442      	add	r2, r8
 8008372:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8008374:	eb0c 0302 	add.w	r3, ip, r2
 8008378:	4e35      	ldr	r6, [pc, #212]	; (8008450 <I2C_Compute_SCLL_SCLH+0x13c>)
 800837a:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800837e:	fb0b 6b04 	mla	fp, fp, r4, r6
 8008382:	f8db 6020 	ldr.w	r6, [fp, #32]
 8008386:	4433      	add	r3, r6
 8008388:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 800838c:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800838e:	429f      	cmp	r7, r3
 8008390:	bf8c      	ite	hi
 8008392:	2600      	movhi	r6, #0
 8008394:	2601      	movls	r6, #1
 8008396:	4599      	cmp	r9, r3
 8008398:	bf38      	it	cc
 800839a:	2600      	movcc	r6, #0
 800839c:	2e00      	cmp	r6, #0
 800839e:	d0e1      	beq.n	8008364 <I2C_Compute_SCLL_SCLH+0x50>
 80083a0:	4e2b      	ldr	r6, [pc, #172]	; (8008450 <I2C_Compute_SCLL_SCLH+0x13c>)
 80083a2:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80083a6:	fb0b 6604 	mla	r6, fp, r4, r6
 80083aa:	69f6      	ldr	r6, [r6, #28]
 80083ac:	4296      	cmp	r6, r2
 80083ae:	d8d9      	bhi.n	8008364 <I2C_Compute_SCLL_SCLH+0x50>
 80083b0:	4592      	cmp	sl, r2
 80083b2:	d2d7      	bcs.n	8008364 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 80083b4:	9e05      	ldr	r6, [sp, #20]
 80083b6:	1b9a      	subs	r2, r3, r6
 80083b8:	d4d2      	bmi.n	8008360 <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 80083ba:	9b02      	ldr	r3, [sp, #8]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d2d1      	bcs.n	8008364 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 80083c0:	9b04      	ldr	r3, [sp, #16]
 80083c2:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 80083c6:	4b23      	ldr	r3, [pc, #140]	; (8008454 <I2C_Compute_SCLL_SCLH+0x140>)
 80083c8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80083cc:	9e01      	ldr	r6, [sp, #4]
 80083ce:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 80083d0:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 80083d2:	9202      	str	r2, [sp, #8]
              ret = count;
 80083d4:	9b04      	ldr	r3, [sp, #16]
 80083d6:	9307      	str	r3, [sp, #28]
 80083d8:	e7c4      	b.n	8008364 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80083de:	9b01      	ldr	r3, [sp, #4]
 80083e0:	2bff      	cmp	r3, #255	; 0xff
 80083e2:	d81b      	bhi.n	800841c <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80083e4:	9906      	ldr	r1, [sp, #24]
 80083e6:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	9203      	str	r2, [sp, #12]
 80083f0:	fb03 0c00 	mla	ip, r3, r0, r0
 80083f4:	ea4f 084a 	mov.w	r8, sl, lsl #1
 80083f8:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 80083fc:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <I2C_Compute_SCLL_SCLH+0x13c>)
 8008400:	222c      	movs	r2, #44	; 0x2c
 8008402:	fb02 3304 	mla	r3, r2, r4, r3
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	4563      	cmp	r3, ip
 800840a:	d2e6      	bcs.n	80083da <I2C_Compute_SCLL_SCLH+0xc6>
 800840c:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 8008410:	1a5b      	subs	r3, r3, r1
 8008412:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8008416:	d2e0      	bcs.n	80083da <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008418:	2100      	movs	r1, #0
 800841a:	e7a4      	b.n	8008366 <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800841c:	9b04      	ldr	r3, [sp, #16]
 800841e:	3301      	adds	r3, #1
 8008420:	9304      	str	r3, [sp, #16]
 8008422:	4b0d      	ldr	r3, [pc, #52]	; (8008458 <I2C_Compute_SCLL_SCLH+0x144>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	9a04      	ldr	r2, [sp, #16]
 8008428:	4293      	cmp	r3, r2
 800842a:	d90a      	bls.n	8008442 <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800842c:	9b04      	ldr	r3, [sp, #16]
 800842e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008432:	4a08      	ldr	r2, [pc, #32]	; (8008454 <I2C_Compute_SCLL_SCLH+0x140>)
 8008434:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008438:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800843c:	2300      	movs	r3, #0
 800843e:	9301      	str	r3, [sp, #4]
 8008440:	e7cd      	b.n	80083de <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 8008442:	9807      	ldr	r0, [sp, #28]
 8008444:	b009      	add	sp, #36	; 0x24
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	bf00      	nop
 800844c:	3b9aca00 	.word	0x3b9aca00
 8008450:	0802349c 	.word	0x0802349c
 8008454:	24002e8c 	.word	0x24002e8c
 8008458:	2400388c 	.word	0x2400388c

0800845c <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800845c:	2800      	cmp	r0, #0
 800845e:	bf18      	it	ne
 8008460:	2900      	cmpne	r1, #0
 8008462:	d134      	bne.n	80084ce <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8008464:	2000      	movs	r0, #0
}
 8008466:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8008468:	3401      	adds	r4, #1
 800846a:	2c02      	cmp	r4, #2
 800846c:	d834      	bhi.n	80084d8 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800846e:	4b1c      	ldr	r3, [pc, #112]	; (80084e0 <I2C_GetTiming+0x84>)
 8008470:	212c      	movs	r1, #44	; 0x2c
 8008472:	fb01 3304 	mla	r3, r1, r4, r3
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	4293      	cmp	r3, r2
 800847a:	d8f5      	bhi.n	8008468 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800847c:	4b18      	ldr	r3, [pc, #96]	; (80084e0 <I2C_GetTiming+0x84>)
 800847e:	fb01 3304 	mla	r3, r1, r4, r3
 8008482:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8008484:	4293      	cmp	r3, r2
 8008486:	d3ef      	bcc.n	8008468 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8008488:	4621      	mov	r1, r4
 800848a:	4628      	mov	r0, r5
 800848c:	f7ff fed2 	bl	8008234 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8008490:	4621      	mov	r1, r4
 8008492:	4628      	mov	r0, r5
 8008494:	f7ff ff3e 	bl	8008314 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8008498:	287f      	cmp	r0, #127	; 0x7f
 800849a:	d81f      	bhi.n	80084dc <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800849c:	4a11      	ldr	r2, [pc, #68]	; (80084e4 <I2C_GetTiming+0x88>)
 800849e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80084a2:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 80084a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	051b      	lsls	r3, r3, #20
 80084ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80084b2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80084b6:	68a1      	ldr	r1, [r4, #8]
 80084b8:	0409      	lsls	r1, r1, #16
 80084ba:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80084be:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80084c0:	68e1      	ldr	r1, [r4, #12]
 80084c2:	0209      	lsls	r1, r1, #8
 80084c4:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80084c6:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80084c8:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80084ca:	4318      	orrs	r0, r3
 80084cc:	e005      	b.n	80084da <I2C_GetTiming+0x7e>
{
 80084ce:	b538      	push	{r3, r4, r5, lr}
 80084d0:	4605      	mov	r5, r0
 80084d2:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80084d4:	2400      	movs	r4, #0
 80084d6:	e7c8      	b.n	800846a <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 80084d8:	2000      	movs	r0, #0
}
 80084da:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 80084dc:	2000      	movs	r0, #0
  return ret;
 80084de:	e7fc      	b.n	80084da <I2C_GetTiming+0x7e>
 80084e0:	0802349c 	.word	0x0802349c
 80084e4:	24002e8c 	.word	0x24002e8c

080084e8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80084e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084ec:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80084ee:	4c2a      	ldr	r4, [pc, #168]	; (8008598 <I2C4_MspInit+0xb0>)
 80084f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80084f4:	f043 0308 	orr.w	r3, r3, #8
 80084f8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80084fc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8008508:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800850c:	f043 0308 	orr.w	r3, r3, #8
 8008510:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8008514:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8008520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008524:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8008526:	f04f 0912 	mov.w	r9, #18
 800852a:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800852e:	f04f 0800 	mov.w	r8, #0
 8008532:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8008536:	2702      	movs	r7, #2
 8008538:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800853a:	2604      	movs	r6, #4
 800853c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800853e:	4d17      	ldr	r5, [pc, #92]	; (800859c <I2C4_MspInit+0xb4>)
 8008540:	a903      	add	r1, sp, #12
 8008542:	4628      	mov	r0, r5
 8008544:	f001 fada 	bl	8009afc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8008548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800854c:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800854e:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008552:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8008556:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8008558:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800855a:	a903      	add	r1, sp, #12
 800855c:	4628      	mov	r0, r5
 800855e:	f001 facd 	bl	8009afc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8008562:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8008566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 800856e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8008572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008576:	9302      	str	r3, [sp, #8]
 8008578:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800857a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800857e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008582:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8008586:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800858a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800858e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8008592:	b009      	add	sp, #36	; 0x24
 8008594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008598:	58024400 	.word	0x58024400
 800859c:	58020c00 	.word	0x58020c00

080085a0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80085a0:	b510      	push	{r4, lr}
 80085a2:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80085a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085a8:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80085aa:	4c09      	ldr	r4, [pc, #36]	; (80085d0 <I2C4_MspDeInit+0x30>)
 80085ac:	4620      	mov	r0, r4
 80085ae:	f001 fbb5 	bl	8009d1c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80085b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085b6:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80085b8:	4620      	mov	r0, r4
 80085ba:	f001 fbaf 	bl	8009d1c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80085be:	4a05      	ldr	r2, [pc, #20]	; (80085d4 <I2C4_MspDeInit+0x34>)
 80085c0:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 80085c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 80085cc:	b006      	add	sp, #24
 80085ce:	bd10      	pop	{r4, pc}
 80085d0:	58020c00 	.word	0x58020c00
 80085d4:	58024400 	.word	0x58024400

080085d8 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80085d8:	b510      	push	{r4, lr}
 80085da:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80085dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80085e0:	9402      	str	r4, [sp, #8]
 80085e2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80085e6:	9401      	str	r4, [sp, #4]
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	4613      	mov	r3, r2
 80085ec:	460a      	mov	r2, r1
 80085ee:	4601      	mov	r1, r0
 80085f0:	4804      	ldr	r0, [pc, #16]	; (8008604 <I2C4_WriteReg+0x2c>)
 80085f2:	f001 fe98 	bl	800a326 <HAL_I2C_Mem_Write>
 80085f6:	b910      	cbnz	r0, 80085fe <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 80085f8:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 80085fa:	b004      	add	sp, #16
 80085fc:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 80085fe:	f06f 0007 	mvn.w	r0, #7
 8008602:	e7fa      	b.n	80085fa <I2C4_WriteReg+0x22>
 8008604:	24003890 	.word	0x24003890

08008608 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8008608:	b510      	push	{r4, lr}
 800860a:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800860c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008610:	9402      	str	r4, [sp, #8]
 8008612:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8008616:	9401      	str	r4, [sp, #4]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4613      	mov	r3, r2
 800861c:	460a      	mov	r2, r1
 800861e:	4601      	mov	r1, r0
 8008620:	4804      	ldr	r0, [pc, #16]	; (8008634 <I2C4_ReadReg+0x2c>)
 8008622:	f001 ff55 	bl	800a4d0 <HAL_I2C_Mem_Read>
 8008626:	b910      	cbnz	r0, 800862e <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 8008628:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 800862a:	b004      	add	sp, #16
 800862c:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 800862e:	f06f 0007 	mvn.w	r0, #7
 8008632:	e7fa      	b.n	800862a <I2C4_ReadReg+0x22>
 8008634:	24003890 	.word	0x24003890

08008638 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <BSP_I2C4_DeInit+0x28>)
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	3b01      	subs	r3, #1
 800863e:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8008640:	b10b      	cbz	r3, 8008646 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 8008642:	2000      	movs	r0, #0
}
 8008644:	4770      	bx	lr
{
 8008646:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 8008648:	4c06      	ldr	r4, [pc, #24]	; (8008664 <BSP_I2C4_DeInit+0x2c>)
 800864a:	4620      	mov	r0, r4
 800864c:	f7ff ffa8 	bl	80085a0 <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8008650:	4620      	mov	r0, r4
 8008652:	f001 fe4f 	bl	800a2f4 <HAL_I2C_DeInit>
 8008656:	b900      	cbnz	r0, 800865a <BSP_I2C4_DeInit+0x22>
}
 8008658:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 800865a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800865e:	e7fb      	b.n	8008658 <BSP_I2C4_DeInit+0x20>
 8008660:	24002e88 	.word	0x24002e88
 8008664:	24003890 	.word	0x24003890

08008668 <MX_I2C4_Init>:
{
 8008668:	b510      	push	{r4, lr}
 800866a:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 800866c:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008672:	2201      	movs	r2, #1
 8008674:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008676:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8008678:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800867a:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800867c:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800867e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8008680:	f001 fdda 	bl	800a238 <HAL_I2C_Init>
 8008684:	b108      	cbz	r0, 800868a <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8008686:	2001      	movs	r0, #1
}
 8008688:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800868a:	2100      	movs	r1, #0
 800868c:	4620      	mov	r0, r4
 800868e:	f001 fffc 	bl	800a68a <HAL_I2CEx_ConfigAnalogFilter>
 8008692:	b108      	cbz	r0, 8008698 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8008694:	2001      	movs	r0, #1
 8008696:	e7f7      	b.n	8008688 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8008698:	2100      	movs	r1, #0
 800869a:	4620      	mov	r0, r4
 800869c:	f002 f823 	bl	800a6e6 <HAL_I2CEx_ConfigDigitalFilter>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d0f1      	beq.n	8008688 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 80086a4:	2001      	movs	r0, #1
 80086a6:	e7ef      	b.n	8008688 <MX_I2C4_Init+0x20>

080086a8 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <BSP_I2C4_Init+0x48>)
 80086aa:	4a12      	ldr	r2, [pc, #72]	; (80086f4 <BSP_I2C4_Init+0x4c>)
 80086ac:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 80086ae:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <BSP_I2C4_Init+0x50>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	b10b      	cbz	r3, 80086b8 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 80086b4:	2000      	movs	r0, #0
}
 80086b6:	4770      	bx	lr
{
 80086b8:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 80086ba:	3301      	adds	r3, #1
 80086bc:	4a0e      	ldr	r2, [pc, #56]	; (80086f8 <BSP_I2C4_Init+0x50>)
 80086be:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80086c0:	480b      	ldr	r0, [pc, #44]	; (80086f0 <BSP_I2C4_Init+0x48>)
 80086c2:	f001 ffdd 	bl	800a680 <HAL_I2C_GetState>
 80086c6:	b108      	cbz	r0, 80086cc <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 80086c8:	2000      	movs	r0, #0
}
 80086ca:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 80086cc:	4c08      	ldr	r4, [pc, #32]	; (80086f0 <BSP_I2C4_Init+0x48>)
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7ff ff0a 	bl	80084e8 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80086d4:	f003 fd04 	bl	800c0e0 <HAL_RCC_GetPCLK2Freq>
 80086d8:	4908      	ldr	r1, [pc, #32]	; (80086fc <BSP_I2C4_Init+0x54>)
 80086da:	f7ff febf 	bl	800845c <I2C_GetTiming>
 80086de:	4601      	mov	r1, r0
 80086e0:	4620      	mov	r0, r4
 80086e2:	f7ff ffc1 	bl	8008668 <MX_I2C4_Init>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d0ef      	beq.n	80086ca <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 80086ea:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80086ee:	e7ec      	b.n	80086ca <BSP_I2C4_Init+0x22>
 80086f0:	24003890 	.word	0x24003890
 80086f4:	58001c00 	.word	0x58001c00
 80086f8:	24002e88 	.word	0x24002e88
 80086fc:	000186a0 	.word	0x000186a0

08008700 <BSP_I2C4_WriteReg>:
{
 8008700:	b500      	push	{lr}
 8008702:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	4613      	mov	r3, r2
 8008708:	2201      	movs	r2, #1
 800870a:	f7ff ff65 	bl	80085d8 <I2C4_WriteReg>
 800870e:	b910      	cbnz	r0, 8008716 <BSP_I2C4_WriteReg+0x16>
}
 8008710:	b003      	add	sp, #12
 8008712:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008716:	4805      	ldr	r0, [pc, #20]	; (800872c <BSP_I2C4_WriteReg+0x2c>)
 8008718:	f001 ffb5 	bl	800a686 <HAL_I2C_GetError>
 800871c:	2804      	cmp	r0, #4
 800871e:	d002      	beq.n	8008726 <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008720:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008724:	e7f4      	b.n	8008710 <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8008726:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800872a:	e7f1      	b.n	8008710 <BSP_I2C4_WriteReg+0x10>
 800872c:	24003890 	.word	0x24003890

08008730 <BSP_I2C4_ReadReg>:
{
 8008730:	b500      	push	{lr}
 8008732:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4613      	mov	r3, r2
 8008738:	2201      	movs	r2, #1
 800873a:	f7ff ff65 	bl	8008608 <I2C4_ReadReg>
 800873e:	b910      	cbnz	r0, 8008746 <BSP_I2C4_ReadReg+0x16>
}
 8008740:	b003      	add	sp, #12
 8008742:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008746:	4805      	ldr	r0, [pc, #20]	; (800875c <BSP_I2C4_ReadReg+0x2c>)
 8008748:	f001 ff9d 	bl	800a686 <HAL_I2C_GetError>
 800874c:	2804      	cmp	r0, #4
 800874e:	d002      	beq.n	8008756 <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008750:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008754:	e7f4      	b.n	8008740 <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8008756:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800875a:	e7f1      	b.n	8008740 <BSP_I2C4_ReadReg+0x10>
 800875c:	24003890 	.word	0x24003890

08008760 <BSP_GetTick>:
{
 8008760:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8008762:	f000 fde7 	bl	8009334 <HAL_GetTick>
}
 8008766:	bd08      	pop	{r3, pc}

08008768 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800876e:	4b7e      	ldr	r3, [pc, #504]	; (8008968 <OSPI_NOR_MspInit+0x200>)
 8008770:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008778:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800877c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008780:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008784:	9201      	str	r2, [sp, #4]
 8008786:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8008788:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800878a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800878e:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8008790:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008792:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008796:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8008798:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800879c:	f042 0202 	orr.w	r2, r2, #2
 80087a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80087a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80087a8:	f002 0202 	and.w	r2, r2, #2
 80087ac:	9202      	str	r2, [sp, #8]
 80087ae:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 80087b0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80087b4:	f042 0204 	orr.w	r2, r2, #4
 80087b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80087bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80087c0:	f002 0204 	and.w	r2, r2, #4
 80087c4:	9203      	str	r2, [sp, #12]
 80087c6:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 80087c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80087cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80087d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80087d8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80087dc:	9204      	str	r2, [sp, #16]
 80087de:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 80087e0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80087e4:	f042 0208 	orr.w	r2, r2, #8
 80087e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80087ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80087f0:	f002 0208 	and.w	r2, r2, #8
 80087f4:	9205      	str	r2, [sp, #20]
 80087f6:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 80087f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80087fc:	f042 0220 	orr.w	r2, r2, #32
 8008800:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008804:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008808:	f002 0220 	and.w	r2, r2, #32
 800880c:	9206      	str	r2, [sp, #24]
 800880e:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8008810:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008814:	f042 0220 	orr.w	r2, r2, #32
 8008818:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800881c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008820:	f002 0220 	and.w	r2, r2, #32
 8008824:	9207      	str	r2, [sp, #28]
 8008826:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8008828:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800882c:	f042 0220 	orr.w	r2, r2, #32
 8008830:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008834:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008838:	f002 0220 	and.w	r2, r2, #32
 800883c:	9208      	str	r2, [sp, #32]
 800883e:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8008840:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008844:	f042 0204 	orr.w	r2, r2, #4
 8008848:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800884c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008850:	f002 0204 	and.w	r2, r2, #4
 8008854:	9209      	str	r2, [sp, #36]	; 0x24
 8008856:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8008858:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800885c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008860:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008864:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008868:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800886c:	920a      	str	r2, [sp, #40]	; 0x28
 800886e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8008870:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008878:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800887c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008880:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008884:	920b      	str	r2, [sp, #44]	; 0x2c
 8008886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8008888:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800888c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008890:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8008894:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889c:	930c      	str	r3, [sp, #48]	; 0x30
 800889e:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 80088a0:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80088a4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80088a8:	f04f 0a02 	mov.w	sl, #2
 80088ac:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80088b0:	2301      	movs	r3, #1
 80088b2:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80088b4:	2303      	movs	r3, #3
 80088b6:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 80088b8:	240a      	movs	r4, #10
 80088ba:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80088bc:	a90d      	add	r1, sp, #52	; 0x34
 80088be:	482b      	ldr	r0, [pc, #172]	; (800896c <OSPI_NOR_MspInit+0x204>)
 80088c0:	f001 f91c 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 80088c4:	2320      	movs	r3, #32
 80088c6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 80088c8:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 80088ca:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8008980 <OSPI_NOR_MspInit+0x218>
 80088ce:	a90d      	add	r1, sp, #52	; 0x34
 80088d0:	4648      	mov	r0, r9
 80088d2:	f001 f913 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 80088d6:	2304      	movs	r3, #4
 80088d8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 80088de:	2509      	movs	r5, #9
 80088e0:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80088e2:	a90d      	add	r1, sp, #52	; 0x34
 80088e4:	4822      	ldr	r0, [pc, #136]	; (8008970 <OSPI_NOR_MspInit+0x208>)
 80088e6:	f001 f909 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 80088ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ee:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 80088f0:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 80088f2:	a90d      	add	r1, sp, #52	; 0x34
 80088f4:	481f      	ldr	r0, [pc, #124]	; (8008974 <OSPI_NOR_MspInit+0x20c>)
 80088f6:	f001 f901 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 80088fa:	f44f 7800 	mov.w	r8, #512	; 0x200
 80088fe:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8008902:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8008904:	4e1c      	ldr	r6, [pc, #112]	; (8008978 <OSPI_NOR_MspInit+0x210>)
 8008906:	a90d      	add	r1, sp, #52	; 0x34
 8008908:	4630      	mov	r0, r6
 800890a:	f001 f8f7 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800890e:	2780      	movs	r7, #128	; 0x80
 8008910:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8008912:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8008914:	a90d      	add	r1, sp, #52	; 0x34
 8008916:	4630      	mov	r0, r6
 8008918:	f001 f8f0 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800891c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8008920:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8008922:	a90d      	add	r1, sp, #52	; 0x34
 8008924:	4630      	mov	r0, r6
 8008926:	f001 f8e9 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800892a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800892e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8008930:	a90d      	add	r1, sp, #52	; 0x34
 8008932:	4648      	mov	r0, r9
 8008934:	f001 f8e2 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8008938:	2308      	movs	r3, #8
 800893a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800893c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800893e:	a90d      	add	r1, sp, #52	; 0x34
 8008940:	480e      	ldr	r0, [pc, #56]	; (800897c <OSPI_NOR_MspInit+0x214>)
 8008942:	f001 f8db 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8008946:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800894a:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800894c:	a90d      	add	r1, sp, #52	; 0x34
 800894e:	4807      	ldr	r0, [pc, #28]	; (800896c <OSPI_NOR_MspInit+0x204>)
 8008950:	f001 f8d4 	bl	8009afc <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8008954:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8008956:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8008958:	a90d      	add	r1, sp, #52	; 0x34
 800895a:	4806      	ldr	r0, [pc, #24]	; (8008974 <OSPI_NOR_MspInit+0x20c>)
 800895c:	f001 f8ce 	bl	8009afc <HAL_GPIO_Init>
}
 8008960:	b013      	add	sp, #76	; 0x4c
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	bf00      	nop
 8008968:	58024400 	.word	0x58024400
 800896c:	58021800 	.word	0x58021800
 8008970:	58020400 	.word	0x58020400
 8008974:	58020c00 	.word	0x58020c00
 8008978:	58021400 	.word	0x58021400
 800897c:	58021c00 	.word	0x58021c00
 8008980:	58020800 	.word	0x58020800

08008984 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008988:	4c24      	ldr	r4, [pc, #144]	; (8008a1c <OSPI_NOR_ResetMemory+0x98>)
 800898a:	235c      	movs	r3, #92	; 0x5c
 800898c:	fb03 4400 	mla	r4, r3, r0, r4
 8008990:	2200      	movs	r2, #0
 8008992:	4611      	mov	r1, r2
 8008994:	4620      	mov	r0, r4
 8008996:	f7ff fbe7 	bl	8008168 <MX25LM51245G_ResetEnable>
 800899a:	bb60      	cbnz	r0, 80089f6 <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800899c:	2200      	movs	r2, #0
 800899e:	4611      	mov	r1, r2
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7ff fc14 	bl	80081ce <MX25LM51245G_ResetMemory>
 80089a6:	bb48      	cbnz	r0, 80089fc <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80089a8:	2200      	movs	r2, #0
 80089aa:	2101      	movs	r1, #1
 80089ac:	4620      	mov	r0, r4
 80089ae:	f7ff fbdb 	bl	8008168 <MX25LM51245G_ResetEnable>
 80089b2:	bb30      	cbnz	r0, 8008a02 <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80089b4:	2200      	movs	r2, #0
 80089b6:	2101      	movs	r1, #1
 80089b8:	4620      	mov	r0, r4
 80089ba:	f7ff fc08 	bl	80081ce <MX25LM51245G_ResetMemory>
 80089be:	bb18      	cbnz	r0, 8008a08 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80089c0:	2201      	movs	r2, #1
 80089c2:	4611      	mov	r1, r2
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7ff fbcf 	bl	8008168 <MX25LM51245G_ResetEnable>
 80089ca:	bb00      	cbnz	r0, 8008a0e <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80089cc:	2201      	movs	r2, #1
 80089ce:	4611      	mov	r1, r2
 80089d0:	4620      	mov	r0, r4
 80089d2:	f7ff fbfc 	bl	80081ce <MX25LM51245G_ResetMemory>
 80089d6:	4604      	mov	r4, r0
 80089d8:	b9e0      	cbnz	r0, 8008a14 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80089da:	4811      	ldr	r0, [pc, #68]	; (8008a20 <OSPI_NOR_ResetMemory+0x9c>)
 80089dc:	2301      	movs	r3, #1
 80089de:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 80089e2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80089e6:	2300      	movs	r3, #0
 80089e8:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80089ea:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80089ec:	2064      	movs	r0, #100	; 0x64
 80089ee:	f000 fca7 	bl	8009340 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 80089f2:	4620      	mov	r0, r4
 80089f4:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80089f6:	f06f 0404 	mvn.w	r4, #4
 80089fa:	e7fa      	b.n	80089f2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80089fc:	f06f 0404 	mvn.w	r4, #4
 8008a00:	e7f7      	b.n	80089f2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a02:	f06f 0404 	mvn.w	r4, #4
 8008a06:	e7f4      	b.n	80089f2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a08:	f06f 0404 	mvn.w	r4, #4
 8008a0c:	e7f1      	b.n	80089f2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a0e:	f06f 0404 	mvn.w	r4, #4
 8008a12:	e7ee      	b.n	80089f2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a14:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8008a18:	e7eb      	b.n	80089f2 <OSPI_NOR_ResetMemory+0x6e>
 8008a1a:	bf00      	nop
 8008a1c:	240038e4 	.word	0x240038e4
 8008a20:	240038dc 	.word	0x240038dc

08008a24 <OSPI_NOR_MspDeInit>:
{
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8008a26:	2104      	movs	r1, #4
 8008a28:	4820      	ldr	r0, [pc, #128]	; (8008aac <OSPI_NOR_MspDeInit+0x88>)
 8008a2a:	f001 f977 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8008a2e:	4f20      	ldr	r7, [pc, #128]	; (8008ab0 <OSPI_NOR_MspDeInit+0x8c>)
 8008a30:	2120      	movs	r1, #32
 8008a32:	4638      	mov	r0, r7
 8008a34:	f001 f972 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8008a38:	4e1e      	ldr	r6, [pc, #120]	; (8008ab4 <OSPI_NOR_MspDeInit+0x90>)
 8008a3a:	2140      	movs	r1, #64	; 0x40
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f001 f96d 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8008a42:	4d1d      	ldr	r5, [pc, #116]	; (8008ab8 <OSPI_NOR_MspDeInit+0x94>)
 8008a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f001 f967 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8008a4e:	4c1b      	ldr	r4, [pc, #108]	; (8008abc <OSPI_NOR_MspDeInit+0x98>)
 8008a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a54:	4620      	mov	r0, r4
 8008a56:	f001 f961 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8008a5a:	2180      	movs	r1, #128	; 0x80
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f001 f95d 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8008a62:	2140      	movs	r1, #64	; 0x40
 8008a64:	4620      	mov	r0, r4
 8008a66:	f001 f959 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8008a6a:	2102      	movs	r1, #2
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f001 f955 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8008a72:	2108      	movs	r1, #8
 8008a74:	4812      	ldr	r0, [pc, #72]	; (8008ac0 <OSPI_NOR_MspDeInit+0x9c>)
 8008a76:	f001 f951 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8008a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f001 f94c 	bl	8009d1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8008a84:	2180      	movs	r1, #128	; 0x80
 8008a86:	4628      	mov	r0, r5
 8008a88:	f001 f948 	bl	8009d1c <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 8008a8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ac4 <OSPI_NOR_MspDeInit+0xa0>)
 8008a8e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a94:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8008a96:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008a98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a9c:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 8008a9e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008aa2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008aa6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8008aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aac:	58020400 	.word	0x58020400
 8008ab0:	58020800 	.word	0x58020800
 8008ab4:	58021800 	.word	0x58021800
 8008ab8:	58020c00 	.word	0x58020c00
 8008abc:	58021400 	.word	0x58021400
 8008ac0:	58021c00 	.word	0x58021c00
 8008ac4:	58024400 	.word	0x58024400

08008ac8 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008ace:	4d2b      	ldr	r5, [pc, #172]	; (8008b7c <OSPI_NOR_ExitOPIMode+0xb4>)
 8008ad0:	235c      	movs	r3, #92	; 0x5c
 8008ad2:	fb03 5500 	mla	r5, r3, r0, r5
 8008ad6:	4b2a      	ldr	r3, [pc, #168]	; (8008b80 <OSPI_NOR_ExitOPIMode+0xb8>)
 8008ad8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008adc:	789a      	ldrb	r2, [r3, #2]
 8008ade:	7859      	ldrb	r1, [r3, #1]
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f7ff f9cf 	bl	8007e84 <MX25LM51245G_WriteEnable>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d138      	bne.n	8008b5c <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 8008af0:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8008af4:	4922      	ldr	r1, [pc, #136]	; (8008b80 <OSPI_NOR_ExitOPIMode+0xb8>)
 8008af6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	788a      	ldrb	r2, [r1, #2]
 8008afe:	7849      	ldrb	r1, [r1, #1]
 8008b00:	4628      	mov	r0, r5
 8008b02:	f7ff fa56 	bl	8007fb2 <MX25LM51245G_WriteCfg2Register>
 8008b06:	4606      	mov	r6, r0
 8008b08:	bb58      	cbnz	r0, 8008b62 <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8008b0a:	2028      	movs	r0, #40	; 0x28
 8008b0c:	f000 fc18 	bl	8009340 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8008b10:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <OSPI_NOR_ExitOPIMode+0xb8>)
 8008b12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b16:	789b      	ldrb	r3, [r3, #2]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d014      	beq.n	8008b46 <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4628      	mov	r0, r5
 8008b22:	f7ff f872 	bl	8007c0a <MX25LM51245G_AutoPollingMemReady>
 8008b26:	b9f8      	cbnz	r0, 8008b68 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4619      	mov	r1, r3
 8008b32:	4628      	mov	r0, r5
 8008b34:	f7ff faa4 	bl	8008080 <MX25LM51245G_ReadCfg2Register>
 8008b38:	b9c8      	cbnz	r0, 8008b6e <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 8008b3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008b3e:	b9cb      	cbnz	r3, 8008b74 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 8008b40:	4630      	mov	r0, r6
 8008b42:	b004      	add	sp, #16
 8008b44:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008b4a:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f002 fc6f 	bl	800b430 <HAL_OSPI_Init>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d0e2      	beq.n	8008b1c <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8008b56:	f06f 0603 	mvn.w	r6, #3
 8008b5a:	e7df      	b.n	8008b1c <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b5c:	f06f 0604 	mvn.w	r6, #4
 8008b60:	e7ee      	b.n	8008b40 <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b62:	f06f 0604 	mvn.w	r6, #4
 8008b66:	e7eb      	b.n	8008b40 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b68:	f06f 0604 	mvn.w	r6, #4
 8008b6c:	e7e8      	b.n	8008b40 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b6e:	f06f 0604 	mvn.w	r6, #4
 8008b72:	e7e5      	b.n	8008b40 <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b74:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8008b78:	e7e2      	b.n	8008b40 <OSPI_NOR_ExitOPIMode+0x78>
 8008b7a:	bf00      	nop
 8008b7c:	240038e4 	.word	0x240038e4
 8008b80:	240038dc 	.word	0x240038dc

08008b84 <OSPI_NOR_EnterSOPIMode>:
{
 8008b84:	b530      	push	{r4, r5, lr}
 8008b86:	b085      	sub	sp, #20
 8008b88:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008b8a:	4c2e      	ldr	r4, [pc, #184]	; (8008c44 <OSPI_NOR_EnterSOPIMode+0xc0>)
 8008b8c:	235c      	movs	r3, #92	; 0x5c
 8008b8e:	fb03 4400 	mla	r4, r3, r0, r4
 8008b92:	4b2d      	ldr	r3, [pc, #180]	; (8008c48 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8008b94:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008b98:	789a      	ldrb	r2, [r3, #2]
 8008b9a:	7859      	ldrb	r1, [r3, #1]
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7ff f971 	bl	8007e84 <MX25LM51245G_WriteEnable>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d139      	bne.n	8008c1a <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8008ba6:	4928      	ldr	r1, [pc, #160]	; (8008c48 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8008ba8:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008bac:	2307      	movs	r3, #7
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008bb4:	788a      	ldrb	r2, [r1, #2]
 8008bb6:	7849      	ldrb	r1, [r1, #1]
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff f9fa 	bl	8007fb2 <MX25LM51245G_WriteCfg2Register>
 8008bbe:	bb78      	cbnz	r0, 8008c20 <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008bc0:	4b21      	ldr	r3, [pc, #132]	; (8008c48 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8008bc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008bc6:	789a      	ldrb	r2, [r3, #2]
 8008bc8:	7859      	ldrb	r1, [r3, #1]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff f95a 	bl	8007e84 <MX25LM51245G_WriteEnable>
 8008bd0:	bb48      	cbnz	r0, 8008c26 <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8008bd2:	481d      	ldr	r0, [pc, #116]	; (8008c48 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8008bd4:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8008bd8:	2301      	movs	r3, #1
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	78aa      	ldrb	r2, [r5, #2]
 8008be0:	7869      	ldrb	r1, [r5, #1]
 8008be2:	4620      	mov	r0, r4
 8008be4:	f7ff f9e5 	bl	8007fb2 <MX25LM51245G_WriteCfg2Register>
 8008be8:	bb00      	cbnz	r0, 8008c2c <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8008bea:	2028      	movs	r0, #40	; 0x28
 8008bec:	f000 fba8 	bl	8009340 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7ff f808 	bl	8007c0a <MX25LM51245G_AutoPollingMemReady>
 8008bfa:	b9d0      	cbnz	r0, 8008c32 <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8008bfc:	ab03      	add	r3, sp, #12
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	2300      	movs	r3, #0
 8008c02:	461a      	mov	r2, r3
 8008c04:	2101      	movs	r1, #1
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff fa3a 	bl	8008080 <MX25LM51245G_ReadCfg2Register>
 8008c0c:	b9a0      	cbnz	r0, 8008c38 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8008c0e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d113      	bne.n	8008c3e <OSPI_NOR_EnterSOPIMode+0xba>
}
 8008c16:	b005      	add	sp, #20
 8008c18:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c1a:	f06f 0004 	mvn.w	r0, #4
 8008c1e:	e7fa      	b.n	8008c16 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c20:	f06f 0004 	mvn.w	r0, #4
 8008c24:	e7f7      	b.n	8008c16 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c26:	f06f 0004 	mvn.w	r0, #4
 8008c2a:	e7f4      	b.n	8008c16 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c2c:	f06f 0004 	mvn.w	r0, #4
 8008c30:	e7f1      	b.n	8008c16 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c32:	f06f 0004 	mvn.w	r0, #4
 8008c36:	e7ee      	b.n	8008c16 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c38:	f06f 0004 	mvn.w	r0, #4
 8008c3c:	e7eb      	b.n	8008c16 <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c3e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008c42:	e7e8      	b.n	8008c16 <OSPI_NOR_EnterSOPIMode+0x92>
 8008c44:	240038e4 	.word	0x240038e4
 8008c48:	240038dc 	.word	0x240038dc

08008c4c <OSPI_NOR_EnterDOPIMode>:
{
 8008c4c:	b530      	push	{r4, r5, lr}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008c52:	4c35      	ldr	r4, [pc, #212]	; (8008d28 <OSPI_NOR_EnterDOPIMode+0xdc>)
 8008c54:	235c      	movs	r3, #92	; 0x5c
 8008c56:	fb03 4400 	mla	r4, r3, r0, r4
 8008c5a:	4b34      	ldr	r3, [pc, #208]	; (8008d2c <OSPI_NOR_EnterDOPIMode+0xe0>)
 8008c5c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008c60:	789a      	ldrb	r2, [r3, #2]
 8008c62:	7859      	ldrb	r1, [r3, #1]
 8008c64:	4620      	mov	r0, r4
 8008c66:	f7ff f90d 	bl	8007e84 <MX25LM51245G_WriteEnable>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d144      	bne.n	8008cf8 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8008c6e:	492f      	ldr	r1, [pc, #188]	; (8008d2c <OSPI_NOR_EnterDOPIMode+0xe0>)
 8008c70:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008c74:	2307      	movs	r3, #7
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008c7c:	788a      	ldrb	r2, [r1, #2]
 8008c7e:	7849      	ldrb	r1, [r1, #1]
 8008c80:	4620      	mov	r0, r4
 8008c82:	f7ff f996 	bl	8007fb2 <MX25LM51245G_WriteCfg2Register>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d139      	bne.n	8008cfe <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008c8a:	4b28      	ldr	r3, [pc, #160]	; (8008d2c <OSPI_NOR_EnterDOPIMode+0xe0>)
 8008c8c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c90:	789a      	ldrb	r2, [r3, #2]
 8008c92:	7859      	ldrb	r1, [r3, #1]
 8008c94:	4620      	mov	r0, r4
 8008c96:	f7ff f8f5 	bl	8007e84 <MX25LM51245G_WriteEnable>
 8008c9a:	bb98      	cbnz	r0, 8008d04 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8008c9c:	4923      	ldr	r1, [pc, #140]	; (8008d2c <OSPI_NOR_EnterDOPIMode+0xe0>)
 8008c9e:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	788a      	ldrb	r2, [r1, #2]
 8008caa:	7849      	ldrb	r1, [r1, #1]
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7ff f980 	bl	8007fb2 <MX25LM51245G_WriteCfg2Register>
 8008cb2:	bb50      	cbnz	r0, 8008d0a <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8008cb4:	2028      	movs	r0, #40	; 0x28
 8008cb6:	f000 fb43 	bl	8009340 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8008cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cbe:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8008cc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f002 fbb2 	bl	800b430 <HAL_OSPI_Init>
 8008ccc:	bb00      	cbnz	r0, 8008d10 <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f7fe ff99 	bl	8007c0a <MX25LM51245G_AutoPollingMemReady>
 8008cd8:	b9e8      	cbnz	r0, 8008d16 <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8008cda:	ab03      	add	r3, sp, #12
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f7ff f9cb 	bl	8008080 <MX25LM51245G_ReadCfg2Register>
 8008cea:	b9b8      	cbnz	r0, 8008d1c <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8008cec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d116      	bne.n	8008d22 <OSPI_NOR_EnterDOPIMode+0xd6>
}
 8008cf4:	b005      	add	sp, #20
 8008cf6:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cf8:	f06f 0004 	mvn.w	r0, #4
 8008cfc:	e7fa      	b.n	8008cf4 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cfe:	f06f 0004 	mvn.w	r0, #4
 8008d02:	e7f7      	b.n	8008cf4 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d04:	f06f 0004 	mvn.w	r0, #4
 8008d08:	e7f4      	b.n	8008cf4 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d0a:	f06f 0004 	mvn.w	r0, #4
 8008d0e:	e7f1      	b.n	8008cf4 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008d10:	f06f 0003 	mvn.w	r0, #3
 8008d14:	e7ee      	b.n	8008cf4 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d16:	f06f 0004 	mvn.w	r0, #4
 8008d1a:	e7eb      	b.n	8008cf4 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d1c:	f06f 0004 	mvn.w	r0, #4
 8008d20:	e7e8      	b.n	8008cf4 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d22:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008d26:	e7e5      	b.n	8008cf4 <OSPI_NOR_EnterDOPIMode+0xa8>
 8008d28:	240038e4 	.word	0x240038e4
 8008d2c:	240038dc 	.word	0x240038dc

08008d30 <MX_OSPI_NOR_Init>:
{
 8008d30:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 8008d32:	4b12      	ldr	r3, [pc, #72]	; (8008d7c <MX_OSPI_NOR_Init+0x4c>)
 8008d34:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 8008d36:	2304      	movs	r3, #4
 8008d38:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8008d3e:	680a      	ldr	r2, [r1, #0]
 8008d40:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8008d42:	2202      	movs	r2, #2
 8008d44:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8008d46:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8008d48:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8008d4a:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8008d4c:	684a      	ldr	r2, [r1, #4]
 8008d4e:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8008d50:	688a      	ldr	r2, [r1, #8]
 8008d52:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8008d54:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8008d56:	2308      	movs	r3, #8
 8008d58:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8008d5a:	68cb      	ldr	r3, [r1, #12]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d005      	beq.n	8008d6c <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8008d60:	2300      	movs	r3, #0
 8008d62:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008d64:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8008d66:	f002 fb63 	bl	800b430 <HAL_OSPI_Init>
}
 8008d6a:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8008d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d70:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8008d72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d76:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008d78:	e7f5      	b.n	8008d66 <MX_OSPI_NOR_Init+0x36>
 8008d7a:	bf00      	nop
 8008d7c:	52005000 	.word	0x52005000

08008d80 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008d80:	bb38      	cbnz	r0, 8008dd2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 8008d82:	b510      	push	{r4, lr}
 8008d84:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8008d86:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008d88:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008d8c:	789b      	ldrb	r3, [r3, #2]
 8008d8e:	b983      	cbnz	r3, 8008db2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8008d90:	4b14      	ldr	r3, [pc, #80]	; (8008de4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008d92:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008d96:	2201      	movs	r2, #1
 8008d98:	7859      	ldrb	r1, [r3, #1]
 8008d9a:	4b13      	ldr	r3, [pc, #76]	; (8008de8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 8008d9c:	205c      	movs	r0, #92	; 0x5c
 8008d9e:	fb00 3004 	mla	r0, r0, r4, r3
 8008da2:	f7fe ffb1 	bl	8007d08 <MX25LM51245G_EnableMemoryMappedModeSTR>
 8008da6:	b9b8      	cbnz	r0, 8008dd8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008daa:	2202      	movs	r2, #2
 8008dac:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 8008db0:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8008db2:	4b0c      	ldr	r3, [pc, #48]	; (8008de4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008db4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008db8:	7859      	ldrb	r1, [r3, #1]
 8008dba:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 8008dbc:	205c      	movs	r0, #92	; 0x5c
 8008dbe:	fb00 3004 	mla	r0, r0, r4, r3
 8008dc2:	f7ff f80d 	bl	8007de0 <MX25LM51245G_EnableMemoryMappedModeDTR>
 8008dc6:	b950      	cbnz	r0, 8008dde <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8008dc8:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 8008dd0:	e7ee      	b.n	8008db0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 8008dd2:	f06f 0001 	mvn.w	r0, #1
}
 8008dd6:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008dd8:	f06f 0004 	mvn.w	r0, #4
 8008ddc:	e7e8      	b.n	8008db0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008dde:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008de2:	e7e5      	b.n	8008db0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 8008de4:	240038dc 	.word	0x240038dc
 8008de8:	240038e4 	.word	0x240038e4

08008dec <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008dec:	b990      	cbnz	r0, 8008e14 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 8008dee:	b510      	push	{r4, lr}
 8008df0:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8008df2:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8008df4:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d10e      	bne.n	8008e1a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 8008dfe:	205c      	movs	r0, #92	; 0x5c
 8008e00:	fb00 3004 	mla	r0, r0, r4, r3
 8008e04:	f002 facc 	bl	800b3a0 <HAL_OSPI_Abort>
 8008e08:	b950      	cbnz	r0, 8008e20 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8008e0a:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 8008e12:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008e14:	f06f 0001 	mvn.w	r0, #1
}
 8008e18:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8008e1a:	f06f 001a 	mvn.w	r0, #26
 8008e1e:	e7f8      	b.n	8008e12 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 8008e20:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008e24:	e7f5      	b.n	8008e12 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 8008e26:	bf00      	nop
 8008e28:	240038dc 	.word	0x240038dc
 8008e2c:	240038e4 	.word	0x240038e4

08008e30 <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008e30:	bb08      	cbnz	r0, 8008e76 <BSP_OSPI_NOR_DeInit+0x46>
{
 8008e32:	b510      	push	{r4, lr}
 8008e34:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8008e36:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <BSP_OSPI_NOR_DeInit+0x54>)
 8008e38:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d013      	beq.n	8008e68 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8008e40:	4b10      	ldr	r3, [pc, #64]	; (8008e84 <BSP_OSPI_NOR_DeInit+0x54>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8008e48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e4c:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8008e4e:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8008e50:	4b0d      	ldr	r3, [pc, #52]	; (8008e88 <BSP_OSPI_NOR_DeInit+0x58>)
 8008e52:	225c      	movs	r2, #92	; 0x5c
 8008e54:	fb02 3404 	mla	r4, r2, r4, r3
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f7ff fde3 	bl	8008a24 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f001 ffec 	bl	800ae3c <HAL_OSPI_DeInit>
 8008e64:	b950      	cbnz	r0, 8008e7c <BSP_OSPI_NOR_DeInit+0x4c>
}
 8008e66:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8008e68:	f7ff ffc0 	bl	8008dec <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d0e7      	beq.n	8008e40 <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e70:	f06f 0004 	mvn.w	r0, #4
 8008e74:	e7f7      	b.n	8008e66 <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8008e76:	f06f 0001 	mvn.w	r0, #1
}
 8008e7a:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 8008e7c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008e80:	e7f1      	b.n	8008e66 <BSP_OSPI_NOR_DeInit+0x36>
 8008e82:	bf00      	nop
 8008e84:	240038dc 	.word	0x240038dc
 8008e88:	240038e4 	.word	0x240038e4

08008e8c <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d141      	bne.n	8008f14 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	460d      	mov	r5, r1
 8008e94:	4616      	mov	r6, r2
 8008e96:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8008e98:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008e9a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d03b      	beq.n	8008f1a <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8008ea2:	4b1f      	ldr	r3, [pc, #124]	; (8008f20 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008ea4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d00b      	beq.n	8008ec6 <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8008eae:	2901      	cmp	r1, #1
 8008eb0:	d025      	beq.n	8008efe <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 8008eb2:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8008eb4:	4b1a      	ldr	r3, [pc, #104]	; (8008f20 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8008ebc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008ec0:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8008ec2:	70a6      	strb	r6, [r4, #2]
}
 8008ec4:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8008ec6:	2901      	cmp	r1, #1
 8008ec8:	d105      	bne.n	8008ed6 <BSP_OSPI_NOR_ConfigFlash+0x4a>
 8008eca:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008ecc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008ed0:	789b      	ldrb	r3, [r3, #2]
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d01c      	beq.n	8008f10 <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f7ff fdf6 	bl	8008ac8 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8008edc:	2800      	cmp	r0, #0
 8008ede:	bf08      	it	eq
 8008ee0:	2d01      	cmpeq	r5, #1
 8008ee2:	d10f      	bne.n	8008f04 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8008ee6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008eea:	789b      	ldrb	r3, [r3, #2]
 8008eec:	b91b      	cbnz	r3, 8008ef6 <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff feac 	bl	8008c4c <OSPI_NOR_EnterDOPIMode>
 8008ef4:	e006      	b.n	8008f04 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7ff fe44 	bl	8008b84 <OSPI_NOR_EnterSOPIMode>
 8008efc:	e002      	b.n	8008f04 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8008efe:	b922      	cbnz	r2, 8008f0a <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8008f00:	f7ff fe40 	bl	8008b84 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d1dd      	bne.n	8008ec4 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8008f08:	e7d4      	b.n	8008eb4 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8008f0a:	f7ff fe9f 	bl	8008c4c <OSPI_NOR_EnterDOPIMode>
 8008f0e:	e7f9      	b.n	8008f04 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 8008f10:	2000      	movs	r0, #0
 8008f12:	e7cf      	b.n	8008eb4 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 8008f14:	f06f 0001 	mvn.w	r0, #1
}
 8008f18:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8008f1a:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8008f1e:	e7d1      	b.n	8008ec4 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8008f20:	240038dc 	.word	0x240038dc

08008f24 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d13f      	bne.n	8008fa8 <BSP_OSPI_NOR_Init+0x84>
{
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	b08e      	sub	sp, #56	; 0x38
 8008f2c:	460d      	mov	r5, r1
 8008f2e:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8008f30:	4b23      	ldr	r3, [pc, #140]	; (8008fc0 <BSP_OSPI_NOR_Init+0x9c>)
 8008f32:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008f36:	b113      	cbz	r3, 8008f3e <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8008f38:	2000      	movs	r0, #0
}
 8008f3a:	b00e      	add	sp, #56	; 0x38
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8008f3e:	4e21      	ldr	r6, [pc, #132]	; (8008fc4 <BSP_OSPI_NOR_Init+0xa0>)
 8008f40:	235c      	movs	r3, #92	; 0x5c
 8008f42:	fb03 6600 	mla	r6, r3, r0, r6
 8008f46:	4630      	mov	r0, r6
 8008f48:	f7ff fc0e 	bl	8008768 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8008f4c:	a805      	add	r0, sp, #20
 8008f4e:	f7fe fe43 	bl	8007bd8 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 8008f52:	2303      	movs	r3, #3
 8008f54:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8008f56:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f58:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008f5c:	b313      	cbz	r3, 8008fa4 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8008f5e:	fab3 f383 	clz	r3, r3
 8008f62:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8008f64:	2300      	movs	r3, #0
 8008f66:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8008f68:	786b      	ldrb	r3, [r5, #1]
 8008f6a:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8008f6c:	a901      	add	r1, sp, #4
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff fede 	bl	8008d30 <MX_OSPI_NOR_Init>
 8008f74:	b9d8      	cbnz	r0, 8008fae <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7ff fd04 	bl	8008984 <OSPI_NOR_ResetMemory>
 8008f7c:	b9d0      	cbnz	r0, 8008fb4 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008f7e:	4b10      	ldr	r3, [pc, #64]	; (8008fc0 <BSP_OSPI_NOR_Init+0x9c>)
 8008f80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f84:	789a      	ldrb	r2, [r3, #2]
 8008f86:	7859      	ldrb	r1, [r3, #1]
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7fe fe3e 	bl	8007c0a <MX25LM51245G_AutoPollingMemReady>
 8008f8e:	b9a0      	cbnz	r0, 8008fba <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8008f90:	786a      	ldrb	r2, [r5, #1]
 8008f92:	7829      	ldrb	r1, [r5, #0]
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7ff ff79 	bl	8008e8c <BSP_OSPI_NOR_ConfigFlash>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d0cd      	beq.n	8008f3a <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f9e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8008fa2:	e7ca      	b.n	8008f3a <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	e7dc      	b.n	8008f62 <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 8008fa8:	f06f 0001 	mvn.w	r0, #1
}
 8008fac:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 8008fae:	f06f 0003 	mvn.w	r0, #3
 8008fb2:	e7c2      	b.n	8008f3a <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fb4:	f06f 0004 	mvn.w	r0, #4
 8008fb8:	e7bf      	b.n	8008f3a <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fba:	f06f 0004 	mvn.w	r0, #4
 8008fbe:	e7bc      	b.n	8008f3a <BSP_OSPI_NOR_Init+0x16>
 8008fc0:	240038dc 	.word	0x240038dc
 8008fc4:	240038e4 	.word	0x240038e4

08008fc8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8008fd2:	2370      	movs	r3, #112	; 0x70
 8008fd4:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 8008fd8:	4b17      	ldr	r3, [pc, #92]	; (8009038 <FT5336_Probe+0x70>)
 8008fda:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8008fdc:	4b17      	ldr	r3, [pc, #92]	; (800903c <FT5336_Probe+0x74>)
 8008fde:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8008fe0:	4b17      	ldr	r3, [pc, #92]	; (8009040 <FT5336_Probe+0x78>)
 8008fe2:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8008fe4:	4b17      	ldr	r3, [pc, #92]	; (8009044 <FT5336_Probe+0x7c>)
 8008fe6:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8008fe8:	4b17      	ldr	r3, [pc, #92]	; (8009048 <FT5336_Probe+0x80>)
 8008fea:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8008fec:	a902      	add	r1, sp, #8
 8008fee:	4817      	ldr	r0, [pc, #92]	; (800904c <FT5336_Probe+0x84>)
 8008ff0:	f7fe fd50 	bl	8007a94 <FT5336_RegisterBusIO>
 8008ff4:	b998      	cbnz	r0, 800901e <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8008ff6:	a901      	add	r1, sp, #4
 8008ff8:	4814      	ldr	r0, [pc, #80]	; (800904c <FT5336_Probe+0x84>)
 8008ffa:	f7fe fc8d 	bl	8007918 <FT5336_ReadID>
 8008ffe:	b988      	cbnz	r0, 8009024 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8009000:	9b01      	ldr	r3, [sp, #4]
 8009002:	2b51      	cmp	r3, #81	; 0x51
 8009004:	d111      	bne.n	800902a <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8009006:	4811      	ldr	r0, [pc, #68]	; (800904c <FT5336_Probe+0x84>)
 8009008:	4b11      	ldr	r3, [pc, #68]	; (8009050 <FT5336_Probe+0x88>)
 800900a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800900e:	4b11      	ldr	r3, [pc, #68]	; (8009054 <FT5336_Probe+0x8c>)
 8009010:	4a11      	ldr	r2, [pc, #68]	; (8009058 <FT5336_Probe+0x90>)
 8009012:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4798      	blx	r3
 8009018:	b950      	cbnz	r0, 8009030 <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 800901a:	b008      	add	sp, #32
 800901c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 800901e:	f06f 0007 	mvn.w	r0, #7
 8009022:	e7fa      	b.n	800901a <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009024:	f06f 0004 	mvn.w	r0, #4
 8009028:	e7f7      	b.n	800901a <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800902a:	f06f 0006 	mvn.w	r0, #6
 800902e:	e7f4      	b.n	800901a <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009030:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8009034:	e7f1      	b.n	800901a <FT5336_Probe+0x52>
 8009036:	bf00      	nop
 8009038:	080086a9 	.word	0x080086a9
 800903c:	08008639 	.word	0x08008639
 8009040:	08008731 	.word	0x08008731
 8009044:	08008701 	.word	0x08008701
 8009048:	08008761 	.word	0x08008761
 800904c:	24003940 	.word	0x24003940
 8009050:	24003968 	.word	0x24003968
 8009054:	24000040 	.word	0x24000040
 8009058:	2400398c 	.word	0x2400398c

0800905c <BSP_TS_Init>:
{
 800905c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800905e:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8009060:	2800      	cmp	r0, #0
 8009062:	d150      	bne.n	8009106 <BSP_TS_Init+0xaa>
 8009064:	460c      	mov	r4, r1
 8009066:	4605      	mov	r5, r0
 8009068:	680b      	ldr	r3, [r1, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d04e      	beq.n	800910c <BSP_TS_Init+0xb0>
 800906e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8009072:	d84e      	bhi.n	8009112 <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8009074:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8009076:	2a00      	cmp	r2, #0
 8009078:	d04e      	beq.n	8009118 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800907a:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800907e:	d84e      	bhi.n	800911e <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8009080:	68c9      	ldr	r1, [r1, #12]
 8009082:	4293      	cmp	r3, r2
 8009084:	bf28      	it	cs
 8009086:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8009088:	4299      	cmp	r1, r3
 800908a:	d84b      	bhi.n	8009124 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800908c:	f7ff ff9c 	bl	8008fc8 <FT5336_Probe>
 8009090:	4606      	mov	r6, r0
 8009092:	2800      	cmp	r0, #0
 8009094:	d149      	bne.n	800912a <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8009096:	6820      	ldr	r0, [r4, #0]
 8009098:	4925      	ldr	r1, [pc, #148]	; (8009130 <BSP_TS_Init+0xd4>)
 800909a:	016a      	lsls	r2, r5, #5
 800909c:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 80090a0:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80090a2:	6862      	ldr	r2, [r4, #4]
 80090a4:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80090a6:	68a2      	ldr	r2, [r4, #8]
 80090a8:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80090aa:	68e2      	ldr	r2, [r4, #12]
 80090ac:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80090ae:	4b21      	ldr	r3, [pc, #132]	; (8009134 <BSP_TS_Init+0xd8>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	a901      	add	r1, sp, #4
 80090b6:	4a20      	ldr	r2, [pc, #128]	; (8009138 <BSP_TS_Init+0xdc>)
 80090b8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80090bc:	4798      	blx	r3
 80090be:	2800      	cmp	r0, #0
 80090c0:	db1e      	blt.n	8009100 <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80090c2:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <BSP_TS_Init+0xd4>)
 80090c4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80090c8:	9a02      	ldr	r2, [sp, #8]
 80090ca:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80090cc:	9a03      	ldr	r2, [sp, #12]
 80090ce:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80090d0:	462b      	mov	r3, r5
 80090d2:	b113      	cbz	r3, 80090da <BSP_TS_Init+0x7e>
}
 80090d4:	4630      	mov	r0, r6
 80090d6:	b005      	add	sp, #20
 80090d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	68e1      	ldr	r1, [r4, #12]
 80090de:	440a      	add	r2, r1
 80090e0:	3201      	adds	r2, #1
 80090e2:	4913      	ldr	r1, [pc, #76]	; (8009130 <BSP_TS_Init+0xd4>)
 80090e4:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 80090e8:	3006      	adds	r0, #6
 80090ea:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80090ee:	6862      	ldr	r2, [r4, #4]
 80090f0:	68e7      	ldr	r7, [r4, #12]
 80090f2:	443a      	add	r2, r7
 80090f4:	3201      	adds	r2, #1
 80090f6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80090fa:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80090fc:	3301      	adds	r3, #1
 80090fe:	e7e8      	b.n	80090d2 <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009100:	f06f 0604 	mvn.w	r6, #4
 8009104:	e7e6      	b.n	80090d4 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 8009106:	f06f 0601 	mvn.w	r6, #1
 800910a:	e7e3      	b.n	80090d4 <BSP_TS_Init+0x78>
 800910c:	f06f 0601 	mvn.w	r6, #1
 8009110:	e7e0      	b.n	80090d4 <BSP_TS_Init+0x78>
 8009112:	f06f 0601 	mvn.w	r6, #1
 8009116:	e7dd      	b.n	80090d4 <BSP_TS_Init+0x78>
 8009118:	f06f 0601 	mvn.w	r6, #1
 800911c:	e7da      	b.n	80090d4 <BSP_TS_Init+0x78>
 800911e:	f06f 0601 	mvn.w	r6, #1
 8009122:	e7d7      	b.n	80090d4 <BSP_TS_Init+0x78>
 8009124:	f06f 0601 	mvn.w	r6, #1
 8009128:	e7d4      	b.n	80090d4 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 800912a:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 800912e:	e7d1      	b.n	80090d4 <BSP_TS_Init+0x78>
 8009130:	2400396c 	.word	0x2400396c
 8009134:	2400398c 	.word	0x2400398c
 8009138:	24003968 	.word	0x24003968

0800913c <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 800913c:	2800      	cmp	r0, #0
 800913e:	d178      	bne.n	8009232 <BSP_TS_GetState+0xf6>
{
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	460c      	mov	r4, r1
 8009146:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8009148:	4b3b      	ldr	r3, [pc, #236]	; (8009238 <BSP_TS_GetState+0xfc>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	a901      	add	r1, sp, #4
 8009150:	4a3a      	ldr	r2, [pc, #232]	; (800923c <BSP_TS_GetState+0x100>)
 8009152:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8009156:	4798      	blx	r3
 8009158:	2800      	cmp	r0, #0
 800915a:	db66      	blt.n	800922a <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 800915c:	9e01      	ldr	r6, [sp, #4]
 800915e:	2e00      	cmp	r6, #0
 8009160:	d059      	beq.n	8009216 <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 8009162:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 8009164:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8009166:	4b36      	ldr	r3, [pc, #216]	; (8009240 <BSP_TS_GetState+0x104>)
 8009168:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800916c:	6899      	ldr	r1, [r3, #8]
 800916e:	f011 0f08 	tst.w	r1, #8
 8009172:	d141      	bne.n	80091f8 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 8009174:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 8009176:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8009178:	f011 0f02 	tst.w	r1, #2
 800917c:	d005      	beq.n	800918a <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800917e:	4b30      	ldr	r3, [pc, #192]	; (8009240 <BSP_TS_GetState+0x104>)
 8009180:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800918a:	f011 0f04 	tst.w	r1, #4
 800918e:	d005      	beq.n	800919c <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8009190:	4a2b      	ldr	r2, [pc, #172]	; (8009240 <BSP_TS_GetState+0x104>)
 8009192:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 8009196:	6952      	ldr	r2, [r2, #20]
 8009198:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800919c:	4a28      	ldr	r2, [pc, #160]	; (8009240 <BSP_TS_GetState+0x104>)
 800919e:	0168      	lsls	r0, r5, #5
 80091a0:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 80091a4:	5810      	ldr	r0, [r2, r0]
 80091a6:	fb00 f303 	mul.w	r3, r0, r3
 80091aa:	690a      	ldr	r2, [r1, #16]
 80091ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80091b0:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80091b2:	684a      	ldr	r2, [r1, #4]
 80091b4:	fb0c f202 	mul.w	r2, ip, r2
 80091b8:	6948      	ldr	r0, [r1, #20]
 80091ba:	fbb2 f2f0 	udiv	r2, r2, r0
 80091be:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 80091c0:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80091c2:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80091c4:	4283      	cmp	r3, r0
 80091c6:	d91a      	bls.n	80091fe <BSP_TS_GetState+0xc2>
 80091c8:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80091ca:	491d      	ldr	r1, [pc, #116]	; (8009240 <BSP_TS_GetState+0x104>)
 80091cc:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80091d0:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80091d2:	428a      	cmp	r2, r1
 80091d4:	d915      	bls.n	8009202 <BSP_TS_GetState+0xc6>
 80091d6:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80091d8:	4919      	ldr	r1, [pc, #100]	; (8009240 <BSP_TS_GetState+0x104>)
 80091da:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80091de:	68c9      	ldr	r1, [r1, #12]
 80091e0:	42b1      	cmp	r1, r6
 80091e2:	d301      	bcc.n	80091e8 <BSP_TS_GetState+0xac>
 80091e4:	4291      	cmp	r1, r2
 80091e6:	d20e      	bcs.n	8009206 <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80091e8:	4a15      	ldr	r2, [pc, #84]	; (8009240 <BSP_TS_GetState+0x104>)
 80091ea:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 80091ee:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 80091f4:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80091f6:	e01a      	b.n	800922e <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 80091f8:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 80091fa:	4603      	mov	r3, r0
 80091fc:	e7bc      	b.n	8009178 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80091fe:	1ac6      	subs	r6, r0, r3
 8009200:	e7e3      	b.n	80091ca <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8009202:	1a8a      	subs	r2, r1, r2
 8009204:	e7e8      	b.n	80091d8 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8009206:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8009208:	4b0d      	ldr	r3, [pc, #52]	; (8009240 <BSP_TS_GetState+0x104>)
 800920a:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800920e:	69eb      	ldr	r3, [r5, #28]
 8009210:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 8009212:	2000      	movs	r0, #0
 8009214:	e00b      	b.n	800922e <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 8009216:	2000      	movs	r0, #0
 8009218:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800921a:	4b09      	ldr	r3, [pc, #36]	; (8009240 <BSP_TS_GetState+0x104>)
 800921c:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8009220:	69ab      	ldr	r3, [r5, #24]
 8009222:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8009224:	69eb      	ldr	r3, [r5, #28]
 8009226:	60a3      	str	r3, [r4, #8]
 8009228:	e001      	b.n	800922e <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800922a:	f06f 0004 	mvn.w	r0, #4
}
 800922e:	b004      	add	sp, #16
 8009230:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009232:	f06f 0001 	mvn.w	r0, #1
}
 8009236:	4770      	bx	lr
 8009238:	2400398c 	.word	0x2400398c
 800923c:	24003968 	.word	0x24003968
 8009240:	2400396c 	.word	0x2400396c

08009244 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009244:	4a18      	ldr	r2, [pc, #96]	; (80092a8 <SystemInit+0x64>)
 8009246:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800924a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800924e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009252:	4b16      	ldr	r3, [pc, #88]	; (80092ac <SystemInit+0x68>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	f042 0201 	orr.w	r2, r2, #1
 800925a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800925c:	2200      	movs	r2, #0
 800925e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	4913      	ldr	r1, [pc, #76]	; (80092b0 <SystemInit+0x6c>)
 8009264:	4001      	ands	r1, r0
 8009266:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8009268:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800926a:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800926c:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800926e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8009270:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8009272:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8009276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009278:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800927a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800927c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009284:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009286:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <SystemInit+0x70>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <SystemInit+0x74>)
 800928e:	4013      	ands	r3, r2
 8009290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009294:	d203      	bcs.n	800929e <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <SystemInit+0x78>)
 8009298:	2201      	movs	r2, #1
 800929a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800929e:	4b02      	ldr	r3, [pc, #8]	; (80092a8 <SystemInit+0x64>)
 80092a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80092a4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80092a6:	4770      	bx	lr
 80092a8:	e000ed00 	.word	0xe000ed00
 80092ac:	58024400 	.word	0x58024400
 80092b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80092b4:	5c001000 	.word	0x5c001000
 80092b8:	ffff0000 	.word	0xffff0000
 80092bc:	51008000 	.word	0x51008000

080092c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092c0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092c2:	2003      	movs	r0, #3
 80092c4:	f000 f850 	bl	8009368 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80092c8:	f002 fc92 	bl	800bbf0 <HAL_RCC_GetSysClockFreq>
 80092cc:	490f      	ldr	r1, [pc, #60]	; (800930c <HAL_Init+0x4c>)
 80092ce:	698b      	ldr	r3, [r1, #24]
 80092d0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80092d4:	4a0e      	ldr	r2, [pc, #56]	; (8009310 <HAL_Init+0x50>)
 80092d6:	5cd3      	ldrb	r3, [r2, r3]
 80092d8:	f003 031f 	and.w	r3, r3, #31
 80092dc:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80092de:	698b      	ldr	r3, [r1, #24]
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	5cd3      	ldrb	r3, [r2, r3]
 80092e6:	f003 031f 	and.w	r3, r3, #31
 80092ea:	fa20 f303 	lsr.w	r3, r0, r3
 80092ee:	4a09      	ldr	r2, [pc, #36]	; (8009314 <HAL_Init+0x54>)
 80092f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092f2:	4b09      	ldr	r3, [pc, #36]	; (8009318 <HAL_Init+0x58>)
 80092f4:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80092f6:	2001      	movs	r0, #1
 80092f8:	f7f9 ff9a 	bl	8003230 <HAL_InitTick>
 80092fc:	b110      	cbz	r0, 8009304 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80092fe:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8009300:	4620      	mov	r0, r4
 8009302:	bd10      	pop	{r4, pc}
 8009304:	4604      	mov	r4, r0
  HAL_MspInit();
 8009306:	f7f9 fd47 	bl	8002d98 <HAL_MspInit>
  return HAL_OK;
 800930a:	e7f9      	b.n	8009300 <HAL_Init+0x40>
 800930c:	58024400 	.word	0x58024400
 8009310:	08023520 	.word	0x08023520
 8009314:	24000074 	.word	0x24000074
 8009318:	24000070 	.word	0x24000070

0800931c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800931c:	4b03      	ldr	r3, [pc, #12]	; (800932c <HAL_IncTick+0x10>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	4a03      	ldr	r2, [pc, #12]	; (8009330 <HAL_IncTick+0x14>)
 8009322:	6811      	ldr	r1, [r2, #0]
 8009324:	440b      	add	r3, r1
 8009326:	6013      	str	r3, [r2, #0]
}
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	24000078 	.word	0x24000078
 8009330:	24003990 	.word	0x24003990

08009334 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009334:	4b01      	ldr	r3, [pc, #4]	; (800933c <HAL_GetTick+0x8>)
 8009336:	6818      	ldr	r0, [r3, #0]
}
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	24003990 	.word	0x24003990

08009340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009344:	f7ff fff6 	bl	8009334 <HAL_GetTick>
 8009348:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800934a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800934e:	d002      	beq.n	8009356 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8009350:	4b04      	ldr	r3, [pc, #16]	; (8009364 <HAL_Delay+0x24>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009356:	f7ff ffed 	bl	8009334 <HAL_GetTick>
 800935a:	1b40      	subs	r0, r0, r5
 800935c:	42a0      	cmp	r0, r4
 800935e:	d3fa      	bcc.n	8009356 <HAL_Delay+0x16>
  {
  }
}
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	24000078 	.word	0x24000078

08009368 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009368:	4906      	ldr	r1, [pc, #24]	; (8009384 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800936a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800936c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009370:	041b      	lsls	r3, r3, #16
 8009372:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009374:	0200      	lsls	r0, r0, #8
 8009376:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800937a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800937c:	4a02      	ldr	r2, [pc, #8]	; (8009388 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800937e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8009380:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009382:	4770      	bx	lr
 8009384:	e000ed00 	.word	0xe000ed00
 8009388:	05fa0000 	.word	0x05fa0000

0800938c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800938c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800938e:	4b17      	ldr	r3, [pc, #92]	; (80093ec <HAL_NVIC_SetPriority+0x60>)
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009396:	f1c3 0c07 	rsb	ip, r3, #7
 800939a:	f1bc 0f04 	cmp.w	ip, #4
 800939e:	bf28      	it	cs
 80093a0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093a4:	f103 0e04 	add.w	lr, r3, #4
 80093a8:	f1be 0f06 	cmp.w	lr, #6
 80093ac:	d914      	bls.n	80093d8 <HAL_NVIC_SetPriority+0x4c>
 80093ae:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093b0:	f04f 3eff 	mov.w	lr, #4294967295
 80093b4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80093b8:	ea21 010c 	bic.w	r1, r1, ip
 80093bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80093be:	fa0e f303 	lsl.w	r3, lr, r3
 80093c2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093c6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80093c8:	2800      	cmp	r0, #0
 80093ca:	db07      	blt.n	80093dc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093cc:	0109      	lsls	r1, r1, #4
 80093ce:	b2c9      	uxtb	r1, r1
 80093d0:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <HAL_NVIC_SetPriority+0x64>)
 80093d2:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80093d4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093d8:	2300      	movs	r3, #0
 80093da:	e7e9      	b.n	80093b0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093dc:	f000 000f 	and.w	r0, r0, #15
 80093e0:	0109      	lsls	r1, r1, #4
 80093e2:	b2c9      	uxtb	r1, r1
 80093e4:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <HAL_NVIC_SetPriority+0x68>)
 80093e6:	5419      	strb	r1, [r3, r0]
 80093e8:	e7f4      	b.n	80093d4 <HAL_NVIC_SetPriority+0x48>
 80093ea:	bf00      	nop
 80093ec:	e000ed00 	.word	0xe000ed00
 80093f0:	e000e400 	.word	0xe000e400
 80093f4:	e000ed14 	.word	0xe000ed14

080093f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80093f8:	2800      	cmp	r0, #0
 80093fa:	db07      	blt.n	800940c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093fc:	f000 021f 	and.w	r2, r0, #31
 8009400:	0940      	lsrs	r0, r0, #5
 8009402:	2301      	movs	r3, #1
 8009404:	4093      	lsls	r3, r2
 8009406:	4a02      	ldr	r2, [pc, #8]	; (8009410 <HAL_NVIC_EnableIRQ+0x18>)
 8009408:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	e000e100 	.word	0xe000e100

08009414 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009414:	2800      	cmp	r0, #0
 8009416:	db0c      	blt.n	8009432 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009418:	f000 021f 	and.w	r2, r0, #31
 800941c:	0940      	lsrs	r0, r0, #5
 800941e:	2301      	movs	r3, #1
 8009420:	4093      	lsls	r3, r2
 8009422:	3020      	adds	r0, #32
 8009424:	4a03      	ldr	r2, [pc, #12]	; (8009434 <HAL_NVIC_DisableIRQ+0x20>)
 8009426:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800942a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800942e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009432:	4770      	bx	lr
 8009434:	e000e100 	.word	0xe000e100

08009438 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8009438:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800943c:	4b04      	ldr	r3, [pc, #16]	; (8009450 <HAL_MPU_Disable+0x18>)
 800943e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009440:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	e000ed00 	.word	0xe000ed00

08009454 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009454:	f040 0001 	orr.w	r0, r0, #1
 8009458:	4b05      	ldr	r3, [pc, #20]	; (8009470 <HAL_MPU_Enable+0x1c>)
 800945a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800945e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009460:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009464:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009466:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800946a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800946e:	4770      	bx	lr
 8009470:	e000ed00 	.word	0xe000ed00

08009474 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009474:	7842      	ldrb	r2, [r0, #1]
 8009476:	4b16      	ldr	r3, [pc, #88]	; (80094d0 <HAL_MPU_ConfigRegion+0x5c>)
 8009478:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800947c:	7803      	ldrb	r3, [r0, #0]
 800947e:	b1fb      	cbz	r3, 80094c0 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8009480:	6843      	ldr	r3, [r0, #4]
 8009482:	4a13      	ldr	r2, [pc, #76]	; (80094d0 <HAL_MPU_ConfigRegion+0x5c>)
 8009484:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009488:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800948a:	7ac3      	ldrb	r3, [r0, #11]
 800948c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800948e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009492:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009494:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009498:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800949a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800949e:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80094a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80094a4:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80094a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80094aa:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80094ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80094b0:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80094b2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80094b6:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80094b8:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80094ba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80094be:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 80094c0:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <HAL_MPU_ConfigRegion+0x5c>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 80094c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	e000ed00 	.word	0xe000ed00

080094d4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d038      	beq.n	800954a <HAL_CRC_Init+0x76>
{
 80094d8:	b510      	push	{r4, lr}
 80094da:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80094dc:	7f43      	ldrb	r3, [r0, #29]
 80094de:	b31b      	cbz	r3, 8009528 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80094e0:	2302      	movs	r3, #2
 80094e2:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80094e4:	7923      	ldrb	r3, [r4, #4]
 80094e6:	bb1b      	cbnz	r3, 8009530 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	4a19      	ldr	r2, [pc, #100]	; (8009550 <HAL_CRC_Init+0x7c>)
 80094ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	6893      	ldr	r3, [r2, #8]
 80094f2:	f023 0318 	bic.w	r3, r3, #24
 80094f6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80094f8:	7963      	ldrb	r3, [r4, #5]
 80094fa:	bb13      	cbnz	r3, 8009542 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009502:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009504:	6822      	ldr	r2, [r4, #0]
 8009506:	6893      	ldr	r3, [r2, #8]
 8009508:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800950c:	6961      	ldr	r1, [r4, #20]
 800950e:	430b      	orrs	r3, r1
 8009510:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009512:	6822      	ldr	r2, [r4, #0]
 8009514:	6893      	ldr	r3, [r2, #8]
 8009516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800951a:	69a1      	ldr	r1, [r4, #24]
 800951c:	430b      	orrs	r3, r1
 800951e:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009520:	2301      	movs	r3, #1
 8009522:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8009524:	2000      	movs	r0, #0
}
 8009526:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8009528:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800952a:	f7f9 fc4f 	bl	8002dcc <HAL_CRC_MspInit>
 800952e:	e7d7      	b.n	80094e0 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009530:	68e2      	ldr	r2, [r4, #12]
 8009532:	68a1      	ldr	r1, [r4, #8]
 8009534:	4620      	mov	r0, r4
 8009536:	f000 f80d 	bl	8009554 <HAL_CRCEx_Polynomial_Set>
 800953a:	2800      	cmp	r0, #0
 800953c:	d0dc      	beq.n	80094f8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800953e:	2001      	movs	r0, #1
 8009540:	e7f1      	b.n	8009526 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	6922      	ldr	r2, [r4, #16]
 8009546:	611a      	str	r2, [r3, #16]
 8009548:	e7dc      	b.n	8009504 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800954a:	2001      	movs	r0, #1
}
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	04c11db7 	.word	0x04c11db7

08009554 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009554:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009556:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009558:	461c      	mov	r4, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b134      	cbz	r4, 800956c <HAL_CRCEx_Polynomial_Set+0x18>
 800955e:	f003 0c1f 	and.w	ip, r3, #31
 8009562:	fa21 fc0c 	lsr.w	ip, r1, ip
 8009566:	f01c 0f01 	tst.w	ip, #1
 800956a:	d0f5      	beq.n	8009558 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800956c:	2a18      	cmp	r2, #24
 800956e:	d822      	bhi.n	80095b6 <HAL_CRCEx_Polynomial_Set+0x62>
 8009570:	e8df f002 	tbb	[pc, r2]
 8009574:	2121210f 	.word	0x2121210f
 8009578:	21212121 	.word	0x21212121
 800957c:	2121211d 	.word	0x2121211d
 8009580:	21212121 	.word	0x21212121
 8009584:	21212119 	.word	0x21212119
 8009588:	21212121 	.word	0x21212121
 800958c:	0d          	.byte	0x0d
 800958d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800958e:	2b06      	cmp	r3, #6
 8009590:	d815      	bhi.n	80095be <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009592:	6803      	ldr	r3, [r0, #0]
 8009594:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009596:	6801      	ldr	r1, [r0, #0]
 8009598:	688b      	ldr	r3, [r1, #8]
 800959a:	f023 0318 	bic.w	r3, r3, #24
 800959e:	431a      	orrs	r2, r3
 80095a0:	608a      	str	r2, [r1, #8]
 80095a2:	2000      	movs	r0, #0
 80095a4:	e008      	b.n	80095b8 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 80095a6:	2b07      	cmp	r3, #7
 80095a8:	d9f3      	bls.n	8009592 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80095aa:	2001      	movs	r0, #1
 80095ac:	e004      	b.n	80095b8 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 80095ae:	2b0f      	cmp	r3, #15
 80095b0:	d9ef      	bls.n	8009592 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80095b2:	2001      	movs	r0, #1
 80095b4:	e000      	b.n	80095b8 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 80095b6:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 80095b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095bc:	4770      	bx	lr
        status =   HAL_ERROR;
 80095be:	2001      	movs	r0, #1
 80095c0:	e7fa      	b.n	80095b8 <HAL_CRCEx_Polynomial_Set+0x64>
	...

080095c4 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80095c4:	2800      	cmp	r0, #0
 80095c6:	f000 8129 	beq.w	800981c <HAL_DMA_Abort_IT+0x258>
{
 80095ca:	b508      	push	{r3, lr}
 80095cc:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80095ce:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d003      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095d8:	2380      	movs	r3, #128	; 0x80
 80095da:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80095dc:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80095de:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095e0:	6803      	ldr	r3, [r0, #0]
 80095e2:	4890      	ldr	r0, [pc, #576]	; (8009824 <HAL_DMA_Abort_IT+0x260>)
 80095e4:	4990      	ldr	r1, [pc, #576]	; (8009828 <HAL_DMA_Abort_IT+0x264>)
 80095e6:	428b      	cmp	r3, r1
 80095e8:	bf18      	it	ne
 80095ea:	4283      	cmpne	r3, r0
 80095ec:	bf0c      	ite	eq
 80095ee:	2101      	moveq	r1, #1
 80095f0:	2100      	movne	r1, #0
 80095f2:	d066      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 80095f4:	3030      	adds	r0, #48	; 0x30
 80095f6:	4283      	cmp	r3, r0
 80095f8:	d063      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 80095fa:	3018      	adds	r0, #24
 80095fc:	4283      	cmp	r3, r0
 80095fe:	d060      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009600:	3018      	adds	r0, #24
 8009602:	4283      	cmp	r3, r0
 8009604:	d05d      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009606:	3018      	adds	r0, #24
 8009608:	4283      	cmp	r3, r0
 800960a:	d05a      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 800960c:	3018      	adds	r0, #24
 800960e:	4283      	cmp	r3, r0
 8009610:	d057      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009612:	3018      	adds	r0, #24
 8009614:	4283      	cmp	r3, r0
 8009616:	d054      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009618:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800961c:	4283      	cmp	r3, r0
 800961e:	d050      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009620:	3018      	adds	r0, #24
 8009622:	4283      	cmp	r3, r0
 8009624:	d04d      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009626:	3018      	adds	r0, #24
 8009628:	4283      	cmp	r3, r0
 800962a:	d04a      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 800962c:	3018      	adds	r0, #24
 800962e:	4283      	cmp	r3, r0
 8009630:	d047      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009632:	3018      	adds	r0, #24
 8009634:	4283      	cmp	r3, r0
 8009636:	d044      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009638:	3018      	adds	r0, #24
 800963a:	4283      	cmp	r3, r0
 800963c:	d041      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 800963e:	3018      	adds	r0, #24
 8009640:	4283      	cmp	r3, r0
 8009642:	d03e      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
 8009644:	3018      	adds	r0, #24
 8009646:	4283      	cmp	r3, r0
 8009648:	d03b      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800964a:	6819      	ldr	r1, [r3, #0]
 800964c:	f021 010e 	bic.w	r1, r1, #14
 8009650:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8009652:	6813      	ldr	r3, [r2, #0]
 8009654:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8009658:	4973      	ldr	r1, [pc, #460]	; (8009828 <HAL_DMA_Abort_IT+0x264>)
 800965a:	428b      	cmp	r3, r1
 800965c:	bf18      	it	ne
 800965e:	4283      	cmpne	r3, r0
 8009660:	d06a      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 8009662:	4972      	ldr	r1, [pc, #456]	; (800982c <HAL_DMA_Abort_IT+0x268>)
 8009664:	428b      	cmp	r3, r1
 8009666:	d067      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 8009668:	3118      	adds	r1, #24
 800966a:	428b      	cmp	r3, r1
 800966c:	d064      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 800966e:	3118      	adds	r1, #24
 8009670:	428b      	cmp	r3, r1
 8009672:	d061      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 8009674:	3118      	adds	r1, #24
 8009676:	428b      	cmp	r3, r1
 8009678:	d05e      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 800967a:	3118      	adds	r1, #24
 800967c:	428b      	cmp	r3, r1
 800967e:	d05b      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 8009680:	3118      	adds	r1, #24
 8009682:	428b      	cmp	r3, r1
 8009684:	d058      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 8009686:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800968a:	428b      	cmp	r3, r1
 800968c:	d054      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 800968e:	3118      	adds	r1, #24
 8009690:	428b      	cmp	r3, r1
 8009692:	d051      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 8009694:	3118      	adds	r1, #24
 8009696:	428b      	cmp	r3, r1
 8009698:	d04e      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 800969a:	3118      	adds	r1, #24
 800969c:	428b      	cmp	r3, r1
 800969e:	d04b      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 80096a0:	3118      	adds	r1, #24
 80096a2:	428b      	cmp	r3, r1
 80096a4:	d048      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 80096a6:	3118      	adds	r1, #24
 80096a8:	428b      	cmp	r3, r1
 80096aa:	d045      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 80096ac:	3118      	adds	r1, #24
 80096ae:	428b      	cmp	r3, r1
 80096b0:	d042      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 80096b2:	3118      	adds	r1, #24
 80096b4:	428b      	cmp	r3, r1
 80096b6:	d03f      	beq.n	8009738 <HAL_DMA_Abort_IT+0x174>
 80096b8:	6819      	ldr	r1, [r3, #0]
 80096ba:	f021 0101 	bic.w	r1, r1, #1
 80096be:	6019      	str	r1, [r3, #0]
 80096c0:	e03e      	b.n	8009740 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 80096c2:	2004      	movs	r0, #4
 80096c4:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80096c8:	bb81      	cbnz	r1, 800972c <HAL_DMA_Abort_IT+0x168>
 80096ca:	4a58      	ldr	r2, [pc, #352]	; (800982c <HAL_DMA_Abort_IT+0x268>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d02d      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 80096d0:	3218      	adds	r2, #24
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d02a      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 80096d6:	3218      	adds	r2, #24
 80096d8:	4293      	cmp	r3, r2
 80096da:	d027      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 80096dc:	3218      	adds	r2, #24
 80096de:	4293      	cmp	r3, r2
 80096e0:	d024      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 80096e2:	3218      	adds	r2, #24
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d021      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 80096e8:	3218      	adds	r2, #24
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d01e      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 80096ee:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01a      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 80096f6:	3218      	adds	r2, #24
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d017      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 80096fc:	3218      	adds	r2, #24
 80096fe:	4293      	cmp	r3, r2
 8009700:	d014      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 8009702:	3218      	adds	r2, #24
 8009704:	4293      	cmp	r3, r2
 8009706:	d011      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 8009708:	3218      	adds	r2, #24
 800970a:	4293      	cmp	r3, r2
 800970c:	d00e      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 800970e:	3218      	adds	r2, #24
 8009710:	4293      	cmp	r3, r2
 8009712:	d00b      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 8009714:	3218      	adds	r2, #24
 8009716:	4293      	cmp	r3, r2
 8009718:	d008      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 800971a:	3218      	adds	r2, #24
 800971c:	4293      	cmp	r3, r2
 800971e:	d005      	beq.n	800972c <HAL_DMA_Abort_IT+0x168>
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	f022 0201 	bic.w	r2, r2, #1
 8009726:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009728:	2000      	movs	r0, #0
 800972a:	e758      	b.n	80095de <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	f022 0201 	bic.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009734:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8009736:	e752      	b.n	80095de <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8009738:	6819      	ldr	r1, [r3, #0]
 800973a:	f021 0101 	bic.w	r1, r1, #1
 800973e:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009740:	6813      	ldr	r3, [r2, #0]
 8009742:	4838      	ldr	r0, [pc, #224]	; (8009824 <HAL_DMA_Abort_IT+0x260>)
 8009744:	4938      	ldr	r1, [pc, #224]	; (8009828 <HAL_DMA_Abort_IT+0x264>)
 8009746:	428b      	cmp	r3, r1
 8009748:	bf18      	it	ne
 800974a:	4283      	cmpne	r3, r0
 800974c:	d042      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 800974e:	3118      	adds	r1, #24
 8009750:	428b      	cmp	r3, r1
 8009752:	d03f      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 8009754:	3118      	adds	r1, #24
 8009756:	428b      	cmp	r3, r1
 8009758:	d03c      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 800975a:	3118      	adds	r1, #24
 800975c:	428b      	cmp	r3, r1
 800975e:	d039      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 8009760:	3118      	adds	r1, #24
 8009762:	428b      	cmp	r3, r1
 8009764:	d036      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 8009766:	3118      	adds	r1, #24
 8009768:	428b      	cmp	r3, r1
 800976a:	d033      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 800976c:	3118      	adds	r1, #24
 800976e:	428b      	cmp	r3, r1
 8009770:	d030      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 8009772:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8009776:	428b      	cmp	r3, r1
 8009778:	d02c      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 800977a:	3118      	adds	r1, #24
 800977c:	428b      	cmp	r3, r1
 800977e:	d029      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 8009780:	3118      	adds	r1, #24
 8009782:	428b      	cmp	r3, r1
 8009784:	d026      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 8009786:	3118      	adds	r1, #24
 8009788:	428b      	cmp	r3, r1
 800978a:	d023      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 800978c:	3118      	adds	r1, #24
 800978e:	428b      	cmp	r3, r1
 8009790:	d020      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 8009792:	3118      	adds	r1, #24
 8009794:	428b      	cmp	r3, r1
 8009796:	d01d      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 8009798:	3118      	adds	r1, #24
 800979a:	428b      	cmp	r3, r1
 800979c:	d01a      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 800979e:	3118      	adds	r1, #24
 80097a0:	428b      	cmp	r3, r1
 80097a2:	d017      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 80097a4:	4922      	ldr	r1, [pc, #136]	; (8009830 <HAL_DMA_Abort_IT+0x26c>)
 80097a6:	428b      	cmp	r3, r1
 80097a8:	d014      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 80097aa:	3114      	adds	r1, #20
 80097ac:	428b      	cmp	r3, r1
 80097ae:	d011      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 80097b0:	3114      	adds	r1, #20
 80097b2:	428b      	cmp	r3, r1
 80097b4:	d00e      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 80097b6:	3114      	adds	r1, #20
 80097b8:	428b      	cmp	r3, r1
 80097ba:	d00b      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 80097bc:	3114      	adds	r1, #20
 80097be:	428b      	cmp	r3, r1
 80097c0:	d008      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 80097c2:	3114      	adds	r1, #20
 80097c4:	428b      	cmp	r3, r1
 80097c6:	d005      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 80097c8:	3114      	adds	r1, #20
 80097ca:	428b      	cmp	r3, r1
 80097cc:	d002      	beq.n	80097d4 <HAL_DMA_Abort_IT+0x210>
 80097ce:	3114      	adds	r1, #20
 80097d0:	428b      	cmp	r3, r1
 80097d2:	d117      	bne.n	8009804 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80097d4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80097d6:	680b      	ldr	r3, [r1, #0]
 80097d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097dc:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80097de:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80097e0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80097e2:	f003 011f 	and.w	r1, r3, #31
 80097e6:	2301      	movs	r3, #1
 80097e8:	408b      	lsls	r3, r1
 80097ea:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097ec:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80097ee:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80097f0:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80097f2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80097f4:	b133      	cbz	r3, 8009804 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80097f6:	6819      	ldr	r1, [r3, #0]
 80097f8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80097fc:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009800:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8009802:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8009804:	2301      	movs	r3, #1
 8009806:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800980a:	2300      	movs	r3, #0
 800980c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8009810:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009812:	b12b      	cbz	r3, 8009820 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 8009814:	4610      	mov	r0, r2
 8009816:	4798      	blx	r3
  return HAL_OK;
 8009818:	2000      	movs	r0, #0
 800981a:	e6e0      	b.n	80095de <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 800981c:	2001      	movs	r0, #1
}
 800981e:	4770      	bx	lr
  return HAL_OK;
 8009820:	2000      	movs	r0, #0
 8009822:	e6dc      	b.n	80095de <HAL_DMA_Abort_IT+0x1a>
 8009824:	40020010 	.word	0x40020010
 8009828:	40020028 	.word	0x40020028
 800982c:	40020040 	.word	0x40020040
 8009830:	58025408 	.word	0x58025408

08009834 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009834:	2800      	cmp	r0, #0
 8009836:	d037      	beq.n	80098a8 <HAL_DMA2D_Init+0x74>
{
 8009838:	b510      	push	{r4, lr}
 800983a:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800983c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8009840:	2b00      	cmp	r3, #0
 8009842:	d02c      	beq.n	800989e <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009844:	2302      	movs	r3, #2
 8009846:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800984a:	6821      	ldr	r1, [r4, #0]
 800984c:	680a      	ldr	r2, [r1, #0]
 800984e:	4b17      	ldr	r3, [pc, #92]	; (80098ac <HAL_DMA2D_Init+0x78>)
 8009850:	4013      	ands	r3, r2
 8009852:	6862      	ldr	r2, [r4, #4]
 8009854:	69e0      	ldr	r0, [r4, #28]
 8009856:	4302      	orrs	r2, r0
 8009858:	4313      	orrs	r3, r2
 800985a:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800985c:	6821      	ldr	r1, [r4, #0]
 800985e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8009860:	4b13      	ldr	r3, [pc, #76]	; (80098b0 <HAL_DMA2D_Init+0x7c>)
 8009862:	4013      	ands	r3, r2
 8009864:	68a2      	ldr	r2, [r4, #8]
 8009866:	69a0      	ldr	r0, [r4, #24]
 8009868:	4302      	orrs	r2, r0
 800986a:	4313      	orrs	r3, r2
 800986c:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800986e:	6822      	ldr	r2, [r4, #0]
 8009870:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009872:	4b10      	ldr	r3, [pc, #64]	; (80098b4 <HAL_DMA2D_Init+0x80>)
 8009874:	400b      	ands	r3, r1
 8009876:	68e1      	ldr	r1, [r4, #12]
 8009878:	430b      	orrs	r3, r1
 800987a:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800987c:	6821      	ldr	r1, [r4, #0]
 800987e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009880:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009884:	6920      	ldr	r0, [r4, #16]
 8009886:	6962      	ldr	r2, [r4, #20]
 8009888:	0552      	lsls	r2, r2, #21
 800988a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800988e:	4313      	orrs	r3, r2
 8009890:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009892:	2000      	movs	r0, #0
 8009894:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009896:	2301      	movs	r3, #1
 8009898:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800989c:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800989e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 80098a2:	f7f9 faad 	bl	8002e00 <HAL_DMA2D_MspInit>
 80098a6:	e7cd      	b.n	8009844 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 80098a8:	2001      	movs	r0, #1
}
 80098aa:	4770      	bx	lr
 80098ac:	fff8ffbf 	.word	0xfff8ffbf
 80098b0:	fffffef8 	.word	0xfffffef8
 80098b4:	ffff0000 	.word	0xffff0000

080098b8 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80098b8:	4770      	bx	lr

080098ba <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80098ba:	4770      	bx	lr

080098bc <HAL_DMA2D_IRQHandler>:
{
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80098c0:	6803      	ldr	r3, [r0, #0]
 80098c2:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80098c4:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80098c6:	f015 0f01 	tst.w	r5, #1
 80098ca:	d016      	beq.n	80098fa <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80098cc:	f416 7f80 	tst.w	r6, #256	; 0x100
 80098d0:	d013      	beq.n	80098fa <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098d8:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80098da:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80098dc:	f043 0301 	orr.w	r3, r3, #1
 80098e0:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80098e2:	6803      	ldr	r3, [r0, #0]
 80098e4:	2201      	movs	r2, #1
 80098e6:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80098e8:	2304      	movs	r3, #4
 80098ea:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80098ee:	2300      	movs	r3, #0
 80098f0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80098f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80098f6:	b103      	cbz	r3, 80098fa <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 80098f8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80098fa:	f015 0f20 	tst.w	r5, #32
 80098fe:	d018      	beq.n	8009932 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8009900:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009904:	d015      	beq.n	8009932 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	6813      	ldr	r3, [r2, #0]
 800990a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800990e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	2220      	movs	r2, #32
 8009914:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009918:	f043 0302 	orr.w	r3, r3, #2
 800991c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800991e:	2304      	movs	r3, #4
 8009920:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8009924:	2300      	movs	r3, #0
 8009926:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800992a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800992c:	b10b      	cbz	r3, 8009932 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800992e:	4620      	mov	r0, r4
 8009930:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8009932:	f015 0f08 	tst.w	r5, #8
 8009936:	d018      	beq.n	800996a <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8009938:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800993c:	d015      	beq.n	800996a <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800993e:	6822      	ldr	r2, [r4, #0]
 8009940:	6813      	ldr	r3, [r2, #0]
 8009942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009946:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	2208      	movs	r2, #8
 800994c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800994e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009950:	f043 0304 	orr.w	r3, r3, #4
 8009954:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009956:	2304      	movs	r3, #4
 8009958:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800995c:	2300      	movs	r3, #0
 800995e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8009962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009964:	b10b      	cbz	r3, 800996a <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8009966:	4620      	mov	r0, r4
 8009968:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800996a:	f015 0f04 	tst.w	r5, #4
 800996e:	d002      	beq.n	8009976 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8009970:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8009974:	d120      	bne.n	80099b8 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8009976:	f015 0f02 	tst.w	r5, #2
 800997a:	d016      	beq.n	80099aa <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800997c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8009980:	d013      	beq.n	80099aa <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	6813      	ldr	r3, [r2, #0]
 8009986:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800998a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	2202      	movs	r2, #2
 8009990:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009994:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009996:	2301      	movs	r3, #1
 8009998:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800999c:	2300      	movs	r3, #0
 800999e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80099a2:	6a23      	ldr	r3, [r4, #32]
 80099a4:	b10b      	cbz	r3, 80099aa <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 80099a6:	4620      	mov	r0, r4
 80099a8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80099aa:	f015 0f10 	tst.w	r5, #16
 80099ae:	d002      	beq.n	80099b6 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80099b0:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80099b4:	d10c      	bne.n	80099d0 <HAL_DMA2D_IRQHandler+0x114>
}
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80099b8:	6822      	ldr	r2, [r4, #0]
 80099ba:	6813      	ldr	r3, [r2, #0]
 80099bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099c0:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	2204      	movs	r2, #4
 80099c6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80099c8:	4620      	mov	r0, r4
 80099ca:	f7ff ff75 	bl	80098b8 <HAL_DMA2D_LineEventCallback>
 80099ce:	e7d2      	b.n	8009976 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80099d0:	6822      	ldr	r2, [r4, #0]
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d8:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	2210      	movs	r2, #16
 80099de:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80099e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099e2:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80099ea:	2300      	movs	r3, #0
 80099ec:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80099f0:	4620      	mov	r0, r4
 80099f2:	f7ff ff62 	bl	80098ba <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80099f6:	e7de      	b.n	80099b6 <HAL_DMA2D_IRQHandler+0xfa>

080099f8 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80099f8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d074      	beq.n	8009aea <HAL_DMA2D_ConfigLayer+0xf2>
{
 8009a00:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8009a02:	2301      	movs	r3, #1
 8009a04:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8009a0e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8009a12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009a16:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8009a18:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009a1a:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8009a1e:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8009a20:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8009a24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8009a26:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009a2a:	f1a4 0209 	sub.w	r2, r4, #9
 8009a2e:	2a01      	cmp	r2, #1
 8009a30:	d921      	bls.n	8009a76 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009a32:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8009a36:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009a3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8009a40:	bb61      	cbnz	r1, 8009a9c <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009a42:	6804      	ldr	r4, [r0, #0]
 8009a44:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009a46:	4a2a      	ldr	r2, [pc, #168]	; (8009af0 <HAL_DMA2D_ConfigLayer+0xf8>)
 8009a48:	402a      	ands	r2, r5
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8009a4e:	6802      	ldr	r2, [r0, #0]
 8009a50:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8009a54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009a58:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009a5a:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	3b09      	subs	r3, #9
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d911      	bls.n	8009a88 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 8009a70:	4618      	mov	r0, r3
}
 8009a72:	bc30      	pop	{r4, r5}
 8009a74:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009a76:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8009a7a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009a7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a80:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009a84:	4313      	orrs	r3, r2
 8009a86:	e7db      	b.n	8009a40 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8009a88:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009a8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009a92:	6802      	ldr	r2, [r0, #0]
 8009a94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a98:	6293      	str	r3, [r2, #40]	; 0x28
 8009a9a:	e7e3      	b.n	8009a64 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8009a9c:	2c0b      	cmp	r4, #11
 8009a9e:	d01b      	beq.n	8009ad8 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8009aa0:	4d14      	ldr	r5, [pc, #80]	; (8009af4 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009aa2:	6804      	ldr	r4, [r0, #0]
 8009aa4:	69e2      	ldr	r2, [r4, #28]
 8009aa6:	ea22 0205 	bic.w	r2, r2, r5
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8009aae:	6802      	ldr	r2, [r0, #0]
 8009ab0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8009ab4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009ab8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009aba:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	3b09      	subs	r3, #9
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d8cf      	bhi.n	8009a64 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8009ac4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009ac8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009acc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009ace:	6802      	ldr	r2, [r0, #0]
 8009ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ad4:	6213      	str	r3, [r2, #32]
 8009ad6:	e7c5      	b.n	8009a64 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8009ad8:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8009adc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009ae2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 8009ae6:	4d04      	ldr	r5, [pc, #16]	; (8009af8 <HAL_DMA2D_ConfigLayer+0x100>)
 8009ae8:	e7db      	b.n	8009aa2 <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 8009aea:	2002      	movs	r0, #2
}
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	00ccfff0 	.word	0x00ccfff0
 8009af4:	ff33000f 	.word	0xff33000f
 8009af8:	ff3f000f 	.word	0xff3f000f

08009afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009afe:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8009b00:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009b02:	e06b      	b.n	8009bdc <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b04:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b06:	005e      	lsls	r6, r3, #1
 8009b08:	2403      	movs	r4, #3
 8009b0a:	40b4      	lsls	r4, r6
 8009b0c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b10:	68cc      	ldr	r4, [r1, #12]
 8009b12:	40b4      	lsls	r4, r6
 8009b14:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8009b16:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b18:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b1a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b1e:	684c      	ldr	r4, [r1, #4]
 8009b20:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8009b24:	409c      	lsls	r4, r3
 8009b26:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8009b2a:	6044      	str	r4, [r0, #4]
 8009b2c:	e068      	b.n	8009c00 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b2e:	08dd      	lsrs	r5, r3, #3
 8009b30:	3508      	adds	r5, #8
 8009b32:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009b36:	f003 0407 	and.w	r4, r3, #7
 8009b3a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b3e:	240f      	movs	r4, #15
 8009b40:	fa04 f40c 	lsl.w	r4, r4, ip
 8009b44:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009b48:	690c      	ldr	r4, [r1, #16]
 8009b4a:	fa04 f40c 	lsl.w	r4, r4, ip
 8009b4e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8009b52:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8009b56:	e06b      	b.n	8009c30 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009b58:	2409      	movs	r4, #9
 8009b5a:	e000      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009b5c:	2400      	movs	r4, #0
 8009b5e:	fa04 f40e 	lsl.w	r4, r4, lr
 8009b62:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b64:	f10c 0c02 	add.w	ip, ip, #2
 8009b68:	4d69      	ldr	r5, [pc, #420]	; (8009d10 <HAL_GPIO_Init+0x214>)
 8009b6a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b6e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8009b72:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8009b74:	43d4      	mvns	r4, r2
 8009b76:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009b7a:	684f      	ldr	r7, [r1, #4]
 8009b7c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8009b80:	d001      	beq.n	8009b86 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8009b82:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8009b86:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8009b8a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8009b8c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8009b8e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009b92:	684f      	ldr	r7, [r1, #4]
 8009b94:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8009b98:	d001      	beq.n	8009b9e <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8009b9a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8009b9e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8009ba2:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009ba4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8009ba8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009bac:	684f      	ldr	r7, [r1, #4]
 8009bae:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8009bb2:	d001      	beq.n	8009bb8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8009bb4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009bb8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8009bbc:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009bc0:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8009bc4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009bc6:	684e      	ldr	r6, [r1, #4]
 8009bc8:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8009bcc:	d001      	beq.n	8009bd2 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8009bce:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009bd6:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8009bda:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009bdc:	680a      	ldr	r2, [r1, #0]
 8009bde:	fa32 f403 	lsrs.w	r4, r2, r3
 8009be2:	f000 8092 	beq.w	8009d0a <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009be6:	f04f 0c01 	mov.w	ip, #1
 8009bea:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8009bee:	ea1c 0202 	ands.w	r2, ip, r2
 8009bf2:	d0f2      	beq.n	8009bda <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009bf4:	684c      	ldr	r4, [r1, #4]
 8009bf6:	f004 0403 	and.w	r4, r4, #3
 8009bfa:	3c01      	subs	r4, #1
 8009bfc:	2c01      	cmp	r4, #1
 8009bfe:	d981      	bls.n	8009b04 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009c00:	684c      	ldr	r4, [r1, #4]
 8009c02:	f004 0403 	and.w	r4, r4, #3
 8009c06:	2c03      	cmp	r4, #3
 8009c08:	d00c      	beq.n	8009c24 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8009c0a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009c0c:	005d      	lsls	r5, r3, #1
 8009c0e:	f04f 0c03 	mov.w	ip, #3
 8009c12:	fa0c fc05 	lsl.w	ip, ip, r5
 8009c16:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c1a:	688c      	ldr	r4, [r1, #8]
 8009c1c:	40ac      	lsls	r4, r5
 8009c1e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8009c22:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c24:	684c      	ldr	r4, [r1, #4]
 8009c26:	f004 0403 	and.w	r4, r4, #3
 8009c2a:	2c02      	cmp	r4, #2
 8009c2c:	f43f af7f 	beq.w	8009b2e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8009c30:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c32:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8009c36:	f04f 0c03 	mov.w	ip, #3
 8009c3a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009c3e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c42:	684c      	ldr	r4, [r1, #4]
 8009c44:	f004 0403 	and.w	r4, r4, #3
 8009c48:	fa04 f40e 	lsl.w	r4, r4, lr
 8009c4c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8009c50:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c52:	684c      	ldr	r4, [r1, #4]
 8009c54:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8009c58:	d0bf      	beq.n	8009bda <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c5a:	4c2e      	ldr	r4, [pc, #184]	; (8009d14 <HAL_GPIO_Init+0x218>)
 8009c5c:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 8009c60:	f045 0502 	orr.w	r5, r5, #2
 8009c64:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 8009c68:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 8009c6c:	f004 0402 	and.w	r4, r4, #2
 8009c70:	9401      	str	r4, [sp, #4]
 8009c72:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009c74:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8009c78:	f10c 0502 	add.w	r5, ip, #2
 8009c7c:	4c24      	ldr	r4, [pc, #144]	; (8009d10 <HAL_GPIO_Init+0x214>)
 8009c7e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c82:	f003 0403 	and.w	r4, r3, #3
 8009c86:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8009c8a:	240f      	movs	r4, #15
 8009c8c:	fa04 f40e 	lsl.w	r4, r4, lr
 8009c90:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c94:	4c20      	ldr	r4, [pc, #128]	; (8009d18 <HAL_GPIO_Init+0x21c>)
 8009c96:	42a0      	cmp	r0, r4
 8009c98:	f43f af60 	beq.w	8009b5c <HAL_GPIO_Init+0x60>
 8009c9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009ca0:	42a0      	cmp	r0, r4
 8009ca2:	d022      	beq.n	8009cea <HAL_GPIO_Init+0x1ee>
 8009ca4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d020      	beq.n	8009cee <HAL_GPIO_Init+0x1f2>
 8009cac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009cb0:	42a0      	cmp	r0, r4
 8009cb2:	d01e      	beq.n	8009cf2 <HAL_GPIO_Init+0x1f6>
 8009cb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009cb8:	42a0      	cmp	r0, r4
 8009cba:	d01c      	beq.n	8009cf6 <HAL_GPIO_Init+0x1fa>
 8009cbc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009cc0:	42a0      	cmp	r0, r4
 8009cc2:	d01a      	beq.n	8009cfa <HAL_GPIO_Init+0x1fe>
 8009cc4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009cc8:	42a0      	cmp	r0, r4
 8009cca:	d018      	beq.n	8009cfe <HAL_GPIO_Init+0x202>
 8009ccc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009cd0:	42a0      	cmp	r0, r4
 8009cd2:	d016      	beq.n	8009d02 <HAL_GPIO_Init+0x206>
 8009cd4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009cd8:	42a0      	cmp	r0, r4
 8009cda:	d014      	beq.n	8009d06 <HAL_GPIO_Init+0x20a>
 8009cdc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	f43f af39 	beq.w	8009b58 <HAL_GPIO_Init+0x5c>
 8009ce6:	240a      	movs	r4, #10
 8009ce8:	e739      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009cea:	2401      	movs	r4, #1
 8009cec:	e737      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009cee:	2402      	movs	r4, #2
 8009cf0:	e735      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009cf2:	2403      	movs	r4, #3
 8009cf4:	e733      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009cf6:	2404      	movs	r4, #4
 8009cf8:	e731      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009cfa:	2405      	movs	r4, #5
 8009cfc:	e72f      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009cfe:	2406      	movs	r4, #6
 8009d00:	e72d      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009d02:	2407      	movs	r4, #7
 8009d04:	e72b      	b.n	8009b5e <HAL_GPIO_Init+0x62>
 8009d06:	2408      	movs	r4, #8
 8009d08:	e729      	b.n	8009b5e <HAL_GPIO_Init+0x62>
  }
}
 8009d0a:	b003      	add	sp, #12
 8009d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	58000400 	.word	0x58000400
 8009d14:	58024400 	.word	0x58024400
 8009d18:	58020000 	.word	0x58020000

08009d1c <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8009d1c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009d1e:	fa31 f203 	lsrs.w	r2, r1, r3
 8009d22:	f000 809d 	beq.w	8009e60 <HAL_GPIO_DeInit+0x144>
{
 8009d26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d28:	e02e      	b.n	8009d88 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009d2a:	2509      	movs	r5, #9
 8009d2c:	e000      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009d2e:	2500      	movs	r5, #0
 8009d30:	fa05 fc0c 	lsl.w	ip, r5, ip
 8009d34:	45a4      	cmp	ip, r4
 8009d36:	d072      	beq.n	8009e1e <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009d38:	6804      	ldr	r4, [r0, #0]
 8009d3a:	005d      	lsls	r5, r3, #1
 8009d3c:	f04f 0c03 	mov.w	ip, #3
 8009d40:	fa0c fc05 	lsl.w	ip, ip, r5
 8009d44:	ea44 040c 	orr.w	r4, r4, ip
 8009d48:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009d4a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8009d4e:	f10e 0e08 	add.w	lr, lr, #8
 8009d52:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8009d56:	f003 0507 	and.w	r5, r3, #7
 8009d5a:	00ae      	lsls	r6, r5, #2
 8009d5c:	250f      	movs	r5, #15
 8009d5e:	40b5      	lsls	r5, r6
 8009d60:	ea24 0405 	bic.w	r4, r4, r5
 8009d64:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d68:	68c4      	ldr	r4, [r0, #12]
 8009d6a:	ea24 040c 	bic.w	r4, r4, ip
 8009d6e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d70:	6844      	ldr	r4, [r0, #4]
 8009d72:	ea24 0202 	bic.w	r2, r4, r2
 8009d76:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009d78:	6882      	ldr	r2, [r0, #8]
 8009d7a:	ea22 020c 	bic.w	r2, r2, ip
 8009d7e:	6082      	str	r2, [r0, #8]
    }

    position++;
 8009d80:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8009d82:	fa31 f203 	lsrs.w	r2, r1, r3
 8009d86:	d06a      	beq.n	8009e5e <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009d88:	2201      	movs	r2, #1
 8009d8a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8009d8c:	ea12 0e01 	ands.w	lr, r2, r1
 8009d90:	d0f6      	beq.n	8009d80 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009d92:	089e      	lsrs	r6, r3, #2
 8009d94:	1cb5      	adds	r5, r6, #2
 8009d96:	4c33      	ldr	r4, [pc, #204]	; (8009e64 <HAL_GPIO_DeInit+0x148>)
 8009d98:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009d9c:	f003 0c03 	and.w	ip, r3, #3
 8009da0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8009da4:	250f      	movs	r5, #15
 8009da6:	fa05 f70c 	lsl.w	r7, r5, ip
 8009daa:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009dac:	4d2e      	ldr	r5, [pc, #184]	; (8009e68 <HAL_GPIO_DeInit+0x14c>)
 8009dae:	42a8      	cmp	r0, r5
 8009db0:	d0bd      	beq.n	8009d2e <HAL_GPIO_DeInit+0x12>
 8009db2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009db6:	42a8      	cmp	r0, r5
 8009db8:	d021      	beq.n	8009dfe <HAL_GPIO_DeInit+0xe2>
 8009dba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009dbe:	42a8      	cmp	r0, r5
 8009dc0:	d01f      	beq.n	8009e02 <HAL_GPIO_DeInit+0xe6>
 8009dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009dc6:	42a8      	cmp	r0, r5
 8009dc8:	d01d      	beq.n	8009e06 <HAL_GPIO_DeInit+0xea>
 8009dca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009dce:	42a8      	cmp	r0, r5
 8009dd0:	d01b      	beq.n	8009e0a <HAL_GPIO_DeInit+0xee>
 8009dd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009dd6:	42a8      	cmp	r0, r5
 8009dd8:	d019      	beq.n	8009e0e <HAL_GPIO_DeInit+0xf2>
 8009dda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009dde:	42a8      	cmp	r0, r5
 8009de0:	d017      	beq.n	8009e12 <HAL_GPIO_DeInit+0xf6>
 8009de2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009de6:	42a8      	cmp	r0, r5
 8009de8:	d015      	beq.n	8009e16 <HAL_GPIO_DeInit+0xfa>
 8009dea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009dee:	42a8      	cmp	r0, r5
 8009df0:	d013      	beq.n	8009e1a <HAL_GPIO_DeInit+0xfe>
 8009df2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009df6:	42a8      	cmp	r0, r5
 8009df8:	d097      	beq.n	8009d2a <HAL_GPIO_DeInit+0xe>
 8009dfa:	250a      	movs	r5, #10
 8009dfc:	e798      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009dfe:	2501      	movs	r5, #1
 8009e00:	e796      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009e02:	2502      	movs	r5, #2
 8009e04:	e794      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009e06:	2503      	movs	r5, #3
 8009e08:	e792      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009e0a:	2504      	movs	r5, #4
 8009e0c:	e790      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009e0e:	2505      	movs	r5, #5
 8009e10:	e78e      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009e12:	2506      	movs	r5, #6
 8009e14:	e78c      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009e16:	2507      	movs	r5, #7
 8009e18:	e78a      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
 8009e1a:	2508      	movs	r5, #8
 8009e1c:	e788      	b.n	8009d30 <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009e1e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8009e22:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8009e26:	ea25 050e 	bic.w	r5, r5, lr
 8009e2a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009e2e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8009e32:	ea25 050e 	bic.w	r5, r5, lr
 8009e36:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8009e3a:	6865      	ldr	r5, [r4, #4]
 8009e3c:	ea25 050e 	bic.w	r5, r5, lr
 8009e40:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009e42:	6825      	ldr	r5, [r4, #0]
 8009e44:	ea25 050e 	bic.w	r5, r5, lr
 8009e48:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009e4a:	f8df c018 	ldr.w	ip, [pc, #24]	; 8009e64 <HAL_GPIO_DeInit+0x148>
 8009e4e:	1cb4      	adds	r4, r6, #2
 8009e50:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8009e54:	ea25 0507 	bic.w	r5, r5, r7
 8009e58:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8009e5c:	e76c      	b.n	8009d38 <HAL_GPIO_DeInit+0x1c>
  }
}
 8009e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	58000400 	.word	0x58000400
 8009e68:	58020000 	.word	0x58020000

08009e6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009e6c:	6903      	ldr	r3, [r0, #16]
 8009e6e:	4219      	tst	r1, r3
 8009e70:	d001      	beq.n	8009e76 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8009e72:	2001      	movs	r0, #1
 8009e74:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e76:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8009e78:	4770      	bx	lr

08009e7a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e7a:	b10a      	cbz	r2, 8009e80 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e7c:	6181      	str	r1, [r0, #24]
 8009e7e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e80:	0409      	lsls	r1, r1, #16
 8009e82:	6181      	str	r1, [r0, #24]
  }
}
 8009e84:	4770      	bx	lr

08009e86 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e86:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e88:	ea01 0203 	and.w	r2, r1, r3
 8009e8c:	ea21 0103 	bic.w	r1, r1, r3
 8009e90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e94:	6181      	str	r1, [r0, #24]
}
 8009e96:	4770      	bx	lr

08009e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e98:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea2:	4203      	tst	r3, r0
 8009ea4:	d100      	bne.n	8009ea8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8009ea6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eac:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009eb0:	f7f8 ff68 	bl	8002d84 <HAL_GPIO_EXTI_Callback>
}
 8009eb4:	e7f7      	b.n	8009ea6 <HAL_GPIO_EXTI_IRQHandler+0xe>

08009eb6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009eb6:	6803      	ldr	r3, [r0, #0]
 8009eb8:	699a      	ldr	r2, [r3, #24]
 8009eba:	f012 0f02 	tst.w	r2, #2
 8009ebe:	d001      	beq.n	8009ec4 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ec4:	6803      	ldr	r3, [r0, #0]
 8009ec6:	699a      	ldr	r2, [r3, #24]
 8009ec8:	f012 0f01 	tst.w	r2, #1
 8009ecc:	d103      	bne.n	8009ed6 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ece:	699a      	ldr	r2, [r3, #24]
 8009ed0:	f042 0201 	orr.w	r2, r2, #1
 8009ed4:	619a      	str	r2, [r3, #24]
  }
}
 8009ed6:	4770      	bx	lr

08009ed8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ed8:	b410      	push	{r4}
 8009eda:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009edc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ee4:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ee6:	4321      	orrs	r1, r4
 8009ee8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009eec:	6802      	ldr	r2, [r0, #0]
 8009eee:	6853      	ldr	r3, [r2, #4]
 8009ef0:	0d64      	lsrs	r4, r4, #21
 8009ef2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8009ef6:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8009efa:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8009efe:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8009f02:	f044 0403 	orr.w	r4, r4, #3
 8009f06:	ea23 0404 	bic.w	r4, r3, r4
 8009f0a:	4321      	orrs	r1, r4
 8009f0c:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <I2C_IsErrorOccurred>:
{
 8009f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f18:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8009f1a:	6803      	ldr	r3, [r0, #0]
 8009f1c:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009f1e:	f017 0710 	ands.w	r7, r7, #16
 8009f22:	d04e      	beq.n	8009fc2 <I2C_IsErrorOccurred+0xae>
 8009f24:	460e      	mov	r6, r1
 8009f26:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f28:	2210      	movs	r2, #16
 8009f2a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009f2c:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	6998      	ldr	r0, [r3, #24]
 8009f32:	f010 0f20 	tst.w	r0, #32
 8009f36:	d13d      	bne.n	8009fb4 <I2C_IsErrorOccurred+0xa0>
 8009f38:	2d00      	cmp	r5, #0
 8009f3a:	d13b      	bne.n	8009fb4 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8009f3c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009f40:	d0f5      	beq.n	8009f2e <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f42:	f7ff f9f7 	bl	8009334 <HAL_GetTick>
 8009f46:	eba0 0008 	sub.w	r0, r0, r8
 8009f4a:	42b0      	cmp	r0, r6
 8009f4c:	d801      	bhi.n	8009f52 <I2C_IsErrorOccurred+0x3e>
 8009f4e:	2e00      	cmp	r6, #0
 8009f50:	d1ed      	bne.n	8009f2e <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009f52:	6821      	ldr	r1, [r4, #0]
 8009f54:	684a      	ldr	r2, [r1, #4]
 8009f56:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8009f5a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009f5e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009f60:	6988      	ldr	r0, [r1, #24]
 8009f62:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8009f66:	d004      	beq.n	8009f72 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8009f68:	3b20      	subs	r3, #32
 8009f6a:	bf18      	it	ne
 8009f6c:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8009f6e:	b902      	cbnz	r2, 8009f72 <I2C_IsErrorOccurred+0x5e>
 8009f70:	b9c3      	cbnz	r3, 8009fa4 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	f013 0f20 	tst.w	r3, #32
 8009f7a:	d1d8      	bne.n	8009f2e <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009f7c:	f7ff f9da 	bl	8009334 <HAL_GetTick>
 8009f80:	eba0 0008 	sub.w	r0, r0, r8
 8009f84:	2819      	cmp	r0, #25
 8009f86:	d9f4      	bls.n	8009f72 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009f8a:	f043 0320 	orr.w	r3, r3, #32
 8009f8e:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009f90:	2320      	movs	r3, #32
 8009f92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f96:	2300      	movs	r3, #0
 8009f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8009f9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8009fa0:	2501      	movs	r5, #1
 8009fa2:	e7e6      	b.n	8009f72 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009fa4:	684b      	ldr	r3, [r1, #4]
 8009fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009faa:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8009fac:	f7ff f9c2 	bl	8009334 <HAL_GetTick>
 8009fb0:	4680      	mov	r8, r0
 8009fb2:	e7de      	b.n	8009f72 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8009fb4:	2d00      	cmp	r5, #0
 8009fb6:	d140      	bne.n	800a03a <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fb8:	2220      	movs	r2, #32
 8009fba:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8009fbc:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8009fbe:	2501      	movs	r5, #1
 8009fc0:	e000      	b.n	8009fc4 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8009fc2:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009fc8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009fcc:	d005      	beq.n	8009fda <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8009fce:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009fd6:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8009fd8:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009fda:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009fde:	d006      	beq.n	8009fee <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8009fe0:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fea:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8009fec:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009fee:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009ff2:	d024      	beq.n	800a03e <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ff4:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ffe:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800a000:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800a002:	4620      	mov	r0, r4
 800a004:	f7ff ff57 	bl	8009eb6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800a008:	6822      	ldr	r2, [r4, #0]
 800a00a:	6853      	ldr	r3, [r2, #4]
 800a00c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800a010:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800a014:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800a018:	f023 0301 	bic.w	r3, r3, #1
 800a01c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800a01e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a020:	431f      	orrs	r7, r3
 800a022:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a024:	2320      	movs	r3, #32
 800a026:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a02a:	2300      	movs	r3, #0
 800a02c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800a030:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800a034:	4628      	mov	r0, r5
 800a036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800a03a:	2704      	movs	r7, #4
 800a03c:	e7c2      	b.n	8009fc4 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 800a03e:	2d00      	cmp	r5, #0
 800a040:	d0f8      	beq.n	800a034 <I2C_IsErrorOccurred+0x120>
 800a042:	e7de      	b.n	800a002 <I2C_IsErrorOccurred+0xee>

0800a044 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	4604      	mov	r4, r0
 800a048:	460d      	mov	r5, r1
 800a04a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	f013 0f02 	tst.w	r3, #2
 800a054:	d11d      	bne.n	800a092 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a056:	4632      	mov	r2, r6
 800a058:	4629      	mov	r1, r5
 800a05a:	4620      	mov	r0, r4
 800a05c:	f7ff ff5a 	bl	8009f14 <I2C_IsErrorOccurred>
 800a060:	b9c8      	cbnz	r0, 800a096 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800a062:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a066:	d0f1      	beq.n	800a04c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a068:	f7ff f964 	bl	8009334 <HAL_GetTick>
 800a06c:	1b80      	subs	r0, r0, r6
 800a06e:	42a8      	cmp	r0, r5
 800a070:	d801      	bhi.n	800a076 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800a072:	2d00      	cmp	r5, #0
 800a074:	d1ea      	bne.n	800a04c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a076:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a078:	f043 0320 	orr.w	r3, r3, #32
 800a07c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a07e:	2320      	movs	r3, #32
 800a080:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a084:	2300      	movs	r3, #0
 800a086:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800a08a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800a08e:	2001      	movs	r0, #1
 800a090:	e000      	b.n	800a094 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800a092:	2000      	movs	r0, #0
}
 800a094:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a096:	2001      	movs	r0, #1
 800a098:	e7fc      	b.n	800a094 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800a09a <I2C_WaitOnFlagUntilTimeout>:
{
 800a09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09e:	4606      	mov	r6, r0
 800a0a0:	4688      	mov	r8, r1
 800a0a2:	4617      	mov	r7, r2
 800a0a4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0a6:	6834      	ldr	r4, [r6, #0]
 800a0a8:	69a4      	ldr	r4, [r4, #24]
 800a0aa:	ea38 0304 	bics.w	r3, r8, r4
 800a0ae:	bf0c      	ite	eq
 800a0b0:	f04f 0c01 	moveq.w	ip, #1
 800a0b4:	f04f 0c00 	movne.w	ip, #0
 800a0b8:	45bc      	cmp	ip, r7
 800a0ba:	d118      	bne.n	800a0ee <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800a0bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a0c0:	d0f1      	beq.n	800a0a6 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0c2:	f7ff f937 	bl	8009334 <HAL_GetTick>
 800a0c6:	9b06      	ldr	r3, [sp, #24]
 800a0c8:	1ac0      	subs	r0, r0, r3
 800a0ca:	42a8      	cmp	r0, r5
 800a0cc:	d801      	bhi.n	800a0d2 <I2C_WaitOnFlagUntilTimeout+0x38>
 800a0ce:	2d00      	cmp	r5, #0
 800a0d0:	d1e9      	bne.n	800a0a6 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0d2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800a0d4:	f043 0320 	orr.w	r3, r3, #32
 800a0d8:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0da:	2320      	movs	r3, #32
 800a0dc:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800a0e6:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	e000      	b.n	800a0f0 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 800a0ee:	2000      	movs	r0, #0
}
 800a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a0f4 <I2C_RequestMemoryWrite>:
{
 800a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4690      	mov	r8, r2
 800a0fe:	461d      	mov	r5, r3
 800a100:	9e08      	ldr	r6, [sp, #32]
 800a102:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a104:	4b19      	ldr	r3, [pc, #100]	; (800a16c <I2C_RequestMemoryWrite+0x78>)
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a10c:	b2ea      	uxtb	r2, r5
 800a10e:	f7ff fee3 	bl	8009ed8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a112:	463a      	mov	r2, r7
 800a114:	4631      	mov	r1, r6
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff ff94 	bl	800a044 <I2C_WaitOnTXISFlagUntilTimeout>
 800a11c:	b9f8      	cbnz	r0, 800a15e <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a11e:	2d01      	cmp	r5, #1
 800a120:	d10e      	bne.n	800a140 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	fa5f f288 	uxtb.w	r2, r8
 800a128:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a12a:	9700      	str	r7, [sp, #0]
 800a12c:	4633      	mov	r3, r6
 800a12e:	2200      	movs	r2, #0
 800a130:	2180      	movs	r1, #128	; 0x80
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff ffb1 	bl	800a09a <I2C_WaitOnFlagUntilTimeout>
 800a138:	b9a8      	cbnz	r0, 800a166 <I2C_RequestMemoryWrite+0x72>
}
 800a13a:	b002      	add	sp, #8
 800a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800a146:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a148:	463a      	mov	r2, r7
 800a14a:	4631      	mov	r1, r6
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7ff ff79 	bl	800a044 <I2C_WaitOnTXISFlagUntilTimeout>
 800a152:	b930      	cbnz	r0, 800a162 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	fa5f f288 	uxtb.w	r2, r8
 800a15a:	629a      	str	r2, [r3, #40]	; 0x28
 800a15c:	e7e5      	b.n	800a12a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800a15e:	2001      	movs	r0, #1
 800a160:	e7eb      	b.n	800a13a <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800a162:	2001      	movs	r0, #1
 800a164:	e7e9      	b.n	800a13a <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800a166:	2001      	movs	r0, #1
 800a168:	e7e7      	b.n	800a13a <I2C_RequestMemoryWrite+0x46>
 800a16a:	bf00      	nop
 800a16c:	80002000 	.word	0x80002000

0800a170 <I2C_RequestMemoryRead>:
{
 800a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	4604      	mov	r4, r0
 800a178:	4690      	mov	r8, r2
 800a17a:	461d      	mov	r5, r3
 800a17c:	9e08      	ldr	r6, [sp, #32]
 800a17e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a180:	4b18      	ldr	r3, [pc, #96]	; (800a1e4 <I2C_RequestMemoryRead+0x74>)
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	2300      	movs	r3, #0
 800a186:	b2ea      	uxtb	r2, r5
 800a188:	f7ff fea6 	bl	8009ed8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a18c:	463a      	mov	r2, r7
 800a18e:	4631      	mov	r1, r6
 800a190:	4620      	mov	r0, r4
 800a192:	f7ff ff57 	bl	800a044 <I2C_WaitOnTXISFlagUntilTimeout>
 800a196:	b9f8      	cbnz	r0, 800a1d8 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a198:	2d01      	cmp	r5, #1
 800a19a:	d10e      	bne.n	800a1ba <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	fa5f f288 	uxtb.w	r2, r8
 800a1a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a1a4:	9700      	str	r7, [sp, #0]
 800a1a6:	4633      	mov	r3, r6
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2140      	movs	r1, #64	; 0x40
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f7ff ff74 	bl	800a09a <I2C_WaitOnFlagUntilTimeout>
 800a1b2:	b9a8      	cbnz	r0, 800a1e0 <I2C_RequestMemoryRead+0x70>
}
 800a1b4:	b002      	add	sp, #8
 800a1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800a1c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1c2:	463a      	mov	r2, r7
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7ff ff3c 	bl	800a044 <I2C_WaitOnTXISFlagUntilTimeout>
 800a1cc:	b930      	cbnz	r0, 800a1dc <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	fa5f f288 	uxtb.w	r2, r8
 800a1d4:	629a      	str	r2, [r3, #40]	; 0x28
 800a1d6:	e7e5      	b.n	800a1a4 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800a1d8:	2001      	movs	r0, #1
 800a1da:	e7eb      	b.n	800a1b4 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800a1dc:	2001      	movs	r0, #1
 800a1de:	e7e9      	b.n	800a1b4 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	e7e7      	b.n	800a1b4 <I2C_RequestMemoryRead+0x44>
 800a1e4:	80002000 	.word	0x80002000

0800a1e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	f013 0f20 	tst.w	r3, #32
 800a1f8:	d11a      	bne.n	800a230 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1fa:	4632      	mov	r2, r6
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	4628      	mov	r0, r5
 800a200:	f7ff fe88 	bl	8009f14 <I2C_IsErrorOccurred>
 800a204:	b9b0      	cbnz	r0, 800a234 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a206:	f7ff f895 	bl	8009334 <HAL_GetTick>
 800a20a:	1b80      	subs	r0, r0, r6
 800a20c:	42a0      	cmp	r0, r4
 800a20e:	d801      	bhi.n	800a214 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800a210:	2c00      	cmp	r4, #0
 800a212:	d1ed      	bne.n	800a1f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a214:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a216:	f043 0320 	orr.w	r3, r3, #32
 800a21a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a21c:	2320      	movs	r3, #32
 800a21e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a222:	2300      	movs	r3, #0
 800a224:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a228:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800a22c:	2001      	movs	r0, #1
}
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800a230:	2000      	movs	r0, #0
 800a232:	e7fc      	b.n	800a22e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800a234:	2001      	movs	r0, #1
 800a236:	e7fa      	b.n	800a22e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800a238 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800a238:	2800      	cmp	r0, #0
 800a23a:	d057      	beq.n	800a2ec <HAL_I2C_Init+0xb4>
{
 800a23c:	b510      	push	{r4, lr}
 800a23e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a240:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a244:	2b00      	cmp	r3, #0
 800a246:	d041      	beq.n	800a2cc <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a248:	2324      	movs	r3, #36	; 0x24
 800a24a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	6813      	ldr	r3, [r2, #0]
 800a252:	f023 0301 	bic.w	r3, r3, #1
 800a256:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	6822      	ldr	r2, [r4, #0]
 800a25c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800a260:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a262:	6822      	ldr	r2, [r4, #0]
 800a264:	6893      	ldr	r3, [r2, #8]
 800a266:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a26a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a26c:	68e3      	ldr	r3, [r4, #12]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d031      	beq.n	800a2d6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a272:	68a3      	ldr	r3, [r4, #8]
 800a274:	6822      	ldr	r2, [r4, #0]
 800a276:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800a27a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a27c:	68e3      	ldr	r3, [r4, #12]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d02f      	beq.n	800a2e2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	6851      	ldr	r1, [r2, #4]
 800a286:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <HAL_I2C_Init+0xb8>)
 800a288:	430b      	orrs	r3, r1
 800a28a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a28c:	6822      	ldr	r2, [r4, #0]
 800a28e:	68d3      	ldr	r3, [r2, #12]
 800a290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a294:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	6962      	ldr	r2, [r4, #20]
 800a29a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a29c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a29e:	6822      	ldr	r2, [r4, #0]
 800a2a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a2a4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a2a6:	69e3      	ldr	r3, [r4, #28]
 800a2a8:	6a21      	ldr	r1, [r4, #32]
 800a2aa:	6822      	ldr	r2, [r4, #0]
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a2b0:	6822      	ldr	r2, [r4, #0]
 800a2b2:	6813      	ldr	r3, [r2, #0]
 800a2b4:	f043 0301 	orr.w	r3, r3, #1
 800a2b8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a2be:	2320      	movs	r3, #32
 800a2c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2c4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2c6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800a2ca:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800a2cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800a2d0:	f7f8 fdba 	bl	8002e48 <HAL_I2C_MspInit>
 800a2d4:	e7b8      	b.n	800a248 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	6822      	ldr	r2, [r4, #0]
 800a2da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2de:	6093      	str	r3, [r2, #8]
 800a2e0:	e7cc      	b.n	800a27c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2e8:	605a      	str	r2, [r3, #4]
 800a2ea:	e7ca      	b.n	800a282 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800a2ec:	2001      	movs	r0, #1
}
 800a2ee:	4770      	bx	lr
 800a2f0:	02008000 	.word	0x02008000

0800a2f4 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800a2f4:	b1a8      	cbz	r0, 800a322 <HAL_I2C_DeInit+0x2e>
{
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a2fa:	2324      	movs	r3, #36	; 0x24
 800a2fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a300:	6802      	ldr	r2, [r0, #0]
 800a302:	6813      	ldr	r3, [r2, #0]
 800a304:	f023 0301 	bic.w	r3, r3, #1
 800a308:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800a30a:	f7f8 fde9 	bl	8002ee0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a30e:	2000      	movs	r0, #0
 800a310:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a312:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a316:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a318:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 800a31c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800a320:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a322:	2001      	movs	r0, #1
}
 800a324:	4770      	bx	lr

0800a326 <HAL_I2C_Mem_Write>:
{
 800a326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32a:	b083      	sub	sp, #12
 800a32c:	460d      	mov	r5, r1
 800a32e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800a332:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a334:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800a338:	b2c9      	uxtb	r1, r1
 800a33a:	2920      	cmp	r1, #32
 800a33c:	f040 80bc 	bne.w	800a4b8 <HAL_I2C_Mem_Write+0x192>
 800a340:	4604      	mov	r4, r0
 800a342:	4690      	mov	r8, r2
 800a344:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800a346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a348:	f1ba 0f00 	cmp.w	sl, #0
 800a34c:	bf18      	it	ne
 800a34e:	2b00      	cmpne	r3, #0
 800a350:	d016      	beq.n	800a380 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 800a352:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a356:	2b01      	cmp	r3, #1
 800a358:	f000 80b2 	beq.w	800a4c0 <HAL_I2C_Mem_Write+0x19a>
 800a35c:	f04f 0b01 	mov.w	fp, #1
 800a360:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a364:	f7fe ffe6 	bl	8009334 <HAL_GetTick>
 800a368:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a36a:	9000      	str	r0, [sp, #0]
 800a36c:	2319      	movs	r3, #25
 800a36e:	465a      	mov	r2, fp
 800a370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a374:	4620      	mov	r0, r4
 800a376:	f7ff fe90 	bl	800a09a <I2C_WaitOnFlagUntilTimeout>
 800a37a:	b130      	cbz	r0, 800a38a <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800a37c:	2001      	movs	r0, #1
 800a37e:	e09c      	b.n	800a4ba <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a380:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a384:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800a386:	2001      	movs	r0, #1
 800a388:	e097      	b.n	800a4ba <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a38a:	2321      	movs	r3, #33	; 0x21
 800a38c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a390:	2340      	movs	r3, #64	; 0x40
 800a392:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a396:	2300      	movs	r3, #0
 800a398:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800a39a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a39c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800a39e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a3a2:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3a4:	9601      	str	r6, [sp, #4]
 800a3a6:	9700      	str	r7, [sp, #0]
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	4642      	mov	r2, r8
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7ff fea0 	bl	800a0f4 <I2C_RequestMemoryWrite>
 800a3b4:	b970      	cbnz	r0, 800a3d4 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	2bff      	cmp	r3, #255	; 0xff
 800a3bc:	d90f      	bls.n	800a3de <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3be:	22ff      	movs	r2, #255	; 0xff
 800a3c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f7ff fd83 	bl	8009ed8 <I2C_TransferConfig>
 800a3d2:	e021      	b.n	800a418 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a3da:	4658      	mov	r0, fp
 800a3dc:	e06d      	b.n	800a4ba <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800a3de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a3e0:	b292      	uxth	r2, r2
 800a3e2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f7ff fd71 	bl	8009ed8 <I2C_TransferConfig>
 800a3f6:	e00f      	b.n	800a418 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800a3f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a3fa:	b292      	uxth	r2, r2
 800a3fc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a3fe:	2300      	movs	r3, #0
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	4629      	mov	r1, r5
 800a40a:	4620      	mov	r0, r4
 800a40c:	f7ff fd64 	bl	8009ed8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a412:	b29b      	uxth	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d033      	beq.n	800a480 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a418:	4632      	mov	r2, r6
 800a41a:	4639      	mov	r1, r7
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7ff fe11 	bl	800a044 <I2C_WaitOnTXISFlagUntilTimeout>
 800a422:	2800      	cmp	r0, #0
 800a424:	d14e      	bne.n	800a4c4 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a426:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	7812      	ldrb	r2, [r2, #0]
 800a42c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a42e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a430:	3301      	adds	r3, #1
 800a432:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a434:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a436:	b29b      	uxth	r3, r3
 800a438:	3b01      	subs	r3, #1
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a43e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a440:	3b01      	subs	r3, #1
 800a442:	b29b      	uxth	r3, r3
 800a444:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a446:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a448:	b292      	uxth	r2, r2
 800a44a:	2a00      	cmp	r2, #0
 800a44c:	d0e0      	beq.n	800a410 <HAL_I2C_Mem_Write+0xea>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1de      	bne.n	800a410 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a452:	9600      	str	r6, [sp, #0]
 800a454:	463b      	mov	r3, r7
 800a456:	2200      	movs	r2, #0
 800a458:	2180      	movs	r1, #128	; 0x80
 800a45a:	4620      	mov	r0, r4
 800a45c:	f7ff fe1d 	bl	800a09a <I2C_WaitOnFlagUntilTimeout>
 800a460:	bb90      	cbnz	r0, 800a4c8 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a462:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a464:	b29b      	uxth	r3, r3
 800a466:	2bff      	cmp	r3, #255	; 0xff
 800a468:	d9c6      	bls.n	800a3f8 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a46a:	22ff      	movs	r2, #255	; 0xff
 800a46c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a46e:	2300      	movs	r3, #0
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a476:	4629      	mov	r1, r5
 800a478:	4620      	mov	r0, r4
 800a47a:	f7ff fd2d 	bl	8009ed8 <I2C_TransferConfig>
 800a47e:	e7c7      	b.n	800a410 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a480:	4632      	mov	r2, r6
 800a482:	4639      	mov	r1, r7
 800a484:	4620      	mov	r0, r4
 800a486:	f7ff feaf 	bl	800a1e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a48a:	b9f8      	cbnz	r0, 800a4cc <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	2220      	movs	r2, #32
 800a490:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a492:	6821      	ldr	r1, [r4, #0]
 800a494:	684b      	ldr	r3, [r1, #4]
 800a496:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800a49a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800a49e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800a4a2:	f023 0301 	bic.w	r3, r3, #1
 800a4a6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a4a8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800a4b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800a4b6:	e000      	b.n	800a4ba <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800a4b8:	2002      	movs	r0, #2
}
 800a4ba:	b003      	add	sp, #12
 800a4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a4c0:	2002      	movs	r0, #2
 800a4c2:	e7fa      	b.n	800a4ba <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800a4c4:	2001      	movs	r0, #1
 800a4c6:	e7f8      	b.n	800a4ba <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800a4c8:	2001      	movs	r0, #1
 800a4ca:	e7f6      	b.n	800a4ba <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800a4cc:	2001      	movs	r0, #1
 800a4ce:	e7f4      	b.n	800a4ba <HAL_I2C_Mem_Write+0x194>

0800a4d0 <HAL_I2C_Mem_Read>:
{
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800a4dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4de:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800a4e2:	b2c9      	uxtb	r1, r1
 800a4e4:	2920      	cmp	r1, #32
 800a4e6:	f040 80bd 	bne.w	800a664 <HAL_I2C_Mem_Read+0x194>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	4690      	mov	r8, r2
 800a4ee:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800a4f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4f2:	f1ba 0f00 	cmp.w	sl, #0
 800a4f6:	bf18      	it	ne
 800a4f8:	2b00      	cmpne	r3, #0
 800a4fa:	d016      	beq.n	800a52a <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 800a4fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a500:	2b01      	cmp	r3, #1
 800a502:	f000 80b3 	beq.w	800a66c <HAL_I2C_Mem_Read+0x19c>
 800a506:	f04f 0b01 	mov.w	fp, #1
 800a50a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a50e:	f7fe ff11 	bl	8009334 <HAL_GetTick>
 800a512:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a514:	9000      	str	r0, [sp, #0]
 800a516:	2319      	movs	r3, #25
 800a518:	465a      	mov	r2, fp
 800a51a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a51e:	4620      	mov	r0, r4
 800a520:	f7ff fdbb 	bl	800a09a <I2C_WaitOnFlagUntilTimeout>
 800a524:	b130      	cbz	r0, 800a534 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800a526:	2001      	movs	r0, #1
 800a528:	e09d      	b.n	800a666 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a52a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a52e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800a530:	2001      	movs	r0, #1
 800a532:	e098      	b.n	800a666 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a534:	2322      	movs	r3, #34	; 0x22
 800a536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a53a:	2340      	movs	r3, #64	; 0x40
 800a53c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a540:	2300      	movs	r3, #0
 800a542:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800a544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a546:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800a548:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a54c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a54e:	9601      	str	r6, [sp, #4]
 800a550:	9700      	str	r7, [sp, #0]
 800a552:	464b      	mov	r3, r9
 800a554:	4642      	mov	r2, r8
 800a556:	4629      	mov	r1, r5
 800a558:	4620      	mov	r0, r4
 800a55a:	f7ff fe09 	bl	800a170 <I2C_RequestMemoryRead>
 800a55e:	b970      	cbnz	r0, 800a57e <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	2bff      	cmp	r3, #255	; 0xff
 800a566:	d90f      	bls.n	800a588 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a568:	22ff      	movs	r2, #255	; 0xff
 800a56a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a56c:	4b43      	ldr	r3, [pc, #268]	; (800a67c <HAL_I2C_Mem_Read+0x1ac>)
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a574:	4629      	mov	r1, r5
 800a576:	4620      	mov	r0, r4
 800a578:	f7ff fcae 	bl	8009ed8 <I2C_TransferConfig>
 800a57c:	e021      	b.n	800a5c2 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800a57e:	2300      	movs	r3, #0
 800a580:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a584:	4658      	mov	r0, fp
 800a586:	e06e      	b.n	800a666 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800a588:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a58a:	b292      	uxth	r2, r2
 800a58c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a58e:	4b3b      	ldr	r3, [pc, #236]	; (800a67c <HAL_I2C_Mem_Read+0x1ac>)
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	4629      	mov	r1, r5
 800a59a:	4620      	mov	r0, r4
 800a59c:	f7ff fc9c 	bl	8009ed8 <I2C_TransferConfig>
 800a5a0:	e00f      	b.n	800a5c2 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800a5a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a5a4:	b292      	uxth	r2, r2
 800a5a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5b0:	b2d2      	uxtb	r2, r2
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f7ff fc8f 	bl	8009ed8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a5ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d034      	beq.n	800a62c <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a5c2:	9600      	str	r6, [sp, #0]
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2104      	movs	r1, #4
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f7ff fd65 	bl	800a09a <I2C_WaitOnFlagUntilTimeout>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d14d      	bne.n	800a670 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5da:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a5dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5de:	3301      	adds	r3, #1
 800a5e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800a5e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a5e4:	3a01      	subs	r2, #1
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a5ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a5f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0de      	beq.n	800a5ba <HAL_I2C_Mem_Read+0xea>
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	d1dc      	bne.n	800a5ba <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a600:	9600      	str	r6, [sp, #0]
 800a602:	463b      	mov	r3, r7
 800a604:	2180      	movs	r1, #128	; 0x80
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff fd47 	bl	800a09a <I2C_WaitOnFlagUntilTimeout>
 800a60c:	bb90      	cbnz	r0, 800a674 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a60e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a610:	b29b      	uxth	r3, r3
 800a612:	2bff      	cmp	r3, #255	; 0xff
 800a614:	d9c5      	bls.n	800a5a2 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a616:	22ff      	movs	r2, #255	; 0xff
 800a618:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a61a:	2300      	movs	r3, #0
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a622:	4629      	mov	r1, r5
 800a624:	4620      	mov	r0, r4
 800a626:	f7ff fc57 	bl	8009ed8 <I2C_TransferConfig>
 800a62a:	e7c6      	b.n	800a5ba <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a62c:	4632      	mov	r2, r6
 800a62e:	4639      	mov	r1, r7
 800a630:	4620      	mov	r0, r4
 800a632:	f7ff fdd9 	bl	800a1e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a636:	b9f8      	cbnz	r0, 800a678 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	2220      	movs	r2, #32
 800a63c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a63e:	6821      	ldr	r1, [r4, #0]
 800a640:	684b      	ldr	r3, [r1, #4]
 800a642:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800a646:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800a64a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800a64e:	f023 0301 	bic.w	r3, r3, #1
 800a652:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a654:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a658:	2300      	movs	r3, #0
 800a65a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800a65e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800a662:	e000      	b.n	800a666 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800a664:	2002      	movs	r0, #2
}
 800a666:	b003      	add	sp, #12
 800a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a66c:	2002      	movs	r0, #2
 800a66e:	e7fa      	b.n	800a666 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 800a670:	2001      	movs	r0, #1
 800a672:	e7f8      	b.n	800a666 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 800a674:	2001      	movs	r0, #1
 800a676:	e7f6      	b.n	800a666 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800a678:	2001      	movs	r0, #1
 800a67a:	e7f4      	b.n	800a666 <HAL_I2C_Mem_Read+0x196>
 800a67c:	80002400 	.word	0x80002400

0800a680 <HAL_I2C_GetState>:
  return hi2c->State;
 800a680:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800a684:	4770      	bx	lr

0800a686 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800a686:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800a688:	4770      	bx	lr

0800a68a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a68a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b20      	cmp	r3, #32
 800a692:	d124      	bne.n	800a6de <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a694:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d022      	beq.n	800a6e2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800a69c:	2301      	movs	r3, #1
 800a69e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6a2:	2324      	movs	r3, #36	; 0x24
 800a6a4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6a8:	6802      	ldr	r2, [r0, #0]
 800a6aa:	6813      	ldr	r3, [r2, #0]
 800a6ac:	f023 0301 	bic.w	r3, r3, #1
 800a6b0:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a6b2:	6802      	ldr	r2, [r0, #0]
 800a6b4:	6813      	ldr	r3, [r2, #0]
 800a6b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ba:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a6bc:	6802      	ldr	r2, [r0, #0]
 800a6be:	6813      	ldr	r3, [r2, #0]
 800a6c0:	4319      	orrs	r1, r3
 800a6c2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a6c4:	6802      	ldr	r2, [r0, #0]
 800a6c6:	6813      	ldr	r3, [r2, #0]
 800a6c8:	f043 0301 	orr.w	r3, r3, #1
 800a6cc:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6ce:	2320      	movs	r3, #32
 800a6d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800a6da:	4618      	mov	r0, r3
 800a6dc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800a6de:	2002      	movs	r0, #2
 800a6e0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800a6e2:	2002      	movs	r0, #2
  }
}
 800a6e4:	4770      	bx	lr

0800a6e6 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b20      	cmp	r3, #32
 800a6ee:	d122      	bne.n	800a736 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d020      	beq.n	800a73a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6fe:	2324      	movs	r3, #36	; 0x24
 800a700:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a704:	6802      	ldr	r2, [r0, #0]
 800a706:	6813      	ldr	r3, [r2, #0]
 800a708:	f023 0301 	bic.w	r3, r3, #1
 800a70c:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a70e:	6802      	ldr	r2, [r0, #0]
 800a710:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a712:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a716:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a71a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a71c:	6802      	ldr	r2, [r0, #0]
 800a71e:	6813      	ldr	r3, [r2, #0]
 800a720:	f043 0301 	orr.w	r3, r3, #1
 800a724:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a726:	2320      	movs	r3, #32
 800a728:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a72c:	2300      	movs	r3, #0
 800a72e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800a732:	4618      	mov	r0, r3
 800a734:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800a736:	2002      	movs	r0, #2
 800a738:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800a73a:	2002      	movs	r0, #2
  }
}
 800a73c:	4770      	bx	lr
	...

0800a740 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a740:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a742:	684d      	ldr	r5, [r1, #4]
 800a744:	6804      	ldr	r4, [r0, #0]
 800a746:	68e3      	ldr	r3, [r4, #12]
 800a748:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800a74c:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a74e:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 800a752:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800a756:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800a75a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a75e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a762:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a764:	6804      	ldr	r4, [r0, #0]
 800a766:	68e6      	ldr	r6, [r4, #12]
 800a768:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a76c:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a76e:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a770:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a774:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a778:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a77c:	68cd      	ldr	r5, [r1, #12]
 800a77e:	6804      	ldr	r4, [r0, #0]
 800a780:	68e3      	ldr	r3, [r4, #12]
 800a782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a786:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a788:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 800a78c:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 800a790:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a794:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a798:	688b      	ldr	r3, [r1, #8]
 800a79a:	6804      	ldr	r4, [r0, #0]
 800a79c:	68e6      	ldr	r6, [r4, #12]
 800a79e:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800a7a2:	4473      	add	r3, lr
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800a7aa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a7ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a7b2:	6803      	ldr	r3, [r0, #0]
 800a7b4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a7b8:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800a7bc:	f024 0407 	bic.w	r4, r4, #7
 800a7c0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a7c4:	6803      	ldr	r3, [r0, #0]
 800a7c6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a7ca:	690c      	ldr	r4, [r1, #16]
 800a7cc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a7d0:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a7d4:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a7d8:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a7da:	6804      	ldr	r4, [r0, #0]
 800a7dc:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800a7e0:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 800a7e4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a7e8:	2400      	movs	r4, #0
 800a7ea:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a7ee:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800a7f2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800a7f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a7fa:	6806      	ldr	r6, [r0, #0]
 800a7fc:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 800a800:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800a804:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 800a808:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a80c:	6803      	ldr	r3, [r0, #0]
 800a80e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a812:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 800a816:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800a81a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a81e:	6803      	ldr	r3, [r0, #0]
 800a820:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a824:	694d      	ldr	r5, [r1, #20]
 800a826:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a82a:	6803      	ldr	r3, [r0, #0]
 800a82c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a830:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800a834:	4d2e      	ldr	r5, [pc, #184]	; (800a8f0 <LTDC_SetConfig+0x1b0>)
 800a836:	4035      	ands	r5, r6
 800a838:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a83c:	6a0d      	ldr	r5, [r1, #32]
 800a83e:	6803      	ldr	r3, [r0, #0]
 800a840:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a844:	69ce      	ldr	r6, [r1, #28]
 800a846:	4335      	orrs	r5, r6
 800a848:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a84c:	6803      	ldr	r3, [r0, #0]
 800a84e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a852:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800a856:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a85a:	6803      	ldr	r3, [r0, #0]
 800a85c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800a860:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a862:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a866:	690b      	ldr	r3, [r1, #16]
 800a868:	b16b      	cbz	r3, 800a886 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d039      	beq.n	800a8e2 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a86e:	2b02      	cmp	r3, #2
 800a870:	bf18      	it	ne
 800a872:	2b04      	cmpne	r3, #4
 800a874:	d037      	beq.n	800a8e6 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a876:	2b03      	cmp	r3, #3
 800a878:	d037      	beq.n	800a8ea <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a87a:	2b07      	cmp	r3, #7
 800a87c:	d001      	beq.n	800a882 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800a87e:	2501      	movs	r5, #1
 800a880:	e002      	b.n	800a888 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800a882:	2502      	movs	r5, #2
 800a884:	e000      	b.n	800a888 <LTDC_SetConfig+0x148>
    tmp = 4U;
 800a886:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a888:	6802      	ldr	r2, [r0, #0]
 800a88a:	4462      	add	r2, ip
 800a88c:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800a890:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800a894:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a898:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800a89a:	fb05 f402 	mul.w	r4, r5, r2
 800a89e:	684b      	ldr	r3, [r1, #4]
 800a8a0:	680a      	ldr	r2, [r1, #0]
 800a8a2:	1a9b      	subs	r3, r3, r2
 800a8a4:	fb05 f303 	mul.w	r3, r5, r3
 800a8a8:	3307      	adds	r3, #7
 800a8aa:	6802      	ldr	r2, [r0, #0]
 800a8ac:	4462      	add	r2, ip
 800a8ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a8b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a8b6:	6803      	ldr	r3, [r0, #0]
 800a8b8:	4463      	add	r3, ip
 800a8ba:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800a8be:	4a0d      	ldr	r2, [pc, #52]	; (800a8f4 <LTDC_SetConfig+0x1b4>)
 800a8c0:	4022      	ands	r2, r4
 800a8c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a8c6:	6803      	ldr	r3, [r0, #0]
 800a8c8:	4463      	add	r3, ip
 800a8ca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a8cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a8d0:	6803      	ldr	r3, [r0, #0]
 800a8d2:	449c      	add	ip, r3
 800a8d4:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 800a8d8:	f043 0301 	orr.w	r3, r3, #1
 800a8dc:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 800a8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800a8e2:	2503      	movs	r5, #3
 800a8e4:	e7d0      	b.n	800a888 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800a8e6:	2502      	movs	r5, #2
 800a8e8:	e7ce      	b.n	800a888 <LTDC_SetConfig+0x148>
 800a8ea:	2502      	movs	r5, #2
 800a8ec:	e7cc      	b.n	800a888 <LTDC_SetConfig+0x148>
 800a8ee:	bf00      	nop
 800a8f0:	fffff8f8 	.word	0xfffff8f8
 800a8f4:	fffff800 	.word	0xfffff800

0800a8f8 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d072      	beq.n	800a9e2 <HAL_LTDC_Init+0xea>
{
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a900:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800a904:	2b00      	cmp	r3, #0
 800a906:	d067      	beq.n	800a9d8 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a908:	2302      	movs	r3, #2
 800a90a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	6993      	ldr	r3, [r2, #24]
 800a912:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a916:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a918:	6821      	ldr	r1, [r4, #0]
 800a91a:	698a      	ldr	r2, [r1, #24]
 800a91c:	6863      	ldr	r3, [r4, #4]
 800a91e:	68a0      	ldr	r0, [r4, #8]
 800a920:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a922:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a924:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a926:	6920      	ldr	r0, [r4, #16]
 800a928:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a92a:	4313      	orrs	r3, r2
 800a92c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a92e:	6821      	ldr	r1, [r4, #0]
 800a930:	688a      	ldr	r2, [r1, #8]
 800a932:	4b2d      	ldr	r3, [pc, #180]	; (800a9e8 <HAL_LTDC_Init+0xf0>)
 800a934:	401a      	ands	r2, r3
 800a936:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	6882      	ldr	r2, [r0, #8]
 800a93c:	69a1      	ldr	r1, [r4, #24]
 800a93e:	6965      	ldr	r5, [r4, #20]
 800a940:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a944:	430a      	orrs	r2, r1
 800a946:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a948:	6821      	ldr	r1, [r4, #0]
 800a94a:	68ca      	ldr	r2, [r1, #12]
 800a94c:	401a      	ands	r2, r3
 800a94e:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a950:	6820      	ldr	r0, [r4, #0]
 800a952:	68c2      	ldr	r2, [r0, #12]
 800a954:	6a21      	ldr	r1, [r4, #32]
 800a956:	69e5      	ldr	r5, [r4, #28]
 800a958:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a95c:	430a      	orrs	r2, r1
 800a95e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a960:	6821      	ldr	r1, [r4, #0]
 800a962:	690a      	ldr	r2, [r1, #16]
 800a964:	401a      	ands	r2, r3
 800a966:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a968:	6820      	ldr	r0, [r4, #0]
 800a96a:	6902      	ldr	r2, [r0, #16]
 800a96c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a96e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a970:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a974:	430a      	orrs	r2, r1
 800a976:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a978:	6821      	ldr	r1, [r4, #0]
 800a97a:	694a      	ldr	r2, [r1, #20]
 800a97c:	4013      	ands	r3, r2
 800a97e:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a980:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a982:	6821      	ldr	r1, [r4, #0]
 800a984:	694b      	ldr	r3, [r1, #20]
 800a986:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a988:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a98c:	4313      	orrs	r3, r2
 800a98e:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a990:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a994:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a998:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a99a:	6821      	ldr	r1, [r4, #0]
 800a99c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a99e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a9a2:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a9a4:	6821      	ldr	r1, [r4, #0]
 800a9a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a9a8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a9ac:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800a9b0:	4303      	orrs	r3, r0
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a9b6:	6822      	ldr	r2, [r4, #0]
 800a9b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a9ba:	f043 0306 	orr.w	r3, r3, #6
 800a9be:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800a9c0:	6822      	ldr	r2, [r4, #0]
 800a9c2:	6993      	ldr	r3, [r2, #24]
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800a9d8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800a9dc:	f7f8 faa0 	bl	8002f20 <HAL_LTDC_MspInit>
 800a9e0:	e792      	b.n	800a908 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800a9e2:	2001      	movs	r0, #1
}
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	f000f800 	.word	0xf000f800

0800a9ec <HAL_LTDC_ErrorCallback>:
}
 800a9ec:	4770      	bx	lr

0800a9ee <HAL_LTDC_ReloadEventCallback>:
}
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_LTDC_IRQHandler>:
{
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a9f4:	6803      	ldr	r3, [r0, #0]
 800a9f6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a9f8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a9fa:	f015 0f04 	tst.w	r5, #4
 800a9fe:	d002      	beq.n	800aa06 <HAL_LTDC_IRQHandler+0x16>
 800aa00:	f016 0f04 	tst.w	r6, #4
 800aa04:	d112      	bne.n	800aa2c <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800aa06:	f015 0f02 	tst.w	r5, #2
 800aa0a:	d002      	beq.n	800aa12 <HAL_LTDC_IRQHandler+0x22>
 800aa0c:	f016 0f02 	tst.w	r6, #2
 800aa10:	d121      	bne.n	800aa56 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800aa12:	f015 0f01 	tst.w	r5, #1
 800aa16:	d002      	beq.n	800aa1e <HAL_LTDC_IRQHandler+0x2e>
 800aa18:	f016 0f01 	tst.w	r6, #1
 800aa1c:	d132      	bne.n	800aa84 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800aa1e:	f015 0f08 	tst.w	r5, #8
 800aa22:	d002      	beq.n	800aa2a <HAL_LTDC_IRQHandler+0x3a>
 800aa24:	f016 0f08 	tst.w	r6, #8
 800aa28:	d13d      	bne.n	800aaa6 <HAL_LTDC_IRQHandler+0xb6>
}
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800aa2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa2e:	f022 0204 	bic.w	r2, r2, #4
 800aa32:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800aa34:	6803      	ldr	r3, [r0, #0]
 800aa36:	2204      	movs	r2, #4
 800aa38:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800aa3a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800aa46:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800aa50:	f7ff ffcc 	bl	800a9ec <HAL_LTDC_ErrorCallback>
 800aa54:	e7d7      	b.n	800aa06 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800aa56:	6822      	ldr	r2, [r4, #0]
 800aa58:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800aa5a:	f023 0302 	bic.w	r3, r3, #2
 800aa5e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	2202      	movs	r2, #2
 800aa64:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800aa66:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800aa70:	2304      	movs	r3, #4
 800aa72:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800aa76:	2300      	movs	r3, #0
 800aa78:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f7ff ffb5 	bl	800a9ec <HAL_LTDC_ErrorCallback>
 800aa82:	e7c6      	b.n	800aa12 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800aa84:	6822      	ldr	r2, [r4, #0]
 800aa86:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800aa88:	f023 0301 	bic.w	r3, r3, #1
 800aa8c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800aa8e:	6822      	ldr	r2, [r4, #0]
 800aa90:	2301      	movs	r3, #1
 800aa92:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800aa94:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7f7 fadc 	bl	800205c <HAL_LTDC_LineEventCallback>
 800aaa4:	e7bb      	b.n	800aa1e <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800aaaa:	f023 0308 	bic.w	r3, r3, #8
 800aaae:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	2208      	movs	r2, #8
 800aab4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800aab6:	2301      	movs	r3, #1
 800aab8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800aabc:	2300      	movs	r3, #0
 800aabe:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7ff ff93 	bl	800a9ee <HAL_LTDC_ReloadEventCallback>
}
 800aac8:	e7af      	b.n	800aa2a <HAL_LTDC_IRQHandler+0x3a>

0800aaca <HAL_LTDC_ConfigLayer>:
{
 800aaca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800aacc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d02c      	beq.n	800ab2e <HAL_LTDC_ConfigLayer+0x64>
 800aad4:	4604      	mov	r4, r0
 800aad6:	460d      	mov	r5, r1
 800aad8:	4616      	mov	r6, r2
 800aada:	2701      	movs	r7, #1
 800aadc:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aae0:	2302      	movs	r3, #2
 800aae2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aae6:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800aaea:	fb0c 0c02 	mla	ip, ip, r2, r0
 800aaee:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800aaf2:	468e      	mov	lr, r1
 800aaf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aaf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aafc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab0c:	f8de 3000 	ldr.w	r3, [lr]
 800ab10:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ab14:	4632      	mov	r2, r6
 800ab16:	4629      	mov	r1, r5
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f7ff fe11 	bl	800a740 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ab22:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800ab26:	2000      	movs	r0, #0
 800ab28:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800ab2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800ab2e:	2002      	movs	r0, #2
 800ab30:	e7fc      	b.n	800ab2c <HAL_LTDC_ConfigLayer+0x62>
	...

0800ab34 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800ab34:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d01a      	beq.n	800ab72 <HAL_LTDC_ProgramLineEvent+0x3e>
{
 800ab3c:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ab44:	2302      	movs	r3, #2
 800ab46:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ab4a:	6804      	ldr	r4, [r0, #0]
 800ab4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab4e:	f023 0301 	bic.w	r3, r3, #1
 800ab52:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800ab54:	4b08      	ldr	r3, [pc, #32]	; (800ab78 <HAL_LTDC_ProgramLineEvent+0x44>)
 800ab56:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800ab58:	6801      	ldr	r1, [r0, #0]
 800ab5a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800ab60:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800ab64:	2300      	movs	r3, #0
 800ab66:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800ab6a:	4618      	mov	r0, r3
}
 800ab6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab70:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800ab72:	2002      	movs	r0, #2
}
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	50001000 	.word	0x50001000

0800ab7c <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 800ab80:	f7fe fbd8 	bl	8009334 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ab84:	2c00      	cmp	r4, #0
 800ab86:	d035      	beq.n	800abf4 <HAL_MDMA_Abort+0x78>
 800ab88:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ab8a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d006      	beq.n	800aba2 <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ab94:	2380      	movs	r3, #128	; 0x80
 800ab96:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 800ab9e:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 800aba0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800aba2:	6822      	ldr	r2, [r4, #0]
 800aba4:	68d3      	ldr	r3, [r2, #12]
 800aba6:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800abaa:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 800abac:	6822      	ldr	r2, [r4, #0]
 800abae:	68d3      	ldr	r3, [r2, #12]
 800abb0:	f023 0301 	bic.w	r3, r3, #1
 800abb4:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	f012 0f01 	tst.w	r2, #1
 800abbe:	d010      	beq.n	800abe2 <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800abc0:	f7fe fbb8 	bl	8009334 <HAL_GetTick>
 800abc4:	1b43      	subs	r3, r0, r5
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	d9f5      	bls.n	800abb6 <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800abca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800abcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd0:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800abd2:	2300      	movs	r3, #0
 800abd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800abd8:	2303      	movs	r3, #3
 800abda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800abde:	2001      	movs	r0, #1
 800abe0:	e7de      	b.n	800aba0 <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800abe2:	221f      	movs	r2, #31
 800abe4:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 800abe6:	2000      	movs	r0, #0
 800abe8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800abec:	2301      	movs	r3, #1
 800abee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800abf2:	e7d5      	b.n	800aba0 <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 800abf4:	2001      	movs	r0, #1
 800abf6:	e7d3      	b.n	800aba0 <HAL_MDMA_Abort+0x24>

0800abf8 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800abf8:	b190      	cbz	r0, 800ac20 <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800abfa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d003      	beq.n	800ac0c <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ac04:	2380      	movs	r3, #128	; 0x80
 800ac06:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 800ac08:	2001      	movs	r0, #1
 800ac0a:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ac0c:	2304      	movs	r3, #4
 800ac0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800ac12:	6802      	ldr	r2, [r0, #0]
 800ac14:	68d3      	ldr	r3, [r2, #12]
 800ac16:	f023 0301 	bic.w	r3, r3, #1
 800ac1a:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	4770      	bx	lr
    return HAL_ERROR;
 800ac20:	2001      	movs	r0, #1
}
 800ac22:	4770      	bx	lr

0800ac24 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800ac24:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800ac26:	6802      	ldr	r2, [r0, #0]
 800ac28:	6813      	ldr	r3, [r2, #0]
 800ac2a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800ac2e:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800ac30:	6883      	ldr	r3, [r0, #8]
 800ac32:	b933      	cbnz	r3, 800ac42 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800ac34:	6802      	ldr	r2, [r0, #0]
 800ac36:	6813      	ldr	r3, [r2, #0]
 800ac38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac3c:	684c      	ldr	r4, [r1, #4]
 800ac3e:	4323      	orrs	r3, r4
 800ac40:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800ac42:	680b      	ldr	r3, [r1, #0]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d04d      	beq.n	800ace4 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d055      	beq.n	800acf8 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800ac4c:	6803      	ldr	r3, [r0, #0]
 800ac4e:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800ac52:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800ac56:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800ac5a:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800ac5e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800ac60:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800ac62:	432c      	orrs	r4, r5
 800ac64:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800ac66:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800ac68:	b15c      	cbz	r4, 800ac82 <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800ac6a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800ac6c:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800ac6e:	6813      	ldr	r3, [r2, #0]
 800ac70:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800ac74:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800ac76:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800ac78:	432c      	orrs	r4, r5
 800ac7a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800ac7c:	432c      	orrs	r4, r5
 800ac7e:	4323      	orrs	r3, r4
 800ac80:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800ac82:	f8de 3000 	ldr.w	r3, [lr]
 800ac86:	f023 031f 	bic.w	r3, r3, #31
 800ac8a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800ac8c:	4323      	orrs	r3, r4
 800ac8e:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ac92:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800ac94:	b12b      	cbz	r3, 800aca2 <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800ac96:	680b      	ldr	r3, [r1, #0]
 800ac98:	b91b      	cbnz	r3, 800aca2 <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800ac9a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800ac9c:	6804      	ldr	r4, [r0, #0]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800aca2:	68cb      	ldr	r3, [r1, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d073      	beq.n	800ad90 <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800aca8:	69cc      	ldr	r4, [r1, #28]
 800acaa:	2c00      	cmp	r4, #0
 800acac:	d048      	beq.n	800ad40 <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800acae:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800acb0:	b365      	cbz	r5, 800ad0c <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800acb2:	6817      	ldr	r7, [r2, #0]
 800acb4:	4e48      	ldr	r6, [pc, #288]	; (800add8 <OSPI_ConfigCmd+0x1b4>)
 800acb6:	403e      	ands	r6, r7
 800acb8:	694f      	ldr	r7, [r1, #20]
 800acba:	433b      	orrs	r3, r7
 800acbc:	690f      	ldr	r7, [r1, #16]
 800acbe:	433b      	orrs	r3, r7
 800acc0:	431c      	orrs	r4, r3
 800acc2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800acc4:	431c      	orrs	r4, r3
 800acc6:	6a0b      	ldr	r3, [r1, #32]
 800acc8:	431c      	orrs	r4, r3
 800acca:	432c      	orrs	r4, r5
 800accc:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800acce:	432c      	orrs	r4, r5
 800acd0:	4334      	orrs	r4, r6
 800acd2:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800acd4:	688b      	ldr	r3, [r1, #8]
 800acd6:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800acda:	6803      	ldr	r3, [r0, #0]
 800acdc:	698a      	ldr	r2, [r1, #24]
 800acde:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800ace0:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800ace2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 800ace4:	6803      	ldr	r3, [r0, #0]
 800ace6:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800acea:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800acee:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 800acf2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800acf6:	e7b2      	b.n	800ac5e <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 800acf8:	6803      	ldr	r3, [r0, #0]
 800acfa:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800acfe:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800ad02:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 800ad06:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ad0a:	e7a8      	b.n	800ac5e <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800ad0c:	6816      	ldr	r6, [r2, #0]
 800ad0e:	4d33      	ldr	r5, [pc, #204]	; (800addc <OSPI_ConfigCmd+0x1b8>)
 800ad10:	4035      	ands	r5, r6
 800ad12:	694e      	ldr	r6, [r1, #20]
 800ad14:	4333      	orrs	r3, r6
 800ad16:	690e      	ldr	r6, [r1, #16]
 800ad18:	4333      	orrs	r3, r6
 800ad1a:	431c      	orrs	r4, r3
 800ad1c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800ad1e:	431c      	orrs	r4, r3
 800ad20:	6a0b      	ldr	r3, [r1, #32]
 800ad22:	431c      	orrs	r4, r3
 800ad24:	432c      	orrs	r4, r5
 800ad26:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ad28:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ad2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad2e:	d1d1      	bne.n	800acd4 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800ad30:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ad32:	2b08      	cmp	r3, #8
 800ad34:	d1ce      	bne.n	800acd4 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800ad36:	6813      	ldr	r3, [r2, #0]
 800ad38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	e7c9      	b.n	800acd4 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ad40:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800ad42:	b184      	cbz	r4, 800ad66 <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800ad44:	6815      	ldr	r5, [r2, #0]
 800ad46:	4826      	ldr	r0, [pc, #152]	; (800ade0 <OSPI_ConfigCmd+0x1bc>)
 800ad48:	4028      	ands	r0, r5
 800ad4a:	694d      	ldr	r5, [r1, #20]
 800ad4c:	432b      	orrs	r3, r5
 800ad4e:	690d      	ldr	r5, [r1, #16]
 800ad50:	432b      	orrs	r3, r5
 800ad52:	431c      	orrs	r4, r3
 800ad54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad56:	431c      	orrs	r4, r3
 800ad58:	4304      	orrs	r4, r0
 800ad5a:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 800ad5c:	688b      	ldr	r3, [r1, #8]
 800ad5e:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 800ad62:	2000      	movs	r0, #0
 800ad64:	e7bd      	b.n	800ace2 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800ad66:	6814      	ldr	r4, [r2, #0]
 800ad68:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800ad6c:	694d      	ldr	r5, [r1, #20]
 800ad6e:	432b      	orrs	r3, r5
 800ad70:	690d      	ldr	r5, [r1, #16]
 800ad72:	432b      	orrs	r3, r5
 800ad74:	4323      	orrs	r3, r4
 800ad76:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ad78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ad7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad7e:	d1ed      	bne.n	800ad5c <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800ad80:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ad82:	2b08      	cmp	r3, #8
 800ad84:	d1ea      	bne.n	800ad5c <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800ad86:	6813      	ldr	r3, [r2, #0]
 800ad88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad8c:	6013      	str	r3, [r2, #0]
 800ad8e:	e7e5      	b.n	800ad5c <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800ad90:	69cb      	ldr	r3, [r1, #28]
 800ad92:	b1e3      	cbz	r3, 800adce <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ad94:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800ad96:	b184      	cbz	r4, 800adba <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800ad98:	6816      	ldr	r6, [r2, #0]
 800ad9a:	4d12      	ldr	r5, [pc, #72]	; (800ade4 <OSPI_ConfigCmd+0x1c0>)
 800ad9c:	4035      	ands	r5, r6
 800ad9e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800ada0:	4333      	orrs	r3, r6
 800ada2:	6a0e      	ldr	r6, [r1, #32]
 800ada4:	4333      	orrs	r3, r6
 800ada6:	4323      	orrs	r3, r4
 800ada8:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800adaa:	4323      	orrs	r3, r4
 800adac:	432b      	orrs	r3, r5
 800adae:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 800adb0:	6803      	ldr	r3, [r0, #0]
 800adb2:	698a      	ldr	r2, [r1, #24]
 800adb4:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800adb6:	2000      	movs	r0, #0
 800adb8:	e793      	b.n	800ace2 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800adba:	6814      	ldr	r4, [r2, #0]
 800adbc:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800adc0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800adc2:	432b      	orrs	r3, r5
 800adc4:	6a0d      	ldr	r5, [r1, #32]
 800adc6:	432b      	orrs	r3, r5
 800adc8:	4323      	orrs	r3, r4
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	e7f0      	b.n	800adb0 <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800adce:	2308      	movs	r3, #8
 800add0:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 800add2:	2001      	movs	r0, #1
 800add4:	e785      	b.n	800ace2 <OSPI_ConfigCmd+0xbe>
 800add6:	bf00      	nop
 800add8:	f0ffc0c0 	.word	0xf0ffc0c0
 800addc:	ffffc0c0 	.word	0xffffc0c0
 800ade0:	f0ffffc0 	.word	0xf0ffffc0
 800ade4:	f0ffc0ff 	.word	0xf0ffc0ff

0800ade8 <OSPI_WaitFlagStateUntilTimeout>:
{
 800ade8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adec:	4605      	mov	r5, r0
 800adee:	460f      	mov	r7, r1
 800adf0:	4616      	mov	r6, r2
 800adf2:	4699      	mov	r9, r3
 800adf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800adf8:	682c      	ldr	r4, [r5, #0]
 800adfa:	6a24      	ldr	r4, [r4, #32]
 800adfc:	423c      	tst	r4, r7
 800adfe:	bf14      	ite	ne
 800ae00:	f04f 0c01 	movne.w	ip, #1
 800ae04:	f04f 0c00 	moveq.w	ip, #0
 800ae08:	45b4      	cmp	ip, r6
 800ae0a:	d014      	beq.n	800ae36 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800ae0c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ae10:	d0f2      	beq.n	800adf8 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae12:	f7fe fa8f 	bl	8009334 <HAL_GetTick>
 800ae16:	eba0 0009 	sub.w	r0, r0, r9
 800ae1a:	4540      	cmp	r0, r8
 800ae1c:	d802      	bhi.n	800ae24 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800ae1e:	f1b8 0f00 	cmp.w	r8, #0
 800ae22:	d1e9      	bne.n	800adf8 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800ae24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae28:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800ae2a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ae2c:	f043 0301 	orr.w	r3, r3, #1
 800ae30:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 800ae32:	2001      	movs	r0, #1
 800ae34:	e000      	b.n	800ae38 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 800ae36:	2000      	movs	r0, #0
}
 800ae38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ae3c <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 800ae3c:	b180      	cbz	r0, 800ae60 <HAL_OSPI_DeInit+0x24>
{
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 800ae42:	6802      	ldr	r2, [r0, #0]
 800ae44:	6813      	ldr	r3, [r2, #0]
 800ae46:	f023 0301 	bic.w	r3, r3, #1
 800ae4a:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800ae4c:	6802      	ldr	r2, [r0, #0]
 800ae4e:	6893      	ldr	r3, [r2, #8]
 800ae50:	f023 0302 	bic.w	r3, r3, #2
 800ae54:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 800ae56:	f7f8 f941 	bl	80030dc <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	6520      	str	r0, [r4, #80]	; 0x50
}
 800ae5e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800ae60:	2001      	movs	r0, #1
}
 800ae62:	4770      	bx	lr

0800ae64 <HAL_OSPI_Command>:
{
 800ae64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	4688      	mov	r8, r1
 800ae6e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800ae70:	f7fe fa60 	bl	8009334 <HAL_GetTick>
 800ae74:	4606      	mov	r6, r0
  state = hospi->State;
 800ae76:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800ae78:	2d02      	cmp	r5, #2
 800ae7a:	d009      	beq.n	800ae90 <HAL_OSPI_Command+0x2c>
 800ae7c:	2d14      	cmp	r5, #20
 800ae7e:	d024      	beq.n	800aeca <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800ae80:	2d24      	cmp	r5, #36	; 0x24
 800ae82:	d028      	beq.n	800aed6 <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800ae84:	2310      	movs	r3, #16
 800ae86:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800ae88:	2001      	movs	r0, #1
}
 800ae8a:	b002      	add	sp, #8
 800ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800ae90:	68e3      	ldr	r3, [r4, #12]
 800ae92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae96:	d0f1      	beq.n	800ae7c <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ae98:	9700      	str	r7, [sp, #0]
 800ae9a:	4633      	mov	r3, r6
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2120      	movs	r1, #32
 800aea0:	4620      	mov	r0, r4
 800aea2:	f7ff ffa1 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d1ef      	bne.n	800ae8a <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800aeaa:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800aeac:	4641      	mov	r1, r8
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7ff feb8 	bl	800ac24 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d1e8      	bne.n	800ae8a <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800aeb8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800aebc:	b193      	cbz	r3, 800aee4 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800aebe:	f8d8 3000 	ldr.w	r3, [r8]
 800aec2:	b9d3      	cbnz	r3, 800aefa <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800aec4:	2304      	movs	r3, #4
 800aec6:	6523      	str	r3, [r4, #80]	; 0x50
 800aec8:	e7df      	b.n	800ae8a <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800aeca:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800aece:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d8d5      	bhi.n	800ae80 <HAL_OSPI_Command+0x1c>
 800aed4:	e7e0      	b.n	800ae98 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800aed6:	f8d8 3000 	ldr.w	r3, [r8]
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	bf18      	it	ne
 800aede:	2b01      	cmpne	r3, #1
 800aee0:	d1d0      	bne.n	800ae84 <HAL_OSPI_Command+0x20>
 800aee2:	e7d9      	b.n	800ae98 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800aee4:	9700      	str	r7, [sp, #0]
 800aee6:	4633      	mov	r3, r6
 800aee8:	2201      	movs	r2, #1
 800aeea:	2102      	movs	r1, #2
 800aeec:	4620      	mov	r0, r4
 800aeee:	f7ff ff7b 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	2202      	movs	r2, #2
 800aef6:	625a      	str	r2, [r3, #36]	; 0x24
 800aef8:	e7c7      	b.n	800ae8a <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d007      	beq.n	800af0e <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d1c3      	bne.n	800ae8a <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800af02:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af04:	2b14      	cmp	r3, #20
 800af06:	d00b      	beq.n	800af20 <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800af08:	2324      	movs	r3, #36	; 0x24
 800af0a:	6523      	str	r3, [r4, #80]	; 0x50
 800af0c:	e7bd      	b.n	800ae8a <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800af0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af10:	2b24      	cmp	r3, #36	; 0x24
 800af12:	d002      	beq.n	800af1a <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800af14:	2314      	movs	r3, #20
 800af16:	6523      	str	r3, [r4, #80]	; 0x50
 800af18:	e7b7      	b.n	800ae8a <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800af1a:	2304      	movs	r3, #4
 800af1c:	6523      	str	r3, [r4, #80]	; 0x50
 800af1e:	e7b4      	b.n	800ae8a <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800af20:	2304      	movs	r3, #4
 800af22:	6523      	str	r3, [r4, #80]	; 0x50
 800af24:	e7b1      	b.n	800ae8a <HAL_OSPI_Command+0x26>

0800af26 <HAL_OSPI_Transmit>:
{
 800af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	4604      	mov	r4, r0
 800af2e:	4688      	mov	r8, r1
 800af30:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800af32:	f7fe f9ff 	bl	8009334 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800af36:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 800af38:	f1b8 0f00 	cmp.w	r8, #0
 800af3c:	d00a      	beq.n	800af54 <HAL_OSPI_Transmit+0x2e>
 800af3e:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800af40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af42:	2b04      	cmp	r3, #4
 800af44:	d00a      	beq.n	800af5c <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800af46:	2310      	movs	r3, #16
 800af48:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	b002      	add	sp, #8
 800af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800af54:	2308      	movs	r3, #8
 800af56:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e7f7      	b.n	800af4c <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800af5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af5e:	3301      	adds	r3, #1
 800af60:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800af62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800af64:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800af66:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800af70:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800af72:	9600      	str	r6, [sp, #0]
 800af74:	462b      	mov	r3, r5
 800af76:	2201      	movs	r2, #1
 800af78:	2104      	movs	r1, #4
 800af7a:	4620      	mov	r0, r4
 800af7c:	f7ff ff34 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800af80:	4603      	mov	r3, r0
 800af82:	b960      	cbnz	r0, 800af9e <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800af84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 800af8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800af8e:	3101      	adds	r1, #1
 800af90:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800af92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af94:	3901      	subs	r1, #1
 800af96:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800af98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	d1e9      	bne.n	800af72 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1d4      	bne.n	800af4c <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800afa2:	9600      	str	r6, [sp, #0]
 800afa4:	462b      	mov	r3, r5
 800afa6:	2201      	movs	r2, #1
 800afa8:	2102      	movs	r1, #2
 800afaa:	4620      	mov	r0, r4
 800afac:	f7ff ff1c 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800afb0:	4603      	mov	r3, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d1ca      	bne.n	800af4c <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800afb6:	6821      	ldr	r1, [r4, #0]
 800afb8:	2202      	movs	r2, #2
 800afba:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800afbc:	6522      	str	r2, [r4, #80]	; 0x50
 800afbe:	e7c5      	b.n	800af4c <HAL_OSPI_Transmit+0x26>

0800afc0 <HAL_OSPI_Receive>:
{
 800afc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	4604      	mov	r4, r0
 800afc8:	4688      	mov	r8, r1
 800afca:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800afcc:	f7fe f9b2 	bl	8009334 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800afd0:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 800afd2:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800afd4:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 800afd8:	f1b8 0f00 	cmp.w	r8, #0
 800afdc:	d00a      	beq.n	800aff4 <HAL_OSPI_Receive+0x34>
 800afde:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800afe0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d00a      	beq.n	800affc <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800afe6:	2310      	movs	r3, #16
 800afe8:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800afea:	2301      	movs	r3, #1
}
 800afec:	4618      	mov	r0, r3
 800afee:	b002      	add	sp, #8
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800aff4:	2308      	movs	r3, #8
 800aff6:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e7f7      	b.n	800afec <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800affc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800affe:	3301      	adds	r3, #1
 800b000:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800b002:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b004:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800b006:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b00a:	682b      	ldr	r3, [r5, #0]
 800b00c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800b010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b014:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b01c:	d007      	beq.n	800b02e <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800b024:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 800b028:	d02a      	beq.n	800b080 <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b02a:	649a      	str	r2, [r3, #72]	; 0x48
 800b02c:	e001      	b.n	800b032 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800b032:	9700      	str	r7, [sp, #0]
 800b034:	4633      	mov	r3, r6
 800b036:	2201      	movs	r2, #1
 800b038:	2106      	movs	r1, #6
 800b03a:	4620      	mov	r0, r4
 800b03c:	f7ff fed4 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b040:	4603      	mov	r3, r0
 800b042:	b960      	cbnz	r0, 800b05e <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b044:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b046:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 800b04a:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800b04c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b04e:	3101      	adds	r1, #1
 800b050:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800b052:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b054:	3901      	subs	r1, #1
 800b056:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800b058:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b05a:	2a00      	cmp	r2, #0
 800b05c:	d1e9      	bne.n	800b032 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1c4      	bne.n	800afec <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b062:	9700      	str	r7, [sp, #0]
 800b064:	4633      	mov	r3, r6
 800b066:	2201      	movs	r2, #1
 800b068:	2102      	movs	r1, #2
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7ff febc 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b070:	4603      	mov	r3, r0
 800b072:	2800      	cmp	r0, #0
 800b074:	d1ba      	bne.n	800afec <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b076:	6821      	ldr	r1, [r4, #0]
 800b078:	2202      	movs	r2, #2
 800b07a:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800b07c:	6522      	str	r2, [r4, #80]	; 0x50
 800b07e:	e7b5      	b.n	800afec <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b080:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 800b084:	e7d5      	b.n	800b032 <HAL_OSPI_Receive+0x72>

0800b086 <HAL_OSPI_AutoPolling>:
{
 800b086:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b08a:	b083      	sub	sp, #12
 800b08c:	4604      	mov	r4, r0
 800b08e:	460d      	mov	r5, r1
 800b090:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800b092:	f7fe f94f 	bl	8009334 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800b096:	6821      	ldr	r1, [r4, #0]
 800b098:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800b09a:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800b09e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b0a0:	2904      	cmp	r1, #4
 800b0a2:	d005      	beq.n	800b0b0 <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800b0a8:	2001      	movs	r0, #1
}
 800b0aa:	b003      	add	sp, #12
 800b0ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0b0:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800b0b2:	68eb      	ldr	r3, [r5, #12]
 800b0b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0b8:	d1f4      	bne.n	800b0a4 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b0ba:	f8cd 9000 	str.w	r9, [sp]
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2120      	movs	r1, #32
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f7ff fe8f 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d1ed      	bne.n	800b0aa <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	682a      	ldr	r2, [r5, #0]
 800b0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	686a      	ldr	r2, [r5, #4]
 800b0da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	692a      	ldr	r2, [r5, #16]
 800b0e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800b0e6:	6821      	ldr	r1, [r4, #0]
 800b0e8:	680b      	ldr	r3, [r1, #0]
 800b0ea:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800b0ee:	68aa      	ldr	r2, [r5, #8]
 800b0f0:	68e8      	ldr	r0, [r5, #12]
 800b0f2:	4302      	orrs	r2, r0
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0fa:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b0fc:	68e3      	ldr	r3, [r4, #12]
 800b0fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b102:	d007      	beq.n	800b114 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800b10a:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800b10e:	d013      	beq.n	800b138 <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b110:	649f      	str	r7, [r3, #72]	; 0x48
 800b112:	e001      	b.n	800b118 <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800b118:	f8cd 9000 	str.w	r9, [sp]
 800b11c:	4643      	mov	r3, r8
 800b11e:	2201      	movs	r2, #1
 800b120:	2108      	movs	r1, #8
 800b122:	4620      	mov	r0, r4
 800b124:	f7ff fe60 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b128:	2800      	cmp	r0, #0
 800b12a:	d1be      	bne.n	800b0aa <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	2208      	movs	r2, #8
 800b130:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800b132:	2302      	movs	r3, #2
 800b134:	6523      	str	r3, [r4, #80]	; 0x50
 800b136:	e7b8      	b.n	800b0aa <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b138:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 800b13c:	e7ec      	b.n	800b118 <HAL_OSPI_AutoPolling+0x92>
	...

0800b140 <HAL_OSPI_MemoryMapped>:
{
 800b140:	b530      	push	{r4, r5, lr}
 800b142:	b083      	sub	sp, #12
 800b144:	4604      	mov	r4, r0
 800b146:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800b148:	f7fe f8f4 	bl	8009334 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b14c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b14e:	2b04      	cmp	r3, #4
 800b150:	d004      	beq.n	800b15c <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b152:	2310      	movs	r3, #16
 800b154:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800b156:	2001      	movs	r0, #1
}
 800b158:	b003      	add	sp, #12
 800b15a:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b15c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	4603      	mov	r3, r0
 800b162:	2200      	movs	r2, #0
 800b164:	2120      	movs	r1, #32
 800b166:	4620      	mov	r0, r4
 800b168:	f7ff fe3e 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d1f3      	bne.n	800b158 <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800b170:	2388      	movs	r3, #136	; 0x88
 800b172:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	2b08      	cmp	r3, #8
 800b178:	d009      	beq.n	800b18e <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	6811      	ldr	r1, [r2, #0]
 800b17e:	4b0a      	ldr	r3, [pc, #40]	; (800b1a8 <HAL_OSPI_MemoryMapped+0x68>)
 800b180:	400b      	ands	r3, r1
 800b182:	6829      	ldr	r1, [r5, #0]
 800b184:	430b      	orrs	r3, r1
 800b186:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	e7e4      	b.n	800b158 <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	686a      	ldr	r2, [r5, #4]
 800b192:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	2210      	movs	r2, #16
 800b19a:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800b19c:	6822      	ldr	r2, [r4, #0]
 800b19e:	6813      	ldr	r3, [r2, #0]
 800b1a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	e7e8      	b.n	800b17a <HAL_OSPI_MemoryMapped+0x3a>
 800b1a8:	cffffff7 	.word	0xcffffff7

0800b1ac <HAL_OSPI_ErrorCallback>:
}
 800b1ac:	4770      	bx	lr

0800b1ae <HAL_OSPI_AbortCpltCallback>:
}
 800b1ae:	4770      	bx	lr

0800b1b0 <OSPI_DMAAbortCplt>:
{
 800b1b0:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800b1b2:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800b1b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1be:	d116      	bne.n	800b1ee <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b1c0:	6803      	ldr	r3, [r0, #0]
 800b1c2:	6a1a      	ldr	r2, [r3, #32]
 800b1c4:	f012 0f20 	tst.w	r2, #32
 800b1c8:	d00c      	beq.n	800b1e4 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800b1ce:	6802      	ldr	r2, [r0, #0]
 800b1d0:	6813      	ldr	r3, [r2, #0]
 800b1d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1d6:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b1d8:	6802      	ldr	r2, [r0, #0]
 800b1da:	6813      	ldr	r3, [r2, #0]
 800b1dc:	f043 0302 	orr.w	r3, r3, #2
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	e008      	b.n	800b1f6 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800b1e8:	f7ff ffe1 	bl	800b1ae <HAL_OSPI_AbortCpltCallback>
 800b1ec:	e003      	b.n	800b1f6 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800b1f2:	f7ff ffdb 	bl	800b1ac <HAL_OSPI_ErrorCallback>
}
 800b1f6:	bd08      	pop	{r3, pc}

0800b1f8 <HAL_OSPI_FifoThresholdCallback>:
}
 800b1f8:	4770      	bx	lr

0800b1fa <HAL_OSPI_CmdCpltCallback>:
}
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_OSPI_RxCpltCallback>:
}
 800b1fc:	4770      	bx	lr

0800b1fe <HAL_OSPI_TxCpltCallback>:
}
 800b1fe:	4770      	bx	lr

0800b200 <HAL_OSPI_StatusMatchCallback>:
}
 800b200:	4770      	bx	lr

0800b202 <HAL_OSPI_TimeOutCallback>:
}
 800b202:	4770      	bx	lr

0800b204 <HAL_OSPI_IRQHandler>:
{
 800b204:	b510      	push	{r4, lr}
 800b206:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b208:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 800b20a:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 800b20c:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 800b20e:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800b210:	f013 0f04 	tst.w	r3, #4
 800b214:	d027      	beq.n	800b266 <HAL_OSPI_IRQHandler+0x62>
 800b216:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800b21a:	d024      	beq.n	800b266 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800b21c:	2818      	cmp	r0, #24
 800b21e:	d00c      	beq.n	800b23a <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b220:	2828      	cmp	r0, #40	; 0x28
 800b222:	d015      	beq.n	800b250 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 800b224:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b226:	b923      	cbnz	r3, 800b232 <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800b228:	6822      	ldr	r2, [r4, #0]
 800b22a:	6813      	ldr	r3, [r2, #0]
 800b22c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b230:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 800b232:	4620      	mov	r0, r4
 800b234:	f7ff ffe0 	bl	800b1f8 <HAL_OSPI_FifoThresholdCallback>
}
 800b238:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800b23a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 800b242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b244:	3301      	adds	r3, #1
 800b246:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800b248:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b24a:	3b01      	subs	r3, #1
 800b24c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b24e:	e7e9      	b.n	800b224 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b250:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b252:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800b256:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800b258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b25a:	3301      	adds	r3, #1
 800b25c:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800b25e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b260:	3b01      	subs	r3, #1
 800b262:	64a3      	str	r3, [r4, #72]	; 0x48
 800b264:	e7de      	b.n	800b224 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800b266:	f013 0f02 	tst.w	r3, #2
 800b26a:	d044      	beq.n	800b2f6 <HAL_OSPI_IRQHandler+0xf2>
 800b26c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800b270:	d041      	beq.n	800b2f6 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b272:	2828      	cmp	r0, #40	; 0x28
 800b274:	d014      	beq.n	800b2a0 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800b276:	2102      	movs	r1, #2
 800b278:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800b27a:	6822      	ldr	r2, [r4, #0]
 800b27c:	6813      	ldr	r3, [r2, #0]
 800b27e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800b282:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800b284:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800b286:	2818      	cmp	r0, #24
 800b288:	d029      	beq.n	800b2de <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800b28a:	2808      	cmp	r0, #8
 800b28c:	d02b      	beq.n	800b2e6 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800b28e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b292:	d1d1      	bne.n	800b238 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800b294:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b296:	bb53      	cbnz	r3, 800b2ee <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 800b298:	4620      	mov	r0, r4
 800b29a:	f7ff ff88 	bl	800b1ae <HAL_OSPI_AbortCpltCallback>
 800b29e:	e7cb      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800b2a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b2a2:	b169      	cbz	r1, 800b2c0 <HAL_OSPI_IRQHandler+0xbc>
 800b2a4:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 800b2a8:	d00a      	beq.n	800b2c0 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b2aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2ac:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800b2b0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800b2b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 800b2b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	64a3      	str	r3, [r4, #72]	; 0x48
 800b2be:	e7bb      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 800b2c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1b8      	bne.n	800b238 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800b2ca:	6822      	ldr	r2, [r4, #0]
 800b2cc:	6813      	ldr	r3, [r2, #0]
 800b2ce:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800b2d2:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 800b2d4:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f7ff ff90 	bl	800b1fc <HAL_OSPI_RxCpltCallback>
 800b2dc:	e7ac      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f7ff ff8d 	bl	800b1fe <HAL_OSPI_TxCpltCallback>
 800b2e4:	e7a8      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f7ff ff87 	bl	800b1fa <HAL_OSPI_CmdCpltCallback>
 800b2ec:	e7a4      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff ff5c 	bl	800b1ac <HAL_OSPI_ErrorCallback>
 800b2f4:	e7a0      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800b2f6:	f013 0f08 	tst.w	r3, #8
 800b2fa:	d013      	beq.n	800b324 <HAL_OSPI_IRQHandler+0x120>
 800b2fc:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 800b300:	d010      	beq.n	800b324 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800b302:	2308      	movs	r3, #8
 800b304:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800b30e:	d005      	beq.n	800b31c <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b316:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800b318:	2302      	movs	r3, #2
 800b31a:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7ff ff6f 	bl	800b200 <HAL_OSPI_StatusMatchCallback>
 800b322:	e789      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800b324:	f013 0f01 	tst.w	r3, #1
 800b328:	d029      	beq.n	800b37e <HAL_OSPI_IRQHandler+0x17a>
 800b32a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800b32e:	d026      	beq.n	800b37e <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800b330:	2301      	movs	r3, #1
 800b332:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800b334:	6822      	ldr	r2, [r4, #0]
 800b336:	6813      	ldr	r3, [r2, #0]
 800b338:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b33c:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800b33e:	2302      	movs	r3, #2
 800b340:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	f012 0f04 	tst.w	r2, #4
 800b34a:	d012      	beq.n	800b372 <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	f022 0204 	bic.w	r2, r2, #4
 800b352:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800b354:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b356:	4a11      	ldr	r2, [pc, #68]	; (800b39c <HAL_OSPI_IRQHandler+0x198>)
 800b358:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800b35a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b35c:	f7ff fc4c 	bl	800abf8 <HAL_MDMA_Abort_IT>
 800b360:	2800      	cmp	r0, #0
 800b362:	f43f af69 	beq.w	800b238 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 800b366:	2302      	movs	r3, #2
 800b368:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 800b36a:	4620      	mov	r0, r4
 800b36c:	f7ff ff1e 	bl	800b1ac <HAL_OSPI_ErrorCallback>
 800b370:	e762      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 800b372:	2302      	movs	r3, #2
 800b374:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 800b376:	4620      	mov	r0, r4
 800b378:	f7ff ff18 	bl	800b1ac <HAL_OSPI_ErrorCallback>
 800b37c:	e75c      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800b37e:	f013 0f10 	tst.w	r3, #16
 800b382:	f43f af59 	beq.w	800b238 <HAL_OSPI_IRQHandler+0x34>
 800b386:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b38a:	f43f af55 	beq.w	800b238 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800b38e:	2310      	movs	r3, #16
 800b390:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 800b392:	4620      	mov	r0, r4
 800b394:	f7ff ff35 	bl	800b202 <HAL_OSPI_TimeOutCallback>
}
 800b398:	e74e      	b.n	800b238 <HAL_OSPI_IRQHandler+0x34>
 800b39a:	bf00      	nop
 800b39c:	0800b1b1 	.word	0x0800b1b1

0800b3a0 <HAL_OSPI_Abort>:
{
 800b3a0:	b530      	push	{r4, r5, lr}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b3a6:	f7fd ffc5 	bl	8009334 <HAL_GetTick>
  state = hospi->State;
 800b3aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800b3ac:	f012 0f0c 	tst.w	r2, #12
 800b3b0:	d036      	beq.n	800b420 <HAL_OSPI_Abort+0x80>
 800b3b2:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	f012 0f04 	tst.w	r2, #4
 800b3bc:	d108      	bne.n	800b3d0 <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800b3be:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	6a1a      	ldr	r2, [r3, #32]
 800b3c4:	f012 0f20 	tst.w	r2, #32
 800b3c8:	d10e      	bne.n	800b3e8 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	6523      	str	r3, [r4, #80]	; 0x50
 800b3ce:	e02a      	b.n	800b426 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	f022 0204 	bic.w	r2, r2, #4
 800b3d6:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 800b3d8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b3da:	f7ff fbcf 	bl	800ab7c <HAL_MDMA_Abort>
      if (status != HAL_OK)
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d0ee      	beq.n	800b3c0 <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800b3e2:	2304      	movs	r3, #4
 800b3e4:	6563      	str	r3, [r4, #84]	; 0x54
 800b3e6:	e7eb      	b.n	800b3c0 <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	f042 0202 	orr.w	r2, r2, #2
 800b3ee:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800b3f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	2102      	movs	r1, #2
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff fcf4 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b400:	b988      	cbnz	r0, 800b426 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	2202      	movs	r2, #2
 800b406:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	462b      	mov	r3, r5
 800b40e:	2200      	movs	r2, #0
 800b410:	2120      	movs	r1, #32
 800b412:	4620      	mov	r0, r4
 800b414:	f7ff fce8 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b418:	b928      	cbnz	r0, 800b426 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 800b41a:	2302      	movs	r3, #2
 800b41c:	6523      	str	r3, [r4, #80]	; 0x50
 800b41e:	e002      	b.n	800b426 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b420:	2310      	movs	r3, #16
 800b422:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800b424:	2001      	movs	r0, #1
}
 800b426:	b003      	add	sp, #12
 800b428:	bd30      	pop	{r4, r5, pc}

0800b42a <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 800b42a:	6581      	str	r1, [r0, #88]	; 0x58
}
 800b42c:	2000      	movs	r0, #0
 800b42e:	4770      	bx	lr

0800b430 <HAL_OSPI_Init>:
{
 800b430:	b530      	push	{r4, r5, lr}
 800b432:	b083      	sub	sp, #12
 800b434:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b436:	f7fd ff7d 	bl	8009334 <HAL_GetTick>
  if (hospi == NULL)
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d077      	beq.n	800b52e <HAL_OSPI_Init+0xfe>
 800b43e:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800b440:	2300      	movs	r3, #0
 800b442:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800b444:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b446:	b113      	cbz	r3, 800b44e <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 800b448:	2000      	movs	r0, #0
}
 800b44a:	b003      	add	sp, #12
 800b44c:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 800b44e:	4620      	mov	r0, r4
 800b450:	f7f7 fdfa 	bl	8003048 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800b454:	f241 3188 	movw	r1, #5000	; 0x1388
 800b458:	4620      	mov	r0, r4
 800b45a:	f7ff ffe6 	bl	800b42a <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800b45e:	6820      	ldr	r0, [r4, #0]
 800b460:	6882      	ldr	r2, [r0, #8]
 800b462:	4b34      	ldr	r3, [pc, #208]	; (800b534 <HAL_OSPI_Init+0x104>)
 800b464:	4013      	ands	r3, r2
 800b466:	68e2      	ldr	r2, [r4, #12]
 800b468:	6921      	ldr	r1, [r4, #16]
 800b46a:	3901      	subs	r1, #1
 800b46c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b470:	6961      	ldr	r1, [r4, #20]
 800b472:	3901      	subs	r1, #1
 800b474:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b47a:	430a      	orrs	r2, r1
 800b47c:	69e1      	ldr	r1, [r4, #28]
 800b47e:	430a      	orrs	r2, r1
 800b480:	4313      	orrs	r3, r2
 800b482:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800b484:	6822      	ldr	r2, [r4, #0]
 800b486:	68d3      	ldr	r3, [r2, #12]
 800b488:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800b48c:	6a21      	ldr	r1, [r4, #32]
 800b48e:	430b      	orrs	r3, r1
 800b490:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b492:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800b494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b49c:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b4a2:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800b4a4:	6821      	ldr	r1, [r4, #0]
 800b4a6:	680b      	ldr	r3, [r1, #0]
 800b4a8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800b4ac:	6862      	ldr	r2, [r4, #4]
 800b4ae:	3a01      	subs	r2, #1
 800b4b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b4b4:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b4b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	2200      	movs	r2, #0
 800b4be:	2120      	movs	r1, #32
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f7ff fc91 	bl	800ade8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d1bf      	bne.n	800b44a <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800b4ca:	6821      	ldr	r1, [r4, #0]
 800b4cc:	68cb      	ldr	r3, [r1, #12]
 800b4ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b4d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b4d4:	3a01      	subs	r2, #1
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800b4da:	6822      	ldr	r2, [r4, #0]
 800b4dc:	6813      	ldr	r3, [r2, #0]
 800b4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4e2:	68a1      	ldr	r1, [r4, #8]
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800b4e8:	6821      	ldr	r1, [r4, #0]
 800b4ea:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800b4ee:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 800b4f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b4f4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800b4f6:	432a      	orrs	r2, r5
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800b4fe:	6822      	ldr	r2, [r4, #0]
 800b500:	6813      	ldr	r3, [r2, #0]
 800b502:	f043 0301 	orr.w	r3, r3, #1
 800b506:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800b508:	69a3      	ldr	r3, [r4, #24]
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d006      	beq.n	800b51c <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b50e:	68e3      	ldr	r3, [r4, #12]
 800b510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b514:	d008      	beq.n	800b528 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 800b516:	2302      	movs	r3, #2
 800b518:	6523      	str	r3, [r4, #80]	; 0x50
 800b51a:	e796      	b.n	800b44a <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b51c:	6822      	ldr	r2, [r4, #0]
 800b51e:	6893      	ldr	r3, [r2, #8]
 800b520:	f043 0302 	orr.w	r3, r3, #2
 800b524:	6093      	str	r3, [r2, #8]
 800b526:	e7f2      	b.n	800b50e <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800b528:	2301      	movs	r3, #1
 800b52a:	6523      	str	r3, [r4, #80]	; 0x50
 800b52c:	e78d      	b.n	800b44a <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 800b52e:	2001      	movs	r0, #1
 800b530:	e78b      	b.n	800b44a <HAL_OSPI_Init+0x1a>
 800b532:	bf00      	nop
 800b534:	f8e0f8f4 	.word	0xf8e0f8f4

0800b538 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b53c:	4b22      	ldr	r3, [pc, #136]	; (800b5c8 <HAL_PWREx_ConfigSupply+0x90>)
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f003 0307 	and.w	r3, r3, #7
 800b544:	2b06      	cmp	r3, #6
 800b546:	d007      	beq.n	800b558 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b548:	4b1f      	ldr	r3, [pc, #124]	; (800b5c8 <HAL_PWREx_ConfigSupply+0x90>)
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b550:	4283      	cmp	r3, r0
 800b552:	d036      	beq.n	800b5c2 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b554:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800b556:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b558:	4a1b      	ldr	r2, [pc, #108]	; (800b5c8 <HAL_PWREx_ConfigSupply+0x90>)
 800b55a:	68d3      	ldr	r3, [r2, #12]
 800b55c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b560:	4303      	orrs	r3, r0
 800b562:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800b564:	f7fd fee6 	bl	8009334 <HAL_GetTick>
 800b568:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b56a:	4b17      	ldr	r3, [pc, #92]	; (800b5c8 <HAL_PWREx_ConfigSupply+0x90>)
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b572:	d107      	bne.n	800b584 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b574:	f7fd fede 	bl	8009334 <HAL_GetTick>
 800b578:	1b43      	subs	r3, r0, r5
 800b57a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b57e:	d9f4      	bls.n	800b56a <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 800b580:	2001      	movs	r0, #1
 800b582:	e7e8      	b.n	800b556 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b584:	2c2e      	cmp	r4, #46	; 0x2e
 800b586:	bf18      	it	ne
 800b588:	2c1e      	cmpne	r4, #30
 800b58a:	d008      	beq.n	800b59e <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800b58c:	2c2d      	cmp	r4, #45	; 0x2d
 800b58e:	bf14      	ite	ne
 800b590:	2300      	movne	r3, #0
 800b592:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b594:	2c1d      	cmp	r4, #29
 800b596:	d002      	beq.n	800b59e <HAL_PWREx_ConfigSupply+0x66>
 800b598:	b90b      	cbnz	r3, 800b59e <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 800b59a:	2000      	movs	r0, #0
 800b59c:	e7db      	b.n	800b556 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 800b59e:	f7fd fec9 	bl	8009334 <HAL_GetTick>
 800b5a2:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b5a4:	4b08      	ldr	r3, [pc, #32]	; (800b5c8 <HAL_PWREx_ConfigSupply+0x90>)
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b5ac:	d107      	bne.n	800b5be <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b5ae:	f7fd fec1 	bl	8009334 <HAL_GetTick>
 800b5b2:	1b00      	subs	r0, r0, r4
 800b5b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b5b8:	d9f4      	bls.n	800b5a4 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 800b5ba:	2001      	movs	r0, #1
 800b5bc:	e7cb      	b.n	800b556 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 800b5be:	2000      	movs	r0, #0
 800b5c0:	e7c9      	b.n	800b556 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	e7c7      	b.n	800b556 <HAL_PWREx_ConfigSupply+0x1e>
 800b5c6:	bf00      	nop
 800b5c8:	58024800 	.word	0x58024800

0800b5cc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	f000 82f0 	beq.w	800bbb2 <HAL_RCC_OscConfig+0x5e6>
{
 800b5d2:	b538      	push	{r3, r4, r5, lr}
 800b5d4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b5d6:	6803      	ldr	r3, [r0, #0]
 800b5d8:	f013 0f01 	tst.w	r3, #1
 800b5dc:	d029      	beq.n	800b632 <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5de:	4aa1      	ldr	r2, [pc, #644]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b5e0:	6913      	ldr	r3, [r2, #16]
 800b5e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b5e8:	2b10      	cmp	r3, #16
 800b5ea:	d019      	beq.n	800b620 <HAL_RCC_OscConfig+0x54>
 800b5ec:	2b18      	cmp	r3, #24
 800b5ee:	d013      	beq.n	800b618 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5f0:	6863      	ldr	r3, [r4, #4]
 800b5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f6:	d043      	beq.n	800b680 <HAL_RCC_OscConfig+0xb4>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d158      	bne.n	800b6ae <HAL_RCC_OscConfig+0xe2>
 800b5fc:	4b99      	ldr	r3, [pc, #612]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b604:	601a      	str	r2, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	e038      	b.n	800b68a <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b618:	f002 0203 	and.w	r2, r2, #3
 800b61c:	2a02      	cmp	r2, #2
 800b61e:	d1e7      	bne.n	800b5f0 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b620:	4b90      	ldr	r3, [pc, #576]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b628:	d003      	beq.n	800b632 <HAL_RCC_OscConfig+0x66>
 800b62a:	6863      	ldr	r3, [r4, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 82c2 	beq.w	800bbb6 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	f013 0f02 	tst.w	r3, #2
 800b638:	f000 80a2 	beq.w	800b780 <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b63c:	4a89      	ldr	r2, [pc, #548]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b63e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b640:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b642:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800b646:	d074      	beq.n	800b732 <HAL_RCC_OscConfig+0x166>
 800b648:	2b18      	cmp	r3, #24
 800b64a:	d06f      	beq.n	800b72c <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b64c:	68e3      	ldr	r3, [r4, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 80c3 	beq.w	800b7da <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b654:	4983      	ldr	r1, [pc, #524]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b656:	680a      	ldr	r2, [r1, #0]
 800b658:	f022 0219 	bic.w	r2, r2, #25
 800b65c:	4313      	orrs	r3, r2
 800b65e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b660:	f7fd fe68 	bl	8009334 <HAL_GetTick>
 800b664:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b666:	4b7f      	ldr	r3, [pc, #508]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f013 0f04 	tst.w	r3, #4
 800b66e:	f040 80ab 	bne.w	800b7c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b672:	f7fd fe5f 	bl	8009334 <HAL_GetTick>
 800b676:	1b40      	subs	r0, r0, r5
 800b678:	2802      	cmp	r0, #2
 800b67a:	d9f4      	bls.n	800b666 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 800b67c:	2003      	movs	r0, #3
 800b67e:	e2a1      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b680:	4a78      	ldr	r2, [pc, #480]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b682:	6813      	ldr	r3, [r2, #0]
 800b684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b688:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b68a:	6863      	ldr	r3, [r4, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d03e      	beq.n	800b70e <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 800b690:	f7fd fe50 	bl	8009334 <HAL_GetTick>
 800b694:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b696:	4b73      	ldr	r3, [pc, #460]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b69e:	d1c8      	bne.n	800b632 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b6a0:	f7fd fe48 	bl	8009334 <HAL_GetTick>
 800b6a4:	1b40      	subs	r0, r0, r5
 800b6a6:	2864      	cmp	r0, #100	; 0x64
 800b6a8:	d9f5      	bls.n	800b696 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800b6aa:	2003      	movs	r0, #3
 800b6ac:	e28a      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b6b2:	d010      	beq.n	800b6d6 <HAL_RCC_OscConfig+0x10a>
 800b6b4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800b6b8:	d01b      	beq.n	800b6f2 <HAL_RCC_OscConfig+0x126>
 800b6ba:	4b6a      	ldr	r3, [pc, #424]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e7d9      	b.n	800b68a <HAL_RCC_OscConfig+0xbe>
 800b6d6:	4b63      	ldr	r3, [pc, #396]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	e7cb      	b.n	800b68a <HAL_RCC_OscConfig+0xbe>
 800b6f2:	4b5c      	ldr	r3, [pc, #368]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	e7bd      	b.n	800b68a <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800b70e:	f7fd fe11 	bl	8009334 <HAL_GetTick>
 800b712:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b714:	4b53      	ldr	r3, [pc, #332]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b71c:	d089      	beq.n	800b632 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b71e:	f7fd fe09 	bl	8009334 <HAL_GetTick>
 800b722:	1b40      	subs	r0, r0, r5
 800b724:	2864      	cmp	r0, #100	; 0x64
 800b726:	d9f5      	bls.n	800b714 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 800b728:	2003      	movs	r0, #3
 800b72a:	e24b      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b72c:	f012 0f03 	tst.w	r2, #3
 800b730:	d18c      	bne.n	800b64c <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b732:	4b4c      	ldr	r3, [pc, #304]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f013 0f04 	tst.w	r3, #4
 800b73a:	d003      	beq.n	800b744 <HAL_RCC_OscConfig+0x178>
 800b73c:	68e3      	ldr	r3, [r4, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 823b 	beq.w	800bbba <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b744:	4a47      	ldr	r2, [pc, #284]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b746:	6813      	ldr	r3, [r2, #0]
 800b748:	f023 0319 	bic.w	r3, r3, #25
 800b74c:	68e1      	ldr	r1, [r4, #12]
 800b74e:	430b      	orrs	r3, r1
 800b750:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 800b752:	f7fd fdef 	bl	8009334 <HAL_GetTick>
 800b756:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b758:	4b42      	ldr	r3, [pc, #264]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f013 0f04 	tst.w	r3, #4
 800b760:	d106      	bne.n	800b770 <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b762:	f7fd fde7 	bl	8009334 <HAL_GetTick>
 800b766:	1b40      	subs	r0, r0, r5
 800b768:	2802      	cmp	r0, #2
 800b76a:	d9f5      	bls.n	800b758 <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 800b76c:	2003      	movs	r0, #3
 800b76e:	e229      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b770:	4a3c      	ldr	r2, [pc, #240]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b772:	6853      	ldr	r3, [r2, #4]
 800b774:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b778:	6921      	ldr	r1, [r4, #16]
 800b77a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b77e:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	f013 0f10 	tst.w	r3, #16
 800b786:	d051      	beq.n	800b82c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b788:	4a36      	ldr	r2, [pc, #216]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b78a:	6913      	ldr	r3, [r2, #16]
 800b78c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b790:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b792:	2b08      	cmp	r3, #8
 800b794:	d039      	beq.n	800b80a <HAL_RCC_OscConfig+0x23e>
 800b796:	2b18      	cmp	r3, #24
 800b798:	d033      	beq.n	800b802 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b79a:	69e3      	ldr	r3, [r4, #28]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d06c      	beq.n	800b87a <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b7a0:	4a30      	ldr	r2, [pc, #192]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b7a2:	6813      	ldr	r3, [r2, #0]
 800b7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7aa:	f7fd fdc3 	bl	8009334 <HAL_GetTick>
 800b7ae:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7b0:	4b2c      	ldr	r3, [pc, #176]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b7b8:	d156      	bne.n	800b868 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b7ba:	f7fd fdbb 	bl	8009334 <HAL_GetTick>
 800b7be:	1b40      	subs	r0, r0, r5
 800b7c0:	2802      	cmp	r0, #2
 800b7c2:	d9f5      	bls.n	800b7b0 <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 800b7c4:	2003      	movs	r0, #3
 800b7c6:	e1fd      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7c8:	4a26      	ldr	r2, [pc, #152]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b7ca:	6853      	ldr	r3, [r2, #4]
 800b7cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b7d0:	6921      	ldr	r1, [r4, #16]
 800b7d2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b7d6:	6053      	str	r3, [r2, #4]
 800b7d8:	e7d2      	b.n	800b780 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 800b7da:	4a22      	ldr	r2, [pc, #136]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b7dc:	6813      	ldr	r3, [r2, #0]
 800b7de:	f023 0301 	bic.w	r3, r3, #1
 800b7e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b7e4:	f7fd fda6 	bl	8009334 <HAL_GetTick>
 800b7e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b7ea:	4b1e      	ldr	r3, [pc, #120]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f013 0f04 	tst.w	r3, #4
 800b7f2:	d0c5      	beq.n	800b780 <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b7f4:	f7fd fd9e 	bl	8009334 <HAL_GetTick>
 800b7f8:	1b40      	subs	r0, r0, r5
 800b7fa:	2802      	cmp	r0, #2
 800b7fc:	d9f5      	bls.n	800b7ea <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 800b7fe:	2003      	movs	r0, #3
 800b800:	e1e0      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b802:	f002 0203 	and.w	r2, r2, #3
 800b806:	2a01      	cmp	r2, #1
 800b808:	d1c7      	bne.n	800b79a <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b80a:	4b16      	ldr	r3, [pc, #88]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b812:	d003      	beq.n	800b81c <HAL_RCC_OscConfig+0x250>
 800b814:	69e3      	ldr	r3, [r4, #28]
 800b816:	2b80      	cmp	r3, #128	; 0x80
 800b818:	f040 81d1 	bne.w	800bbbe <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b81c:	4a11      	ldr	r2, [pc, #68]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b81e:	68d3      	ldr	r3, [r2, #12]
 800b820:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b824:	6a21      	ldr	r1, [r4, #32]
 800b826:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b82a:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	f013 0f08 	tst.w	r3, #8
 800b832:	d04a      	beq.n	800b8ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b834:	6963      	ldr	r3, [r4, #20]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d033      	beq.n	800b8a2 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b83a:	4a0a      	ldr	r2, [pc, #40]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b83c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800b83e:	f043 0301 	orr.w	r3, r3, #1
 800b842:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b844:	f7fd fd76 	bl	8009334 <HAL_GetTick>
 800b848:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b84a:	4b06      	ldr	r3, [pc, #24]	; (800b864 <HAL_RCC_OscConfig+0x298>)
 800b84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b84e:	f013 0f02 	tst.w	r3, #2
 800b852:	d13a      	bne.n	800b8ca <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b854:	f7fd fd6e 	bl	8009334 <HAL_GetTick>
 800b858:	1b40      	subs	r0, r0, r5
 800b85a:	2802      	cmp	r0, #2
 800b85c:	d9f5      	bls.n	800b84a <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 800b85e:	2003      	movs	r0, #3
 800b860:	e1b0      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800b862:	bf00      	nop
 800b864:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b868:	4a8c      	ldr	r2, [pc, #560]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b86a:	68d3      	ldr	r3, [r2, #12]
 800b86c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b870:	6a21      	ldr	r1, [r4, #32]
 800b872:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b876:	60d3      	str	r3, [r2, #12]
 800b878:	e7d8      	b.n	800b82c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 800b87a:	4a88      	ldr	r2, [pc, #544]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b87c:	6813      	ldr	r3, [r2, #0]
 800b87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b882:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b884:	f7fd fd56 	bl	8009334 <HAL_GetTick>
 800b888:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b88a:	4b84      	ldr	r3, [pc, #528]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b892:	d0cb      	beq.n	800b82c <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b894:	f7fd fd4e 	bl	8009334 <HAL_GetTick>
 800b898:	1b40      	subs	r0, r0, r5
 800b89a:	2802      	cmp	r0, #2
 800b89c:	d9f5      	bls.n	800b88a <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 800b89e:	2003      	movs	r0, #3
 800b8a0:	e190      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b8a2:	4a7e      	ldr	r2, [pc, #504]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b8a4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8ac:	f7fd fd42 	bl	8009334 <HAL_GetTick>
 800b8b0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b8b2:	4b7a      	ldr	r3, [pc, #488]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b6:	f013 0f02 	tst.w	r3, #2
 800b8ba:	d006      	beq.n	800b8ca <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8bc:	f7fd fd3a 	bl	8009334 <HAL_GetTick>
 800b8c0:	1b40      	subs	r0, r0, r5
 800b8c2:	2802      	cmp	r0, #2
 800b8c4:	d9f5      	bls.n	800b8b2 <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 800b8c6:	2003      	movs	r0, #3
 800b8c8:	e17c      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	f013 0f20 	tst.w	r3, #32
 800b8d0:	d029      	beq.n	800b926 <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b8d2:	69a3      	ldr	r3, [r4, #24]
 800b8d4:	b19b      	cbz	r3, 800b8fe <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b8d6:	4a71      	ldr	r2, [pc, #452]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b8d8:	6813      	ldr	r3, [r2, #0]
 800b8da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b8de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b8e0:	f7fd fd28 	bl	8009334 <HAL_GetTick>
 800b8e4:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b8e6:	4b6d      	ldr	r3, [pc, #436]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b8ee:	d11a      	bne.n	800b926 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b8f0:	f7fd fd20 	bl	8009334 <HAL_GetTick>
 800b8f4:	1b40      	subs	r0, r0, r5
 800b8f6:	2802      	cmp	r0, #2
 800b8f8:	d9f5      	bls.n	800b8e6 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 800b8fa:	2003      	movs	r0, #3
 800b8fc:	e162      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b8fe:	4a67      	ldr	r2, [pc, #412]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b900:	6813      	ldr	r3, [r2, #0]
 800b902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b906:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b908:	f7fd fd14 	bl	8009334 <HAL_GetTick>
 800b90c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b90e:	4b63      	ldr	r3, [pc, #396]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b916:	d006      	beq.n	800b926 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b918:	f7fd fd0c 	bl	8009334 <HAL_GetTick>
 800b91c:	1b40      	subs	r0, r0, r5
 800b91e:	2802      	cmp	r0, #2
 800b920:	d9f5      	bls.n	800b90e <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 800b922:	2003      	movs	r0, #3
 800b924:	e14e      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	f013 0f04 	tst.w	r3, #4
 800b92c:	d122      	bne.n	800b974 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 8146 	beq.w	800bbc2 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b936:	4a59      	ldr	r2, [pc, #356]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b938:	6912      	ldr	r2, [r2, #16]
 800b93a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800b93e:	2a18      	cmp	r2, #24
 800b940:	f000 810e 	beq.w	800bb60 <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b944:	2b02      	cmp	r3, #2
 800b946:	f000 8094 	beq.w	800ba72 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b94a:	4a54      	ldr	r2, [pc, #336]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b94c:	6813      	ldr	r3, [r2, #0]
 800b94e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b954:	f7fd fcee 	bl	8009334 <HAL_GetTick>
 800b958:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b95a:	4b50      	ldr	r3, [pc, #320]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b962:	f000 80fb 	beq.w	800bb5c <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b966:	f7fd fce5 	bl	8009334 <HAL_GetTick>
 800b96a:	1b00      	subs	r0, r0, r4
 800b96c:	2802      	cmp	r0, #2
 800b96e:	d9f4      	bls.n	800b95a <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 800b970:	2003      	movs	r0, #3
 800b972:	e127      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 800b974:	4a4a      	ldr	r2, [pc, #296]	; (800baa0 <HAL_RCC_OscConfig+0x4d4>)
 800b976:	6813      	ldr	r3, [r2, #0]
 800b978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b97c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800b97e:	f7fd fcd9 	bl	8009334 <HAL_GetTick>
 800b982:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b984:	4b46      	ldr	r3, [pc, #280]	; (800baa0 <HAL_RCC_OscConfig+0x4d4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b98c:	d106      	bne.n	800b99c <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b98e:	f7fd fcd1 	bl	8009334 <HAL_GetTick>
 800b992:	1b40      	subs	r0, r0, r5
 800b994:	2864      	cmp	r0, #100	; 0x64
 800b996:	d9f5      	bls.n	800b984 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 800b998:	2003      	movs	r0, #3
 800b99a:	e113      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b99c:	68a3      	ldr	r3, [r4, #8]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d00e      	beq.n	800b9c0 <HAL_RCC_OscConfig+0x3f4>
 800b9a2:	bb33      	cbnz	r3, 800b9f2 <HAL_RCC_OscConfig+0x426>
 800b9a4:	4b3d      	ldr	r3, [pc, #244]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b9a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9a8:	f022 0201 	bic.w	r2, r2, #1
 800b9ac:	671a      	str	r2, [r3, #112]	; 0x70
 800b9ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9b4:	671a      	str	r2, [r3, #112]	; 0x70
 800b9b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9b8:	f022 0204 	bic.w	r2, r2, #4
 800b9bc:	671a      	str	r2, [r3, #112]	; 0x70
 800b9be:	e004      	b.n	800b9ca <HAL_RCC_OscConfig+0x3fe>
 800b9c0:	4a36      	ldr	r2, [pc, #216]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b9c2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b9c4:	f043 0301 	orr.w	r3, r3, #1
 800b9c8:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b9ca:	68a3      	ldr	r3, [r4, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d03e      	beq.n	800ba4e <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 800b9d0:	f7fd fcb0 	bl	8009334 <HAL_GetTick>
 800b9d4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9d6:	4b31      	ldr	r3, [pc, #196]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9da:	f013 0f02 	tst.w	r3, #2
 800b9de:	d1a6      	bne.n	800b92e <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9e0:	f7fd fca8 	bl	8009334 <HAL_GetTick>
 800b9e4:	1b40      	subs	r0, r0, r5
 800b9e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b9ea:	4298      	cmp	r0, r3
 800b9ec:	d9f3      	bls.n	800b9d6 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800b9ee:	2003      	movs	r0, #3
 800b9f0:	e0e8      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9f2:	2b05      	cmp	r3, #5
 800b9f4:	d00f      	beq.n	800ba16 <HAL_RCC_OscConfig+0x44a>
 800b9f6:	2b85      	cmp	r3, #133	; 0x85
 800b9f8:	d01b      	beq.n	800ba32 <HAL_RCC_OscConfig+0x466>
 800b9fa:	4b28      	ldr	r3, [pc, #160]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800b9fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9fe:	f022 0201 	bic.w	r2, r2, #1
 800ba02:	671a      	str	r2, [r3, #112]	; 0x70
 800ba04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba06:	f022 0204 	bic.w	r2, r2, #4
 800ba0a:	671a      	str	r2, [r3, #112]	; 0x70
 800ba0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba12:	671a      	str	r2, [r3, #112]	; 0x70
 800ba14:	e7d9      	b.n	800b9ca <HAL_RCC_OscConfig+0x3fe>
 800ba16:	4b21      	ldr	r3, [pc, #132]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800ba18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba1a:	f042 0204 	orr.w	r2, r2, #4
 800ba1e:	671a      	str	r2, [r3, #112]	; 0x70
 800ba20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba26:	671a      	str	r2, [r3, #112]	; 0x70
 800ba28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba2a:	f042 0201 	orr.w	r2, r2, #1
 800ba2e:	671a      	str	r2, [r3, #112]	; 0x70
 800ba30:	e7cb      	b.n	800b9ca <HAL_RCC_OscConfig+0x3fe>
 800ba32:	4b1a      	ldr	r3, [pc, #104]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800ba34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba36:	f042 0204 	orr.w	r2, r2, #4
 800ba3a:	671a      	str	r2, [r3, #112]	; 0x70
 800ba3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba42:	671a      	str	r2, [r3, #112]	; 0x70
 800ba44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba46:	f042 0201 	orr.w	r2, r2, #1
 800ba4a:	671a      	str	r2, [r3, #112]	; 0x70
 800ba4c:	e7bd      	b.n	800b9ca <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 800ba4e:	f7fd fc71 	bl	8009334 <HAL_GetTick>
 800ba52:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ba54:	4b11      	ldr	r3, [pc, #68]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800ba56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba58:	f013 0f02 	tst.w	r3, #2
 800ba5c:	f43f af67 	beq.w	800b92e <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba60:	f7fd fc68 	bl	8009334 <HAL_GetTick>
 800ba64:	1b40      	subs	r0, r0, r5
 800ba66:	f241 3388 	movw	r3, #5000	; 0x1388
 800ba6a:	4298      	cmp	r0, r3
 800ba6c:	d9f2      	bls.n	800ba54 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 800ba6e:	2003      	movs	r0, #3
 800ba70:	e0a8      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 800ba72:	4a0a      	ldr	r2, [pc, #40]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800ba74:	6813      	ldr	r3, [r2, #0]
 800ba76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba7a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ba7c:	f7fd fc5a 	bl	8009334 <HAL_GetTick>
 800ba80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba82:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <HAL_RCC_OscConfig+0x4d0>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ba8a:	d00b      	beq.n	800baa4 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba8c:	f7fd fc52 	bl	8009334 <HAL_GetTick>
 800ba90:	1b40      	subs	r0, r0, r5
 800ba92:	2802      	cmp	r0, #2
 800ba94:	d9f5      	bls.n	800ba82 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800ba96:	2003      	movs	r0, #3
 800ba98:	e094      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800ba9a:	bf00      	nop
 800ba9c:	58024400 	.word	0x58024400
 800baa0:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800baa4:	4b4f      	ldr	r3, [pc, #316]	; (800bbe4 <HAL_RCC_OscConfig+0x618>)
 800baa6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800baa8:	4a4f      	ldr	r2, [pc, #316]	; (800bbe8 <HAL_RCC_OscConfig+0x61c>)
 800baaa:	400a      	ands	r2, r1
 800baac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800baae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bab0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800bab4:	430a      	orrs	r2, r1
 800bab6:	629a      	str	r2, [r3, #40]	; 0x28
 800bab8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800baba:	3a01      	subs	r2, #1
 800babc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bac2:	3901      	subs	r1, #1
 800bac4:	0249      	lsls	r1, r1, #9
 800bac6:	b289      	uxth	r1, r1
 800bac8:	430a      	orrs	r2, r1
 800baca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bacc:	3901      	subs	r1, #1
 800bace:	0409      	lsls	r1, r1, #16
 800bad0:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800bad4:	430a      	orrs	r2, r1
 800bad6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bad8:	3901      	subs	r1, #1
 800bada:	0609      	lsls	r1, r1, #24
 800badc:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800bae0:	430a      	orrs	r2, r1
 800bae2:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800bae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae6:	f022 0201 	bic.w	r2, r2, #1
 800baea:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800baec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800baee:	4a3f      	ldr	r2, [pc, #252]	; (800bbec <HAL_RCC_OscConfig+0x620>)
 800baf0:	400a      	ands	r2, r1
 800baf2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800baf4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800baf8:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafc:	f022 020c 	bic.w	r2, r2, #12
 800bb00:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb02:	430a      	orrs	r2, r1
 800bb04:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb08:	f022 0202 	bic.w	r2, r2, #2
 800bb0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bb18:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bb20:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb24:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800bb28:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800bb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2c:	f042 0201 	orr.w	r2, r2, #1
 800bb30:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800bb38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800bb3a:	f7fd fbfb 	bl	8009334 <HAL_GetTick>
 800bb3e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb40:	4b28      	ldr	r3, [pc, #160]	; (800bbe4 <HAL_RCC_OscConfig+0x618>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800bb48:	d106      	bne.n	800bb58 <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb4a:	f7fd fbf3 	bl	8009334 <HAL_GetTick>
 800bb4e:	1b00      	subs	r0, r0, r4
 800bb50:	2802      	cmp	r0, #2
 800bb52:	d9f5      	bls.n	800bb40 <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 800bb54:	2003      	movs	r0, #3
 800bb56:	e035      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e033      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	e031      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bb60:	4920      	ldr	r1, [pc, #128]	; (800bbe4 <HAL_RCC_OscConfig+0x618>)
 800bb62:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bb64:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d02d      	beq.n	800bbc6 <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb6a:	f002 0303 	and.w	r3, r2, #3
 800bb6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb70:	428b      	cmp	r3, r1
 800bb72:	d12a      	bne.n	800bbca <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb74:	f3c2 1205 	ubfx	r2, r2, #4, #6
 800bb78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d127      	bne.n	800bbce <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bb7e:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800bb82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bb84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d123      	bne.n	800bbd2 <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bb8a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800bb8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb90:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d11f      	bne.n	800bbd6 <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bb96:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800bb9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d11b      	bne.n	800bbda <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bba2:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800bba6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bba8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bbaa:	4298      	cmp	r0, r3
 800bbac:	d117      	bne.n	800bbde <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 800bbae:	2000      	movs	r0, #0
 800bbb0:	e008      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 800bbb2:	2001      	movs	r0, #1
}
 800bbb4:	4770      	bx	lr
        return HAL_ERROR;
 800bbb6:	2001      	movs	r0, #1
 800bbb8:	e004      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800bbba:	2001      	movs	r0, #1
 800bbbc:	e002      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	e000      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 800bbc2:	2000      	movs	r0, #0
}
 800bbc4:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	e7fc      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800bbca:	2001      	movs	r0, #1
 800bbcc:	e7fa      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800bbce:	2001      	movs	r0, #1
 800bbd0:	e7f8      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	e7f6      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	e7f4      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800bbda:	2001      	movs	r0, #1
 800bbdc:	e7f2      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800bbde:	2001      	movs	r0, #1
 800bbe0:	e7f0      	b.n	800bbc4 <HAL_RCC_OscConfig+0x5f8>
 800bbe2:	bf00      	nop
 800bbe4:	58024400 	.word	0x58024400
 800bbe8:	fffffc0c 	.word	0xfffffc0c
 800bbec:	ffff0007 	.word	0xffff0007

0800bbf0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bbf0:	4b74      	ldr	r3, [pc, #464]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbf8:	2b10      	cmp	r3, #16
 800bbfa:	f000 80de 	beq.w	800bdba <HAL_RCC_GetSysClockFreq+0x1ca>
 800bbfe:	2b18      	cmp	r3, #24
 800bc00:	d010      	beq.n	800bc24 <HAL_RCC_GetSysClockFreq+0x34>
 800bc02:	b10b      	cbz	r3, 800bc08 <HAL_RCC_GetSysClockFreq+0x18>
 800bc04:	4870      	ldr	r0, [pc, #448]	; (800bdc8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800bc06:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc08:	4b6e      	ldr	r3, [pc, #440]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f013 0f20 	tst.w	r3, #32
 800bc10:	f000 80d5 	beq.w	800bdbe <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc14:	4b6b      	ldr	r3, [pc, #428]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800bc1c:	4b6b      	ldr	r3, [pc, #428]	; (800bdcc <HAL_RCC_GetSysClockFreq+0x1dc>)
 800bc1e:	fa23 f000 	lsr.w	r0, r3, r0
 800bc22:	4770      	bx	lr
{
 800bc24:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc26:	4a67      	ldr	r2, [pc, #412]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bc28:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bc2a:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bc2e:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800bc30:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bc34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bc36:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bc3a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800bc3c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800bc40:	fb0c f303 	mul.w	r3, ip, r3
 800bc44:	ee07 3a90 	vmov	s15, r3
 800bc48:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 800bc4c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800bc50:	f000 8093 	beq.w	800bd7a <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 800bc54:	2901      	cmp	r1, #1
 800bc56:	d065      	beq.n	800bd24 <HAL_RCC_GetSysClockFreq+0x134>
 800bc58:	2902      	cmp	r1, #2
 800bc5a:	f000 8091 	beq.w	800bd80 <HAL_RCC_GetSysClockFreq+0x190>
 800bc5e:	b1e1      	cbz	r1, 800bc9a <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc60:	ee07 0a10 	vmov	s14, r0
 800bc64:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bc68:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800bdd0 <HAL_RCC_GetSysClockFreq+0x1e0>
 800bc6c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bc70:	4b54      	ldr	r3, [pc, #336]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc78:	ee06 3a90 	vmov	s13, r3
 800bc7c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bc80:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800bdd4 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bc84:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bc88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc94:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800bc98:	e060      	b.n	800bd5c <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	f013 0f20 	tst.w	r3, #32
 800bca0:	d023      	beq.n	800bcea <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bca2:	4611      	mov	r1, r2
 800bca4:	6812      	ldr	r2, [r2, #0]
 800bca6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800bcaa:	4b48      	ldr	r3, [pc, #288]	; (800bdcc <HAL_RCC_GetSysClockFreq+0x1dc>)
 800bcac:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcae:	ee07 3a10 	vmov	s14, r3
 800bcb2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bcb6:	ee07 0a10 	vmov	s14, r0
 800bcba:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800bcbe:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800bcc2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800bcc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc8:	ee06 3a90 	vmov	s13, r3
 800bccc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bcd0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800bdd4 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bcd4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bcd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bce8:	e038      	b.n	800bd5c <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcea:	ee07 0a10 	vmov	s14, r0
 800bcee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bcf2:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800bdd8 <HAL_RCC_GetSysClockFreq+0x1e8>
 800bcf6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bcfa:	4b32      	ldr	r3, [pc, #200]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd02:	ee06 3a90 	vmov	s13, r3
 800bd06:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bd0a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800bdd4 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bd0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd22:	e01b      	b.n	800bd5c <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd24:	ee07 0a10 	vmov	s14, r0
 800bd28:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bd2c:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800bdd0 <HAL_RCC_GetSysClockFreq+0x1e0>
 800bd30:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bd34:	4b23      	ldr	r3, [pc, #140]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd3c:	ee06 3a90 	vmov	s13, r3
 800bd40:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bd44:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800bdd4 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bd48:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bd4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd58:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bd5c:	4b19      	ldr	r3, [pc, #100]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd60:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bd64:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bd72:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800bd76:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800bd7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd7e:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd80:	ee07 0a10 	vmov	s14, r0
 800bd84:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bd88:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800bddc <HAL_RCC_GetSysClockFreq+0x1ec>
 800bd8c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bd90:	4b0c      	ldr	r3, [pc, #48]	; (800bdc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd98:	ee06 3a90 	vmov	s13, r3
 800bd9c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bda0:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800bdd4 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bda4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bda8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdb4:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800bdb8:	e7d0      	b.n	800bd5c <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800bdba:	4809      	ldr	r0, [pc, #36]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800bdbc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bdbe:	4803      	ldr	r0, [pc, #12]	; (800bdcc <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	58024400 	.word	0x58024400
 800bdc8:	003d0900 	.word	0x003d0900
 800bdcc:	03d09000 	.word	0x03d09000
 800bdd0:	4a742400 	.word	0x4a742400
 800bdd4:	39000000 	.word	0x39000000
 800bdd8:	4c742400 	.word	0x4c742400
 800bddc:	4bb71b00 	.word	0x4bb71b00
 800bde0:	016e3600 	.word	0x016e3600

0800bde4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f000 8132 	beq.w	800c04e <HAL_RCC_ClockConfig+0x26a>
{
 800bdea:	b570      	push	{r4, r5, r6, lr}
 800bdec:	460d      	mov	r5, r1
 800bdee:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bdf0:	4b9b      	ldr	r3, [pc, #620]	; (800c060 <HAL_RCC_ClockConfig+0x27c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 030f 	and.w	r3, r3, #15
 800bdf8:	428b      	cmp	r3, r1
 800bdfa:	d20b      	bcs.n	800be14 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdfc:	4a98      	ldr	r2, [pc, #608]	; (800c060 <HAL_RCC_ClockConfig+0x27c>)
 800bdfe:	6813      	ldr	r3, [r2, #0]
 800be00:	f023 030f 	bic.w	r3, r3, #15
 800be04:	430b      	orrs	r3, r1
 800be06:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be08:	6813      	ldr	r3, [r2, #0]
 800be0a:	f003 030f 	and.w	r3, r3, #15
 800be0e:	428b      	cmp	r3, r1
 800be10:	f040 811f 	bne.w	800c052 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be14:	6823      	ldr	r3, [r4, #0]
 800be16:	f013 0f04 	tst.w	r3, #4
 800be1a:	d00c      	beq.n	800be36 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800be1c:	6922      	ldr	r2, [r4, #16]
 800be1e:	4b91      	ldr	r3, [pc, #580]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be26:	429a      	cmp	r2, r3
 800be28:	d905      	bls.n	800be36 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be2a:	498e      	ldr	r1, [pc, #568]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800be2c:	698b      	ldr	r3, [r1, #24]
 800be2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be32:	431a      	orrs	r2, r3
 800be34:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	f013 0f08 	tst.w	r3, #8
 800be3c:	d00c      	beq.n	800be58 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800be3e:	6962      	ldr	r2, [r4, #20]
 800be40:	4b88      	ldr	r3, [pc, #544]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800be42:	69db      	ldr	r3, [r3, #28]
 800be44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be48:	429a      	cmp	r2, r3
 800be4a:	d905      	bls.n	800be58 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be4c:	4985      	ldr	r1, [pc, #532]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800be4e:	69cb      	ldr	r3, [r1, #28]
 800be50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be54:	431a      	orrs	r2, r3
 800be56:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	f013 0f10 	tst.w	r3, #16
 800be5e:	d00c      	beq.n	800be7a <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800be60:	69a2      	ldr	r2, [r4, #24]
 800be62:	4b80      	ldr	r3, [pc, #512]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800be64:	69db      	ldr	r3, [r3, #28]
 800be66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d905      	bls.n	800be7a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be6e:	497d      	ldr	r1, [pc, #500]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800be70:	69cb      	ldr	r3, [r1, #28]
 800be72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800be76:	431a      	orrs	r2, r3
 800be78:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	f013 0f20 	tst.w	r3, #32
 800be80:	d00c      	beq.n	800be9c <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800be82:	69e2      	ldr	r2, [r4, #28]
 800be84:	4b77      	ldr	r3, [pc, #476]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800be86:	6a1b      	ldr	r3, [r3, #32]
 800be88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d905      	bls.n	800be9c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800be90:	4974      	ldr	r1, [pc, #464]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800be92:	6a0b      	ldr	r3, [r1, #32]
 800be94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be98:	431a      	orrs	r2, r3
 800be9a:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	f013 0f02 	tst.w	r3, #2
 800bea2:	d00c      	beq.n	800bebe <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800bea4:	68e2      	ldr	r2, [r4, #12]
 800bea6:	4b6f      	ldr	r3, [pc, #444]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	f003 030f 	and.w	r3, r3, #15
 800beae:	429a      	cmp	r2, r3
 800beb0:	d905      	bls.n	800bebe <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800beb2:	496c      	ldr	r1, [pc, #432]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800beb4:	698b      	ldr	r3, [r1, #24]
 800beb6:	f023 030f 	bic.w	r3, r3, #15
 800beba:	431a      	orrs	r2, r3
 800bebc:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	f013 0f01 	tst.w	r3, #1
 800bec4:	d041      	beq.n	800bf4a <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bec6:	4a67      	ldr	r2, [pc, #412]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bec8:	6993      	ldr	r3, [r2, #24]
 800beca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bece:	68a1      	ldr	r1, [r4, #8]
 800bed0:	430b      	orrs	r3, r1
 800bed2:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bed4:	6863      	ldr	r3, [r4, #4]
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d00a      	beq.n	800bef0 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d027      	beq.n	800bf2e <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d02c      	beq.n	800bf3c <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bee2:	4a60      	ldr	r2, [pc, #384]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bee4:	6812      	ldr	r2, [r2, #0]
 800bee6:	f012 0f04 	tst.w	r2, #4
 800beea:	d106      	bne.n	800befa <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800beec:	2001      	movs	r0, #1
 800beee:	e0ad      	b.n	800c04c <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bef0:	6812      	ldr	r2, [r2, #0]
 800bef2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800bef6:	f000 80ae 	beq.w	800c056 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800befa:	495a      	ldr	r1, [pc, #360]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800befc:	690a      	ldr	r2, [r1, #16]
 800befe:	f022 0207 	bic.w	r2, r2, #7
 800bf02:	4313      	orrs	r3, r2
 800bf04:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800bf06:	f7fd fa15 	bl	8009334 <HAL_GetTick>
 800bf0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf0c:	4b55      	ldr	r3, [pc, #340]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf14:	6862      	ldr	r2, [r4, #4]
 800bf16:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800bf1a:	d016      	beq.n	800bf4a <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf1c:	f7fd fa0a 	bl	8009334 <HAL_GetTick>
 800bf20:	1b80      	subs	r0, r0, r6
 800bf22:	f241 3388 	movw	r3, #5000	; 0x1388
 800bf26:	4298      	cmp	r0, r3
 800bf28:	d9f0      	bls.n	800bf0c <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 800bf2a:	2003      	movs	r0, #3
 800bf2c:	e08e      	b.n	800c04c <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf2e:	4a4d      	ldr	r2, [pc, #308]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bf30:	6812      	ldr	r2, [r2, #0]
 800bf32:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800bf36:	d1e0      	bne.n	800befa <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800bf38:	2001      	movs	r0, #1
 800bf3a:	e087      	b.n	800c04c <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf3c:	4a49      	ldr	r2, [pc, #292]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bf3e:	6812      	ldr	r2, [r2, #0]
 800bf40:	f412 7f80 	tst.w	r2, #256	; 0x100
 800bf44:	d1d9      	bne.n	800befa <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800bf46:	2001      	movs	r0, #1
 800bf48:	e080      	b.n	800c04c <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	f013 0f02 	tst.w	r3, #2
 800bf50:	d00c      	beq.n	800bf6c <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800bf52:	68e2      	ldr	r2, [r4, #12]
 800bf54:	4b43      	ldr	r3, [pc, #268]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d205      	bcs.n	800bf6c <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf60:	4940      	ldr	r1, [pc, #256]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bf62:	698b      	ldr	r3, [r1, #24]
 800bf64:	f023 030f 	bic.w	r3, r3, #15
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bf6c:	4b3c      	ldr	r3, [pc, #240]	; (800c060 <HAL_RCC_ClockConfig+0x27c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 030f 	and.w	r3, r3, #15
 800bf74:	42ab      	cmp	r3, r5
 800bf76:	d90a      	bls.n	800bf8e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf78:	4a39      	ldr	r2, [pc, #228]	; (800c060 <HAL_RCC_ClockConfig+0x27c>)
 800bf7a:	6813      	ldr	r3, [r2, #0]
 800bf7c:	f023 030f 	bic.w	r3, r3, #15
 800bf80:	432b      	orrs	r3, r5
 800bf82:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf84:	6813      	ldr	r3, [r2, #0]
 800bf86:	f003 030f 	and.w	r3, r3, #15
 800bf8a:	42ab      	cmp	r3, r5
 800bf8c:	d165      	bne.n	800c05a <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	f013 0f04 	tst.w	r3, #4
 800bf94:	d00c      	beq.n	800bfb0 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800bf96:	6922      	ldr	r2, [r4, #16]
 800bf98:	4b32      	ldr	r3, [pc, #200]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d205      	bcs.n	800bfb0 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bfa4:	492f      	ldr	r1, [pc, #188]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bfa6:	698b      	ldr	r3, [r1, #24]
 800bfa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfac:	431a      	orrs	r2, r3
 800bfae:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	f013 0f08 	tst.w	r3, #8
 800bfb6:	d00c      	beq.n	800bfd2 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800bfb8:	6962      	ldr	r2, [r4, #20]
 800bfba:	4b2a      	ldr	r3, [pc, #168]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d205      	bcs.n	800bfd2 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bfc6:	4927      	ldr	r1, [pc, #156]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bfc8:	69cb      	ldr	r3, [r1, #28]
 800bfca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	f013 0f10 	tst.w	r3, #16
 800bfd8:	d00c      	beq.n	800bff4 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800bfda:	69a2      	ldr	r2, [r4, #24]
 800bfdc:	4b21      	ldr	r3, [pc, #132]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bfde:	69db      	ldr	r3, [r3, #28]
 800bfe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d205      	bcs.n	800bff4 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bfe8:	491e      	ldr	r1, [pc, #120]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800bfea:	69cb      	ldr	r3, [r1, #28]
 800bfec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bff0:	431a      	orrs	r2, r3
 800bff2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	f013 0f20 	tst.w	r3, #32
 800bffa:	d00c      	beq.n	800c016 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800bffc:	69e2      	ldr	r2, [r4, #28]
 800bffe:	4b19      	ldr	r3, [pc, #100]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c006:	429a      	cmp	r2, r3
 800c008:	d205      	bcs.n	800c016 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c00a:	4916      	ldr	r1, [pc, #88]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800c00c:	6a0b      	ldr	r3, [r1, #32]
 800c00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c012:	431a      	orrs	r2, r3
 800c014:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800c016:	f7ff fdeb 	bl	800bbf0 <HAL_RCC_GetSysClockFreq>
 800c01a:	4912      	ldr	r1, [pc, #72]	; (800c064 <HAL_RCC_ClockConfig+0x280>)
 800c01c:	698b      	ldr	r3, [r1, #24]
 800c01e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c022:	4a11      	ldr	r2, [pc, #68]	; (800c068 <HAL_RCC_ClockConfig+0x284>)
 800c024:	5cd3      	ldrb	r3, [r2, r3]
 800c026:	f003 031f 	and.w	r3, r3, #31
 800c02a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c02c:	698b      	ldr	r3, [r1, #24]
 800c02e:	f003 030f 	and.w	r3, r3, #15
 800c032:	5cd3      	ldrb	r3, [r2, r3]
 800c034:	f003 031f 	and.w	r3, r3, #31
 800c038:	fa20 f303 	lsr.w	r3, r0, r3
 800c03c:	4a0b      	ldr	r2, [pc, #44]	; (800c06c <HAL_RCC_ClockConfig+0x288>)
 800c03e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800c040:	4b0b      	ldr	r3, [pc, #44]	; (800c070 <HAL_RCC_ClockConfig+0x28c>)
 800c042:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800c044:	4b0b      	ldr	r3, [pc, #44]	; (800c074 <HAL_RCC_ClockConfig+0x290>)
 800c046:	6818      	ldr	r0, [r3, #0]
 800c048:	f7f7 f8f2 	bl	8003230 <HAL_InitTick>
}
 800c04c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800c04e:	2001      	movs	r0, #1
}
 800c050:	4770      	bx	lr
      return HAL_ERROR;
 800c052:	2001      	movs	r0, #1
 800c054:	e7fa      	b.n	800c04c <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800c056:	2001      	movs	r0, #1
 800c058:	e7f8      	b.n	800c04c <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800c05a:	2001      	movs	r0, #1
 800c05c:	e7f6      	b.n	800c04c <HAL_RCC_ClockConfig+0x268>
 800c05e:	bf00      	nop
 800c060:	52002000 	.word	0x52002000
 800c064:	58024400 	.word	0x58024400
 800c068:	08023520 	.word	0x08023520
 800c06c:	24000074 	.word	0x24000074
 800c070:	24000070 	.word	0x24000070
 800c074:	2400007c 	.word	0x2400007c

0800c078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c078:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800c07a:	f7ff fdb9 	bl	800bbf0 <HAL_RCC_GetSysClockFreq>
 800c07e:	4a0b      	ldr	r2, [pc, #44]	; (800c0ac <HAL_RCC_GetHCLKFreq+0x34>)
 800c080:	6993      	ldr	r3, [r2, #24]
 800c082:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c086:	490a      	ldr	r1, [pc, #40]	; (800c0b0 <HAL_RCC_GetHCLKFreq+0x38>)
 800c088:	5ccb      	ldrb	r3, [r1, r3]
 800c08a:	f003 031f 	and.w	r3, r3, #31
 800c08e:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c092:	6992      	ldr	r2, [r2, #24]
 800c094:	f002 020f 	and.w	r2, r2, #15
 800c098:	5c88      	ldrb	r0, [r1, r2]
 800c09a:	f000 001f 	and.w	r0, r0, #31
 800c09e:	fa23 f000 	lsr.w	r0, r3, r0
 800c0a2:	4a04      	ldr	r2, [pc, #16]	; (800c0b4 <HAL_RCC_GetHCLKFreq+0x3c>)
 800c0a4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c0a6:	4a04      	ldr	r2, [pc, #16]	; (800c0b8 <HAL_RCC_GetHCLKFreq+0x40>)
 800c0a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800c0aa:	bd08      	pop	{r3, pc}
 800c0ac:	58024400 	.word	0x58024400
 800c0b0:	08023520 	.word	0x08023520
 800c0b4:	24000074 	.word	0x24000074
 800c0b8:	24000070 	.word	0x24000070

0800c0bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0bc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800c0be:	f7ff ffdb 	bl	800c078 <HAL_RCC_GetHCLKFreq>
 800c0c2:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c0ca:	4a04      	ldr	r2, [pc, #16]	; (800c0dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800c0cc:	5cd3      	ldrb	r3, [r2, r3]
 800c0ce:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800c0d2:	40d8      	lsrs	r0, r3
 800c0d4:	bd08      	pop	{r3, pc}
 800c0d6:	bf00      	nop
 800c0d8:	58024400 	.word	0x58024400
 800c0dc:	08023520 	.word	0x08023520

0800c0e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800c0e2:	f7ff ffc9 	bl	800c078 <HAL_RCC_GetHCLKFreq>
 800c0e6:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c0ee:	4a04      	ldr	r2, [pc, #16]	; (800c100 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c0f0:	5cd3      	ldrb	r3, [r2, r3]
 800c0f2:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800c0f6:	40d8      	lsrs	r0, r3
 800c0f8:	bd08      	pop	{r3, pc}
 800c0fa:	bf00      	nop
 800c0fc:	58024400 	.word	0x58024400
 800c100:	08023520 	.word	0x08023520

0800c104 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c104:	233f      	movs	r3, #63	; 0x3f
 800c106:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c108:	4b11      	ldr	r3, [pc, #68]	; (800c150 <HAL_RCC_GetClockConfig+0x4c>)
 800c10a:	691a      	ldr	r2, [r3, #16]
 800c10c:	f002 0207 	and.w	r2, r2, #7
 800c110:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800c112:	699a      	ldr	r2, [r3, #24]
 800c114:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800c118:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800c11a:	699a      	ldr	r2, [r3, #24]
 800c11c:	f002 020f 	and.w	r2, r2, #15
 800c120:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800c122:	699a      	ldr	r2, [r3, #24]
 800c124:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c128:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800c12a:	69da      	ldr	r2, [r3, #28]
 800c12c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c130:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800c132:	69da      	ldr	r2, [r3, #28]
 800c134:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800c138:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800c13a:	6a1b      	ldr	r3, [r3, #32]
 800c13c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c140:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c142:	4b04      	ldr	r3, [pc, #16]	; (800c154 <HAL_RCC_GetClockConfig+0x50>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 030f 	and.w	r3, r3, #15
 800c14a:	600b      	str	r3, [r1, #0]
}
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	58024400 	.word	0x58024400
 800c154:	52002000 	.word	0x52002000

0800c158 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c158:	4b40      	ldr	r3, [pc, #256]	; (800c25c <RCCEx_PLL2_Config+0x104>)
 800c15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15c:	f003 0303 	and.w	r3, r3, #3
 800c160:	2b03      	cmp	r3, #3
 800c162:	d079      	beq.n	800c258 <RCCEx_PLL2_Config+0x100>
{
 800c164:	b570      	push	{r4, r5, r6, lr}
 800c166:	4605      	mov	r5, r0
 800c168:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c16a:	4a3c      	ldr	r2, [pc, #240]	; (800c25c <RCCEx_PLL2_Config+0x104>)
 800c16c:	6813      	ldr	r3, [r2, #0]
 800c16e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c174:	f7fd f8de 	bl	8009334 <HAL_GetTick>
 800c178:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c17a:	4b38      	ldr	r3, [pc, #224]	; (800c25c <RCCEx_PLL2_Config+0x104>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c182:	d006      	beq.n	800c192 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c184:	f7fd f8d6 	bl	8009334 <HAL_GetTick>
 800c188:	1b03      	subs	r3, r0, r4
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d9f5      	bls.n	800c17a <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800c18e:	2003      	movs	r0, #3

  }


  return status;
}
 800c190:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c192:	4b32      	ldr	r3, [pc, #200]	; (800c25c <RCCEx_PLL2_Config+0x104>)
 800c194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c196:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800c19a:	6829      	ldr	r1, [r5, #0]
 800c19c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800c1a0:	629a      	str	r2, [r3, #40]	; 0x28
 800c1a2:	686a      	ldr	r2, [r5, #4]
 800c1a4:	3a01      	subs	r2, #1
 800c1a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1aa:	68a9      	ldr	r1, [r5, #8]
 800c1ac:	3901      	subs	r1, #1
 800c1ae:	0249      	lsls	r1, r1, #9
 800c1b0:	b289      	uxth	r1, r1
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	68e9      	ldr	r1, [r5, #12]
 800c1b6:	3901      	subs	r1, #1
 800c1b8:	0409      	lsls	r1, r1, #16
 800c1ba:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	6929      	ldr	r1, [r5, #16]
 800c1c2:	3901      	subs	r1, #1
 800c1c4:	0609      	lsls	r1, r1, #24
 800c1c6:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800c1ca:	430a      	orrs	r2, r1
 800c1cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c1d4:	6969      	ldr	r1, [r5, #20]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	f022 0220 	bic.w	r2, r2, #32
 800c1e0:	69a9      	ldr	r1, [r5, #24]
 800c1e2:	430a      	orrs	r2, r1
 800c1e4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e8:	f022 0210 	bic.w	r2, r2, #16
 800c1ec:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1ee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c1f0:	4a1b      	ldr	r2, [pc, #108]	; (800c260 <RCCEx_PLL2_Config+0x108>)
 800c1f2:	400a      	ands	r2, r1
 800c1f4:	69e9      	ldr	r1, [r5, #28]
 800c1f6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c1fa:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fe:	f042 0210 	orr.w	r2, r2, #16
 800c202:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800c204:	b9c6      	cbnz	r6, 800c238 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c206:	461a      	mov	r2, r3
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c20e:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800c210:	4a12      	ldr	r2, [pc, #72]	; (800c25c <RCCEx_PLL2_Config+0x104>)
 800c212:	6813      	ldr	r3, [r2, #0]
 800c214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c218:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c21a:	f7fd f88b 	bl	8009334 <HAL_GetTick>
 800c21e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c220:	4b0e      	ldr	r3, [pc, #56]	; (800c25c <RCCEx_PLL2_Config+0x104>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c228:	d114      	bne.n	800c254 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c22a:	f7fd f883 	bl	8009334 <HAL_GetTick>
 800c22e:	1b00      	subs	r0, r0, r4
 800c230:	2802      	cmp	r0, #2
 800c232:	d9f5      	bls.n	800c220 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 800c234:	2003      	movs	r0, #3
 800c236:	e7ab      	b.n	800c190 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800c238:	2e01      	cmp	r6, #1
 800c23a:	d005      	beq.n	800c248 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c23c:	4a07      	ldr	r2, [pc, #28]	; (800c25c <RCCEx_PLL2_Config+0x104>)
 800c23e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c244:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c246:	e7e3      	b.n	800c210 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c248:	4a04      	ldr	r2, [pc, #16]	; (800c25c <RCCEx_PLL2_Config+0x104>)
 800c24a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c24c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c250:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c252:	e7dd      	b.n	800c210 <RCCEx_PLL2_Config+0xb8>
  return status;
 800c254:	2000      	movs	r0, #0
 800c256:	e79b      	b.n	800c190 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800c258:	2001      	movs	r0, #1
}
 800c25a:	4770      	bx	lr
 800c25c:	58024400 	.word	0x58024400
 800c260:	ffff0007 	.word	0xffff0007

0800c264 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c264:	4b40      	ldr	r3, [pc, #256]	; (800c368 <RCCEx_PLL3_Config+0x104>)
 800c266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d079      	beq.n	800c364 <RCCEx_PLL3_Config+0x100>
{
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	4605      	mov	r5, r0
 800c274:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c276:	4a3c      	ldr	r2, [pc, #240]	; (800c368 <RCCEx_PLL3_Config+0x104>)
 800c278:	6813      	ldr	r3, [r2, #0]
 800c27a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c27e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c280:	f7fd f858 	bl	8009334 <HAL_GetTick>
 800c284:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c286:	4b38      	ldr	r3, [pc, #224]	; (800c368 <RCCEx_PLL3_Config+0x104>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c28e:	d006      	beq.n	800c29e <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c290:	f7fd f850 	bl	8009334 <HAL_GetTick>
 800c294:	1b03      	subs	r3, r0, r4
 800c296:	2b02      	cmp	r3, #2
 800c298:	d9f5      	bls.n	800c286 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800c29a:	2003      	movs	r0, #3

  }


  return status;
}
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c29e:	4b32      	ldr	r3, [pc, #200]	; (800c368 <RCCEx_PLL3_Config+0x104>)
 800c2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2a2:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800c2a6:	6829      	ldr	r1, [r5, #0]
 800c2a8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c2ac:	629a      	str	r2, [r3, #40]	; 0x28
 800c2ae:	686a      	ldr	r2, [r5, #4]
 800c2b0:	3a01      	subs	r2, #1
 800c2b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2b6:	68a9      	ldr	r1, [r5, #8]
 800c2b8:	3901      	subs	r1, #1
 800c2ba:	0249      	lsls	r1, r1, #9
 800c2bc:	b289      	uxth	r1, r1
 800c2be:	430a      	orrs	r2, r1
 800c2c0:	68e9      	ldr	r1, [r5, #12]
 800c2c2:	3901      	subs	r1, #1
 800c2c4:	0409      	lsls	r1, r1, #16
 800c2c6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	6929      	ldr	r1, [r5, #16]
 800c2ce:	3901      	subs	r1, #1
 800c2d0:	0609      	lsls	r1, r1, #24
 800c2d2:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800c2d6:	430a      	orrs	r2, r1
 800c2d8:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c2e0:	6969      	ldr	r1, [r5, #20]
 800c2e2:	430a      	orrs	r2, r1
 800c2e4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c2ec:	69a9      	ldr	r1, [r5, #24]
 800c2ee:	430a      	orrs	r2, r1
 800c2f0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c2f8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c2fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c2fc:	4a1b      	ldr	r2, [pc, #108]	; (800c36c <RCCEx_PLL3_Config+0x108>)
 800c2fe:	400a      	ands	r2, r1
 800c300:	69e9      	ldr	r1, [r5, #28]
 800c302:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c306:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c30a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c30e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800c310:	b9c6      	cbnz	r6, 800c344 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c312:	461a      	mov	r2, r3
 800c314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c316:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c31a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 800c31c:	4a12      	ldr	r2, [pc, #72]	; (800c368 <RCCEx_PLL3_Config+0x104>)
 800c31e:	6813      	ldr	r3, [r2, #0]
 800c320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c324:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c326:	f7fd f805 	bl	8009334 <HAL_GetTick>
 800c32a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c32c:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <RCCEx_PLL3_Config+0x104>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c334:	d114      	bne.n	800c360 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c336:	f7fc fffd 	bl	8009334 <HAL_GetTick>
 800c33a:	1b00      	subs	r0, r0, r4
 800c33c:	2802      	cmp	r0, #2
 800c33e:	d9f5      	bls.n	800c32c <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800c340:	2003      	movs	r0, #3
 800c342:	e7ab      	b.n	800c29c <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800c344:	2e01      	cmp	r6, #1
 800c346:	d005      	beq.n	800c354 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c348:	4a07      	ldr	r2, [pc, #28]	; (800c368 <RCCEx_PLL3_Config+0x104>)
 800c34a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c34c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c350:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c352:	e7e3      	b.n	800c31c <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c354:	4a04      	ldr	r2, [pc, #16]	; (800c368 <RCCEx_PLL3_Config+0x104>)
 800c356:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c35c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c35e:	e7dd      	b.n	800c31c <RCCEx_PLL3_Config+0xb8>
  return status;
 800c360:	2000      	movs	r0, #0
 800c362:	e79b      	b.n	800c29c <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 800c364:	2001      	movs	r0, #1
}
 800c366:	4770      	bx	lr
 800c368:	58024400 	.word	0x58024400
 800c36c:	ffff0007 	.word	0xffff0007

0800c370 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c372:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c374:	6803      	ldr	r3, [r0, #0]
 800c376:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c37a:	d030      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c37c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800c37e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c382:	d026      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800c384:	d80e      	bhi.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800c386:	b1eb      	cbz	r3, 800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800c388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c38c:	d107      	bne.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c38e:	2102      	movs	r1, #2
 800c390:	3004      	adds	r0, #4
 800c392:	f7ff fee1 	bl	800c158 <RCCEx_PLL2_Config>
 800c396:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c398:	b145      	cbz	r5, 800c3ac <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c39a:	462e      	mov	r6, r5
 800c39c:	e021      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c39e:	2601      	movs	r6, #1
 800c3a0:	4635      	mov	r5, r6
 800c3a2:	e01e      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800c3a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3a8:	d109      	bne.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800c3aa:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c3ac:	4a99      	ldr	r2, [pc, #612]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c3ae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c3b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c3b4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800c3b6:	430b      	orrs	r3, r1
 800c3b8:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c3ba:	2600      	movs	r6, #0
 800c3bc:	e011      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c3be:	2601      	movs	r6, #1
 800c3c0:	4635      	mov	r5, r6
 800c3c2:	e00e      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3c4:	4a93      	ldr	r2, [pc, #588]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c3c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c3c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c3ce:	2500      	movs	r5, #0
 800c3d0:	e7ec      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c3d2:	2102      	movs	r1, #2
 800c3d4:	3024      	adds	r0, #36	; 0x24
 800c3d6:	f7ff ff45 	bl	800c264 <RCCEx_PLL3_Config>
 800c3da:	4605      	mov	r5, r0
      break;
 800c3dc:	e7dc      	b.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c3de:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c3e0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c3e8:	d026      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c3ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	d81f      	bhi.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800c3f0:	e8df f003 	tbb	[pc, r3]
 800c3f4:	08171103 	.word	0x08171103
 800c3f8:	08          	.byte	0x08
 800c3f9:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3fa:	4a86      	ldr	r2, [pc, #536]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c3fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c3fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c402:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c404:	b9bd      	cbnz	r5, 800c436 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c406:	4a83      	ldr	r2, [pc, #524]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c408:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c40a:	f023 0307 	bic.w	r3, r3, #7
 800c40e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c410:	430b      	orrs	r3, r1
 800c412:	6513      	str	r3, [r2, #80]	; 0x50
 800c414:	e010      	b.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c416:	2100      	movs	r1, #0
 800c418:	1d20      	adds	r0, r4, #4
 800c41a:	f7ff fe9d 	bl	800c158 <RCCEx_PLL2_Config>
 800c41e:	4605      	mov	r5, r0
      break;
 800c420:	e7f0      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c422:	2100      	movs	r1, #0
 800c424:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c428:	f7ff ff1c 	bl	800c264 <RCCEx_PLL3_Config>
 800c42c:	4605      	mov	r5, r0
      break;
 800c42e:	e7e9      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c430:	2601      	movs	r6, #1
 800c432:	4635      	mov	r5, r6
 800c434:	e000      	b.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800c436:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800c43e:	d01d      	beq.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 800c440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c442:	2b80      	cmp	r3, #128	; 0x80
 800c444:	d039      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800c446:	d80b      	bhi.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800c448:	b38b      	cbz	r3, 800c4ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800c44a:	2b40      	cmp	r3, #64	; 0x40
 800c44c:	d105      	bne.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c44e:	2100      	movs	r1, #0
 800c450:	1d20      	adds	r0, r4, #4
 800c452:	f7ff fe81 	bl	800c158 <RCCEx_PLL2_Config>
 800c456:	4605      	mov	r5, r0
      break;
 800c458:	e008      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 800c45a:	2601      	movs	r6, #1
 800c45c:	4635      	mov	r5, r6
 800c45e:	e00d      	b.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800c460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c464:	d002      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800c466:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c46a:	d11b      	bne.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 800c46c:	bb65      	cbnz	r5, 800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800c46e:	4a69      	ldr	r2, [pc, #420]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c470:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c472:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800c476:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c478:	430b      	orrs	r3, r1
 800c47a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800c47c:	6823      	ldr	r3, [r4, #0]
 800c47e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800c482:	d035      	beq.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 800c484:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c48a:	d057      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c48c:	d821      	bhi.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d04e      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c496:	d119      	bne.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c498:	2100      	movs	r1, #0
 800c49a:	1d20      	adds	r0, r4, #4
 800c49c:	f7ff fe5c 	bl	800c158 <RCCEx_PLL2_Config>
 800c4a0:	4605      	mov	r5, r0
      break;
 800c4a2:	e01c      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 800c4a4:	2bc0      	cmp	r3, #192	; 0xc0
 800c4a6:	d0e1      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800c4a8:	2601      	movs	r6, #1
 800c4aa:	4635      	mov	r5, r6
 800c4ac:	e7e6      	b.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4ae:	4a59      	ldr	r2, [pc, #356]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c4b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c4b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4b6:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c4b8:	e7d8      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c4c0:	f7ff fed0 	bl	800c264 <RCCEx_PLL3_Config>
 800c4c4:	4605      	mov	r5, r0
      break;
 800c4c6:	e7d1      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800c4c8:	462e      	mov	r6, r5
 800c4ca:	e7d7      	b.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 800c4cc:	2601      	movs	r6, #1
 800c4ce:	4635      	mov	r5, r6
 800c4d0:	e00e      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c4d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4d6:	d002      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c4d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c4dc:	d122      	bne.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	d133      	bne.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800c4e2:	4a4c      	ldr	r2, [pc, #304]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c4e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c4e6:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800c4ea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c4ec:	430b      	orrs	r3, r1
 800c4ee:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c4f6:	d031      	beq.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 800c4f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c4fa:	2b20      	cmp	r3, #32
 800c4fc:	d041      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800c4fe:	d829      	bhi.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c500:	b133      	cbz	r3, 800c510 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800c502:	2b10      	cmp	r3, #16
 800c504:	d123      	bne.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c506:	4a43      	ldr	r2, [pc, #268]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c508:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c50a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c50e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c510:	2d00      	cmp	r5, #0
 800c512:	d13c      	bne.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c514:	4a3f      	ldr	r2, [pc, #252]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c516:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c518:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c51c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c51e:	430b      	orrs	r3, r1
 800c520:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c522:	e01b      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 800c524:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c528:	d0d9      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c52a:	2601      	movs	r6, #1
 800c52c:	4635      	mov	r5, r6
 800c52e:	e7df      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c530:	4a38      	ldr	r2, [pc, #224]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c532:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c538:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c53a:	e7d0      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c53c:	2100      	movs	r1, #0
 800c53e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c542:	f7ff fe8f 	bl	800c264 <RCCEx_PLL3_Config>
 800c546:	4605      	mov	r5, r0
      break;
 800c548:	e7c9      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c54a:	462e      	mov	r6, r5
 800c54c:	e7d0      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 800c54e:	2601      	movs	r6, #1
 800c550:	4635      	mov	r5, r6
 800c552:	e003      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800c554:	2b30      	cmp	r3, #48	; 0x30
 800c556:	d0db      	beq.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800c558:	2601      	movs	r6, #1
 800c55a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c55c:	6823      	ldr	r3, [r4, #0]
 800c55e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800c562:	d039      	beq.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c564:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c56a:	d02d      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800c56c:	d814      	bhi.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800c56e:	b32b      	cbz	r3, 800c5bc <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800c570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c574:	d10d      	bne.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c576:	2100      	movs	r1, #0
 800c578:	1d20      	adds	r0, r4, #4
 800c57a:	f7ff fded 	bl	800c158 <RCCEx_PLL2_Config>
 800c57e:	4605      	mov	r5, r0
      break;
 800c580:	e010      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c582:	2102      	movs	r1, #2
 800c584:	1d20      	adds	r0, r4, #4
 800c586:	f7ff fde7 	bl	800c158 <RCCEx_PLL2_Config>
 800c58a:	4605      	mov	r5, r0
      break;
 800c58c:	e7c0      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800c58e:	462e      	mov	r6, r5
 800c590:	e7e4      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c592:	2601      	movs	r6, #1
 800c594:	4635      	mov	r5, r6
 800c596:	e01f      	b.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800c598:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c59c:	d002      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c59e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5a2:	d108      	bne.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 800c5a4:	b9bd      	cbnz	r5, 800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c5a6:	4a1b      	ldr	r2, [pc, #108]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c5a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c5aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5ae:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	6513      	str	r3, [r2, #80]	; 0x50
 800c5b4:	e010      	b.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c5b6:	2601      	movs	r6, #1
 800c5b8:	4635      	mov	r5, r6
 800c5ba:	e00d      	b.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5bc:	4a15      	ldr	r2, [pc, #84]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c5be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c5c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5c4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c5c6:	e7ed      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c5ce:	f7ff fe49 	bl	800c264 <RCCEx_PLL3_Config>
 800c5d2:	4605      	mov	r5, r0
      break;
 800c5d4:	e7e6      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c5d6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c5de:	d026      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800c5e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e6:	d037      	beq.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800c5e8:	d816      	bhi.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c5ea:	b13b      	cbz	r3, 800c5fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5f0:	d10d      	bne.n	800c60e <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	1d20      	adds	r0, r4, #4
 800c5f6:	f7ff fdaf 	bl	800c158 <RCCEx_PLL2_Config>
 800c5fa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c5fc:	bb9d      	cbnz	r5, 800c666 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c5fe:	4a05      	ldr	r2, [pc, #20]	; (800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c600:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c602:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c606:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c608:	430b      	orrs	r3, r1
 800c60a:	6513      	str	r3, [r2, #80]	; 0x50
 800c60c:	e00f      	b.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800c60e:	2601      	movs	r6, #1
 800c610:	4635      	mov	r5, r6
 800c612:	e00c      	b.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800c614:	58024400 	.word	0x58024400
 800c618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c61c:	d0ee      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c61e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c622:	d0eb      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c624:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c628:	d0e8      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c62a:	2601      	movs	r6, #1
 800c62c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c634:	d025      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800c636:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800c63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c63e:	d04c      	beq.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800c640:	d816      	bhi.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800c642:	2b00      	cmp	r3, #0
 800c644:	d03c      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c64a:	d10e      	bne.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c64c:	2101      	movs	r1, #1
 800c64e:	1d20      	adds	r0, r4, #4
 800c650:	f7ff fd82 	bl	800c158 <RCCEx_PLL2_Config>
 800c654:	4605      	mov	r5, r0
      break;
 800c656:	e033      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c658:	2101      	movs	r1, #1
 800c65a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c65e:	f7ff fe01 	bl	800c264 <RCCEx_PLL3_Config>
 800c662:	4605      	mov	r5, r0
      break;
 800c664:	e7ca      	b.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800c666:	462e      	mov	r6, r5
 800c668:	e7e1      	b.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 800c66a:	2601      	movs	r6, #1
 800c66c:	4635      	mov	r5, r6
 800c66e:	e008      	b.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800c670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c674:	d024      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c676:	d91d      	bls.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c678:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c67c:	d020      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c67e:	2601      	movs	r6, #1
 800c680:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c688:	d009      	beq.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 800c68a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c68c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c690:	d02c      	beq.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800c692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c696:	d037      	beq.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800c698:	b36b      	cbz	r3, 800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800c69a:	2601      	movs	r6, #1
 800c69c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800c6a4:	d045      	beq.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 800c6a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d86d      	bhi.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c6ac:	e8df f003 	tbb	[pc, r3]
 800c6b0:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 800c6b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6b8:	d002      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6be:	d109      	bne.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 800c6c0:	b995      	cbnz	r5, 800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c6c2:	4a8c      	ldr	r2, [pc, #560]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c6c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c6c6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c6ca:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800c6ce:	430b      	orrs	r3, r1
 800c6d0:	6593      	str	r3, [r2, #88]	; 0x58
 800c6d2:	e7d6      	b.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800c6d4:	2601      	movs	r6, #1
 800c6d6:	4635      	mov	r5, r6
 800c6d8:	e7d3      	b.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6da:	2101      	movs	r1, #1
 800c6dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c6e0:	f7ff fdc0 	bl	800c264 <RCCEx_PLL3_Config>
 800c6e4:	4605      	mov	r5, r0
      break;
 800c6e6:	e7eb      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c6e8:	462e      	mov	r6, r5
 800c6ea:	e7ca      	b.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6ec:	4a81      	ldr	r2, [pc, #516]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c6ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c6f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c6f6:	b96d      	cbnz	r5, 800c714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c6f8:	4a7e      	ldr	r2, [pc, #504]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c6fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c6fc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c700:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c702:	430b      	orrs	r3, r1
 800c704:	6513      	str	r3, [r2, #80]	; 0x50
 800c706:	e7ca      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c708:	2101      	movs	r1, #1
 800c70a:	1d20      	adds	r0, r4, #4
 800c70c:	f7ff fd24 	bl	800c158 <RCCEx_PLL2_Config>
 800c710:	4605      	mov	r5, r0
      break;
 800c712:	e7f0      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800c714:	462e      	mov	r6, r5
 800c716:	e7c2      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c718:	4a76      	ldr	r2, [pc, #472]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c71a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c71c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c720:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c722:	bba5      	cbnz	r5, 800c78e <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c724:	4a73      	ldr	r2, [pc, #460]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c726:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c728:	f023 0303 	bic.w	r3, r3, #3
 800c72c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c72e:	430b      	orrs	r3, r1
 800c730:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800c738:	d12b      	bne.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c73a:	6823      	ldr	r3, [r4, #0]
 800c73c:	f013 0f01 	tst.w	r3, #1
 800c740:	f000 80a3 	beq.w	800c88a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800c744:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c748:	2b28      	cmp	r3, #40	; 0x28
 800c74a:	f200 809c 	bhi.w	800c886 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800c74e:	e8df f003 	tbb	[pc, r3]
 800c752:	9a89      	.short	0x9a89
 800c754:	9a9a9a9a 	.word	0x9a9a9a9a
 800c758:	9a849a9a 	.word	0x9a849a9a
 800c75c:	9a9a9a9a 	.word	0x9a9a9a9a
 800c760:	9a939a9a 	.word	0x9a939a9a
 800c764:	9a9a9a9a 	.word	0x9a9a9a9a
 800c768:	9a899a9a 	.word	0x9a899a9a
 800c76c:	9a9a9a9a 	.word	0x9a9a9a9a
 800c770:	9a899a9a 	.word	0x9a899a9a
 800c774:	9a9a9a9a 	.word	0x9a9a9a9a
 800c778:	9a9a      	.short	0x9a9a
 800c77a:	89          	.byte	0x89
 800c77b:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c77c:	2102      	movs	r1, #2
 800c77e:	1d20      	adds	r0, r4, #4
 800c780:	f7ff fcea 	bl	800c158 <RCCEx_PLL2_Config>
 800c784:	4605      	mov	r5, r0
      break;
 800c786:	e7cc      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 800c788:	2601      	movs	r6, #1
 800c78a:	4635      	mov	r5, r6
 800c78c:	e7d1      	b.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800c78e:	462e      	mov	r6, r5
 800c790:	e7cf      	b.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c792:	4a59      	ldr	r2, [pc, #356]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800c794:	6813      	ldr	r3, [r2, #0]
 800c796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c79a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c79c:	f7fc fdca 	bl	8009334 <HAL_GetTick>
 800c7a0:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c7a2:	4b55      	ldr	r3, [pc, #340]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c7aa:	d105      	bne.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7ac:	f7fc fdc2 	bl	8009334 <HAL_GetTick>
 800c7b0:	1bc0      	subs	r0, r0, r7
 800c7b2:	2864      	cmp	r0, #100	; 0x64
 800c7b4:	d9f5      	bls.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 800c7b6:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 800c7b8:	2d00      	cmp	r5, #0
 800c7ba:	d14a      	bne.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c7bc:	4b4d      	ldr	r3, [pc, #308]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c7be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800c7c4:	4053      	eors	r3, r2
 800c7c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c7ca:	d00c      	beq.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c7cc:	4b49      	ldr	r3, [pc, #292]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c7ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c7d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c7d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c7d6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800c7da:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c7dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c7de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800c7e2:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800c7e4:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c7e6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c7ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ee:	d015      	beq.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 800c7f0:	bb8d      	cbnz	r5, 800c856 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c7f2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c7f6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c7fa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c7fe:	d01e      	beq.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800c800:	4a3c      	ldr	r2, [pc, #240]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c802:	6913      	ldr	r3, [r2, #16]
 800c804:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c808:	6113      	str	r3, [r2, #16]
 800c80a:	493a      	ldr	r1, [pc, #232]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c80c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800c80e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800c812:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c816:	4313      	orrs	r3, r2
 800c818:	670b      	str	r3, [r1, #112]	; 0x70
 800c81a:	e78e      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 800c81c:	f7fc fd8a 	bl	8009334 <HAL_GetTick>
 800c820:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c822:	4b34      	ldr	r3, [pc, #208]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c826:	f013 0f02 	tst.w	r3, #2
 800c82a:	d1e1      	bne.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c82c:	f7fc fd82 	bl	8009334 <HAL_GetTick>
 800c830:	1bc0      	subs	r0, r0, r7
 800c832:	f241 3388 	movw	r3, #5000	; 0x1388
 800c836:	4298      	cmp	r0, r3
 800c838:	d9f3      	bls.n	800c822 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 800c83a:	2503      	movs	r5, #3
 800c83c:	e7d8      	b.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c83e:	482d      	ldr	r0, [pc, #180]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c840:	6902      	ldr	r2, [r0, #16]
 800c842:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800c846:	492d      	ldr	r1, [pc, #180]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800c848:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800c84c:	4313      	orrs	r3, r2
 800c84e:	6103      	str	r3, [r0, #16]
 800c850:	e7db      	b.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 800c852:	462e      	mov	r6, r5
 800c854:	e771      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 800c856:	462e      	mov	r6, r5
 800c858:	e76f      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c85a:	2101      	movs	r1, #1
 800c85c:	1d20      	adds	r0, r4, #4
 800c85e:	f7ff fc7b 	bl	800c158 <RCCEx_PLL2_Config>
 800c862:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c864:	b9ed      	cbnz	r5, 800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c866:	4a23      	ldr	r2, [pc, #140]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c868:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c86a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800c86e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c872:	430b      	orrs	r3, r1
 800c874:	6553      	str	r3, [r2, #84]	; 0x54
 800c876:	e008      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c878:	2101      	movs	r1, #1
 800c87a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c87e:	f7ff fcf1 	bl	800c264 <RCCEx_PLL3_Config>
 800c882:	4605      	mov	r5, r0
      break;
 800c884:	e7ee      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 800c886:	2601      	movs	r6, #1
 800c888:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	f013 0f02 	tst.w	r3, #2
 800c890:	d016      	beq.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c892:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c894:	2b05      	cmp	r3, #5
 800c896:	d827      	bhi.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
 800c898:	e8df f003 	tbb	[pc, r3]
 800c89c:	0a1f050a 	.word	0x0a1f050a
 800c8a0:	0a0a      	.short	0x0a0a
 800c8a2:	462e      	mov	r6, r5
 800c8a4:	e7f1      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c8a6:	2101      	movs	r1, #1
 800c8a8:	1d20      	adds	r0, r4, #4
 800c8aa:	f7ff fc55 	bl	800c158 <RCCEx_PLL2_Config>
 800c8ae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c8b0:	b9ed      	cbnz	r5, 800c8ee <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c8b2:	4a10      	ldr	r2, [pc, #64]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800c8b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c8b6:	f023 0307 	bic.w	r3, r3, #7
 800c8ba:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c8bc:	430b      	orrs	r3, r1
 800c8be:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	f013 0f04 	tst.w	r3, #4
 800c8c6:	d029      	beq.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c8c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c8cc:	2b05      	cmp	r3, #5
 800c8ce:	d84a      	bhi.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800c8d0:	e8df f003 	tbb	[pc, r3]
 800c8d4:	1b42161b 	.word	0x1b42161b
 800c8d8:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c8da:	2101      	movs	r1, #1
 800c8dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c8e0:	f7ff fcc0 	bl	800c264 <RCCEx_PLL3_Config>
 800c8e4:	4605      	mov	r5, r0
      break;
 800c8e6:	e7e3      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c8e8:	2601      	movs	r6, #1
 800c8ea:	4635      	mov	r5, r6
 800c8ec:	e7e8      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c8ee:	462e      	mov	r6, r5
 800c8f0:	e7e6      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c8f2:	bf00      	nop
 800c8f4:	58024400 	.word	0x58024400
 800c8f8:	58024800 	.word	0x58024800
 800c8fc:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c900:	2101      	movs	r1, #1
 800c902:	1d20      	adds	r0, r4, #4
 800c904:	f7ff fc28 	bl	800c158 <RCCEx_PLL2_Config>
 800c908:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c90a:	bb7d      	cbnz	r5, 800c96c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c90c:	4aa9      	ldr	r2, [pc, #676]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c90e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c910:	f023 0307 	bic.w	r3, r3, #7
 800c914:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800c918:	430b      	orrs	r3, r1
 800c91a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	f013 0f20 	tst.w	r3, #32
 800c922:	d033      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c924:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c92c:	d04c      	beq.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800c92e:	d822      	bhi.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x606>
 800c930:	b13b      	cbz	r3, 800c942 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c936:	d11b      	bne.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c938:	2100      	movs	r1, #0
 800c93a:	1d20      	adds	r0, r4, #4
 800c93c:	f7ff fc0c 	bl	800c158 <RCCEx_PLL2_Config>
 800c940:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c942:	2d00      	cmp	r5, #0
 800c944:	d147      	bne.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c946:	4a9b      	ldr	r2, [pc, #620]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c948:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c94a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c94e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c952:	430b      	orrs	r3, r1
 800c954:	6553      	str	r3, [r2, #84]	; 0x54
 800c956:	e019      	b.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c958:	2101      	movs	r1, #1
 800c95a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c95e:	f7ff fc81 	bl	800c264 <RCCEx_PLL3_Config>
 800c962:	4605      	mov	r5, r0
      break;
 800c964:	e7d1      	b.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c966:	2601      	movs	r6, #1
 800c968:	4635      	mov	r5, r6
 800c96a:	e7d7      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800c96c:	462e      	mov	r6, r5
 800c96e:	e7d5      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c970:	2601      	movs	r6, #1
 800c972:	4635      	mov	r5, r6
 800c974:	e00a      	b.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800c976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c97a:	d0e2      	beq.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c97c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c980:	d0df      	beq.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c986:	d0dc      	beq.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c988:	2601      	movs	r6, #1
 800c98a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c992:	d030      	beq.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c994:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800c998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c99c:	d04b      	beq.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800c99e:	d81f      	bhi.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800c9a0:	b13b      	cbz	r3, 800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c9a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9a6:	d118      	bne.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	1d20      	adds	r0, r4, #4
 800c9ac:	f7ff fbd4 	bl	800c158 <RCCEx_PLL2_Config>
 800c9b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c9b2:	2d00      	cmp	r5, #0
 800c9b4:	d146      	bne.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c9b6:	4a7f      	ldr	r2, [pc, #508]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c9b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c9ba:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800c9be:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800c9c2:	430b      	orrs	r3, r1
 800c9c4:	6593      	str	r3, [r2, #88]	; 0x58
 800c9c6:	e016      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c9c8:	2102      	movs	r1, #2
 800c9ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c9ce:	f7ff fc49 	bl	800c264 <RCCEx_PLL3_Config>
 800c9d2:	4605      	mov	r5, r0
      break;
 800c9d4:	e7b5      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800c9d6:	462e      	mov	r6, r5
 800c9d8:	e7d8      	b.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c9da:	2601      	movs	r6, #1
 800c9dc:	4635      	mov	r5, r6
 800c9de:	e00a      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x686>
 800c9e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9e4:	d0e5      	beq.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c9e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c9ea:	d0e2      	beq.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c9ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c9f0:	d0df      	beq.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c9f2:	2601      	movs	r6, #1
 800c9f4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c9fc:	d032      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c9fe:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800ca02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca06:	f000 80a2 	beq.w	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800ca0a:	d820      	bhi.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800ca0c:	b13b      	cbz	r3, 800ca1e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800ca0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca12:	d119      	bne.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ca14:	2100      	movs	r1, #0
 800ca16:	1d20      	adds	r0, r4, #4
 800ca18:	f7ff fb9e 	bl	800c158 <RCCEx_PLL2_Config>
 800ca1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	f040 809c 	bne.w	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ca24:	4a63      	ldr	r2, [pc, #396]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ca26:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ca28:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ca2c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800ca30:	430b      	orrs	r3, r1
 800ca32:	6593      	str	r3, [r2, #88]	; 0x58
 800ca34:	e016      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ca36:	2102      	movs	r1, #2
 800ca38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ca3c:	f7ff fc12 	bl	800c264 <RCCEx_PLL3_Config>
 800ca40:	4605      	mov	r5, r0
      break;
 800ca42:	e7b6      	b.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800ca44:	462e      	mov	r6, r5
 800ca46:	e7d6      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ca48:	2601      	movs	r6, #1
 800ca4a:	4635      	mov	r5, r6
 800ca4c:	e00a      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800ca4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca52:	d0e4      	beq.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800ca54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ca58:	d0e1      	beq.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800ca5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ca5e:	d0de      	beq.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800ca60:	2601      	movs	r6, #1
 800ca62:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	f013 0f08 	tst.w	r3, #8
 800ca6a:	d00c      	beq.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ca6c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800ca70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca74:	d074      	beq.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ca76:	4a4f      	ldr	r2, [pc, #316]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ca78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ca7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ca7e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800ca82:	430b      	orrs	r3, r1
 800ca84:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	f013 0f10 	tst.w	r3, #16
 800ca8c:	d00c      	beq.n	800caa8 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ca8e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800ca92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca96:	d06c      	beq.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ca98:	4a46      	ldr	r2, [pc, #280]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ca9a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ca9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caa0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800caa4:	430b      	orrs	r3, r1
 800caa6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800caa8:	6823      	ldr	r3, [r4, #0]
 800caaa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800caae:	d00b      	beq.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 800cab0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800cab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cab8:	d073      	beq.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800caba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cabe:	d066      	beq.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d05f      	beq.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800cac4:	2601      	movs	r6, #1
 800cac6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800cace:	d00c      	beq.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 800cad0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800cad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cad8:	d07d      	beq.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0x866>
 800cada:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cade:	d070      	beq.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cae4:	d068      	beq.n	800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800cae6:	2601      	movs	r6, #1
 800cae8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800caf0:	d008      	beq.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 800caf2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d077      	beq.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x878>
 800caf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cafc:	f000 8082 	beq.w	800cc04 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800cb00:	2601      	movs	r6, #1
 800cb02:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800cb0a:	f040 8083 	bne.w	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800cb14:	f000 808b 	beq.w	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 800cb18:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cb1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb20:	f000 80c9 	beq.w	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800cb24:	f240 8080 	bls.w	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800cb28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb2c:	d003      	beq.n	800cb36 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800cb2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb32:	f040 80be 	bne.w	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 800cb36:	2d00      	cmp	r5, #0
 800cb38:	f040 80c3 	bne.w	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb3c:	4a1d      	ldr	r2, [pc, #116]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800cb3e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cb40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb44:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	6553      	str	r3, [r2, #84]	; 0x54
 800cb4c:	e06f      	b.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cb4e:	2102      	movs	r1, #2
 800cb50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cb54:	f7ff fb86 	bl	800c264 <RCCEx_PLL3_Config>
 800cb58:	4605      	mov	r5, r0
      break;
 800cb5a:	e760      	b.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800cb5c:	462e      	mov	r6, r5
 800cb5e:	e781      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cb60:	2102      	movs	r1, #2
 800cb62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cb66:	f7ff fb7d 	bl	800c264 <RCCEx_PLL3_Config>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d083      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800cb6e:	2601      	movs	r6, #1
 800cb70:	e781      	b.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cb72:	2102      	movs	r1, #2
 800cb74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cb78:	f7ff fb74 	bl	800c264 <RCCEx_PLL3_Config>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d08b      	beq.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 800cb80:	2601      	movs	r6, #1
 800cb82:	e789      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cb84:	2100      	movs	r1, #0
 800cb86:	1d20      	adds	r0, r4, #4
 800cb88:	f7ff fae6 	bl	800c158 <RCCEx_PLL2_Config>
 800cb8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800cb8e:	b97d      	cbnz	r5, 800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cb90:	4a08      	ldr	r2, [pc, #32]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800cb92:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cb94:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cb98:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800cb9c:	430b      	orrs	r3, r1
 800cb9e:	6593      	str	r3, [r2, #88]	; 0x58
 800cba0:	e792      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cba2:	2102      	movs	r1, #2
 800cba4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cba8:	f7ff fb5c 	bl	800c264 <RCCEx_PLL3_Config>
 800cbac:	4605      	mov	r5, r0
      break;
 800cbae:	e7ee      	b.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800cbb0:	462e      	mov	r6, r5
 800cbb2:	e789      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800cbb4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbb8:	4a47      	ldr	r2, [pc, #284]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cbba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cbbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800cbc2:	b97d      	cbnz	r5, 800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cbc4:	4a44      	ldr	r2, [pc, #272]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cbc6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbc8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cbcc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800cbd0:	430b      	orrs	r3, r1
 800cbd2:	6553      	str	r3, [r2, #84]	; 0x54
 800cbd4:	e789      	b.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cbd6:	2101      	movs	r1, #1
 800cbd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cbdc:	f7ff fb42 	bl	800c264 <RCCEx_PLL3_Config>
 800cbe0:	4605      	mov	r5, r0
      break;
 800cbe2:	e7ee      	b.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cbe4:	462e      	mov	r6, r5
 800cbe6:	e780      	b.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbe8:	4a3b      	ldr	r2, [pc, #236]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cbea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cbec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800cbf2:	b96d      	cbnz	r5, 800cc10 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cbf4:	4a38      	ldr	r2, [pc, #224]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cbf6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800cbf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbfc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800cbfe:	430b      	orrs	r3, r1
 800cc00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc02:	e77f      	b.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cc04:	2102      	movs	r1, #2
 800cc06:	1d20      	adds	r0, r4, #4
 800cc08:	f7ff faa6 	bl	800c158 <RCCEx_PLL2_Config>
 800cc0c:	4605      	mov	r5, r0
      break;
 800cc0e:	e7f0      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x882>
 800cc10:	462e      	mov	r6, r5
 800cc12:	e777      	b.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cc14:	2102      	movs	r1, #2
 800cc16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cc1a:	f7ff fb23 	bl	800c264 <RCCEx_PLL3_Config>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f43f af75 	beq.w	800cb0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 800cc24:	2601      	movs	r6, #1
 800cc26:	e772      	b.n	800cb0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d084      	beq.n	800cb36 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800cc2c:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800cc34:	d006      	beq.n	800cc44 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cc36:	4a28      	ldr	r2, [pc, #160]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cc38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cc3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc3e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800cc40:	430b      	orrs	r3, r1
 800cc42:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800cc4a:	d006      	beq.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cc4c:	4a22      	ldr	r2, [pc, #136]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cc4e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cc50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc54:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800cc56:	430b      	orrs	r3, r1
 800cc58:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800cc60:	d006      	beq.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800cc62:	4a1d      	ldr	r2, [pc, #116]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cc64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cc66:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800cc6a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800cc6c:	430b      	orrs	r3, r1
 800cc6e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cc76:	d009      	beq.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc78:	4b17      	ldr	r3, [pc, #92]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cc7a:	691a      	ldr	r2, [r3, #16]
 800cc7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc80:	611a      	str	r2, [r3, #16]
 800cc82:	691a      	ldr	r2, [r3, #16]
 800cc84:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800cc88:	430a      	orrs	r2, r1
 800cc8a:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	db19      	blt.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800cc98:	d007      	beq.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cc9a:	4a0f      	ldr	r2, [pc, #60]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800cc9c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cc9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800cca2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800cca6:	430b      	orrs	r3, r1
 800cca8:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800ccaa:	b106      	cbz	r6, 800ccae <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800ccac:	2601      	movs	r6, #1
}
 800ccae:	4630      	mov	r0, r6
 800ccb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800ccb2:	2601      	movs	r6, #1
 800ccb4:	e7bb      	b.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccb6:	4a08      	ldr	r2, [pc, #32]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800ccb8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ccba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccbe:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800ccc0:	e739      	b.n	800cb36 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800ccc2:	462e      	mov	r6, r5
 800ccc4:	e7b3      	b.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ccc6:	4a04      	ldr	r2, [pc, #16]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800ccc8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ccca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800ccce:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ccd0:	430b      	orrs	r3, r1
 800ccd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ccd4:	e7dd      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x922>
 800ccd6:	bf00      	nop
 800ccd8:	58024400 	.word	0x58024400

0800ccdc <SPI_RxISR_8BIT>:
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800ccdc:	6802      	ldr	r2, [r0, #0]
 800ccde:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cce0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800cce4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800cce6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cce8:	3301      	adds	r3, #1
 800ccea:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800ccec:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800ccfa:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	b923      	cbnz	r3, 800cd0c <SPI_RxISR_8BIT+0x30>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800cd02:	6802      	ldr	r2, [r0, #0]
 800cd04:	6913      	ldr	r3, [r2, #16]
 800cd06:	f023 0301 	bic.w	r3, r3, #1
 800cd0a:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cd0c:	4770      	bx	lr

0800cd0e <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cd0e:	6802      	ldr	r2, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd10:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cd12:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800cd14:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd16:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cd18:	3302      	adds	r3, #2
 800cd1a:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800cd1c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	3b01      	subs	r3, #1
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800cd2a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	b923      	cbnz	r3, 800cd3c <SPI_RxISR_16BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800cd32:	6802      	ldr	r2, [r0, #0]
 800cd34:	6913      	ldr	r3, [r2, #16]
 800cd36:	f023 0301 	bic.w	r3, r3, #1
 800cd3a:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cd3c:	4770      	bx	lr

0800cd3e <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800cd3e:	6802      	ldr	r2, [r0, #0]
 800cd40:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cd42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cd44:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd46:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cd48:	3304      	adds	r3, #4
 800cd4a:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800cd4c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	3b01      	subs	r3, #1
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800cd5a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	b923      	cbnz	r3, 800cd6c <SPI_RxISR_32BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800cd62:	6802      	ldr	r2, [r0, #0]
 800cd64:	6913      	ldr	r3, [r2, #16]
 800cd66:	f023 0301 	bic.w	r3, r3, #1
 800cd6a:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cd6c:	4770      	bx	lr

0800cd6e <SPI_TxISR_8BIT>:
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800cd6e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cd70:	6803      	ldr	r3, [r0, #0]
 800cd72:	7812      	ldrb	r2, [r2, #0]
 800cd74:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd78:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800cd7e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	3b01      	subs	r3, #1
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800cd8c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	b923      	cbnz	r3, 800cd9e <SPI_TxISR_8BIT+0x30>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800cd94:	6802      	ldr	r2, [r0, #0]
 800cd96:	6913      	ldr	r3, [r2, #16]
 800cd98:	f023 0302 	bic.w	r3, r3, #2
 800cd9c:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cd9e:	4770      	bx	lr

0800cda0 <SPI_TxISR_16BIT>:
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cda0:	6803      	ldr	r3, [r0, #0]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cda2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cda4:	8812      	ldrh	r2, [r2, #0]
 800cda6:	841a      	strh	r2, [r3, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800cda8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cdaa:	3302      	adds	r3, #2
 800cdac:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800cdae:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800cdbc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	b923      	cbnz	r3, 800cdce <SPI_TxISR_16BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800cdc4:	6802      	ldr	r2, [r0, #0]
 800cdc6:	6913      	ldr	r3, [r2, #16]
 800cdc8:	f023 0302 	bic.w	r3, r3, #2
 800cdcc:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cdce:	4770      	bx	lr

0800cdd0 <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cdd0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cdd2:	6803      	ldr	r3, [r0, #0]
 800cdd4:	6812      	ldr	r2, [r2, #0]
 800cdd6:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800cdd8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cdda:	3304      	adds	r3, #4
 800cddc:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800cdde:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	3b01      	subs	r3, #1
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800cdec:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	b923      	cbnz	r3, 800cdfe <SPI_TxISR_32BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800cdf4:	6802      	ldr	r2, [r0, #0]
 800cdf6:	6913      	ldr	r3, [r2, #16]
 800cdf8:	f023 0302 	bic.w	r3, r3, #2
 800cdfc:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800cdfe:	4770      	bx	lr

0800ce00 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ce00:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800ce02:	6802      	ldr	r2, [r0, #0]
 800ce04:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ce06:	6991      	ldr	r1, [r2, #24]
 800ce08:	f041 0108 	orr.w	r1, r1, #8
 800ce0c:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ce0e:	6801      	ldr	r1, [r0, #0]
 800ce10:	698a      	ldr	r2, [r1, #24]
 800ce12:	f042 0210 	orr.w	r2, r2, #16
 800ce16:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce18:	6801      	ldr	r1, [r0, #0]
 800ce1a:	680a      	ldr	r2, [r1, #0]
 800ce1c:	f022 0201 	bic.w	r2, r2, #1
 800ce20:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ce22:	6801      	ldr	r1, [r0, #0]
 800ce24:	690c      	ldr	r4, [r1, #16]
 800ce26:	4a29      	ldr	r2, [pc, #164]	; (800cecc <SPI_CloseTransfer+0xcc>)
 800ce28:	4022      	ands	r2, r4
 800ce2a:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ce2c:	6801      	ldr	r1, [r0, #0]
 800ce2e:	688a      	ldr	r2, [r1, #8]
 800ce30:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ce34:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce36:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800ce3a:	b2d2      	uxtb	r2, r2
 800ce3c:	2a04      	cmp	r2, #4
 800ce3e:	d00d      	beq.n	800ce5c <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ce40:	f013 0f20 	tst.w	r3, #32
 800ce44:	d00a      	beq.n	800ce5c <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce46:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ce4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce4e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce52:	6801      	ldr	r1, [r0, #0]
 800ce54:	698a      	ldr	r2, [r1, #24]
 800ce56:	f042 0220 	orr.w	r2, r2, #32
 800ce5a:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce5c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800ce60:	b2d2      	uxtb	r2, r2
 800ce62:	2a03      	cmp	r2, #3
 800ce64:	d00d      	beq.n	800ce82 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce66:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ce6a:	d00a      	beq.n	800ce82 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce6c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ce70:	f042 0204 	orr.w	r2, r2, #4
 800ce74:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce78:	6801      	ldr	r1, [r0, #0]
 800ce7a:	698a      	ldr	r2, [r1, #24]
 800ce7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce80:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ce82:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ce86:	d00a      	beq.n	800ce9e <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce88:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ce8c:	f042 0201 	orr.w	r2, r2, #1
 800ce90:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce94:	6801      	ldr	r1, [r0, #0]
 800ce96:	698a      	ldr	r2, [r1, #24]
 800ce98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce9c:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ce9e:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cea2:	d00a      	beq.n	800ceba <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cea4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800cea8:	f043 0308 	orr.w	r3, r3, #8
 800ceac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ceb0:	6802      	ldr	r2, [r0, #0]
 800ceb2:	6993      	ldr	r3, [r2, #24]
 800ceb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceb8:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cec0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800cec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	fffffc90 	.word	0xfffffc90

0800ced0 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ced0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ced2:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ced4:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ced6:	3008      	adds	r0, #8
 800ced8:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800ceda:	fb03 0000 	mla	r0, r3, r0, r0
 800cede:	4770      	bx	lr

0800cee0 <SPI_WaitOnFlagUntilTimeout>:
{
 800cee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee4:	4607      	mov	r7, r0
 800cee6:	460e      	mov	r6, r1
 800cee8:	4615      	mov	r5, r2
 800ceea:	4698      	mov	r8, r3
 800ceec:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ceee:	e000      	b.n	800cef2 <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cef0:	b1c4      	cbz	r4, 800cf24 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	ea36 0303 	bics.w	r3, r6, r3
 800cefa:	bf0c      	ite	eq
 800cefc:	f04f 0c01 	moveq.w	ip, #1
 800cf00:	f04f 0c00 	movne.w	ip, #0
 800cf04:	45ac      	cmp	ip, r5
 800cf06:	d10a      	bne.n	800cf1e <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf08:	f7fc fa14 	bl	8009334 <HAL_GetTick>
 800cf0c:	eba0 0008 	sub.w	r0, r0, r8
 800cf10:	42a0      	cmp	r0, r4
 800cf12:	d3ed      	bcc.n	800cef0 <SPI_WaitOnFlagUntilTimeout+0x10>
 800cf14:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cf18:	d0ea      	beq.n	800cef0 <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 800cf1a:	2003      	movs	r0, #3
 800cf1c:	e000      	b.n	800cf20 <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800cf1e:	2000      	movs	r0, #0
}
 800cf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 800cf24:	2003      	movs	r0, #3
 800cf26:	e7fb      	b.n	800cf20 <SPI_WaitOnFlagUntilTimeout+0x40>

0800cf28 <HAL_SPI_Init>:
  if (hspi == NULL)
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	f000 80a3 	beq.w	800d074 <HAL_SPI_Init+0x14c>
{
 800cf2e:	b570      	push	{r4, r5, r6, lr}
 800cf30:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf32:	2300      	movs	r3, #0
 800cf34:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cf36:	6805      	ldr	r5, [r0, #0]
 800cf38:	4b52      	ldr	r3, [pc, #328]	; (800d084 <HAL_SPI_Init+0x15c>)
 800cf3a:	4e53      	ldr	r6, [pc, #332]	; (800d088 <HAL_SPI_Init+0x160>)
 800cf3c:	429d      	cmp	r5, r3
 800cf3e:	bf18      	it	ne
 800cf40:	42b5      	cmpne	r5, r6
 800cf42:	bf14      	ite	ne
 800cf44:	2601      	movne	r6, #1
 800cf46:	2600      	moveq	r6, #0
 800cf48:	d007      	beq.n	800cf5a <HAL_SPI_Init+0x32>
 800cf4a:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800cf4e:	429d      	cmp	r5, r3
 800cf50:	d003      	beq.n	800cf5a <HAL_SPI_Init+0x32>
 800cf52:	68c3      	ldr	r3, [r0, #12]
 800cf54:	2b0f      	cmp	r3, #15
 800cf56:	f200 808f 	bhi.w	800d078 <HAL_SPI_Init+0x150>
  packet_length = SPI_GetPacketSize(hspi);
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f7ff ffb8 	bl	800ced0 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf60:	b12e      	cbz	r6, 800cf6e <HAL_SPI_Init+0x46>
 800cf62:	4b4a      	ldr	r3, [pc, #296]	; (800d08c <HAL_SPI_Init+0x164>)
 800cf64:	429d      	cmp	r5, r3
 800cf66:	d002      	beq.n	800cf6e <HAL_SPI_Init+0x46>
 800cf68:	2808      	cmp	r0, #8
 800cf6a:	f200 8087 	bhi.w	800d07c <HAL_SPI_Init+0x154>
 800cf6e:	4a45      	ldr	r2, [pc, #276]	; (800d084 <HAL_SPI_Init+0x15c>)
 800cf70:	4b45      	ldr	r3, [pc, #276]	; (800d088 <HAL_SPI_Init+0x160>)
 800cf72:	429d      	cmp	r5, r3
 800cf74:	bf18      	it	ne
 800cf76:	4295      	cmpne	r5, r2
 800cf78:	d003      	beq.n	800cf82 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf7e:	429d      	cmp	r5, r3
 800cf80:	d101      	bne.n	800cf86 <HAL_SPI_Init+0x5e>
 800cf82:	2810      	cmp	r0, #16
 800cf84:	d87c      	bhi.n	800d080 <HAL_SPI_Init+0x158>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf86:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d059      	beq.n	800d042 <HAL_SPI_Init+0x11a>
  hspi->State = HAL_SPI_STATE_BUSY;
 800cf8e:	2302      	movs	r3, #2
 800cf90:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800cf94:	6822      	ldr	r2, [r4, #0]
 800cf96:	6813      	ldr	r3, [r2, #0]
 800cf98:	f023 0301 	bic.w	r3, r3, #1
 800cf9c:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cf9e:	6821      	ldr	r1, [r4, #0]
 800cfa0:	688a      	ldr	r2, [r1, #8]
 800cfa2:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cfa6:	69a3      	ldr	r3, [r4, #24]
 800cfa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cfac:	d04f      	beq.n	800d04e <HAL_SPI_Init+0x126>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cfae:	69e3      	ldr	r3, [r4, #28]
 800cfb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cfb2:	430b      	orrs	r3, r1
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	68e1      	ldr	r1, [r4, #12]
 800cfbc:	6822      	ldr	r2, [r4, #0]
 800cfbe:	430b      	orrs	r3, r1
 800cfc0:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cfc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	69a2      	ldr	r2, [r4, #24]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	6922      	ldr	r2, [r4, #16]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	6962      	ldr	r2, [r4, #20]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	6a22      	ldr	r2, [r4, #32]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	6862      	ldr	r2, [r4, #4]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	68a2      	ldr	r2, [r4, #8]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800cfea:	4313      	orrs	r3, r2
 800cfec:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cfee:	6822      	ldr	r2, [r4, #0]
 800cff0:	430b      	orrs	r3, r1
 800cff2:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cff4:	6863      	ldr	r3, [r4, #4]
 800cff6:	b96b      	cbnz	r3, 800d014 <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cff8:	6822      	ldr	r2, [r4, #0]
 800cffa:	6893      	ldr	r3, [r2, #8]
 800cffc:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800d000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d004:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d006:	6822      	ldr	r2, [r4, #0]
 800d008:	6893      	ldr	r3, [r2, #8]
 800d00a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d00e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d012:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d014:	6822      	ldr	r2, [r4, #0]
 800d016:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d018:	f023 0301 	bic.w	r3, r3, #1
 800d01c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d01e:	6863      	ldr	r3, [r4, #4]
 800d020:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800d024:	d006      	beq.n	800d034 <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d026:	6822      	ldr	r2, [r4, #0]
 800d028:	68d3      	ldr	r3, [r2, #12]
 800d02a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d02e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d030:	430b      	orrs	r3, r1
 800d032:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d034:	2000      	movs	r0, #0
 800d036:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d03a:	2301      	movs	r3, #1
 800d03c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800d040:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800d042:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800d046:	4620      	mov	r0, r4
 800d048:	f7f6 f864 	bl	8003114 <HAL_SPI_MspInit>
 800d04c:	e79f      	b.n	800cf8e <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d04e:	6863      	ldr	r3, [r4, #4]
 800d050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d054:	d006      	beq.n	800d064 <HAL_SPI_Init+0x13c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1a9      	bne.n	800cfae <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d05a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d05c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d060:	d1a5      	bne.n	800cfae <HAL_SPI_Init+0x86>
 800d062:	e002      	b.n	800d06a <HAL_SPI_Init+0x142>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d064:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d066:	2800      	cmp	r0, #0
 800d068:	d1f5      	bne.n	800d056 <HAL_SPI_Init+0x12e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d06a:	680b      	ldr	r3, [r1, #0]
 800d06c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d070:	600b      	str	r3, [r1, #0]
 800d072:	e79c      	b.n	800cfae <HAL_SPI_Init+0x86>
    return HAL_ERROR;
 800d074:	2001      	movs	r0, #1
}
 800d076:	4770      	bx	lr
    return HAL_ERROR;
 800d078:	2001      	movs	r0, #1
 800d07a:	e7e1      	b.n	800d040 <HAL_SPI_Init+0x118>
    return HAL_ERROR;
 800d07c:	2001      	movs	r0, #1
 800d07e:	e7df      	b.n	800d040 <HAL_SPI_Init+0x118>
 800d080:	2001      	movs	r0, #1
 800d082:	e7dd      	b.n	800d040 <HAL_SPI_Init+0x118>
 800d084:	40013000 	.word	0x40013000
 800d088:	40003800 	.word	0x40003800
 800d08c:	40003c00 	.word	0x40003c00

0800d090 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800d090:	b198      	cbz	r0, 800d0ba <HAL_SPI_DeInit+0x2a>
{
 800d092:	b510      	push	{r4, lr}
 800d094:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800d096:	2302      	movs	r3, #2
 800d098:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800d09c:	6802      	ldr	r2, [r0, #0]
 800d09e:	6813      	ldr	r3, [r2, #0]
 800d0a0:	f023 0301 	bic.w	r3, r3, #1
 800d0a4:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800d0a6:	f7f6 f8a1 	bl	80031ec <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800d0b0:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 800d0b4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800d0b8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d0ba:	2001      	movs	r0, #1
}
 800d0bc:	4770      	bx	lr

0800d0be <HAL_SPI_TransmitReceive>:
{
 800d0be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	461d      	mov	r5, r3
 800d0c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d0c8:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 800d0cc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	f000 8179 	beq.w	800d3c8 <HAL_SPI_TransmitReceive+0x30a>
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	4688      	mov	r8, r1
 800d0da:	4691      	mov	r9, r2
 800d0dc:	2301      	movs	r3, #1
 800d0de:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800d0e2:	f7fc f927 	bl	8009334 <HAL_GetTick>
 800d0e6:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800d0e8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800d0ec:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800d0ee:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d007      	beq.n	800d104 <HAL_SPI_TransmitReceive+0x46>
 800d0f4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800d0f8:	d13d      	bne.n	800d176 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d0fa:	68a2      	ldr	r2, [r4, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800d0fc:	2a00      	cmp	r2, #0
 800d0fe:	d13a      	bne.n	800d176 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d100:	2b04      	cmp	r3, #4
 800d102:	d138      	bne.n	800d176 <HAL_SPI_TransmitReceive+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d104:	f1b9 0f00 	cmp.w	r9, #0
 800d108:	bf18      	it	ne
 800d10a:	f1b8 0f00 	cmpne.w	r8, #0
 800d10e:	d039      	beq.n	800d184 <HAL_SPI_TransmitReceive+0xc6>
 800d110:	2d00      	cmp	r5, #0
 800d112:	d037      	beq.n	800d184 <HAL_SPI_TransmitReceive+0xc6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d114:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b04      	cmp	r3, #4
 800d11c:	d002      	beq.n	800d124 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d11e:	2305      	movs	r3, #5
 800d120:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d124:	2300      	movs	r3, #0
 800d126:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d12a:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d12e:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d132:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d136:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d13a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d13e:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800d142:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d144:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d146:	6822      	ldr	r2, [r4, #0]
 800d148:	6851      	ldr	r1, [r2, #4]
 800d14a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800d14e:	400b      	ands	r3, r1
 800d150:	432b      	orrs	r3, r5
 800d152:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800d154:	6822      	ldr	r2, [r4, #0]
 800d156:	6813      	ldr	r3, [r2, #0]
 800d158:	f043 0301 	orr.w	r3, r3, #1
 800d15c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d15e:	6863      	ldr	r3, [r4, #4]
 800d160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d164:	d013      	beq.n	800d18e <HAL_SPI_TransmitReceive+0xd0>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d166:	68e3      	ldr	r3, [r4, #12]
 800d168:	2b0f      	cmp	r3, #15
 800d16a:	d868      	bhi.n	800d23e <HAL_SPI_TransmitReceive+0x180>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d16c:	2b07      	cmp	r3, #7
 800d16e:	f200 80bb 	bhi.w	800d2e8 <HAL_SPI_TransmitReceive+0x22a>
  initial_RxXferCount = Size;
 800d172:	46a8      	mov	r8, r5
 800d174:	e0c4      	b.n	800d300 <HAL_SPI_TransmitReceive+0x242>
    __HAL_UNLOCK(hspi);
 800d176:	2300      	movs	r3, #0
 800d178:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800d17c:	2002      	movs	r0, #2
}
 800d17e:	b002      	add	sp, #8
 800d180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800d184:	2300      	movs	r3, #0
 800d186:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800d18a:	2001      	movs	r0, #1
 800d18c:	e7f7      	b.n	800d17e <HAL_SPI_TransmitReceive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d18e:	6822      	ldr	r2, [r4, #0]
 800d190:	6813      	ldr	r3, [r2, #0]
 800d192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d196:	6013      	str	r3, [r2, #0]
 800d198:	e7e5      	b.n	800d166 <HAL_SPI_TransmitReceive+0xa8>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	6959      	ldr	r1, [r3, #20]
 800d19e:	f248 0208 	movw	r2, #32776	; 0x8008
 800d1a2:	4211      	tst	r1, r2
 800d1a4:	d013      	beq.n	800d1ce <HAL_SPI_TransmitReceive+0x110>
 800d1a6:	f1b8 0f00 	cmp.w	r8, #0
 800d1aa:	d010      	beq.n	800d1ce <HAL_SPI_TransmitReceive+0x110>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d1ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b0:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800d1b8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	3b01      	subs	r3, #1
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d1c6:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800d1ca:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1ce:	f7fc f8b1 	bl	8009334 <HAL_GetTick>
 800d1d2:	1bc0      	subs	r0, r0, r7
 800d1d4:	42b0      	cmp	r0, r6
 800d1d6:	d302      	bcc.n	800d1de <HAL_SPI_TransmitReceive+0x120>
 800d1d8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d1dc:	d11e      	bne.n	800d21c <HAL_SPI_TransmitReceive+0x15e>
 800d1de:	b1ee      	cbz	r6, 800d21c <HAL_SPI_TransmitReceive+0x15e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d1e0:	ea45 0308 	orr.w	r3, r5, r8
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 80d2 	beq.w	800d390 <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	695a      	ldr	r2, [r3, #20]
 800d1f0:	f012 0f02 	tst.w	r2, #2
 800d1f4:	d0d1      	beq.n	800d19a <HAL_SPI_TransmitReceive+0xdc>
 800d1f6:	2d00      	cmp	r5, #0
 800d1f8:	d0cf      	beq.n	800d19a <HAL_SPI_TransmitReceive+0xdc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d1fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d1fc:	6812      	ldr	r2, [r2, #0]
 800d1fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d200:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d202:	3304      	adds	r3, #4
 800d204:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800d206:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	3b01      	subs	r3, #1
 800d20e:	b29b      	uxth	r3, r3
 800d210:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d214:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800d218:	b2ad      	uxth	r5, r5
 800d21a:	e7be      	b.n	800d19a <HAL_SPI_TransmitReceive+0xdc>
        SPI_CloseTransfer(hspi);
 800d21c:	4620      	mov	r0, r4
 800d21e:	f7ff fdef 	bl	800ce00 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800d222:	2300      	movs	r3, #0
 800d224:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d228:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d230:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d234:	2301      	movs	r3, #1
 800d236:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800d23a:	2003      	movs	r0, #3
 800d23c:	e79f      	b.n	800d17e <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800d23e:	46a8      	mov	r8, r5
 800d240:	e7ce      	b.n	800d1e0 <HAL_SPI_TransmitReceive+0x122>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d242:	f7fc f877 	bl	8009334 <HAL_GetTick>
 800d246:	1bc0      	subs	r0, r0, r7
 800d248:	42b0      	cmp	r0, r6
 800d24a:	d302      	bcc.n	800d252 <HAL_SPI_TransmitReceive+0x194>
 800d24c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d250:	d139      	bne.n	800d2c6 <HAL_SPI_TransmitReceive+0x208>
 800d252:	2e00      	cmp	r6, #0
 800d254:	d037      	beq.n	800d2c6 <HAL_SPI_TransmitReceive+0x208>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d256:	ea45 0308 	orr.w	r3, r5, r8
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 8097 	beq.w	800d390 <HAL_SPI_TransmitReceive+0x2d2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	695b      	ldr	r3, [r3, #20]
 800d266:	f013 0f02 	tst.w	r3, #2
 800d26a:	d011      	beq.n	800d290 <HAL_SPI_TransmitReceive+0x1d2>
 800d26c:	b185      	cbz	r5, 800d290 <HAL_SPI_TransmitReceive+0x1d2>
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d26e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	f8aa 3020 	strh.w	r3, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d276:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d278:	3302      	adds	r3, #2
 800d27a:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800d27c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d280:	b29b      	uxth	r3, r3
 800d282:	3b01      	subs	r3, #1
 800d284:	b29b      	uxth	r3, r3
 800d286:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d28a:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800d28e:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	695b      	ldr	r3, [r3, #20]
 800d294:	f013 0f01 	tst.w	r3, #1
 800d298:	d0d3      	beq.n	800d242 <HAL_SPI_TransmitReceive+0x184>
 800d29a:	f1b8 0f00 	cmp.w	r8, #0
 800d29e:	d0d0      	beq.n	800d242 <HAL_SPI_TransmitReceive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d2a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2a2:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 800d2a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2aa:	3302      	adds	r3, #2
 800d2ac:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d2ae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d2bc:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800d2c0:	fa1f f888 	uxth.w	r8, r8
 800d2c4:	e7bd      	b.n	800d242 <HAL_SPI_TransmitReceive+0x184>
        SPI_CloseTransfer(hspi);
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f7ff fd9a 	bl	800ce00 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d2d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d2d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800d2e4:	2003      	movs	r0, #3
 800d2e6:	e74a      	b.n	800d17e <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800d2e8:	46a8      	mov	r8, r5
 800d2ea:	e7b4      	b.n	800d256 <HAL_SPI_TransmitReceive+0x198>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2ec:	f7fc f822 	bl	8009334 <HAL_GetTick>
 800d2f0:	1bc0      	subs	r0, r0, r7
 800d2f2:	42b0      	cmp	r0, r6
 800d2f4:	d302      	bcc.n	800d2fc <HAL_SPI_TransmitReceive+0x23e>
 800d2f6:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d2fa:	d138      	bne.n	800d36e <HAL_SPI_TransmitReceive+0x2b0>
 800d2fc:	2e00      	cmp	r6, #0
 800d2fe:	d036      	beq.n	800d36e <HAL_SPI_TransmitReceive+0x2b0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d300:	ea45 0308 	orr.w	r3, r5, r8
 800d304:	b29b      	uxth	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	d042      	beq.n	800d390 <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	695a      	ldr	r2, [r3, #20]
 800d30e:	f012 0f02 	tst.w	r2, #2
 800d312:	d011      	beq.n	800d338 <HAL_SPI_TransmitReceive+0x27a>
 800d314:	b185      	cbz	r5, 800d338 <HAL_SPI_TransmitReceive+0x27a>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d316:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d318:	7812      	ldrb	r2, [r2, #0]
 800d31a:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d31e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d320:	3301      	adds	r3, #1
 800d322:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800d324:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d328:	b29b      	uxth	r3, r3
 800d32a:	3b01      	subs	r3, #1
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d332:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800d336:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	695a      	ldr	r2, [r3, #20]
 800d33c:	f012 0f01 	tst.w	r2, #1
 800d340:	d0d4      	beq.n	800d2ec <HAL_SPI_TransmitReceive+0x22e>
 800d342:	f1b8 0f00 	cmp.w	r8, #0
 800d346:	d0d1      	beq.n	800d2ec <HAL_SPI_TransmitReceive+0x22e>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d348:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d34a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d34e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d352:	3301      	adds	r3, #1
 800d354:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d356:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	3b01      	subs	r3, #1
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d364:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800d368:	fa1f f888 	uxth.w	r8, r8
 800d36c:	e7be      	b.n	800d2ec <HAL_SPI_TransmitReceive+0x22e>
        SPI_CloseTransfer(hspi);
 800d36e:	4620      	mov	r0, r4
 800d370:	f7ff fd46 	bl	800ce00 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800d374:	2300      	movs	r3, #0
 800d376:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d37a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d37e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d382:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d386:	2301      	movs	r3, #1
 800d388:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800d38c:	2003      	movs	r0, #3
 800d38e:	e6f6      	b.n	800d17e <HAL_SPI_TransmitReceive+0xc0>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d390:	9600      	str	r6, [sp, #0]
 800d392:	463b      	mov	r3, r7
 800d394:	2200      	movs	r2, #0
 800d396:	2108      	movs	r1, #8
 800d398:	4620      	mov	r0, r4
 800d39a:	f7ff fda1 	bl	800cee0 <SPI_WaitOnFlagUntilTimeout>
 800d39e:	b128      	cbz	r0, 800d3ac <HAL_SPI_TransmitReceive+0x2ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d3a4:	f043 0320 	orr.w	r3, r3, #32
 800d3a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f7ff fd27 	bl	800ce00 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3be:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d3c2:	b91b      	cbnz	r3, 800d3cc <HAL_SPI_TransmitReceive+0x30e>
  return errorcode;
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	e6da      	b.n	800d17e <HAL_SPI_TransmitReceive+0xc0>
  __HAL_LOCK(hspi);
 800d3c8:	2002      	movs	r0, #2
 800d3ca:	e6d8      	b.n	800d17e <HAL_SPI_TransmitReceive+0xc0>
    return HAL_ERROR;
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	e6d6      	b.n	800d17e <HAL_SPI_TransmitReceive+0xc0>

0800d3d0 <HAL_SPI_Receive>:
{
 800d3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d4:	b082      	sub	sp, #8
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	468a      	mov	sl, r1
 800d3da:	4691      	mov	r9, r2
 800d3dc:	461d      	mov	r5, r3
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d3de:	f8d0 8000 	ldr.w	r8, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d3e2:	6843      	ldr	r3, [r0, #4]
 800d3e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d3e8:	d042      	beq.n	800d470 <HAL_SPI_Receive+0xa0>
  __HAL_LOCK(hspi);
 800d3ea:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	f000 810c 	beq.w	800d60c <HAL_SPI_Receive+0x23c>
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800d3fa:	f7fb ff9b 	bl	8009334 <HAL_GetTick>
 800d3fe:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d400:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 800d404:	b2f6      	uxtb	r6, r6
 800d406:	2e01      	cmp	r6, #1
 800d408:	d13f      	bne.n	800d48a <HAL_SPI_Receive+0xba>
  if ((pData == NULL) || (Size == 0UL))
 800d40a:	f1b9 0f00 	cmp.w	r9, #0
 800d40e:	bf18      	it	ne
 800d410:	f1ba 0f00 	cmpne.w	sl, #0
 800d414:	d041      	beq.n	800d49a <HAL_SPI_Receive+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d416:	2304      	movs	r3, #4
 800d418:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d41c:	2300      	movs	r3, #0
 800d41e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d422:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d426:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d42a:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800d42e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d430:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d434:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d438:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d43a:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d43c:	68a3      	ldr	r3, [r4, #8]
 800d43e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d442:	d02e      	beq.n	800d4a2 <HAL_SPI_Receive+0xd2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	6859      	ldr	r1, [r3, #4]
 800d448:	4a71      	ldr	r2, [pc, #452]	; (800d610 <HAL_SPI_Receive+0x240>)
 800d44a:	400a      	ands	r2, r1
 800d44c:	ea49 0202 	orr.w	r2, r9, r2
 800d450:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800d452:	6822      	ldr	r2, [r4, #0]
 800d454:	6813      	ldr	r3, [r2, #0]
 800d456:	f043 0301 	orr.w	r3, r3, #1
 800d45a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d45c:	6863      	ldr	r3, [r4, #4]
 800d45e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d462:	d024      	beq.n	800d4ae <HAL_SPI_Receive+0xde>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d464:	68e3      	ldr	r3, [r4, #12]
 800d466:	2b0f      	cmp	r3, #15
 800d468:	d830      	bhi.n	800d4cc <HAL_SPI_Receive+0xfc>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d46a:	2b07      	cmp	r3, #7
 800d46c:	d862      	bhi.n	800d534 <HAL_SPI_Receive+0x164>
 800d46e:	e094      	b.n	800d59a <HAL_SPI_Receive+0x1ca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d470:	6883      	ldr	r3, [r0, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1b9      	bne.n	800d3ea <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d476:	2304      	movs	r3, #4
 800d478:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d47c:	9500      	str	r5, [sp, #0]
 800d47e:	4613      	mov	r3, r2
 800d480:	460a      	mov	r2, r1
 800d482:	f7ff fe1c 	bl	800d0be <HAL_SPI_TransmitReceive>
 800d486:	4606      	mov	r6, r0
 800d488:	e003      	b.n	800d492 <HAL_SPI_Receive+0xc2>
    __HAL_UNLOCK(hspi);
 800d48a:	2300      	movs	r3, #0
 800d48c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800d490:	2602      	movs	r6, #2
}
 800d492:	4630      	mov	r0, r6
 800d494:	b002      	add	sp, #8
 800d496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800d49a:	2300      	movs	r3, #0
 800d49c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800d4a0:	e7f7      	b.n	800d492 <HAL_SPI_Receive+0xc2>
    SPI_1LINE_RX(hspi);
 800d4a2:	6822      	ldr	r2, [r4, #0]
 800d4a4:	6813      	ldr	r3, [r2, #0]
 800d4a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	e7ca      	b.n	800d444 <HAL_SPI_Receive+0x74>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d4ae:	6822      	ldr	r2, [r4, #0]
 800d4b0:	6813      	ldr	r3, [r2, #0]
 800d4b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d4b6:	6013      	str	r3, [r2, #0]
 800d4b8:	e7d4      	b.n	800d464 <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4ba:	f7fb ff3b 	bl	8009334 <HAL_GetTick>
 800d4be:	1bc0      	subs	r0, r0, r7
 800d4c0:	42a8      	cmp	r0, r5
 800d4c2:	d302      	bcc.n	800d4ca <HAL_SPI_Receive+0xfa>
 800d4c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d4c8:	d11a      	bne.n	800d500 <HAL_SPI_Receive+0x130>
 800d4ca:	b1cd      	cbz	r5, 800d500 <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0UL)
 800d4cc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f000 808a 	beq.w	800d5ec <HAL_SPI_Receive+0x21c>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	6959      	ldr	r1, [r3, #20]
 800d4dc:	f248 0208 	movw	r2, #32776	; 0x8008
 800d4e0:	4211      	tst	r1, r2
 800d4e2:	d0ea      	beq.n	800d4ba <HAL_SPI_Receive+0xea>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d4e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e8:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d4ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d4f0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800d4f4:	b292      	uxth	r2, r2
 800d4f6:	3a01      	subs	r2, #1
 800d4f8:	b292      	uxth	r2, r2
 800d4fa:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800d4fe:	e7e5      	b.n	800d4cc <HAL_SPI_Receive+0xfc>
          SPI_CloseTransfer(hspi);
 800d500:	4620      	mov	r0, r4
 800d502:	f7ff fc7d 	bl	800ce00 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800d506:	2300      	movs	r3, #0
 800d508:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d50c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d514:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d518:	2301      	movs	r3, #1
 800d51a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800d51e:	2603      	movs	r6, #3
 800d520:	e7b7      	b.n	800d492 <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d522:	f7fb ff07 	bl	8009334 <HAL_GetTick>
 800d526:	1bc0      	subs	r0, r0, r7
 800d528:	42a8      	cmp	r0, r5
 800d52a:	d302      	bcc.n	800d532 <HAL_SPI_Receive+0x162>
 800d52c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d530:	d119      	bne.n	800d566 <HAL_SPI_Receive+0x196>
 800d532:	b1c5      	cbz	r5, 800d566 <HAL_SPI_Receive+0x196>
    while (hspi->RxXferCount > 0UL)
 800d534:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d538:	b29b      	uxth	r3, r3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d056      	beq.n	800d5ec <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	695b      	ldr	r3, [r3, #20]
 800d542:	f013 0f01 	tst.w	r3, #1
 800d546:	d0ec      	beq.n	800d522 <HAL_SPI_Receive+0x152>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d54a:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800d54e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d552:	3302      	adds	r3, #2
 800d554:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d556:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	3b01      	subs	r3, #1
 800d55e:	b29b      	uxth	r3, r3
 800d560:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800d564:	e7e6      	b.n	800d534 <HAL_SPI_Receive+0x164>
          SPI_CloseTransfer(hspi);
 800d566:	4620      	mov	r0, r4
 800d568:	f7ff fc4a 	bl	800ce00 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800d56c:	2300      	movs	r3, #0
 800d56e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d572:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d57a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d57e:	2301      	movs	r3, #1
 800d580:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800d584:	2603      	movs	r6, #3
 800d586:	e784      	b.n	800d492 <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d588:	f7fb fed4 	bl	8009334 <HAL_GetTick>
 800d58c:	1bc0      	subs	r0, r0, r7
 800d58e:	42a8      	cmp	r0, r5
 800d590:	d302      	bcc.n	800d598 <HAL_SPI_Receive+0x1c8>
 800d592:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d596:	d118      	bne.n	800d5ca <HAL_SPI_Receive+0x1fa>
 800d598:	b1bd      	cbz	r5, 800d5ca <HAL_SPI_Receive+0x1fa>
    while (hspi->RxXferCount > 0UL)
 800d59a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	b323      	cbz	r3, 800d5ec <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	695a      	ldr	r2, [r3, #20]
 800d5a6:	f012 0f01 	tst.w	r2, #1
 800d5aa:	d0ed      	beq.n	800d588 <HAL_SPI_Receive+0x1b8>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d5ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5b2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d5b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d5ba:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800d5c8:	e7e7      	b.n	800d59a <HAL_SPI_Receive+0x1ca>
          SPI_CloseTransfer(hspi);
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f7ff fc18 	bl	800ce00 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d5d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d5da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800d5e8:	2603      	movs	r6, #3
 800d5ea:	e752      	b.n	800d492 <HAL_SPI_Receive+0xc2>
  SPI_CloseTransfer(hspi);
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f7ff fc07 	bl	800ce00 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d5fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d602:	2b00      	cmp	r3, #0
 800d604:	f47f af45 	bne.w	800d492 <HAL_SPI_Receive+0xc2>
  return errorcode;
 800d608:	2600      	movs	r6, #0
 800d60a:	e742      	b.n	800d492 <HAL_SPI_Receive+0xc2>
  __HAL_LOCK(hspi);
 800d60c:	2602      	movs	r6, #2
 800d60e:	e740      	b.n	800d492 <HAL_SPI_Receive+0xc2>
 800d610:	ffff0000 	.word	0xffff0000

0800d614 <HAL_SPI_Transmit_IT>:
  __HAL_LOCK(hspi);
 800d614:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d060      	beq.n	800d6de <HAL_SPI_Transmit_IT+0xca>
 800d61c:	2301      	movs	r3, #1
 800d61e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if ((pData == NULL) || (Size == 0UL))
 800d622:	2a00      	cmp	r2, #0
 800d624:	bf18      	it	ne
 800d626:	2900      	cmpne	r1, #0
 800d628:	d03b      	beq.n	800d6a2 <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d62a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b01      	cmp	r3, #1
 800d632:	d13b      	bne.n	800d6ac <HAL_SPI_Transmit_IT+0x98>
{
 800d634:	b410      	push	{r4}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d636:	2303      	movs	r3, #3
 800d638:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d63c:	2300      	movs	r3, #0
 800d63e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d642:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d644:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d648:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800d64c:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d64e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d652:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800d656:	6703      	str	r3, [r0, #112]	; 0x70
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d658:	68c3      	ldr	r3, [r0, #12]
 800d65a:	2b0f      	cmp	r3, #15
 800d65c:	d92b      	bls.n	800d6b6 <HAL_SPI_Transmit_IT+0xa2>
    hspi->TxISR = SPI_TxISR_32BIT;
 800d65e:	4b21      	ldr	r3, [pc, #132]	; (800d6e4 <HAL_SPI_Transmit_IT+0xd0>)
 800d660:	6743      	str	r3, [r0, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d662:	6883      	ldr	r3, [r0, #8]
 800d664:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d668:	d02d      	beq.n	800d6c6 <HAL_SPI_Transmit_IT+0xb2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d66a:	6801      	ldr	r1, [r0, #0]
 800d66c:	684c      	ldr	r4, [r1, #4]
 800d66e:	4b1e      	ldr	r3, [pc, #120]	; (800d6e8 <HAL_SPI_Transmit_IT+0xd4>)
 800d670:	4023      	ands	r3, r4
 800d672:	431a      	orrs	r2, r3
 800d674:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800d676:	6802      	ldr	r2, [r0, #0]
 800d678:	6813      	ldr	r3, [r2, #0]
 800d67a:	f043 0301 	orr.w	r3, r3, #1
 800d67e:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800d680:	6802      	ldr	r2, [r0, #0]
 800d682:	6911      	ldr	r1, [r2, #16]
 800d684:	f240 732a 	movw	r3, #1834	; 0x72a
 800d688:	430b      	orrs	r3, r1
 800d68a:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d68c:	6843      	ldr	r3, [r0, #4]
 800d68e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d692:	d01e      	beq.n	800d6d2 <HAL_SPI_Transmit_IT+0xbe>
  __HAL_UNLOCK(hspi);
 800d694:	2300      	movs	r3, #0
 800d696:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800d69a:	4618      	mov	r0, r3
}
 800d69c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6a0:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800d6a8:	2001      	movs	r0, #1
 800d6aa:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800d6b2:	2002      	movs	r0, #2
 800d6b4:	4770      	bx	lr
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6b6:	2b07      	cmp	r3, #7
 800d6b8:	d902      	bls.n	800d6c0 <HAL_SPI_Transmit_IT+0xac>
    hspi->TxISR = SPI_TxISR_16BIT;
 800d6ba:	4b0c      	ldr	r3, [pc, #48]	; (800d6ec <HAL_SPI_Transmit_IT+0xd8>)
 800d6bc:	6743      	str	r3, [r0, #116]	; 0x74
 800d6be:	e7d0      	b.n	800d662 <HAL_SPI_Transmit_IT+0x4e>
    hspi->TxISR = SPI_TxISR_8BIT;
 800d6c0:	4b0b      	ldr	r3, [pc, #44]	; (800d6f0 <HAL_SPI_Transmit_IT+0xdc>)
 800d6c2:	6743      	str	r3, [r0, #116]	; 0x74
 800d6c4:	e7cd      	b.n	800d662 <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 800d6c6:	6801      	ldr	r1, [r0, #0]
 800d6c8:	680b      	ldr	r3, [r1, #0]
 800d6ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d6ce:	600b      	str	r3, [r1, #0]
 800d6d0:	e7cb      	b.n	800d66a <HAL_SPI_Transmit_IT+0x56>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d6d2:	6802      	ldr	r2, [r0, #0]
 800d6d4:	6813      	ldr	r3, [r2, #0]
 800d6d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	e7da      	b.n	800d694 <HAL_SPI_Transmit_IT+0x80>
  __HAL_LOCK(hspi);
 800d6de:	2002      	movs	r0, #2
}
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	0800cdd1 	.word	0x0800cdd1
 800d6e8:	ffff0000 	.word	0xffff0000
 800d6ec:	0800cda1 	.word	0x0800cda1
 800d6f0:	0800cd6f 	.word	0x0800cd6f

0800d6f4 <HAL_SPI_TransmitReceive_IT>:
{
 800d6f4:	b430      	push	{r4, r5}
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d6f6:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hspi);
 800d6f8:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 800d6fc:	f1bc 0f01 	cmp.w	ip, #1
 800d700:	f000 8101 	beq.w	800d906 <HAL_SPI_TransmitReceive_IT+0x212>
 800d704:	f04f 0c01 	mov.w	ip, #1
 800d708:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80
  tmp_state  = hspi->State;
 800d70c:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
 800d710:	fa5f fc8c 	uxtb.w	ip, ip
  tmp_mode   = hspi->Init.Mode;
 800d714:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d716:	f1bc 0f01 	cmp.w	ip, #1
 800d71a:	d008      	beq.n	800d72e <HAL_SPI_TransmitReceive_IT+0x3a>
 800d71c:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800d720:	d136      	bne.n	800d790 <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d722:	6885      	ldr	r5, [r0, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800d724:	2d00      	cmp	r5, #0
 800d726:	d133      	bne.n	800d790 <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d728:	f1bc 0f04 	cmp.w	ip, #4
 800d72c:	d130      	bne.n	800d790 <HAL_SPI_TransmitReceive_IT+0x9c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d72e:	2a00      	cmp	r2, #0
 800d730:	bf18      	it	ne
 800d732:	2900      	cmpne	r1, #0
 800d734:	d032      	beq.n	800d79c <HAL_SPI_TransmitReceive_IT+0xa8>
 800d736:	2b00      	cmp	r3, #0
 800d738:	d030      	beq.n	800d79c <HAL_SPI_TransmitReceive_IT+0xa8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d73a:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800d73e:	b2ed      	uxtb	r5, r5
 800d740:	2d04      	cmp	r5, #4
 800d742:	d002      	beq.n	800d74a <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d744:	2505      	movs	r5, #5
 800d746:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d74a:	2500      	movs	r5, #0
 800d74c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d750:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d752:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d756:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d75a:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d75c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d760:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 800d764:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d768:	b292      	uxth	r2, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d76a:	68c1      	ldr	r1, [r0, #12]
 800d76c:	290f      	cmp	r1, #15
 800d76e:	d91a      	bls.n	800d7a6 <HAL_SPI_TransmitReceive_IT+0xb2>
    hspi->TxISR     = SPI_TxISR_32BIT;
 800d770:	4966      	ldr	r1, [pc, #408]	; (800d90c <HAL_SPI_TransmitReceive_IT+0x218>)
 800d772:	6741      	str	r1, [r0, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800d774:	4966      	ldr	r1, [pc, #408]	; (800d910 <HAL_SPI_TransmitReceive_IT+0x21c>)
 800d776:	6701      	str	r1, [r0, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d778:	6865      	ldr	r5, [r4, #4]
 800d77a:	4966      	ldr	r1, [pc, #408]	; (800d914 <HAL_SPI_TransmitReceive_IT+0x220>)
 800d77c:	4029      	ands	r1, r5
 800d77e:	430b      	orrs	r3, r1
 800d780:	6063      	str	r3, [r4, #4]
  __HAL_SPI_ENABLE(hspi);
 800d782:	6801      	ldr	r1, [r0, #0]
 800d784:	680b      	ldr	r3, [r1, #0]
 800d786:	f043 0301 	orr.w	r3, r3, #1
 800d78a:	600b      	str	r3, [r1, #0]
  uint32_t max_fifo_length = 0UL;
 800d78c:	2100      	movs	r1, #0
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800d78e:	e041      	b.n	800d814 <HAL_SPI_TransmitReceive_IT+0x120>
    __HAL_UNLOCK(hspi);
 800d790:	2300      	movs	r3, #0
 800d792:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800d796:	2002      	movs	r0, #2
}
 800d798:	bc30      	pop	{r4, r5}
 800d79a:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800d79c:	2300      	movs	r3, #0
 800d79e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	e7f8      	b.n	800d798 <HAL_SPI_TransmitReceive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7a6:	2907      	cmp	r1, #7
 800d7a8:	d904      	bls.n	800d7b4 <HAL_SPI_TransmitReceive_IT+0xc0>
    hspi->RxISR     = SPI_RxISR_16BIT;
 800d7aa:	495b      	ldr	r1, [pc, #364]	; (800d918 <HAL_SPI_TransmitReceive_IT+0x224>)
 800d7ac:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800d7ae:	495b      	ldr	r1, [pc, #364]	; (800d91c <HAL_SPI_TransmitReceive_IT+0x228>)
 800d7b0:	6741      	str	r1, [r0, #116]	; 0x74
 800d7b2:	e7e1      	b.n	800d778 <HAL_SPI_TransmitReceive_IT+0x84>
    hspi->RxISR     = SPI_RxISR_8BIT;
 800d7b4:	495a      	ldr	r1, [pc, #360]	; (800d920 <HAL_SPI_TransmitReceive_IT+0x22c>)
 800d7b6:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800d7b8:	495a      	ldr	r1, [pc, #360]	; (800d924 <HAL_SPI_TransmitReceive_IT+0x230>)
 800d7ba:	6741      	str	r1, [r0, #116]	; 0x74
 800d7bc:	e7dc      	b.n	800d778 <HAL_SPI_TransmitReceive_IT+0x84>
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7be:	2b07      	cmp	r3, #7
 800d7c0:	d945      	bls.n	800d84e <HAL_SPI_TransmitReceive_IT+0x15a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d7c2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d912      	bls.n	800d7f2 <HAL_SPI_TransmitReceive_IT+0xfe>
 800d7cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d7ce:	b183      	cbz	r3, 800d7f2 <HAL_SPI_TransmitReceive_IT+0xfe>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d7d0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d7d6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d7d8:	3304      	adds	r3, #4
 800d7da:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d7dc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	3b02      	subs	r3, #2
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d7ea:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d7ee:	b292      	uxth	r2, r2
 800d7f0:	e00f      	b.n	800d812 <HAL_SPI_TransmitReceive_IT+0x11e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d7f2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d7f4:	881b      	ldrh	r3, [r3, #0]
 800d7f6:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7f8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d7fa:	3302      	adds	r3, #2
 800d7fc:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800d7fe:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d802:	b29b      	uxth	r3, r3
 800d804:	3b01      	subs	r3, #1
 800d806:	b29b      	uxth	r3, r3
 800d808:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d80c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d810:	b292      	uxth	r2, r2
      max_fifo_length++;
 800d812:	3101      	adds	r1, #1
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800d814:	6805      	ldr	r5, [r0, #0]
 800d816:	696b      	ldr	r3, [r5, #20]
 800d818:	f013 0f02 	tst.w	r3, #2
 800d81c:	d05f      	beq.n	800d8de <HAL_SPI_TransmitReceive_IT+0x1ea>
 800d81e:	2a00      	cmp	r2, #0
 800d820:	d05d      	beq.n	800d8de <HAL_SPI_TransmitReceive_IT+0x1ea>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 800d822:	290f      	cmp	r1, #15
 800d824:	d856      	bhi.n	800d8d4 <HAL_SPI_TransmitReceive_IT+0x1e0>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d826:	68c3      	ldr	r3, [r0, #12]
 800d828:	2b0f      	cmp	r3, #15
 800d82a:	d9c8      	bls.n	800d7be <HAL_SPI_TransmitReceive_IT+0xca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d82c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	622b      	str	r3, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d832:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d834:	3304      	adds	r3, #4
 800d836:	65c3      	str	r3, [r0, #92]	; 0x5c
        hspi->TxXferCount--;
 800d838:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	3b01      	subs	r3, #1
 800d840:	b29b      	uxth	r3, r3
 800d842:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 800d846:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d84a:	b292      	uxth	r2, r2
 800d84c:	e7e1      	b.n	800d812 <HAL_SPI_TransmitReceive_IT+0x11e>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d84e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d852:	b29b      	uxth	r3, r3
 800d854:	2b03      	cmp	r3, #3
 800d856:	d913      	bls.n	800d880 <HAL_SPI_TransmitReceive_IT+0x18c>
 800d858:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d85a:	2b40      	cmp	r3, #64	; 0x40
 800d85c:	d910      	bls.n	800d880 <HAL_SPI_TransmitReceive_IT+0x18c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d85e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d864:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d866:	3304      	adds	r3, #4
 800d868:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d86a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d86e:	b29b      	uxth	r3, r3
 800d870:	3b04      	subs	r3, #4
 800d872:	b29b      	uxth	r3, r3
 800d874:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d878:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d87c:	b292      	uxth	r2, r2
 800d87e:	e7c8      	b.n	800d812 <HAL_SPI_TransmitReceive_IT+0x11e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d880:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d884:	b29b      	uxth	r3, r3
 800d886:	2b01      	cmp	r3, #1
 800d888:	d912      	bls.n	800d8b0 <HAL_SPI_TransmitReceive_IT+0x1bc>
 800d88a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d88c:	b183      	cbz	r3, 800d8b0 <HAL_SPI_TransmitReceive_IT+0x1bc>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d88e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d894:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d896:	3302      	adds	r3, #2
 800d898:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d89a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	3b02      	subs	r3, #2
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d8a8:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d8ac:	b292      	uxth	r2, r2
 800d8ae:	e7b0      	b.n	800d812 <HAL_SPI_TransmitReceive_IT+0x11e>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d8b0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d8b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800d8be:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800d8cc:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d8d0:	b292      	uxth	r2, r2
 800d8d2:	e79e      	b.n	800d812 <HAL_SPI_TransmitReceive_IT+0x11e>
      __HAL_UNLOCK(hspi);
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      return errorcode;
 800d8da:	2002      	movs	r0, #2
 800d8dc:	e75c      	b.n	800d798 <HAL_SPI_TransmitReceive_IT+0xa4>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 800d8de:	692a      	ldr	r2, [r5, #16]
 800d8e0:	f240 736c 	movw	r3, #1900	; 0x76c
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	612b      	str	r3, [r5, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d8e8:	6843      	ldr	r3, [r0, #4]
 800d8ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d8ee:	d004      	beq.n	800d8fa <HAL_SPI_TransmitReceive_IT+0x206>
  __HAL_UNLOCK(hspi);
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	e74e      	b.n	800d798 <HAL_SPI_TransmitReceive_IT+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d8fa:	6802      	ldr	r2, [r0, #0]
 800d8fc:	6813      	ldr	r3, [r2, #0]
 800d8fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d902:	6013      	str	r3, [r2, #0]
 800d904:	e7f4      	b.n	800d8f0 <HAL_SPI_TransmitReceive_IT+0x1fc>
  __HAL_LOCK(hspi);
 800d906:	2002      	movs	r0, #2
 800d908:	e746      	b.n	800d798 <HAL_SPI_TransmitReceive_IT+0xa4>
 800d90a:	bf00      	nop
 800d90c:	0800cdd1 	.word	0x0800cdd1
 800d910:	0800cd3f 	.word	0x0800cd3f
 800d914:	ffff0000 	.word	0xffff0000
 800d918:	0800cd0f 	.word	0x0800cd0f
 800d91c:	0800cda1 	.word	0x0800cda1
 800d920:	0800ccdd 	.word	0x0800ccdd
 800d924:	0800cd6f 	.word	0x0800cd6f

0800d928 <HAL_SPI_Receive_IT>:
{
 800d928:	b510      	push	{r4, lr}
 800d92a:	4684      	mov	ip, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d92c:	6884      	ldr	r4, [r0, #8]
 800d92e:	b91c      	cbnz	r4, 800d938 <HAL_SPI_Receive_IT+0x10>
 800d930:	6843      	ldr	r3, [r0, #4]
 800d932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d936:	d04a      	beq.n	800d9ce <HAL_SPI_Receive_IT+0xa6>
  __HAL_LOCK(hspi);
 800d938:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d06f      	beq.n	800da20 <HAL_SPI_Receive_IT+0xf8>
 800d940:	2301      	movs	r3, #1
 800d942:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800d946:	f89c 0081 	ldrb.w	r0, [ip, #129]	; 0x81
 800d94a:	b2c0      	uxtb	r0, r0
 800d94c:	4298      	cmp	r0, r3
 800d94e:	d146      	bne.n	800d9de <HAL_SPI_Receive_IT+0xb6>
  if ((pData == NULL) || (Size == 0UL))
 800d950:	2a00      	cmp	r2, #0
 800d952:	bf18      	it	ne
 800d954:	2900      	cmpne	r1, #0
 800d956:	d047      	beq.n	800d9e8 <HAL_SPI_Receive_IT+0xc0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d958:	2304      	movs	r3, #4
 800d95a:	f88c 3081 	strb.w	r3, [ip, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d95e:	2300      	movs	r3, #0
 800d960:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d964:	f8cc 1064 	str.w	r1, [ip, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d968:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d96c:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800d970:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d974:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d978:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->TxISR       = NULL;
 800d97c:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d980:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800d984:	2b0f      	cmp	r3, #15
 800d986:	d933      	bls.n	800d9f0 <HAL_SPI_Receive_IT+0xc8>
    hspi->RxISR = SPI_RxISR_32BIT;
 800d988:	4b26      	ldr	r3, [pc, #152]	; (800da24 <HAL_SPI_Receive_IT+0xfc>)
 800d98a:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d98e:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
 800d992:	d037      	beq.n	800da04 <HAL_SPI_Receive_IT+0xdc>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d994:	f8dc 1000 	ldr.w	r1, [ip]
 800d998:	6848      	ldr	r0, [r1, #4]
 800d99a:	4b23      	ldr	r3, [pc, #140]	; (800da28 <HAL_SPI_Receive_IT+0x100>)
 800d99c:	4003      	ands	r3, r0
 800d99e:	431a      	orrs	r2, r3
 800d9a0:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800d9a2:	f8dc 2000 	ldr.w	r2, [ip]
 800d9a6:	6813      	ldr	r3, [r2, #0]
 800d9a8:	f043 0301 	orr.w	r3, r3, #1
 800d9ac:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800d9ae:	f8dc 2000 	ldr.w	r2, [ip]
 800d9b2:	6911      	ldr	r1, [r2, #16]
 800d9b4:	f240 7349 	movw	r3, #1865	; 0x749
 800d9b8:	430b      	orrs	r3, r1
 800d9ba:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d9c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9c4:	d025      	beq.n	800da12 <HAL_SPI_Receive_IT+0xea>
  __HAL_UNLOCK(hspi);
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	f88c 0080 	strb.w	r0, [ip, #128]	; 0x80
}
 800d9cc:	bd10      	pop	{r4, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d9ce:	2304      	movs	r3, #4
 800d9d0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	460a      	mov	r2, r1
 800d9d8:	f7ff fe8c 	bl	800d6f4 <HAL_SPI_TransmitReceive_IT>
 800d9dc:	e7f6      	b.n	800d9cc <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800d9de:	2300      	movs	r3, #0
 800d9e0:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800d9e4:	2002      	movs	r0, #2
 800d9e6:	e7f1      	b.n	800d9cc <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800d9ee:	e7ed      	b.n	800d9cc <HAL_SPI_Receive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9f0:	2b07      	cmp	r3, #7
 800d9f2:	d903      	bls.n	800d9fc <HAL_SPI_Receive_IT+0xd4>
    hspi->RxISR = SPI_RxISR_16BIT;
 800d9f4:	4b0d      	ldr	r3, [pc, #52]	; (800da2c <HAL_SPI_Receive_IT+0x104>)
 800d9f6:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800d9fa:	e7c8      	b.n	800d98e <HAL_SPI_Receive_IT+0x66>
    hspi->RxISR = SPI_RxISR_8BIT;
 800d9fc:	4b0c      	ldr	r3, [pc, #48]	; (800da30 <HAL_SPI_Receive_IT+0x108>)
 800d9fe:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800da02:	e7c4      	b.n	800d98e <HAL_SPI_Receive_IT+0x66>
    SPI_1LINE_RX(hspi);
 800da04:	f8dc 1000 	ldr.w	r1, [ip]
 800da08:	680b      	ldr	r3, [r1, #0]
 800da0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da0e:	600b      	str	r3, [r1, #0]
 800da10:	e7c0      	b.n	800d994 <HAL_SPI_Receive_IT+0x6c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800da12:	f8dc 2000 	ldr.w	r2, [ip]
 800da16:	6813      	ldr	r3, [r2, #0]
 800da18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da1c:	6013      	str	r3, [r2, #0]
 800da1e:	e7d2      	b.n	800d9c6 <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 800da20:	2002      	movs	r0, #2
 800da22:	e7d3      	b.n	800d9cc <HAL_SPI_Receive_IT+0xa4>
 800da24:	0800cd3f 	.word	0x0800cd3f
 800da28:	ffff0000 	.word	0xffff0000
 800da2c:	0800cd0f 	.word	0x0800cd0f
 800da30:	0800ccdd 	.word	0x0800ccdd

0800da34 <HAL_SPI_TxRxCpltCallback>:
}
 800da34:	4770      	bx	lr

0800da36 <HAL_SPI_ErrorCallback>:
}
 800da36:	4770      	bx	lr

0800da38 <HAL_SPI_IRQHandler>:
{
 800da38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800da3e:	6806      	ldr	r6, [r0, #0]
 800da40:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800da44:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800da48:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 800da4c:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800da50:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800da54:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800da56:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800da5a:	2b04      	cmp	r3, #4
 800da5c:	d03b      	beq.n	800dad6 <HAL_SPI_IRQHandler+0x9e>
  uint32_t handled  = 0UL;
 800da5e:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800da60:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800da64:	f1b8 0f01 	cmp.w	r8, #1
 800da68:	d03c      	beq.n	800dae4 <HAL_SPI_IRQHandler+0xac>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800da6a:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800da6e:	2a02      	cmp	r2, #2
 800da70:	d03d      	beq.n	800daee <HAL_SPI_IRQHandler+0xb6>
  if (handled != 0UL)
 800da72:	2b00      	cmp	r3, #0
 800da74:	d13e      	bne.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800da76:	f015 0f08 	tst.w	r5, #8
 800da7a:	d071      	beq.n	800db60 <HAL_SPI_IRQHandler+0x128>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800da7c:	6822      	ldr	r2, [r4, #0]
 800da7e:	6993      	ldr	r3, [r2, #24]
 800da80:	f043 0308 	orr.w	r3, r3, #8
 800da84:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800da86:	6822      	ldr	r2, [r4, #0]
 800da88:	6993      	ldr	r3, [r2, #24]
 800da8a:	f043 0310 	orr.w	r3, r3, #16
 800da8e:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800da90:	6822      	ldr	r2, [r4, #0]
 800da92:	6993      	ldr	r3, [r2, #24]
 800da94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800da98:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800da9a:	6822      	ldr	r2, [r4, #0]
 800da9c:	6913      	ldr	r3, [r2, #16]
 800da9e:	f023 0308 	bic.w	r3, r3, #8
 800daa2:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800daac:	d033      	beq.n	800db16 <HAL_SPI_IRQHandler+0xde>
    SPI_CloseTransfer(hspi);
 800daae:	4620      	mov	r0, r4
 800dab0:	f7ff f9a6 	bl	800ce00 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800dab4:	2301      	movs	r3, #1
 800dab6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d142      	bne.n	800db48 <HAL_SPI_IRQHandler+0x110>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800dac2:	2f05      	cmp	r7, #5
 800dac4:	d044      	beq.n	800db50 <HAL_SPI_IRQHandler+0x118>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800dac6:	2f04      	cmp	r7, #4
 800dac8:	d046      	beq.n	800db58 <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800daca:	2f03      	cmp	r7, #3
 800dacc:	d112      	bne.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxCpltCallback(hspi);
 800dace:	4620      	mov	r0, r4
 800dad0:	f7f5 f8a8 	bl	8002c24 <HAL_SPI_TxCpltCallback>
    return;
 800dad4:	e00e      	b.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
    hspi->TxISR(hspi);
 800dad6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800dad8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800dada:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dadc:	4620      	mov	r0, r4
 800dade:	4798      	blx	r3
    handled = 1UL;
 800dae0:	2301      	movs	r3, #1
 800dae2:	e7bd      	b.n	800da60 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800dae4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dae6:	4620      	mov	r0, r4
 800dae8:	4798      	blx	r3
    handled = 1UL;
 800daea:	4643      	mov	r3, r8
 800daec:	e7bd      	b.n	800da6a <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 800daee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800daf0:	4620      	mov	r0, r4
 800daf2:	4798      	blx	r3
}
 800daf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800daf8:	2b07      	cmp	r3, #7
 800dafa:	d91c      	bls.n	800db36 <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dafc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dafe:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800db00:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800db02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db04:	3302      	adds	r3, #2
 800db06:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800db08:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	3b01      	subs	r3, #1
 800db10:	b29b      	uxth	r3, r3
 800db12:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800db16:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0c6      	beq.n	800daae <HAL_SPI_IRQHandler+0x76>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800db20:	68e3      	ldr	r3, [r4, #12]
 800db22:	2b0f      	cmp	r3, #15
 800db24:	d9e8      	bls.n	800daf8 <HAL_SPI_IRQHandler+0xc0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db26:	6822      	ldr	r2, [r4, #0]
 800db28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db2c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800db2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db30:	3304      	adds	r3, #4
 800db32:	6663      	str	r3, [r4, #100]	; 0x64
 800db34:	e7e8      	b.n	800db08 <HAL_SPI_IRQHandler+0xd0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db36:	6822      	ldr	r2, [r4, #0]
 800db38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db3a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800db3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800db40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db42:	3301      	adds	r3, #1
 800db44:	6663      	str	r3, [r4, #100]	; 0x64
 800db46:	e7df      	b.n	800db08 <HAL_SPI_IRQHandler+0xd0>
      HAL_SPI_ErrorCallback(hspi);
 800db48:	4620      	mov	r0, r4
 800db4a:	f7ff ff74 	bl	800da36 <HAL_SPI_ErrorCallback>
      return;
 800db4e:	e7d1      	b.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxRxCpltCallback(hspi);
 800db50:	4620      	mov	r0, r4
 800db52:	f7ff ff6f 	bl	800da34 <HAL_SPI_TxRxCpltCallback>
 800db56:	e7cd      	b.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_RxCpltCallback(hspi);
 800db58:	4620      	mov	r0, r4
 800db5a:	f7f5 f859 	bl	8002c10 <HAL_SPI_RxCpltCallback>
 800db5e:	e7c9      	b.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800db60:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800db64:	d002      	beq.n	800db6c <HAL_SPI_IRQHandler+0x134>
 800db66:	f01a 0f08 	tst.w	sl, #8
 800db6a:	d173      	bne.n	800dc54 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800db6c:	f415 7f58 	tst.w	r5, #864	; 0x360
 800db70:	d0c0      	beq.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800db72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800db76:	d00a      	beq.n	800db8e <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800db78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800db7c:	f043 0304 	orr.w	r3, r3, #4
 800db80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db84:	6822      	ldr	r2, [r4, #0]
 800db86:	6993      	ldr	r3, [r2, #24]
 800db88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db8c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800db8e:	f415 7f00 	tst.w	r5, #512	; 0x200
 800db92:	d00a      	beq.n	800dbaa <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800db94:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800db98:	f043 0301 	orr.w	r3, r3, #1
 800db9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dba0:	6822      	ldr	r2, [r4, #0]
 800dba2:	6993      	ldr	r3, [r2, #24]
 800dba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dba8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800dbaa:	f415 7f80 	tst.w	r5, #256	; 0x100
 800dbae:	d00a      	beq.n	800dbc6 <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dbb0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800dbb4:	f043 0308 	orr.w	r3, r3, #8
 800dbb8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dbbc:	6822      	ldr	r2, [r4, #0]
 800dbbe:	6993      	ldr	r3, [r2, #24]
 800dbc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbc4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800dbc6:	f015 0f20 	tst.w	r5, #32
 800dbca:	d00a      	beq.n	800dbe2 <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dbcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800dbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbd4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dbd8:	6822      	ldr	r2, [r4, #0]
 800dbda:	6993      	ldr	r3, [r2, #24]
 800dbdc:	f043 0320 	orr.w	r3, r3, #32
 800dbe0:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbe2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d084      	beq.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE(hspi);
 800dbea:	6822      	ldr	r2, [r4, #0]
 800dbec:	6813      	ldr	r3, [r2, #0]
 800dbee:	f023 0301 	bic.w	r3, r3, #1
 800dbf2:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800dbf4:	6822      	ldr	r2, [r4, #0]
 800dbf6:	6911      	ldr	r1, [r2, #16]
 800dbf8:	4b1d      	ldr	r3, [pc, #116]	; (800dc70 <HAL_SPI_IRQHandler+0x238>)
 800dbfa:	400b      	ands	r3, r1
 800dbfc:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800dbfe:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 800dc02:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 800dc06:	d12b      	bne.n	800dc60 <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dc08:	6822      	ldr	r2, [r4, #0]
 800dc0a:	6893      	ldr	r3, [r2, #8]
 800dc0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800dc10:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800dc12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800dc14:	b15b      	cbz	r3, 800dc2e <HAL_SPI_IRQHandler+0x1f6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800dc16:	4a17      	ldr	r2, [pc, #92]	; (800dc74 <HAL_SPI_IRQHandler+0x23c>)
 800dc18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dc1a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800dc1c:	f7fb fcd2 	bl	80095c4 <HAL_DMA_Abort_IT>
 800dc20:	b128      	cbz	r0, 800dc2e <HAL_SPI_IRQHandler+0x1f6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dc22:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800dc26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800dc2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f43f af5f 	beq.w	800daf4 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dc36:	4a0f      	ldr	r2, [pc, #60]	; (800dc74 <HAL_SPI_IRQHandler+0x23c>)
 800dc38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dc3a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800dc3c:	f7fb fcc2 	bl	80095c4 <HAL_DMA_Abort_IT>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	f43f af57 	beq.w	800daf4 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dc46:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800dc4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800dc52:	e74f      	b.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800dc54:	6822      	ldr	r2, [r4, #0]
 800dc56:	6993      	ldr	r3, [r2, #24]
 800dc58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc5c:	6193      	str	r3, [r2, #24]
    return;
 800dc5e:	e749      	b.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 800dc60:	2301      	movs	r3, #1
 800dc62:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800dc66:	4620      	mov	r0, r4
 800dc68:	f7ff fee5 	bl	800da36 <HAL_SPI_ErrorCallback>
    return;
 800dc6c:	e742      	b.n	800daf4 <HAL_SPI_IRQHandler+0xbc>
 800dc6e:	bf00      	nop
 800dc70:	fffffc94 	.word	0xfffffc94
 800dc74:	0800dc79 	.word	0x0800dc79

0800dc78 <SPI_DMAAbortOnError>:
{
 800dc78:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800dc82:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800dc86:	2301      	movs	r3, #1
 800dc88:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800dc8c:	f7ff fed3 	bl	800da36 <HAL_SPI_ErrorCallback>
}
 800dc90:	bd08      	pop	{r3, pc}

0800dc92 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800dc92:	4770      	bx	lr

0800dc94 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d13a      	bne.n	800dd14 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc9e:	2302      	movs	r3, #2
 800dca0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dca4:	6802      	ldr	r2, [r0, #0]
 800dca6:	68d3      	ldr	r3, [r2, #12]
 800dca8:	f043 0301 	orr.w	r3, r3, #1
 800dcac:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcae:	6803      	ldr	r3, [r0, #0]
 800dcb0:	4a1a      	ldr	r2, [pc, #104]	; (800dd1c <HAL_TIM_Base_Start_IT+0x88>)
 800dcb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcb6:	bf18      	it	ne
 800dcb8:	4293      	cmpne	r3, r2
 800dcba:	d01d      	beq.n	800dcf8 <HAL_TIM_Base_Start_IT+0x64>
 800dcbc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d019      	beq.n	800dcf8 <HAL_TIM_Base_Start_IT+0x64>
 800dcc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d015      	beq.n	800dcf8 <HAL_TIM_Base_Start_IT+0x64>
 800dccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d011      	beq.n	800dcf8 <HAL_TIM_Base_Start_IT+0x64>
 800dcd4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d00d      	beq.n	800dcf8 <HAL_TIM_Base_Start_IT+0x64>
 800dcdc:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d009      	beq.n	800dcf8 <HAL_TIM_Base_Start_IT+0x64>
 800dce4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d005      	beq.n	800dcf8 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	f042 0201 	orr.w	r2, r2, #1
 800dcf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dcf8:	6899      	ldr	r1, [r3, #8]
 800dcfa:	4a09      	ldr	r2, [pc, #36]	; (800dd20 <HAL_TIM_Base_Start_IT+0x8c>)
 800dcfc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcfe:	2a06      	cmp	r2, #6
 800dd00:	bf18      	it	ne
 800dd02:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800dd06:	d007      	beq.n	800dd18 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	f042 0201 	orr.w	r2, r2, #1
 800dd0e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800dd10:	2000      	movs	r0, #0
 800dd12:	4770      	bx	lr
    return HAL_ERROR;
 800dd14:	2001      	movs	r0, #1
 800dd16:	4770      	bx	lr
  return HAL_OK;
 800dd18:	2000      	movs	r0, #0
}
 800dd1a:	4770      	bx	lr
 800dd1c:	40010000 	.word	0x40010000
 800dd20:	00010007 	.word	0x00010007

0800dd24 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd24:	4770      	bx	lr

0800dd26 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd26:	4770      	bx	lr

0800dd28 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd28:	4770      	bx	lr

0800dd2a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_TIM_IRQHandler>:
{
 800dd2c:	b510      	push	{r4, lr}
 800dd2e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd30:	6803      	ldr	r3, [r0, #0]
 800dd32:	691a      	ldr	r2, [r3, #16]
 800dd34:	f012 0f02 	tst.w	r2, #2
 800dd38:	d011      	beq.n	800dd5e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd3a:	68da      	ldr	r2, [r3, #12]
 800dd3c:	f012 0f02 	tst.w	r2, #2
 800dd40:	d00d      	beq.n	800dd5e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd42:	f06f 0202 	mvn.w	r2, #2
 800dd46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd4c:	6803      	ldr	r3, [r0, #0]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	f013 0f03 	tst.w	r3, #3
 800dd54:	d079      	beq.n	800de4a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800dd56:	f7ff ffe6 	bl	800dd26 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	691a      	ldr	r2, [r3, #16]
 800dd62:	f012 0f04 	tst.w	r2, #4
 800dd66:	d012      	beq.n	800dd8e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dd68:	68da      	ldr	r2, [r3, #12]
 800dd6a:	f012 0f04 	tst.w	r2, #4
 800dd6e:	d00e      	beq.n	800dd8e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dd70:	f06f 0204 	mvn.w	r2, #4
 800dd74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd76:	2302      	movs	r3, #2
 800dd78:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dd82:	d068      	beq.n	800de56 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800dd84:	4620      	mov	r0, r4
 800dd86:	f7ff ffce 	bl	800dd26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	691a      	ldr	r2, [r3, #16]
 800dd92:	f012 0f08 	tst.w	r2, #8
 800dd96:	d012      	beq.n	800ddbe <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dd98:	68da      	ldr	r2, [r3, #12]
 800dd9a:	f012 0f08 	tst.w	r2, #8
 800dd9e:	d00e      	beq.n	800ddbe <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dda0:	f06f 0208 	mvn.w	r2, #8
 800dda4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dda6:	2304      	movs	r3, #4
 800dda8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ddaa:	6823      	ldr	r3, [r4, #0]
 800ddac:	69db      	ldr	r3, [r3, #28]
 800ddae:	f013 0f03 	tst.w	r3, #3
 800ddb2:	d057      	beq.n	800de64 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f7ff ffb6 	bl	800dd26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	691a      	ldr	r2, [r3, #16]
 800ddc2:	f012 0f10 	tst.w	r2, #16
 800ddc6:	d012      	beq.n	800ddee <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ddc8:	68da      	ldr	r2, [r3, #12]
 800ddca:	f012 0f10 	tst.w	r2, #16
 800ddce:	d00e      	beq.n	800ddee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ddd0:	f06f 0210 	mvn.w	r2, #16
 800ddd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ddd6:	2308      	movs	r3, #8
 800ddd8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ddda:	6823      	ldr	r3, [r4, #0]
 800dddc:	69db      	ldr	r3, [r3, #28]
 800ddde:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dde2:	d046      	beq.n	800de72 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800dde4:	4620      	mov	r0, r4
 800dde6:	f7ff ff9e 	bl	800dd26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddea:	2300      	movs	r3, #0
 800ddec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	691a      	ldr	r2, [r3, #16]
 800ddf2:	f012 0f01 	tst.w	r2, #1
 800ddf6:	d003      	beq.n	800de00 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ddf8:	68da      	ldr	r2, [r3, #12]
 800ddfa:	f012 0f01 	tst.w	r2, #1
 800ddfe:	d13f      	bne.n	800de80 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800de00:	6823      	ldr	r3, [r4, #0]
 800de02:	691a      	ldr	r2, [r3, #16]
 800de04:	f012 0f80 	tst.w	r2, #128	; 0x80
 800de08:	d003      	beq.n	800de12 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800de0a:	68da      	ldr	r2, [r3, #12]
 800de0c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800de10:	d13d      	bne.n	800de8e <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	691a      	ldr	r2, [r3, #16]
 800de16:	f412 7f80 	tst.w	r2, #256	; 0x100
 800de1a:	d003      	beq.n	800de24 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800de1c:	68da      	ldr	r2, [r3, #12]
 800de1e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800de22:	d13b      	bne.n	800de9c <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800de24:	6823      	ldr	r3, [r4, #0]
 800de26:	691a      	ldr	r2, [r3, #16]
 800de28:	f012 0f40 	tst.w	r2, #64	; 0x40
 800de2c:	d003      	beq.n	800de36 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800de2e:	68da      	ldr	r2, [r3, #12]
 800de30:	f012 0f40 	tst.w	r2, #64	; 0x40
 800de34:	d139      	bne.n	800deaa <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	691a      	ldr	r2, [r3, #16]
 800de3a:	f012 0f20 	tst.w	r2, #32
 800de3e:	d003      	beq.n	800de48 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800de40:	68da      	ldr	r2, [r3, #12]
 800de42:	f012 0f20 	tst.w	r2, #32
 800de46:	d137      	bne.n	800deb8 <HAL_TIM_IRQHandler+0x18c>
}
 800de48:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800de4a:	f7ff ff6b 	bl	800dd24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de4e:	4620      	mov	r0, r4
 800de50:	f7ff ff6a 	bl	800dd28 <HAL_TIM_PWM_PulseFinishedCallback>
 800de54:	e781      	b.n	800dd5a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de56:	4620      	mov	r0, r4
 800de58:	f7ff ff64 	bl	800dd24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de5c:	4620      	mov	r0, r4
 800de5e:	f7ff ff63 	bl	800dd28 <HAL_TIM_PWM_PulseFinishedCallback>
 800de62:	e792      	b.n	800dd8a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de64:	4620      	mov	r0, r4
 800de66:	f7ff ff5d 	bl	800dd24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de6a:	4620      	mov	r0, r4
 800de6c:	f7ff ff5c 	bl	800dd28 <HAL_TIM_PWM_PulseFinishedCallback>
 800de70:	e7a3      	b.n	800ddba <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de72:	4620      	mov	r0, r4
 800de74:	f7ff ff56 	bl	800dd24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de78:	4620      	mov	r0, r4
 800de7a:	f7ff ff55 	bl	800dd28 <HAL_TIM_PWM_PulseFinishedCallback>
 800de7e:	e7b4      	b.n	800ddea <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800de80:	f06f 0201 	mvn.w	r2, #1
 800de84:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800de86:	4620      	mov	r0, r4
 800de88:	f7f4 fc64 	bl	8002754 <HAL_TIM_PeriodElapsedCallback>
 800de8c:	e7b8      	b.n	800de00 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800de8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800de92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800de94:	4620      	mov	r0, r4
 800de96:	f000 f8ca 	bl	800e02e <HAL_TIMEx_BreakCallback>
 800de9a:	e7ba      	b.n	800de12 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800de9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dea0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800dea2:	4620      	mov	r0, r4
 800dea4:	f000 f8c4 	bl	800e030 <HAL_TIMEx_Break2Callback>
 800dea8:	e7bc      	b.n	800de24 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800deaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800deae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800deb0:	4620      	mov	r0, r4
 800deb2:	f7ff ff3a 	bl	800dd2a <HAL_TIM_TriggerCallback>
 800deb6:	e7be      	b.n	800de36 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800deb8:	f06f 0220 	mvn.w	r2, #32
 800debc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800debe:	4620      	mov	r0, r4
 800dec0:	f000 f8b4 	bl	800e02c <HAL_TIMEx_CommutCallback>
}
 800dec4:	e7c0      	b.n	800de48 <HAL_TIM_IRQHandler+0x11c>
	...

0800dec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dec8:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800deca:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800decc:	4a39      	ldr	r2, [pc, #228]	; (800dfb4 <TIM_Base_SetConfig+0xec>)
 800dece:	4290      	cmp	r0, r2
 800ded0:	bf14      	ite	ne
 800ded2:	f04f 0e00 	movne.w	lr, #0
 800ded6:	f04f 0e01 	moveq.w	lr, #1
 800deda:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800dede:	bf14      	ite	ne
 800dee0:	4672      	movne	r2, lr
 800dee2:	f04e 0201 	orreq.w	r2, lr, #1
 800dee6:	b9aa      	cbnz	r2, 800df14 <TIM_Base_SetConfig+0x4c>
 800dee8:	4c33      	ldr	r4, [pc, #204]	; (800dfb8 <TIM_Base_SetConfig+0xf0>)
 800deea:	42a0      	cmp	r0, r4
 800deec:	bf14      	ite	ne
 800deee:	2400      	movne	r4, #0
 800def0:	2401      	moveq	r4, #1
 800def2:	4d32      	ldr	r5, [pc, #200]	; (800dfbc <TIM_Base_SetConfig+0xf4>)
 800def4:	42a8      	cmp	r0, r5
 800def6:	d00d      	beq.n	800df14 <TIM_Base_SetConfig+0x4c>
 800def8:	b964      	cbnz	r4, 800df14 <TIM_Base_SetConfig+0x4c>
 800defa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800defe:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800df02:	42a0      	cmp	r0, r4
 800df04:	bf14      	ite	ne
 800df06:	2400      	movne	r4, #0
 800df08:	2401      	moveq	r4, #1
 800df0a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800df0e:	42a8      	cmp	r0, r5
 800df10:	d000      	beq.n	800df14 <TIM_Base_SetConfig+0x4c>
 800df12:	b11c      	cbz	r4, 800df1c <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800df14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800df18:	684c      	ldr	r4, [r1, #4]
 800df1a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800df1c:	bb12      	cbnz	r2, 800df64 <TIM_Base_SetConfig+0x9c>
 800df1e:	4a26      	ldr	r2, [pc, #152]	; (800dfb8 <TIM_Base_SetConfig+0xf0>)
 800df20:	4290      	cmp	r0, r2
 800df22:	bf14      	ite	ne
 800df24:	2200      	movne	r2, #0
 800df26:	2201      	moveq	r2, #1
 800df28:	4c24      	ldr	r4, [pc, #144]	; (800dfbc <TIM_Base_SetConfig+0xf4>)
 800df2a:	42a0      	cmp	r0, r4
 800df2c:	d01a      	beq.n	800df64 <TIM_Base_SetConfig+0x9c>
 800df2e:	b9ca      	cbnz	r2, 800df64 <TIM_Base_SetConfig+0x9c>
 800df30:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800df34:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800df38:	4290      	cmp	r0, r2
 800df3a:	bf14      	ite	ne
 800df3c:	2200      	movne	r2, #0
 800df3e:	2201      	moveq	r2, #1
 800df40:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800df44:	42a0      	cmp	r0, r4
 800df46:	d00d      	beq.n	800df64 <TIM_Base_SetConfig+0x9c>
 800df48:	b962      	cbnz	r2, 800df64 <TIM_Base_SetConfig+0x9c>
 800df4a:	4a1d      	ldr	r2, [pc, #116]	; (800dfc0 <TIM_Base_SetConfig+0xf8>)
 800df4c:	4290      	cmp	r0, r2
 800df4e:	bf14      	ite	ne
 800df50:	2200      	movne	r2, #0
 800df52:	2201      	moveq	r2, #1
 800df54:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800df58:	42a0      	cmp	r0, r4
 800df5a:	d003      	beq.n	800df64 <TIM_Base_SetConfig+0x9c>
 800df5c:	b912      	cbnz	r2, 800df64 <TIM_Base_SetConfig+0x9c>
 800df5e:	4a19      	ldr	r2, [pc, #100]	; (800dfc4 <TIM_Base_SetConfig+0xfc>)
 800df60:	4290      	cmp	r0, r2
 800df62:	d104      	bne.n	800df6e <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df64:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df68:	68cb      	ldr	r3, [r1, #12]
 800df6a:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df72:	694a      	ldr	r2, [r1, #20]
 800df74:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800df76:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df78:	688a      	ldr	r2, [r1, #8]
 800df7a:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df7c:	680a      	ldr	r2, [r1, #0]
 800df7e:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df80:	4a11      	ldr	r2, [pc, #68]	; (800dfc8 <TIM_Base_SetConfig+0x100>)
 800df82:	4290      	cmp	r0, r2
 800df84:	bf14      	ite	ne
 800df86:	4673      	movne	r3, lr
 800df88:	f04e 0301 	orreq.w	r3, lr, #1
 800df8c:	b963      	cbnz	r3, 800dfa8 <TIM_Base_SetConfig+0xe0>
 800df8e:	4b0c      	ldr	r3, [pc, #48]	; (800dfc0 <TIM_Base_SetConfig+0xf8>)
 800df90:	4298      	cmp	r0, r3
 800df92:	bf14      	ite	ne
 800df94:	2300      	movne	r3, #0
 800df96:	2301      	moveq	r3, #1
 800df98:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800df9c:	4290      	cmp	r0, r2
 800df9e:	d003      	beq.n	800dfa8 <TIM_Base_SetConfig+0xe0>
 800dfa0:	b913      	cbnz	r3, 800dfa8 <TIM_Base_SetConfig+0xe0>
 800dfa2:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <TIM_Base_SetConfig+0xfc>)
 800dfa4:	4298      	cmp	r0, r3
 800dfa6:	d101      	bne.n	800dfac <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dfa8:	690b      	ldr	r3, [r1, #16]
 800dfaa:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dfac:	2301      	movs	r3, #1
 800dfae:	6143      	str	r3, [r0, #20]
}
 800dfb0:	bd30      	pop	{r4, r5, pc}
 800dfb2:	bf00      	nop
 800dfb4:	40010000 	.word	0x40010000
 800dfb8:	40000800 	.word	0x40000800
 800dfbc:	40000400 	.word	0x40000400
 800dfc0:	40014400 	.word	0x40014400
 800dfc4:	40014800 	.word	0x40014800
 800dfc8:	40010400 	.word	0x40010400

0800dfcc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800dfcc:	b360      	cbz	r0, 800e028 <HAL_TIM_Base_Init+0x5c>
{
 800dfce:	b510      	push	{r4, lr}
 800dfd0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800dfd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800dfd6:	b313      	cbz	r3, 800e01e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800dfd8:	2302      	movs	r3, #2
 800dfda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfde:	4621      	mov	r1, r4
 800dfe0:	f851 0b04 	ldr.w	r0, [r1], #4
 800dfe4:	f7ff ff70 	bl	800dec8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800dff2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800dff6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dffa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800dffe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e006:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800e00a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e00e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800e012:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e016:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800e01a:	2000      	movs	r0, #0
}
 800e01c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800e01e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800e022:	f7ff fe36 	bl	800dc92 <HAL_TIM_Base_MspInit>
 800e026:	e7d7      	b.n	800dfd8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800e028:	2001      	movs	r0, #1
}
 800e02a:	4770      	bx	lr

0800e02c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e02c:	4770      	bx	lr

0800e02e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e02e:	4770      	bx	lr

0800e030 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e030:	4770      	bx	lr

0800e032 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e032:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800e034:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e038:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e03a:	f001 ff6d 	bl	800ff18 <xTaskGetSchedulerState>
 800e03e:	2801      	cmp	r0, #1
 800e040:	d100      	bne.n	800e044 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800e042:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800e044:	f000 fc6e 	bl	800e924 <xPortSysTickHandler>
}
 800e048:	e7fb      	b.n	800e042 <SysTick_Handler+0x10>
	...

0800e04c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e04c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800e050:	b92b      	cbnz	r3, 800e05e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800e052:	4b06      	ldr	r3, [pc, #24]	; (800e06c <osKernelInitialize+0x20>)
 800e054:	6818      	ldr	r0, [r3, #0]
 800e056:	b928      	cbnz	r0, 800e064 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e058:	2201      	movs	r2, #1
 800e05a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e05c:	4770      	bx	lr
    stat = osErrorISR;
 800e05e:	f06f 0005 	mvn.w	r0, #5
 800e062:	4770      	bx	lr
    } else {
      stat = osError;
 800e064:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	24003c50 	.word	0x24003c50

0800e070 <osKernelStart>:
 800e070:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800e074:	b973      	cbnz	r3, 800e094 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800e076:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <osKernelStart+0x30>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d10d      	bne.n	800e09a <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800e07e:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e080:	2400      	movs	r4, #0
 800e082:	4b08      	ldr	r3, [pc, #32]	; (800e0a4 <osKernelStart+0x34>)
 800e084:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e086:	4b06      	ldr	r3, [pc, #24]	; (800e0a0 <osKernelStart+0x30>)
 800e088:	2202      	movs	r2, #2
 800e08a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e08c:	f001 fcba 	bl	800fa04 <vTaskStartScheduler>
      stat = osOK;
 800e090:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800e092:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800e094:	f06f 0005 	mvn.w	r0, #5
 800e098:	4770      	bx	lr
      stat = osError;
 800e09a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e09e:	4770      	bx	lr
 800e0a0:	24003c50 	.word	0x24003c50
 800e0a4:	e000ed00 	.word	0xe000ed00

0800e0a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0aa:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e0ac:	2400      	movs	r4, #0
 800e0ae:	9405      	str	r4, [sp, #20]
 800e0b0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800e0b4:	bb74      	cbnz	r4, 800e114 <osThreadNew+0x6c>
 800e0b6:	b368      	cbz	r0, 800e114 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800e0b8:	b322      	cbz	r2, 800e104 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800e0ba:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800e0bc:	6993      	ldr	r3, [r2, #24]
 800e0be:	b903      	cbnz	r3, 800e0c2 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800e0c0:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e0c2:	1e5c      	subs	r4, r3, #1
 800e0c4:	2c37      	cmp	r4, #55	; 0x37
 800e0c6:	d849      	bhi.n	800e15c <osThreadNew+0xb4>
 800e0c8:	6854      	ldr	r4, [r2, #4]
 800e0ca:	f014 0f01 	tst.w	r4, #1
 800e0ce:	d147      	bne.n	800e160 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800e0d0:	6956      	ldr	r6, [r2, #20]
 800e0d2:	b16e      	cbz	r6, 800e0f0 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e0d4:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e0d8:	6894      	ldr	r4, [r2, #8]
 800e0da:	b12c      	cbz	r4, 800e0e8 <osThreadNew+0x40>
 800e0dc:	68d7      	ldr	r7, [r2, #12]
 800e0de:	2fbb      	cmp	r7, #187	; 0xbb
 800e0e0:	d902      	bls.n	800e0e8 <osThreadNew+0x40>
 800e0e2:	6917      	ldr	r7, [r2, #16]
 800e0e4:	b107      	cbz	r7, 800e0e8 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e0e6:	b9c6      	cbnz	r6, 800e11a <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e0e8:	b12c      	cbz	r4, 800e0f6 <osThreadNew+0x4e>
    mem  = -1;
 800e0ea:	f04f 34ff 	mov.w	r4, #4294967295
 800e0ee:	e00e      	b.n	800e10e <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800e0f0:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800e0f4:	e7f0      	b.n	800e0d8 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e0f6:	68d4      	ldr	r4, [r2, #12]
 800e0f8:	b98c      	cbnz	r4, 800e11e <osThreadNew+0x76>
 800e0fa:	6914      	ldr	r4, [r2, #16]
 800e0fc:	b194      	cbz	r4, 800e124 <osThreadNew+0x7c>
    mem  = -1;
 800e0fe:	f04f 34ff 	mov.w	r4, #4294967295
 800e102:	e004      	b.n	800e10e <osThreadNew+0x66>
    name = NULL;
 800e104:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800e106:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800e108:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800e10a:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800e10e:	2c01      	cmp	r4, #1
 800e110:	d00a      	beq.n	800e128 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800e112:	b1ac      	cbz	r4, 800e140 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e114:	9805      	ldr	r0, [sp, #20]
}
 800e116:	b007      	add	sp, #28
 800e118:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800e11a:	2401      	movs	r4, #1
 800e11c:	e7f7      	b.n	800e10e <osThreadNew+0x66>
    mem  = -1;
 800e11e:	f04f 34ff 	mov.w	r4, #4294967295
 800e122:	e7f4      	b.n	800e10e <osThreadNew+0x66>
          mem = 0;
 800e124:	2400      	movs	r4, #0
 800e126:	e7f2      	b.n	800e10e <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e128:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e12a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e12c:	9202      	str	r2, [sp, #8]
 800e12e:	9401      	str	r4, [sp, #4]
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	460b      	mov	r3, r1
 800e134:	4662      	mov	r2, ip
 800e136:	4629      	mov	r1, r5
 800e138:	f001 fbf4 	bl	800f924 <xTaskCreateStatic>
 800e13c:	9005      	str	r0, [sp, #20]
 800e13e:	e7e9      	b.n	800e114 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e140:	aa05      	add	r2, sp, #20
 800e142:	9201      	str	r2, [sp, #4]
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	460b      	mov	r3, r1
 800e148:	fa1f f28c 	uxth.w	r2, ip
 800e14c:	4629      	mov	r1, r5
 800e14e:	f001 fc24 	bl	800f99a <xTaskCreate>
 800e152:	2801      	cmp	r0, #1
 800e154:	d0de      	beq.n	800e114 <osThreadNew+0x6c>
            hTask = NULL;
 800e156:	2300      	movs	r3, #0
 800e158:	9305      	str	r3, [sp, #20]
 800e15a:	e7db      	b.n	800e114 <osThreadNew+0x6c>
        return (NULL);
 800e15c:	2000      	movs	r0, #0
 800e15e:	e7da      	b.n	800e116 <osThreadNew+0x6e>
 800e160:	2000      	movs	r0, #0
 800e162:	e7d8      	b.n	800e116 <osThreadNew+0x6e>

0800e164 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e164:	b570      	push	{r4, r5, r6, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d14d      	bne.n	800e20c <osSemaphoreNew+0xa8>
 800e170:	460e      	mov	r6, r1
 800e172:	4614      	mov	r4, r2
 800e174:	4288      	cmp	r0, r1
 800e176:	bf34      	ite	cc
 800e178:	2300      	movcc	r3, #0
 800e17a:	2301      	movcs	r3, #1
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d049      	beq.n	800e214 <osSemaphoreNew+0xb0>
 800e180:	2b00      	cmp	r3, #0
 800e182:	d047      	beq.n	800e214 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800e184:	b14a      	cbz	r2, 800e19a <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e186:	6895      	ldr	r5, [r2, #8]
 800e188:	b115      	cbz	r5, 800e190 <osSemaphoreNew+0x2c>
 800e18a:	68d3      	ldr	r3, [r2, #12]
 800e18c:	2b4f      	cmp	r3, #79	; 0x4f
 800e18e:	d814      	bhi.n	800e1ba <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e190:	2d00      	cmp	r5, #0
 800e192:	d141      	bne.n	800e218 <osSemaphoreNew+0xb4>
 800e194:	68e3      	ldr	r3, [r4, #12]
 800e196:	b10b      	cbz	r3, 800e19c <osSemaphoreNew+0x38>
 800e198:	e039      	b.n	800e20e <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800e19a:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800e19c:	2801      	cmp	r0, #1
 800e19e:	d00e      	beq.n	800e1be <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800e1a0:	bb73      	cbnz	r3, 800e200 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	f000 fe37 	bl	800ee16 <xQueueCreateCountingSemaphore>
 800e1a8:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e1aa:	b385      	cbz	r5, 800e20e <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800e1ac:	b104      	cbz	r4, 800e1b0 <osSemaphoreNew+0x4c>
          name = attr->name;
 800e1ae:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	f001 f9a8 	bl	800f508 <vQueueAddToRegistry>
 800e1b8:	e029      	b.n	800e20e <osSemaphoreNew+0xaa>
        mem = 1;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e7ee      	b.n	800e19c <osSemaphoreNew+0x38>
        if (mem == 1) {
 800e1be:	b9b3      	cbnz	r3, 800e1ee <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800e1c0:	2203      	movs	r2, #3
 800e1c2:	2100      	movs	r1, #0
 800e1c4:	2001      	movs	r0, #1
 800e1c6:	f000 fddf 	bl	800ed88 <xQueueGenericCreate>
 800e1ca:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e1cc:	2d00      	cmp	r5, #0
 800e1ce:	bf18      	it	ne
 800e1d0:	2e00      	cmpne	r6, #0
 800e1d2:	d0ea      	beq.n	800e1aa <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	4619      	mov	r1, r3
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f000 fe39 	bl	800ee52 <xQueueGenericSend>
 800e1e0:	2801      	cmp	r0, #1
 800e1e2:	d0e2      	beq.n	800e1aa <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f001 f9b9 	bl	800f55c <vQueueDelete>
            hSemaphore = NULL;
 800e1ea:	2500      	movs	r5, #0
 800e1ec:	e00f      	b.n	800e20e <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e1ee:	68a3      	ldr	r3, [r4, #8]
 800e1f0:	2203      	movs	r2, #3
 800e1f2:	9200      	str	r2, [sp, #0]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	f000 fd73 	bl	800ece2 <xQueueGenericCreateStatic>
 800e1fc:	4605      	mov	r5, r0
 800e1fe:	e7e5      	b.n	800e1cc <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e200:	68a2      	ldr	r2, [r4, #8]
 800e202:	4631      	mov	r1, r6
 800e204:	f000 fde4 	bl	800edd0 <xQueueCreateCountingSemaphoreStatic>
 800e208:	4605      	mov	r5, r0
 800e20a:	e7ce      	b.n	800e1aa <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800e20c:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800e20e:	4628      	mov	r0, r5
 800e210:	b002      	add	sp, #8
 800e212:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800e214:	2500      	movs	r5, #0
 800e216:	e7fa      	b.n	800e20e <osSemaphoreNew+0xaa>
 800e218:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800e21a:	e7f8      	b.n	800e20e <osSemaphoreNew+0xaa>

0800e21c <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e21c:	b320      	cbz	r0, 800e268 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e21e:	b510      	push	{r4, lr}
 800e220:	b082      	sub	sp, #8
 800e222:	460c      	mov	r4, r1
 800e224:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e228:	b1b3      	cbz	r3, 800e258 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800e22a:	bb01      	cbnz	r1, 800e26e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800e22c:	2100      	movs	r1, #0
 800e22e:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e230:	aa01      	add	r2, sp, #4
 800e232:	f001 f914 	bl	800f45e <xQueueReceiveFromISR>
 800e236:	2801      	cmp	r0, #1
 800e238:	d11c      	bne.n	800e274 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800e23a:	9801      	ldr	r0, [sp, #4]
 800e23c:	b150      	cbz	r0, 800e254 <osSemaphoreAcquire+0x38>
 800e23e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e246:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e252:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e254:	b002      	add	sp, #8
 800e256:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e258:	f001 f82e 	bl	800f2b8 <xQueueSemaphoreTake>
 800e25c:	2801      	cmp	r0, #1
 800e25e:	d00c      	beq.n	800e27a <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800e260:	b16c      	cbz	r4, 800e27e <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800e262:	f06f 0001 	mvn.w	r0, #1
 800e266:	e7f5      	b.n	800e254 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800e268:	f06f 0003 	mvn.w	r0, #3
}
 800e26c:	4770      	bx	lr
      stat = osErrorParameter;
 800e26e:	f06f 0003 	mvn.w	r0, #3
 800e272:	e7ef      	b.n	800e254 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800e274:	f06f 0002 	mvn.w	r0, #2
 800e278:	e7ec      	b.n	800e254 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800e27a:	2000      	movs	r0, #0
 800e27c:	e7ea      	b.n	800e254 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800e27e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800e282:	e7e7      	b.n	800e254 <osSemaphoreAcquire+0x38>

0800e284 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e284:	b320      	cbz	r0, 800e2d0 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e286:	b500      	push	{lr}
 800e288:	b083      	sub	sp, #12
 800e28a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e28e:	b1a3      	cbz	r3, 800e2ba <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800e290:	2300      	movs	r3, #0
 800e292:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e294:	a901      	add	r1, sp, #4
 800e296:	f000 ff07 	bl	800f0a8 <xQueueGiveFromISR>
 800e29a:	2801      	cmp	r0, #1
 800e29c:	d11b      	bne.n	800e2d6 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800e29e:	9801      	ldr	r0, [sp, #4]
 800e2a0:	b198      	cbz	r0, 800e2ca <osSemaphoreRelease+0x46>
 800e2a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e2a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	e007      	b.n	800e2ca <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	461a      	mov	r2, r3
 800e2be:	4619      	mov	r1, r3
 800e2c0:	f000 fdc7 	bl	800ee52 <xQueueGenericSend>
 800e2c4:	2801      	cmp	r0, #1
 800e2c6:	d109      	bne.n	800e2dc <osSemaphoreRelease+0x58>
  stat = osOK;
 800e2c8:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800e2ca:	b003      	add	sp, #12
 800e2cc:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800e2d0:	f06f 0003 	mvn.w	r0, #3
}
 800e2d4:	4770      	bx	lr
      stat = osErrorResource;
 800e2d6:	f06f 0002 	mvn.w	r0, #2
 800e2da:	e7f6      	b.n	800e2ca <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800e2dc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800e2e0:	e7f3      	b.n	800e2ca <osSemaphoreRelease+0x46>

0800e2e2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e2e2:	b570      	push	{r4, r5, r6, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d13d      	bne.n	800e36a <osMessageQueueNew+0x88>
 800e2ee:	4614      	mov	r4, r2
 800e2f0:	1e0b      	subs	r3, r1, #0
 800e2f2:	bf18      	it	ne
 800e2f4:	2301      	movne	r3, #1
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d03b      	beq.n	800e372 <osMessageQueueNew+0x90>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d039      	beq.n	800e372 <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 800e2fe:	b36a      	cbz	r2, 800e35c <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e300:	6893      	ldr	r3, [r2, #8]
 800e302:	b14b      	cbz	r3, 800e318 <osMessageQueueNew+0x36>
 800e304:	68d2      	ldr	r2, [r2, #12]
 800e306:	2a4f      	cmp	r2, #79	; 0x4f
 800e308:	d906      	bls.n	800e318 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e30a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e30c:	b122      	cbz	r2, 800e318 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e30e:	fb01 f500 	mul.w	r5, r1, r0
 800e312:	6966      	ldr	r6, [r4, #20]
 800e314:	42ae      	cmp	r6, r5
 800e316:	d21b      	bcs.n	800e350 <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e318:	b173      	cbz	r3, 800e338 <osMessageQueueNew+0x56>
    mem = -1;
 800e31a:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800e31e:	bb53      	cbnz	r3, 800e376 <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e320:	2200      	movs	r2, #0
 800e322:	f000 fd31 	bl	800ed88 <xQueueGenericCreate>
 800e326:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e328:	b305      	cbz	r5, 800e36c <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 800e32a:	b104      	cbz	r4, 800e32e <osMessageQueueNew+0x4c>
        name = attr->name;
 800e32c:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800e32e:	4621      	mov	r1, r4
 800e330:	4628      	mov	r0, r5
 800e332:	f001 f8e9 	bl	800f508 <vQueueAddToRegistry>
 800e336:	e019      	b.n	800e36c <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e338:	68e3      	ldr	r3, [r4, #12]
 800e33a:	b98b      	cbnz	r3, 800e360 <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e33c:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e33e:	b113      	cbz	r3, 800e346 <osMessageQueueNew+0x64>
    mem = -1;
 800e340:	f04f 33ff 	mov.w	r3, #4294967295
 800e344:	e7eb      	b.n	800e31e <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e346:	6963      	ldr	r3, [r4, #20]
 800e348:	b16b      	cbz	r3, 800e366 <osMessageQueueNew+0x84>
    mem = -1;
 800e34a:	f04f 33ff 	mov.w	r3, #4294967295
 800e34e:	e7e6      	b.n	800e31e <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e350:	2500      	movs	r5, #0
 800e352:	9500      	str	r5, [sp, #0]
 800e354:	f000 fcc5 	bl	800ece2 <xQueueGenericCreateStatic>
 800e358:	4605      	mov	r5, r0
 800e35a:	e7e5      	b.n	800e328 <osMessageQueueNew+0x46>
      mem = 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	e7de      	b.n	800e31e <osMessageQueueNew+0x3c>
    mem = -1;
 800e360:	f04f 33ff 	mov.w	r3, #4294967295
 800e364:	e7db      	b.n	800e31e <osMessageQueueNew+0x3c>
          mem = 0;
 800e366:	2300      	movs	r3, #0
 800e368:	e7d9      	b.n	800e31e <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800e36a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800e36c:	4628      	mov	r0, r5
 800e36e:	b002      	add	sp, #8
 800e370:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800e372:	2500      	movs	r5, #0
 800e374:	e7fa      	b.n	800e36c <osMessageQueueNew+0x8a>
 800e376:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800e378:	e7f8      	b.n	800e36c <osMessageQueueNew+0x8a>

0800e37a <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e37a:	b510      	push	{r4, lr}
 800e37c:	b082      	sub	sp, #8
 800e37e:	461c      	mov	r4, r3
 800e380:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e384:	b1d3      	cbz	r3, 800e3bc <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e386:	2900      	cmp	r1, #0
 800e388:	bf18      	it	ne
 800e38a:	2800      	cmpne	r0, #0
 800e38c:	d024      	beq.n	800e3d8 <osMessageQueuePut+0x5e>
 800e38e:	bb34      	cbnz	r4, 800e3de <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800e390:	2300      	movs	r3, #0
 800e392:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e394:	aa01      	add	r2, sp, #4
 800e396:	f000 fe20 	bl	800efda <xQueueGenericSendFromISR>
 800e39a:	2801      	cmp	r0, #1
 800e39c:	d122      	bne.n	800e3e4 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800e39e:	9801      	ldr	r0, [sp, #4]
 800e3a0:	b150      	cbz	r0, 800e3b8 <osMessageQueuePut+0x3e>
 800e3a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e3b6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e3b8:	b002      	add	sp, #8
 800e3ba:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e3bc:	2900      	cmp	r1, #0
 800e3be:	bf18      	it	ne
 800e3c0:	2800      	cmpne	r0, #0
 800e3c2:	d012      	beq.n	800e3ea <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	f000 fd43 	bl	800ee52 <xQueueGenericSend>
 800e3cc:	2801      	cmp	r0, #1
 800e3ce:	d00f      	beq.n	800e3f0 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 800e3d0:	b184      	cbz	r4, 800e3f4 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 800e3d2:	f06f 0001 	mvn.w	r0, #1
 800e3d6:	e7ef      	b.n	800e3b8 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e3d8:	f06f 0003 	mvn.w	r0, #3
 800e3dc:	e7ec      	b.n	800e3b8 <osMessageQueuePut+0x3e>
 800e3de:	f06f 0003 	mvn.w	r0, #3
 800e3e2:	e7e9      	b.n	800e3b8 <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 800e3e4:	f06f 0002 	mvn.w	r0, #2
 800e3e8:	e7e6      	b.n	800e3b8 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e3ea:	f06f 0003 	mvn.w	r0, #3
 800e3ee:	e7e3      	b.n	800e3b8 <osMessageQueuePut+0x3e>
  stat = osOK;
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	e7e1      	b.n	800e3b8 <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800e3f4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800e3f8:	e7de      	b.n	800e3b8 <osMessageQueuePut+0x3e>

0800e3fa <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e3fa:	b510      	push	{r4, lr}
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	461c      	mov	r4, r3
 800e400:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e404:	b1d3      	cbz	r3, 800e43c <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e406:	2900      	cmp	r1, #0
 800e408:	bf18      	it	ne
 800e40a:	2800      	cmpne	r0, #0
 800e40c:	d023      	beq.n	800e456 <osMessageQueueGet+0x5c>
 800e40e:	bb2c      	cbnz	r4, 800e45c <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800e410:	2300      	movs	r3, #0
 800e412:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e414:	aa01      	add	r2, sp, #4
 800e416:	f001 f822 	bl	800f45e <xQueueReceiveFromISR>
 800e41a:	2801      	cmp	r0, #1
 800e41c:	d121      	bne.n	800e462 <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800e41e:	9801      	ldr	r0, [sp, #4]
 800e420:	b150      	cbz	r0, 800e438 <osMessageQueueGet+0x3e>
 800e422:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e42a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e436:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e438:	b002      	add	sp, #8
 800e43a:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e43c:	2900      	cmp	r1, #0
 800e43e:	bf18      	it	ne
 800e440:	2800      	cmpne	r0, #0
 800e442:	d011      	beq.n	800e468 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e444:	4622      	mov	r2, r4
 800e446:	f000 fe88 	bl	800f15a <xQueueReceive>
 800e44a:	2801      	cmp	r0, #1
 800e44c:	d00f      	beq.n	800e46e <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 800e44e:	b184      	cbz	r4, 800e472 <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 800e450:	f06f 0001 	mvn.w	r0, #1
 800e454:	e7f0      	b.n	800e438 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800e456:	f06f 0003 	mvn.w	r0, #3
 800e45a:	e7ed      	b.n	800e438 <osMessageQueueGet+0x3e>
 800e45c:	f06f 0003 	mvn.w	r0, #3
 800e460:	e7ea      	b.n	800e438 <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800e462:	f06f 0002 	mvn.w	r0, #2
 800e466:	e7e7      	b.n	800e438 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800e468:	f06f 0003 	mvn.w	r0, #3
 800e46c:	e7e4      	b.n	800e438 <osMessageQueueGet+0x3e>
  stat = osOK;
 800e46e:	2000      	movs	r0, #0
 800e470:	e7e2      	b.n	800e438 <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800e472:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800e476:	e7df      	b.n	800e438 <osMessageQueueGet+0x3e>

0800e478 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e478:	4b03      	ldr	r3, [pc, #12]	; (800e488 <vApplicationGetIdleTaskMemory+0x10>)
 800e47a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e47c:	4b03      	ldr	r3, [pc, #12]	; (800e48c <vApplicationGetIdleTaskMemory+0x14>)
 800e47e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e480:	2380      	movs	r3, #128	; 0x80
 800e482:	6013      	str	r3, [r2, #0]
}
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	24003b94 	.word	0x24003b94
 800e48c:	24003994 	.word	0x24003994

0800e490 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e490:	4b03      	ldr	r3, [pc, #12]	; (800e4a0 <vApplicationGetTimerTaskMemory+0x10>)
 800e492:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e494:	4b03      	ldr	r3, [pc, #12]	; (800e4a4 <vApplicationGetTimerTaskMemory+0x14>)
 800e496:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e49c:	6013      	str	r3, [r2, #0]
}
 800e49e:	4770      	bx	lr
 800e4a0:	24004054 	.word	0x24004054
 800e4a4:	24003c54 	.word	0x24003c54

0800e4a8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e4a8:	4a12      	ldr	r2, [pc, #72]	; (800e4f4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4aa:	f012 0f07 	tst.w	r2, #7
 800e4ae:	d01e      	beq.n	800e4ee <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4b0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4b2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4b6:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800e4ba:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4bc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4be:	480e      	ldr	r0, [pc, #56]	; (800e4f8 <prvHeapInit+0x50>)
 800e4c0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4c6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e4c8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4ca:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e4ce:	480b      	ldr	r0, [pc, #44]	; (800e4fc <prvHeapInit+0x54>)
 800e4d0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e4d2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4d4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e4d6:	1a99      	subs	r1, r3, r2
 800e4d8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4da:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4dc:	4b08      	ldr	r3, [pc, #32]	; (800e500 <prvHeapInit+0x58>)
 800e4de:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4e0:	4b08      	ldr	r3, [pc, #32]	; (800e504 <prvHeapInit+0x5c>)
 800e4e2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4e4:	4b08      	ldr	r3, [pc, #32]	; (800e508 <prvHeapInit+0x60>)
 800e4e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e4ea:	601a      	str	r2, [r3, #0]
}
 800e4ec:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e4ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4f2:	e7e4      	b.n	800e4be <prvHeapInit+0x16>
 800e4f4:	24004114 	.word	0x24004114
 800e4f8:	2400c128 	.word	0x2400c128
 800e4fc:	24004110 	.word	0x24004110
 800e500:	2400c11c 	.word	0x2400c11c
 800e504:	2400c118 	.word	0x2400c118
 800e508:	2400c114 	.word	0x2400c114

0800e50c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e50c:	4b16      	ldr	r3, [pc, #88]	; (800e568 <prvInsertBlockIntoFreeList+0x5c>)
 800e50e:	461a      	mov	r2, r3
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4283      	cmp	r3, r0
 800e514:	d3fb      	bcc.n	800e50e <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e516:	6851      	ldr	r1, [r2, #4]
 800e518:	eb02 0c01 	add.w	ip, r2, r1
 800e51c:	4584      	cmp	ip, r0
 800e51e:	d009      	beq.n	800e534 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e520:	6841      	ldr	r1, [r0, #4]
 800e522:	eb00 0c01 	add.w	ip, r0, r1
 800e526:	4563      	cmp	r3, ip
 800e528:	d009      	beq.n	800e53e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e52a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e52c:	4290      	cmp	r0, r2
 800e52e:	d019      	beq.n	800e564 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e530:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800e532:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e534:	6840      	ldr	r0, [r0, #4]
 800e536:	4401      	add	r1, r0
 800e538:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e53a:	4610      	mov	r0, r2
 800e53c:	e7f0      	b.n	800e520 <prvInsertBlockIntoFreeList+0x14>
{
 800e53e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e540:	4c0a      	ldr	r4, [pc, #40]	; (800e56c <prvInsertBlockIntoFreeList+0x60>)
 800e542:	6824      	ldr	r4, [r4, #0]
 800e544:	42a3      	cmp	r3, r4
 800e546:	d00b      	beq.n	800e560 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	4419      	add	r1, r3
 800e54c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e54e:	6813      	ldr	r3, [r2, #0]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800e554:	4290      	cmp	r0, r2
 800e556:	d000      	beq.n	800e55a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e558:	6010      	str	r0, [r2, #0]
	}
}
 800e55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e55e:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e560:	6004      	str	r4, [r0, #0]
 800e562:	e7f7      	b.n	800e554 <prvInsertBlockIntoFreeList+0x48>
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	2400c128 	.word	0x2400c128
 800e56c:	24004110 	.word	0x24004110

0800e570 <pvPortMalloc>:
{
 800e570:	b570      	push	{r4, r5, r6, lr}
 800e572:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800e574:	f001 fa9c 	bl	800fab0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e578:	4b36      	ldr	r3, [pc, #216]	; (800e654 <pvPortMalloc+0xe4>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	b1a3      	cbz	r3, 800e5a8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e57e:	4b36      	ldr	r3, [pc, #216]	; (800e658 <pvPortMalloc+0xe8>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	421d      	tst	r5, r3
 800e584:	d14e      	bne.n	800e624 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800e586:	b135      	cbz	r5, 800e596 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800e588:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e58a:	f015 0f07 	tst.w	r5, #7
 800e58e:	d002      	beq.n	800e596 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e590:	f025 0507 	bic.w	r5, r5, #7
 800e594:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e596:	2d00      	cmp	r5, #0
 800e598:	d046      	beq.n	800e628 <pvPortMalloc+0xb8>
 800e59a:	4b30      	ldr	r3, [pc, #192]	; (800e65c <pvPortMalloc+0xec>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	42ab      	cmp	r3, r5
 800e5a0:	d351      	bcc.n	800e646 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800e5a2:	4a2f      	ldr	r2, [pc, #188]	; (800e660 <pvPortMalloc+0xf0>)
 800e5a4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5a6:	e004      	b.n	800e5b2 <pvPortMalloc+0x42>
			prvHeapInit();
 800e5a8:	f7ff ff7e 	bl	800e4a8 <prvHeapInit>
 800e5ac:	e7e7      	b.n	800e57e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800e5ae:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5b0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5b2:	6863      	ldr	r3, [r4, #4]
 800e5b4:	42ab      	cmp	r3, r5
 800e5b6:	d202      	bcs.n	800e5be <pvPortMalloc+0x4e>
 800e5b8:	6823      	ldr	r3, [r4, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d1f7      	bne.n	800e5ae <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800e5be:	4b25      	ldr	r3, [pc, #148]	; (800e654 <pvPortMalloc+0xe4>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	d041      	beq.n	800e64a <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5c6:	6816      	ldr	r6, [r2, #0]
 800e5c8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5ca:	6823      	ldr	r3, [r4, #0]
 800e5cc:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5ce:	6863      	ldr	r3, [r4, #4]
 800e5d0:	1b5b      	subs	r3, r3, r5
 800e5d2:	2b10      	cmp	r3, #16
 800e5d4:	d910      	bls.n	800e5f8 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5d6:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d8:	f010 0f07 	tst.w	r0, #7
 800e5dc:	d008      	beq.n	800e5f0 <pvPortMalloc+0x80>
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	e7fe      	b.n	800e5ee <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5f0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5f2:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5f4:	f7ff ff8a 	bl	800e50c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5f8:	6862      	ldr	r2, [r4, #4]
 800e5fa:	4918      	ldr	r1, [pc, #96]	; (800e65c <pvPortMalloc+0xec>)
 800e5fc:	680b      	ldr	r3, [r1, #0]
 800e5fe:	1a9b      	subs	r3, r3, r2
 800e600:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e602:	4918      	ldr	r1, [pc, #96]	; (800e664 <pvPortMalloc+0xf4>)
 800e604:	6809      	ldr	r1, [r1, #0]
 800e606:	428b      	cmp	r3, r1
 800e608:	d201      	bcs.n	800e60e <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e60a:	4916      	ldr	r1, [pc, #88]	; (800e664 <pvPortMalloc+0xf4>)
 800e60c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e60e:	4b12      	ldr	r3, [pc, #72]	; (800e658 <pvPortMalloc+0xe8>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4313      	orrs	r3, r2
 800e614:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e616:	2300      	movs	r3, #0
 800e618:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800e61a:	4a13      	ldr	r2, [pc, #76]	; (800e668 <pvPortMalloc+0xf8>)
 800e61c:	6813      	ldr	r3, [r2, #0]
 800e61e:	3301      	adds	r3, #1
 800e620:	6013      	str	r3, [r2, #0]
 800e622:	e002      	b.n	800e62a <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800e624:	2600      	movs	r6, #0
 800e626:	e000      	b.n	800e62a <pvPortMalloc+0xba>
 800e628:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800e62a:	f001 fadb 	bl	800fbe4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e62e:	f016 0f07 	tst.w	r6, #7
 800e632:	d00c      	beq.n	800e64e <pvPortMalloc+0xde>
 800e634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	e7fe      	b.n	800e644 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800e646:	2600      	movs	r6, #0
 800e648:	e7ef      	b.n	800e62a <pvPortMalloc+0xba>
 800e64a:	2600      	movs	r6, #0
 800e64c:	e7ed      	b.n	800e62a <pvPortMalloc+0xba>
}
 800e64e:	4630      	mov	r0, r6
 800e650:	bd70      	pop	{r4, r5, r6, pc}
 800e652:	bf00      	nop
 800e654:	24004110 	.word	0x24004110
 800e658:	2400c114 	.word	0x2400c114
 800e65c:	2400c118 	.word	0x2400c118
 800e660:	2400c128 	.word	0x2400c128
 800e664:	2400c11c 	.word	0x2400c11c
 800e668:	2400c120 	.word	0x2400c120

0800e66c <vPortFree>:
	if( pv != NULL )
 800e66c:	2800      	cmp	r0, #0
 800e66e:	d034      	beq.n	800e6da <vPortFree+0x6e>
{
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800e674:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e678:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e67c:	4a17      	ldr	r2, [pc, #92]	; (800e6dc <vPortFree+0x70>)
 800e67e:	6812      	ldr	r2, [r2, #0]
 800e680:	4213      	tst	r3, r2
 800e682:	d108      	bne.n	800e696 <vPortFree+0x2a>
 800e684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	e7fe      	b.n	800e694 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e696:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e69a:	b141      	cbz	r1, 800e6ae <vPortFree+0x42>
 800e69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a0:	f383 8811 	msr	BASEPRI, r3
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	e7fe      	b.n	800e6ac <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6ae:	ea23 0302 	bic.w	r3, r3, r2
 800e6b2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e6b6:	f001 f9fb 	bl	800fab0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6ba:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e6be:	4a08      	ldr	r2, [pc, #32]	; (800e6e0 <vPortFree+0x74>)
 800e6c0:	6813      	ldr	r3, [r2, #0]
 800e6c2:	440b      	add	r3, r1
 800e6c4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	f7ff ff20 	bl	800e50c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e6cc:	4a05      	ldr	r2, [pc, #20]	; (800e6e4 <vPortFree+0x78>)
 800e6ce:	6813      	ldr	r3, [r2, #0]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e6d4:	f001 fa86 	bl	800fbe4 <xTaskResumeAll>
}
 800e6d8:	bd38      	pop	{r3, r4, r5, pc}
 800e6da:	4770      	bx	lr
 800e6dc:	2400c114 	.word	0x2400c114
 800e6e0:	2400c118 	.word	0x2400c118
 800e6e4:	2400c124 	.word	0x2400c124

0800e6e8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6e8:	f100 0308 	add.w	r3, r0, #8
 800e6ec:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6f4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6f6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6fc:	4770      	bx	lr

0800e6fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e6fe:	2300      	movs	r3, #0
 800e700:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e702:	4770      	bx	lr

0800e704 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e704:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e706:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e708:	689a      	ldr	r2, [r3, #8]
 800e70a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e70c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e70e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e710:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e712:	6803      	ldr	r3, [r0, #0]
 800e714:	3301      	adds	r3, #1
 800e716:	6003      	str	r3, [r0, #0]
}
 800e718:	4770      	bx	lr

0800e71a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e71a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e71c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e71e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e722:	d011      	beq.n	800e748 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e724:	f100 0308 	add.w	r3, r0, #8
 800e728:	461c      	mov	r4, r3
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	42aa      	cmp	r2, r5
 800e730:	d9fa      	bls.n	800e728 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e732:	6863      	ldr	r3, [r4, #4]
 800e734:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e736:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e738:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e73a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e73c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e73e:	6803      	ldr	r3, [r0, #0]
 800e740:	3301      	adds	r3, #1
 800e742:	6003      	str	r3, [r0, #0]
}
 800e744:	bc30      	pop	{r4, r5}
 800e746:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800e748:	6904      	ldr	r4, [r0, #16]
 800e74a:	e7f2      	b.n	800e732 <vListInsert+0x18>

0800e74c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e74c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e74e:	6841      	ldr	r1, [r0, #4]
 800e750:	6882      	ldr	r2, [r0, #8]
 800e752:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e754:	6841      	ldr	r1, [r0, #4]
 800e756:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e758:	685a      	ldr	r2, [r3, #4]
 800e75a:	4282      	cmp	r2, r0
 800e75c:	d006      	beq.n	800e76c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e75e:	2200      	movs	r2, #0
 800e760:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	3a01      	subs	r2, #1
 800e766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e768:	6818      	ldr	r0, [r3, #0]
}
 800e76a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e76c:	6882      	ldr	r2, [r0, #8]
 800e76e:	605a      	str	r2, [r3, #4]
 800e770:	e7f5      	b.n	800e75e <uxListRemove+0x12>
	...

0800e774 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e774:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e776:	2300      	movs	r3, #0
 800e778:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e77a:	4b0d      	ldr	r3, [pc, #52]	; (800e7b0 <prvTaskExitError+0x3c>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e782:	d008      	beq.n	800e796 <prvTaskExitError+0x22>
 800e784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	e7fe      	b.n	800e794 <prvTaskExitError+0x20>
 800e796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7a6:	9b01      	ldr	r3, [sp, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0fc      	beq.n	800e7a6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7ac:	b002      	add	sp, #8
 800e7ae:	4770      	bx	lr
 800e7b0:	24000080 	.word	0x24000080

0800e7b4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7b4:	4808      	ldr	r0, [pc, #32]	; (800e7d8 <prvPortStartFirstTask+0x24>)
 800e7b6:	6800      	ldr	r0, [r0, #0]
 800e7b8:	6800      	ldr	r0, [r0, #0]
 800e7ba:	f380 8808 	msr	MSP, r0
 800e7be:	f04f 0000 	mov.w	r0, #0
 800e7c2:	f380 8814 	msr	CONTROL, r0
 800e7c6:	b662      	cpsie	i
 800e7c8:	b661      	cpsie	f
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	f3bf 8f6f 	isb	sy
 800e7d2:	df00      	svc	0
 800e7d4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e7d6:	0000      	.short	0x0000
 800e7d8:	e000ed08 	.word	0xe000ed08

0800e7dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7ec <vPortEnableVFP+0x10>
 800e7e0:	6801      	ldr	r1, [r0, #0]
 800e7e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7e6:	6001      	str	r1, [r0, #0]
 800e7e8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7ea:	0000      	.short	0x0000
 800e7ec:	e000ed88 	.word	0xe000ed88

0800e7f0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e7f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e7f4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7f8:	f021 0101 	bic.w	r1, r1, #1
 800e7fc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e800:	4b05      	ldr	r3, [pc, #20]	; (800e818 <pxPortInitialiseStack+0x28>)
 800e802:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e806:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e80a:	f06f 0302 	mvn.w	r3, #2
 800e80e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800e812:	3844      	subs	r0, #68	; 0x44
 800e814:	4770      	bx	lr
 800e816:	bf00      	nop
 800e818:	0800e775 	.word	0x0800e775
 800e81c:	00000000 	.word	0x00000000

0800e820 <SVC_Handler>:
	__asm volatile (
 800e820:	4b07      	ldr	r3, [pc, #28]	; (800e840 <pxCurrentTCBConst2>)
 800e822:	6819      	ldr	r1, [r3, #0]
 800e824:	6808      	ldr	r0, [r1, #0]
 800e826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82a:	f380 8809 	msr	PSP, r0
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f04f 0000 	mov.w	r0, #0
 800e836:	f380 8811 	msr	BASEPRI, r0
 800e83a:	4770      	bx	lr
 800e83c:	f3af 8000 	nop.w

0800e840 <pxCurrentTCBConst2>:
 800e840:	2400c178 	.word	0x2400c178

0800e844 <vPortEnterCritical>:
 800e844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e848:	f383 8811 	msr	BASEPRI, r3
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e854:	4a0b      	ldr	r2, [pc, #44]	; (800e884 <vPortEnterCritical+0x40>)
 800e856:	6813      	ldr	r3, [r2, #0]
 800e858:	3301      	adds	r3, #1
 800e85a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d000      	beq.n	800e862 <vPortEnterCritical+0x1e>
}
 800e860:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e862:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e866:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800e86a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e86e:	d0f7      	beq.n	800e860 <vPortEnterCritical+0x1c>
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	e7fe      	b.n	800e880 <vPortEnterCritical+0x3c>
 800e882:	bf00      	nop
 800e884:	24000080 	.word	0x24000080

0800e888 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e888:	4b09      	ldr	r3, [pc, #36]	; (800e8b0 <vPortExitCritical+0x28>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	b943      	cbnz	r3, 800e8a0 <vPortExitCritical+0x18>
 800e88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	e7fe      	b.n	800e89e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	4a03      	ldr	r2, [pc, #12]	; (800e8b0 <vPortExitCritical+0x28>)
 800e8a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e8a6:	b90b      	cbnz	r3, 800e8ac <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e8a8:	f383 8811 	msr	BASEPRI, r3
}
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	24000080 	.word	0x24000080
	...

0800e8c0 <PendSV_Handler>:
	__asm volatile
 800e8c0:	f3ef 8009 	mrs	r0, PSP
 800e8c4:	f3bf 8f6f 	isb	sy
 800e8c8:	4b15      	ldr	r3, [pc, #84]	; (800e920 <pxCurrentTCBConst>)
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	f01e 0f10 	tst.w	lr, #16
 800e8d0:	bf08      	it	eq
 800e8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8da:	6010      	str	r0, [r2, #0]
 800e8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e8e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e8e4:	f380 8811 	msr	BASEPRI, r0
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f001 f9f4 	bl	800fcdc <vTaskSwitchContext>
 800e8f4:	f04f 0000 	mov.w	r0, #0
 800e8f8:	f380 8811 	msr	BASEPRI, r0
 800e8fc:	bc09      	pop	{r0, r3}
 800e8fe:	6819      	ldr	r1, [r3, #0]
 800e900:	6808      	ldr	r0, [r1, #0]
 800e902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e906:	f01e 0f10 	tst.w	lr, #16
 800e90a:	bf08      	it	eq
 800e90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e910:	f380 8809 	msr	PSP, r0
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	f3af 8000 	nop.w

0800e920 <pxCurrentTCBConst>:
 800e920:	2400c178 	.word	0x2400c178

0800e924 <xPortSysTickHandler>:
{
 800e924:	b508      	push	{r3, lr}
	__asm volatile
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e936:	f001 f8c9 	bl	800facc <xTaskIncrementTick>
 800e93a:	b128      	cbz	r0, 800e948 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e93c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e944:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800e948:	2300      	movs	r3, #0
 800e94a:	f383 8811 	msr	BASEPRI, r3
}
 800e94e:	bd08      	pop	{r3, pc}

0800e950 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e950:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e954:	2300      	movs	r3, #0
 800e956:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e958:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e95a:	4b05      	ldr	r3, [pc, #20]	; (800e970 <vPortSetupTimerInterrupt+0x20>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4905      	ldr	r1, [pc, #20]	; (800e974 <vPortSetupTimerInterrupt+0x24>)
 800e960:	fba1 1303 	umull	r1, r3, r1, r3
 800e964:	099b      	lsrs	r3, r3, #6
 800e966:	3b01      	subs	r3, #1
 800e968:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e96a:	2307      	movs	r3, #7
 800e96c:	6113      	str	r3, [r2, #16]
}
 800e96e:	4770      	bx	lr
 800e970:	24000070 	.word	0x24000070
 800e974:	10624dd3 	.word	0x10624dd3

0800e978 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e978:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e97c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e980:	4b3d      	ldr	r3, [pc, #244]	; (800ea78 <xPortStartScheduler+0x100>)
 800e982:	429a      	cmp	r2, r3
 800e984:	d01c      	beq.n	800e9c0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e986:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e98a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e98e:	4b3b      	ldr	r3, [pc, #236]	; (800ea7c <xPortStartScheduler+0x104>)
 800e990:	429a      	cmp	r2, r3
 800e992:	d01e      	beq.n	800e9d2 <xPortStartScheduler+0x5a>
{
 800e994:	b530      	push	{r4, r5, lr}
 800e996:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e998:	4b39      	ldr	r3, [pc, #228]	; (800ea80 <xPortStartScheduler+0x108>)
 800e99a:	781a      	ldrb	r2, [r3, #0]
 800e99c:	b2d2      	uxtb	r2, r2
 800e99e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e9a0:	22ff      	movs	r2, #255	; 0xff
 800e9a2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e9ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e9b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e9b4:	4a33      	ldr	r2, [pc, #204]	; (800ea84 <xPortStartScheduler+0x10c>)
 800e9b6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e9b8:	4b33      	ldr	r3, [pc, #204]	; (800ea88 <xPortStartScheduler+0x110>)
 800e9ba:	2207      	movs	r2, #7
 800e9bc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9be:	e01b      	b.n	800e9f8 <xPortStartScheduler+0x80>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e9d0:	e7fe      	b.n	800e9d0 <xPortStartScheduler+0x58>
 800e9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d6:	f383 8811 	msr	BASEPRI, r3
 800e9da:	f3bf 8f6f 	isb	sy
 800e9de:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e9e2:	e7fe      	b.n	800e9e2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800e9e4:	4a28      	ldr	r2, [pc, #160]	; (800ea88 <xPortStartScheduler+0x110>)
 800e9e6:	6813      	ldr	r3, [r2, #0]
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e9ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e9f0:	005b      	lsls	r3, r3, #1
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e9fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ea00:	d1f0      	bne.n	800e9e4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ea02:	4b21      	ldr	r3, [pc, #132]	; (800ea88 <xPortStartScheduler+0x110>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b03      	cmp	r3, #3
 800ea08:	d008      	beq.n	800ea1c <xPortStartScheduler+0xa4>
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	e7fe      	b.n	800ea1a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ea1c:	021b      	lsls	r3, r3, #8
 800ea1e:	4a1a      	ldr	r2, [pc, #104]	; (800ea88 <xPortStartScheduler+0x110>)
 800ea20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea26:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ea28:	9b01      	ldr	r3, [sp, #4]
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	4a14      	ldr	r2, [pc, #80]	; (800ea80 <xPortStartScheduler+0x108>)
 800ea2e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea30:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800ea34:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800ea38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea3c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea40:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800ea44:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea48:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800ea4c:	f7ff ff80 	bl	800e950 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ea50:	2500      	movs	r5, #0
 800ea52:	4b0e      	ldr	r3, [pc, #56]	; (800ea8c <xPortStartScheduler+0x114>)
 800ea54:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800ea56:	f7ff fec1 	bl	800e7dc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea5a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800ea5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea62:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800ea66:	f7ff fea5 	bl	800e7b4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ea6a:	f001 f937 	bl	800fcdc <vTaskSwitchContext>
	prvTaskExitError();
 800ea6e:	f7ff fe81 	bl	800e774 <prvTaskExitError>
}
 800ea72:	4628      	mov	r0, r5
 800ea74:	b003      	add	sp, #12
 800ea76:	bd30      	pop	{r4, r5, pc}
 800ea78:	410fc271 	.word	0x410fc271
 800ea7c:	410fc270 	.word	0x410fc270
 800ea80:	e000e400 	.word	0xe000e400
 800ea84:	2400c130 	.word	0x2400c130
 800ea88:	2400c134 	.word	0x2400c134
 800ea8c:	24000080 	.word	0x24000080

0800ea90 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea90:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea94:	2b0f      	cmp	r3, #15
 800ea96:	d90f      	bls.n	800eab8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea98:	4a11      	ldr	r2, [pc, #68]	; (800eae0 <vPortValidateInterruptPriority+0x50>)
 800ea9a:	5c9b      	ldrb	r3, [r3, r2]
 800ea9c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ea9e:	4a11      	ldr	r2, [pc, #68]	; (800eae4 <vPortValidateInterruptPriority+0x54>)
 800eaa0:	7812      	ldrb	r2, [r2, #0]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d908      	bls.n	800eab8 <vPortValidateInterruptPriority+0x28>
 800eaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaaa:	f383 8811 	msr	BASEPRI, r3
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f3bf 8f4f 	dsb	sy
 800eab6:	e7fe      	b.n	800eab6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eab8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800eabc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800eac0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eac4:	4a08      	ldr	r2, [pc, #32]	; (800eae8 <vPortValidateInterruptPriority+0x58>)
 800eac6:	6812      	ldr	r2, [r2, #0]
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d908      	bls.n	800eade <vPortValidateInterruptPriority+0x4e>
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	e7fe      	b.n	800eadc <vPortValidateInterruptPriority+0x4c>
	}
 800eade:	4770      	bx	lr
 800eae0:	e000e3f0 	.word	0xe000e3f0
 800eae4:	2400c130 	.word	0x2400c130
 800eae8:	2400c134 	.word	0x2400c134

0800eaec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eaec:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eaee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800eaf0:	b118      	cbz	r0, 800eafa <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eaf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf4:	6818      	ldr	r0, [r3, #0]
 800eaf6:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800eafa:	4770      	bx	lr

0800eafc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eafc:	b510      	push	{r4, lr}
 800eafe:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb00:	f7ff fea0 	bl	800e844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800eb06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d004      	beq.n	800eb16 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800eb0c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800eb0e:	f7ff febb 	bl	800e888 <vPortExitCritical>

	return xReturn;
}
 800eb12:	4620      	mov	r0, r4
 800eb14:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800eb16:	2401      	movs	r4, #1
 800eb18:	e7f9      	b.n	800eb0e <prvIsQueueFull+0x12>

0800eb1a <prvIsQueueEmpty>:
{
 800eb1a:	b510      	push	{r4, lr}
 800eb1c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800eb1e:	f7ff fe91 	bl	800e844 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eb22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb24:	b923      	cbnz	r3, 800eb30 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800eb26:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800eb28:	f7ff feae 	bl	800e888 <vPortExitCritical>
}
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800eb30:	2400      	movs	r4, #0
 800eb32:	e7f9      	b.n	800eb28 <prvIsQueueEmpty+0xe>

0800eb34 <prvCopyDataToQueue>:
{
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	4604      	mov	r4, r0
 800eb38:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb3a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eb3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800eb3e:	b95a      	cbnz	r2, 800eb58 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb40:	6803      	ldr	r3, [r0, #0]
 800eb42:	b11b      	cbz	r3, 800eb4c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800eb44:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb46:	3601      	adds	r6, #1
 800eb48:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800eb4a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb4c:	6880      	ldr	r0, [r0, #8]
 800eb4e:	f001 fa3f 	bl	800ffd0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb52:	2300      	movs	r3, #0
 800eb54:	60a3      	str	r3, [r4, #8]
 800eb56:	e7f6      	b.n	800eb46 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800eb58:	b96d      	cbnz	r5, 800eb76 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb5a:	6840      	ldr	r0, [r0, #4]
 800eb5c:	f011 fe7e 	bl	802085c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800eb62:	6863      	ldr	r3, [r4, #4]
 800eb64:	4413      	add	r3, r2
 800eb66:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb68:	68a2      	ldr	r2, [r4, #8]
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d319      	bcc.n	800eba2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800eb72:	4628      	mov	r0, r5
 800eb74:	e7e7      	b.n	800eb46 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb76:	68c0      	ldr	r0, [r0, #12]
 800eb78:	f011 fe70 	bl	802085c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800eb7e:	4251      	negs	r1, r2
 800eb80:	68e3      	ldr	r3, [r4, #12]
 800eb82:	1a9b      	subs	r3, r3, r2
 800eb84:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb86:	6822      	ldr	r2, [r4, #0]
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d202      	bcs.n	800eb92 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eb8c:	68a3      	ldr	r3, [r4, #8]
 800eb8e:	440b      	add	r3, r1
 800eb90:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800eb92:	2d02      	cmp	r5, #2
 800eb94:	d001      	beq.n	800eb9a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800eb96:	2000      	movs	r0, #0
 800eb98:	e7d5      	b.n	800eb46 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb9a:	b126      	cbz	r6, 800eba6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800eb9c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800eb9e:	2000      	movs	r0, #0
 800eba0:	e7d1      	b.n	800eb46 <prvCopyDataToQueue+0x12>
 800eba2:	4628      	mov	r0, r5
 800eba4:	e7cf      	b.n	800eb46 <prvCopyDataToQueue+0x12>
 800eba6:	2000      	movs	r0, #0
 800eba8:	e7cd      	b.n	800eb46 <prvCopyDataToQueue+0x12>

0800ebaa <prvCopyDataFromQueue>:
{
 800ebaa:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ebac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ebae:	b16a      	cbz	r2, 800ebcc <prvCopyDataFromQueue+0x22>
{
 800ebb0:	b510      	push	{r4, lr}
 800ebb2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ebb4:	68d9      	ldr	r1, [r3, #12]
 800ebb6:	4411      	add	r1, r2
 800ebb8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ebba:	689c      	ldr	r4, [r3, #8]
 800ebbc:	42a1      	cmp	r1, r4
 800ebbe:	d301      	bcc.n	800ebc4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ebc0:	6819      	ldr	r1, [r3, #0]
 800ebc2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebc4:	68d9      	ldr	r1, [r3, #12]
 800ebc6:	f011 fe49 	bl	802085c <memcpy>
}
 800ebca:	bd10      	pop	{r4, pc}
 800ebcc:	4770      	bx	lr

0800ebce <prvUnlockQueue>:
{
 800ebce:	b538      	push	{r3, r4, r5, lr}
 800ebd0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800ebd2:	f7ff fe37 	bl	800e844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ebd6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800ebda:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebdc:	e001      	b.n	800ebe2 <prvUnlockQueue+0x14>
			--cTxLock;
 800ebde:	3c01      	subs	r4, #1
 800ebe0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebe2:	2c00      	cmp	r4, #0
 800ebe4:	dd0a      	ble.n	800ebfc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ebe8:	b143      	cbz	r3, 800ebfc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebea:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800ebee:	f001 f8f9 	bl	800fde4 <xTaskRemoveFromEventList>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d0f3      	beq.n	800ebde <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800ebf6:	f001 f989 	bl	800ff0c <vTaskMissedYield>
 800ebfa:	e7f0      	b.n	800ebde <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800ebfc:	23ff      	movs	r3, #255	; 0xff
 800ebfe:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ec02:	f7ff fe41 	bl	800e888 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ec06:	f7ff fe1d 	bl	800e844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ec0a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800ec0e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec10:	e001      	b.n	800ec16 <prvUnlockQueue+0x48>
				--cRxLock;
 800ec12:	3c01      	subs	r4, #1
 800ec14:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec16:	2c00      	cmp	r4, #0
 800ec18:	dd0a      	ble.n	800ec30 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec1a:	692b      	ldr	r3, [r5, #16]
 800ec1c:	b143      	cbz	r3, 800ec30 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec1e:	f105 0010 	add.w	r0, r5, #16
 800ec22:	f001 f8df 	bl	800fde4 <xTaskRemoveFromEventList>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d0f3      	beq.n	800ec12 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800ec2a:	f001 f96f 	bl	800ff0c <vTaskMissedYield>
 800ec2e:	e7f0      	b.n	800ec12 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800ec30:	23ff      	movs	r3, #255	; 0xff
 800ec32:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ec36:	f7ff fe27 	bl	800e888 <vPortExitCritical>
}
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}

0800ec3c <xQueueGenericReset>:
{
 800ec3c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800ec3e:	b1e0      	cbz	r0, 800ec7a <xQueueGenericReset+0x3e>
 800ec40:	460d      	mov	r5, r1
 800ec42:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ec44:	f7ff fdfe 	bl	800e844 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec48:	6823      	ldr	r3, [r4, #0]
 800ec4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ec4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ec4e:	fb01 3002 	mla	r0, r1, r2, r3
 800ec52:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ec54:	2000      	movs	r0, #0
 800ec56:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec58:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec5a:	3a01      	subs	r2, #1
 800ec5c:	fb02 3301 	mla	r3, r2, r1, r3
 800ec60:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ec62:	23ff      	movs	r3, #255	; 0xff
 800ec64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ec68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800ec6c:	b9fd      	cbnz	r5, 800ecae <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec6e:	6923      	ldr	r3, [r4, #16]
 800ec70:	b963      	cbnz	r3, 800ec8c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800ec72:	f7ff fe09 	bl	800e888 <vPortExitCritical>
}
 800ec76:	2001      	movs	r0, #1
 800ec78:	bd38      	pop	{r3, r4, r5, pc}
 800ec7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ec8a:	e7fe      	b.n	800ec8a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec8c:	f104 0010 	add.w	r0, r4, #16
 800ec90:	f001 f8a8 	bl	800fde4 <xTaskRemoveFromEventList>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d0ec      	beq.n	800ec72 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800ec98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ec9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eca0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	e7e1      	b.n	800ec72 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ecae:	f104 0010 	add.w	r0, r4, #16
 800ecb2:	f7ff fd19 	bl	800e6e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ecb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ecba:	f7ff fd15 	bl	800e6e8 <vListInitialise>
 800ecbe:	e7d8      	b.n	800ec72 <xQueueGenericReset+0x36>

0800ecc0 <prvInitialiseNewQueue>:
{
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	461d      	mov	r5, r3
 800ecc4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	b949      	cbnz	r1, 800ecde <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ecca:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800eccc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ecce:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f7ff ffb2 	bl	800ec3c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ecd8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800ecdc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ecde:	6022      	str	r2, [r4, #0]
 800ece0:	e7f4      	b.n	800eccc <prvInitialiseNewQueue+0xc>

0800ece2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ece2:	b940      	cbnz	r0, 800ecf6 <xQueueGenericCreateStatic+0x14>
 800ece4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece8:	f383 8811 	msr	BASEPRI, r3
 800ecec:	f3bf 8f6f 	isb	sy
 800ecf0:	f3bf 8f4f 	dsb	sy
 800ecf4:	e7fe      	b.n	800ecf4 <xQueueGenericCreateStatic+0x12>
	{
 800ecf6:	b510      	push	{r4, lr}
 800ecf8:	b084      	sub	sp, #16
 800ecfa:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800ecfc:	b183      	cbz	r3, 800ed20 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ecfe:	1e0b      	subs	r3, r1, #0
 800ed00:	bf18      	it	ne
 800ed02:	2301      	movne	r3, #1
 800ed04:	2a00      	cmp	r2, #0
 800ed06:	bf08      	it	eq
 800ed08:	f043 0301 	orreq.w	r3, r3, #1
 800ed0c:	b98b      	cbnz	r3, 800ed32 <xQueueGenericCreateStatic+0x50>
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	f383 8811 	msr	BASEPRI, r3
 800ed16:	f3bf 8f6f 	isb	sy
 800ed1a:	f3bf 8f4f 	dsb	sy
 800ed1e:	e7fe      	b.n	800ed1e <xQueueGenericCreateStatic+0x3c>
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800ed30:	e7fe      	b.n	800ed30 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ed32:	fab1 f381 	clz	r3, r1
 800ed36:	095b      	lsrs	r3, r3, #5
 800ed38:	2a00      	cmp	r2, #0
 800ed3a:	bf18      	it	ne
 800ed3c:	f043 0301 	orrne.w	r3, r3, #1
 800ed40:	b943      	cbnz	r3, 800ed54 <xQueueGenericCreateStatic+0x72>
 800ed42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	e7fe      	b.n	800ed52 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ed54:	2350      	movs	r3, #80	; 0x50
 800ed56:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ed58:	9b03      	ldr	r3, [sp, #12]
 800ed5a:	2b50      	cmp	r3, #80	; 0x50
 800ed5c:	d008      	beq.n	800ed70 <xQueueGenericCreateStatic+0x8e>
 800ed5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	e7fe      	b.n	800ed6e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ed70:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ed72:	2301      	movs	r3, #1
 800ed74:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ed78:	9400      	str	r4, [sp, #0]
 800ed7a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ed7e:	f7ff ff9f 	bl	800ecc0 <prvInitialiseNewQueue>
	}
 800ed82:	4620      	mov	r0, r4
 800ed84:	b004      	add	sp, #16
 800ed86:	bd10      	pop	{r4, pc}

0800ed88 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed88:	b940      	cbnz	r0, 800ed9c <xQueueGenericCreate+0x14>
 800ed8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8e:	f383 8811 	msr	BASEPRI, r3
 800ed92:	f3bf 8f6f 	isb	sy
 800ed96:	f3bf 8f4f 	dsb	sy
 800ed9a:	e7fe      	b.n	800ed9a <xQueueGenericCreate+0x12>
	{
 800ed9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	460d      	mov	r5, r1
 800eda2:	4614      	mov	r4, r2
 800eda4:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eda6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800edaa:	3050      	adds	r0, #80	; 0x50
 800edac:	f7ff fbe0 	bl	800e570 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800edb0:	4607      	mov	r7, r0
 800edb2:	b150      	cbz	r0, 800edca <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800edb4:	2300      	movs	r3, #0
 800edb6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800edba:	9000      	str	r0, [sp, #0]
 800edbc:	4623      	mov	r3, r4
 800edbe:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800edc2:	4629      	mov	r1, r5
 800edc4:	4630      	mov	r0, r6
 800edc6:	f7ff ff7b 	bl	800ecc0 <prvInitialiseNewQueue>
	}
 800edca:	4638      	mov	r0, r7
 800edcc:	b003      	add	sp, #12
 800edce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edd0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800edd0:	b940      	cbnz	r0, 800ede4 <xQueueCreateCountingSemaphoreStatic+0x14>
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	e7fe      	b.n	800ede2 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800ede4:	b510      	push	{r4, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800edea:	4288      	cmp	r0, r1
 800edec:	d208      	bcs.n	800ee00 <xQueueCreateCountingSemaphoreStatic+0x30>
 800edee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	e7fe      	b.n	800edfe <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ee00:	2302      	movs	r3, #2
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	4613      	mov	r3, r2
 800ee06:	2200      	movs	r2, #0
 800ee08:	4611      	mov	r1, r2
 800ee0a:	f7ff ff6a 	bl	800ece2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ee0e:	b100      	cbz	r0, 800ee12 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ee10:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ee12:	b002      	add	sp, #8
 800ee14:	bd10      	pop	{r4, pc}

0800ee16 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800ee16:	b940      	cbnz	r0, 800ee2a <xQueueCreateCountingSemaphore+0x14>
 800ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1c:	f383 8811 	msr	BASEPRI, r3
 800ee20:	f3bf 8f6f 	isb	sy
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	e7fe      	b.n	800ee28 <xQueueCreateCountingSemaphore+0x12>
	{
 800ee2a:	b510      	push	{r4, lr}
 800ee2c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800ee2e:	4288      	cmp	r0, r1
 800ee30:	d208      	bcs.n	800ee44 <xQueueCreateCountingSemaphore+0x2e>
 800ee32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee36:	f383 8811 	msr	BASEPRI, r3
 800ee3a:	f3bf 8f6f 	isb	sy
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	e7fe      	b.n	800ee42 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ee44:	2202      	movs	r2, #2
 800ee46:	2100      	movs	r1, #0
 800ee48:	f7ff ff9e 	bl	800ed88 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ee4c:	b100      	cbz	r0, 800ee50 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ee4e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ee50:	bd10      	pop	{r4, pc}

0800ee52 <xQueueGenericSend>:
{
 800ee52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee54:	b085      	sub	sp, #20
 800ee56:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ee58:	b188      	cbz	r0, 800ee7e <xQueueGenericSend+0x2c>
 800ee5a:	460f      	mov	r7, r1
 800ee5c:	461d      	mov	r5, r3
 800ee5e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee60:	b1b1      	cbz	r1, 800ee90 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee62:	2d02      	cmp	r5, #2
 800ee64:	d120      	bne.n	800eea8 <xQueueGenericSend+0x56>
 800ee66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d01d      	beq.n	800eea8 <xQueueGenericSend+0x56>
 800ee6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee70:	f383 8811 	msr	BASEPRI, r3
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	e7fe      	b.n	800ee7c <xQueueGenericSend+0x2a>
 800ee7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee82:	f383 8811 	msr	BASEPRI, r3
 800ee86:	f3bf 8f6f 	isb	sy
 800ee8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ee8e:	e7fe      	b.n	800ee8e <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d0e5      	beq.n	800ee62 <xQueueGenericSend+0x10>
 800ee96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9a:	f383 8811 	msr	BASEPRI, r3
 800ee9e:	f3bf 8f6f 	isb	sy
 800eea2:	f3bf 8f4f 	dsb	sy
 800eea6:	e7fe      	b.n	800eea6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eea8:	f001 f836 	bl	800ff18 <xTaskGetSchedulerState>
 800eeac:	4606      	mov	r6, r0
 800eeae:	b958      	cbnz	r0, 800eec8 <xQueueGenericSend+0x76>
 800eeb0:	9b01      	ldr	r3, [sp, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d048      	beq.n	800ef48 <xQueueGenericSend+0xf6>
 800eeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeba:	f383 8811 	msr	BASEPRI, r3
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	f3bf 8f4f 	dsb	sy
 800eec6:	e7fe      	b.n	800eec6 <xQueueGenericSend+0x74>
 800eec8:	2600      	movs	r6, #0
 800eeca:	e03d      	b.n	800ef48 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eecc:	462a      	mov	r2, r5
 800eece:	4639      	mov	r1, r7
 800eed0:	4620      	mov	r0, r4
 800eed2:	f7ff fe2f 	bl	800eb34 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eed8:	b97b      	cbnz	r3, 800eefa <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800eeda:	b148      	cbz	r0, 800eef0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800eedc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800eee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800eef0:	f7ff fcca 	bl	800e888 <vPortExitCritical>
				return pdPASS;
 800eef4:	2001      	movs	r0, #1
}
 800eef6:	b005      	add	sp, #20
 800eef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eefa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800eefe:	f000 ff71 	bl	800fde4 <xTaskRemoveFromEventList>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d0f4      	beq.n	800eef0 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800ef06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ef0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	e7e9      	b.n	800eef0 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800ef1c:	f7ff fcb4 	bl	800e888 <vPortExitCritical>
					return errQUEUE_FULL;
 800ef20:	2000      	movs	r0, #0
 800ef22:	e7e8      	b.n	800eef6 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef24:	a802      	add	r0, sp, #8
 800ef26:	f000 ffa3 	bl	800fe70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef2a:	2601      	movs	r6, #1
 800ef2c:	e019      	b.n	800ef62 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800ef2e:	2300      	movs	r3, #0
 800ef30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ef34:	e021      	b.n	800ef7a <xQueueGenericSend+0x128>
 800ef36:	2300      	movs	r3, #0
 800ef38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef3c:	e023      	b.n	800ef86 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f7ff fe45 	bl	800ebce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef44:	f000 fe4e 	bl	800fbe4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ef48:	f7ff fc7c 	bl	800e844 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ef4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d3bb      	bcc.n	800eecc <xQueueGenericSend+0x7a>
 800ef54:	2d02      	cmp	r5, #2
 800ef56:	d0b9      	beq.n	800eecc <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef58:	9b01      	ldr	r3, [sp, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d0de      	beq.n	800ef1c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800ef5e:	2e00      	cmp	r6, #0
 800ef60:	d0e0      	beq.n	800ef24 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800ef62:	f7ff fc91 	bl	800e888 <vPortExitCritical>
		vTaskSuspendAll();
 800ef66:	f000 fda3 	bl	800fab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef6a:	f7ff fc6b 	bl	800e844 <vPortEnterCritical>
 800ef6e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ef72:	b252      	sxtb	r2, r2
 800ef74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef78:	d0d9      	beq.n	800ef2e <xQueueGenericSend+0xdc>
 800ef7a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800ef7e:	b252      	sxtb	r2, r2
 800ef80:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef84:	d0d7      	beq.n	800ef36 <xQueueGenericSend+0xe4>
 800ef86:	f7ff fc7f 	bl	800e888 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef8a:	a901      	add	r1, sp, #4
 800ef8c:	a802      	add	r0, sp, #8
 800ef8e:	f000 ff7b 	bl	800fe88 <xTaskCheckForTimeOut>
 800ef92:	b9d8      	cbnz	r0, 800efcc <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ef94:	4620      	mov	r0, r4
 800ef96:	f7ff fdb1 	bl	800eafc <prvIsQueueFull>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d0cf      	beq.n	800ef3e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ef9e:	9901      	ldr	r1, [sp, #4]
 800efa0:	f104 0010 	add.w	r0, r4, #16
 800efa4:	f000 feea 	bl	800fd7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efa8:	4620      	mov	r0, r4
 800efaa:	f7ff fe10 	bl	800ebce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efae:	f000 fe19 	bl	800fbe4 <xTaskResumeAll>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d1c8      	bne.n	800ef48 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800efb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800efba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	e7bd      	b.n	800ef48 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800efcc:	4620      	mov	r0, r4
 800efce:	f7ff fdfe 	bl	800ebce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800efd2:	f000 fe07 	bl	800fbe4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800efd6:	2000      	movs	r0, #0
 800efd8:	e78d      	b.n	800eef6 <xQueueGenericSend+0xa4>

0800efda <xQueueGenericSendFromISR>:
{
 800efda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800efde:	b190      	cbz	r0, 800f006 <xQueueGenericSendFromISR+0x2c>
 800efe0:	460f      	mov	r7, r1
 800efe2:	4616      	mov	r6, r2
 800efe4:	461c      	mov	r4, r3
 800efe6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efe8:	b1b1      	cbz	r1, 800f018 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800efea:	2c02      	cmp	r4, #2
 800efec:	d120      	bne.n	800f030 <xQueueGenericSendFromISR+0x56>
 800efee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d01d      	beq.n	800f030 <xQueueGenericSendFromISR+0x56>
 800eff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	e7fe      	b.n	800f004 <xQueueGenericSendFromISR+0x2a>
 800f006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00a:	f383 8811 	msr	BASEPRI, r3
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800f016:	e7fe      	b.n	800f016 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f018:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d0e5      	beq.n	800efea <xQueueGenericSendFromISR+0x10>
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	e7fe      	b.n	800f02e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f030:	f7ff fd2e 	bl	800ea90 <vPortValidateInterruptPriority>
	__asm volatile
 800f034:	f3ef 8911 	mrs	r9, BASEPRI
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f048:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800f04a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d306      	bcc.n	800f05e <xQueueGenericSendFromISR+0x84>
 800f050:	2c02      	cmp	r4, #2
 800f052:	d004      	beq.n	800f05e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800f054:	2000      	movs	r0, #0
	__asm volatile
 800f056:	f389 8811 	msr	BASEPRI, r9
}
 800f05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800f05e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800f062:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f066:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f068:	4622      	mov	r2, r4
 800f06a:	4639      	mov	r1, r7
 800f06c:	4628      	mov	r0, r5
 800f06e:	f7ff fd61 	bl	800eb34 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800f072:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f076:	d006      	beq.n	800f086 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f078:	f108 0301 	add.w	r3, r8, #1
 800f07c:	b25b      	sxtb	r3, r3
 800f07e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800f082:	2001      	movs	r0, #1
 800f084:	e7e7      	b.n	800f056 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f086:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f088:	b90b      	cbnz	r3, 800f08e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800f08a:	2001      	movs	r0, #1
 800f08c:	e7e3      	b.n	800f056 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f08e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800f092:	f000 fea7 	bl	800fde4 <xTaskRemoveFromEventList>
 800f096:	b118      	cbz	r0, 800f0a0 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800f098:	b126      	cbz	r6, 800f0a4 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f09a:	2001      	movs	r0, #1
 800f09c:	6030      	str	r0, [r6, #0]
 800f09e:	e7da      	b.n	800f056 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800f0a0:	2001      	movs	r0, #1
 800f0a2:	e7d8      	b.n	800f056 <xQueueGenericSendFromISR+0x7c>
 800f0a4:	2001      	movs	r0, #1
 800f0a6:	e7d6      	b.n	800f056 <xQueueGenericSendFromISR+0x7c>

0800f0a8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800f0a8:	b168      	cbz	r0, 800f0c6 <xQueueGiveFromISR+0x1e>
{
 800f0aa:	b570      	push	{r4, r5, r6, lr}
 800f0ac:	460c      	mov	r4, r1
 800f0ae:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f0b2:	b18b      	cbz	r3, 800f0d8 <xQueueGiveFromISR+0x30>
	__asm volatile
 800f0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b8:	f383 8811 	msr	BASEPRI, r3
 800f0bc:	f3bf 8f6f 	isb	sy
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	e7fe      	b.n	800f0c4 <xQueueGiveFromISR+0x1c>
 800f0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ca:	f383 8811 	msr	BASEPRI, r3
 800f0ce:	f3bf 8f6f 	isb	sy
 800f0d2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800f0d6:	e7fe      	b.n	800f0d6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f0d8:	6803      	ldr	r3, [r0, #0]
 800f0da:	b1eb      	cbz	r3, 800f118 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0dc:	f7ff fcd8 	bl	800ea90 <vPortValidateInterruptPriority>
	__asm volatile
 800f0e0:	f3ef 8611 	mrs	r6, BASEPRI
 800f0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e8:	f383 8811 	msr	BASEPRI, r3
 800f0ec:	f3bf 8f6f 	isb	sy
 800f0f0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0f4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f0f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d926      	bls.n	800f14a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800f0fc:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800f100:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f102:	3201      	adds	r2, #1
 800f104:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800f106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f10a:	d011      	beq.n	800f130 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f10c:	3301      	adds	r3, #1
 800f10e:	b25b      	sxtb	r3, r3
 800f110:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800f114:	2001      	movs	r0, #1
 800f116:	e019      	b.n	800f14c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f118:	6883      	ldr	r3, [r0, #8]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d0de      	beq.n	800f0dc <xQueueGiveFromISR+0x34>
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	e7fe      	b.n	800f12e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f130:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f132:	b90b      	cbnz	r3, 800f138 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800f134:	2001      	movs	r0, #1
 800f136:	e009      	b.n	800f14c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f138:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800f13c:	f000 fe52 	bl	800fde4 <xTaskRemoveFromEventList>
 800f140:	b138      	cbz	r0, 800f152 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800f142:	b144      	cbz	r4, 800f156 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f144:	2001      	movs	r0, #1
 800f146:	6020      	str	r0, [r4, #0]
 800f148:	e000      	b.n	800f14c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800f14a:	2000      	movs	r0, #0
	__asm volatile
 800f14c:	f386 8811 	msr	BASEPRI, r6
}
 800f150:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800f152:	2001      	movs	r0, #1
 800f154:	e7fa      	b.n	800f14c <xQueueGiveFromISR+0xa4>
 800f156:	2001      	movs	r0, #1
 800f158:	e7f8      	b.n	800f14c <xQueueGiveFromISR+0xa4>

0800f15a <xQueueReceive>:
{
 800f15a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f15c:	b085      	sub	sp, #20
 800f15e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f160:	b190      	cbz	r0, 800f188 <xQueueReceive+0x2e>
 800f162:	460f      	mov	r7, r1
 800f164:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f166:	b1c1      	cbz	r1, 800f19a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f168:	f000 fed6 	bl	800ff18 <xTaskGetSchedulerState>
 800f16c:	4606      	mov	r6, r0
 800f16e:	bb00      	cbnz	r0, 800f1b2 <xQueueReceive+0x58>
 800f170:	9b01      	ldr	r3, [sp, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d05e      	beq.n	800f234 <xQueueReceive+0xda>
	__asm volatile
 800f176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	e7fe      	b.n	800f186 <xQueueReceive+0x2c>
 800f188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800f198:	e7fe      	b.n	800f198 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f19a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d0e3      	beq.n	800f168 <xQueueReceive+0xe>
 800f1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	e7fe      	b.n	800f1b0 <xQueueReceive+0x56>
 800f1b2:	2600      	movs	r6, #0
 800f1b4:	e03e      	b.n	800f234 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7ff fcf6 	bl	800ebaa <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1be:	3d01      	subs	r5, #1
 800f1c0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1c2:	6923      	ldr	r3, [r4, #16]
 800f1c4:	b923      	cbnz	r3, 800f1d0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800f1c6:	f7ff fb5f 	bl	800e888 <vPortExitCritical>
				return pdPASS;
 800f1ca:	2001      	movs	r0, #1
}
 800f1cc:	b005      	add	sp, #20
 800f1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1d0:	f104 0010 	add.w	r0, r4, #16
 800f1d4:	f000 fe06 	bl	800fde4 <xTaskRemoveFromEventList>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d0f4      	beq.n	800f1c6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800f1dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f1e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f1e8:	f3bf 8f4f 	dsb	sy
 800f1ec:	f3bf 8f6f 	isb	sy
 800f1f0:	e7e9      	b.n	800f1c6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800f1f2:	f7ff fb49 	bl	800e888 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	e7e8      	b.n	800f1cc <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1fa:	a802      	add	r0, sp, #8
 800f1fc:	f000 fe38 	bl	800fe70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f200:	2601      	movs	r6, #1
 800f202:	e021      	b.n	800f248 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800f204:	2300      	movs	r3, #0
 800f206:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f20a:	e029      	b.n	800f260 <xQueueReceive+0x106>
 800f20c:	2300      	movs	r3, #0
 800f20e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f212:	e02b      	b.n	800f26c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800f214:	4620      	mov	r0, r4
 800f216:	f7ff fcda 	bl	800ebce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f21a:	f000 fce3 	bl	800fbe4 <xTaskResumeAll>
 800f21e:	e009      	b.n	800f234 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff fcd4 	bl	800ebce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f226:	f000 fcdd 	bl	800fbe4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f22a:	4620      	mov	r0, r4
 800f22c:	f7ff fc75 	bl	800eb1a <prvIsQueueEmpty>
 800f230:	2800      	cmp	r0, #0
 800f232:	d13f      	bne.n	800f2b4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800f234:	f7ff fb06 	bl	800e844 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f238:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f23a:	2d00      	cmp	r5, #0
 800f23c:	d1bb      	bne.n	800f1b6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f23e:	9b01      	ldr	r3, [sp, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d0d6      	beq.n	800f1f2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800f244:	2e00      	cmp	r6, #0
 800f246:	d0d8      	beq.n	800f1fa <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800f248:	f7ff fb1e 	bl	800e888 <vPortExitCritical>
		vTaskSuspendAll();
 800f24c:	f000 fc30 	bl	800fab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f250:	f7ff faf8 	bl	800e844 <vPortEnterCritical>
 800f254:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f258:	b25b      	sxtb	r3, r3
 800f25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25e:	d0d1      	beq.n	800f204 <xQueueReceive+0xaa>
 800f260:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f264:	b25b      	sxtb	r3, r3
 800f266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26a:	d0cf      	beq.n	800f20c <xQueueReceive+0xb2>
 800f26c:	f7ff fb0c 	bl	800e888 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f270:	a901      	add	r1, sp, #4
 800f272:	a802      	add	r0, sp, #8
 800f274:	f000 fe08 	bl	800fe88 <xTaskCheckForTimeOut>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d1d1      	bne.n	800f220 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f27c:	4620      	mov	r0, r4
 800f27e:	f7ff fc4c 	bl	800eb1a <prvIsQueueEmpty>
 800f282:	2800      	cmp	r0, #0
 800f284:	d0c6      	beq.n	800f214 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f286:	9901      	ldr	r1, [sp, #4]
 800f288:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f28c:	f000 fd76 	bl	800fd7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f290:	4620      	mov	r0, r4
 800f292:	f7ff fc9c 	bl	800ebce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f296:	f000 fca5 	bl	800fbe4 <xTaskResumeAll>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d1ca      	bne.n	800f234 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800f29e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	f3bf 8f6f 	isb	sy
 800f2b2:	e7bf      	b.n	800f234 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	e789      	b.n	800f1cc <xQueueReceive+0x72>

0800f2b8 <xQueueSemaphoreTake>:
{
 800f2b8:	b570      	push	{r4, r5, r6, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f2be:	b158      	cbz	r0, 800f2d8 <xQueueSemaphoreTake+0x20>
 800f2c0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800f2c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f2c4:	b18b      	cbz	r3, 800f2ea <xQueueSemaphoreTake+0x32>
 800f2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ca:	f383 8811 	msr	BASEPRI, r3
 800f2ce:	f3bf 8f6f 	isb	sy
 800f2d2:	f3bf 8f4f 	dsb	sy
 800f2d6:	e7fe      	b.n	800f2d6 <xQueueSemaphoreTake+0x1e>
 800f2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2dc:	f383 8811 	msr	BASEPRI, r3
 800f2e0:	f3bf 8f6f 	isb	sy
 800f2e4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800f2e8:	e7fe      	b.n	800f2e8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2ea:	f000 fe15 	bl	800ff18 <xTaskGetSchedulerState>
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	b950      	cbnz	r0, 800f308 <xQueueSemaphoreTake+0x50>
 800f2f2:	9b01      	ldr	r3, [sp, #4]
 800f2f4:	b15b      	cbz	r3, 800f30e <xQueueSemaphoreTake+0x56>
 800f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	e7fe      	b.n	800f306 <xQueueSemaphoreTake+0x4e>
 800f308:	2600      	movs	r6, #0
 800f30a:	4635      	mov	r5, r6
 800f30c:	e055      	b.n	800f3ba <xQueueSemaphoreTake+0x102>
 800f30e:	4606      	mov	r6, r0
 800f310:	e053      	b.n	800f3ba <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f312:	3b01      	subs	r3, #1
 800f314:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	b13b      	cbz	r3, 800f32a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f31a:	6923      	ldr	r3, [r4, #16]
 800f31c:	b94b      	cbnz	r3, 800f332 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800f31e:	f7ff fab3 	bl	800e888 <vPortExitCritical>
				return pdPASS;
 800f322:	2601      	movs	r6, #1
}
 800f324:	4630      	mov	r0, r6
 800f326:	b004      	add	sp, #16
 800f328:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f32a:	f000 fee9 	bl	8010100 <pvTaskIncrementMutexHeldCount>
 800f32e:	60a0      	str	r0, [r4, #8]
 800f330:	e7f3      	b.n	800f31a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f332:	f104 0010 	add.w	r0, r4, #16
 800f336:	f000 fd55 	bl	800fde4 <xTaskRemoveFromEventList>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d0ef      	beq.n	800f31e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800f33e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f346:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	e7e4      	b.n	800f31e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f354:	b146      	cbz	r6, 800f368 <xQueueSemaphoreTake+0xb0>
 800f356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35a:	f383 8811 	msr	BASEPRI, r3
 800f35e:	f3bf 8f6f 	isb	sy
 800f362:	f3bf 8f4f 	dsb	sy
 800f366:	e7fe      	b.n	800f366 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800f368:	f7ff fa8e 	bl	800e888 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f36c:	e7da      	b.n	800f324 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f36e:	a802      	add	r0, sp, #8
 800f370:	f000 fd7e 	bl	800fe70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f374:	2501      	movs	r5, #1
 800f376:	e02a      	b.n	800f3ce <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800f378:	2300      	movs	r3, #0
 800f37a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f37e:	e032      	b.n	800f3e6 <xQueueSemaphoreTake+0x12e>
 800f380:	2300      	movs	r3, #0
 800f382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f386:	e034      	b.n	800f3f2 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800f388:	f7ff fa5c 	bl	800e844 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f38c:	68a0      	ldr	r0, [r4, #8]
 800f38e:	f000 fdd3 	bl	800ff38 <xTaskPriorityInherit>
 800f392:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800f394:	f7ff fa78 	bl	800e888 <vPortExitCritical>
 800f398:	e03b      	b.n	800f412 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800f39a:	4620      	mov	r0, r4
 800f39c:	f7ff fc17 	bl	800ebce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3a0:	f000 fc20 	bl	800fbe4 <xTaskResumeAll>
 800f3a4:	e009      	b.n	800f3ba <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f7ff fc11 	bl	800ebce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3ac:	f000 fc1a 	bl	800fbe4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f7ff fbb2 	bl	800eb1a <prvIsQueueEmpty>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	d142      	bne.n	800f440 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800f3ba:	f7ff fa43 	bl	800e844 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f3be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d1a6      	bne.n	800f312 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3c4:	9b01      	ldr	r3, [sp, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d0c4      	beq.n	800f354 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800f3ca:	2d00      	cmp	r5, #0
 800f3cc:	d0cf      	beq.n	800f36e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800f3ce:	f7ff fa5b 	bl	800e888 <vPortExitCritical>
		vTaskSuspendAll();
 800f3d2:	f000 fb6d 	bl	800fab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f3d6:	f7ff fa35 	bl	800e844 <vPortEnterCritical>
 800f3da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f3de:	b25b      	sxtb	r3, r3
 800f3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e4:	d0c8      	beq.n	800f378 <xQueueSemaphoreTake+0xc0>
 800f3e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f3ea:	b25b      	sxtb	r3, r3
 800f3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3f0:	d0c6      	beq.n	800f380 <xQueueSemaphoreTake+0xc8>
 800f3f2:	f7ff fa49 	bl	800e888 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3f6:	a901      	add	r1, sp, #4
 800f3f8:	a802      	add	r0, sp, #8
 800f3fa:	f000 fd45 	bl	800fe88 <xTaskCheckForTimeOut>
 800f3fe:	2800      	cmp	r0, #0
 800f400:	d1d1      	bne.n	800f3a6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f402:	4620      	mov	r0, r4
 800f404:	f7ff fb89 	bl	800eb1a <prvIsQueueEmpty>
 800f408:	2800      	cmp	r0, #0
 800f40a:	d0c6      	beq.n	800f39a <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f40c:	6823      	ldr	r3, [r4, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d0ba      	beq.n	800f388 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f412:	9901      	ldr	r1, [sp, #4]
 800f414:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f418:	f000 fcb0 	bl	800fd7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f41c:	4620      	mov	r0, r4
 800f41e:	f7ff fbd6 	bl	800ebce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f422:	f000 fbdf 	bl	800fbe4 <xTaskResumeAll>
 800f426:	2800      	cmp	r0, #0
 800f428:	d1c7      	bne.n	800f3ba <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800f42a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f432:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	f3bf 8f6f 	isb	sy
 800f43e:	e7bc      	b.n	800f3ba <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800f440:	b90e      	cbnz	r6, 800f446 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800f442:	2600      	movs	r6, #0
 800f444:	e76e      	b.n	800f324 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800f446:	f7ff f9fd 	bl	800e844 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f44a:	4620      	mov	r0, r4
 800f44c:	f7ff fb4e 	bl	800eaec <prvGetDisinheritPriorityAfterTimeout>
 800f450:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f452:	68a0      	ldr	r0, [r4, #8]
 800f454:	f000 fe04 	bl	8010060 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800f458:	f7ff fa16 	bl	800e888 <vPortExitCritical>
 800f45c:	e7f1      	b.n	800f442 <xQueueSemaphoreTake+0x18a>

0800f45e <xQueueReceiveFromISR>:
{
 800f45e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800f462:	b1b0      	cbz	r0, 800f492 <xQueueReceiveFromISR+0x34>
 800f464:	460d      	mov	r5, r1
 800f466:	4616      	mov	r6, r2
 800f468:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f46a:	b1d9      	cbz	r1, 800f4a4 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f46c:	f7ff fb10 	bl	800ea90 <vPortValidateInterruptPriority>
	__asm volatile
 800f470:	f3ef 8811 	mrs	r8, BASEPRI
 800f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f484:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f486:	b9cf      	cbnz	r7, 800f4bc <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800f488:	2000      	movs	r0, #0
	__asm volatile
 800f48a:	f388 8811 	msr	BASEPRI, r8
}
 800f48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800f492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f496:	f383 8811 	msr	BASEPRI, r3
 800f49a:	f3bf 8f6f 	isb	sy
 800f49e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800f4a2:	e7fe      	b.n	800f4a2 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d0e0      	beq.n	800f46c <xQueueReceiveFromISR+0xe>
 800f4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	e7fe      	b.n	800f4ba <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800f4bc:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800f4c0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f7ff fb6f 	bl	800ebaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f4cc:	3f01      	subs	r7, #1
 800f4ce:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800f4d0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800f4d4:	d006      	beq.n	800f4e4 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f4d6:	f109 0301 	add.w	r3, r9, #1
 800f4da:	b25b      	sxtb	r3, r3
 800f4dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f4e0:	2001      	movs	r0, #1
 800f4e2:	e7d2      	b.n	800f48a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4e4:	6923      	ldr	r3, [r4, #16]
 800f4e6:	b90b      	cbnz	r3, 800f4ec <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800f4e8:	2001      	movs	r0, #1
 800f4ea:	e7ce      	b.n	800f48a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4ec:	f104 0010 	add.w	r0, r4, #16
 800f4f0:	f000 fc78 	bl	800fde4 <xTaskRemoveFromEventList>
 800f4f4:	b118      	cbz	r0, 800f4fe <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800f4f6:	b126      	cbz	r6, 800f502 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f4f8:	2001      	movs	r0, #1
 800f4fa:	6030      	str	r0, [r6, #0]
 800f4fc:	e7c5      	b.n	800f48a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800f4fe:	2001      	movs	r0, #1
 800f500:	e7c3      	b.n	800f48a <xQueueReceiveFromISR+0x2c>
 800f502:	2001      	movs	r0, #1
 800f504:	e7c1      	b.n	800f48a <xQueueReceiveFromISR+0x2c>
	...

0800f508 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f508:	2300      	movs	r3, #0
 800f50a:	2b07      	cmp	r3, #7
 800f50c:	d80c      	bhi.n	800f528 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f50e:	4a07      	ldr	r2, [pc, #28]	; (800f52c <vQueueAddToRegistry+0x24>)
 800f510:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f514:	b10a      	cbz	r2, 800f51a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f516:	3301      	adds	r3, #1
 800f518:	e7f7      	b.n	800f50a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f51a:	4a04      	ldr	r2, [pc, #16]	; (800f52c <vQueueAddToRegistry+0x24>)
 800f51c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f524:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f526:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	2400c138 	.word	0x2400c138

0800f530 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f530:	2300      	movs	r3, #0
 800f532:	2b07      	cmp	r3, #7
 800f534:	d80f      	bhi.n	800f556 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f536:	4a08      	ldr	r2, [pc, #32]	; (800f558 <vQueueUnregisterQueue+0x28>)
 800f538:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f53c:	6852      	ldr	r2, [r2, #4]
 800f53e:	4282      	cmp	r2, r0
 800f540:	d001      	beq.n	800f546 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f542:	3301      	adds	r3, #1
 800f544:	e7f5      	b.n	800f532 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f546:	4a04      	ldr	r2, [pc, #16]	; (800f558 <vQueueUnregisterQueue+0x28>)
 800f548:	2100      	movs	r1, #0
 800f54a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f54e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f552:	6059      	str	r1, [r3, #4]
				break;
 800f554:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f556:	4770      	bx	lr
 800f558:	2400c138 	.word	0x2400c138

0800f55c <vQueueDelete>:
	configASSERT( pxQueue );
 800f55c:	b138      	cbz	r0, 800f56e <vQueueDelete+0x12>
{
 800f55e:	b510      	push	{r4, lr}
 800f560:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800f562:	f7ff ffe5 	bl	800f530 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f566:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f56a:	b14b      	cbz	r3, 800f580 <vQueueDelete+0x24>
}
 800f56c:	bd10      	pop	{r4, pc}
 800f56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f572:	f383 8811 	msr	BASEPRI, r3
 800f576:	f3bf 8f6f 	isb	sy
 800f57a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800f57e:	e7fe      	b.n	800f57e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800f580:	4620      	mov	r0, r4
 800f582:	f7ff f873 	bl	800e66c <vPortFree>
}
 800f586:	e7f1      	b.n	800f56c <vQueueDelete+0x10>

0800f588 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f588:	b570      	push	{r4, r5, r6, lr}
 800f58a:	4604      	mov	r4, r0
 800f58c:	460d      	mov	r5, r1
 800f58e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f590:	f7ff f958 	bl	800e844 <vPortEnterCritical>
 800f594:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f598:	b25b      	sxtb	r3, r3
 800f59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59e:	d00d      	beq.n	800f5bc <vQueueWaitForMessageRestricted+0x34>
 800f5a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f5a4:	b25b      	sxtb	r3, r3
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	d00b      	beq.n	800f5c4 <vQueueWaitForMessageRestricted+0x3c>
 800f5ac:	f7ff f96c 	bl	800e888 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f5b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f5b2:	b15b      	cbz	r3, 800f5cc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f7ff fb0a 	bl	800ebce <prvUnlockQueue>
	}
 800f5ba:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f5bc:	2300      	movs	r3, #0
 800f5be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f5c2:	e7ed      	b.n	800f5a0 <vQueueWaitForMessageRestricted+0x18>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5ca:	e7ef      	b.n	800f5ac <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f5cc:	4632      	mov	r2, r6
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f5d4:	f000 fbea 	bl	800fdac <vTaskPlaceOnEventListRestricted>
 800f5d8:	e7ec      	b.n	800f5b4 <vQueueWaitForMessageRestricted+0x2c>
	...

0800f5dc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5dc:	4b08      	ldr	r3, [pc, #32]	; (800f600 <prvResetNextTaskUnblockTime+0x24>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	b923      	cbnz	r3, 800f5ee <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f5e4:	4b07      	ldr	r3, [pc, #28]	; (800f604 <prvResetNextTaskUnblockTime+0x28>)
 800f5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ea:	601a      	str	r2, [r3, #0]
 800f5ec:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5ee:	4b04      	ldr	r3, [pc, #16]	; (800f600 <prvResetNextTaskUnblockTime+0x24>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f5f6:	685a      	ldr	r2, [r3, #4]
 800f5f8:	4b02      	ldr	r3, [pc, #8]	; (800f604 <prvResetNextTaskUnblockTime+0x28>)
 800f5fa:	601a      	str	r2, [r3, #0]
	}
}
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	2400c17c 	.word	0x2400c17c
 800f604:	2400c624 	.word	0x2400c624

0800f608 <prvInitialiseNewTask>:
{
 800f608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f60c:	4680      	mov	r8, r0
 800f60e:	460d      	mov	r5, r1
 800f610:	4617      	mov	r7, r2
 800f612:	4699      	mov	r9, r3
 800f614:	9e08      	ldr	r6, [sp, #32]
 800f616:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f61a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f61c:	0092      	lsls	r2, r2, #2
 800f61e:	21a5      	movs	r1, #165	; 0xa5
 800f620:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f622:	f011 f929 	bl	8020878 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f626:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f628:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800f62c:	443a      	add	r2, r7
 800f62e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f632:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800f636:	2d00      	cmp	r5, #0
 800f638:	d043      	beq.n	800f6c2 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f63a:	f04f 0c00 	mov.w	ip, #0
 800f63e:	f1bc 0f0f 	cmp.w	ip, #15
 800f642:	d80b      	bhi.n	800f65c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f644:	f815 200c 	ldrb.w	r2, [r5, ip]
 800f648:	eb04 030c 	add.w	r3, r4, ip
 800f64c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800f650:	f815 300c 	ldrb.w	r3, [r5, ip]
 800f654:	b113      	cbz	r3, 800f65c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f656:	f10c 0c01 	add.w	ip, ip, #1
 800f65a:	e7f0      	b.n	800f63e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f65c:	2300      	movs	r3, #0
 800f65e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f662:	2e37      	cmp	r6, #55	; 0x37
 800f664:	d900      	bls.n	800f668 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f666:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800f668:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800f66a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f66c:	2500      	movs	r5, #0
 800f66e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f670:	1d20      	adds	r0, r4, #4
 800f672:	f7ff f844 	bl	800e6fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f676:	f104 0018 	add.w	r0, r4, #24
 800f67a:	f7ff f840 	bl	800e6fe <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f67e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f680:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800f684:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f686:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800f688:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f68c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f690:	2260      	movs	r2, #96	; 0x60
 800f692:	4629      	mov	r1, r5
 800f694:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800f698:	f011 f8ee 	bl	8020878 <memset>
 800f69c:	4b0b      	ldr	r3, [pc, #44]	; (800f6cc <prvInitialiseNewTask+0xc4>)
 800f69e:	65a3      	str	r3, [r4, #88]	; 0x58
 800f6a0:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <prvInitialiseNewTask+0xc8>)
 800f6a2:	65e3      	str	r3, [r4, #92]	; 0x5c
 800f6a4:	4b0b      	ldr	r3, [pc, #44]	; (800f6d4 <prvInitialiseNewTask+0xcc>)
 800f6a6:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6a8:	464a      	mov	r2, r9
 800f6aa:	4641      	mov	r1, r8
 800f6ac:	4638      	mov	r0, r7
 800f6ae:	f7ff f89f 	bl	800e7f0 <pxPortInitialiseStack>
 800f6b2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800f6b4:	f1ba 0f00 	cmp.w	sl, #0
 800f6b8:	d001      	beq.n	800f6be <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6ba:	f8ca 4000 	str.w	r4, [sl]
}
 800f6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800f6c8:	e7cb      	b.n	800f662 <prvInitialiseNewTask+0x5a>
 800f6ca:	bf00      	nop
 800f6cc:	08023f10 	.word	0x08023f10
 800f6d0:	08023f30 	.word	0x08023f30
 800f6d4:	08023ef0 	.word	0x08023ef0

0800f6d8 <prvInitialiseTaskLists>:
{
 800f6d8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6da:	2400      	movs	r4, #0
 800f6dc:	e007      	b.n	800f6ee <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800f6e2:	0093      	lsls	r3, r2, #2
 800f6e4:	480e      	ldr	r0, [pc, #56]	; (800f720 <prvInitialiseTaskLists+0x48>)
 800f6e6:	4418      	add	r0, r3
 800f6e8:	f7fe fffe 	bl	800e6e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6ec:	3401      	adds	r4, #1
 800f6ee:	2c37      	cmp	r4, #55	; 0x37
 800f6f0:	d9f5      	bls.n	800f6de <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800f6f2:	4d0c      	ldr	r5, [pc, #48]	; (800f724 <prvInitialiseTaskLists+0x4c>)
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	f7fe fff7 	bl	800e6e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6fa:	4c0b      	ldr	r4, [pc, #44]	; (800f728 <prvInitialiseTaskLists+0x50>)
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f7fe fff3 	bl	800e6e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f702:	480a      	ldr	r0, [pc, #40]	; (800f72c <prvInitialiseTaskLists+0x54>)
 800f704:	f7fe fff0 	bl	800e6e8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f708:	4809      	ldr	r0, [pc, #36]	; (800f730 <prvInitialiseTaskLists+0x58>)
 800f70a:	f7fe ffed 	bl	800e6e8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f70e:	4809      	ldr	r0, [pc, #36]	; (800f734 <prvInitialiseTaskLists+0x5c>)
 800f710:	f7fe ffea 	bl	800e6e8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f714:	4b08      	ldr	r3, [pc, #32]	; (800f738 <prvInitialiseTaskLists+0x60>)
 800f716:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f718:	4b08      	ldr	r3, [pc, #32]	; (800f73c <prvInitialiseTaskLists+0x64>)
 800f71a:	601c      	str	r4, [r3, #0]
}
 800f71c:	bd38      	pop	{r3, r4, r5, pc}
 800f71e:	bf00      	nop
 800f720:	2400c184 	.word	0x2400c184
 800f724:	2400c5f8 	.word	0x2400c5f8
 800f728:	2400c60c 	.word	0x2400c60c
 800f72c:	2400c630 	.word	0x2400c630
 800f730:	2400c65c 	.word	0x2400c65c
 800f734:	2400c648 	.word	0x2400c648
 800f738:	2400c17c 	.word	0x2400c17c
 800f73c:	2400c180 	.word	0x2400c180

0800f740 <prvAddNewTaskToReadyList>:
{
 800f740:	b510      	push	{r4, lr}
 800f742:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800f744:	f7ff f87e 	bl	800e844 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800f748:	4a22      	ldr	r2, [pc, #136]	; (800f7d4 <prvAddNewTaskToReadyList+0x94>)
 800f74a:	6813      	ldr	r3, [r2, #0]
 800f74c:	3301      	adds	r3, #1
 800f74e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f750:	4b21      	ldr	r3, [pc, #132]	; (800f7d8 <prvAddNewTaskToReadyList+0x98>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	b15b      	cbz	r3, 800f76e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800f756:	4b21      	ldr	r3, [pc, #132]	; (800f7dc <prvAddNewTaskToReadyList+0x9c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	b96b      	cbnz	r3, 800f778 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f75c:	4b1e      	ldr	r3, [pc, #120]	; (800f7d8 <prvAddNewTaskToReadyList+0x98>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f762:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f764:	429a      	cmp	r2, r3
 800f766:	d807      	bhi.n	800f778 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800f768:	4b1b      	ldr	r3, [pc, #108]	; (800f7d8 <prvAddNewTaskToReadyList+0x98>)
 800f76a:	601c      	str	r4, [r3, #0]
 800f76c:	e004      	b.n	800f778 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800f76e:	4b1a      	ldr	r3, [pc, #104]	; (800f7d8 <prvAddNewTaskToReadyList+0x98>)
 800f770:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f772:	6813      	ldr	r3, [r2, #0]
 800f774:	2b01      	cmp	r3, #1
 800f776:	d029      	beq.n	800f7cc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800f778:	4a19      	ldr	r2, [pc, #100]	; (800f7e0 <prvAddNewTaskToReadyList+0xa0>)
 800f77a:	6813      	ldr	r3, [r2, #0]
 800f77c:	3301      	adds	r3, #1
 800f77e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f780:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800f782:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f784:	4b17      	ldr	r3, [pc, #92]	; (800f7e4 <prvAddNewTaskToReadyList+0xa4>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4298      	cmp	r0, r3
 800f78a:	d901      	bls.n	800f790 <prvAddNewTaskToReadyList+0x50>
 800f78c:	4b15      	ldr	r3, [pc, #84]	; (800f7e4 <prvAddNewTaskToReadyList+0xa4>)
 800f78e:	6018      	str	r0, [r3, #0]
 800f790:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f794:	1d21      	adds	r1, r4, #4
 800f796:	4b14      	ldr	r3, [pc, #80]	; (800f7e8 <prvAddNewTaskToReadyList+0xa8>)
 800f798:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f79c:	f7fe ffb2 	bl	800e704 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800f7a0:	f7ff f872 	bl	800e888 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800f7a4:	4b0d      	ldr	r3, [pc, #52]	; (800f7dc <prvAddNewTaskToReadyList+0x9c>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	b17b      	cbz	r3, 800f7ca <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f7aa:	4b0b      	ldr	r3, [pc, #44]	; (800f7d8 <prvAddNewTaskToReadyList+0x98>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d209      	bcs.n	800f7ca <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800f7b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	f3bf 8f6f 	isb	sy
}
 800f7ca:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800f7cc:	f7ff ff84 	bl	800f6d8 <prvInitialiseTaskLists>
 800f7d0:	e7d2      	b.n	800f778 <prvAddNewTaskToReadyList+0x38>
 800f7d2:	bf00      	nop
 800f7d4:	2400c5e4 	.word	0x2400c5e4
 800f7d8:	2400c178 	.word	0x2400c178
 800f7dc:	2400c644 	.word	0x2400c644
 800f7e0:	2400c5f0 	.word	0x2400c5f0
 800f7e4:	2400c5f4 	.word	0x2400c5f4
 800f7e8:	2400c184 	.word	0x2400c184

0800f7ec <prvDeleteTCB>:
	{
 800f7ec:	b510      	push	{r4, lr}
 800f7ee:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f7f0:	3054      	adds	r0, #84	; 0x54
 800f7f2:	f011 fc25 	bl	8021040 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f7f6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800f7fa:	b163      	cbz	r3, 800f816 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d011      	beq.n	800f824 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f800:	2b02      	cmp	r3, #2
 800f802:	d00e      	beq.n	800f822 <prvDeleteTCB+0x36>
 800f804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f808:	f383 8811 	msr	BASEPRI, r3
 800f80c:	f3bf 8f6f 	isb	sy
 800f810:	f3bf 8f4f 	dsb	sy
 800f814:	e7fe      	b.n	800f814 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800f816:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f818:	f7fe ff28 	bl	800e66c <vPortFree>
				vPortFree( pxTCB );
 800f81c:	4620      	mov	r0, r4
 800f81e:	f7fe ff25 	bl	800e66c <vPortFree>
	}
 800f822:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800f824:	4620      	mov	r0, r4
 800f826:	f7fe ff21 	bl	800e66c <vPortFree>
 800f82a:	e7fa      	b.n	800f822 <prvDeleteTCB+0x36>

0800f82c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f82c:	4b0f      	ldr	r3, [pc, #60]	; (800f86c <prvCheckTasksWaitingTermination+0x40>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	b1d3      	cbz	r3, 800f868 <prvCheckTasksWaitingTermination+0x3c>
{
 800f832:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800f834:	f7ff f806 	bl	800e844 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f838:	4b0d      	ldr	r3, [pc, #52]	; (800f870 <prvCheckTasksWaitingTermination+0x44>)
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f83e:	1d20      	adds	r0, r4, #4
 800f840:	f7fe ff84 	bl	800e74c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f844:	4a0b      	ldr	r2, [pc, #44]	; (800f874 <prvCheckTasksWaitingTermination+0x48>)
 800f846:	6813      	ldr	r3, [r2, #0]
 800f848:	3b01      	subs	r3, #1
 800f84a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f84c:	4a07      	ldr	r2, [pc, #28]	; (800f86c <prvCheckTasksWaitingTermination+0x40>)
 800f84e:	6813      	ldr	r3, [r2, #0]
 800f850:	3b01      	subs	r3, #1
 800f852:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800f854:	f7ff f818 	bl	800e888 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800f858:	4620      	mov	r0, r4
 800f85a:	f7ff ffc7 	bl	800f7ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f85e:	4b03      	ldr	r3, [pc, #12]	; (800f86c <prvCheckTasksWaitingTermination+0x40>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1e6      	bne.n	800f834 <prvCheckTasksWaitingTermination+0x8>
}
 800f866:	bd10      	pop	{r4, pc}
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	2400c5e8 	.word	0x2400c5e8
 800f870:	2400c65c 	.word	0x2400c65c
 800f874:	2400c5e4 	.word	0x2400c5e4

0800f878 <prvIdleTask>:
{
 800f878:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800f87a:	f7ff ffd7 	bl	800f82c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f87e:	4b07      	ldr	r3, [pc, #28]	; (800f89c <prvIdleTask+0x24>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b01      	cmp	r3, #1
 800f884:	d9f9      	bls.n	800f87a <prvIdleTask+0x2>
				taskYIELD();
 800f886:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f88e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	e7ee      	b.n	800f87a <prvIdleTask+0x2>
 800f89c:	2400c184 	.word	0x2400c184

0800f8a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f8a0:	b570      	push	{r4, r5, r6, lr}
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f8a6:	4b19      	ldr	r3, [pc, #100]	; (800f90c <prvAddCurrentTaskToDelayedList+0x6c>)
 800f8a8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8aa:	4b19      	ldr	r3, [pc, #100]	; (800f910 <prvAddCurrentTaskToDelayedList+0x70>)
 800f8ac:	6818      	ldr	r0, [r3, #0]
 800f8ae:	3004      	adds	r0, #4
 800f8b0:	f7fe ff4c 	bl	800e74c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f8b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f8b8:	bf14      	ite	ne
 800f8ba:	2300      	movne	r3, #0
 800f8bc:	2301      	moveq	r3, #1
 800f8be:	2d00      	cmp	r5, #0
 800f8c0:	bf08      	it	eq
 800f8c2:	2300      	moveq	r3, #0
 800f8c4:	b96b      	cbnz	r3, 800f8e2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f8c6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f8c8:	4b11      	ldr	r3, [pc, #68]	; (800f910 <prvAddCurrentTaskToDelayedList+0x70>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800f8ce:	42a6      	cmp	r6, r4
 800f8d0:	d90e      	bls.n	800f8f0 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8d2:	4b10      	ldr	r3, [pc, #64]	; (800f914 <prvAddCurrentTaskToDelayedList+0x74>)
 800f8d4:	6818      	ldr	r0, [r3, #0]
 800f8d6:	4b0e      	ldr	r3, [pc, #56]	; (800f910 <prvAddCurrentTaskToDelayedList+0x70>)
 800f8d8:	6819      	ldr	r1, [r3, #0]
 800f8da:	3104      	adds	r1, #4
 800f8dc:	f7fe ff1d 	bl	800e71a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f8e0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8e2:	4b0b      	ldr	r3, [pc, #44]	; (800f910 <prvAddCurrentTaskToDelayedList+0x70>)
 800f8e4:	6819      	ldr	r1, [r3, #0]
 800f8e6:	3104      	adds	r1, #4
 800f8e8:	480b      	ldr	r0, [pc, #44]	; (800f918 <prvAddCurrentTaskToDelayedList+0x78>)
 800f8ea:	f7fe ff0b 	bl	800e704 <vListInsertEnd>
 800f8ee:	e7f7      	b.n	800f8e0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8f0:	4b0a      	ldr	r3, [pc, #40]	; (800f91c <prvAddCurrentTaskToDelayedList+0x7c>)
 800f8f2:	6818      	ldr	r0, [r3, #0]
 800f8f4:	4b06      	ldr	r3, [pc, #24]	; (800f910 <prvAddCurrentTaskToDelayedList+0x70>)
 800f8f6:	6819      	ldr	r1, [r3, #0]
 800f8f8:	3104      	adds	r1, #4
 800f8fa:	f7fe ff0e 	bl	800e71a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f8fe:	4b08      	ldr	r3, [pc, #32]	; (800f920 <prvAddCurrentTaskToDelayedList+0x80>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	42a3      	cmp	r3, r4
 800f904:	d9ec      	bls.n	800f8e0 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800f906:	4b06      	ldr	r3, [pc, #24]	; (800f920 <prvAddCurrentTaskToDelayedList+0x80>)
 800f908:	601c      	str	r4, [r3, #0]
}
 800f90a:	e7e9      	b.n	800f8e0 <prvAddCurrentTaskToDelayedList+0x40>
 800f90c:	2400c670 	.word	0x2400c670
 800f910:	2400c178 	.word	0x2400c178
 800f914:	2400c180 	.word	0x2400c180
 800f918:	2400c648 	.word	0x2400c648
 800f91c:	2400c17c 	.word	0x2400c17c
 800f920:	2400c624 	.word	0x2400c624

0800f924 <xTaskCreateStatic>:
	{
 800f924:	b530      	push	{r4, r5, lr}
 800f926:	b087      	sub	sp, #28
 800f928:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800f92a:	b17c      	cbz	r4, 800f94c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f92c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f92e:	b1b5      	cbz	r5, 800f95e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800f930:	25bc      	movs	r5, #188	; 0xbc
 800f932:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f934:	9d04      	ldr	r5, [sp, #16]
 800f936:	2dbc      	cmp	r5, #188	; 0xbc
 800f938:	d01a      	beq.n	800f970 <xTaskCreateStatic+0x4c>
 800f93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93e:	f383 8811 	msr	BASEPRI, r3
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	f3bf 8f4f 	dsb	sy
 800f94a:	e7fe      	b.n	800f94a <xTaskCreateStatic+0x26>
 800f94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f950:	f383 8811 	msr	BASEPRI, r3
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800f95c:	e7fe      	b.n	800f95c <xTaskCreateStatic+0x38>
 800f95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f962:	f383 8811 	msr	BASEPRI, r3
 800f966:	f3bf 8f6f 	isb	sy
 800f96a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800f96e:	e7fe      	b.n	800f96e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f970:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f974:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f976:	2402      	movs	r4, #2
 800f978:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f97c:	2400      	movs	r4, #0
 800f97e:	9403      	str	r4, [sp, #12]
 800f980:	9502      	str	r5, [sp, #8]
 800f982:	ac05      	add	r4, sp, #20
 800f984:	9401      	str	r4, [sp, #4]
 800f986:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f988:	9400      	str	r4, [sp, #0]
 800f98a:	f7ff fe3d 	bl	800f608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f98e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f990:	f7ff fed6 	bl	800f740 <prvAddNewTaskToReadyList>
	}
 800f994:	9805      	ldr	r0, [sp, #20]
 800f996:	b007      	add	sp, #28
 800f998:	bd30      	pop	{r4, r5, pc}

0800f99a <xTaskCreate>:
	{
 800f99a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	4607      	mov	r7, r0
 800f9a2:	4688      	mov	r8, r1
 800f9a4:	4614      	mov	r4, r2
 800f9a6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f9a8:	0090      	lsls	r0, r2, #2
 800f9aa:	f7fe fde1 	bl	800e570 <pvPortMalloc>
			if( pxStack != NULL )
 800f9ae:	b300      	cbz	r0, 800f9f2 <xTaskCreate+0x58>
 800f9b0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f9b2:	20bc      	movs	r0, #188	; 0xbc
 800f9b4:	f7fe fddc 	bl	800e570 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	b1b0      	cbz	r0, 800f9ea <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800f9bc:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800f9c0:	b1e5      	cbz	r5, 800f9fc <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f9c8:	9303      	str	r3, [sp, #12]
 800f9ca:	9502      	str	r5, [sp, #8]
 800f9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9ce:	9301      	str	r3, [sp, #4]
 800f9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	4633      	mov	r3, r6
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	4641      	mov	r1, r8
 800f9da:	4638      	mov	r0, r7
 800f9dc:	f7ff fe14 	bl	800f608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	f7ff fead 	bl	800f740 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f9e6:	2001      	movs	r0, #1
 800f9e8:	e005      	b.n	800f9f6 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800f9ea:	4648      	mov	r0, r9
 800f9ec:	f7fe fe3e 	bl	800e66c <vPortFree>
 800f9f0:	e7e6      	b.n	800f9c0 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f9f2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800f9f6:	b005      	add	sp, #20
 800f9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f9fc:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800fa00:	e7f9      	b.n	800f9f6 <xTaskCreate+0x5c>
	...

0800fa04 <vTaskStartScheduler>:
{
 800fa04:	b510      	push	{r4, lr}
 800fa06:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa08:	2400      	movs	r4, #0
 800fa0a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa0c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa0e:	aa07      	add	r2, sp, #28
 800fa10:	a906      	add	r1, sp, #24
 800fa12:	a805      	add	r0, sp, #20
 800fa14:	f7fe fd30 	bl	800e478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa18:	9b05      	ldr	r3, [sp, #20]
 800fa1a:	9302      	str	r3, [sp, #8]
 800fa1c:	9b06      	ldr	r3, [sp, #24]
 800fa1e:	9301      	str	r3, [sp, #4]
 800fa20:	9400      	str	r4, [sp, #0]
 800fa22:	4623      	mov	r3, r4
 800fa24:	9a07      	ldr	r2, [sp, #28]
 800fa26:	491a      	ldr	r1, [pc, #104]	; (800fa90 <vTaskStartScheduler+0x8c>)
 800fa28:	481a      	ldr	r0, [pc, #104]	; (800fa94 <vTaskStartScheduler+0x90>)
 800fa2a:	f7ff ff7b 	bl	800f924 <xTaskCreateStatic>
 800fa2e:	4b1a      	ldr	r3, [pc, #104]	; (800fa98 <vTaskStartScheduler+0x94>)
 800fa30:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800fa32:	b140      	cbz	r0, 800fa46 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800fa34:	f000 fbe2 	bl	80101fc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800fa38:	2801      	cmp	r0, #1
 800fa3a:	d006      	beq.n	800fa4a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fa40:	d01d      	beq.n	800fa7e <vTaskStartScheduler+0x7a>
}
 800fa42:	b008      	add	sp, #32
 800fa44:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800fa46:	2000      	movs	r0, #0
 800fa48:	e7f6      	b.n	800fa38 <vTaskStartScheduler+0x34>
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa5a:	4b10      	ldr	r3, [pc, #64]	; (800fa9c <vTaskStartScheduler+0x98>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	3354      	adds	r3, #84	; 0x54
 800fa60:	4a0f      	ldr	r2, [pc, #60]	; (800faa0 <vTaskStartScheduler+0x9c>)
 800fa62:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800fa64:	4b0f      	ldr	r3, [pc, #60]	; (800faa4 <vTaskStartScheduler+0xa0>)
 800fa66:	f04f 32ff 	mov.w	r2, #4294967295
 800fa6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa6c:	4b0e      	ldr	r3, [pc, #56]	; (800faa8 <vTaskStartScheduler+0xa4>)
 800fa6e:	2201      	movs	r2, #1
 800fa70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa72:	4b0e      	ldr	r3, [pc, #56]	; (800faac <vTaskStartScheduler+0xa8>)
 800fa74:	2200      	movs	r2, #0
 800fa76:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800fa78:	f7fe ff7e 	bl	800e978 <xPortStartScheduler>
 800fa7c:	e7e1      	b.n	800fa42 <vTaskStartScheduler+0x3e>
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa8e:	e7fe      	b.n	800fa8e <vTaskStartScheduler+0x8a>
 800fa90:	08023530 	.word	0x08023530
 800fa94:	0800f879 	.word	0x0800f879
 800fa98:	2400c620 	.word	0x2400c620
 800fa9c:	2400c178 	.word	0x2400c178
 800faa0:	240000dc 	.word	0x240000dc
 800faa4:	2400c624 	.word	0x2400c624
 800faa8:	2400c644 	.word	0x2400c644
 800faac:	2400c670 	.word	0x2400c670

0800fab0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800fab0:	4a02      	ldr	r2, [pc, #8]	; (800fabc <vTaskSuspendAll+0xc>)
 800fab2:	6813      	ldr	r3, [r2, #0]
 800fab4:	3301      	adds	r3, #1
 800fab6:	6013      	str	r3, [r2, #0]
}
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	2400c5ec 	.word	0x2400c5ec

0800fac0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800fac0:	4b01      	ldr	r3, [pc, #4]	; (800fac8 <xTaskGetTickCount+0x8>)
 800fac2:	6818      	ldr	r0, [r3, #0]
}
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	2400c670 	.word	0x2400c670

0800facc <xTaskIncrementTick>:
{
 800facc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800face:	4b3a      	ldr	r3, [pc, #232]	; (800fbb8 <xTaskIncrementTick+0xec>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d169      	bne.n	800fbaa <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fad6:	4b39      	ldr	r3, [pc, #228]	; (800fbbc <xTaskIncrementTick+0xf0>)
 800fad8:	681d      	ldr	r5, [r3, #0]
 800fada:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800fadc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fade:	b9c5      	cbnz	r5, 800fb12 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800fae0:	4b37      	ldr	r3, [pc, #220]	; (800fbc0 <xTaskIncrementTick+0xf4>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	b143      	cbz	r3, 800fafa <xTaskIncrementTick+0x2e>
 800fae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faec:	f383 8811 	msr	BASEPRI, r3
 800faf0:	f3bf 8f6f 	isb	sy
 800faf4:	f3bf 8f4f 	dsb	sy
 800faf8:	e7fe      	b.n	800faf8 <xTaskIncrementTick+0x2c>
 800fafa:	4a31      	ldr	r2, [pc, #196]	; (800fbc0 <xTaskIncrementTick+0xf4>)
 800fafc:	6811      	ldr	r1, [r2, #0]
 800fafe:	4b31      	ldr	r3, [pc, #196]	; (800fbc4 <xTaskIncrementTick+0xf8>)
 800fb00:	6818      	ldr	r0, [r3, #0]
 800fb02:	6010      	str	r0, [r2, #0]
 800fb04:	6019      	str	r1, [r3, #0]
 800fb06:	4a30      	ldr	r2, [pc, #192]	; (800fbc8 <xTaskIncrementTick+0xfc>)
 800fb08:	6813      	ldr	r3, [r2, #0]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	6013      	str	r3, [r2, #0]
 800fb0e:	f7ff fd65 	bl	800f5dc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb12:	4b2e      	ldr	r3, [pc, #184]	; (800fbcc <xTaskIncrementTick+0x100>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	42ab      	cmp	r3, r5
 800fb18:	d93d      	bls.n	800fb96 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800fb1a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fb1c:	4b2c      	ldr	r3, [pc, #176]	; (800fbd0 <xTaskIncrementTick+0x104>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fb26:	009a      	lsls	r2, r3, #2
 800fb28:	4b2a      	ldr	r3, [pc, #168]	; (800fbd4 <xTaskIncrementTick+0x108>)
 800fb2a:	589b      	ldr	r3, [r3, r2]
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d900      	bls.n	800fb32 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800fb30:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800fb32:	4b29      	ldr	r3, [pc, #164]	; (800fbd8 <xTaskIncrementTick+0x10c>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d03c      	beq.n	800fbb4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800fb3a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800fb3c:	e03a      	b.n	800fbb4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800fb3e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb40:	4b1f      	ldr	r3, [pc, #124]	; (800fbc0 <xTaskIncrementTick+0xf4>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	b343      	cbz	r3, 800fb9a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb48:	4b1d      	ldr	r3, [pc, #116]	; (800fbc0 <xTaskIncrementTick+0xf4>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb50:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800fb52:	429d      	cmp	r5, r3
 800fb54:	d326      	bcc.n	800fba4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb56:	1d26      	adds	r6, r4, #4
 800fb58:	4630      	mov	r0, r6
 800fb5a:	f7fe fdf7 	bl	800e74c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fb60:	b11b      	cbz	r3, 800fb6a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb62:	f104 0018 	add.w	r0, r4, #24
 800fb66:	f7fe fdf1 	bl	800e74c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fb6c:	4a1b      	ldr	r2, [pc, #108]	; (800fbdc <xTaskIncrementTick+0x110>)
 800fb6e:	6812      	ldr	r2, [r2, #0]
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d901      	bls.n	800fb78 <xTaskIncrementTick+0xac>
 800fb74:	4a19      	ldr	r2, [pc, #100]	; (800fbdc <xTaskIncrementTick+0x110>)
 800fb76:	6013      	str	r3, [r2, #0]
 800fb78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fb7c:	009a      	lsls	r2, r3, #2
 800fb7e:	4631      	mov	r1, r6
 800fb80:	4814      	ldr	r0, [pc, #80]	; (800fbd4 <xTaskIncrementTick+0x108>)
 800fb82:	4410      	add	r0, r2
 800fb84:	f7fe fdbe 	bl	800e704 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fb8a:	4b11      	ldr	r3, [pc, #68]	; (800fbd0 <xTaskIncrementTick+0x104>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d2d4      	bcs.n	800fb3e <xTaskIncrementTick+0x72>
 800fb94:	e7d4      	b.n	800fb40 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800fb96:	2700      	movs	r7, #0
 800fb98:	e7d2      	b.n	800fb40 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb9a:	4b0c      	ldr	r3, [pc, #48]	; (800fbcc <xTaskIncrementTick+0x100>)
 800fb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800fba0:	601a      	str	r2, [r3, #0]
					break;
 800fba2:	e7bb      	b.n	800fb1c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800fba4:	4a09      	ldr	r2, [pc, #36]	; (800fbcc <xTaskIncrementTick+0x100>)
 800fba6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fba8:	e7b8      	b.n	800fb1c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800fbaa:	4a0d      	ldr	r2, [pc, #52]	; (800fbe0 <xTaskIncrementTick+0x114>)
 800fbac:	6813      	ldr	r3, [r2, #0]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800fbb2:	2700      	movs	r7, #0
}
 800fbb4:	4638      	mov	r0, r7
 800fbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb8:	2400c5ec 	.word	0x2400c5ec
 800fbbc:	2400c670 	.word	0x2400c670
 800fbc0:	2400c17c 	.word	0x2400c17c
 800fbc4:	2400c180 	.word	0x2400c180
 800fbc8:	2400c628 	.word	0x2400c628
 800fbcc:	2400c624 	.word	0x2400c624
 800fbd0:	2400c178 	.word	0x2400c178
 800fbd4:	2400c184 	.word	0x2400c184
 800fbd8:	2400c674 	.word	0x2400c674
 800fbdc:	2400c5f4 	.word	0x2400c5f4
 800fbe0:	2400c62c 	.word	0x2400c62c

0800fbe4 <xTaskResumeAll>:
{
 800fbe4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800fbe6:	4b35      	ldr	r3, [pc, #212]	; (800fcbc <xTaskResumeAll+0xd8>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	b943      	cbnz	r3, 800fbfe <xTaskResumeAll+0x1a>
 800fbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf0:	f383 8811 	msr	BASEPRI, r3
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	f3bf 8f4f 	dsb	sy
 800fbfc:	e7fe      	b.n	800fbfc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800fbfe:	f7fe fe21 	bl	800e844 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fc02:	4b2e      	ldr	r3, [pc, #184]	; (800fcbc <xTaskResumeAll+0xd8>)
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	3a01      	subs	r2, #1
 800fc08:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d14f      	bne.n	800fcb0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc10:	4b2b      	ldr	r3, [pc, #172]	; (800fcc0 <xTaskResumeAll+0xdc>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	b90b      	cbnz	r3, 800fc1a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800fc16:	2400      	movs	r4, #0
 800fc18:	e04b      	b.n	800fcb2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800fc1a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc1c:	4b29      	ldr	r3, [pc, #164]	; (800fcc4 <xTaskResumeAll+0xe0>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	b31b      	cbz	r3, 800fc6a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc22:	4b28      	ldr	r3, [pc, #160]	; (800fcc4 <xTaskResumeAll+0xe0>)
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc28:	f104 0018 	add.w	r0, r4, #24
 800fc2c:	f7fe fd8e 	bl	800e74c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc30:	1d25      	adds	r5, r4, #4
 800fc32:	4628      	mov	r0, r5
 800fc34:	f7fe fd8a 	bl	800e74c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fc3a:	4b23      	ldr	r3, [pc, #140]	; (800fcc8 <xTaskResumeAll+0xe4>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4298      	cmp	r0, r3
 800fc40:	d901      	bls.n	800fc46 <xTaskResumeAll+0x62>
 800fc42:	4b21      	ldr	r3, [pc, #132]	; (800fcc8 <xTaskResumeAll+0xe4>)
 800fc44:	6018      	str	r0, [r3, #0]
 800fc46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	4b1f      	ldr	r3, [pc, #124]	; (800fccc <xTaskResumeAll+0xe8>)
 800fc4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc52:	f7fe fd57 	bl	800e704 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc58:	4b1d      	ldr	r3, [pc, #116]	; (800fcd0 <xTaskResumeAll+0xec>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d3dc      	bcc.n	800fc1c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800fc62:	4b1c      	ldr	r3, [pc, #112]	; (800fcd4 <xTaskResumeAll+0xf0>)
 800fc64:	2201      	movs	r2, #1
 800fc66:	601a      	str	r2, [r3, #0]
 800fc68:	e7d8      	b.n	800fc1c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800fc6a:	b10c      	cbz	r4, 800fc70 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800fc6c:	f7ff fcb6 	bl	800f5dc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fc70:	4b19      	ldr	r3, [pc, #100]	; (800fcd8 <xTaskResumeAll+0xf4>)
 800fc72:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800fc74:	b984      	cbnz	r4, 800fc98 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800fc76:	4b17      	ldr	r3, [pc, #92]	; (800fcd4 <xTaskResumeAll+0xf0>)
 800fc78:	681c      	ldr	r4, [r3, #0]
 800fc7a:	b1d4      	cbz	r4, 800fcb2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800fc7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fc88:	f3bf 8f4f 	dsb	sy
 800fc8c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800fc90:	2401      	movs	r4, #1
 800fc92:	e00e      	b.n	800fcb2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc94:	3c01      	subs	r4, #1
 800fc96:	d007      	beq.n	800fca8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800fc98:	f7ff ff18 	bl	800facc <xTaskIncrementTick>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d0f9      	beq.n	800fc94 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800fca0:	4b0c      	ldr	r3, [pc, #48]	; (800fcd4 <xTaskResumeAll+0xf0>)
 800fca2:	2201      	movs	r2, #1
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	e7f5      	b.n	800fc94 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800fca8:	4b0b      	ldr	r3, [pc, #44]	; (800fcd8 <xTaskResumeAll+0xf4>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]
 800fcae:	e7e2      	b.n	800fc76 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800fcb0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fcb2:	f7fe fde9 	bl	800e888 <vPortExitCritical>
}
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	bd38      	pop	{r3, r4, r5, pc}
 800fcba:	bf00      	nop
 800fcbc:	2400c5ec 	.word	0x2400c5ec
 800fcc0:	2400c5e4 	.word	0x2400c5e4
 800fcc4:	2400c630 	.word	0x2400c630
 800fcc8:	2400c5f4 	.word	0x2400c5f4
 800fccc:	2400c184 	.word	0x2400c184
 800fcd0:	2400c178 	.word	0x2400c178
 800fcd4:	2400c674 	.word	0x2400c674
 800fcd8:	2400c62c 	.word	0x2400c62c

0800fcdc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcdc:	4b21      	ldr	r3, [pc, #132]	; (800fd64 <vTaskSwitchContext+0x88>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	b11b      	cbz	r3, 800fcea <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800fce2:	4b21      	ldr	r3, [pc, #132]	; (800fd68 <vTaskSwitchContext+0x8c>)
 800fce4:	2201      	movs	r2, #1
 800fce6:	601a      	str	r2, [r3, #0]
 800fce8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800fcea:	4b1f      	ldr	r3, [pc, #124]	; (800fd68 <vTaskSwitchContext+0x8c>)
 800fcec:	2200      	movs	r2, #0
 800fcee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcf0:	4b1e      	ldr	r3, [pc, #120]	; (800fd6c <vTaskSwitchContext+0x90>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800fcf8:	008a      	lsls	r2, r1, #2
 800fcfa:	491d      	ldr	r1, [pc, #116]	; (800fd70 <vTaskSwitchContext+0x94>)
 800fcfc:	588a      	ldr	r2, [r1, r2]
 800fcfe:	b95a      	cbnz	r2, 800fd18 <vTaskSwitchContext+0x3c>
 800fd00:	b10b      	cbz	r3, 800fd06 <vTaskSwitchContext+0x2a>
 800fd02:	3b01      	subs	r3, #1
 800fd04:	e7f6      	b.n	800fcf4 <vTaskSwitchContext+0x18>
 800fd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	e7fe      	b.n	800fd16 <vTaskSwitchContext+0x3a>
 800fd18:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800fd1c:	0082      	lsls	r2, r0, #2
 800fd1e:	440a      	add	r2, r1
 800fd20:	6850      	ldr	r0, [r2, #4]
 800fd22:	6840      	ldr	r0, [r0, #4]
 800fd24:	6050      	str	r0, [r2, #4]
 800fd26:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800fd2a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800fd2e:	3208      	adds	r2, #8
 800fd30:	4411      	add	r1, r2
 800fd32:	4288      	cmp	r0, r1
 800fd34:	d00f      	beq.n	800fd56 <vTaskSwitchContext+0x7a>
 800fd36:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800fd3a:	0091      	lsls	r1, r2, #2
 800fd3c:	4a0c      	ldr	r2, [pc, #48]	; (800fd70 <vTaskSwitchContext+0x94>)
 800fd3e:	440a      	add	r2, r1
 800fd40:	6852      	ldr	r2, [r2, #4]
 800fd42:	68d1      	ldr	r1, [r2, #12]
 800fd44:	4a0b      	ldr	r2, [pc, #44]	; (800fd74 <vTaskSwitchContext+0x98>)
 800fd46:	6011      	str	r1, [r2, #0]
 800fd48:	4908      	ldr	r1, [pc, #32]	; (800fd6c <vTaskSwitchContext+0x90>)
 800fd4a:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd4c:	6813      	ldr	r3, [r2, #0]
 800fd4e:	3354      	adds	r3, #84	; 0x54
 800fd50:	4a09      	ldr	r2, [pc, #36]	; (800fd78 <vTaskSwitchContext+0x9c>)
 800fd52:	6013      	str	r3, [r2, #0]
}
 800fd54:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd56:	6840      	ldr	r0, [r0, #4]
 800fd58:	4662      	mov	r2, ip
 800fd5a:	0091      	lsls	r1, r2, #2
 800fd5c:	4a04      	ldr	r2, [pc, #16]	; (800fd70 <vTaskSwitchContext+0x94>)
 800fd5e:	440a      	add	r2, r1
 800fd60:	6050      	str	r0, [r2, #4]
 800fd62:	e7e8      	b.n	800fd36 <vTaskSwitchContext+0x5a>
 800fd64:	2400c5ec 	.word	0x2400c5ec
 800fd68:	2400c674 	.word	0x2400c674
 800fd6c:	2400c5f4 	.word	0x2400c5f4
 800fd70:	2400c184 	.word	0x2400c184
 800fd74:	2400c178 	.word	0x2400c178
 800fd78:	240000dc 	.word	0x240000dc

0800fd7c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800fd7c:	b158      	cbz	r0, 800fd96 <vTaskPlaceOnEventList+0x1a>
{
 800fd7e:	b510      	push	{r4, lr}
 800fd80:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd82:	4a09      	ldr	r2, [pc, #36]	; (800fda8 <vTaskPlaceOnEventList+0x2c>)
 800fd84:	6811      	ldr	r1, [r2, #0]
 800fd86:	3118      	adds	r1, #24
 800fd88:	f7fe fcc7 	bl	800e71a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd8c:	2101      	movs	r1, #1
 800fd8e:	4620      	mov	r0, r4
 800fd90:	f7ff fd86 	bl	800f8a0 <prvAddCurrentTaskToDelayedList>
}
 800fd94:	bd10      	pop	{r4, pc}
 800fd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9a:	f383 8811 	msr	BASEPRI, r3
 800fd9e:	f3bf 8f6f 	isb	sy
 800fda2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800fda6:	e7fe      	b.n	800fda6 <vTaskPlaceOnEventList+0x2a>
 800fda8:	2400c178 	.word	0x2400c178

0800fdac <vTaskPlaceOnEventListRestricted>:
	{
 800fdac:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800fdae:	b170      	cbz	r0, 800fdce <vTaskPlaceOnEventListRestricted+0x22>
 800fdb0:	460d      	mov	r5, r1
 800fdb2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fdb4:	4a0a      	ldr	r2, [pc, #40]	; (800fde0 <vTaskPlaceOnEventListRestricted+0x34>)
 800fdb6:	6811      	ldr	r1, [r2, #0]
 800fdb8:	3118      	adds	r1, #24
 800fdba:	f7fe fca3 	bl	800e704 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800fdbe:	b10c      	cbz	r4, 800fdc4 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800fdc0:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7ff fd6a 	bl	800f8a0 <prvAddCurrentTaskToDelayedList>
	}
 800fdcc:	bd38      	pop	{r3, r4, r5, pc}
 800fdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800fdde:	e7fe      	b.n	800fdde <vTaskPlaceOnEventListRestricted+0x32>
 800fde0:	2400c178 	.word	0x2400c178

0800fde4 <xTaskRemoveFromEventList>:
{
 800fde4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fde6:	68c3      	ldr	r3, [r0, #12]
 800fde8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800fdea:	b324      	cbz	r4, 800fe36 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fdec:	f104 0518 	add.w	r5, r4, #24
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f7fe fcab 	bl	800e74c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdf6:	4b18      	ldr	r3, [pc, #96]	; (800fe58 <xTaskRemoveFromEventList+0x74>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	bb2b      	cbnz	r3, 800fe48 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdfc:	1d25      	adds	r5, r4, #4
 800fdfe:	4628      	mov	r0, r5
 800fe00:	f7fe fca4 	bl	800e74c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fe06:	4b15      	ldr	r3, [pc, #84]	; (800fe5c <xTaskRemoveFromEventList+0x78>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4298      	cmp	r0, r3
 800fe0c:	d901      	bls.n	800fe12 <xTaskRemoveFromEventList+0x2e>
 800fe0e:	4b13      	ldr	r3, [pc, #76]	; (800fe5c <xTaskRemoveFromEventList+0x78>)
 800fe10:	6018      	str	r0, [r3, #0]
 800fe12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800fe16:	4629      	mov	r1, r5
 800fe18:	4b11      	ldr	r3, [pc, #68]	; (800fe60 <xTaskRemoveFromEventList+0x7c>)
 800fe1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe1e:	f7fe fc71 	bl	800e704 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fe24:	4b0f      	ldr	r3, [pc, #60]	; (800fe64 <xTaskRemoveFromEventList+0x80>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d911      	bls.n	800fe52 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800fe2e:	2001      	movs	r0, #1
 800fe30:	4b0d      	ldr	r3, [pc, #52]	; (800fe68 <xTaskRemoveFromEventList+0x84>)
 800fe32:	6018      	str	r0, [r3, #0]
}
 800fe34:	bd38      	pop	{r3, r4, r5, pc}
 800fe36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3a:	f383 8811 	msr	BASEPRI, r3
 800fe3e:	f3bf 8f6f 	isb	sy
 800fe42:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800fe46:	e7fe      	b.n	800fe46 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe48:	4629      	mov	r1, r5
 800fe4a:	4808      	ldr	r0, [pc, #32]	; (800fe6c <xTaskRemoveFromEventList+0x88>)
 800fe4c:	f7fe fc5a 	bl	800e704 <vListInsertEnd>
 800fe50:	e7e7      	b.n	800fe22 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800fe52:	2000      	movs	r0, #0
	return xReturn;
 800fe54:	e7ee      	b.n	800fe34 <xTaskRemoveFromEventList+0x50>
 800fe56:	bf00      	nop
 800fe58:	2400c5ec 	.word	0x2400c5ec
 800fe5c:	2400c5f4 	.word	0x2400c5f4
 800fe60:	2400c184 	.word	0x2400c184
 800fe64:	2400c178 	.word	0x2400c178
 800fe68:	2400c674 	.word	0x2400c674
 800fe6c:	2400c630 	.word	0x2400c630

0800fe70 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe70:	4b03      	ldr	r3, [pc, #12]	; (800fe80 <vTaskInternalSetTimeOutState+0x10>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe76:	4b03      	ldr	r3, [pc, #12]	; (800fe84 <vTaskInternalSetTimeOutState+0x14>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	6043      	str	r3, [r0, #4]
}
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	2400c628 	.word	0x2400c628
 800fe84:	2400c670 	.word	0x2400c670

0800fe88 <xTaskCheckForTimeOut>:
{
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800fe8a:	b1c8      	cbz	r0, 800fec0 <xTaskCheckForTimeOut+0x38>
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800fe90:	b1f9      	cbz	r1, 800fed2 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800fe92:	f7fe fcd7 	bl	800e844 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fe96:	4b1b      	ldr	r3, [pc, #108]	; (800ff04 <xTaskCheckForTimeOut+0x7c>)
 800fe98:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fe9a:	686b      	ldr	r3, [r5, #4]
 800fe9c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800fe9e:	6822      	ldr	r2, [r4, #0]
 800fea0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fea4:	d026      	beq.n	800fef4 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fea6:	4e18      	ldr	r6, [pc, #96]	; (800ff08 <xTaskCheckForTimeOut+0x80>)
 800fea8:	6836      	ldr	r6, [r6, #0]
 800feaa:	682f      	ldr	r7, [r5, #0]
 800feac:	42b7      	cmp	r7, r6
 800feae:	d001      	beq.n	800feb4 <xTaskCheckForTimeOut+0x2c>
 800feb0:	428b      	cmp	r3, r1
 800feb2:	d924      	bls.n	800fefe <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800feb4:	4282      	cmp	r2, r0
 800feb6:	d815      	bhi.n	800fee4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800feb8:	2300      	movs	r3, #0
 800feba:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800febc:	2401      	movs	r4, #1
 800febe:	e01a      	b.n	800fef6 <xTaskCheckForTimeOut+0x6e>
 800fec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec4:	f383 8811 	msr	BASEPRI, r3
 800fec8:	f3bf 8f6f 	isb	sy
 800fecc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800fed0:	e7fe      	b.n	800fed0 <xTaskCheckForTimeOut+0x48>
 800fed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed6:	f383 8811 	msr	BASEPRI, r3
 800feda:	f3bf 8f6f 	isb	sy
 800fede:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800fee2:	e7fe      	b.n	800fee2 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800fee4:	1a5b      	subs	r3, r3, r1
 800fee6:	4413      	add	r3, r2
 800fee8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800feea:	4628      	mov	r0, r5
 800feec:	f7ff ffc0 	bl	800fe70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fef0:	2400      	movs	r4, #0
 800fef2:	e000      	b.n	800fef6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800fef4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fef6:	f7fe fcc7 	bl	800e888 <vPortExitCritical>
}
 800fefa:	4620      	mov	r0, r4
 800fefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800fefe:	2401      	movs	r4, #1
 800ff00:	e7f9      	b.n	800fef6 <xTaskCheckForTimeOut+0x6e>
 800ff02:	bf00      	nop
 800ff04:	2400c670 	.word	0x2400c670
 800ff08:	2400c628 	.word	0x2400c628

0800ff0c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ff0c:	4b01      	ldr	r3, [pc, #4]	; (800ff14 <vTaskMissedYield+0x8>)
 800ff0e:	2201      	movs	r2, #1
 800ff10:	601a      	str	r2, [r3, #0]
}
 800ff12:	4770      	bx	lr
 800ff14:	2400c674 	.word	0x2400c674

0800ff18 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ff18:	4b05      	ldr	r3, [pc, #20]	; (800ff30 <xTaskGetSchedulerState+0x18>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	b133      	cbz	r3, 800ff2c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff1e:	4b05      	ldr	r3, [pc, #20]	; (800ff34 <xTaskGetSchedulerState+0x1c>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	b10b      	cbz	r3, 800ff28 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff24:	2000      	movs	r0, #0
	}
 800ff26:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800ff28:	2002      	movs	r0, #2
 800ff2a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	4770      	bx	lr
 800ff30:	2400c644 	.word	0x2400c644
 800ff34:	2400c5ec 	.word	0x2400c5ec

0800ff38 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	d03e      	beq.n	800ffba <xTaskPriorityInherit+0x82>
	{
 800ff3c:	b538      	push	{r3, r4, r5, lr}
 800ff3e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ff42:	4a20      	ldr	r2, [pc, #128]	; (800ffc4 <xTaskPriorityInherit+0x8c>)
 800ff44:	6812      	ldr	r2, [r2, #0]
 800ff46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d22e      	bcs.n	800ffaa <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff4c:	6982      	ldr	r2, [r0, #24]
 800ff4e:	2a00      	cmp	r2, #0
 800ff50:	db05      	blt.n	800ff5e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff52:	4a1c      	ldr	r2, [pc, #112]	; (800ffc4 <xTaskPriorityInherit+0x8c>)
 800ff54:	6812      	ldr	r2, [r2, #0]
 800ff56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ff58:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ff5c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff5e:	6961      	ldr	r1, [r4, #20]
 800ff60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ff64:	4a18      	ldr	r2, [pc, #96]	; (800ffc8 <xTaskPriorityInherit+0x90>)
 800ff66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff6a:	4299      	cmp	r1, r3
 800ff6c:	d005      	beq.n	800ff7a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff6e:	4b15      	ldr	r3, [pc, #84]	; (800ffc4 <xTaskPriorityInherit+0x8c>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff74:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800ff76:	2001      	movs	r0, #1
	}
 800ff78:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff7a:	1d25      	adds	r5, r4, #4
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f7fe fbe5 	bl	800e74c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff82:	4b10      	ldr	r3, [pc, #64]	; (800ffc4 <xTaskPriorityInherit+0x8c>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ff88:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ff8a:	4b10      	ldr	r3, [pc, #64]	; (800ffcc <xTaskPriorityInherit+0x94>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	4298      	cmp	r0, r3
 800ff90:	d901      	bls.n	800ff96 <xTaskPriorityInherit+0x5e>
 800ff92:	4b0e      	ldr	r3, [pc, #56]	; (800ffcc <xTaskPriorityInherit+0x94>)
 800ff94:	6018      	str	r0, [r3, #0]
 800ff96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ff9a:	4629      	mov	r1, r5
 800ff9c:	4b0a      	ldr	r3, [pc, #40]	; (800ffc8 <xTaskPriorityInherit+0x90>)
 800ff9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ffa2:	f7fe fbaf 	bl	800e704 <vListInsertEnd>
				xReturn = pdTRUE;
 800ffa6:	2001      	movs	r0, #1
 800ffa8:	e7e6      	b.n	800ff78 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ffaa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800ffac:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <xTaskPriorityInherit+0x8c>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d303      	bcc.n	800ffbe <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	e7de      	b.n	800ff78 <xTaskPriorityInherit+0x40>
 800ffba:	2000      	movs	r0, #0
	}
 800ffbc:	4770      	bx	lr
					xReturn = pdTRUE;
 800ffbe:	2001      	movs	r0, #1
		return xReturn;
 800ffc0:	e7da      	b.n	800ff78 <xTaskPriorityInherit+0x40>
 800ffc2:	bf00      	nop
 800ffc4:	2400c178 	.word	0x2400c178
 800ffc8:	2400c184 	.word	0x2400c184
 800ffcc:	2400c5f4 	.word	0x2400c5f4

0800ffd0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d03b      	beq.n	801004c <xTaskPriorityDisinherit+0x7c>
	{
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800ffd8:	4b1e      	ldr	r3, [pc, #120]	; (8010054 <xTaskPriorityDisinherit+0x84>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4283      	cmp	r3, r0
 800ffde:	d008      	beq.n	800fff2 <xTaskPriorityDisinherit+0x22>
 800ffe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe4:	f383 8811 	msr	BASEPRI, r3
 800ffe8:	f3bf 8f6f 	isb	sy
 800ffec:	f3bf 8f4f 	dsb	sy
 800fff0:	e7fe      	b.n	800fff0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800fff2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fff4:	b943      	cbnz	r3, 8010008 <xTaskPriorityDisinherit+0x38>
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	f383 8811 	msr	BASEPRI, r3
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f3bf 8f4f 	dsb	sy
 8010006:	e7fe      	b.n	8010006 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8010008:	3b01      	subs	r3, #1
 801000a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801000c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801000e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8010010:	4291      	cmp	r1, r2
 8010012:	d01d      	beq.n	8010050 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010014:	b10b      	cbz	r3, 801001a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8010016:	2000      	movs	r0, #0
	}
 8010018:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801001a:	1d05      	adds	r5, r0, #4
 801001c:	4628      	mov	r0, r5
 801001e:	f7fe fb95 	bl	800e74c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010022:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010024:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010026:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 801002a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801002c:	4b0a      	ldr	r3, [pc, #40]	; (8010058 <xTaskPriorityDisinherit+0x88>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4298      	cmp	r0, r3
 8010032:	d901      	bls.n	8010038 <xTaskPriorityDisinherit+0x68>
 8010034:	4b08      	ldr	r3, [pc, #32]	; (8010058 <xTaskPriorityDisinherit+0x88>)
 8010036:	6018      	str	r0, [r3, #0]
 8010038:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801003c:	4629      	mov	r1, r5
 801003e:	4b07      	ldr	r3, [pc, #28]	; (801005c <xTaskPriorityDisinherit+0x8c>)
 8010040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010044:	f7fe fb5e 	bl	800e704 <vListInsertEnd>
					xReturn = pdTRUE;
 8010048:	2001      	movs	r0, #1
 801004a:	e7e5      	b.n	8010018 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801004c:	2000      	movs	r0, #0
	}
 801004e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8010050:	2000      	movs	r0, #0
 8010052:	e7e1      	b.n	8010018 <xTaskPriorityDisinherit+0x48>
 8010054:	2400c178 	.word	0x2400c178
 8010058:	2400c5f4 	.word	0x2400c5f4
 801005c:	2400c184 	.word	0x2400c184

08010060 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8010060:	2800      	cmp	r0, #0
 8010062:	d046      	beq.n	80100f2 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8010068:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801006a:	b943      	cbnz	r3, 801007e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801006c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010070:	f383 8811 	msr	BASEPRI, r3
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	f3bf 8f4f 	dsb	sy
 801007c:	e7fe      	b.n	801007c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801007e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8010080:	428a      	cmp	r2, r1
 8010082:	d200      	bcs.n	8010086 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010084:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010086:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010088:	4291      	cmp	r1, r2
 801008a:	d001      	beq.n	8010090 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801008c:	2b01      	cmp	r3, #1
 801008e:	d000      	beq.n	8010092 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8010090:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8010092:	4b18      	ldr	r3, [pc, #96]	; (80100f4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	42a3      	cmp	r3, r4
 8010098:	d022      	beq.n	80100e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801009a:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801009c:	69a3      	ldr	r3, [r4, #24]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	db02      	blt.n	80100a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100a2:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80100a6:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80100a8:	6962      	ldr	r2, [r4, #20]
 80100aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80100ae:	4b12      	ldr	r3, [pc, #72]	; (80100f8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80100b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80100b4:	428a      	cmp	r2, r1
 80100b6:	d1eb      	bne.n	8010090 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100b8:	1d25      	adds	r5, r4, #4
 80100ba:	4628      	mov	r0, r5
 80100bc:	f7fe fb46 	bl	800e74c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80100c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80100c2:	4b0e      	ldr	r3, [pc, #56]	; (80100fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4298      	cmp	r0, r3
 80100c8:	d901      	bls.n	80100ce <vTaskPriorityDisinheritAfterTimeout+0x6e>
 80100ca:	4b0c      	ldr	r3, [pc, #48]	; (80100fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80100cc:	6018      	str	r0, [r3, #0]
 80100ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80100d2:	4629      	mov	r1, r5
 80100d4:	4b08      	ldr	r3, [pc, #32]	; (80100f8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80100d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80100da:	f7fe fb13 	bl	800e704 <vListInsertEnd>
	}
 80100de:	e7d7      	b.n	8010090 <vTaskPriorityDisinheritAfterTimeout+0x30>
 80100e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e4:	f383 8811 	msr	BASEPRI, r3
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80100f0:	e7fe      	b.n	80100f0 <vTaskPriorityDisinheritAfterTimeout+0x90>
 80100f2:	4770      	bx	lr
 80100f4:	2400c178 	.word	0x2400c178
 80100f8:	2400c184 	.word	0x2400c184
 80100fc:	2400c5f4 	.word	0x2400c5f4

08010100 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8010100:	4b05      	ldr	r3, [pc, #20]	; (8010118 <pvTaskIncrementMutexHeldCount+0x18>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	b123      	cbz	r3, 8010110 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8010106:	4b04      	ldr	r3, [pc, #16]	; (8010118 <pvTaskIncrementMutexHeldCount+0x18>)
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801010c:	3301      	adds	r3, #1
 801010e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8010110:	4b01      	ldr	r3, [pc, #4]	; (8010118 <pvTaskIncrementMutexHeldCount+0x18>)
 8010112:	6818      	ldr	r0, [r3, #0]
	}
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	2400c178 	.word	0x2400c178

0801011c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801011c:	4b06      	ldr	r3, [pc, #24]	; (8010138 <prvGetNextExpireTime+0x1c>)
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	6813      	ldr	r3, [r2, #0]
 8010122:	b92b      	cbnz	r3, 8010130 <prvGetNextExpireTime+0x14>
 8010124:	2301      	movs	r3, #1
 8010126:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010128:	b923      	cbnz	r3, 8010134 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801012a:	68d3      	ldr	r3, [r2, #12]
 801012c:	6818      	ldr	r0, [r3, #0]
 801012e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010130:	2300      	movs	r3, #0
 8010132:	e7f8      	b.n	8010126 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010134:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8010136:	4770      	bx	lr
 8010138:	2400c678 	.word	0x2400c678

0801013c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801013c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801013e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010140:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010142:	4291      	cmp	r1, r2
 8010144:	d80c      	bhi.n	8010160 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010146:	1ad2      	subs	r2, r2, r3
 8010148:	6983      	ldr	r3, [r0, #24]
 801014a:	429a      	cmp	r2, r3
 801014c:	d301      	bcc.n	8010152 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801014e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8010150:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010152:	1d01      	adds	r1, r0, #4
 8010154:	4b0b      	ldr	r3, [pc, #44]	; (8010184 <prvInsertTimerInActiveList+0x48>)
 8010156:	6818      	ldr	r0, [r3, #0]
 8010158:	f7fe fadf 	bl	800e71a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801015c:	2000      	movs	r0, #0
 801015e:	e7f7      	b.n	8010150 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010160:	429a      	cmp	r2, r3
 8010162:	bf2c      	ite	cs
 8010164:	2200      	movcs	r2, #0
 8010166:	2201      	movcc	r2, #1
 8010168:	4299      	cmp	r1, r3
 801016a:	bf38      	it	cc
 801016c:	2200      	movcc	r2, #0
 801016e:	b10a      	cbz	r2, 8010174 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 8010170:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010172:	e7ed      	b.n	8010150 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010174:	1d01      	adds	r1, r0, #4
 8010176:	4b04      	ldr	r3, [pc, #16]	; (8010188 <prvInsertTimerInActiveList+0x4c>)
 8010178:	6818      	ldr	r0, [r3, #0]
 801017a:	f7fe face 	bl	800e71a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801017e:	2000      	movs	r0, #0
 8010180:	e7e6      	b.n	8010150 <prvInsertTimerInActiveList+0x14>
 8010182:	bf00      	nop
 8010184:	2400c67c 	.word	0x2400c67c
 8010188:	2400c678 	.word	0x2400c678

0801018c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801018c:	b530      	push	{r4, r5, lr}
 801018e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010190:	f7fe fb58 	bl	800e844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010194:	4b11      	ldr	r3, [pc, #68]	; (80101dc <prvCheckForValidListAndQueue+0x50>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	b11b      	cbz	r3, 80101a2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801019a:	f7fe fb75 	bl	800e888 <vPortExitCritical>
}
 801019e:	b003      	add	sp, #12
 80101a0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80101a2:	4d0f      	ldr	r5, [pc, #60]	; (80101e0 <prvCheckForValidListAndQueue+0x54>)
 80101a4:	4628      	mov	r0, r5
 80101a6:	f7fe fa9f 	bl	800e6e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80101aa:	4c0e      	ldr	r4, [pc, #56]	; (80101e4 <prvCheckForValidListAndQueue+0x58>)
 80101ac:	4620      	mov	r0, r4
 80101ae:	f7fe fa9b 	bl	800e6e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80101b2:	4b0d      	ldr	r3, [pc, #52]	; (80101e8 <prvCheckForValidListAndQueue+0x5c>)
 80101b4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80101b6:	4b0d      	ldr	r3, [pc, #52]	; (80101ec <prvCheckForValidListAndQueue+0x60>)
 80101b8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80101ba:	2300      	movs	r3, #0
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	4b0c      	ldr	r3, [pc, #48]	; (80101f0 <prvCheckForValidListAndQueue+0x64>)
 80101c0:	4a0c      	ldr	r2, [pc, #48]	; (80101f4 <prvCheckForValidListAndQueue+0x68>)
 80101c2:	2110      	movs	r1, #16
 80101c4:	200a      	movs	r0, #10
 80101c6:	f7fe fd8c 	bl	800ece2 <xQueueGenericCreateStatic>
 80101ca:	4b04      	ldr	r3, [pc, #16]	; (80101dc <prvCheckForValidListAndQueue+0x50>)
 80101cc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80101ce:	2800      	cmp	r0, #0
 80101d0:	d0e3      	beq.n	801019a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80101d2:	4909      	ldr	r1, [pc, #36]	; (80101f8 <prvCheckForValidListAndQueue+0x6c>)
 80101d4:	f7ff f998 	bl	800f508 <vQueueAddToRegistry>
 80101d8:	e7df      	b.n	801019a <prvCheckForValidListAndQueue+0xe>
 80101da:	bf00      	nop
 80101dc:	2400c79c 	.word	0x2400c79c
 80101e0:	2400c720 	.word	0x2400c720
 80101e4:	2400c734 	.word	0x2400c734
 80101e8:	2400c678 	.word	0x2400c678
 80101ec:	2400c67c 	.word	0x2400c67c
 80101f0:	2400c74c 	.word	0x2400c74c
 80101f4:	2400c680 	.word	0x2400c680
 80101f8:	08023538 	.word	0x08023538

080101fc <xTimerCreateTimerTask>:
{
 80101fc:	b510      	push	{r4, lr}
 80101fe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8010200:	f7ff ffc4 	bl	801018c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010204:	4b12      	ldr	r3, [pc, #72]	; (8010250 <xTimerCreateTimerTask+0x54>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	b1cb      	cbz	r3, 801023e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801020a:	2400      	movs	r4, #0
 801020c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801020e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010210:	aa07      	add	r2, sp, #28
 8010212:	a906      	add	r1, sp, #24
 8010214:	a805      	add	r0, sp, #20
 8010216:	f7fe f93b 	bl	800e490 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801021a:	9b05      	ldr	r3, [sp, #20]
 801021c:	9302      	str	r3, [sp, #8]
 801021e:	9b06      	ldr	r3, [sp, #24]
 8010220:	9301      	str	r3, [sp, #4]
 8010222:	2302      	movs	r3, #2
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	4623      	mov	r3, r4
 8010228:	9a07      	ldr	r2, [sp, #28]
 801022a:	490a      	ldr	r1, [pc, #40]	; (8010254 <xTimerCreateTimerTask+0x58>)
 801022c:	480a      	ldr	r0, [pc, #40]	; (8010258 <xTimerCreateTimerTask+0x5c>)
 801022e:	f7ff fb79 	bl	800f924 <xTaskCreateStatic>
 8010232:	4b0a      	ldr	r3, [pc, #40]	; (801025c <xTimerCreateTimerTask+0x60>)
 8010234:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8010236:	b110      	cbz	r0, 801023e <xTimerCreateTimerTask+0x42>
}
 8010238:	2001      	movs	r0, #1
 801023a:	b008      	add	sp, #32
 801023c:	bd10      	pop	{r4, pc}
 801023e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010242:	f383 8811 	msr	BASEPRI, r3
 8010246:	f3bf 8f6f 	isb	sy
 801024a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801024e:	e7fe      	b.n	801024e <xTimerCreateTimerTask+0x52>
 8010250:	2400c79c 	.word	0x2400c79c
 8010254:	08023540 	.word	0x08023540
 8010258:	08010565 	.word	0x08010565
 801025c:	2400c7a0 	.word	0x2400c7a0

08010260 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8010260:	b1b8      	cbz	r0, 8010292 <xTimerGenericCommand+0x32>
 8010262:	469c      	mov	ip, r3
 8010264:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8010266:	4818      	ldr	r0, [pc, #96]	; (80102c8 <xTimerGenericCommand+0x68>)
 8010268:	6800      	ldr	r0, [r0, #0]
 801026a:	b358      	cbz	r0, 80102c4 <xTimerGenericCommand+0x64>
{
 801026c:	b500      	push	{lr}
 801026e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8010270:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010272:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010274:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010276:	2905      	cmp	r1, #5
 8010278:	dc1c      	bgt.n	80102b4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801027a:	f7ff fe4d 	bl	800ff18 <xTaskGetSchedulerState>
 801027e:	2802      	cmp	r0, #2
 8010280:	d010      	beq.n	80102a4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010282:	2300      	movs	r3, #0
 8010284:	461a      	mov	r2, r3
 8010286:	4669      	mov	r1, sp
 8010288:	480f      	ldr	r0, [pc, #60]	; (80102c8 <xTimerGenericCommand+0x68>)
 801028a:	6800      	ldr	r0, [r0, #0]
 801028c:	f7fe fde1 	bl	800ee52 <xQueueGenericSend>
 8010290:	e015      	b.n	80102be <xTimerGenericCommand+0x5e>
 8010292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010296:	f383 8811 	msr	BASEPRI, r3
 801029a:	f3bf 8f6f 	isb	sy
 801029e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80102a2:	e7fe      	b.n	80102a2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80102a4:	2300      	movs	r3, #0
 80102a6:	9a06      	ldr	r2, [sp, #24]
 80102a8:	4669      	mov	r1, sp
 80102aa:	4807      	ldr	r0, [pc, #28]	; (80102c8 <xTimerGenericCommand+0x68>)
 80102ac:	6800      	ldr	r0, [r0, #0]
 80102ae:	f7fe fdd0 	bl	800ee52 <xQueueGenericSend>
 80102b2:	e004      	b.n	80102be <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80102b4:	2300      	movs	r3, #0
 80102b6:	4662      	mov	r2, ip
 80102b8:	4669      	mov	r1, sp
 80102ba:	f7fe fe8e 	bl	800efda <xQueueGenericSendFromISR>
}
 80102be:	b005      	add	sp, #20
 80102c0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80102c4:	2000      	movs	r0, #0
}
 80102c6:	4770      	bx	lr
 80102c8:	2400c79c 	.word	0x2400c79c

080102cc <prvSwitchTimerLists>:
{
 80102cc:	b570      	push	{r4, r5, r6, lr}
 80102ce:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102d0:	4b1b      	ldr	r3, [pc, #108]	; (8010340 <prvSwitchTimerLists+0x74>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	b362      	cbz	r2, 8010332 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102dc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102de:	1d25      	adds	r5, r4, #4
 80102e0:	4628      	mov	r0, r5
 80102e2:	f7fe fa33 	bl	800e74c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102e6:	6a23      	ldr	r3, [r4, #32]
 80102e8:	4620      	mov	r0, r4
 80102ea:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80102f0:	f013 0f04 	tst.w	r3, #4
 80102f4:	d0ec      	beq.n	80102d0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80102f6:	69a3      	ldr	r3, [r4, #24]
 80102f8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80102fa:	429e      	cmp	r6, r3
 80102fc:	d207      	bcs.n	801030e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80102fe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010300:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010302:	4629      	mov	r1, r5
 8010304:	4b0e      	ldr	r3, [pc, #56]	; (8010340 <prvSwitchTimerLists+0x74>)
 8010306:	6818      	ldr	r0, [r3, #0]
 8010308:	f7fe fa07 	bl	800e71a <vListInsert>
 801030c:	e7e0      	b.n	80102d0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801030e:	2100      	movs	r1, #0
 8010310:	9100      	str	r1, [sp, #0]
 8010312:	460b      	mov	r3, r1
 8010314:	4632      	mov	r2, r6
 8010316:	4620      	mov	r0, r4
 8010318:	f7ff ffa2 	bl	8010260 <xTimerGenericCommand>
				configASSERT( xResult );
 801031c:	2800      	cmp	r0, #0
 801031e:	d1d7      	bne.n	80102d0 <prvSwitchTimerLists+0x4>
 8010320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010324:	f383 8811 	msr	BASEPRI, r3
 8010328:	f3bf 8f6f 	isb	sy
 801032c:	f3bf 8f4f 	dsb	sy
 8010330:	e7fe      	b.n	8010330 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8010332:	4a04      	ldr	r2, [pc, #16]	; (8010344 <prvSwitchTimerLists+0x78>)
 8010334:	6810      	ldr	r0, [r2, #0]
 8010336:	4902      	ldr	r1, [pc, #8]	; (8010340 <prvSwitchTimerLists+0x74>)
 8010338:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801033a:	6013      	str	r3, [r2, #0]
}
 801033c:	b002      	add	sp, #8
 801033e:	bd70      	pop	{r4, r5, r6, pc}
 8010340:	2400c678 	.word	0x2400c678
 8010344:	2400c67c 	.word	0x2400c67c

08010348 <prvSampleTimeNow>:
{
 8010348:	b538      	push	{r3, r4, r5, lr}
 801034a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801034c:	f7ff fbb8 	bl	800fac0 <xTaskGetTickCount>
 8010350:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8010352:	4b07      	ldr	r3, [pc, #28]	; (8010370 <prvSampleTimeNow+0x28>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4283      	cmp	r3, r0
 8010358:	d805      	bhi.n	8010366 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801035a:	2300      	movs	r3, #0
 801035c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801035e:	4b04      	ldr	r3, [pc, #16]	; (8010370 <prvSampleTimeNow+0x28>)
 8010360:	601c      	str	r4, [r3, #0]
}
 8010362:	4620      	mov	r0, r4
 8010364:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8010366:	f7ff ffb1 	bl	80102cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801036a:	2301      	movs	r3, #1
 801036c:	602b      	str	r3, [r5, #0]
 801036e:	e7f6      	b.n	801035e <prvSampleTimeNow+0x16>
 8010370:	2400c748 	.word	0x2400c748

08010374 <prvProcessExpiredTimer>:
{
 8010374:	b570      	push	{r4, r5, r6, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	4606      	mov	r6, r0
 801037a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801037c:	4917      	ldr	r1, [pc, #92]	; (80103dc <prvProcessExpiredTimer+0x68>)
 801037e:	6809      	ldr	r1, [r1, #0]
 8010380:	68c9      	ldr	r1, [r1, #12]
 8010382:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010384:	1d20      	adds	r0, r4, #4
 8010386:	f7fe f9e1 	bl	800e74c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801038a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 801038e:	f01c 0f04 	tst.w	ip, #4
 8010392:	d108      	bne.n	80103a6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010394:	f02c 0c01 	bic.w	ip, ip, #1
 8010398:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801039c:	6a23      	ldr	r3, [r4, #32]
 801039e:	4620      	mov	r0, r4
 80103a0:	4798      	blx	r3
}
 80103a2:	b002      	add	sp, #8
 80103a4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80103a6:	69a1      	ldr	r1, [r4, #24]
 80103a8:	4633      	mov	r3, r6
 80103aa:	462a      	mov	r2, r5
 80103ac:	4431      	add	r1, r6
 80103ae:	4620      	mov	r0, r4
 80103b0:	f7ff fec4 	bl	801013c <prvInsertTimerInActiveList>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d0f1      	beq.n	801039c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103b8:	2100      	movs	r1, #0
 80103ba:	9100      	str	r1, [sp, #0]
 80103bc:	460b      	mov	r3, r1
 80103be:	4632      	mov	r2, r6
 80103c0:	4620      	mov	r0, r4
 80103c2:	f7ff ff4d 	bl	8010260 <xTimerGenericCommand>
			configASSERT( xResult );
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d1e8      	bne.n	801039c <prvProcessExpiredTimer+0x28>
 80103ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ce:	f383 8811 	msr	BASEPRI, r3
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	f3bf 8f4f 	dsb	sy
 80103da:	e7fe      	b.n	80103da <prvProcessExpiredTimer+0x66>
 80103dc:	2400c678 	.word	0x2400c678

080103e0 <prvProcessTimerOrBlockTask>:
{
 80103e0:	b570      	push	{r4, r5, r6, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	4606      	mov	r6, r0
 80103e6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80103e8:	f7ff fb62 	bl	800fab0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80103ec:	a801      	add	r0, sp, #4
 80103ee:	f7ff ffab 	bl	8010348 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80103f2:	9b01      	ldr	r3, [sp, #4]
 80103f4:	bb3b      	cbnz	r3, 8010446 <prvProcessTimerOrBlockTask+0x66>
 80103f6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80103f8:	42b0      	cmp	r0, r6
 80103fa:	bf28      	it	cs
 80103fc:	2c00      	cmpcs	r4, #0
 80103fe:	d019      	beq.n	8010434 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 8010400:	b124      	cbz	r4, 801040c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010402:	4a13      	ldr	r2, [pc, #76]	; (8010450 <prvProcessTimerOrBlockTask+0x70>)
 8010404:	6812      	ldr	r2, [r2, #0]
 8010406:	6812      	ldr	r2, [r2, #0]
 8010408:	b9da      	cbnz	r2, 8010442 <prvProcessTimerOrBlockTask+0x62>
 801040a:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801040c:	4622      	mov	r2, r4
 801040e:	1b71      	subs	r1, r6, r5
 8010410:	4b10      	ldr	r3, [pc, #64]	; (8010454 <prvProcessTimerOrBlockTask+0x74>)
 8010412:	6818      	ldr	r0, [r3, #0]
 8010414:	f7ff f8b8 	bl	800f588 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010418:	f7ff fbe4 	bl	800fbe4 <xTaskResumeAll>
 801041c:	b9a8      	cbnz	r0, 801044a <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 801041e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010426:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	e00a      	b.n	801044a <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8010434:	f7ff fbd6 	bl	800fbe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010438:	4629      	mov	r1, r5
 801043a:	4630      	mov	r0, r6
 801043c:	f7ff ff9a 	bl	8010374 <prvProcessExpiredTimer>
 8010440:	e003      	b.n	801044a <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010442:	461c      	mov	r4, r3
 8010444:	e7e2      	b.n	801040c <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 8010446:	f7ff fbcd 	bl	800fbe4 <xTaskResumeAll>
}
 801044a:	b002      	add	sp, #8
 801044c:	bd70      	pop	{r4, r5, r6, pc}
 801044e:	bf00      	nop
 8010450:	2400c67c 	.word	0x2400c67c
 8010454:	2400c79c 	.word	0x2400c79c

08010458 <prvProcessReceivedCommands>:
{
 8010458:	b510      	push	{r4, lr}
 801045a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801045c:	e002      	b.n	8010464 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801045e:	9b04      	ldr	r3, [sp, #16]
 8010460:	2b00      	cmp	r3, #0
 8010462:	da0f      	bge.n	8010484 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010464:	2200      	movs	r2, #0
 8010466:	a904      	add	r1, sp, #16
 8010468:	4b3d      	ldr	r3, [pc, #244]	; (8010560 <prvProcessReceivedCommands+0x108>)
 801046a:	6818      	ldr	r0, [r3, #0]
 801046c:	f7fe fe75 	bl	800f15a <xQueueReceive>
 8010470:	2800      	cmp	r0, #0
 8010472:	d073      	beq.n	801055c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010474:	9b04      	ldr	r3, [sp, #16]
 8010476:	2b00      	cmp	r3, #0
 8010478:	daf1      	bge.n	801045e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801047a:	9907      	ldr	r1, [sp, #28]
 801047c:	9806      	ldr	r0, [sp, #24]
 801047e:	9b05      	ldr	r3, [sp, #20]
 8010480:	4798      	blx	r3
 8010482:	e7ec      	b.n	801045e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010484:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010486:	6963      	ldr	r3, [r4, #20]
 8010488:	b113      	cbz	r3, 8010490 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801048a:	1d20      	adds	r0, r4, #4
 801048c:	f7fe f95e 	bl	800e74c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010490:	a803      	add	r0, sp, #12
 8010492:	f7ff ff59 	bl	8010348 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010496:	9b04      	ldr	r3, [sp, #16]
 8010498:	2b09      	cmp	r3, #9
 801049a:	d8e3      	bhi.n	8010464 <prvProcessReceivedCommands+0xc>
 801049c:	e8df f003 	tbb	[pc, r3]
 80104a0:	30050505 	.word	0x30050505
 80104a4:	05055037 	.word	0x05055037
 80104a8:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80104aa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80104ae:	f043 0301 	orr.w	r3, r3, #1
 80104b2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80104b6:	9b05      	ldr	r3, [sp, #20]
 80104b8:	69a1      	ldr	r1, [r4, #24]
 80104ba:	4602      	mov	r2, r0
 80104bc:	4419      	add	r1, r3
 80104be:	4620      	mov	r0, r4
 80104c0:	f7ff fe3c 	bl	801013c <prvInsertTimerInActiveList>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d0cd      	beq.n	8010464 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104c8:	6a23      	ldr	r3, [r4, #32]
 80104ca:	4620      	mov	r0, r4
 80104cc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80104ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80104d2:	f013 0f04 	tst.w	r3, #4
 80104d6:	d0c5      	beq.n	8010464 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80104d8:	69a2      	ldr	r2, [r4, #24]
 80104da:	2100      	movs	r1, #0
 80104dc:	9100      	str	r1, [sp, #0]
 80104de:	460b      	mov	r3, r1
 80104e0:	9805      	ldr	r0, [sp, #20]
 80104e2:	4402      	add	r2, r0
 80104e4:	4620      	mov	r0, r4
 80104e6:	f7ff febb 	bl	8010260 <xTimerGenericCommand>
							configASSERT( xResult );
 80104ea:	2800      	cmp	r0, #0
 80104ec:	d1ba      	bne.n	8010464 <prvProcessReceivedCommands+0xc>
 80104ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f2:	f383 8811 	msr	BASEPRI, r3
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	e7fe      	b.n	80104fe <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010500:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010504:	f023 0301 	bic.w	r3, r3, #1
 8010508:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 801050c:	e7aa      	b.n	8010464 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801050e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010512:	f043 0301 	orr.w	r3, r3, #1
 8010516:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801051a:	9905      	ldr	r1, [sp, #20]
 801051c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801051e:	b131      	cbz	r1, 801052e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010520:	4603      	mov	r3, r0
 8010522:	4602      	mov	r2, r0
 8010524:	4401      	add	r1, r0
 8010526:	4620      	mov	r0, r4
 8010528:	f7ff fe08 	bl	801013c <prvInsertTimerInActiveList>
					break;
 801052c:	e79a      	b.n	8010464 <prvProcessReceivedCommands+0xc>
 801052e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010532:	f383 8811 	msr	BASEPRI, r3
 8010536:	f3bf 8f6f 	isb	sy
 801053a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801053e:	e7fe      	b.n	801053e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010540:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010544:	f013 0f02 	tst.w	r3, #2
 8010548:	d004      	beq.n	8010554 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801054a:	f023 0301 	bic.w	r3, r3, #1
 801054e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8010552:	e787      	b.n	8010464 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8010554:	4620      	mov	r0, r4
 8010556:	f7fe f889 	bl	800e66c <vPortFree>
 801055a:	e783      	b.n	8010464 <prvProcessReceivedCommands+0xc>
}
 801055c:	b008      	add	sp, #32
 801055e:	bd10      	pop	{r4, pc}
 8010560:	2400c79c 	.word	0x2400c79c

08010564 <prvTimerTask>:
{
 8010564:	b500      	push	{lr}
 8010566:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010568:	a801      	add	r0, sp, #4
 801056a:	f7ff fdd7 	bl	801011c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801056e:	9901      	ldr	r1, [sp, #4]
 8010570:	f7ff ff36 	bl	80103e0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8010574:	f7ff ff70 	bl	8010458 <prvProcessReceivedCommands>
	for( ;; )
 8010578:	e7f6      	b.n	8010568 <prvTimerTask+0x4>

0801057a <net_aton>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
int32_t net_aton(const char_t *ptr, net_ip_addr_t *addr)
{
 801057a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801057c:	b085      	sub	sp, #20
 801057e:	4684      	mov	ip, r0
 8010580:	460e      	mov	r6, r1
  uint32_t parts[4];
  uint32_t *pp = parts;
  int32_t ret = 1;
  int32_t done;

  c0 = *cp;
 8010582:	7803      	ldrb	r3, [r0, #0]
  done = 0;
 8010584:	2000      	movs	r0, #0
  int32_t ret = 1;
 8010586:	2501      	movs	r5, #1
  uint32_t *pp = parts;
 8010588:	466c      	mov	r4, sp
  uint32_t val = 0;
 801058a:	4601      	mov	r1, r0
 801058c:	e03e      	b.n	801060c <net_aton+0x92>
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
        {
          ret = 0;
 801058e:	4605      	mov	r5, r0
          done = 1;
 8010590:	2001      	movs	r0, #1
 8010592:	e03b      	b.n	801060c <net_aton+0x92>
      ret = 0;
 8010594:	4605      	mov	r5, r0
      done = 1;
 8010596:	2001      	movs	r0, #1
 8010598:	e038      	b.n	801060c <net_aton+0x92>
        ++cp;
 801059a:	f10c 0201 	add.w	r2, ip, #1
        c0 = (char_t) * cp;
 801059e:	f89c 3001 	ldrb.w	r3, [ip, #1]
        if ((c0 == (char_t) 'x') || (c0 == (char_t) 'X'))
 80105a2:	2b58      	cmp	r3, #88	; 0x58
 80105a4:	bf18      	it	ne
 80105a6:	2b78      	cmpne	r3, #120	; 0x78
 80105a8:	d106      	bne.n	80105b8 <net_aton+0x3e>
          c0 = (char_t) * cp;
 80105aa:	f89c 3002 	ldrb.w	r3, [ip, #2]
          ++cp;
 80105ae:	f10c 0c02 	add.w	ip, ip, #2
          base = 16;
 80105b2:	f04f 0e10 	mov.w	lr, #16
 80105b6:	e033      	b.n	8010620 <net_aton+0xa6>
        ++cp;
 80105b8:	4694      	mov	ip, r2
          base = 8;
 80105ba:	f04f 0e08 	mov.w	lr, #8
 80105be:	e02f      	b.n	8010620 <net_aton+0xa6>
          val = (val * base) + (uint32_t)c0 - (uint32_t) '0';
 80105c0:	fb0e 3101 	mla	r1, lr, r1, r3
 80105c4:	3930      	subs	r1, #48	; 0x30
          c0 = (char_t) * cp;
 80105c6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
        if (NET_ISDIGIT(c0))
 80105ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80105ce:	b2d2      	uxtb	r2, r2
 80105d0:	2a09      	cmp	r2, #9
 80105d2:	d9f5      	bls.n	80105c0 <net_aton+0x46>
        else if ((base == 16U) && NET_ISXDIGIT(c0))
 80105d4:	f1be 0f10 	cmp.w	lr, #16
 80105d8:	d115      	bne.n	8010606 <net_aton+0x8c>
 80105da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80105de:	b2d2      	uxtb	r2, r2
 80105e0:	2a05      	cmp	r2, #5
 80105e2:	d904      	bls.n	80105ee <net_aton+0x74>
 80105e4:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 80105e8:	b2ff      	uxtb	r7, r7
 80105ea:	2f05      	cmp	r7, #5
 80105ec:	d80b      	bhi.n	8010606 <net_aton+0x8c>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 80105ee:	0109      	lsls	r1, r1, #4
 80105f0:	2a19      	cmp	r2, #25
 80105f2:	d806      	bhi.n	8010602 <net_aton+0x88>
 80105f4:	2261      	movs	r2, #97	; 0x61
 80105f6:	1a9b      	subs	r3, r3, r2
 80105f8:	330a      	adds	r3, #10
 80105fa:	4319      	orrs	r1, r3
          c0 = (char_t) * cp;
 80105fc:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010600:	e7e3      	b.n	80105ca <net_aton+0x50>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 8010602:	2241      	movs	r2, #65	; 0x41
 8010604:	e7f7      	b.n	80105f6 <net_aton+0x7c>
      if (c0 == '.')
 8010606:	2b2e      	cmp	r3, #46	; 0x2e
 8010608:	d00c      	beq.n	8010624 <net_aton+0xaa>
          c0 = (char_t) * cp;
        }
      }
      else
      {
        done = 1;
 801060a:	2001      	movs	r0, #1
    if (done == 1)
 801060c:	b9a0      	cbnz	r0, 8010638 <net_aton+0xbe>
    if (!NET_ISDIGIT(c0))
 801060e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010612:	b2d2      	uxtb	r2, r2
 8010614:	2a09      	cmp	r2, #9
 8010616:	d8bd      	bhi.n	8010594 <net_aton+0x1a>
      if (c0 == '0')
 8010618:	2b30      	cmp	r3, #48	; 0x30
 801061a:	d0be      	beq.n	801059a <net_aton+0x20>
      base = 10;
 801061c:	f04f 0e0a 	mov.w	lr, #10
          base = 8;
 8010620:	2100      	movs	r1, #0
 8010622:	e7d2      	b.n	80105ca <net_aton+0x50>
        if (pp >= (parts + 3))
 8010624:	aa03      	add	r2, sp, #12
 8010626:	4294      	cmp	r4, r2
 8010628:	d2b1      	bcs.n	801058e <net_aton+0x14>
          *pp = val;
 801062a:	f844 1b04 	str.w	r1, [r4], #4
          c0 = (char_t) * cp;
 801062e:	f89c 3001 	ldrb.w	r3, [ip, #1]
          ++cp;
 8010632:	f10c 0c01 	add.w	ip, ip, #1
 8010636:	e7e9      	b.n	801060c <net_aton+0x92>
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (char_t)'\0') && (NET_ISSPACE((c0)) == false))
 8010638:	b19b      	cbz	r3, 8010662 <net_aton+0xe8>
 801063a:	2b0c      	cmp	r3, #12
 801063c:	bf18      	it	ne
 801063e:	2b20      	cmpne	r3, #32
 8010640:	d00f      	beq.n	8010662 <net_aton+0xe8>
 8010642:	2b0d      	cmp	r3, #13
 8010644:	bf14      	ite	ne
 8010646:	2200      	movne	r2, #0
 8010648:	2201      	moveq	r2, #1
 801064a:	2b0a      	cmp	r3, #10
 801064c:	d009      	beq.n	8010662 <net_aton+0xe8>
 801064e:	b942      	cbnz	r2, 8010662 <net_aton+0xe8>
 8010650:	2b0b      	cmp	r3, #11
 8010652:	bf14      	ite	ne
 8010654:	2200      	movne	r2, #0
 8010656:	2201      	moveq	r2, #1
 8010658:	2b09      	cmp	r3, #9
 801065a:	d002      	beq.n	8010662 <net_aton+0xe8>
 801065c:	b90a      	cbnz	r2, 8010662 <net_aton+0xe8>
  {
    ret = 0;
 801065e:	2500      	movs	r5, #0
 8010660:	e011      	b.n	8010686 <net_aton+0x10c>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 8010662:	466b      	mov	r3, sp
 8010664:	1ae3      	subs	r3, r4, r3
 8010666:	109b      	asrs	r3, r3, #2
 8010668:	2b03      	cmp	r3, #3
 801066a:	d834      	bhi.n	80106d6 <net_aton+0x15c>
 801066c:	e8df f003 	tbb	[pc, r3]
 8010670:	180e0209 	.word	0x180e0209

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 8010674:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8010678:	d300      	bcc.n	801067c <net_aton+0x102>
        {
          ret = 0;
 801067a:	2500      	movs	r5, #0
        }
        val |= parts[0] << 24;
 801067c:	9b00      	ldr	r3, [sp, #0]
 801067e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        ret = 0;
        break;
    }
  }

  if (ret == 1)
 8010682:	2d01      	cmp	r5, #1
 8010684:	d018      	beq.n	80106b8 <net_aton+0x13e>
    {
      addr->addr = NET_HTONL(val);
    }
  }
  return ret;
}
 8010686:	4628      	mov	r0, r5
 8010688:	b005      	add	sp, #20
 801068a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (val > 0xffffU)
 801068c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8010690:	d223      	bcs.n	80106da <net_aton+0x160>
        val |= (parts[0] << 24) | (parts[1] << 16);
 8010692:	9b01      	ldr	r3, [sp, #4]
 8010694:	041b      	lsls	r3, r3, #16
 8010696:	9a00      	ldr	r2, [sp, #0]
 8010698:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801069c:	4319      	orrs	r1, r3
        break;
 801069e:	e7f0      	b.n	8010682 <net_aton+0x108>
        if (val > 0xffU)
 80106a0:	29ff      	cmp	r1, #255	; 0xff
 80106a2:	d81c      	bhi.n	80106de <net_aton+0x164>
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80106a4:	9b01      	ldr	r3, [sp, #4]
 80106a6:	041b      	lsls	r3, r3, #16
 80106a8:	9a00      	ldr	r2, [sp, #0]
 80106aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80106ae:	9a02      	ldr	r2, [sp, #8]
 80106b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80106b4:	4319      	orrs	r1, r3
        break;
 80106b6:	e7e4      	b.n	8010682 <net_aton+0x108>
    if (addr != NULL)
 80106b8:	2e00      	cmp	r6, #0
 80106ba:	d0e4      	beq.n	8010686 <net_aton+0x10c>
      addr->addr = NET_HTONL(val);
 80106bc:	0a0b      	lsrs	r3, r1, #8
 80106be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80106c2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80106c6:	020a      	lsls	r2, r1, #8
 80106c8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80106cc:	4313      	orrs	r3, r2
 80106ce:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 80106d2:	6031      	str	r1, [r6, #0]
 80106d4:	e7d7      	b.n	8010686 <net_aton+0x10c>
    switch (pp - parts + 1)
 80106d6:	2500      	movs	r5, #0
 80106d8:	e7d5      	b.n	8010686 <net_aton+0x10c>
          ret = 0;
 80106da:	2500      	movs	r5, #0
 80106dc:	e7d3      	b.n	8010686 <net_aton+0x10c>
          ret = 0;
 80106de:	2500      	movs	r5, #0
  return ret;
 80106e0:	e7d1      	b.n	8010686 <net_aton+0x10c>

080106e2 <net_get_ip_addr>:
  /*cstat -MISRAC2012-Rule-11.3 Cast */
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
  /*cstat +MISRAC2012-Rule-11.3 Cast */
  NET_COPY(ipaddr, addrv);
  return ipaddr;
}
 80106e2:	6840      	ldr	r0, [r0, #4]
 80106e4:	4770      	bx	lr
	...

080106e8 <net_wifi_string_to_security>:
/**
  * @brief  Convert a string to a security enum value
  * @param  sec is a pointer to a string
  */
uint32_t net_wifi_string_to_security(char_t *sec)
{
 80106e8:	b538      	push	{r3, r4, r5, lr}
 80106ea:	4604      	mov	r4, r0
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
  if (strcmp(sec, "Open") == 0)
 80106ec:	493d      	ldr	r1, [pc, #244]	; (80107e4 <net_wifi_string_to_security+0xfc>)
 80106ee:	f7ef fdff 	bl	80002f0 <strcmp>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d071      	beq.n	80107da <net_wifi_string_to_security+0xf2>
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
 80106f6:	f04f 35ff 	mov.w	r5, #4294967295
  {
    ret = NET_WIFI_SM_OPEN;
  }
  if (strcmp(sec, "WEP-shared") == 0)
 80106fa:	493b      	ldr	r1, [pc, #236]	; (80107e8 <net_wifi_string_to_security+0x100>)
 80106fc:	4620      	mov	r0, r4
 80106fe:	f7ef fdf7 	bl	80002f0 <strcmp>
 8010702:	b908      	cbnz	r0, 8010708 <net_wifi_string_to_security+0x20>
  {
    ret = NET_WIFI_SM_WEP_SHARED;
 8010704:	f248 0501 	movw	r5, #32769	; 0x8001
  }
  if (strcmp(sec, "WPA-TKIP") == 0)
 8010708:	4938      	ldr	r1, [pc, #224]	; (80107ec <net_wifi_string_to_security+0x104>)
 801070a:	4620      	mov	r0, r4
 801070c:	f7ef fdf0 	bl	80002f0 <strcmp>
 8010710:	b900      	cbnz	r0, 8010714 <net_wifi_string_to_security+0x2c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_PSK;
 8010712:	4d37      	ldr	r5, [pc, #220]	; (80107f0 <net_wifi_string_to_security+0x108>)
  }
  if (strcmp(sec, "WPA-Mixed") == 0)
 8010714:	4937      	ldr	r1, [pc, #220]	; (80107f4 <net_wifi_string_to_security+0x10c>)
 8010716:	4620      	mov	r0, r4
 8010718:	f7ef fdea 	bl	80002f0 <strcmp>
 801071c:	b900      	cbnz	r0, 8010720 <net_wifi_string_to_security+0x38>
  {
    ret = NET_WIFI_SM_WPA_MIXED_PSK;
 801071e:	4d36      	ldr	r5, [pc, #216]	; (80107f8 <net_wifi_string_to_security+0x110>)
  }
  if (strcmp(sec, "WPA2-AES") == 0)
 8010720:	4936      	ldr	r1, [pc, #216]	; (80107fc <net_wifi_string_to_security+0x114>)
 8010722:	4620      	mov	r0, r4
 8010724:	f7ef fde4 	bl	80002f0 <strcmp>
 8010728:	b900      	cbnz	r0, 801072c <net_wifi_string_to_security+0x44>
  {
    ret = NET_WIFI_SM_WPA2_AES_PSK;
 801072a:	4d35      	ldr	r5, [pc, #212]	; (8010800 <net_wifi_string_to_security+0x118>)
  }
  if (strcmp(sec, "WPA2-TKIP") == 0)
 801072c:	4935      	ldr	r1, [pc, #212]	; (8010804 <net_wifi_string_to_security+0x11c>)
 801072e:	4620      	mov	r0, r4
 8010730:	f7ef fdde 	bl	80002f0 <strcmp>
 8010734:	b900      	cbnz	r0, 8010738 <net_wifi_string_to_security+0x50>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 8010736:	4d34      	ldr	r5, [pc, #208]	; (8010808 <net_wifi_string_to_security+0x120>)
  }
  if (strcmp(sec, "WPA2-Mixed") == 0)
 8010738:	4934      	ldr	r1, [pc, #208]	; (801080c <net_wifi_string_to_security+0x124>)
 801073a:	4620      	mov	r0, r4
 801073c:	f7ef fdd8 	bl	80002f0 <strcmp>
 8010740:	b900      	cbnz	r0, 8010744 <net_wifi_string_to_security+0x5c>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8010742:	4d33      	ldr	r5, [pc, #204]	; (8010810 <net_wifi_string_to_security+0x128>)
  }
  if (strcmp(sec, "WPA2-DBT") == 0)
 8010744:	4933      	ldr	r1, [pc, #204]	; (8010814 <net_wifi_string_to_security+0x12c>)
 8010746:	4620      	mov	r0, r4
 8010748:	f7ef fdd2 	bl	80002f0 <strcmp>
 801074c:	b900      	cbnz	r0, 8010750 <net_wifi_string_to_security+0x68>
  {
    ret = NET_WIFI_SM_WPA2_FBT_PSK;
 801074e:	4d32      	ldr	r5, [pc, #200]	; (8010818 <net_wifi_string_to_security+0x130>)
  }
  if (strcmp(sec, "WPA3") == 0)
 8010750:	4932      	ldr	r1, [pc, #200]	; (801081c <net_wifi_string_to_security+0x134>)
 8010752:	4620      	mov	r0, r4
 8010754:	f7ef fdcc 	bl	80002f0 <strcmp>
 8010758:	b900      	cbnz	r0, 801075c <net_wifi_string_to_security+0x74>
  {
    ret = NET_WIFI_SM_WPA3_SAE;
 801075a:	4d31      	ldr	r5, [pc, #196]	; (8010820 <net_wifi_string_to_security+0x138>)
  }
  if (strcmp(sec, "WPA3-WPA2") == 0)
 801075c:	4931      	ldr	r1, [pc, #196]	; (8010824 <net_wifi_string_to_security+0x13c>)
 801075e:	4620      	mov	r0, r4
 8010760:	f7ef fdc6 	bl	80002f0 <strcmp>
 8010764:	b900      	cbnz	r0, 8010768 <net_wifi_string_to_security+0x80>
  {
    ret = NET_WIFI_SM_WPA3_WPA2_PSK;
 8010766:	4d30      	ldr	r5, [pc, #192]	; (8010828 <net_wifi_string_to_security+0x140>)
  }

  if (strcmp(sec, "WPA-TKIP-Ent") == 0)
 8010768:	4930      	ldr	r1, [pc, #192]	; (801082c <net_wifi_string_to_security+0x144>)
 801076a:	4620      	mov	r0, r4
 801076c:	f7ef fdc0 	bl	80002f0 <strcmp>
 8010770:	b900      	cbnz	r0, 8010774 <net_wifi_string_to_security+0x8c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_ENT;
 8010772:	4d2f      	ldr	r5, [pc, #188]	; (8010830 <net_wifi_string_to_security+0x148>)
  }
  if (strcmp(sec, "WPA-AES-Ent") == 0)
 8010774:	492f      	ldr	r1, [pc, #188]	; (8010834 <net_wifi_string_to_security+0x14c>)
 8010776:	4620      	mov	r0, r4
 8010778:	f7ef fdba 	bl	80002f0 <strcmp>
 801077c:	b900      	cbnz	r0, 8010780 <net_wifi_string_to_security+0x98>
  {
    ret = NET_WIFI_SM_WPA_AES_ENT;
 801077e:	4d2e      	ldr	r5, [pc, #184]	; (8010838 <net_wifi_string_to_security+0x150>)
  }
  if (strcmp(sec, "WPA2-TKIP-Ent") == 0)
 8010780:	492e      	ldr	r1, [pc, #184]	; (801083c <net_wifi_string_to_security+0x154>)
 8010782:	4620      	mov	r0, r4
 8010784:	f7ef fdb4 	bl	80002f0 <strcmp>
 8010788:	b900      	cbnz	r0, 801078c <net_wifi_string_to_security+0xa4>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_ENT;
 801078a:	4d2d      	ldr	r5, [pc, #180]	; (8010840 <net_wifi_string_to_security+0x158>)
  }
  if (strcmp(sec, "WPA2-AES-Ent") == 0)
 801078c:	492d      	ldr	r1, [pc, #180]	; (8010844 <net_wifi_string_to_security+0x15c>)
 801078e:	4620      	mov	r0, r4
 8010790:	f7ef fdae 	bl	80002f0 <strcmp>
 8010794:	b900      	cbnz	r0, 8010798 <net_wifi_string_to_security+0xb0>
  {
    ret = NET_WIFI_SM_WPA2_AES_ENT;
 8010796:	4d2c      	ldr	r5, [pc, #176]	; (8010848 <net_wifi_string_to_security+0x160>)
  }
  if (strcmp(sec, "WPA2-Mixed-Ent") == 0)
 8010798:	492c      	ldr	r1, [pc, #176]	; (801084c <net_wifi_string_to_security+0x164>)
 801079a:	4620      	mov	r0, r4
 801079c:	f7ef fda8 	bl	80002f0 <strcmp>
 80107a0:	b900      	cbnz	r0, 80107a4 <net_wifi_string_to_security+0xbc>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_ENT;
 80107a2:	4d2b      	ldr	r5, [pc, #172]	; (8010850 <net_wifi_string_to_security+0x168>)
  }
  if (strcmp(sec, "WPA-FBT-Ent") == 0)
 80107a4:	492b      	ldr	r1, [pc, #172]	; (8010854 <net_wifi_string_to_security+0x16c>)
 80107a6:	4620      	mov	r0, r4
 80107a8:	f7ef fda2 	bl	80002f0 <strcmp>
 80107ac:	b900      	cbnz	r0, 80107b0 <net_wifi_string_to_security+0xc8>
  {
    ret = NET_WIFI_SM_WPA2_FBT_ENT;
 80107ae:	4d2a      	ldr	r5, [pc, #168]	; (8010858 <net_wifi_string_to_security+0x170>)
  }
  if (strcmp(sec, "IBS") == 0)
 80107b0:	492a      	ldr	r1, [pc, #168]	; (801085c <net_wifi_string_to_security+0x174>)
 80107b2:	4620      	mov	r0, r4
 80107b4:	f7ef fd9c 	bl	80002f0 <strcmp>
 80107b8:	b908      	cbnz	r0, 80107be <net_wifi_string_to_security+0xd6>
  {
    ret = NET_WIFI_SM_IBSS_OPEN;
 80107ba:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  }
  if (strcmp(sec, "WPS") == 0)
 80107be:	4928      	ldr	r1, [pc, #160]	; (8010860 <net_wifi_string_to_security+0x178>)
 80107c0:	4620      	mov	r0, r4
 80107c2:	f7ef fd95 	bl	80002f0 <strcmp>
 80107c6:	b908      	cbnz	r0, 80107cc <net_wifi_string_to_security+0xe4>
  {
    ret = NET_WIFI_SM_WPS_OPEN;
 80107c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  }
  if (strcmp(sec, "WPS-AES") == 0)
 80107cc:	4925      	ldr	r1, [pc, #148]	; (8010864 <net_wifi_string_to_security+0x17c>)
 80107ce:	4620      	mov	r0, r4
 80107d0:	f7ef fd8e 	bl	80002f0 <strcmp>
 80107d4:	b118      	cbz	r0, 80107de <net_wifi_string_to_security+0xf6>
  {
    ret = NET_WIFI_SM_WPS_SECURE;
  }

  return ret;
}
 80107d6:	4628      	mov	r0, r5
 80107d8:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_WIFI_SM_OPEN;
 80107da:	2500      	movs	r5, #0
 80107dc:	e78d      	b.n	80106fa <net_wifi_string_to_security+0x12>
    ret = NET_WIFI_SM_WPS_SECURE;
 80107de:	4d22      	ldr	r5, [pc, #136]	; (8010868 <net_wifi_string_to_security+0x180>)
  return ret;
 80107e0:	e7f9      	b.n	80107d6 <net_wifi_string_to_security+0xee>
 80107e2:	bf00      	nop
 80107e4:	080232c4 	.word	0x080232c4
 80107e8:	08023550 	.word	0x08023550
 80107ec:	0802355c 	.word	0x0802355c
 80107f0:	00200002 	.word	0x00200002
 80107f4:	08023568 	.word	0x08023568
 80107f8:	00200006 	.word	0x00200006
 80107fc:	08023574 	.word	0x08023574
 8010800:	00400004 	.word	0x00400004
 8010804:	08023580 	.word	0x08023580
 8010808:	00400002 	.word	0x00400002
 801080c:	08023620 	.word	0x08023620
 8010810:	00400006 	.word	0x00400006
 8010814:	0802362c 	.word	0x0802362c
 8010818:	40400004 	.word	0x40400004
 801081c:	080235a4 	.word	0x080235a4
 8010820:	01000004 	.word	0x01000004
 8010824:	080235ac 	.word	0x080235ac
 8010828:	01400004 	.word	0x01400004
 801082c:	080235b8 	.word	0x080235b8
 8010830:	02200002 	.word	0x02200002
 8010834:	080235c8 	.word	0x080235c8
 8010838:	02200004 	.word	0x02200004
 801083c:	080235d4 	.word	0x080235d4
 8010840:	02400002 	.word	0x02400002
 8010844:	080235e4 	.word	0x080235e4
 8010848:	02400004 	.word	0x02400004
 801084c:	080235f4 	.word	0x080235f4
 8010850:	02400006 	.word	0x02400006
 8010854:	08023604 	.word	0x08023604
 8010858:	42400004 	.word	0x42400004
 801085c:	08023610 	.word	0x08023610
 8010860:	08023614 	.word	0x08023614
 8010864:	08023618 	.word	0x08023618
 8010868:	10000004 	.word	0x10000004

0801086c <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
   * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char_t *ssid)
{
 801086c:	b570      	push	{r4, r5, r6, lr}
 801086e:	460d      	mov	r5, r1
 8010870:	4614      	mov	r4, r2
  int32_t ret = NET_OK;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8010872:	f000 f861 	bl	8010938 <netif_check>
  if (pnetif == NULL)
 8010876:	b150      	cbz	r0, 801088e <net_wifi_scan+0x22>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8010878:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 801087c:	7811      	ldrb	r1, [r2, #0]
 801087e:	b949      	cbnz	r1, 8010894 <net_wifi_scan+0x28>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 8010880:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010882:	6816      	ldr	r6, [r2, #0]
 8010884:	4622      	mov	r2, r4
 8010886:	4629      	mov	r1, r5
 8010888:	47b0      	blx	r6
 801088a:	b930      	cbnz	r0, 801089a <net_wifi_scan+0x2e>
      ret = NET_ERROR_GENERIC;
    }
  }

  return ret;
}
 801088c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 801088e:	f06f 0003 	mvn.w	r0, #3
 8010892:	e7fb      	b.n	801088c <net_wifi_scan+0x20>
    ret = NET_ERROR_PARAMETER;
 8010894:	f06f 0003 	mvn.w	r0, #3
 8010898:	e7f8      	b.n	801088c <net_wifi_scan+0x20>
      ret = NET_ERROR_GENERIC;
 801089a:	f06f 001c 	mvn.w	r0, #28
  return ret;
 801089e:	e7f5      	b.n	801088c <net_wifi_scan+0x20>

080108a0 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	460d      	mov	r5, r1
 80108a4:	4614      	mov	r4, r2
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 80108a6:	f000 f847 	bl	8010938 <netif_check>
  if (pnetif == NULL)
 80108aa:	b148      	cbz	r0, 80108c0 <net_wifi_get_scan_results+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 80108ac:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 80108b0:	7811      	ldrb	r1, [r2, #0]
 80108b2:	b941      	cbnz	r1, 80108c6 <net_wifi_get_scan_results+0x26>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 80108b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80108b6:	6856      	ldr	r6, [r2, #4]
 80108b8:	4622      	mov	r2, r4
 80108ba:	4629      	mov	r1, r5
 80108bc:	47b0      	blx	r6
  }
  return ret;
}
 80108be:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 80108c0:	f06f 0003 	mvn.w	r0, #3
 80108c4:	e7fb      	b.n	80108be <net_wifi_get_scan_results+0x1e>
    ret = NET_ERROR_PARAMETER;
 80108c6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80108ca:	e7f8      	b.n	80108be <net_wifi_get_scan_results+0x1e>

080108cc <net_wifi_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
  pnetif->pdrv->extension.wifi->credentials = credentials;
 80108cc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80108d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108d2:	6159      	str	r1, [r3, #20]
  return NET_OK;
}
 80108d4:	2000      	movs	r0, #0
 80108d6:	4770      	bx	lr

080108d8 <netif_add_to_list>:
#endif /* IO */

static void netif_add_to_list(net_if_handle_t *pnetif)
{
  LOCK_NETIF_LIST();
  if (net_if_list == NULL)
 80108d8:	4b05      	ldr	r3, [pc, #20]	; (80108f0 <netif_add_to_list+0x18>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	b12b      	cbz	r3, 80108ea <netif_add_to_list+0x12>
  else
  {
    /*add it to end of the list*/
    net_if_handle_t *plastnetif;
    plastnetif = net_if_list;
    while (plastnetif->next != NULL)
 80108de:	461a      	mov	r2, r3
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d1fb      	bne.n	80108de <netif_add_to_list+0x6>
    {
      plastnetif = plastnetif->next;
    }
    plastnetif->next = pnetif;
 80108e6:	6010      	str	r0, [r2, #0]
  }
  UNLOCK_NETIF_LIST();
}
 80108e8:	4770      	bx	lr
    net_if_list = pnetif;
 80108ea:	4b01      	ldr	r3, [pc, #4]	; (80108f0 <netif_add_to_list+0x18>)
 80108ec:	6018      	str	r0, [r3, #0]
 80108ee:	4770      	bx	lr
 80108f0:	2400c7a4 	.word	0x2400c7a4

080108f4 <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 80108f4:	b510      	push	{r4, lr}
 80108f6:	b082      	sub	sp, #8
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 80108f8:	2300      	movs	r3, #0
 80108fa:	9300      	str	r3, [sp, #0]
  NET_ZERO(ipaddr);
 80108fc:	9301      	str	r3, [sp, #4]
  if (addr != NULL)
 80108fe:	b110      	cbz	r0, 8010906 <net_if_find+0x12>
  {
    ipaddr = net_get_ip_addr(addr);
 8010900:	f7ff feef 	bl	80106e2 <net_get_ip_addr>
 8010904:	9001      	str	r0, [sp, #4]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 8010906:	4b0b      	ldr	r3, [pc, #44]	; (8010934 <net_if_find+0x40>)
 8010908:	681c      	ldr	r4, [r3, #0]

  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 801090a:	2204      	movs	r2, #4
 801090c:	4669      	mov	r1, sp
 801090e:	eb0d 0002 	add.w	r0, sp, r2
 8010912:	f00f ff93 	bl	802083c <memcmp>
 8010916:	b148      	cbz	r0, 801092c <net_if_find+0x38>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 8010918:	2204      	movs	r2, #4
 801091a:	eb0d 0102 	add.w	r1, sp, r2
 801091e:	18a0      	adds	r0, r4, r2
 8010920:	f00f ff8c 	bl	802083c <memcmp>
 8010924:	b110      	cbz	r0, 801092c <net_if_find+0x38>
      {
        break;
      }
      ptr = ptr->next;
 8010926:	6824      	ldr	r4, [r4, #0]
    } while (ptr != NULL);
 8010928:	2c00      	cmp	r4, #0
 801092a:	d1f5      	bne.n	8010918 <net_if_find+0x24>
  }
  UNLOCK_NETIF_LIST();
  return ptr;
}
 801092c:	4620      	mov	r0, r4
 801092e:	b002      	add	sp, #8
 8010930:	bd10      	pop	{r4, pc}
 8010932:	bf00      	nop
 8010934:	2400c7a4 	.word	0x2400c7a4

08010938 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 8010938:	b508      	push	{r3, lr}
  net_if_handle_t *pnetif = pnetif_in;
  if (pnetif == NULL)
 801093a:	b100      	cbz	r0, 801093e <netif_check+0x6>
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
}
 801093c:	bd08      	pop	{r3, pc}
    pnetif = net_if_find(NULL);
 801093e:	2000      	movs	r0, #0
 8010940:	f7ff ffd8 	bl	80108f4 <net_if_find>
    if (pnetif == NULL)
 8010944:	e7fa      	b.n	801093c <netif_check+0x4>

08010946 <net_if_wait_state>:
  * @retval 0 in case of success, an error code otherwise
  */
extern uint32_t HAL_GetTick(void);

int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 8010946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010948:	4604      	mov	r4, r0
 801094a:	460d      	mov	r5, r1
 801094c:	4617      	mov	r7, r2
  int32_t  ret = NET_OK;
  __IO net_state_t      *p;
  p = &pnetif->state;

  uint32_t start_time = HAL_GetTick();
 801094e:	f7f8 fcf1 	bl	8009334 <HAL_GetTick>
 8010952:	4606      	mov	r6, r0
  while (*p != state)
 8010954:	e005      	b.n	8010962 <net_if_wait_state+0x1c>
    if (HAL_GetTick() >= (start_time + timeout))
    {
      ret = NET_TIMEOUT;
      break;
    }
    WAIT_STATE_CHANGE(timeout);
 8010956:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 801095a:	695b      	ldr	r3, [r3, #20]
 801095c:	210a      	movs	r1, #10
 801095e:	4620      	mov	r0, r4
 8010960:	4798      	blx	r3
  while (*p != state)
 8010962:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 8010966:	b2db      	uxtb	r3, r3
 8010968:	42ab      	cmp	r3, r5
 801096a:	d007      	beq.n	801097c <net_if_wait_state+0x36>
    if (HAL_GetTick() >= (start_time + timeout))
 801096c:	f7f8 fce2 	bl	8009334 <HAL_GetTick>
 8010970:	19f3      	adds	r3, r6, r7
 8010972:	4298      	cmp	r0, r3
 8010974:	d3ef      	bcc.n	8010956 <net_if_wait_state+0x10>
      ret = NET_TIMEOUT;
 8010976:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret;
 801097a:	e000      	b.n	801097e <net_if_wait_state+0x38>
  int32_t  ret = NET_OK;
 801097c:	2000      	movs	r0, #0

}
 801097e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010980 <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void  *event_data)
{
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8010980:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8010984:	b128      	cbz	r0, 8010992 <net_if_notify+0x12>
{
 8010986:	b510      	push	{r4, lr}
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8010988:	6804      	ldr	r4, [r0, #0]
 801098a:	b10c      	cbz	r4, 8010990 <net_if_notify+0x10>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 801098c:	6840      	ldr	r0, [r0, #4]
 801098e:	47a0      	blx	r4
  }
}
 8010990:	bd10      	pop	{r4, pc}
 8010992:	4770      	bx	lr

08010994 <net_if_init>:
    net_init_locks();
    net_initialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (pnetif != NULL)
 8010994:	b168      	cbz	r0, 80109b2 <net_if_init+0x1e>
{
 8010996:	b538      	push	{r3, r4, r5, lr}
 8010998:	460d      	mov	r5, r1
 801099a:	4604      	mov	r4, r0
  {
    pnetif->event_handler = event_handler;
 801099c:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    pnetif->state = NET_STATE_INITIALIZED;
 80109a0:	2301      	movs	r3, #1
 80109a2:	f880 30ea 	strb.w	r3, [r0, #234]	; 0xea
    netif_add_to_list(pnetif);
 80109a6:	f7ff ff97 	bl	80108d8 <netif_add_to_list>
    ret = (*driver_init)(pnetif);
 80109aa:	4620      	mov	r0, r4
 80109ac:	47a8      	blx	r5
    if (NET_OK != ret)
 80109ae:	b918      	cbnz	r0, 80109b8 <net_if_init+0x24>
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
  }
  return ret;
}
 80109b0:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 80109b2:	f06f 0003 	mvn.w	r0, #3
}
 80109b6:	4770      	bx	lr
      ret = NET_ERROR_INTERFACE_FAILURE;
 80109b8:	f06f 0010 	mvn.w	r0, #16
  return ret;
 80109bc:	e7f8      	b.n	80109b0 <net_if_init+0x1c>

080109be <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 80109be:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 80109c0:	2101      	movs	r1, #1
 80109c2:	f000 f8ab 	bl	8010b1c <net_state_manage_event>
}
 80109c6:	bd08      	pop	{r3, pc}

080109c8 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 80109c8:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 80109ca:	2102      	movs	r1, #2
 80109cc:	f000 f8a6 	bl	8010b1c <net_state_manage_event>
}
 80109d0:	bd08      	pop	{r3, pc}

080109d2 <net_if_disconnect>:
  * @brief  Disconnect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_disconnect(net_if_handle_t *pnetif)
{
 80109d2:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_DISCONNECT);
 80109d4:	2103      	movs	r1, #3
 80109d6:	f000 f8a1 	bl	8010b1c <net_state_manage_event>
}
 80109da:	bd08      	pop	{r3, pc}

080109dc <set_state>:
  "NET_STATE_CONNECTION_LOST",
};
#endif /* DEBUGSTATE */

static void   set_state(net_if_handle_t *pnetif, net_state_t state)
{
 80109dc:	b508      	push	{r3, lr}
 80109de:	460a      	mov	r2, r1
  pnetif->state = state;
 80109e0:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 80109e4:	2300      	movs	r3, #0
 80109e6:	4619      	mov	r1, r3
 80109e8:	f7ff ffca 	bl	8010980 <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 80109ec:	bd08      	pop	{r3, pc}

080109ee <net_state_initialized>:


static  int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 80109ee:	b538      	push	{r3, r4, r5, lr}
 80109f0:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 80109f2:	2901      	cmp	r1, #1
 80109f4:	d004      	beq.n	8010a00 <net_state_initialized+0x12>
 80109f6:	2905      	cmp	r1, #5
 80109f8:	d010      	beq.n	8010a1c <net_state_initialized+0x2e>
 80109fa:	2500      	movs	r5, #0

    default:
      break;
  }
  return ret;
}
 80109fc:	4628      	mov	r0, r5
 80109fe:	bd38      	pop	{r3, r4, r5, pc}
      set_state(pnetif, NET_STATE_STARTING);
 8010a00:	2102      	movs	r1, #2
 8010a02:	f7ff ffeb 	bl	80109dc <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 8010a06:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	4798      	blx	r3
      if (NET_OK != ret)
 8010a10:	4605      	mov	r5, r0
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d0f2      	beq.n	80109fc <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8010a16:	f06f 0510 	mvn.w	r5, #16
 8010a1a:	e7ef      	b.n	80109fc <net_state_initialized+0xe>
      ret = pnetif->pdrv->if_deinit(pnetif);
 8010a1c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	4798      	blx	r3
 8010a24:	4605      	mov	r5, r0
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 8010a26:	2100      	movs	r1, #0
 8010a28:	4620      	mov	r0, r4
 8010a2a:	f7ff ffd7 	bl	80109dc <set_state>
      if (NET_OK != ret)
 8010a2e:	2d00      	cmp	r5, #0
 8010a30:	d0e4      	beq.n	80109fc <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8010a32:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8010a36:	e7e1      	b.n	80109fc <net_state_initialized+0xe>

08010a38 <net_state_starting>:

static  int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t  event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8010a38:	2907      	cmp	r1, #7
 8010a3a:	d001      	beq.n	8010a40 <net_state_starting+0x8>

    default:
      break;
  }
  return ret;
}
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	4770      	bx	lr
{
 8010a40:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 8010a42:	2103      	movs	r1, #3
 8010a44:	f7ff ffca 	bl	80109dc <set_state>
}
 8010a48:	2000      	movs	r0, #0
 8010a4a:	bd08      	pop	{r3, pc}

08010a4c <net_state_ready>:

static  int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 8010a4c:	b510      	push	{r4, lr}
 8010a4e:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8010a50:	2902      	cmp	r1, #2
 8010a52:	d003      	beq.n	8010a5c <net_state_ready+0x10>
 8010a54:	2904      	cmp	r1, #4
 8010a56:	d00e      	beq.n	8010a76 <net_state_ready+0x2a>
 8010a58:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 8010a5a:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_CONNECTING);
 8010a5c:	2104      	movs	r1, #4
 8010a5e:	f7ff ffbd 	bl	80109dc <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 8010a62:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010a66:	699b      	ldr	r3, [r3, #24]
 8010a68:	4620      	mov	r0, r4
 8010a6a:	4798      	blx	r3
      if (NET_OK != ret)
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d0f4      	beq.n	8010a5a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8010a70:	f06f 0010 	mvn.w	r0, #16
 8010a74:	e7f1      	b.n	8010a5a <net_state_ready+0xe>
      set_state(pnetif, NET_STATE_STOPPING);
 8010a76:	2106      	movs	r1, #6
 8010a78:	f7ff ffb0 	bl	80109dc <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 8010a7c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010a80:	691b      	ldr	r3, [r3, #16]
 8010a82:	4620      	mov	r0, r4
 8010a84:	4798      	blx	r3
      if (NET_OK != ret)
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d0e7      	beq.n	8010a5a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8010a8a:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8010a8e:	e7e4      	b.n	8010a5a <net_state_ready+0xe>

08010a90 <net_state_connecting>:

static  int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t  event)
{
 8010a90:	b508      	push	{r3, lr}
  int32_t       ret = NET_OK;
  switch (event)
 8010a92:	2903      	cmp	r1, #3
 8010a94:	d006      	beq.n	8010aa4 <net_state_connecting+0x14>
 8010a96:	290a      	cmp	r1, #10
 8010a98:	d102      	bne.n	8010aa0 <net_state_connecting+0x10>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 8010a9a:	2105      	movs	r1, #5
 8010a9c:	f7ff ff9e 	bl	80109dc <set_state>

    default:
      break;
  }
  return ret;
}
 8010aa0:	2000      	movs	r0, #0
 8010aa2:	bd08      	pop	{r3, pc}
      set_state(pnetif, NET_STATE_READY);
 8010aa4:	2103      	movs	r1, #3
 8010aa6:	f7ff ff99 	bl	80109dc <set_state>
      break;
 8010aaa:	e7f9      	b.n	8010aa0 <net_state_connecting+0x10>

08010aac <net_state_connected>:

static  int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 8010aac:	b510      	push	{r4, lr}
 8010aae:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8010ab0:	2903      	cmp	r1, #3
 8010ab2:	d003      	beq.n	8010abc <net_state_connected+0x10>
 8010ab4:	2909      	cmp	r1, #9
 8010ab6:	d00e      	beq.n	8010ad6 <net_state_connected+0x2a>
 8010ab8:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 8010aba:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_DISCONNECTING);
 8010abc:	2107      	movs	r1, #7
 8010abe:	f7ff ff8d 	bl	80109dc <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 8010ac2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010ac6:	69db      	ldr	r3, [r3, #28]
 8010ac8:	4620      	mov	r0, r4
 8010aca:	4798      	blx	r3
      if (NET_OK != ret)
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d0f4      	beq.n	8010aba <net_state_connected+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8010ad0:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8010ad4:	e7f1      	b.n	8010aba <net_state_connected+0xe>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 8010ad6:	2108      	movs	r1, #8
 8010ad8:	f7ff ff80 	bl	80109dc <set_state>
  int32_t       ret = NET_OK;
 8010adc:	2000      	movs	r0, #0
      break;
 8010ade:	e7ec      	b.n	8010aba <net_state_connected+0xe>

08010ae0 <net_state_disconnecting>:

static  int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8010ae0:	2907      	cmp	r1, #7
 8010ae2:	d001      	beq.n	8010ae8 <net_state_disconnecting+0x8>

    default:
      break;
  }
  return ret;
}
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	4770      	bx	lr
{
 8010ae8:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 8010aea:	2103      	movs	r1, #3
 8010aec:	f7ff ff76 	bl	80109dc <set_state>
}
 8010af0:	2000      	movs	r0, #0
 8010af2:	bd08      	pop	{r3, pc}

08010af4 <net_state_connection_lost>:
}

static  int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8010af4:	2908      	cmp	r1, #8
 8010af6:	d001      	beq.n	8010afc <net_state_connection_lost+0x8>

    default:
      break;
  }
  return ret;
}
 8010af8:	2000      	movs	r0, #0
 8010afa:	4770      	bx	lr
{
 8010afc:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_CONNECTED);
 8010afe:	2105      	movs	r1, #5
 8010b00:	f7ff ff6c 	bl	80109dc <set_state>
}
 8010b04:	2000      	movs	r0, #0
 8010b06:	bd08      	pop	{r3, pc}

08010b08 <net_state_stopping>:
  switch (event)
 8010b08:	2906      	cmp	r1, #6
 8010b0a:	d001      	beq.n	8010b10 <net_state_stopping+0x8>
}
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	4770      	bx	lr
{
 8010b10:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_INITIALIZED);
 8010b12:	2101      	movs	r1, #1
 8010b14:	f7ff ff62 	bl	80109dc <set_state>
}
 8010b18:	2000      	movs	r0, #0
 8010b1a:	bd08      	pop	{r3, pc}

08010b1c <net_state_manage_event>:




int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 8010b1c:	b510      	push	{r4, lr}
 8010b1e:	460c      	mov	r4, r1
  int32_t       ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8010b20:	f7ff ff0a 	bl	8010938 <netif_check>
  if (pnetif == NULL)
 8010b24:	b350      	cbz	r0, 8010b7c <net_state_manage_event+0x60>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 8010b26:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	2b07      	cmp	r3, #7
 8010b2e:	d828      	bhi.n	8010b82 <net_state_manage_event+0x66>
 8010b30:	e8df f003 	tbb	[pc, r3]
 8010b34:	100c0804 	.word	0x100c0804
 8010b38:	1c182014 	.word	0x1c182014
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	f7ff ff56 	bl	80109ee <net_state_initialized>
        ret = NET_ERROR_INVALID_STATE;
        break;
    }
  }
  return ret;
}
 8010b42:	bd10      	pop	{r4, pc}
        ret = net_state_starting(pnetif, event);
 8010b44:	4621      	mov	r1, r4
 8010b46:	f7ff ff77 	bl	8010a38 <net_state_starting>
        break;
 8010b4a:	e7fa      	b.n	8010b42 <net_state_manage_event+0x26>
        ret = net_state_ready(pnetif, event);
 8010b4c:	4621      	mov	r1, r4
 8010b4e:	f7ff ff7d 	bl	8010a4c <net_state_ready>
        break;
 8010b52:	e7f6      	b.n	8010b42 <net_state_manage_event+0x26>
        ret = net_state_connecting(pnetif, event);
 8010b54:	4621      	mov	r1, r4
 8010b56:	f7ff ff9b 	bl	8010a90 <net_state_connecting>
        break;
 8010b5a:	e7f2      	b.n	8010b42 <net_state_manage_event+0x26>
        ret = net_state_connected(pnetif, event);
 8010b5c:	4621      	mov	r1, r4
 8010b5e:	f7ff ffa5 	bl	8010aac <net_state_connected>
        break;
 8010b62:	e7ee      	b.n	8010b42 <net_state_manage_event+0x26>
        ret = net_state_disconnecting(pnetif, event);
 8010b64:	4621      	mov	r1, r4
 8010b66:	f7ff ffbb 	bl	8010ae0 <net_state_disconnecting>
        break;
 8010b6a:	e7ea      	b.n	8010b42 <net_state_manage_event+0x26>
        ret = net_state_connection_lost(pnetif, event);
 8010b6c:	4621      	mov	r1, r4
 8010b6e:	f7ff ffc1 	bl	8010af4 <net_state_connection_lost>
        break;
 8010b72:	e7e6      	b.n	8010b42 <net_state_manage_event+0x26>
        ret = net_state_stopping(pnetif, event);
 8010b74:	4621      	mov	r1, r4
 8010b76:	f7ff ffc7 	bl	8010b08 <net_state_stopping>
        break;
 8010b7a:	e7e2      	b.n	8010b42 <net_state_manage_event+0x26>
    ret = NET_ERROR_PARAMETER;
 8010b7c:	f06f 0003 	mvn.w	r0, #3
 8010b80:	e7df      	b.n	8010b42 <net_state_manage_event+0x26>
    switch (pnetif->state)
 8010b82:	f06f 001b 	mvn.w	r0, #27
  return ret;
 8010b86:	e7dc      	b.n	8010b42 <net_state_manage_event+0x26>

08010b88 <castcontext>:
{
  /*cstat -MISRAC2012-Rule-11.5 */
  return (ES_WIFIObject_t *)context;
  /*cstat +MISRAC2012-Rule-11.5 */

}
 8010b88:	4770      	bx	lr

08010b8a <cast2sockaddr_in>:
{
  /*cstat -MISRAC2012-Rule-11.3 -MISRAC2012-Rule-11.8 */
  return (sockaddr_in_t *) addr;
  /*cstat +MISRAC2012-Rule-11.3 +MISRAC2012-Rule-11.8 */

}
 8010b8a:	4770      	bx	lr

08010b8c <es_wifi_socket>:
static int32_t es_wifi_socket(int32_t domain, int32_t type, int32_t protocol_in)
{
  int32_t ret = NET_OK;
  int32_t protocol = protocol_in;

  if (domain != NET_AF_INET)
 8010b8c:	2802      	cmp	r0, #2
 8010b8e:	d13b      	bne.n	8010c08 <es_wifi_socket+0x7c>
    ret = NET_ERROR_UNSUPPORTED;
  }
  else
  {
    /* currently only SOCK_DGRAM and SOCK_STREAM are supported */
    if ((type != (int32_t) NET_SOCK_STREAM) && (type != (int32_t) NET_SOCK_DGRAM))
 8010b90:	1e4b      	subs	r3, r1, #1
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	d83b      	bhi.n	8010c0e <es_wifi_socket+0x82>
      ret = NET_ERROR_UNSUPPORTED;
    }
    else
    {
      /* Only support PROT_IP/TCP/UDP/IPV4 are supported */
      if ((protocol != NET_IPPROTO_TCP) && (protocol != NET_IPPROTO_UDP))
 8010b96:	2a06      	cmp	r2, #6
 8010b98:	bf18      	it	ne
 8010b9a:	2a11      	cmpne	r2, #17
 8010b9c:	d004      	beq.n	8010ba8 <es_wifi_socket+0x1c>
      {
        if (type == (int32_t) NET_SOCK_STREAM)
 8010b9e:	2901      	cmp	r1, #1
 8010ba0:	d030      	beq.n	8010c04 <es_wifi_socket+0x78>
        {
          protocol = NET_IPPROTO_TCP;
        }
        /*cstat -MISRAC2012-Rule-14.3_a */
        else if (type == (int32_t) NET_SOCK_DGRAM)
 8010ba2:	2902      	cmp	r1, #2
 8010ba4:	d113      	bne.n	8010bce <es_wifi_socket+0x42>
          /*cstat +MISRAC2012-Rule-14.3_a */
        {
          protocol = NET_IPPROTO_UDP;
 8010ba6:	2211      	movs	r2, #17
 8010ba8:	2000      	movs	r0, #0

  if (ret == NET_OK)
  {
    ret = NET_ERROR_INVALID_SOCKET;

    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8010baa:	2803      	cmp	r0, #3
 8010bac:	dc32      	bgt.n	8010c14 <es_wifi_socket+0x88>
{
 8010bae:	b410      	push	{r4}
    {
      if (WifiChannel[i].status == WIFI_FREE_SOCKET)
 8010bb0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010bb4:	4c19      	ldr	r4, [pc, #100]	; (8010c1c <es_wifi_socket+0x90>)
 8010bb6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010bba:	785b      	ldrb	r3, [r3, #1]
 8010bbc:	b153      	cbz	r3, 8010bd4 <es_wifi_socket+0x48>
    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8010bbe:	3001      	adds	r0, #1
 8010bc0:	2803      	cmp	r0, #3
 8010bc2:	ddf5      	ble.n	8010bb0 <es_wifi_socket+0x24>
    ret = NET_ERROR_INVALID_SOCKET;
 8010bc4:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return ret;
}
 8010bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bcc:	4770      	bx	lr
          ret = NET_ERROR_UNSUPPORTED;
 8010bce:	f06f 0002 	mvn.w	r0, #2
 8010bd2:	4770      	bx	lr
        WifiChannel[i].status = WIFI_ALLOCATED_SOCKET;
 8010bd4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010bd8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010bdc:	2401      	movs	r4, #1
 8010bde:	705c      	strb	r4, [r3, #1]
        if (type == (int32_t) NET_SOCK_DGRAM)
 8010be0:	2902      	cmp	r1, #2
 8010be2:	d007      	beq.n	8010bf4 <es_wifi_socket+0x68>
        WifiChannel[i].protocol        = (uint8_t) protocol;
 8010be4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010be8:	4c0c      	ldr	r4, [pc, #48]	; (8010c1c <es_wifi_socket+0x90>)
 8010bea:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010bee:	709a      	strb	r2, [r3, #2]
        WifiChannel[i].type            = (uint8_t) type;
 8010bf0:	70d9      	strb	r1, [r3, #3]
        break;
 8010bf2:	e7e9      	b.n	8010bc8 <es_wifi_socket+0x3c>
          WifiChannel[i].status |= WIFI_SEND_OK | WIFI_RECV_OK;
 8010bf4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010bf8:	4c08      	ldr	r4, [pc, #32]	; (8010c1c <es_wifi_socket+0x90>)
 8010bfa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010bfe:	240d      	movs	r4, #13
 8010c00:	705c      	strb	r4, [r3, #1]
 8010c02:	e7ef      	b.n	8010be4 <es_wifi_socket+0x58>
          protocol = NET_IPPROTO_TCP;
 8010c04:	2206      	movs	r2, #6
 8010c06:	e7cf      	b.n	8010ba8 <es_wifi_socket+0x1c>
    ret = NET_ERROR_UNSUPPORTED;
 8010c08:	f06f 0002 	mvn.w	r0, #2
 8010c0c:	4770      	bx	lr
      ret = NET_ERROR_UNSUPPORTED;
 8010c0e:	f06f 0002 	mvn.w	r0, #2
  return ret;
 8010c12:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 8010c14:	f06f 0005 	mvn.w	r0, #5
}
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	2400c7a8 	.word	0x2400c7a8

08010c20 <es_wifi_bind>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
static int32_t es_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	4604      	mov	r4, r0
  int32_t ret;
  sockaddr_in_t *source;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8010c24:	2803      	cmp	r0, #3
 8010c26:	d826      	bhi.n	8010c76 <es_wifi_bind+0x56>
 8010c28:	4608      	mov	r0, r1
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    /* STREAM sockets cannot be bound after connection. */
    if ((WifiChannel [sock].status == WIFI_ALLOCATED_SOCKET)
 8010c2a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8010c2e:	4d18      	ldr	r5, [pc, #96]	; (8010c90 <es_wifi_bind+0x70>)
 8010c30:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8010c34:	785d      	ldrb	r5, [r3, #1]
 8010c36:	2d01      	cmp	r5, #1
 8010c38:	d00a      	beq.n	8010c50 <es_wifi_bind+0x30>
        || (((WifiChannel [sock].status & WIFI_ALLOCATED_SOCKET) != 0U)
 8010c3a:	f015 0f01 	tst.w	r5, #1
 8010c3e:	d01d      	beq.n	8010c7c <es_wifi_bind+0x5c>
            && ((uint8_t) WifiChannel [sock].type == (uint8_t) NET_SOCK_DGRAM)))
 8010c40:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8010c44:	4e12      	ldr	r6, [pc, #72]	; (8010c90 <es_wifi_bind+0x70>)
 8010c46:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8010c4a:	78db      	ldrb	r3, [r3, #3]
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	d118      	bne.n	8010c82 <es_wifi_bind+0x62>
    {
      if (addrlen == sizeof(sockaddr_in_t))
 8010c50:	2a10      	cmp	r2, #16
 8010c52:	d119      	bne.n	8010c88 <es_wifi_bind+0x68>
      {
        source = cast2sockaddr_in(addr);
 8010c54:	f7ff ff99 	bl	8010b8a <cast2sockaddr_in>
        WifiChannel [sock].localport = NET_NTOHS(source->sin_port);
 8010c58:	8841      	ldrh	r1, [r0, #2]
 8010c5a:	ba49      	rev16	r1, r1
 8010c5c:	4b0c      	ldr	r3, [pc, #48]	; (8010c90 <es_wifi_bind+0x70>)
 8010c5e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8010c62:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010c66:	8091      	strh	r1, [r2, #4]
        WifiChannel [sock].localaddress = source->sin_addr.s_addr;
 8010c68:	6841      	ldr	r1, [r0, #4]
 8010c6a:	6091      	str	r1, [r2, #8]
        WifiChannel [sock].status |= WIFI_BIND_SOCKET;
 8010c6c:	f045 0502 	orr.w	r5, r5, #2
 8010c70:	7055      	strb	r5, [r2, #1]
        ret = NET_OK;
 8010c72:	2000      	movs	r0, #0
    {
      ret = NET_ERROR_INVALID_SOCKET;
    }
  }
  return ret;
}
 8010c74:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 8010c76:	f06f 0005 	mvn.w	r0, #5
 8010c7a:	e7fb      	b.n	8010c74 <es_wifi_bind+0x54>
      ret = NET_ERROR_INVALID_SOCKET;
 8010c7c:	f06f 0005 	mvn.w	r0, #5
 8010c80:	e7f8      	b.n	8010c74 <es_wifi_bind+0x54>
 8010c82:	f06f 0005 	mvn.w	r0, #5
 8010c86:	e7f5      	b.n	8010c74 <es_wifi_bind+0x54>
        ret = NET_ERROR_PARAMETER;
 8010c88:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8010c8c:	e7f2      	b.n	8010c74 <es_wifi_bind+0x54>
 8010c8e:	bf00      	nop
 8010c90:	2400c7a8 	.word	0x2400c7a8

08010c94 <es_wifi_shutdown>:
  * @retval socket status
  */
static int32_t es_wifi_shutdown(int32_t sock, int32_t mode)
{
  int32_t       ret;
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8010c94:	2803      	cmp	r0, #3
 8010c96:	d82f      	bhi.n	8010cf8 <es_wifi_shutdown+0x64>
  {
    ret =  NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    if ((WifiChannel[sock].status &  WIFI_CONNECTED_SOCKET) != 0U)
 8010c98:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010c9c:	4a19      	ldr	r2, [pc, #100]	; (8010d04 <es_wifi_shutdown+0x70>)
 8010c9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010ca2:	785b      	ldrb	r3, [r3, #1]
 8010ca4:	f013 0f10 	tst.w	r3, #16
 8010ca8:	d029      	beq.n	8010cfe <es_wifi_shutdown+0x6a>
{
 8010caa:	b410      	push	{r4}
    {
      if (mode == NET_SHUTDOWN_R)
 8010cac:	b939      	cbnz	r1, 8010cbe <es_wifi_shutdown+0x2a>
      {
        WifiChannel[sock].status &=  ~WIFI_RECV_OK;
 8010cae:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010cb2:	4c14      	ldr	r4, [pc, #80]	; (8010d04 <es_wifi_shutdown+0x70>)
 8010cb4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8010cb8:	f023 0308 	bic.w	r3, r3, #8
 8010cbc:	7053      	strb	r3, [r2, #1]
      }
      if (mode == NET_SHUTDOWN_W)
 8010cbe:	2901      	cmp	r1, #1
 8010cc0:	d005      	beq.n	8010cce <es_wifi_shutdown+0x3a>
      {
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
      }
      if (mode == NET_SHUTDOWN_RW)
 8010cc2:	2902      	cmp	r1, #2
 8010cc4:	d00d      	beq.n	8010ce2 <es_wifi_shutdown+0x4e>
      {
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
      }
    }
    ret = NET_OK;
 8010cc6:	2000      	movs	r0, #0
  }
  return ret;
}
 8010cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ccc:	4770      	bx	lr
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
 8010cce:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010cd2:	4a0c      	ldr	r2, [pc, #48]	; (8010d04 <es_wifi_shutdown+0x70>)
 8010cd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010cd8:	785a      	ldrb	r2, [r3, #1]
 8010cda:	f022 0204 	bic.w	r2, r2, #4
 8010cde:	705a      	strb	r2, [r3, #1]
 8010ce0:	e7ef      	b.n	8010cc2 <es_wifi_shutdown+0x2e>
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
 8010ce2:	4b08      	ldr	r3, [pc, #32]	; (8010d04 <es_wifi_shutdown+0x70>)
 8010ce4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010ce8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010cec:	7853      	ldrb	r3, [r2, #1]
 8010cee:	f023 030c 	bic.w	r3, r3, #12
 8010cf2:	7053      	strb	r3, [r2, #1]
    ret = NET_OK;
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	e7e7      	b.n	8010cc8 <es_wifi_shutdown+0x34>
    ret =  NET_ERROR_INVALID_SOCKET;
 8010cf8:	f06f 0005 	mvn.w	r0, #5
 8010cfc:	4770      	bx	lr
    ret = NET_OK;
 8010cfe:	2000      	movs	r0, #0
}
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop
 8010d04:	2400c7a8 	.word	0x2400c7a8

08010d08 <conv_to_net_security>:


static uint32_t conv_to_net_security(ES_WIFI_SecurityType_t     sec)
{
  uint32_t ret;
  switch (sec)
 8010d08:	2805      	cmp	r0, #5
 8010d0a:	d80e      	bhi.n	8010d2a <conv_to_net_security+0x22>
 8010d0c:	e8df f000 	tbb	[pc, r0]
 8010d10:	07051003 	.word	0x07051003
 8010d14:	0b09      	.short	0x0b09
 8010d16:	2000      	movs	r0, #0
 8010d18:	4770      	bx	lr
      break;
    case ES_WIFI_SEC_WEP:
      ret = NET_WIFI_SM_WEP_PSK;
      break;
    case ES_WIFI_SEC_WPA:
      ret = NET_WIFI_SM_WPA_MIXED_PSK;
 8010d1a:	4806      	ldr	r0, [pc, #24]	; (8010d34 <conv_to_net_security+0x2c>)
      break;
 8010d1c:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8010d1e:	4806      	ldr	r0, [pc, #24]	; (8010d38 <conv_to_net_security+0x30>)
      break;
 8010d20:	4770      	bx	lr
    case ES_WIFI_SEC_WPA_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8010d22:	4805      	ldr	r0, [pc, #20]	; (8010d38 <conv_to_net_security+0x30>)
      break;
 8010d24:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2_TKIP:
      ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 8010d26:	4805      	ldr	r0, [pc, #20]	; (8010d3c <conv_to_net_security+0x34>)
      break;
 8010d28:	4770      	bx	lr
    default :
      ret = NET_WIFI_SM_UNKNOWN;
 8010d2a:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 8010d2e:	4770      	bx	lr
      ret = NET_WIFI_SM_WEP_PSK;
 8010d30:	2001      	movs	r0, #1

  }
  return ret;
}
 8010d32:	4770      	bx	lr
 8010d34:	00200006 	.word	0x00200006
 8010d38:	00400006 	.word	0x00400006
 8010d3c:	00400002 	.word	0x00400002

08010d40 <es_wifi_setsockopt>:
  bool          *optbool = (bool *)optvalue;
  /*cstat +MISRAC2012-Rule-11.8 +MISRAC2012-Rule-11.5  */

  (void) level;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8010d40:	2803      	cmp	r0, #3
 8010d42:	d83e      	bhi.n	8010dc2 <es_wifi_setsockopt+0x82>
  {
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    switch (optname)
 8010d44:	f241 0105 	movw	r1, #4101	; 0x1005
 8010d48:	428a      	cmp	r2, r1
 8010d4a:	d013      	beq.n	8010d74 <es_wifi_setsockopt+0x34>
 8010d4c:	dc05      	bgt.n	8010d5a <es_wifi_setsockopt+0x1a>
 8010d4e:	2a04      	cmp	r2, #4
 8010d50:	d028      	beq.n	8010da4 <es_wifi_setsockopt+0x64>
 8010d52:	2a0e      	cmp	r2, #14
 8010d54:	d138      	bne.n	8010dc8 <es_wifi_setsockopt+0x88>
        }
        break;

      case  NET_SO_TLS_CERT_PROF:
        NET_DBG_ERROR("Ignore this option because it embedded inside Inventek Wifi module and can not be changed\n");
        ret =  NET_OK;
 8010d56:	2000      	movs	r0, #0
 8010d58:	4770      	bx	lr
    switch (optname)
 8010d5a:	f241 0106 	movw	r1, #4102	; 0x1006
 8010d5e:	428a      	cmp	r2, r1
 8010d60:	d135      	bne.n	8010dce <es_wifi_setsockopt+0x8e>
        WifiChannel[sock].recvtimeout = * optint32;
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010d68:	4b1e      	ldr	r3, [pc, #120]	; (8010de4 <es_wifi_setsockopt+0xa4>)
 8010d6a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010d6e:	6182      	str	r2, [r0, #24]
        ret = NET_OK;
 8010d70:	2000      	movs	r0, #0
        break;
 8010d72:	4770      	bx	lr
        WifiChannel[sock].sendtimeout = *optint32;
 8010d74:	6819      	ldr	r1, [r3, #0]
 8010d76:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010d7a:	4a1a      	ldr	r2, [pc, #104]	; (8010de4 <es_wifi_setsockopt+0xa4>)
 8010d7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010d80:	6159      	str	r1, [r3, #20]
        if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_UDP)
 8010d82:	789b      	ldrb	r3, [r3, #2]
 8010d84:	2b11      	cmp	r3, #17
 8010d86:	d001      	beq.n	8010d8c <es_wifi_setsockopt+0x4c>
        ret = NET_OK;
 8010d88:	2000      	movs	r0, #0
 8010d8a:	4770      	bx	lr
          if (WifiChannel[sock].sendtimeout > NET_UDP_MAX_SEND_BLOCK_TO)
 8010d8c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010d90:	dd20      	ble.n	8010dd4 <es_wifi_setsockopt+0x94>
            WifiChannel[sock].sendtimeout = NET_UDP_MAX_SEND_BLOCK_TO;
 8010d92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010d96:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d9e:	6143      	str	r3, [r0, #20]
        ret = NET_OK;
 8010da0:	2000      	movs	r0, #0
 8010da2:	4770      	bx	lr
        if (sizeof(bool) != optlen)
 8010da4:	9a00      	ldr	r2, [sp, #0]
 8010da6:	2a01      	cmp	r2, #1
 8010da8:	d116      	bne.n	8010dd8 <es_wifi_setsockopt+0x98>
          if (*optbool == false)
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	b9bb      	cbnz	r3, 8010dde <es_wifi_setsockopt+0x9e>
            WifiChannel[sock].sendtimeout = 1;
 8010dae:	4b0d      	ldr	r3, [pc, #52]	; (8010de4 <es_wifi_setsockopt+0xa4>)
 8010db0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010db4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010db8:	2101      	movs	r1, #1
 8010dba:	6151      	str	r1, [r2, #20]
            WifiChannel[sock].recvtimeout = 1;
 8010dbc:	6191      	str	r1, [r2, #24]
          ret =  NET_OK;
 8010dbe:	2000      	movs	r0, #0
 8010dc0:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 8010dc2:	f06f 0005 	mvn.w	r0, #5
 8010dc6:	4770      	bx	lr
    switch (optname)
 8010dc8:	f06f 0003 	mvn.w	r0, #3
 8010dcc:	4770      	bx	lr
 8010dce:	f06f 0003 	mvn.w	r0, #3
 8010dd2:	4770      	bx	lr
        ret = NET_OK;
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	4770      	bx	lr
          ret = NET_ERROR_PARAMETER;
 8010dd8:	f06f 0003 	mvn.w	r0, #3
 8010ddc:	4770      	bx	lr
          ret =  NET_OK;
 8010dde:	2000      	movs	r0, #0
      default :
        break;
    }
  }
  return ret;
}
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	2400c7a8 	.word	0x2400c7a8

08010de8 <es_wifi_getsockopt>:
  (void) optname;
  (void) optvalue;
  (void) optlen;

  return NET_ERROR_UNSUPPORTED;
}
 8010de8:	f06f 0002 	mvn.w	r0, #2
 8010dec:	4770      	bx	lr

08010dee <es_wifi_scan>:
{
  (void) mode;
  (void) pnetif;
  (void) ssid;
  return 0;
}
 8010dee:	2000      	movs	r0, #0
 8010df0:	4770      	bx	lr

08010df2 <es_wifi_if_deinit>:
{
 8010df2:	b538      	push	{r3, r4, r5, lr}
 8010df4:	4604      	mov	r4, r0
  NET_FREE(pnetif->pdrv->extension.wifi);
 8010df6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8010dfa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8010dfc:	f00f fd16 	bl	802082c <free>
  pnetif->pdrv->extension.wifi = NULL;
 8010e00:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010e04:	2500      	movs	r5, #0
 8010e06:	675d      	str	r5, [r3, #116]	; 0x74
  NET_FREE(pnetif->pdrv);
 8010e08:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8010e0c:	f00f fd0e 	bl	802082c <free>
  pnetif->pdrv = NULL;
 8010e10:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
 8010e14:	4628      	mov	r0, r5
 8010e16:	bd38      	pop	{r3, r4, r5, pc}

08010e18 <es_wifi_if_init>:
{
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	4605      	mov	r5, r0
  net_if_drv_t *p = NET_MALLOC(sizeof(net_if_drv_t));
 8010e1c:	2084      	movs	r0, #132	; 0x84
 8010e1e:	f00f fcfd 	bl	802081c <malloc>
  if (p != NULL)
 8010e22:	2800      	cmp	r0, #0
 8010e24:	d04c      	beq.n	8010ec0 <es_wifi_if_init+0xa8>
 8010e26:	4604      	mov	r4, r0
    p->if_class = NET_INTERFACE_CLASS_WIFI;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	7003      	strb	r3, [r0, #0]
    p->if_init = es_wifi_if_init;
 8010e2c:	4b26      	ldr	r3, [pc, #152]	; (8010ec8 <es_wifi_if_init+0xb0>)
 8010e2e:	6043      	str	r3, [r0, #4]
    p->if_deinit = es_wifi_if_deinit;
 8010e30:	4b26      	ldr	r3, [pc, #152]	; (8010ecc <es_wifi_if_init+0xb4>)
 8010e32:	6083      	str	r3, [r0, #8]
    p->if_start = es_wifi_if_start;
 8010e34:	4b26      	ldr	r3, [pc, #152]	; (8010ed0 <es_wifi_if_init+0xb8>)
 8010e36:	60c3      	str	r3, [r0, #12]
    p->if_stop = es_wifi_if_stop;
 8010e38:	4b26      	ldr	r3, [pc, #152]	; (8010ed4 <es_wifi_if_init+0xbc>)
 8010e3a:	6103      	str	r3, [r0, #16]
    p->if_connect = es_wifi_if_connect;
 8010e3c:	4b26      	ldr	r3, [pc, #152]	; (8010ed8 <es_wifi_if_init+0xc0>)
 8010e3e:	6183      	str	r3, [r0, #24]
    p->if_disconnect = es_wifi_if_disconnect;
 8010e40:	4b26      	ldr	r3, [pc, #152]	; (8010edc <es_wifi_if_init+0xc4>)
 8010e42:	61c3      	str	r3, [r0, #28]
    p->psocket = es_wifi_socket;
 8010e44:	4b26      	ldr	r3, [pc, #152]	; (8010ee0 <es_wifi_if_init+0xc8>)
 8010e46:	6303      	str	r3, [r0, #48]	; 0x30
    p->pbind = es_wifi_bind;
 8010e48:	4b26      	ldr	r3, [pc, #152]	; (8010ee4 <es_wifi_if_init+0xcc>)
 8010e4a:	6343      	str	r3, [r0, #52]	; 0x34
    p->plisten = es_wifi_listen;
 8010e4c:	4b26      	ldr	r3, [pc, #152]	; (8010ee8 <es_wifi_if_init+0xd0>)
 8010e4e:	6383      	str	r3, [r0, #56]	; 0x38
    p->paccept = es_wifi_accept;
 8010e50:	4b26      	ldr	r3, [pc, #152]	; (8010eec <es_wifi_if_init+0xd4>)
 8010e52:	63c3      	str	r3, [r0, #60]	; 0x3c
    p->pconnect = es_wifi_connect;
 8010e54:	4b26      	ldr	r3, [pc, #152]	; (8010ef0 <es_wifi_if_init+0xd8>)
 8010e56:	6403      	str	r3, [r0, #64]	; 0x40
    p->psend = es_wifi_send;
 8010e58:	4b26      	ldr	r3, [pc, #152]	; (8010ef4 <es_wifi_if_init+0xdc>)
 8010e5a:	6443      	str	r3, [r0, #68]	; 0x44
    p->precv = es_wifi_recv;
 8010e5c:	4b26      	ldr	r3, [pc, #152]	; (8010ef8 <es_wifi_if_init+0xe0>)
 8010e5e:	6483      	str	r3, [r0, #72]	; 0x48
    p->psendto = es_wifi_sendto;
 8010e60:	4b26      	ldr	r3, [pc, #152]	; (8010efc <es_wifi_if_init+0xe4>)
 8010e62:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->precvfrom = es_wifi_recvfrom;
 8010e64:	4b26      	ldr	r3, [pc, #152]	; (8010f00 <es_wifi_if_init+0xe8>)
 8010e66:	6503      	str	r3, [r0, #80]	; 0x50
    p->psetsockopt = es_wifi_setsockopt;
 8010e68:	4b26      	ldr	r3, [pc, #152]	; (8010f04 <es_wifi_if_init+0xec>)
 8010e6a:	6543      	str	r3, [r0, #84]	; 0x54
    p->pgetsockopt = es_wifi_getsockopt;
 8010e6c:	4b26      	ldr	r3, [pc, #152]	; (8010f08 <es_wifi_if_init+0xf0>)
 8010e6e:	6583      	str	r3, [r0, #88]	; 0x58
    p->pgetsockname = es_wifi_getsockname;
 8010e70:	4b26      	ldr	r3, [pc, #152]	; (8010f0c <es_wifi_if_init+0xf4>)
 8010e72:	65c3      	str	r3, [r0, #92]	; 0x5c
    p->pgetpeername = es_wifi_getpeername;
 8010e74:	4b26      	ldr	r3, [pc, #152]	; (8010f10 <es_wifi_if_init+0xf8>)
 8010e76:	6603      	str	r3, [r0, #96]	; 0x60
    p->pclose = es_wifi_close;
 8010e78:	4b26      	ldr	r3, [pc, #152]	; (8010f14 <es_wifi_if_init+0xfc>)
 8010e7a:	6643      	str	r3, [r0, #100]	; 0x64
    p->pshutdown = es_wifi_shutdown;
 8010e7c:	4b26      	ldr	r3, [pc, #152]	; (8010f18 <es_wifi_if_init+0x100>)
 8010e7e:	6683      	str	r3, [r0, #104]	; 0x68
    p->pgethostbyname = es_wifi_gethostbyname;
 8010e80:	4b26      	ldr	r3, [pc, #152]	; (8010f1c <es_wifi_if_init+0x104>)
 8010e82:	66c3      	str	r3, [r0, #108]	; 0x6c
    p->pping = es_wifi_ping;
 8010e84:	4b26      	ldr	r3, [pc, #152]	; (8010f20 <es_wifi_if_init+0x108>)
 8010e86:	6703      	str	r3, [r0, #112]	; 0x70
    pextwifi = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 8010e88:	2024      	movs	r0, #36	; 0x24
 8010e8a:	f00f fcc7 	bl	802081c <malloc>
    if (NULL == pextwifi)
 8010e8e:	4606      	mov	r6, r0
 8010e90:	b180      	cbz	r0, 8010eb4 <es_wifi_if_init+0x9c>
      (void) memset(pextwifi, 0, sizeof(net_if_wifi_class_extension_t));
 8010e92:	2224      	movs	r2, #36	; 0x24
 8010e94:	2100      	movs	r1, #0
 8010e96:	f00f fcef 	bl	8020878 <memset>
      pnetif->pdrv = p;
 8010e9a:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
      p->extension.wifi = pextwifi;
 8010e9e:	6766      	str	r6, [r4, #116]	; 0x74
      p->extension.wifi->scan = es_wifi_scan;
 8010ea0:	4b20      	ldr	r3, [pc, #128]	; (8010f24 <es_wifi_if_init+0x10c>)
 8010ea2:	6033      	str	r3, [r6, #0]
      p->extension.wifi->get_scan_results = es_wifi_get_scan_results;
 8010ea4:	4b20      	ldr	r3, [pc, #128]	; (8010f28 <es_wifi_if_init+0x110>)
 8010ea6:	6073      	str	r3, [r6, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8010ea8:	2106      	movs	r1, #6
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f7ff fe36 	bl	8010b1c <net_state_manage_event>
      ret = NET_OK;
 8010eb0:	2000      	movs	r0, #0
}
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
      NET_FREE(p);
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f00f fcb9 	bl	802082c <free>
      ret = NET_ERROR_NO_MEMORY;
 8010eba:	f06f 0007 	mvn.w	r0, #7
 8010ebe:	e7f8      	b.n	8010eb2 <es_wifi_if_init+0x9a>
    ret = NET_ERROR_NO_MEMORY;
 8010ec0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8010ec4:	e7f5      	b.n	8010eb2 <es_wifi_if_init+0x9a>
 8010ec6:	bf00      	nop
 8010ec8:	08010e19 	.word	0x08010e19
 8010ecc:	08010df3 	.word	0x08010df3
 8010ed0:	080118cd 	.word	0x080118cd
 8010ed4:	08010f2d 	.word	0x08010f2d
 8010ed8:	08011add 	.word	0x08011add
 8010edc:	080118ad 	.word	0x080118ad
 8010ee0:	08010b8d 	.word	0x08010b8d
 8010ee4:	08010c21 	.word	0x08010c21
 8010ee8:	08011851 	.word	0x08011851
 8010eec:	080117cd 	.word	0x080117cd
 8010ef0:	08011311 	.word	0x08011311
 8010ef4:	08011739 	.word	0x08011739
 8010ef8:	080116a1 	.word	0x080116a1
 8010efc:	080113c9 	.word	0x080113c9
 8010f00:	0801154d 	.word	0x0801154d
 8010f04:	08010d41 	.word	0x08010d41
 8010f08:	08010de9 	.word	0x08010de9
 8010f0c:	08011225 	.word	0x08011225
 8010f10:	08011181 	.word	0x08011181
 8010f14:	0801108d 	.word	0x0801108d
 8010f18:	08010c95 	.word	0x08010c95
 8010f1c:	0801103d 	.word	0x0801103d
 8010f20:	08011005 	.word	0x08011005
 8010f24:	08010def 	.word	0x08010def
 8010f28:	08010f39 	.word	0x08010f39

08010f2c <es_wifi_if_stop>:
{
 8010f2c:	b508      	push	{r3, lr}
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8010f2e:	2106      	movs	r1, #6
 8010f30:	f7ff fdf4 	bl	8010b1c <net_state_manage_event>
}
 8010f34:	2000      	movs	r0, #0
 8010f36:	bd08      	pop	{r3, pc}

08010f38 <es_wifi_get_scan_results>:

static  int32_t es_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 8010f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f3c:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8010f40:	4688      	mov	r8, r1
 8010f42:	4614      	mov	r4, r2
  int32_t ret;
  ES_WIFI_APs_t APs;
  ES_WIFI_AP_t *AP = &APs.AP[0];

  if (ES_WIFI_STATUS_OK == ES_WIFI_ListAccessPoints(castcontext(pnetif->pdrv->context), &APs))
 8010f44:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8010f48:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010f4a:	f7ff fe1d 	bl	8010b88 <castcontext>
 8010f4e:	a901      	add	r1, sp, #4
 8010f50:	f7f5 fe0e 	bl	8006b70 <ES_WIFI_ListAccessPoints>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d14f      	bne.n	8010ff8 <es_wifi_get_scan_results+0xc0>
  {
    if (APs.nbr > number)
 8010f58:	f89d 3374 	ldrb.w	r3, [sp, #884]	; 0x374
 8010f5c:	42a3      	cmp	r3, r4
 8010f5e:	d901      	bls.n	8010f64 <es_wifi_get_scan_results+0x2c>
    {
      APs.nbr = number;
 8010f60:	f88d 4374 	strb.w	r4, [sp, #884]	; 0x374
{
 8010f64:	2600      	movs	r6, #0
 8010f66:	ac01      	add	r4, sp, #4
 8010f68:	e03e      	b.n	8010fe8 <es_wifi_get_scan_results+0xb0>
    }
    for (uint32_t i = 0; i < APs.nbr ; i++)
    {
      (void) memset((void *) &results[i], 0, sizeof(net_wifi_scan_bss_t));
 8010f6a:	2234      	movs	r2, #52	; 0x34
 8010f6c:	fb02 f706 	mul.w	r7, r2, r6
 8010f70:	eb08 0507 	add.w	r5, r8, r7
 8010f74:	2100      	movs	r1, #0
 8010f76:	4628      	mov	r0, r5
 8010f78:	f00f fc7e 	bl	8020878 <memset>
      (void) memcpy(results[i].ssid.value, AP->SSID, NET_WIFI_MAX_SSID_SIZE);
 8010f7c:	6821      	ldr	r1, [r4, #0]
 8010f7e:	6860      	ldr	r0, [r4, #4]
 8010f80:	68a2      	ldr	r2, [r4, #8]
 8010f82:	68e3      	ldr	r3, [r4, #12]
 8010f84:	f8c5 1001 	str.w	r1, [r5, #1]
 8010f88:	f8c5 0005 	str.w	r0, [r5, #5]
 8010f8c:	f8c5 2009 	str.w	r2, [r5, #9]
 8010f90:	f8c5 300d 	str.w	r3, [r5, #13]
 8010f94:	6921      	ldr	r1, [r4, #16]
 8010f96:	6960      	ldr	r0, [r4, #20]
 8010f98:	69a2      	ldr	r2, [r4, #24]
 8010f9a:	69e3      	ldr	r3, [r4, #28]
 8010f9c:	f8c5 1011 	str.w	r1, [r5, #17]
 8010fa0:	f8c5 0015 	str.w	r0, [r5, #21]
 8010fa4:	f8c5 2019 	str.w	r2, [r5, #25]
 8010fa8:	f8c5 301d 	str.w	r3, [r5, #29]
      results[i].ssid.length = (uint8_t) strlen((char_t *) AP->SSID);
 8010fac:	4620      	mov	r0, r4
 8010fae:	f7ef f9a9 	bl	8000304 <strlen>
 8010fb2:	f808 0007 	strb.w	r0, [r8, r7]
      results[i].security = conv_to_net_security(AP->Security);
 8010fb6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8010fba:	f7ff fea5 	bl	8010d08 <conv_to_net_security>
 8010fbe:	62a8      	str	r0, [r5, #40]	; 0x28
      (void)  memcpy(&results[i].bssid, AP->MAC, NET_WIFI_MAC_ADDRESS_SIZE);
 8010fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fc2:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
 8010fc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8010fc8:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
      results[i].rssi = (int8_t)AP->RSSI;
 8010fcc:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 8010fd0:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      results[i].channel = AP->Channel;
 8010fd4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8010fd8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      (void) memcpy(results[i].country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 8010fdc:	4b08      	ldr	r3, [pc, #32]	; (8011000 <es_wifi_get_scan_results+0xc8>)
 8010fde:	6818      	ldr	r0, [r3, #0]
 8010fe0:	f8c5 002d 	str.w	r0, [r5, #45]	; 0x2d
      AP++;
 8010fe4:	342c      	adds	r4, #44	; 0x2c
    for (uint32_t i = 0; i < APs.nbr ; i++)
 8010fe6:	3601      	adds	r6, #1
 8010fe8:	f89d 0374 	ldrb.w	r0, [sp, #884]	; 0x374
 8010fec:	42b0      	cmp	r0, r6
 8010fee:	d8bc      	bhi.n	8010f6a <es_wifi_get_scan_results+0x32>
  else
  {
    ret = NET_ERROR_NO_CONNECTION;
  }
  return ret;
}
 8010ff0:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 8010ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8010ff8:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8010ffc:	e7f8      	b.n	8010ff0 <es_wifi_get_scan_results+0xb8>
 8010ffe:	bf00      	nop
 8011000:	08023638 	.word	0x08023638

08011004 <es_wifi_ping>:
{
 8011004:	b530      	push	{r4, r5, lr}
 8011006:	b085      	sub	sp, #20
 8011008:	4684      	mov	ip, r0
 801100a:	4614      	mov	r4, r2
 801100c:	461d      	mov	r5, r3
  (void) memcpy(ipaddr, &addr->sa_data[2], 6);
 801100e:	6848      	ldr	r0, [r1, #4]
 8011010:	9002      	str	r0, [sp, #8]
 8011012:	890b      	ldrh	r3, [r1, #8]
 8011014:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (ES_WIFI_STATUS_OK == ES_WIFI_Ping(castcontext(pnetif->pdrv->context), ipaddr, (uint16_t) count, (uint16_t) delay,
 8011018:	f8dc 30ec 	ldr.w	r3, [ip, #236]	; 0xec
 801101c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801101e:	f7ff fdb3 	bl	8010b88 <castcontext>
 8011022:	9b08      	ldr	r3, [sp, #32]
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	b2ab      	uxth	r3, r5
 8011028:	b2a2      	uxth	r2, r4
 801102a:	a902      	add	r1, sp, #8
 801102c:	f7f5 ff4a 	bl	8006ec4 <ES_WIFI_Ping>
 8011030:	b908      	cbnz	r0, 8011036 <es_wifi_ping+0x32>
}
 8011032:	b005      	add	sp, #20
 8011034:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8011036:	f06f 0004 	mvn.w	r0, #4
  return ret;
 801103a:	e7fa      	b.n	8011032 <es_wifi_ping+0x2e>

0801103c <es_wifi_gethostbyname>:
  if (addr->sa_len < sizeof(sockaddr_in_t))
 801103c:	780b      	ldrb	r3, [r1, #0]
 801103e:	2b0f      	cmp	r3, #15
 8011040:	d91e      	bls.n	8011080 <es_wifi_gethostbyname+0x44>
{
 8011042:	b530      	push	{r4, r5, lr}
 8011044:	b083      	sub	sp, #12
 8011046:	460c      	mov	r4, r1
 8011048:	4615      	mov	r5, r2
    if (ES_WIFI_STATUS_OK == ES_WIFI_DNS_LookUp(castcontext(pnetif->pdrv->context), (char_t *)name, ipaddr))
 801104a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 801104e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011050:	f7ff fd9a 	bl	8010b88 <castcontext>
 8011054:	466a      	mov	r2, sp
 8011056:	4629      	mov	r1, r5
 8011058:	f7f5 ff90 	bl	8006f7c <ES_WIFI_DNS_LookUp>
 801105c:	b998      	cbnz	r0, 8011086 <es_wifi_gethostbyname+0x4a>
      uint8_t len = addr->sa_len;
 801105e:	7825      	ldrb	r5, [r4, #0]
      sockaddr_in_t *saddr = cast2sockaddr_in(addr);
 8011060:	4620      	mov	r0, r4
 8011062:	f7ff fd92 	bl	8010b8a <cast2sockaddr_in>
 8011066:	4604      	mov	r4, r0
      (void)  memset(saddr, 0, len);
 8011068:	462a      	mov	r2, r5
 801106a:	2100      	movs	r1, #0
 801106c:	f00f fc04 	bl	8020878 <memset>
      saddr->sin_len = len;
 8011070:	7025      	strb	r5, [r4, #0]
      saddr->sin_family = NET_AF_INET;
 8011072:	2302      	movs	r3, #2
 8011074:	7063      	strb	r3, [r4, #1]
      (void) memcpy(&(saddr->sin_addr), ipaddr, 4);
 8011076:	9b00      	ldr	r3, [sp, #0]
 8011078:	6063      	str	r3, [r4, #4]
      ret = NET_OK;
 801107a:	2000      	movs	r0, #0
}
 801107c:	b003      	add	sp, #12
 801107e:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 8011080:	f06f 0003 	mvn.w	r0, #3
}
 8011084:	4770      	bx	lr
      ret = NET_ERROR_DNS_FAILURE;
 8011086:	f06f 0009 	mvn.w	r0, #9
  return ret;
 801108a:	e7f7      	b.n	801107c <es_wifi_gethostbyname+0x40>

0801108c <es_wifi_close>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 801108c:	2803      	cmp	r0, #3
 801108e:	d871      	bhi.n	8011174 <es_wifi_close+0xe8>
{
 8011090:	b510      	push	{r4, lr}
 8011092:	b086      	sub	sp, #24
 8011094:	4604      	mov	r4, r0
    if ((WifiChannel [sock].status & WIFI_STARTED_SERVER_SOCKET) != 0U)
 8011096:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801109a:	4a38      	ldr	r2, [pc, #224]	; (801117c <es_wifi_close+0xf0>)
 801109c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80110a0:	785b      	ldrb	r3, [r3, #1]
 80110a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80110a6:	d042      	beq.n	801112e <es_wifi_close+0xa2>
      if (isaclone)
 80110a8:	b301      	cbz	r1, 80110ec <es_wifi_close+0x60>
        if (ES_WIFI_CloseServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 80110aa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80110ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80110b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80110b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80110ba:	f7ff fd65 	bl	8010b88 <castcontext>
 80110be:	4621      	mov	r1, r4
 80110c0:	f7f6 f954 	bl	800736c <ES_WIFI_CloseServerConnection>
 80110c4:	b940      	cbnz	r0, 80110d8 <es_wifi_close+0x4c>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80110c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80110ca:	4b2c      	ldr	r3, [pc, #176]	; (801117c <es_wifi_close+0xf0>)
 80110cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80110d0:	2000      	movs	r0, #0
 80110d2:	7060      	strb	r0, [r4, #1]
}
 80110d4:	b006      	add	sp, #24
 80110d6:	bd10      	pop	{r4, pc}
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80110d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80110dc:	4b27      	ldr	r3, [pc, #156]	; (801117c <es_wifi_close+0xf0>)
 80110de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80110e2:	2200      	movs	r2, #0
 80110e4:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 80110e6:	f06f 0012 	mvn.w	r0, #18
 80110ea:	e7f3      	b.n	80110d4 <es_wifi_close+0x48>
        if (ES_WIFI_StopServerSingleConn(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 80110ec:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80110f0:	4a22      	ldr	r2, [pc, #136]	; (801117c <es_wifi_close+0xf0>)
 80110f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80110f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80110fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80110fe:	f7ff fd43 	bl	8010b88 <castcontext>
 8011102:	4621      	mov	r1, r4
 8011104:	f7f6 f956 	bl	80073b4 <ES_WIFI_StopServerSingleConn>
 8011108:	b938      	cbnz	r0, 801111a <es_wifi_close+0x8e>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 801110a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801110e:	4b1b      	ldr	r3, [pc, #108]	; (801117c <es_wifi_close+0xf0>)
 8011110:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011114:	2000      	movs	r0, #0
 8011116:	7060      	strb	r0, [r4, #1]
          ret = NET_OK;
 8011118:	e7dc      	b.n	80110d4 <es_wifi_close+0x48>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 801111a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801111e:	4b17      	ldr	r3, [pc, #92]	; (801117c <es_wifi_close+0xf0>)
 8011120:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011124:	2200      	movs	r2, #0
 8011126:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 8011128:	f06f 0012 	mvn.w	r0, #18
 801112c:	e7d2      	b.n	80110d4 <es_wifi_close+0x48>
      conn.Number = (uint8_t) sock;
 801112e:	f88d 0006 	strb.w	r0, [sp, #6]
      if (ES_WIFI_StopClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn)
 8011132:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011136:	4a11      	ldr	r2, [pc, #68]	; (801117c <es_wifi_close+0xf0>)
 8011138:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011142:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011144:	f7ff fd20 	bl	8010b88 <castcontext>
 8011148:	a901      	add	r1, sp, #4
 801114a:	f7f5 ffd3 	bl	80070f4 <ES_WIFI_StopClientConnection>
 801114e:	b148      	cbz	r0, 8011164 <es_wifi_close+0xd8>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8011150:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011154:	4b09      	ldr	r3, [pc, #36]	; (801117c <es_wifi_close+0xf0>)
 8011156:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801115a:	2300      	movs	r3, #0
 801115c:	7063      	strb	r3, [r4, #1]
        ret = NET_ERROR_SOCKET_FAILURE;
 801115e:	f06f 0012 	mvn.w	r0, #18
 8011162:	e7b7      	b.n	80110d4 <es_wifi_close+0x48>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8011164:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011168:	4b04      	ldr	r3, [pc, #16]	; (801117c <es_wifi_close+0xf0>)
 801116a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801116e:	2000      	movs	r0, #0
 8011170:	7060      	strb	r0, [r4, #1]
        ret = NET_OK;
 8011172:	e7af      	b.n	80110d4 <es_wifi_close+0x48>
    ret = NET_ERROR_INVALID_SOCKET;
 8011174:	f06f 0005 	mvn.w	r0, #5
}
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop
 801117c:	2400c7a8 	.word	0x2400c7a8

08011180 <es_wifi_getpeername>:
  if (*namelen < sizeof(sockaddr_in_t))
 8011180:	6813      	ldr	r3, [r2, #0]
 8011182:	2b0f      	cmp	r3, #15
 8011184:	d943      	bls.n	801120e <es_wifi_getpeername+0x8e>
{
 8011186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118a:	b086      	sub	sp, #24
 801118c:	4604      	mov	r4, r0
 801118e:	460e      	mov	r6, r1
 8011190:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= (int32_t) ESWIFI_MAX_CHANNEL_NBR))
 8011192:	2803      	cmp	r0, #3
 8011194:	d83e      	bhi.n	8011214 <es_wifi_getpeername+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_PeerInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8011196:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8011220 <es_wifi_getpeername+0xa0>
 801119a:	0087      	lsls	r7, r0, #2
 801119c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80111a0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80111a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80111aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80111ac:	f7ff fcec 	bl	8010b88 <castcontext>
 80111b0:	443c      	add	r4, r7
 80111b2:	f10d 0312 	add.w	r3, sp, #18
 80111b6:	aa05      	add	r2, sp, #20
 80111b8:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 80111bc:	f7f6 fb26 	bl	800780c <ES_WIFI_PeerInfo>
 80111c0:	bb58      	cbnz	r0, 801121a <es_wifi_getpeername+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 80111c2:	2400      	movs	r4, #0
 80111c4:	9400      	str	r4, [sp, #0]
 80111c6:	9401      	str	r4, [sp, #4]
 80111c8:	9402      	str	r4, [sp, #8]
 80111ca:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 80111cc:	2302      	movs	r3, #2
 80111ce:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 80111d2:	9b05      	ldr	r3, [sp, #20]
 80111d4:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 80111d6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80111da:	ba5b      	rev16	r3, r3
 80111dc:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 80111e0:	2710      	movs	r7, #16
 80111e2:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 80111e6:	682a      	ldr	r2, [r5, #0]
 80111e8:	4621      	mov	r1, r4
 80111ea:	4630      	mov	r0, r6
 80111ec:	f00f fb44 	bl	8020878 <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 80111f0:	f89d 2000 	ldrb.w	r2, [sp]
 80111f4:	682b      	ldr	r3, [r5, #0]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	bf28      	it	cs
 80111fa:	461a      	movcs	r2, r3
 80111fc:	4669      	mov	r1, sp
 80111fe:	4630      	mov	r0, r6
 8011200:	f00f fb2c 	bl	802085c <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 8011204:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 8011206:	4620      	mov	r0, r4
}
 8011208:	b006      	add	sp, #24
 801120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 801120e:	f06f 0003 	mvn.w	r0, #3
}
 8011212:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 8011214:	f06f 0005 	mvn.w	r0, #5
 8011218:	e7f6      	b.n	8011208 <es_wifi_getpeername+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 801121a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 801121e:	e7f3      	b.n	8011208 <es_wifi_getpeername+0x88>
 8011220:	2400c7a8 	.word	0x2400c7a8

08011224 <es_wifi_getsockname>:
  if (*namelen < sizeof(sockaddr_in_t))
 8011224:	6813      	ldr	r3, [r2, #0]
 8011226:	2b0f      	cmp	r3, #15
 8011228:	d943      	bls.n	80112b2 <es_wifi_getsockname+0x8e>
{
 801122a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122e:	b086      	sub	sp, #24
 8011230:	4604      	mov	r4, r0
 8011232:	460e      	mov	r6, r1
 8011234:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011236:	2803      	cmp	r0, #3
 8011238:	d83e      	bhi.n	80112b8 <es_wifi_getsockname+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_SockInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801123a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80112c4 <es_wifi_getsockname+0xa0>
 801123e:	0087      	lsls	r7, r0, #2
 8011240:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011244:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801124a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801124e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011250:	f7ff fc9a 	bl	8010b88 <castcontext>
 8011254:	443c      	add	r4, r7
 8011256:	f10d 0312 	add.w	r3, sp, #18
 801125a:	aa05      	add	r2, sp, #20
 801125c:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 8011260:	f7f6 fa9a 	bl	8007798 <ES_WIFI_SockInfo>
 8011264:	bb58      	cbnz	r0, 80112be <es_wifi_getsockname+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 8011266:	2400      	movs	r4, #0
 8011268:	9400      	str	r4, [sp, #0]
 801126a:	9401      	str	r4, [sp, #4]
 801126c:	9402      	str	r4, [sp, #8]
 801126e:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 8011270:	2302      	movs	r3, #2
 8011272:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 8011276:	9b05      	ldr	r3, [sp, #20]
 8011278:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 801127a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801127e:	ba5b      	rev16	r3, r3
 8011280:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8011284:	2710      	movs	r7, #16
 8011286:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 801128a:	682a      	ldr	r2, [r5, #0]
 801128c:	4621      	mov	r1, r4
 801128e:	4630      	mov	r0, r6
 8011290:	f00f faf2 	bl	8020878 <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 8011294:	f89d 2000 	ldrb.w	r2, [sp]
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	429a      	cmp	r2, r3
 801129c:	bf28      	it	cs
 801129e:	461a      	movcs	r2, r3
 80112a0:	4669      	mov	r1, sp
 80112a2:	4630      	mov	r0, r6
 80112a4:	f00f fada 	bl	802085c <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 80112a8:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 80112aa:	4620      	mov	r0, r4
}
 80112ac:	b006      	add	sp, #24
 80112ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 80112b2:	f06f 0003 	mvn.w	r0, #3
}
 80112b6:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 80112b8:	f06f 0005 	mvn.w	r0, #5
 80112bc:	e7f6      	b.n	80112ac <es_wifi_getsockname+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 80112be:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80112c2:	e7f3      	b.n	80112ac <es_wifi_getsockname+0x88>
 80112c4:	2400c7a8 	.word	0x2400c7a8

080112c8 <check_connection_lost>:
{
 80112c8:	b510      	push	{r4, lr}
 80112ca:	4604      	mov	r4, r0
  if (n <= 0)
 80112cc:	2900      	cmp	r1, #0
 80112ce:	dd04      	ble.n	80112da <check_connection_lost+0x12>
    if (NET_STATE_CONNECTION_LOST == pnetif->state)
 80112d0:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 80112d4:	2b08      	cmp	r3, #8
 80112d6:	d014      	beq.n	8011302 <check_connection_lost+0x3a>
}
 80112d8:	bd10      	pop	{r4, pc}
    if (NET_STATE_CONNECTED == pnetif->state)
 80112da:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 80112de:	2b05      	cmp	r3, #5
 80112e0:	d1fa      	bne.n	80112d8 <check_connection_lost+0x10>
      if (ES_WIFI_IsConnected(castcontext(pnetif->pdrv->context)) == 0u)
 80112e2:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80112e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80112e8:	f7ff fc4e 	bl	8010b88 <castcontext>
 80112ec:	f7f5 fd18 	bl	8006d20 <ES_WIFI_IsConnected>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	d1f1      	bne.n	80112d8 <check_connection_lost+0x10>
        (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTION_LOST, NULL);
 80112f4:	2300      	movs	r3, #0
 80112f6:	2208      	movs	r2, #8
 80112f8:	4619      	mov	r1, r3
 80112fa:	4620      	mov	r0, r4
 80112fc:	f7ff fb40 	bl	8010980 <net_if_notify>
 8011300:	e7ea      	b.n	80112d8 <check_connection_lost+0x10>
      (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTED, NULL);
 8011302:	2300      	movs	r3, #0
 8011304:	2205      	movs	r2, #5
 8011306:	4619      	mov	r1, r3
 8011308:	f7ff fb3a 	bl	8010980 <net_if_notify>
}
 801130c:	e7e4      	b.n	80112d8 <check_connection_lost+0x10>
	...

08011310 <es_wifi_connect>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011310:	2803      	cmp	r0, #3
 8011312:	d854      	bhi.n	80113be <es_wifi_connect+0xae>
{
 8011314:	b510      	push	{r4, lr}
 8011316:	b086      	sub	sp, #24
 8011318:	4604      	mov	r4, r0
    if (addrlen == sizeof(sockaddr_in_t))
 801131a:	2a10      	cmp	r2, #16
 801131c:	d003      	beq.n	8011326 <es_wifi_connect+0x16>
      ret = NET_ERROR_PARAMETER;
 801131e:	f06f 0003 	mvn.w	r0, #3
}
 8011322:	b006      	add	sp, #24
 8011324:	bd10      	pop	{r4, pc}
      dest = cast2sockaddr_in(addr);
 8011326:	4608      	mov	r0, r1
 8011328:	f7ff fc2f 	bl	8010b8a <cast2sockaddr_in>
      conn.Number = (uint8_t) sock;
 801132c:	f88d 4006 	strb.w	r4, [sp, #6]
      conn.LocalPort = WifiChannel[sock].localport;
 8011330:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011334:	4a23      	ldr	r2, [pc, #140]	; (80113c4 <es_wifi_connect+0xb4>)
 8011336:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801133a:	889a      	ldrh	r2, [r3, #4]
 801133c:	f8ad 200a 	strh.w	r2, [sp, #10]
      conn.RemotePort = NET_NTOHS(dest->sin_port);
 8011340:	8842      	ldrh	r2, [r0, #2]
 8011342:	ba52      	rev16	r2, r2
 8011344:	f8ad 2008 	strh.w	r2, [sp, #8]
      NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 8011348:	79c2      	ldrb	r2, [r0, #7]
 801134a:	f88d 200f 	strb.w	r2, [sp, #15]
 801134e:	7982      	ldrb	r2, [r0, #6]
 8011350:	f88d 200e 	strb.w	r2, [sp, #14]
 8011354:	7942      	ldrb	r2, [r0, #5]
 8011356:	f88d 200d 	strb.w	r2, [sp, #13]
 801135a:	7902      	ldrb	r2, [r0, #4]
 801135c:	f88d 200c 	strb.w	r2, [sp, #12]
      switch (WifiChannel[sock].protocol)
 8011360:	789b      	ldrb	r3, [r3, #2]
 8011362:	2b11      	cmp	r3, #17
 8011364:	d022      	beq.n	80113ac <es_wifi_connect+0x9c>
 8011366:	2b24      	cmp	r3, #36	; 0x24
 8011368:	d023      	beq.n	80113b2 <es_wifi_connect+0xa2>
 801136a:	2b06      	cmp	r3, #6
 801136c:	d002      	beq.n	8011374 <es_wifi_connect+0x64>
          ret = NET_ERROR_PARAMETER;
 801136e:	f06f 0003 	mvn.w	r0, #3
 8011372:	e7d6      	b.n	8011322 <es_wifi_connect+0x12>
          conn.Type = ES_WIFI_TCP_CONNECTION;
 8011374:	2300      	movs	r3, #0
 8011376:	f88d 3004 	strb.w	r3, [sp, #4]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 801137a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801137e:	4a11      	ldr	r2, [pc, #68]	; (80113c4 <es_wifi_connect+0xb4>)
 8011380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011386:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801138a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801138c:	f7ff fbfc 	bl	8010b88 <castcontext>
 8011390:	a901      	add	r1, sp, #4
 8011392:	f7f5 fe17 	bl	8006fc4 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 8011396:	b978      	cbnz	r0, 80113b8 <es_wifi_connect+0xa8>
          WifiChannel[sock].status |= WIFI_CONNECTED_SOCKET_RW;
 8011398:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <es_wifi_connect+0xb4>)
 801139a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801139e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80113a2:	7853      	ldrb	r3, [r2, #1]
 80113a4:	f043 031c 	orr.w	r3, r3, #28
 80113a8:	7053      	strb	r3, [r2, #1]
 80113aa:	e7ba      	b.n	8011322 <es_wifi_connect+0x12>
      switch (WifiChannel[sock].protocol)
 80113ac:	f06f 0002 	mvn.w	r0, #2
 80113b0:	e7b7      	b.n	8011322 <es_wifi_connect+0x12>
 80113b2:	f06f 0002 	mvn.w	r0, #2
 80113b6:	e7b4      	b.n	8011322 <es_wifi_connect+0x12>
          ret = NET_ERROR_SOCKET_FAILURE;
 80113b8:	f06f 0012 	mvn.w	r0, #18
 80113bc:	e7b1      	b.n	8011322 <es_wifi_connect+0x12>
    ret = NET_ERROR_INVALID_SOCKET;
 80113be:	f06f 0005 	mvn.w	r0, #5
}
 80113c2:	4770      	bx	lr
 80113c4:	2400c7a8 	.word	0x2400c7a8

080113c8 <es_wifi_sendto>:
{
 80113c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113cc:	b08a      	sub	sp, #40	; 0x28
 80113ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
  if ((flags != 0) || (to->sa_family != (uint8_t) NET_AF_INET))
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f040 80aa 	bne.w	801152a <es_wifi_sendto+0x162>
 80113d6:	4604      	mov	r4, r0
 80113d8:	460e      	mov	r6, r1
 80113da:	4615      	mov	r5, r2
 80113dc:	787b      	ldrb	r3, [r7, #1]
 80113de:	2b02      	cmp	r3, #2
 80113e0:	f040 80a6 	bne.w	8011530 <es_wifi_sendto+0x168>
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80113e4:	2803      	cmp	r0, #3
 80113e6:	f200 80a6 	bhi.w	8011536 <es_wifi_sendto+0x16e>
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 80113ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80113ee:	4a56      	ldr	r2, [pc, #344]	; (8011548 <es_wifi_sendto+0x180>)
 80113f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80113f4:	789b      	ldrb	r3, [r3, #2]
 80113f6:	2b11      	cmp	r3, #17
 80113f8:	f040 80a0 	bne.w	801153c <es_wifi_sendto+0x174>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 80113fc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011404:	785b      	ldrb	r3, [r3, #1]
 8011406:	f013 0f04 	tst.w	r3, #4
 801140a:	f000 809a 	beq.w	8011542 <es_wifi_sendto+0x17a>
    if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 801140e:	f013 0f20 	tst.w	r3, #32
 8011412:	d102      	bne.n	801141a <es_wifi_sendto+0x52>
      if (tolen == sizeof(sockaddr_in_t))
 8011414:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011416:	2b10      	cmp	r3, #16
 8011418:	d04d      	beq.n	80114b6 <es_wifi_sendto+0xee>
      if (len > ES_WIFI_PAYLOAD_SIZE)
 801141a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 801141e:	dd01      	ble.n	8011424 <es_wifi_sendto+0x5c>
        len = ES_WIFI_PAYLOAD_SIZE;
 8011420:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
      sockaddr_in_t *saddr = cast2sockaddr_in(to);
 8011424:	4638      	mov	r0, r7
 8011426:	f7ff fbb0 	bl	8010b8a <cast2sockaddr_in>
      remoteaddr = NET_NTOHL(saddr->sin_addr.s_addr);
 801142a:	6843      	ldr	r3, [r0, #4]
 801142c:	0a1a      	lsrs	r2, r3, #8
 801142e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8011432:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8011436:	0219      	lsls	r1, r3, #8
 8011438:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 801143c:	430a      	orrs	r2, r1
 801143e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      uint32_t IPaddr = NET_NTOHL(remoteaddr);
 8011442:	b2db      	uxtb	r3, r3
 8011444:	0a11      	lsrs	r1, r2, #8
 8011446:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801144a:	430b      	orrs	r3, r1
 801144c:	0211      	lsls	r1, r2, #8
 801144e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8011452:	430b      	orrs	r3, r1
 8011454:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011458:	9305      	str	r3, [sp, #20]
      uint16_t Port = NET_NTOHS(saddr->sin_port);
 801145a:	8847      	ldrh	r7, [r0, #2]
 801145c:	ba7f      	rev16	r7, r7
 801145e:	b2bf      	uxth	r7, r7
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8011460:	eb04 0884 	add.w	r8, r4, r4, lsl #2
 8011464:	4b38      	ldr	r3, [pc, #224]	; (8011548 <es_wifi_sendto+0x180>)
 8011466:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801146a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801146e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011472:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011474:	f7ff fb88 	bl	8010b88 <castcontext>
                                                  (uint32_t) WifiChannel[sock].sendtimeout,
 8011478:	f8d8 3014 	ldr.w	r3, [r8, #20]
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801147c:	9703      	str	r7, [sp, #12]
 801147e:	aa05      	add	r2, sp, #20
 8011480:	9202      	str	r2, [sp, #8]
 8011482:	9301      	str	r3, [sp, #4]
 8011484:	f10d 0312 	add.w	r3, sp, #18
 8011488:	9300      	str	r3, [sp, #0]
 801148a:	b2ab      	uxth	r3, r5
 801148c:	4632      	mov	r2, r6
 801148e:	b2e1      	uxtb	r1, r4
 8011490:	f7f6 f80c 	bl	80074ac <ES_WIFI_SendDataTo>
 8011494:	2800      	cmp	r0, #0
 8011496:	d145      	bne.n	8011524 <es_wifi_sendto+0x15c>
        ret = (int32_t) SentDatalen;
 8011498:	f8bd 5012 	ldrh.w	r5, [sp, #18]
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 801149c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80114a0:	4829      	ldr	r0, [pc, #164]	; (8011548 <es_wifi_sendto+0x180>)
 80114a2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80114a6:	4629      	mov	r1, r5
 80114a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80114aa:	f7ff ff0d 	bl	80112c8 <check_connection_lost>
}
 80114ae:	4628      	mov	r0, r5
 80114b0:	b00a      	add	sp, #40	; 0x28
 80114b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dest = cast2sockaddr_in(to);
 80114b6:	4638      	mov	r0, r7
 80114b8:	f7ff fb67 	bl	8010b8a <cast2sockaddr_in>
        conn.Number = (uint8_t) sock;
 80114bc:	f88d 4016 	strb.w	r4, [sp, #22]
        conn.LocalPort = WifiChannel[sock].localport;
 80114c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80114c4:	4a20      	ldr	r2, [pc, #128]	; (8011548 <es_wifi_sendto+0x180>)
 80114c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80114ca:	889a      	ldrh	r2, [r3, #4]
 80114cc:	f8ad 201a 	strh.w	r2, [sp, #26]
        conn.RemotePort = NET_NTOHS(dest->sin_port);
 80114d0:	8842      	ldrh	r2, [r0, #2]
 80114d2:	ba52      	rev16	r2, r2
 80114d4:	f8ad 2018 	strh.w	r2, [sp, #24]
        NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 80114d8:	79c2      	ldrb	r2, [r0, #7]
 80114da:	f88d 201f 	strb.w	r2, [sp, #31]
 80114de:	7982      	ldrb	r2, [r0, #6]
 80114e0:	f88d 201e 	strb.w	r2, [sp, #30]
 80114e4:	7942      	ldrb	r2, [r0, #5]
 80114e6:	f88d 201d 	strb.w	r2, [sp, #29]
 80114ea:	7902      	ldrb	r2, [r0, #4]
 80114ec:	f88d 201c 	strb.w	r2, [sp, #28]
        conn.Type = ES_WIFI_UDP_CONNECTION;
 80114f0:	2201      	movs	r2, #1
 80114f2:	f88d 2014 	strb.w	r2, [sp, #20]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 80114f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80114fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80114fe:	f7ff fb43 	bl	8010b88 <castcontext>
 8011502:	a905      	add	r1, sp, #20
 8011504:	f7f5 fd5e 	bl	8006fc4 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 8011508:	b948      	cbnz	r0, 801151e <es_wifi_sendto+0x156>
          WifiChannel[sock].status |= WIFI_STARTED_CLIENT_SOCKET;
 801150a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801150e:	4a0e      	ldr	r2, [pc, #56]	; (8011548 <es_wifi_sendto+0x180>)
 8011510:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011514:	785a      	ldrb	r2, [r3, #1]
 8011516:	f042 0220 	orr.w	r2, r2, #32
 801151a:	705a      	strb	r2, [r3, #1]
    if (ret == NET_OK)
 801151c:	e77d      	b.n	801141a <es_wifi_sendto+0x52>
          ret = NET_ERROR_SOCKET_FAILURE;
 801151e:	f06f 0512 	mvn.w	r5, #18
 8011522:	e7c4      	b.n	80114ae <es_wifi_sendto+0xe6>
        ret = NET_ERROR_SOCKET_FAILURE;
 8011524:	f06f 0512 	mvn.w	r5, #18
 8011528:	e7b8      	b.n	801149c <es_wifi_sendto+0xd4>
    ret = NET_ERROR_UNSUPPORTED;
 801152a:	f06f 0502 	mvn.w	r5, #2
 801152e:	e7be      	b.n	80114ae <es_wifi_sendto+0xe6>
 8011530:	f06f 0502 	mvn.w	r5, #2
 8011534:	e7bb      	b.n	80114ae <es_wifi_sendto+0xe6>
    ret = NET_ERROR_INVALID_SOCKET;
 8011536:	f06f 0505 	mvn.w	r5, #5
 801153a:	e7b8      	b.n	80114ae <es_wifi_sendto+0xe6>
    ret = NET_ERROR_SOCKET_FAILURE;
 801153c:	f06f 0512 	mvn.w	r5, #18
 8011540:	e7b5      	b.n	80114ae <es_wifi_sendto+0xe6>
    ret =  NET_ERROR_SOCKET_FAILURE;
 8011542:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8011546:	e7b2      	b.n	80114ae <es_wifi_sendto+0xe6>
 8011548:	2400c7a8 	.word	0x2400c7a8

0801154c <es_wifi_recvfrom>:
{
 801154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011550:	b08a      	sub	sp, #40	; 0x28
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011552:	2803      	cmp	r0, #3
 8011554:	f200 8097 	bhi.w	8011686 <es_wifi_recvfrom+0x13a>
 8011558:	4604      	mov	r4, r0
 801155a:	4688      	mov	r8, r1
 801155c:	4615      	mov	r5, r2
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 801155e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011562:	4f4d      	ldr	r7, [pc, #308]	; (8011698 <es_wifi_recvfrom+0x14c>)
 8011564:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8011568:	7882      	ldrb	r2, [r0, #2]
 801156a:	2a11      	cmp	r2, #17
 801156c:	f040 808e 	bne.w	801168c <es_wifi_recvfrom+0x140>
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 8011570:	7842      	ldrb	r2, [r0, #1]
 8011572:	f012 0f08 	tst.w	r2, #8
 8011576:	f000 808c 	beq.w	8011692 <es_wifi_recvfrom+0x146>
    if (((uint8_t) flags & (uint8_t) NET_MSG_DONTWAIT) == 0U)
 801157a:	f013 0f08 	tst.w	r3, #8
 801157e:	d107      	bne.n	8011590 <es_wifi_recvfrom+0x44>
      timeout = (uint32_t) WifiChannel[sock].recvtimeout;
 8011580:	6986      	ldr	r6, [r0, #24]
    if (timeout > (uint32_t) ES_WIFI_MAX_SO_TIMEOUT)
 8011582:	f247 5330 	movw	r3, #30000	; 0x7530
 8011586:	429e      	cmp	r6, r3
 8011588:	d903      	bls.n	8011592 <es_wifi_recvfrom+0x46>
      ret = NET_ERROR_UNSUPPORTED;
 801158a:	f06f 0702 	mvn.w	r7, #2
  return ret;
 801158e:	e030      	b.n	80115f2 <es_wifi_recvfrom+0xa6>
  uint32_t timeout = 0;
 8011590:	2600      	movs	r6, #0
      if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 8011592:	f012 0f20 	tst.w	r2, #32
 8011596:	d030      	beq.n	80115fa <es_wifi_recvfrom+0xae>
        uint32_t IPaddr = 0;
 8011598:	2300      	movs	r3, #0
 801159a:	9305      	str	r3, [sp, #20]
        uint16_t port = 0;
 801159c:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (len > ES_WIFI_PAYLOAD_SIZE)
 80115a0:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80115a4:	dd01      	ble.n	80115aa <es_wifi_recvfrom+0x5e>
          len = ES_WIFI_PAYLOAD_SIZE;
 80115a6:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
        if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveDataFrom(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 80115aa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80115ae:	4a3a      	ldr	r2, [pc, #232]	; (8011698 <es_wifi_recvfrom+0x14c>)
 80115b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80115b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80115ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80115bc:	f7ff fae4 	bl	8010b88 <castcontext>
 80115c0:	f10d 0312 	add.w	r3, sp, #18
 80115c4:	9303      	str	r3, [sp, #12]
 80115c6:	ab05      	add	r3, sp, #20
 80115c8:	9302      	str	r3, [sp, #8]
 80115ca:	9601      	str	r6, [sp, #4]
 80115cc:	ab04      	add	r3, sp, #16
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	b2ab      	uxth	r3, r5
 80115d2:	4642      	mov	r2, r8
 80115d4:	b2e1      	uxtb	r1, r4
 80115d6:	f7f6 f859 	bl	800768c <ES_WIFI_ReceiveDataFrom>
 80115da:	b368      	cbz	r0, 8011638 <es_wifi_recvfrom+0xec>
          ret = NET_ERROR_SOCKET_FAILURE;
 80115dc:	f06f 0712 	mvn.w	r7, #18
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 80115e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80115e4:	482c      	ldr	r0, [pc, #176]	; (8011698 <es_wifi_recvfrom+0x14c>)
 80115e6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80115ea:	4639      	mov	r1, r7
 80115ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80115ee:	f7ff fe6b 	bl	80112c8 <check_connection_lost>
}
 80115f2:	4638      	mov	r0, r7
 80115f4:	b00a      	add	sp, #40	; 0x28
 80115f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void) NET_ATON((const char_t *)"224.0.0.251", &ipaddr);
 80115fa:	a905      	add	r1, sp, #20
 80115fc:	4827      	ldr	r0, [pc, #156]	; (801169c <es_wifi_recvfrom+0x150>)
 80115fe:	f7fe ffbc 	bl	801057a <net_aton>
        NET_IPADDR_PORT_TO_SOCKADDR(&saddr, &ipaddr, 5353);
 8011602:	2310      	movs	r3, #16
 8011604:	f88d 3018 	strb.w	r3, [sp, #24]
 8011608:	2202      	movs	r2, #2
 801160a:	f88d 2019 	strb.w	r2, [sp, #25]
 801160e:	f64e 1214 	movw	r2, #59668	; 0xe914
 8011612:	f8ad 201a 	strh.w	r2, [sp, #26]
 8011616:	9a05      	ldr	r2, [sp, #20]
 8011618:	9207      	str	r2, [sp, #28]
 801161a:	2100      	movs	r1, #0
 801161c:	9108      	str	r1, [sp, #32]
 801161e:	9109      	str	r1, [sp, #36]	; 0x24
        ret = es_wifi_sendto(sock, NULL, 0, flags, &saddr, sizeof(sockaddr_in_t));
 8011620:	9301      	str	r3, [sp, #4]
 8011622:	ab06      	add	r3, sp, #24
 8011624:	9300      	str	r3, [sp, #0]
 8011626:	460b      	mov	r3, r1
 8011628:	460a      	mov	r2, r1
 801162a:	4620      	mov	r0, r4
 801162c:	f7ff fecc 	bl	80113c8 <es_wifi_sendto>
      if (ret == NET_OK)
 8011630:	4607      	mov	r7, r0
 8011632:	2800      	cmp	r0, #0
 8011634:	d1d4      	bne.n	80115e0 <es_wifi_recvfrom+0x94>
 8011636:	e7af      	b.n	8011598 <es_wifi_recvfrom+0x4c>
          (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 8011638:	2100      	movs	r1, #0
 801163a:	9106      	str	r1, [sp, #24]
 801163c:	9107      	str	r1, [sp, #28]
 801163e:	9108      	str	r1, [sp, #32]
 8011640:	9109      	str	r1, [sp, #36]	; 0x24
          saddr.sin_family = NET_AF_INET;
 8011642:	2302      	movs	r3, #2
 8011644:	f88d 3019 	strb.w	r3, [sp, #25]
          saddr.sin_addr.s_addr = IPaddr;
 8011648:	9b05      	ldr	r3, [sp, #20]
 801164a:	9307      	str	r3, [sp, #28]
          saddr.sin_port = NET_HTONS(port);
 801164c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011650:	ba5b      	rev16	r3, r3
 8011652:	f8ad 301a 	strh.w	r3, [sp, #26]
          saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8011656:	2510      	movs	r5, #16
 8011658:	f88d 5018 	strb.w	r5, [sp, #24]
          (void)  memset(from, 0, *fromlen);
 801165c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011662:	f00f f909 	bl	8020878 <memset>
          (void)  memcpy(from, &saddr, MIN((*fromlen), (saddr.sin_len)));
 8011666:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801166a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	429a      	cmp	r2, r3
 8011670:	bf28      	it	cs
 8011672:	461a      	movcs	r2, r3
 8011674:	a906      	add	r1, sp, #24
 8011676:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011678:	f00f f8f0 	bl	802085c <memcpy>
          *fromlen = sizeof(sockaddr_in_t);
 801167c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801167e:	601d      	str	r5, [r3, #0]
          ret = (int32_t) ReceivedDatalen;
 8011680:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 8011684:	e7ac      	b.n	80115e0 <es_wifi_recvfrom+0x94>
    ret = NET_ERROR_INVALID_SOCKET;
 8011686:	f06f 0705 	mvn.w	r7, #5
 801168a:	e7b2      	b.n	80115f2 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 801168c:	f06f 0712 	mvn.w	r7, #18
 8011690:	e7af      	b.n	80115f2 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 8011692:	f06f 0712 	mvn.w	r7, #18
 8011696:	e7ac      	b.n	80115f2 <es_wifi_recvfrom+0xa6>
 8011698:	2400c7a8 	.word	0x2400c7a8
 801169c:	0802363c 	.word	0x0802363c

080116a0 <es_wifi_recv>:
{
 80116a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116a2:	b085      	sub	sp, #20
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80116a4:	2803      	cmp	r0, #3
 80116a6:	d83f      	bhi.n	8011728 <es_wifi_recv+0x88>
 80116a8:	4604      	mov	r4, r0
 80116aa:	460e      	mov	r6, r1
 80116ac:	4615      	mov	r5, r2
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 80116ae:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80116b2:	4920      	ldr	r1, [pc, #128]	; (8011734 <es_wifi_recv+0x94>)
 80116b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80116b8:	7852      	ldrb	r2, [r2, #1]
 80116ba:	f012 0f08 	tst.w	r2, #8
 80116be:	d036      	beq.n	801172e <es_wifi_recv+0x8e>
    if (flags == (int32_t) NET_MSG_DONTWAIT)
 80116c0:	2b08      	cmp	r3, #8
 80116c2:	d02c      	beq.n	801171e <es_wifi_recv+0x7e>
      timeout = (uint16_t) WifiChannel[sock].recvtimeout;
 80116c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80116c8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80116cc:	8b1f      	ldrh	r7, [r3, #24]
    if (len > ES_WIFI_PAYLOAD_SIZE)
 80116ce:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80116d2:	dd01      	ble.n	80116d8 <es_wifi_recv+0x38>
      len = ES_WIFI_PAYLOAD_SIZE;
 80116d4:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 80116d8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80116dc:	4a15      	ldr	r2, [pc, #84]	; (8011734 <es_wifi_recv+0x94>)
 80116de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80116e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80116e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80116ea:	f7ff fa4d 	bl	8010b88 <castcontext>
 80116ee:	9701      	str	r7, [sp, #4]
 80116f0:	f10d 030e 	add.w	r3, sp, #14
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	b2ab      	uxth	r3, r5
 80116f8:	4632      	mov	r2, r6
 80116fa:	b2e1      	uxtb	r1, r4
 80116fc:	f7f5 ff72 	bl	80075e4 <ES_WIFI_ReceiveData>
 8011700:	b978      	cbnz	r0, 8011722 <es_wifi_recv+0x82>
      ret = (int32_t) ReceivedDatalen;
 8011702:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 8011706:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801170a:	480a      	ldr	r0, [pc, #40]	; (8011734 <es_wifi_recv+0x94>)
 801170c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8011710:	4629      	mov	r1, r5
 8011712:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011714:	f7ff fdd8 	bl	80112c8 <check_connection_lost>
}
 8011718:	4628      	mov	r0, r5
 801171a:	b005      	add	sp, #20
 801171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      timeout = 0;
 801171e:	2700      	movs	r7, #0
 8011720:	e7d5      	b.n	80116ce <es_wifi_recv+0x2e>
      ret = NET_ERROR_SOCKET_FAILURE;
 8011722:	f06f 0512 	mvn.w	r5, #18
 8011726:	e7ee      	b.n	8011706 <es_wifi_recv+0x66>
    ret = NET_ERROR_INVALID_SOCKET;
 8011728:	f06f 0505 	mvn.w	r5, #5
 801172c:	e7f4      	b.n	8011718 <es_wifi_recv+0x78>
    ret = NET_ERROR_SOCKET_FAILURE;
 801172e:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8011732:	e7f1      	b.n	8011718 <es_wifi_recv+0x78>
 8011734:	2400c7a8 	.word	0x2400c7a8

08011738 <es_wifi_send>:
{
 8011738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801173a:	b085      	sub	sp, #20
  if (flags != 0)
 801173c:	2b00      	cmp	r3, #0
 801173e:	d139      	bne.n	80117b4 <es_wifi_send+0x7c>
 8011740:	4604      	mov	r4, r0
 8011742:	460f      	mov	r7, r1
 8011744:	4615      	mov	r5, r2
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011746:	2803      	cmp	r0, #3
 8011748:	d837      	bhi.n	80117ba <es_wifi_send+0x82>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 801174a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801174e:	4a1e      	ldr	r2, [pc, #120]	; (80117c8 <es_wifi_send+0x90>)
 8011750:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011754:	785b      	ldrb	r3, [r3, #1]
 8011756:	f013 0f04 	tst.w	r3, #4
 801175a:	d031      	beq.n	80117c0 <es_wifi_send+0x88>
    if (len > ES_WIFI_PAYLOAD_SIZE)
 801175c:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8011760:	dd01      	ble.n	8011766 <es_wifi_send+0x2e>
      len = ES_WIFI_PAYLOAD_SIZE;
 8011762:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8011766:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 801176a:	4b17      	ldr	r3, [pc, #92]	; (80117c8 <es_wifi_send+0x90>)
 801176c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011770:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011772:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011776:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011778:	f7ff fa06 	bl	8010b88 <castcontext>
                                              (uint32_t) WifiChannel[sock].sendtimeout))
 801177c:	6973      	ldr	r3, [r6, #20]
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801177e:	9301      	str	r3, [sp, #4]
 8011780:	f10d 030e 	add.w	r3, sp, #14
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	b2ab      	uxth	r3, r5
 8011788:	463a      	mov	r2, r7
 801178a:	b2e1      	uxtb	r1, r4
 801178c:	f7f5 fe34 	bl	80073f8 <ES_WIFI_SendData>
 8011790:	b968      	cbnz	r0, 80117ae <es_wifi_send+0x76>
      ret = (int32_t) SentDatalen;
 8011792:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 8011796:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801179a:	480b      	ldr	r0, [pc, #44]	; (80117c8 <es_wifi_send+0x90>)
 801179c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80117a0:	4629      	mov	r1, r5
 80117a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80117a4:	f7ff fd90 	bl	80112c8 <check_connection_lost>
}
 80117a8:	4628      	mov	r0, r5
 80117aa:	b005      	add	sp, #20
 80117ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = NET_ERROR_SOCKET_FAILURE;
 80117ae:	f06f 0512 	mvn.w	r5, #18
 80117b2:	e7f0      	b.n	8011796 <es_wifi_send+0x5e>
    ret = NET_ERROR_UNSUPPORTED;
 80117b4:	f06f 0502 	mvn.w	r5, #2
 80117b8:	e7f6      	b.n	80117a8 <es_wifi_send+0x70>
    ret = NET_ERROR_INVALID_SOCKET;
 80117ba:	f06f 0505 	mvn.w	r5, #5
 80117be:	e7f3      	b.n	80117a8 <es_wifi_send+0x70>
    ret = NET_ERROR_SOCKET_FAILURE;
 80117c0:	f06f 0512 	mvn.w	r5, #18
  return ret;
 80117c4:	e7f0      	b.n	80117a8 <es_wifi_send+0x70>
 80117c6:	bf00      	nop
 80117c8:	2400c7a8 	.word	0x2400c7a8

080117cc <es_wifi_accept>:
{
 80117cc:	b530      	push	{r4, r5, lr}
 80117ce:	b087      	sub	sp, #28
 80117d0:	4604      	mov	r4, r0
  sockaddr_in_t *addrin = cast2sockaddr_in(addr);
 80117d2:	4608      	mov	r0, r1
 80117d4:	f7ff f9d9 	bl	8010b8a <cast2sockaddr_in>
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80117d8:	2c03      	cmp	r4, #3
 80117da:	d834      	bhi.n	8011846 <es_wifi_accept+0x7a>
 80117dc:	4605      	mov	r5, r0
    conn.Number = (uint8_t) sock;
 80117de:	f88d 4006 	strb.w	r4, [sp, #6]
    status = ES_WIFI_WaitServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), 0, &conn);
 80117e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80117e6:	4a19      	ldr	r2, [pc, #100]	; (801184c <es_wifi_accept+0x80>)
 80117e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80117ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80117f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80117f4:	f7ff f9c8 	bl	8010b88 <castcontext>
 80117f8:	aa01      	add	r2, sp, #4
 80117fa:	2100      	movs	r1, #0
 80117fc:	f7f5 fd08 	bl	8007210 <ES_WIFI_WaitServerConnection>
    if (ES_WIFI_STATUS_OK == status)
 8011800:	b9e8      	cbnz	r0, 801183e <es_wifi_accept+0x72>
      addrin->sin_port = NET_NTOHS(conn.RemotePort);
 8011802:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011806:	ba5b      	rev16	r3, r3
 8011808:	806b      	strh	r3, [r5, #2]
      addrin->sin_addr.s_addr = NET_ARTON(conn.RemoteIP);
 801180a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801180e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8011812:	041b      	lsls	r3, r3, #16
 8011814:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011818:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801181c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011820:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011824:	4313      	orrs	r3, r2
 8011826:	606b      	str	r3, [r5, #4]
      WifiChannel [sock].status |= WIFI_CONNECTED_SOCKET_RW | WIFI_STARTED_SERVER_SOCKET ;
 8011828:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801182c:	4b07      	ldr	r3, [pc, #28]	; (801184c <es_wifi_accept+0x80>)
 801182e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011832:	785a      	ldrb	r2, [r3, #1]
 8011834:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 8011838:	705a      	strb	r2, [r3, #1]
      ret = sock;
 801183a:	4620      	mov	r0, r4
 801183c:	e001      	b.n	8011842 <es_wifi_accept+0x76>
      ret =  NET_ERROR_SOCKET_FAILURE;
 801183e:	f06f 0012 	mvn.w	r0, #18
}
 8011842:	b007      	add	sp, #28
 8011844:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 8011846:	f06f 0005 	mvn.w	r0, #5
  return ret;
 801184a:	e7fa      	b.n	8011842 <es_wifi_accept+0x76>
 801184c:	2400c7a8 	.word	0x2400c7a8

08011850 <es_wifi_listen>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011850:	2803      	cmp	r0, #3
 8011852:	d826      	bhi.n	80118a2 <es_wifi_listen+0x52>
{
 8011854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011858:	b086      	sub	sp, #24
 801185a:	4604      	mov	r4, r0
 801185c:	460f      	mov	r7, r1
    ES_WIFIObject_t  *pEsWifiObj = castcontext(WifiChannel[sock].pnetif->pdrv->context);
 801185e:	4d12      	ldr	r5, [pc, #72]	; (80118a8 <es_wifi_listen+0x58>)
 8011860:	eb00 0680 	add.w	r6, r0, r0, lsl #2
 8011864:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8011868:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801186a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801186e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011870:	f7ff f98a 	bl	8010b88 <castcontext>
    conn.Number = (uint8_t) sock;
 8011874:	f88d 4006 	strb.w	r4, [sp, #6]
    conn.LocalPort = WifiChannel[sock].localport;
 8011878:	88b3      	ldrh	r3, [r6, #4]
 801187a:	f8ad 300a 	strh.w	r3, [sp, #10]
    conn.Type = ES_WIFI_UDP_CONNECTION;
 801187e:	2301      	movs	r3, #1
 8011880:	f88d 3004 	strb.w	r3, [sp, #4]
    if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_TCP)
 8011884:	78b3      	ldrb	r3, [r6, #2]
 8011886:	2b06      	cmp	r3, #6
 8011888:	d007      	beq.n	801189a <es_wifi_listen+0x4a>
    conn.Backlog = (uint8_t) backlog;
 801188a:	f88d 7014 	strb.w	r7, [sp, #20]
    ret = (int32_t) ES_WIFI_StartServerSingleConn(pEsWifiObj, &conn);
 801188e:	a901      	add	r1, sp, #4
 8011890:	f7f5 fc52 	bl	8007138 <ES_WIFI_StartServerSingleConn>
}
 8011894:	b006      	add	sp, #24
 8011896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      conn.Type = ES_WIFI_TCP_CONNECTION;
 801189a:	2300      	movs	r3, #0
 801189c:	f88d 3004 	strb.w	r3, [sp, #4]
 80118a0:	e7f3      	b.n	801188a <es_wifi_listen+0x3a>
    ret = NET_ERROR_INVALID_SOCKET;
 80118a2:	f06f 0005 	mvn.w	r0, #5
}
 80118a6:	4770      	bx	lr
 80118a8:	2400c7a8 	.word	0x2400c7a8

080118ac <es_wifi_if_disconnect>:
{
 80118ac:	b510      	push	{r4, lr}
 80118ae:	4604      	mov	r4, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 80118b0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80118b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80118b6:	f7ff f967 	bl	8010b88 <castcontext>
  (void) ES_WIFI_Disconnect(pEsWifiObj);
 80118ba:	f7f5 fa4b 	bl	8006d54 <ES_WIFI_Disconnect>
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 80118be:	2107      	movs	r1, #7
 80118c0:	4620      	mov	r0, r4
 80118c2:	f7ff f92b 	bl	8010b1c <net_state_manage_event>
}
 80118c6:	2000      	movs	r0, #0
 80118c8:	bd10      	pop	{r4, pc}
	...

080118cc <es_wifi_if_start>:
{
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	4604      	mov	r4, r0
  if (wifi_probe(&pnetif->pdrv->context) == NET_OK)
 80118d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80118d4:	302c      	adds	r0, #44	; 0x2c
 80118d6:	f7f1 fa33 	bl	8002d40 <wifi_probe>
 80118da:	2800      	cmp	r0, #0
 80118dc:	d13f      	bne.n	801195e <es_wifi_if_start+0x92>
 80118de:	4605      	mov	r5, r0
    pEsWifiObj = castcontext(pnetif->pdrv->context);
 80118e0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80118e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80118e6:	f7ff f94f 	bl	8010b88 <castcontext>
 80118ea:	4606      	mov	r6, r0
    if (ES_WIFI_STATUS_OK != ES_WIFI_Init(pEsWifiObj))
 80118ec:	f7f5 f8fe 	bl	8006aec <ES_WIFI_Init>
 80118f0:	bbc0      	cbnz	r0, 8011964 <es_wifi_if_start+0x98>
      (void)strncpy(pnetif->DeviceName, (char_t *)pEsWifiObj->Product_Name, NET_DEVICE_NAME_LEN);
 80118f2:	2240      	movs	r2, #64	; 0x40
 80118f4:	f106 0168 	add.w	r1, r6, #104	; 0x68
 80118f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80118fc:	f00f fcc7 	bl	802128e <strncpy>
      (void) strncpy(pnetif->DeviceID, (char_t *)pEsWifiObj->Product_ID, NET_DEVICE_ID_LEN);
 8011900:	2240      	movs	r2, #64	; 0x40
 8011902:	4631      	mov	r1, r6
 8011904:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8011908:	f00f fcc1 	bl	802128e <strncpy>
      (void) strncpy(pnetif->DeviceVer, (char_t *)pEsWifiObj->FW_Rev, NET_DEVICE_VER_LEN);
 801190c:	2240      	movs	r2, #64	; 0x40
 801190e:	f106 0120 	add.w	r1, r6, #32
 8011912:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8011916:	f00f fcba 	bl	802128e <strncpy>
      (void) ES_WIFI_GetMACAddress(pEsWifiObj, pnetif->macaddr.mac);
 801191a:	f104 01e4 	add.w	r1, r4, #228	; 0xe4
 801191e:	4630      	mov	r0, r6
 8011920:	f7f5 faae 	bl	8006e80 <ES_WIFI_GetMACAddress>
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8011924:	462b      	mov	r3, r5
 8011926:	e012      	b.n	801194e <es_wifi_if_start+0x82>
        WifiChannel[i].status          = WIFI_FREE_SOCKET;
 8011928:	4910      	ldr	r1, [pc, #64]	; (801196c <es_wifi_if_start+0xa0>)
 801192a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 801192e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8011932:	f04f 0c00 	mov.w	ip, #0
 8011936:	f882 c001 	strb.w	ip, [r2, #1]
        WifiChannel[i].Number          = (uint8_t) i;
 801193a:	f801 3030 	strb.w	r3, [r1, r0, lsl #3]
        WifiChannel[i].recvtimeout     = MIN((NET_SOCK_DEFAULT_RECEIVE_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 801193e:	f247 5130 	movw	r1, #30000	; 0x7530
 8011942:	6191      	str	r1, [r2, #24]
        WifiChannel[i].sendtimeout     = MIN((NET_SOCK_DEFAULT_SEND_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 8011944:	6151      	str	r1, [r2, #20]
        WifiChannel[i].blocking        = 1; /* default blocking */
 8011946:	2101      	movs	r1, #1
 8011948:	6111      	str	r1, [r2, #16]
        WifiChannel[i].pnetif          = pnetif;
 801194a:	6254      	str	r4, [r2, #36]	; 0x24
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 801194c:	440b      	add	r3, r1
 801194e:	2b03      	cmp	r3, #3
 8011950:	ddea      	ble.n	8011928 <es_wifi_if_start+0x5c>
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8011952:	2107      	movs	r1, #7
 8011954:	4620      	mov	r0, r4
 8011956:	f7ff f8e1 	bl	8010b1c <net_state_manage_event>
}
 801195a:	4628      	mov	r0, r5
 801195c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_DEVICE_ERROR;
 801195e:	f06f 050c 	mvn.w	r5, #12
 8011962:	e7fa      	b.n	801195a <es_wifi_if_start+0x8e>
      ret = NET_ERROR_INTERFACE_FAILURE;
 8011964:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8011968:	e7f7      	b.n	801195a <es_wifi_if_start+0x8e>
 801196a:	bf00      	nop
 801196c:	2400c7a8 	.word	0x2400c7a8

08011970 <es_wifi_driver>:
{
 8011970:	b508      	push	{r3, lr}
  return es_wifi_if_init(pnetif);
 8011972:	f7ff fa51 	bl	8010e18 <es_wifi_if_init>
}
 8011976:	bd08      	pop	{r3, pc}

08011978 <GetESWifiSecurityType>:
  if (security == NET_WIFI_SM_OPEN)
 8011978:	4603      	mov	r3, r0
 801197a:	b1e8      	cbz	r0, 80119b8 <GetESWifiSecurityType+0x40>
  ES_WIFI_SecurityType_t        ret = ES_WIFI_SEC_UNKNOWN;
 801197c:	20ff      	movs	r0, #255	; 0xff
  if (MATCH(security, NET_WEP_ENABLED))
 801197e:	f013 0f01 	tst.w	r3, #1
 8011982:	d000      	beq.n	8011986 <GetESWifiSecurityType+0xe>
    ret = ES_WIFI_SEC_WEP;
 8011984:	2001      	movs	r0, #1
  if (MATCH(security, NET_WIFI_SM_WPA_MIXED_PSK))
 8011986:	4a14      	ldr	r2, [pc, #80]	; (80119d8 <GetESWifiSecurityType+0x60>)
 8011988:	439a      	bics	r2, r3
 801198a:	d017      	beq.n	80119bc <GetESWifiSecurityType+0x44>
  if (MATCH(security, NET_WIFI_SM_WPA_TKIP_PSK))
 801198c:	4a13      	ldr	r2, [pc, #76]	; (80119dc <GetESWifiSecurityType+0x64>)
 801198e:	439a      	bics	r2, r3
 8011990:	d016      	beq.n	80119c0 <GetESWifiSecurityType+0x48>
  if (MATCH(security, NET_WIFI_SM_WPA_AES_PSK))
 8011992:	4a13      	ldr	r2, [pc, #76]	; (80119e0 <GetESWifiSecurityType+0x68>)
 8011994:	439a      	bics	r2, r3
 8011996:	d015      	beq.n	80119c4 <GetESWifiSecurityType+0x4c>
  if (MATCH(security, NET_WIFI_SM_WPA2_WPA_PSK))
 8011998:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801199c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80119a0:	d012      	beq.n	80119c8 <GetESWifiSecurityType+0x50>
  if (MATCH(security, NET_WIFI_SM_WPA2_TKIP_PSK))
 80119a2:	4a10      	ldr	r2, [pc, #64]	; (80119e4 <GetESWifiSecurityType+0x6c>)
 80119a4:	439a      	bics	r2, r3
 80119a6:	d011      	beq.n	80119cc <GetESWifiSecurityType+0x54>
  if (MATCH(security, NET_WIFI_SM_WPA2_AES_PSK))
 80119a8:	4a0f      	ldr	r2, [pc, #60]	; (80119e8 <GetESWifiSecurityType+0x70>)
 80119aa:	439a      	bics	r2, r3
 80119ac:	d010      	beq.n	80119d0 <GetESWifiSecurityType+0x58>
  if (MATCH(security, NET_WIFI_SM_WPA2_MIXED_PSK))
 80119ae:	4a0f      	ldr	r2, [pc, #60]	; (80119ec <GetESWifiSecurityType+0x74>)
 80119b0:	ea32 0303 	bics.w	r3, r2, r3
 80119b4:	d00e      	beq.n	80119d4 <GetESWifiSecurityType+0x5c>
}
 80119b6:	4770      	bx	lr
    ret = ES_WIFI_SEC_OPEN;
 80119b8:	2000      	movs	r0, #0
 80119ba:	e7e0      	b.n	801197e <GetESWifiSecurityType+0x6>
    ret = ES_WIFI_SEC_WPA;
 80119bc:	2002      	movs	r0, #2
 80119be:	e7e5      	b.n	801198c <GetESWifiSecurityType+0x14>
    ret = ES_WIFI_SEC_WPA;
 80119c0:	2002      	movs	r0, #2
 80119c2:	e7e6      	b.n	8011992 <GetESWifiSecurityType+0x1a>
    ret = ES_WIFI_SEC_WPA;
 80119c4:	2002      	movs	r0, #2
 80119c6:	e7e7      	b.n	8011998 <GetESWifiSecurityType+0x20>
    ret = ES_WIFI_SEC_WPA_WPA2;
 80119c8:	2004      	movs	r0, #4
 80119ca:	e7ea      	b.n	80119a2 <GetESWifiSecurityType+0x2a>
    ret = ES_WIFI_SEC_WPA_WPA2;
 80119cc:	2004      	movs	r0, #4
 80119ce:	e7eb      	b.n	80119a8 <GetESWifiSecurityType+0x30>
    ret = ES_WIFI_SEC_WPA_WPA2;
 80119d0:	2004      	movs	r0, #4
 80119d2:	e7ec      	b.n	80119ae <GetESWifiSecurityType+0x36>
    ret = ES_WIFI_SEC_WPA_WPA2;
 80119d4:	2004      	movs	r0, #4
 80119d6:	e7ee      	b.n	80119b6 <GetESWifiSecurityType+0x3e>
 80119d8:	00200006 	.word	0x00200006
 80119dc:	00200002 	.word	0x00200002
 80119e0:	00200004 	.word	0x00200004
 80119e4:	00400002 	.word	0x00400002
 80119e8:	00400004 	.word	0x00400004
 80119ec:	00400006 	.word	0x00400006

080119f0 <es_wifi_if_connect_sta>:
{
 80119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119f2:	b083      	sub	sp, #12
 80119f4:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 80119f6:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
 80119fa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80119fc:	f7ff f8c4 	bl	8010b88 <castcontext>
 8011a00:	4604      	mov	r4, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8011a02:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8011a04:	695b      	ldr	r3, [r3, #20]
  ret = ES_WIFI_Connect(pEsWifiObj, credentials->ssid, credentials->psk,
 8011a06:	681e      	ldr	r6, [r3, #0]
 8011a08:	685f      	ldr	r7, [r3, #4]
 8011a0a:	6898      	ldr	r0, [r3, #8]
 8011a0c:	f7ff ffb4 	bl	8011978 <GetESWifiSecurityType>
 8011a10:	4603      	mov	r3, r0
 8011a12:	463a      	mov	r2, r7
 8011a14:	4631      	mov	r1, r6
 8011a16:	4620      	mov	r0, r4
 8011a18:	f7f5 f938 	bl	8006c8c <ES_WIFI_Connect>
  if (ret == ES_WIFI_STATUS_OK)
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	b138      	cbz	r0, 8011a30 <es_wifi_if_connect_sta+0x40>
  if (ES_WIFI_STATUS_OK == ret)
 8011a20:	b91e      	cbnz	r6, 8011a2a <es_wifi_if_connect_sta+0x3a>
    if (pEsWifiObj->NetSettings.IsConnected != 0U)
 8011a22:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 8011a26:	b943      	cbnz	r3, 8011a3a <es_wifi_if_connect_sta+0x4a>
      ret = ES_WIFI_STATUS_ERROR;
 8011a28:	2602      	movs	r6, #2
}
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	b003      	add	sp, #12
 8011a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = ES_WIFI_GetNetworkSettings(pEsWifiObj);
 8011a30:	4620      	mov	r0, r4
 8011a32:	f7f5 f99f 	bl	8006d74 <ES_WIFI_GetNetworkSettings>
 8011a36:	4606      	mov	r6, r0
 8011a38:	e7f2      	b.n	8011a20 <es_wifi_if_connect_sta+0x30>
      (void) memcpy(addr, pEsWifiObj->NetSettings.IP_Addr, 4);
 8011a3a:	f8d4 20d5 	ldr.w	r2, [r4, #213]	; 0xd5
 8011a3e:	9201      	str	r2, [sp, #4]
      pnetif->ipaddr.addr = NET_ARTON(addr);
 8011a40:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8011a44:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
 8011a48:	430b      	orrs	r3, r1
 8011a4a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8011a4e:	430b      	orrs	r3, r1
 8011a50:	b2d2      	uxtb	r2, r2
 8011a52:	4313      	orrs	r3, r2
 8011a54:	606b      	str	r3, [r5, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8011a56:	210a      	movs	r1, #10
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7ff f85f 	bl	8010b1c <net_state_manage_event>
      ret = ES_WIFI_STATUS_OK;
 8011a5e:	e7e4      	b.n	8011a2a <es_wifi_if_connect_sta+0x3a>

08011a60 <es_wifi_if_connect_ap>:
{
 8011a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a62:	b093      	sub	sp, #76	; 0x4c
 8011a64:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8011a66:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
 8011a6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011a6c:	f7ff f88c 	bl	8010b88 <castcontext>
 8011a70:	4606      	mov	r6, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8011a72:	6f64      	ldr	r4, [r4, #116]	; 0x74
 8011a74:	6967      	ldr	r7, [r4, #20]
  (void) strncpy((char_t *) ApConfig.SSID, credentials->ssid, sizeof(ApConfig.SSID));
 8011a76:	2221      	movs	r2, #33	; 0x21
 8011a78:	6839      	ldr	r1, [r7, #0]
 8011a7a:	4668      	mov	r0, sp
 8011a7c:	f00f fc07 	bl	802128e <strncpy>
  (void) strncpy((char_t *) ApConfig.Pass, credentials->psk, sizeof(ApConfig.SSID));
 8011a80:	2221      	movs	r2, #33	; 0x21
 8011a82:	6879      	ldr	r1, [r7, #4]
 8011a84:	eb0d 0002 	add.w	r0, sp, r2
 8011a88:	f00f fc01 	bl	802128e <strncpy>
  ApConfig.Security = GetESWifiSecurityType(credentials->security_mode);
 8011a8c:	68b8      	ldr	r0, [r7, #8]
 8011a8e:	f7ff ff73 	bl	8011978 <GetESWifiSecurityType>
 8011a92:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
  ApConfig.Channel = pnetif->pdrv->extension.wifi->access_channel;
 8011a96:	7e63      	ldrb	r3, [r4, #25]
 8011a98:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  ApConfig.MaxConnections = pnetif->pdrv->extension.wifi->max_connections;
 8011a9c:	7ea3      	ldrb	r3, [r4, #26]
 8011a9e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (pnetif->pdrv->extension.wifi->AP_hidden)
 8011aa2:	7ee3      	ldrb	r3, [r4, #27]
 8011aa4:	b15b      	cbz	r3, 8011abe <es_wifi_if_connect_ap+0x5e>
    ApConfig.Hidden = 1;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  ret = ES_WIFI_ActivateAP(pEsWifiObj, &ApConfig);
 8011aac:	4669      	mov	r1, sp
 8011aae:	4630      	mov	r0, r6
 8011ab0:	f7f5 f97a 	bl	8006da8 <ES_WIFI_ActivateAP>
  if (ret == ES_WIFI_STATUS_OK)
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	b130      	cbz	r0, 8011ac6 <es_wifi_if_connect_ap+0x66>
}
 8011ab8:	4620      	mov	r0, r4
 8011aba:	b013      	add	sp, #76	; 0x4c
 8011abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ApConfig.Hidden = 0;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8011ac4:	e7f2      	b.n	8011aac <es_wifi_if_connect_ap+0x4c>
    (void) NET_ATON("192.168.10.1", &(pnetif->ipaddr));
 8011ac6:	1d29      	adds	r1, r5, #4
 8011ac8:	4803      	ldr	r0, [pc, #12]	; (8011ad8 <es_wifi_if_connect_ap+0x78>)
 8011aca:	f7fe fd56 	bl	801057a <net_aton>
    (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8011ace:	210a      	movs	r1, #10
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	f7ff f823 	bl	8010b1c <net_state_manage_event>
    ret = ES_WIFI_STATUS_OK;
 8011ad6:	e7ef      	b.n	8011ab8 <es_wifi_if_connect_ap+0x58>
 8011ad8:	08023648 	.word	0x08023648

08011adc <es_wifi_if_connect>:
{
 8011adc:	b508      	push	{r3, lr}
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8011ade:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ae4:	7e1b      	ldrb	r3, [r3, #24]
 8011ae6:	b913      	cbnz	r3, 8011aee <es_wifi_if_connect+0x12>
    ret =  es_wifi_if_connect_sta(pnetif);
 8011ae8:	f7ff ff82 	bl	80119f0 <es_wifi_if_connect_sta>
}
 8011aec:	bd08      	pop	{r3, pc}
    ret =  es_wifi_if_connect_ap(pnetif);
 8011aee:	f7ff ffb7 	bl	8011a60 <es_wifi_if_connect_ap>
  return ret;
 8011af2:	e7fb      	b.n	8011aec <es_wifi_if_connect+0x10>

08011af4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011af4:	8880      	ldrh	r0, [r0, #4]
 8011af6:	4770      	bx	lr

08011af8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011af8:	b570      	push	{r4, r5, r6, lr}
 8011afa:	6803      	ldr	r3, [r0, #0]
 8011afc:	460c      	mov	r4, r1
 8011afe:	2100      	movs	r1, #0
 8011b00:	4605      	mov	r5, r0
 8011b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b04:	4798      	blx	r3
 8011b06:	4606      	mov	r6, r0
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	1ba4      	subs	r4, r4, r6
 8011b0e:	6a1b      	ldr	r3, [r3, #32]
 8011b10:	b2a4      	uxth	r4, r4
 8011b12:	4798      	blx	r3
 8011b14:	fbb4 f0f0 	udiv	r0, r4, r0
 8011b18:	bd70      	pop	{r4, r5, r6, pc}

08011b1a <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	8083      	strh	r3, [r0, #4]
 8011b1e:	4770      	bx	lr

08011b20 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011b20:	b510      	push	{r4, lr}
 8011b22:	6803      	ldr	r3, [r0, #0]
 8011b24:	4604      	mov	r4, r0
 8011b26:	8881      	ldrh	r1, [r0, #4]
 8011b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b2a:	4798      	blx	r3
 8011b2c:	88a3      	ldrh	r3, [r4, #4]
 8011b2e:	3301      	adds	r3, #1
 8011b30:	80a3      	strh	r3, [r4, #4]
 8011b32:	bd10      	pop	{r4, pc}

08011b34 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011b34:	6803      	ldr	r3, [r0, #0]
 8011b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b38:	4718      	bx	r3

08011b3a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011b3a:	4770      	bx	lr

08011b3c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011b3c:	4a02      	ldr	r2, [pc, #8]	; (8011b48 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011b3e:	6002      	str	r2, [r0, #0]
 8011b40:	2200      	movs	r2, #0
 8011b42:	8082      	strh	r2, [r0, #4]
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop
 8011b48:	08023660 	.word	0x08023660

08011b4c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011b4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011b4e:	2000      	movs	r0, #0
 8011b50:	b12b      	cbz	r3, 8011b5e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011b52:	b920      	cbnz	r0, 8011b5e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011b54:	1a5a      	subs	r2, r3, r1
 8011b56:	699b      	ldr	r3, [r3, #24]
 8011b58:	4250      	negs	r0, r2
 8011b5a:	4150      	adcs	r0, r2
 8011b5c:	e7f8      	b.n	8011b50 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011b5e:	4770      	bx	lr

08011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011b60:	2300      	movs	r3, #0
 8011b62:	6148      	str	r0, [r1, #20]
 8011b64:	618b      	str	r3, [r1, #24]
 8011b66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011b68:	b913      	cbnz	r3, 8011b70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011b6a:	6281      	str	r1, [r0, #40]	; 0x28
 8011b6c:	4770      	bx	lr
 8011b6e:	4613      	mov	r3, r2
 8011b70:	699a      	ldr	r2, [r3, #24]
 8011b72:	2a00      	cmp	r2, #0
 8011b74:	d1fb      	bne.n	8011b6e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011b76:	6199      	str	r1, [r3, #24]
 8011b78:	4770      	bx	lr

08011b7a <_ZN8touchgfx9Container9removeAllEv>:
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011b7e:	b123      	cbz	r3, 8011b8a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011b80:	6999      	ldr	r1, [r3, #24]
 8011b82:	6281      	str	r1, [r0, #40]	; 0x28
 8011b84:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011b88:	e7f8      	b.n	8011b7c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011b8a:	4770      	bx	lr

08011b8c <_ZN8touchgfx9Container6unlinkEv>:
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	6283      	str	r3, [r0, #40]	; 0x28
 8011b90:	4770      	bx	lr

08011b92 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011b92:	2200      	movs	r2, #0
 8011b94:	8002      	strh	r2, [r0, #0]
 8011b96:	8042      	strh	r2, [r0, #2]
 8011b98:	8082      	strh	r2, [r0, #4]
 8011b9a:	80c2      	strh	r2, [r0, #6]
 8011b9c:	4770      	bx	lr

08011b9e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011b9e:	b570      	push	{r4, r5, r6, lr}
 8011ba0:	460d      	mov	r5, r1
 8011ba2:	4616      	mov	r6, r2
 8011ba4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011ba6:	b13c      	cbz	r4, 8011bb8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011ba8:	6823      	ldr	r3, [r4, #0]
 8011baa:	4620      	mov	r0, r4
 8011bac:	4632      	mov	r2, r6
 8011bae:	4629      	mov	r1, r5
 8011bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bb2:	4798      	blx	r3
 8011bb4:	69a4      	ldr	r4, [r4, #24]
 8011bb6:	e7f6      	b.n	8011ba6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011bb8:	bd70      	pop	{r4, r5, r6, pc}

08011bba <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011bba:	b538      	push	{r3, r4, r5, lr}
 8011bbc:	460d      	mov	r5, r1
 8011bbe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011bc0:	b134      	cbz	r4, 8011bd0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011bc2:	682b      	ldr	r3, [r5, #0]
 8011bc4:	4621      	mov	r1, r4
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	4798      	blx	r3
 8011bcc:	69a4      	ldr	r4, [r4, #24]
 8011bce:	e7f7      	b.n	8011bc0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011bd0:	bd38      	pop	{r3, r4, r5, pc}

08011bd2 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8011bd2:	b510      	push	{r4, lr}
 8011bd4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011bd6:	b12c      	cbz	r4, 8011be4 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	4620      	mov	r0, r4
 8011bdc:	699b      	ldr	r3, [r3, #24]
 8011bde:	4798      	blx	r3
 8011be0:	69a4      	ldr	r4, [r4, #24]
 8011be2:	e7f8      	b.n	8011bd6 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8011be4:	bd10      	pop	{r4, pc}

08011be6 <_ZN8touchgfx9ContainerD1Ev>:
 8011be6:	4770      	bx	lr

08011be8 <_ZN8touchgfx9ContainerD0Ev>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	4604      	mov	r4, r0
 8011bec:	212c      	movs	r1, #44	; 0x2c
 8011bee:	f00e fc7e 	bl	80204ee <_ZdlPvj>
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	bd10      	pop	{r4, pc}

08011bf6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011bf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011bf8:	b19b      	cbz	r3, 8011c22 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011bfa:	428b      	cmp	r3, r1
 8011bfc:	d109      	bne.n	8011c12 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011bfe:	699a      	ldr	r2, [r3, #24]
 8011c00:	2100      	movs	r1, #0
 8011c02:	6159      	str	r1, [r3, #20]
 8011c04:	6282      	str	r2, [r0, #40]	; 0x28
 8011c06:	b902      	cbnz	r2, 8011c0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011c08:	4770      	bx	lr
 8011c0a:	6199      	str	r1, [r3, #24]
 8011c0c:	4770      	bx	lr
 8011c0e:	4613      	mov	r3, r2
 8011c10:	b13a      	cbz	r2, 8011c22 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011c12:	699a      	ldr	r2, [r3, #24]
 8011c14:	428a      	cmp	r2, r1
 8011c16:	d1fa      	bne.n	8011c0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011c18:	698a      	ldr	r2, [r1, #24]
 8011c1a:	619a      	str	r2, [r3, #24]
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011c22:	4770      	bx	lr

08011c24 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011c24:	b410      	push	{r4}
 8011c26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011c28:	4604      	mov	r4, r0
 8011c2a:	b92b      	cbnz	r3, 8011c38 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011c2c:	6803      	ldr	r3, [r0, #0]
 8011c2e:	4611      	mov	r1, r2
 8011c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c36:	4718      	bx	r3
 8011c38:	b941      	cbnz	r1, 8011c4c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011c3a:	6193      	str	r3, [r2, #24]
 8011c3c:	6282      	str	r2, [r0, #40]	; 0x28
 8011c3e:	6154      	str	r4, [r2, #20]
 8011c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c44:	4770      	bx	lr
 8011c46:	4603      	mov	r3, r0
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d0f9      	beq.n	8011c40 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011c4c:	4299      	cmp	r1, r3
 8011c4e:	6998      	ldr	r0, [r3, #24]
 8011c50:	d1f9      	bne.n	8011c46 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011c52:	6190      	str	r0, [r2, #24]
 8011c54:	618a      	str	r2, [r1, #24]
 8011c56:	e7f2      	b.n	8011c3e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011c58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5c:	461f      	mov	r7, r3
 8011c5e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011c62:	460d      	mov	r5, r1
 8011c64:	4616      	mov	r6, r2
 8011c66:	b103      	cbz	r3, 8011c6a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011c68:	6038      	str	r0, [r7, #0]
 8011c6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011c6c:	b314      	cbz	r4, 8011cb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011c6e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011c72:	b1eb      	cbz	r3, 8011cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c74:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011c78:	428d      	cmp	r5, r1
 8011c7a:	db19      	blt.n	8011cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c7c:	b289      	uxth	r1, r1
 8011c7e:	8923      	ldrh	r3, [r4, #8]
 8011c80:	440b      	add	r3, r1
 8011c82:	b21b      	sxth	r3, r3
 8011c84:	429d      	cmp	r5, r3
 8011c86:	da13      	bge.n	8011cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c88:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011c8c:	4296      	cmp	r6, r2
 8011c8e:	db0f      	blt.n	8011cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c90:	b292      	uxth	r2, r2
 8011c92:	8963      	ldrh	r3, [r4, #10]
 8011c94:	4413      	add	r3, r2
 8011c96:	b21b      	sxth	r3, r3
 8011c98:	429e      	cmp	r6, r3
 8011c9a:	da09      	bge.n	8011cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c9c:	6823      	ldr	r3, [r4, #0]
 8011c9e:	1ab2      	subs	r2, r6, r2
 8011ca0:	1a69      	subs	r1, r5, r1
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8011ca8:	b212      	sxth	r2, r2
 8011caa:	463b      	mov	r3, r7
 8011cac:	b209      	sxth	r1, r1
 8011cae:	47c0      	blx	r8
 8011cb0:	69a4      	ldr	r4, [r4, #24]
 8011cb2:	e7db      	b.n	8011c6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011cb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cbc:	4c6d      	ldr	r4, [pc, #436]	; (8011e74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011cbe:	b0a1      	sub	sp, #132	; 0x84
 8011cc0:	4606      	mov	r6, r0
 8011cc2:	6824      	ldr	r4, [r4, #0]
 8011cc4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011cc6:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8011cca:	2400      	movs	r4, #0
 8011ccc:	9303      	str	r3, [sp, #12]
 8011cce:	802c      	strh	r4, [r5, #0]
 8011cd0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011cd2:	802c      	strh	r4, [r5, #0]
 8011cd4:	601c      	str	r4, [r3, #0]
 8011cd6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011cda:	f7ff ffbd 	bl	8011c58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011cde:	f1b9 0f03 	cmp.w	r9, #3
 8011ce2:	f340 80c1 	ble.w	8011e68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011ce6:	4631      	mov	r1, r6
 8011ce8:	a80c      	add	r0, sp, #48	; 0x30
 8011cea:	f004 fea7 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011cee:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011cf2:	9306      	str	r3, [sp, #24]
 8011cf4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011cf8:	9307      	str	r3, [sp, #28]
 8011cfa:	9b03      	ldr	r3, [sp, #12]
 8011cfc:	f8d3 a000 	ldr.w	sl, [r3]
 8011d00:	f1ba 0f00 	cmp.w	sl, #0
 8011d04:	f000 80b3 	beq.w	8011e6e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011d08:	4651      	mov	r1, sl
 8011d0a:	a810      	add	r0, sp, #64	; 0x40
 8011d0c:	f004 fe96 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d10:	2002      	movs	r0, #2
 8011d12:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8011d16:	9b01      	ldr	r3, [sp, #4]
 8011d18:	9a06      	ldr	r2, [sp, #24]
 8011d1a:	fb91 f1f0 	sdiv	r1, r1, r0
 8011d1e:	189d      	adds	r5, r3, r2
 8011d20:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011d24:	9a07      	ldr	r2, [sp, #28]
 8011d26:	4419      	add	r1, r3
 8011d28:	9b02      	ldr	r3, [sp, #8]
 8011d2a:	4413      	add	r3, r2
 8011d2c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011d30:	1a6d      	subs	r5, r5, r1
 8011d32:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011d36:	fb92 f2f0 	sdiv	r2, r2, r0
 8011d3a:	440a      	add	r2, r1
 8011d3c:	1a9b      	subs	r3, r3, r2
 8011d3e:	435b      	muls	r3, r3
 8011d40:	fb05 3505 	mla	r5, r5, r5, r3
 8011d44:	4f4c      	ldr	r7, [pc, #304]	; (8011e78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011d46:	ac10      	add	r4, sp, #64	; 0x40
 8011d48:	f1b9 0f0c 	cmp.w	r9, #12
 8011d4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d58:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011d60:	f04f 0303 	mov.w	r3, #3
 8011d64:	bfd8      	it	le
 8011d66:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011d6a:	f04f 0400 	mov.w	r4, #0
 8011d6e:	f8cd 9000 	str.w	r9, [sp]
 8011d72:	bfcc      	ite	gt
 8011d74:	4698      	movgt	r8, r3
 8011d76:	fb92 f8f3 	sdivle	r8, r2, r3
 8011d7a:	1c63      	adds	r3, r4, #1
 8011d7c:	aa10      	add	r2, sp, #64	; 0x40
 8011d7e:	f004 0401 	and.w	r4, r4, #1
 8011d82:	f04f 0b00 	mov.w	fp, #0
 8011d86:	9308      	str	r3, [sp, #32]
 8011d88:	9b00      	ldr	r3, [sp, #0]
 8011d8a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011d8e:	fb93 f3f8 	sdiv	r3, r3, r8
 8011d92:	3404      	adds	r4, #4
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	9304      	str	r3, [sp, #16]
 8011d98:	9a04      	ldr	r2, [sp, #16]
 8011d9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011d9e:	fb13 f302 	smulbb	r3, r3, r2
 8011da2:	9a01      	ldr	r2, [sp, #4]
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	1899      	adds	r1, r3, r2
 8011da8:	9305      	str	r3, [sp, #20]
 8011daa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011dae:	b209      	sxth	r1, r1
 8011db0:	4299      	cmp	r1, r3
 8011db2:	db4d      	blt.n	8011e50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011db4:	8932      	ldrh	r2, [r6, #8]
 8011db6:	4413      	add	r3, r2
 8011db8:	b21b      	sxth	r3, r3
 8011dba:	4299      	cmp	r1, r3
 8011dbc:	da48      	bge.n	8011e50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011dbe:	9b04      	ldr	r3, [sp, #16]
 8011dc0:	6827      	ldr	r7, [r4, #0]
 8011dc2:	fb17 f703 	smulbb	r7, r7, r3
 8011dc6:	9b02      	ldr	r3, [sp, #8]
 8011dc8:	b2bf      	uxth	r7, r7
 8011dca:	18fa      	adds	r2, r7, r3
 8011dcc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011dd0:	b212      	sxth	r2, r2
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	db3c      	blt.n	8011e50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011dd6:	8970      	ldrh	r0, [r6, #10]
 8011dd8:	4403      	add	r3, r0
 8011dda:	b21b      	sxth	r3, r3
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	da37      	bge.n	8011e50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011de0:	2300      	movs	r3, #0
 8011de2:	4630      	mov	r0, r6
 8011de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8011de6:	ab0b      	add	r3, sp, #44	; 0x2c
 8011de8:	f7ff ff36 	bl	8011c58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011dec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011dee:	b37a      	cbz	r2, 8011e50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011df0:	4552      	cmp	r2, sl
 8011df2:	d02d      	beq.n	8011e50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011df4:	4611      	mov	r1, r2
 8011df6:	a80e      	add	r0, sp, #56	; 0x38
 8011df8:	9209      	str	r2, [sp, #36]	; 0x24
 8011dfa:	f004 fe1f 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011dfe:	f04f 0e02 	mov.w	lr, #2
 8011e02:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011e06:	9a06      	ldr	r2, [sp, #24]
 8011e08:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011e0c:	9b01      	ldr	r3, [sp, #4]
 8011e0e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011e12:	4413      	add	r3, r2
 8011e14:	9a07      	ldr	r2, [sp, #28]
 8011e16:	fb91 f1fe 	sdiv	r1, r1, lr
 8011e1a:	fb9c fcfe 	sdiv	ip, ip, lr
 8011e1e:	4401      	add	r1, r0
 8011e20:	1a58      	subs	r0, r3, r1
 8011e22:	9b02      	ldr	r3, [sp, #8]
 8011e24:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011e28:	4413      	add	r3, r2
 8011e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e2c:	448c      	add	ip, r1
 8011e2e:	eba3 030c 	sub.w	r3, r3, ip
 8011e32:	435b      	muls	r3, r3
 8011e34:	fb00 3300 	mla	r3, r0, r0, r3
 8011e38:	42ab      	cmp	r3, r5
 8011e3a:	d208      	bcs.n	8011e4e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011e3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e3e:	461d      	mov	r5, r3
 8011e40:	9803      	ldr	r0, [sp, #12]
 8011e42:	6001      	str	r1, [r0, #0]
 8011e44:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011e46:	9805      	ldr	r0, [sp, #20]
 8011e48:	8008      	strh	r0, [r1, #0]
 8011e4a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011e4c:	800f      	strh	r7, [r1, #0]
 8011e4e:	4692      	mov	sl, r2
 8011e50:	f10b 0b01 	add.w	fp, fp, #1
 8011e54:	3408      	adds	r4, #8
 8011e56:	f1bb 0f04 	cmp.w	fp, #4
 8011e5a:	d19d      	bne.n	8011d98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011e5c:	9b00      	ldr	r3, [sp, #0]
 8011e5e:	9c08      	ldr	r4, [sp, #32]
 8011e60:	444b      	add	r3, r9
 8011e62:	4544      	cmp	r4, r8
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	d188      	bne.n	8011d7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011e68:	b021      	add	sp, #132	; 0x84
 8011e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6e:	f04f 35ff 	mov.w	r5, #4294967295
 8011e72:	e767      	b.n	8011d44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8011e74:	2400c854 	.word	0x2400c854
 8011e78:	08021c24 	.word	0x08021c24

08011e7c <_ZN8touchgfx4RectaNERKS0_>:
 8011e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e80:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011e84:	888c      	ldrh	r4, [r1, #4]
 8011e86:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011e8a:	443c      	add	r4, r7
 8011e8c:	b2a4      	uxth	r4, r4
 8011e8e:	fa0f f884 	sxth.w	r8, r4
 8011e92:	45c1      	cmp	r9, r8
 8011e94:	da2f      	bge.n	8011ef6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011e96:	8882      	ldrh	r2, [r0, #4]
 8011e98:	444a      	add	r2, r9
 8011e9a:	b292      	uxth	r2, r2
 8011e9c:	fa0f fe82 	sxth.w	lr, r2
 8011ea0:	4577      	cmp	r7, lr
 8011ea2:	da28      	bge.n	8011ef6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011ea4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011ea8:	88cb      	ldrh	r3, [r1, #6]
 8011eaa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011eae:	442b      	add	r3, r5
 8011eb0:	b21b      	sxth	r3, r3
 8011eb2:	429e      	cmp	r6, r3
 8011eb4:	da1f      	bge.n	8011ef6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011eb6:	88c3      	ldrh	r3, [r0, #6]
 8011eb8:	4433      	add	r3, r6
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	fa0f fc83 	sxth.w	ip, r3
 8011ec0:	4565      	cmp	r5, ip
 8011ec2:	da18      	bge.n	8011ef6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011ec4:	454f      	cmp	r7, r9
 8011ec6:	bfb8      	it	lt
 8011ec8:	464f      	movlt	r7, r9
 8011eca:	42b5      	cmp	r5, r6
 8011ecc:	bfb8      	it	lt
 8011ece:	4635      	movlt	r5, r6
 8011ed0:	45f0      	cmp	r8, lr
 8011ed2:	bfd8      	it	le
 8011ed4:	4622      	movle	r2, r4
 8011ed6:	1bd2      	subs	r2, r2, r7
 8011ed8:	8082      	strh	r2, [r0, #4]
 8011eda:	884a      	ldrh	r2, [r1, #2]
 8011edc:	88c9      	ldrh	r1, [r1, #6]
 8011ede:	8007      	strh	r7, [r0, #0]
 8011ee0:	440a      	add	r2, r1
 8011ee2:	8045      	strh	r5, [r0, #2]
 8011ee4:	b292      	uxth	r2, r2
 8011ee6:	b211      	sxth	r1, r2
 8011ee8:	458c      	cmp	ip, r1
 8011eea:	bfa8      	it	ge
 8011eec:	4613      	movge	r3, r2
 8011eee:	1b5b      	subs	r3, r3, r5
 8011ef0:	80c3      	strh	r3, [r0, #6]
 8011ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	8003      	strh	r3, [r0, #0]
 8011efa:	8043      	strh	r3, [r0, #2]
 8011efc:	8083      	strh	r3, [r0, #4]
 8011efe:	80c3      	strh	r3, [r0, #6]
 8011f00:	e7f7      	b.n	8011ef2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08011f02 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011f02:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	dd06      	ble.n	8011f18 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011f0a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	bfcc      	ite	gt
 8011f12:	2000      	movgt	r0, #0
 8011f14:	2001      	movle	r0, #1
 8011f16:	4770      	bx	lr
 8011f18:	2001      	movs	r0, #1
 8011f1a:	4770      	bx	lr

08011f1c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f20:	2300      	movs	r3, #0
 8011f22:	4604      	mov	r4, r0
 8011f24:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011f26:	8003      	strh	r3, [r0, #0]
 8011f28:	8043      	strh	r3, [r0, #2]
 8011f2a:	8083      	strh	r3, [r0, #4]
 8011f2c:	80c3      	strh	r3, [r0, #6]
 8011f2e:	2d00      	cmp	r5, #0
 8011f30:	d040      	beq.n	8011fb4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011f32:	1d28      	adds	r0, r5, #4
 8011f34:	f7ff ffe5 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f38:	b988      	cbnz	r0, 8011f5e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f7ff ffe1 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f40:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011f44:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011f48:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011f4c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011f50:	b138      	cbz	r0, 8011f62 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011f52:	8022      	strh	r2, [r4, #0]
 8011f54:	8063      	strh	r3, [r4, #2]
 8011f56:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011f5a:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011f5e:	69ad      	ldr	r5, [r5, #24]
 8011f60:	e7e5      	b.n	8011f2e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011f62:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011f66:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011f6a:	4290      	cmp	r0, r2
 8011f6c:	4607      	mov	r7, r0
 8011f6e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011f72:	460e      	mov	r6, r1
 8011f74:	bfa8      	it	ge
 8011f76:	4617      	movge	r7, r2
 8011f78:	4299      	cmp	r1, r3
 8011f7a:	4472      	add	r2, lr
 8011f7c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011f80:	bfa8      	it	ge
 8011f82:	461e      	movge	r6, r3
 8011f84:	4440      	add	r0, r8
 8011f86:	4471      	add	r1, lr
 8011f88:	4463      	add	r3, ip
 8011f8a:	b200      	sxth	r0, r0
 8011f8c:	8027      	strh	r7, [r4, #0]
 8011f8e:	b212      	sxth	r2, r2
 8011f90:	8066      	strh	r6, [r4, #2]
 8011f92:	b209      	sxth	r1, r1
 8011f94:	b21b      	sxth	r3, r3
 8011f96:	4290      	cmp	r0, r2
 8011f98:	bfac      	ite	ge
 8011f9a:	ebc7 0200 	rsbge	r2, r7, r0
 8011f9e:	ebc7 0202 	rsblt	r2, r7, r2
 8011fa2:	4299      	cmp	r1, r3
 8011fa4:	bfac      	ite	ge
 8011fa6:	ebc6 0301 	rsbge	r3, r6, r1
 8011faa:	ebc6 0303 	rsblt	r3, r6, r3
 8011fae:	80a2      	strh	r2, [r4, #4]
 8011fb0:	80e3      	strh	r3, [r4, #6]
 8011fb2:	e7d4      	b.n	8011f5e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011fba <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011fba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011fbe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011fc2:	b383      	cbz	r3, 8012026 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011fc4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011fc6:	b374      	cbz	r4, 8012026 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011fc8:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011fcc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011fd0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011fd4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011fd8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011fdc:	b303      	cbz	r3, 8012020 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011fde:	4668      	mov	r0, sp
 8011fe0:	1d21      	adds	r1, r4, #4
 8011fe2:	f8ad 5000 	strh.w	r5, [sp]
 8011fe6:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011fea:	f8ad 7004 	strh.w	r7, [sp, #4]
 8011fee:	f8ad 8006 	strh.w	r8, [sp, #6]
 8011ff2:	f7ff ff43 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8011ff6:	4668      	mov	r0, sp
 8011ff8:	f7ff ff83 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011ffc:	b980      	cbnz	r0, 8012020 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011ffe:	f8bd 3000 	ldrh.w	r3, [sp]
 8012002:	4669      	mov	r1, sp
 8012004:	88a2      	ldrh	r2, [r4, #4]
 8012006:	4620      	mov	r0, r4
 8012008:	1a9b      	subs	r3, r3, r2
 801200a:	88e2      	ldrh	r2, [r4, #6]
 801200c:	f8ad 3000 	strh.w	r3, [sp]
 8012010:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012014:	1a9b      	subs	r3, r3, r2
 8012016:	f8ad 3002 	strh.w	r3, [sp, #2]
 801201a:	6823      	ldr	r3, [r4, #0]
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	4798      	blx	r3
 8012020:	69a4      	ldr	r4, [r4, #24]
 8012022:	2c00      	cmp	r4, #0
 8012024:	d1d8      	bne.n	8011fd8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012026:	b002      	add	sp, #8
 8012028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801202c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801202c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801202e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012032:	460d      	mov	r5, r1
 8012034:	4616      	mov	r6, r2
 8012036:	b323      	cbz	r3, 8012082 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012038:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801203a:	b314      	cbz	r4, 8012082 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801203c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012040:	b1eb      	cbz	r3, 801207e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012042:	6828      	ldr	r0, [r5, #0]
 8012044:	466b      	mov	r3, sp
 8012046:	6869      	ldr	r1, [r5, #4]
 8012048:	c303      	stmia	r3!, {r0, r1}
 801204a:	4668      	mov	r0, sp
 801204c:	1d21      	adds	r1, r4, #4
 801204e:	f7ff ff15 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8012052:	4668      	mov	r0, sp
 8012054:	f7ff ff55 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012058:	b988      	cbnz	r0, 801207e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801205a:	f8bd 3000 	ldrh.w	r3, [sp]
 801205e:	4669      	mov	r1, sp
 8012060:	88a2      	ldrh	r2, [r4, #4]
 8012062:	4620      	mov	r0, r4
 8012064:	1a9b      	subs	r3, r3, r2
 8012066:	88e2      	ldrh	r2, [r4, #6]
 8012068:	f8ad 3000 	strh.w	r3, [sp]
 801206c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012070:	1a9b      	subs	r3, r3, r2
 8012072:	4632      	mov	r2, r6
 8012074:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012078:	6823      	ldr	r3, [r4, #0]
 801207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801207c:	4798      	blx	r3
 801207e:	69a4      	ldr	r4, [r4, #24]
 8012080:	e7db      	b.n	801203a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012082:	b002      	add	sp, #8
 8012084:	bd70      	pop	{r4, r5, r6, pc}

08012086 <_ZN8touchgfx8Drawable5setXYEss>:
 8012086:	b570      	push	{r4, r5, r6, lr}
 8012088:	6803      	ldr	r3, [r0, #0]
 801208a:	4604      	mov	r4, r0
 801208c:	4615      	mov	r5, r2
 801208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012090:	4798      	blx	r3
 8012092:	6823      	ldr	r3, [r4, #0]
 8012094:	4629      	mov	r1, r5
 8012096:	4620      	mov	r0, r4
 8012098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801209a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801209e:	4718      	bx	r3

080120a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80120a0:	b570      	push	{r4, r5, r6, lr}
 80120a2:	6803      	ldr	r3, [r0, #0]
 80120a4:	4604      	mov	r4, r0
 80120a6:	4615      	mov	r5, r2
 80120a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120aa:	4798      	blx	r3
 80120ac:	6823      	ldr	r3, [r4, #0]
 80120ae:	4629      	mov	r1, r5
 80120b0:	4620      	mov	r0, r4
 80120b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120b8:	4718      	bx	r3

080120ba <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80120ba:	2000      	movs	r0, #0
 80120bc:	4770      	bx	lr

080120be <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80120be:	2001      	movs	r0, #1
 80120c0:	4770      	bx	lr

080120c2 <_ZN8touchgfx9DragEventD1Ev>:
 80120c2:	4770      	bx	lr

080120c4 <_ZN8touchgfx10ClickEventD1Ev>:
 80120c4:	4770      	bx	lr

080120c6 <_ZN8touchgfx10ClickEventD0Ev>:
 80120c6:	b510      	push	{r4, lr}
 80120c8:	4604      	mov	r4, r0
 80120ca:	210c      	movs	r1, #12
 80120cc:	f00e fa0f 	bl	80204ee <_ZdlPvj>
 80120d0:	4620      	mov	r0, r4
 80120d2:	bd10      	pop	{r4, pc}

080120d4 <_ZN8touchgfx9DragEventD0Ev>:
 80120d4:	b510      	push	{r4, lr}
 80120d6:	4604      	mov	r4, r0
 80120d8:	2110      	movs	r1, #16
 80120da:	f00e fa08 	bl	80204ee <_ZdlPvj>
 80120de:	4620      	mov	r0, r4
 80120e0:	bd10      	pop	{r4, pc}

080120e2 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80120e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e4:	4604      	mov	r4, r0
 80120e6:	4608      	mov	r0, r1
 80120e8:	460d      	mov	r5, r1
 80120ea:	f7ff ff0a 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 80120ee:	b978      	cbnz	r0, 8012110 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80120f0:	4620      	mov	r0, r4
 80120f2:	f7ff ff06 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 80120f6:	f9b5 6000 	ldrsh.w	r6, [r5]
 80120fa:	b150      	cbz	r0, 8012112 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80120fc:	8026      	strh	r6, [r4, #0]
 80120fe:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012102:	8063      	strh	r3, [r4, #2]
 8012104:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012108:	80a3      	strh	r3, [r4, #4]
 801210a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801210e:	80e3      	strh	r3, [r4, #6]
 8012110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012112:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012116:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801211a:	42b1      	cmp	r1, r6
 801211c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012120:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012124:	460f      	mov	r7, r1
 8012126:	88ed      	ldrh	r5, [r5, #6]
 8012128:	bfa8      	it	ge
 801212a:	4637      	movge	r7, r6
 801212c:	4293      	cmp	r3, r2
 801212e:	4618      	mov	r0, r3
 8012130:	4466      	add	r6, ip
 8012132:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012136:	bfa8      	it	ge
 8012138:	4610      	movge	r0, r2
 801213a:	442a      	add	r2, r5
 801213c:	88e5      	ldrh	r5, [r4, #6]
 801213e:	4461      	add	r1, ip
 8012140:	b236      	sxth	r6, r6
 8012142:	8027      	strh	r7, [r4, #0]
 8012144:	442b      	add	r3, r5
 8012146:	b209      	sxth	r1, r1
 8012148:	b212      	sxth	r2, r2
 801214a:	8060      	strh	r0, [r4, #2]
 801214c:	b21b      	sxth	r3, r3
 801214e:	428e      	cmp	r6, r1
 8012150:	bfac      	ite	ge
 8012152:	ebc7 0106 	rsbge	r1, r7, r6
 8012156:	ebc7 0101 	rsblt	r1, r7, r1
 801215a:	429a      	cmp	r2, r3
 801215c:	bfac      	ite	ge
 801215e:	ebc0 0202 	rsbge	r2, r0, r2
 8012162:	ebc0 0203 	rsblt	r2, r0, r3
 8012166:	80a1      	strh	r1, [r4, #4]
 8012168:	80e2      	strh	r2, [r4, #6]
 801216a:	e7d1      	b.n	8012110 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801216c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801216c:	4770      	bx	lr

0801216e <_ZN8touchgfx3HAL10FlushCacheEv>:
 801216e:	4770      	bx	lr

08012170 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012170:	6803      	ldr	r3, [r0, #0]
 8012172:	b513      	push	{r0, r1, r4, lr}
 8012174:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8012178:	2300      	movs	r3, #0
 801217a:	e9cd 3300 	strd	r3, r3, [sp]
 801217e:	466b      	mov	r3, sp
 8012180:	47a0      	blx	r4
 8012182:	b002      	add	sp, #8
 8012184:	bd10      	pop	{r4, pc}

08012186 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012186:	2301      	movs	r3, #1
 8012188:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801218c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012190:	4770      	bx	lr

08012192 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012192:	2301      	movs	r3, #1
 8012194:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012198:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801219c:	4770      	bx	lr

0801219e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801219e:	6843      	ldr	r3, [r0, #4]
 80121a0:	2201      	movs	r2, #1
 80121a2:	725a      	strb	r2, [r3, #9]
 80121a4:	6840      	ldr	r0, [r0, #4]
 80121a6:	6803      	ldr	r3, [r0, #0]
 80121a8:	691b      	ldr	r3, [r3, #16]
 80121aa:	4718      	bx	r3

080121ac <_ZN8touchgfx3HAL8flushDMAEv>:
 80121ac:	6840      	ldr	r0, [r0, #4]
 80121ae:	6803      	ldr	r3, [r0, #0]
 80121b0:	689b      	ldr	r3, [r3, #8]
 80121b2:	4718      	bx	r3

080121b4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80121b4:	b530      	push	{r4, r5, lr}
 80121b6:	b08b      	sub	sp, #44	; 0x2c
 80121b8:	6804      	ldr	r4, [r0, #0]
 80121ba:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80121be:	9509      	str	r5, [sp, #36]	; 0x24
 80121c0:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80121c4:	9508      	str	r5, [sp, #32]
 80121c6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80121ca:	9507      	str	r5, [sp, #28]
 80121cc:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80121d0:	9506      	str	r5, [sp, #24]
 80121d2:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80121d6:	9505      	str	r5, [sp, #20]
 80121d8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80121dc:	9504      	str	r5, [sp, #16]
 80121de:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80121e2:	9503      	str	r5, [sp, #12]
 80121e4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80121e8:	9502      	str	r5, [sp, #8]
 80121ea:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80121ee:	e9cd 3500 	strd	r3, r5, [sp]
 80121f2:	4613      	mov	r3, r2
 80121f4:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80121f6:	2200      	movs	r2, #0
 80121f8:	47a0      	blx	r4
 80121fa:	b00b      	add	sp, #44	; 0x2c
 80121fc:	bd30      	pop	{r4, r5, pc}
	...

08012200 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012200:	4b04      	ldr	r3, [pc, #16]	; (8012214 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	b123      	cbz	r3, 8012210 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012206:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801220a:	f080 0001 	eor.w	r0, r0, #1
 801220e:	4770      	bx	lr
 8012210:	2001      	movs	r0, #1
 8012212:	4770      	bx	lr
 8012214:	2400c852 	.word	0x2400c852

08012218 <_ZN8touchgfx3HAL8endFrameEv>:
 8012218:	b510      	push	{r4, lr}
 801221a:	4604      	mov	r4, r0
 801221c:	6840      	ldr	r0, [r0, #4]
 801221e:	6803      	ldr	r3, [r0, #0]
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	4798      	blx	r3
 8012224:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8012228:	b113      	cbz	r3, 8012230 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801222a:	2301      	movs	r3, #1
 801222c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012230:	bd10      	pop	{r4, pc}

08012232 <_ZN8touchgfx3HAL10initializeEv>:
 8012232:	b510      	push	{r4, lr}
 8012234:	4604      	mov	r4, r0
 8012236:	f7ee fb1f 	bl	8000878 <_ZN8touchgfx10OSWrappers10initializeEv>
 801223a:	6860      	ldr	r0, [r4, #4]
 801223c:	6803      	ldr	r3, [r0, #0]
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	4798      	blx	r3
 8012242:	68e0      	ldr	r0, [r4, #12]
 8012244:	6803      	ldr	r3, [r0, #0]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	4798      	blx	r3
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	4620      	mov	r0, r4
 801224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012254:	4718      	bx	r3

08012256 <_ZN8touchgfx3HAL9taskEntryEv>:
 8012256:	b508      	push	{r3, lr}
 8012258:	6803      	ldr	r3, [r0, #0]
 801225a:	4604      	mov	r4, r0
 801225c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012260:	4798      	blx	r3
 8012262:	6823      	ldr	r3, [r4, #0]
 8012264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012266:	4620      	mov	r0, r4
 8012268:	4798      	blx	r3
 801226a:	f7ee fb61 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801226e:	6823      	ldr	r3, [r4, #0]
 8012270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012272:	e7f8      	b.n	8012266 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08012274 <_ZN8touchgfx3HAL4tickEv>:
 8012274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012276:	6803      	ldr	r3, [r0, #0]
 8012278:	4604      	mov	r4, r0
 801227a:	4d5b      	ldr	r5, [pc, #364]	; (80123e8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801227c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012280:	4798      	blx	r3
 8012282:	2800      	cmp	r0, #0
 8012284:	f000 8095 	beq.w	80123b2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8012288:	2001      	movs	r0, #1
 801228a:	2600      	movs	r6, #0
 801228c:	f7ee f91a 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012290:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8012294:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8012298:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801229c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80122a0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80122a4:	b133      	cbz	r3, 80122b4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	4620      	mov	r0, r4
 80122aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80122ae:	4798      	blx	r3
 80122b0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80122b4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80122b8:	2601      	movs	r6, #1
 80122ba:	6862      	ldr	r2, [r4, #4]
 80122bc:	f083 0301 	eor.w	r3, r3, #1
 80122c0:	702e      	strb	r6, [r5, #0]
 80122c2:	7253      	strb	r3, [r2, #9]
 80122c4:	f003 fb86 	bl	80159d4 <_ZN8touchgfx11Application11getInstanceEv>
 80122c8:	6803      	ldr	r3, [r0, #0]
 80122ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122cc:	4798      	blx	r3
 80122ce:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80122d2:	b90b      	cbnz	r3, 80122d8 <_ZN8touchgfx3HAL4tickEv+0x64>
 80122d4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80122d8:	f003 fb7c 	bl	80159d4 <_ZN8touchgfx11Application11getInstanceEv>
 80122dc:	6803      	ldr	r3, [r0, #0]
 80122de:	695b      	ldr	r3, [r3, #20]
 80122e0:	4798      	blx	r3
 80122e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122e4:	6803      	ldr	r3, [r0, #0]
 80122e6:	691b      	ldr	r3, [r3, #16]
 80122e8:	4798      	blx	r3
 80122ea:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80122ee:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80122f2:	3b01      	subs	r3, #1
 80122f4:	b2db      	uxtb	r3, r3
 80122f6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80122fa:	b10a      	cbz	r2, 8012300 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d1eb      	bne.n	80122d8 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012300:	4a3a      	ldr	r2, [pc, #232]	; (80123ec <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012302:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8012306:	7813      	ldrb	r3, [r2, #0]
 8012308:	3301      	adds	r3, #1
 801230a:	b25b      	sxtb	r3, r3
 801230c:	4299      	cmp	r1, r3
 801230e:	7013      	strb	r3, [r2, #0]
 8012310:	dc10      	bgt.n	8012334 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012312:	2300      	movs	r3, #0
 8012314:	68e0      	ldr	r0, [r4, #12]
 8012316:	a902      	add	r1, sp, #8
 8012318:	7013      	strb	r3, [r2, #0]
 801231a:	aa03      	add	r2, sp, #12
 801231c:	6803      	ldr	r3, [r0, #0]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	4798      	blx	r3
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	2800      	cmp	r0, #0
 8012326:	d050      	beq.n	80123ca <_ZN8touchgfx3HAL4tickEv+0x156>
 8012328:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801232c:	4620      	mov	r0, r4
 801232e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012332:	4798      	blx	r3
 8012334:	2300      	movs	r3, #0
 8012336:	6960      	ldr	r0, [r4, #20]
 8012338:	f88d 3007 	strb.w	r3, [sp, #7]
 801233c:	b158      	cbz	r0, 8012356 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801233e:	6803      	ldr	r3, [r0, #0]
 8012340:	f10d 0107 	add.w	r1, sp, #7
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	4798      	blx	r3
 8012348:	b128      	cbz	r0, 8012356 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801234a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801234c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012350:	6803      	ldr	r3, [r0, #0]
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	4798      	blx	r3
 8012356:	f104 001c 	add.w	r0, r4, #28
 801235a:	f00e f813 	bl	8020384 <_ZN8touchgfx8Gestures4tickEv>
 801235e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8012362:	b30b      	cbz	r3, 80123a8 <_ZN8touchgfx3HAL4tickEv+0x134>
 8012364:	6920      	ldr	r0, [r4, #16]
 8012366:	6803      	ldr	r3, [r0, #0]
 8012368:	691b      	ldr	r3, [r3, #16]
 801236a:	4798      	blx	r3
 801236c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801236e:	4606      	mov	r6, r0
 8012370:	b903      	cbnz	r3, 8012374 <_ZN8touchgfx3HAL4tickEv+0x100>
 8012372:	6720      	str	r0, [r4, #112]	; 0x70
 8012374:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012376:	4a1e      	ldr	r2, [pc, #120]	; (80123f0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8012378:	1af3      	subs	r3, r6, r3
 801237a:	4293      	cmp	r3, r2
 801237c:	d914      	bls.n	80123a8 <_ZN8touchgfx3HAL4tickEv+0x134>
 801237e:	6920      	ldr	r0, [r4, #16]
 8012380:	6803      	ldr	r3, [r0, #0]
 8012382:	699b      	ldr	r3, [r3, #24]
 8012384:	4798      	blx	r3
 8012386:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012388:	2264      	movs	r2, #100	; 0x64
 801238a:	1af3      	subs	r3, r6, r3
 801238c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012390:	fbb0 f0f3 	udiv	r0, r0, r3
 8012394:	2800      	cmp	r0, #0
 8012396:	dc1d      	bgt.n	80123d4 <_ZN8touchgfx3HAL4tickEv+0x160>
 8012398:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801239c:	6920      	ldr	r0, [r4, #16]
 801239e:	2100      	movs	r1, #0
 80123a0:	6803      	ldr	r3, [r0, #0]
 80123a2:	69db      	ldr	r3, [r3, #28]
 80123a4:	4798      	blx	r3
 80123a6:	6726      	str	r6, [r4, #112]	; 0x70
 80123a8:	f003 fb14 	bl	80159d4 <_ZN8touchgfx11Application11getInstanceEv>
 80123ac:	6803      	ldr	r3, [r0, #0]
 80123ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b0:	4798      	blx	r3
 80123b2:	6823      	ldr	r3, [r4, #0]
 80123b4:	4620      	mov	r0, r4
 80123b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80123ba:	4798      	blx	r3
 80123bc:	2001      	movs	r0, #1
 80123be:	f7ee f8bf 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80123c2:	2300      	movs	r3, #0
 80123c4:	702b      	strb	r3, [r5, #0]
 80123c6:	b004      	add	sp, #16
 80123c8:	bd70      	pop	{r4, r5, r6, pc}
 80123ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80123ce:	4620      	mov	r0, r4
 80123d0:	4798      	blx	r3
 80123d2:	e7af      	b.n	8012334 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80123d4:	2863      	cmp	r0, #99	; 0x63
 80123d6:	bfcb      	itete	gt
 80123d8:	2300      	movgt	r3, #0
 80123da:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80123de:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80123e2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80123e6:	e7d9      	b.n	801239c <_ZN8touchgfx3HAL4tickEv+0x128>
 80123e8:	2400c858 	.word	0x2400c858
 80123ec:	2400c859 	.word	0x2400c859
 80123f0:	05f5e100 	.word	0x05f5e100

080123f4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80123f4:	f7ee ba74 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080123f8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80123f8:	6581      	str	r1, [r0, #88]	; 0x58
 80123fa:	301c      	adds	r0, #28
 80123fc:	f00d bfc0 	b.w	8020380 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012400 <_ZN8touchgfx3HAL5touchEll>:
 8012400:	b530      	push	{r4, r5, lr}
 8012402:	b087      	sub	sp, #28
 8012404:	4604      	mov	r4, r0
 8012406:	a804      	add	r0, sp, #16
 8012408:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801240c:	f003 f8c6 	bl	801559c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012410:	9b04      	ldr	r3, [sp, #16]
 8012412:	a906      	add	r1, sp, #24
 8012414:	a803      	add	r0, sp, #12
 8012416:	f8ad 300c 	strh.w	r3, [sp, #12]
 801241a:	9b05      	ldr	r3, [sp, #20]
 801241c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012420:	f003 f90e 	bl	8015640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012424:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8012428:	f104 001c 	add.w	r0, r4, #28
 801242c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012430:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012434:	b189      	cbz	r1, 801245a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8012436:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801243a:	9300      	str	r3, [sp, #0]
 801243c:	4613      	mov	r3, r2
 801243e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8012442:	462a      	mov	r2, r5
 8012444:	f00d ffac 	bl	80203a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012448:	b128      	cbz	r0, 8012456 <_ZN8touchgfx3HAL5touchEll+0x56>
 801244a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801244e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8012450:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012454:	6623      	str	r3, [r4, #96]	; 0x60
 8012456:	b007      	add	sp, #28
 8012458:	bd30      	pop	{r4, r5, pc}
 801245a:	f00d ffe1 	bl	8020420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801245e:	2301      	movs	r3, #1
 8012460:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012464:	e7f1      	b.n	801244a <_ZN8touchgfx3HAL5touchEll+0x4a>

08012466 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8012466:	b510      	push	{r4, lr}
 8012468:	2b00      	cmp	r3, #0
 801246a:	d046      	beq.n	80124fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801246c:	ea81 0002 	eor.w	r0, r1, r2
 8012470:	07c4      	lsls	r4, r0, #31
 8012472:	d508      	bpl.n	8012486 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012474:	440b      	add	r3, r1
 8012476:	3a01      	subs	r2, #1
 8012478:	428b      	cmp	r3, r1
 801247a:	d93e      	bls.n	80124fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801247c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012480:	f801 0b01 	strb.w	r0, [r1], #1
 8012484:	e7f8      	b.n	8012478 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8012486:	07d0      	lsls	r0, r2, #31
 8012488:	bf42      	ittt	mi
 801248a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801248e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012492:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012496:	2b01      	cmp	r3, #1
 8012498:	d911      	bls.n	80124be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801249a:	ea81 0402 	eor.w	r4, r1, r2
 801249e:	4610      	mov	r0, r2
 80124a0:	07a4      	lsls	r4, r4, #30
 80124a2:	d022      	beq.n	80124ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80124a4:	f023 0401 	bic.w	r4, r3, #1
 80124a8:	440c      	add	r4, r1
 80124aa:	428c      	cmp	r4, r1
 80124ac:	4602      	mov	r2, r0
 80124ae:	d904      	bls.n	80124ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80124b0:	8812      	ldrh	r2, [r2, #0]
 80124b2:	3002      	adds	r0, #2
 80124b4:	f821 2b02 	strh.w	r2, [r1], #2
 80124b8:	e7f7      	b.n	80124aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80124ba:	f003 0301 	and.w	r3, r3, #1
 80124be:	f023 0003 	bic.w	r0, r3, #3
 80124c2:	4408      	add	r0, r1
 80124c4:	4288      	cmp	r0, r1
 80124c6:	4614      	mov	r4, r2
 80124c8:	d904      	bls.n	80124d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80124ca:	6824      	ldr	r4, [r4, #0]
 80124cc:	3204      	adds	r2, #4
 80124ce:	f841 4b04 	str.w	r4, [r1], #4
 80124d2:	e7f7      	b.n	80124c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80124d4:	f003 0303 	and.w	r3, r3, #3
 80124d8:	3a01      	subs	r2, #1
 80124da:	440b      	add	r3, r1
 80124dc:	428b      	cmp	r3, r1
 80124de:	d90c      	bls.n	80124fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80124e0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80124e4:	f801 0b01 	strb.w	r0, [r1], #1
 80124e8:	e7f8      	b.n	80124dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80124ea:	0790      	lsls	r0, r2, #30
 80124ec:	d0e7      	beq.n	80124be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80124ee:	f832 0b02 	ldrh.w	r0, [r2], #2
 80124f2:	3b02      	subs	r3, #2
 80124f4:	f821 0b02 	strh.w	r0, [r1], #2
 80124f8:	e7e1      	b.n	80124be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80124fa:	2001      	movs	r0, #1
 80124fc:	bd10      	pop	{r4, pc}

080124fe <_ZN8touchgfx3HAL7noTouchEv>:
 80124fe:	b510      	push	{r4, lr}
 8012500:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8012504:	4604      	mov	r4, r0
 8012506:	b153      	cbz	r3, 801251e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012508:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801250c:	2101      	movs	r1, #1
 801250e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8012512:	301c      	adds	r0, #28
 8012514:	f00d ff84 	bl	8020420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012518:	2300      	movs	r3, #0
 801251a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801251e:	bd10      	pop	{r4, pc}

08012520 <_ZN8touchgfx3HAL3lcdEv>:
 8012520:	4b04      	ldr	r3, [pc, #16]	; (8012534 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012528:	b10a      	cbz	r2, 801252e <_ZN8touchgfx3HAL3lcdEv+0xe>
 801252a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801252c:	b900      	cbnz	r0, 8012530 <_ZN8touchgfx3HAL3lcdEv+0x10>
 801252e:	6898      	ldr	r0, [r3, #8]
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	2400c854 	.word	0x2400c854

08012538 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801253c:	b085      	sub	sp, #20
 801253e:	4604      	mov	r4, r0
 8012540:	2000      	movs	r0, #0
 8012542:	4699      	mov	r9, r3
 8012544:	ad04      	add	r5, sp, #16
 8012546:	460f      	mov	r7, r1
 8012548:	4690      	mov	r8, r2
 801254a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801254e:	69a0      	ldr	r0, [r4, #24]
 8012550:	6806      	ldr	r6, [r0, #0]
 8012552:	9501      	str	r5, [sp, #4]
 8012554:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8012558:	9500      	str	r5, [sp, #0]
 801255a:	6835      	ldr	r5, [r6, #0]
 801255c:	47a8      	blx	r5
 801255e:	4d10      	ldr	r5, [pc, #64]	; (80125a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8012560:	4606      	mov	r6, r0
 8012562:	f8a5 9000 	strh.w	r9, [r5]
 8012566:	f7ff ffdb 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 801256a:	6803      	ldr	r3, [r0, #0]
 801256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801256e:	4798      	blx	r3
 8012570:	b128      	cbz	r0, 801257e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012572:	2801      	cmp	r0, #1
 8012574:	d00b      	beq.n	801258e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012576:	4630      	mov	r0, r6
 8012578:	b005      	add	sp, #20
 801257a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801257e:	882b      	ldrh	r3, [r5, #0]
 8012580:	fb08 7203 	mla	r2, r8, r3, r7
 8012584:	9b03      	ldr	r3, [sp, #12]
 8012586:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801258a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801258c:	e7f3      	b.n	8012576 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801258e:	882a      	ldrh	r2, [r5, #0]
 8012590:	9b03      	ldr	r3, [sp, #12]
 8012592:	fb08 7202 	mla	r2, r8, r2, r7
 8012596:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801259a:	1a9a      	subs	r2, r3, r2
 801259c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801259e:	e7ea      	b.n	8012576 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80125a0:	2400c84e 	.word	0x2400c84e

080125a4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80125a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125a6:	b08b      	sub	sp, #44	; 0x2c
 80125a8:	4617      	mov	r7, r2
 80125aa:	4604      	mov	r4, r0
 80125ac:	460e      	mov	r6, r1
 80125ae:	461d      	mov	r5, r3
 80125b0:	f7ff ffb6 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 80125b4:	6803      	ldr	r3, [r0, #0]
 80125b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b8:	4798      	blx	r3
 80125ba:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80125be:	9007      	str	r0, [sp, #28]
 80125c0:	4631      	mov	r1, r6
 80125c2:	6822      	ldr	r2, [r4, #0]
 80125c4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80125c8:	4b0c      	ldr	r3, [pc, #48]	; (80125fc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80125ca:	4620      	mov	r0, r4
 80125cc:	881b      	ldrh	r3, [r3, #0]
 80125ce:	9306      	str	r3, [sp, #24]
 80125d0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80125d4:	9305      	str	r3, [sp, #20]
 80125d6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80125da:	9304      	str	r3, [sp, #16]
 80125dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80125e0:	9303      	str	r3, [sp, #12]
 80125e2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80125e6:	9302      	str	r3, [sp, #8]
 80125e8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80125ec:	e9cd 5300 	strd	r5, r3, [sp]
 80125f0:	463b      	mov	r3, r7
 80125f2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80125f4:	2200      	movs	r2, #0
 80125f6:	47a8      	blx	r5
 80125f8:	b00b      	add	sp, #44	; 0x2c
 80125fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125fc:	2400c84e 	.word	0x2400c84e

08012600 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012604:	4698      	mov	r8, r3
 8012606:	6803      	ldr	r3, [r0, #0]
 8012608:	b08b      	sub	sp, #44	; 0x2c
 801260a:	4617      	mov	r7, r2
 801260c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801260e:	460e      	mov	r6, r1
 8012610:	4b13      	ldr	r3, [pc, #76]	; (8012660 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8012612:	4604      	mov	r4, r0
 8012614:	f8b3 9000 	ldrh.w	r9, [r3]
 8012618:	f7ff ff82 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 801261c:	6803      	ldr	r3, [r0, #0]
 801261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012620:	4798      	blx	r3
 8012622:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012626:	2200      	movs	r2, #0
 8012628:	4631      	mov	r1, r6
 801262a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801262e:	2302      	movs	r3, #2
 8012630:	4620      	mov	r0, r4
 8012632:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012636:	2301      	movs	r3, #1
 8012638:	9305      	str	r3, [sp, #20]
 801263a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801263e:	9304      	str	r3, [sp, #16]
 8012640:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012644:	9303      	str	r3, [sp, #12]
 8012646:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801264a:	9302      	str	r3, [sp, #8]
 801264c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012650:	e9cd 8300 	strd	r8, r3, [sp]
 8012654:	463b      	mov	r3, r7
 8012656:	47a8      	blx	r5
 8012658:	b00b      	add	sp, #44	; 0x2c
 801265a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801265e:	bf00      	nop
 8012660:	2400c84e 	.word	0x2400c84e

08012664 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012668:	4698      	mov	r8, r3
 801266a:	6803      	ldr	r3, [r0, #0]
 801266c:	b087      	sub	sp, #28
 801266e:	460e      	mov	r6, r1
 8012670:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8012672:	4617      	mov	r7, r2
 8012674:	4b0f      	ldr	r3, [pc, #60]	; (80126b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012676:	4604      	mov	r4, r0
 8012678:	f8b3 9000 	ldrh.w	r9, [r3]
 801267c:	f7ff ff50 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 8012680:	6803      	ldr	r3, [r0, #0]
 8012682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012684:	4798      	blx	r3
 8012686:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801268a:	463a      	mov	r2, r7
 801268c:	4631      	mov	r1, r6
 801268e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012692:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8012696:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801269a:	4620      	mov	r0, r4
 801269c:	9302      	str	r3, [sp, #8]
 801269e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80126a2:	9301      	str	r3, [sp, #4]
 80126a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80126a8:	9300      	str	r3, [sp, #0]
 80126aa:	4643      	mov	r3, r8
 80126ac:	47a8      	blx	r5
 80126ae:	b007      	add	sp, #28
 80126b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126b4:	2400c84e 	.word	0x2400c84e

080126b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80126b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126bc:	4604      	mov	r4, r0
 80126be:	b08f      	sub	sp, #60	; 0x3c
 80126c0:	4610      	mov	r0, r2
 80126c2:	460d      	mov	r5, r1
 80126c4:	4691      	mov	r9, r2
 80126c6:	461e      	mov	r6, r3
 80126c8:	f005 fcf2 	bl	80180b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80126cc:	2800      	cmp	r0, #0
 80126ce:	f000 809d 	beq.w	801280c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80126d2:	6823      	ldr	r3, [r4, #0]
 80126d4:	4620      	mov	r0, r4
 80126d6:	f8df b198 	ldr.w	fp, [pc, #408]	; 8012870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80126da:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80126de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126e0:	4798      	blx	r3
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	4620      	mov	r0, r4
 80126e6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8012874 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80126ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126ec:	4798      	blx	r3
 80126ee:	f8bb 3000 	ldrh.w	r3, [fp]
 80126f2:	4f5c      	ldr	r7, [pc, #368]	; (8012864 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80126f4:	9301      	str	r3, [sp, #4]
 80126f6:	f8ba 3000 	ldrh.w	r3, [sl]
 80126fa:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80126fe:	4640      	mov	r0, r8
 8012700:	9302      	str	r3, [sp, #8]
 8012702:	883b      	ldrh	r3, [r7, #0]
 8012704:	9303      	str	r3, [sp, #12]
 8012706:	4b58      	ldr	r3, [pc, #352]	; (8012868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012708:	881a      	ldrh	r2, [r3, #0]
 801270a:	9305      	str	r3, [sp, #20]
 801270c:	9204      	str	r2, [sp, #16]
 801270e:	f005 fe13 	bl	8018338 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012712:	8038      	strh	r0, [r7, #0]
 8012714:	4640      	mov	r0, r8
 8012716:	f005 fe43 	bl	80183a0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801271a:	9b05      	ldr	r3, [sp, #20]
 801271c:	b280      	uxth	r0, r0
 801271e:	8018      	strh	r0, [r3, #0]
 8012720:	4b52      	ldr	r3, [pc, #328]	; (801286c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d174      	bne.n	8012812 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012728:	883b      	ldrh	r3, [r7, #0]
 801272a:	f8aa 0000 	strh.w	r0, [sl]
 801272e:	f8ab 3000 	strh.w	r3, [fp]
 8012732:	4648      	mov	r0, r9
 8012734:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8012738:	f005 fcba 	bl	80180b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801273c:	2200      	movs	r2, #0
 801273e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012742:	4611      	mov	r1, r2
 8012744:	4628      	mov	r0, r5
 8012746:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801274a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801274e:	f7ff fc9a 	bl	8012086 <_ZN8touchgfx8Drawable5setXYEss>
 8012752:	2301      	movs	r3, #1
 8012754:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8012758:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801275c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012760:	2b00      	cmp	r3, #0
 8012762:	dd5c      	ble.n	801281e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012764:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012768:	2b00      	cmp	r3, #0
 801276a:	dd58      	ble.n	801281e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801276c:	462a      	mov	r2, r5
 801276e:	ab0a      	add	r3, sp, #40	; 0x28
 8012770:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012774:	6851      	ldr	r1, [r2, #4]
 8012776:	c303      	stmia	r3!, {r0, r1}
 8012778:	4631      	mov	r1, r6
 801277a:	a80a      	add	r0, sp, #40	; 0x28
 801277c:	f7ff fb7e 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8012780:	4b38      	ldr	r3, [pc, #224]	; (8012864 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012782:	2100      	movs	r1, #0
 8012784:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012788:	4b37      	ldr	r3, [pc, #220]	; (8012868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801278a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801278e:	aa0a      	add	r2, sp, #40	; 0x28
 8012790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012794:	910c      	str	r1, [sp, #48]	; 0x30
 8012796:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801279a:	ab08      	add	r3, sp, #32
 801279c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80127a4:	4618      	mov	r0, r3
 80127a6:	a90c      	add	r1, sp, #48	; 0x30
 80127a8:	f7ff fb68 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 80127ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d13c      	bne.n	801282c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80127b2:	2000      	movs	r0, #0
 80127b4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80127b8:	2600      	movs	r6, #0
 80127ba:	696b      	ldr	r3, [r5, #20]
 80127bc:	a908      	add	r1, sp, #32
 80127be:	682a      	ldr	r2, [r5, #0]
 80127c0:	4628      	mov	r0, r5
 80127c2:	9305      	str	r3, [sp, #20]
 80127c4:	616e      	str	r6, [r5, #20]
 80127c6:	6892      	ldr	r2, [r2, #8]
 80127c8:	4790      	blx	r2
 80127ca:	9b05      	ldr	r3, [sp, #20]
 80127cc:	4652      	mov	r2, sl
 80127ce:	4649      	mov	r1, r9
 80127d0:	616b      	str	r3, [r5, #20]
 80127d2:	4628      	mov	r0, r5
 80127d4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80127d8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80127dc:	f7ff fc53 	bl	8012086 <_ZN8touchgfx8Drawable5setXYEss>
 80127e0:	9a01      	ldr	r2, [sp, #4]
 80127e2:	4b23      	ldr	r3, [pc, #140]	; (8012870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80127e4:	4620      	mov	r0, r4
 80127e6:	801a      	strh	r2, [r3, #0]
 80127e8:	9a02      	ldr	r2, [sp, #8]
 80127ea:	4b22      	ldr	r3, [pc, #136]	; (8012874 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80127ec:	801a      	strh	r2, [r3, #0]
 80127ee:	9a03      	ldr	r2, [sp, #12]
 80127f0:	4b1c      	ldr	r3, [pc, #112]	; (8012864 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80127f2:	801a      	strh	r2, [r3, #0]
 80127f4:	4b1c      	ldr	r3, [pc, #112]	; (8012868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80127f6:	9a04      	ldr	r2, [sp, #16]
 80127f8:	801a      	strh	r2, [r3, #0]
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8012800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012802:	4798      	blx	r3
 8012804:	6823      	ldr	r3, [r4, #0]
 8012806:	4620      	mov	r0, r4
 8012808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801280a:	4798      	blx	r3
 801280c:	b00f      	add	sp, #60	; 0x3c
 801280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012812:	883b      	ldrh	r3, [r7, #0]
 8012814:	f8ab 0000 	strh.w	r0, [fp]
 8012818:	f8aa 3000 	strh.w	r3, [sl]
 801281c:	e789      	b.n	8012732 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801281e:	462a      	mov	r2, r5
 8012820:	ab0a      	add	r3, sp, #40	; 0x28
 8012822:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012826:	6851      	ldr	r1, [r2, #4]
 8012828:	c303      	stmia	r3!, {r0, r1}
 801282a:	e7a9      	b.n	8012780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801282c:	a807      	add	r0, sp, #28
 801282e:	f005 febb 	bl	80185a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012832:	4606      	mov	r6, r0
 8012834:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012836:	6803      	ldr	r3, [r0, #0]
 8012838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801283a:	4798      	blx	r3
 801283c:	4286      	cmp	r6, r0
 801283e:	d1b8      	bne.n	80127b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012840:	f7ff fe6e 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 8012844:	6803      	ldr	r3, [r0, #0]
 8012846:	4606      	mov	r6, r0
 8012848:	a807      	add	r0, sp, #28
 801284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801284c:	9305      	str	r3, [sp, #20]
 801284e:	f005 feab 	bl	80185a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012852:	9b05      	ldr	r3, [sp, #20]
 8012854:	4601      	mov	r1, r0
 8012856:	4630      	mov	r0, r6
 8012858:	4798      	blx	r3
 801285a:	f080 0001 	eor.w	r0, r0, #1
 801285e:	b2c0      	uxtb	r0, r0
 8012860:	e7a8      	b.n	80127b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8012862:	bf00      	nop
 8012864:	2400c848 	.word	0x2400c848
 8012868:	2400c84a 	.word	0x2400c84a
 801286c:	2400c84c 	.word	0x2400c84c
 8012870:	2400c84e 	.word	0x2400c84e
 8012874:	2400c850 	.word	0x2400c850

08012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012878:	4b07      	ldr	r3, [pc, #28]	; (8012898 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801287a:	b510      	push	{r4, lr}
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	4604      	mov	r4, r0
 8012880:	b13b      	cbz	r3, 8012892 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012882:	6803      	ldr	r3, [r0, #0]
 8012884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012886:	4798      	blx	r3
 8012888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801288a:	4283      	cmp	r3, r0
 801288c:	d101      	bne.n	8012892 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801288e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012890:	bd10      	pop	{r4, pc}
 8012892:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012894:	e7fc      	b.n	8012890 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012896:	bf00      	nop
 8012898:	2400c852 	.word	0x2400c852

0801289c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128a0:	461d      	mov	r5, r3
 80128a2:	b08a      	sub	sp, #40	; 0x28
 80128a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128a8:	4690      	mov	r8, r2
 80128aa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80128ae:	2400      	movs	r4, #0
 80128b0:	4607      	mov	r7, r0
 80128b2:	fb06 8505 	mla	r5, r6, r5, r8
 80128b6:	9404      	str	r4, [sp, #16]
 80128b8:	f88d 4020 	strb.w	r4, [sp, #32]
 80128bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80128c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80128c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80128c8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80128cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80128d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80128d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80128d8:	f7ff ffce 	bl	8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80128dc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80128e6:	a901      	add	r1, sp, #4
 80128e8:	9505      	str	r5, [sp, #20]
 80128ea:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80128ee:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80128f2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80128f6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80128fa:	6803      	ldr	r3, [r0, #0]
 80128fc:	685b      	ldr	r3, [r3, #4]
 80128fe:	4798      	blx	r3
 8012900:	b00a      	add	sp, #40	; 0x28
 8012902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012906 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012906:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801290a:	b08b      	sub	sp, #44	; 0x2c
 801290c:	2400      	movs	r4, #0
 801290e:	4691      	mov	r9, r2
 8012910:	461d      	mov	r5, r3
 8012912:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8012916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801291a:	4688      	mov	r8, r1
 801291c:	4607      	mov	r7, r0
 801291e:	9404      	str	r4, [sp, #16]
 8012920:	fb06 9505 	mla	r5, r6, r5, r9
 8012924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012928:	f7ff ffa6 	bl	8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801292c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012930:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f8ad 3018 	strh.w	r3, [sp, #24]
 801293a:	a901      	add	r1, sp, #4
 801293c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012940:	9505      	str	r5, [sp, #20]
 8012942:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012946:	f8ad 401c 	strh.w	r4, [sp, #28]
 801294a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801294e:	f8cd 8010 	str.w	r8, [sp, #16]
 8012952:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012956:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801295a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801295e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012962:	6803      	ldr	r3, [r0, #0]
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	4798      	blx	r3
 8012968:	b00b      	add	sp, #44	; 0x2c
 801296a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012970 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012974:	b08a      	sub	sp, #40	; 0x28
 8012976:	4698      	mov	r8, r3
 8012978:	2300      	movs	r3, #0
 801297a:	4606      	mov	r6, r0
 801297c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012980:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8012984:	2d0b      	cmp	r5, #11
 8012986:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801298a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801298e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8012992:	9304      	str	r3, [sp, #16]
 8012994:	d137      	bne.n	8012a06 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8012996:	2380      	movs	r3, #128	; 0x80
 8012998:	f88d 0020 	strb.w	r0, [sp, #32]
 801299c:	4630      	mov	r0, r6
 801299e:	9203      	str	r2, [sp, #12]
 80129a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80129a4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80129a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80129ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80129b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80129b4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80129b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80129bc:	f7ff ff5c 	bl	8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80129c0:	2c0b      	cmp	r4, #11
 80129c2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80129c6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80129ca:	bf94      	ite	ls
 80129cc:	4b19      	ldrls	r3, [pc, #100]	; (8012a34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80129ce:	2100      	movhi	r1, #0
 80129d0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80129d4:	bf98      	it	ls
 80129d6:	5d19      	ldrbls	r1, [r3, r4]
 80129d8:	fb02 8307 	mla	r3, r2, r7, r8
 80129dc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80129e0:	10c9      	asrs	r1, r1, #3
 80129e2:	fb01 0003 	mla	r0, r1, r3, r0
 80129e6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80129ea:	a901      	add	r1, sp, #4
 80129ec:	9005      	str	r0, [sp, #20]
 80129ee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80129f2:	2300      	movs	r3, #0
 80129f4:	6870      	ldr	r0, [r6, #4]
 80129f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80129fa:	6803      	ldr	r3, [r0, #0]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	4798      	blx	r3
 8012a00:	b00a      	add	sp, #40	; 0x28
 8012a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a06:	2d02      	cmp	r5, #2
 8012a08:	d109      	bne.n	8012a1e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8012a0a:	28ff      	cmp	r0, #255	; 0xff
 8012a0c:	d105      	bne.n	8012a1a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8012a0e:	f1bc 0f00 	cmp.w	ip, #0
 8012a12:	bf14      	ite	ne
 8012a14:	2340      	movne	r3, #64	; 0x40
 8012a16:	2320      	moveq	r3, #32
 8012a18:	e7be      	b.n	8012998 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012a1a:	2340      	movs	r3, #64	; 0x40
 8012a1c:	e7bc      	b.n	8012998 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012a1e:	28ff      	cmp	r0, #255	; 0xff
 8012a20:	d105      	bne.n	8012a2e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8012a22:	f1bc 0f00 	cmp.w	ip, #0
 8012a26:	bf14      	ite	ne
 8012a28:	2304      	movne	r3, #4
 8012a2a:	2301      	moveq	r3, #1
 8012a2c:	e7b4      	b.n	8012998 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012a2e:	2304      	movs	r3, #4
 8012a30:	e7b2      	b.n	8012998 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012a32:	bf00      	nop
 8012a34:	08023744 	.word	0x08023744

08012a38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8012a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a3c:	b08b      	sub	sp, #44	; 0x2c
 8012a3e:	461d      	mov	r5, r3
 8012a40:	2400      	movs	r4, #0
 8012a42:	4688      	mov	r8, r1
 8012a44:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8012a48:	4693      	mov	fp, r2
 8012a4a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8012a4e:	4607      	mov	r7, r0
 8012a50:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012a54:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8012a58:	9404      	str	r4, [sp, #16]
 8012a5a:	bf14      	ite	ne
 8012a5c:	2308      	movne	r3, #8
 8012a5e:	2302      	moveq	r3, #2
 8012a60:	fb05 b50a 	mla	r5, r5, sl, fp
 8012a64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a68:	f7ff ff06 	bl	8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012a6c:	2e0b      	cmp	r6, #11
 8012a6e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012a72:	a901      	add	r1, sp, #4
 8012a74:	bf98      	it	ls
 8012a76:	4b13      	ldrls	r3, [pc, #76]	; (8012ac4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8012a78:	f8ad a01e 	strh.w	sl, [sp, #30]
 8012a7c:	bf98      	it	ls
 8012a7e:	5d9c      	ldrbls	r4, [r3, r6]
 8012a80:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012a84:	10e4      	asrs	r4, r4, #3
 8012a86:	f8cd 8010 	str.w	r8, [sp, #16]
 8012a8a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012a8e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012a92:	fb04 0405 	mla	r4, r4, r5, r0
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	9405      	str	r4, [sp, #20]
 8012aa0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012aa4:	f88d 9020 	strb.w	r9, [sp, #32]
 8012aa8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8012aac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012ab0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8012ab4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8012ab8:	6803      	ldr	r3, [r0, #0]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	4798      	blx	r3
 8012abe:	b00b      	add	sp, #44	; 0x2c
 8012ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ac4:	08023744 	.word	0x08023744

08012ac8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8012ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012acc:	461e      	mov	r6, r3
 8012ace:	4b0a      	ldr	r3, [pc, #40]	; (8012af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8012ad0:	460f      	mov	r7, r1
 8012ad2:	4690      	mov	r8, r2
 8012ad4:	881d      	ldrh	r5, [r3, #0]
 8012ad6:	f7ff fd23 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 8012ada:	6803      	ldr	r3, [r0, #0]
 8012adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ade:	4798      	blx	r3
 8012ae0:	280b      	cmp	r0, #11
 8012ae2:	bf96      	itet	ls
 8012ae4:	4b05      	ldrls	r3, [pc, #20]	; (8012afc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8012ae6:	2400      	movhi	r4, #0
 8012ae8:	5c1c      	ldrbls	r4, [r3, r0]
 8012aea:	fb08 7005 	mla	r0, r8, r5, r7
 8012aee:	10e4      	asrs	r4, r4, #3
 8012af0:	fb04 6000 	mla	r0, r4, r0, r6
 8012af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af8:	2400c84e 	.word	0x2400c84e
 8012afc:	08023744 	.word	0x08023744

08012b00 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8012b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b02:	b08b      	sub	sp, #44	; 0x2c
 8012b04:	461f      	mov	r7, r3
 8012b06:	4604      	mov	r4, r0
 8012b08:	4616      	mov	r6, r2
 8012b0a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012b0e:	2500      	movs	r5, #0
 8012b10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012b14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012b18:	9504      	str	r5, [sp, #16]
 8012b1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012b1e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012b22:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012b26:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012b2a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012b2e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012b32:	f88d 3020 	strb.w	r3, [sp, #32]
 8012b36:	f7ff fe9f 	bl	8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012b3a:	463a      	mov	r2, r7
 8012b3c:	4631      	mov	r1, r6
 8012b3e:	4603      	mov	r3, r0
 8012b40:	4620      	mov	r0, r4
 8012b42:	f7ff ffc1 	bl	8012ac8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012b46:	4b0e      	ldr	r3, [pc, #56]	; (8012b80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8012b48:	9005      	str	r0, [sp, #20]
 8012b4a:	881b      	ldrh	r3, [r3, #0]
 8012b4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012b50:	f7ff fce6 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 8012b54:	6803      	ldr	r3, [r0, #0]
 8012b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b58:	4798      	blx	r3
 8012b5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b5c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8012b60:	a901      	add	r1, sp, #4
 8012b62:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8012b66:	9304      	str	r3, [sp, #16]
 8012b68:	6860      	ldr	r0, [r4, #4]
 8012b6a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012b6e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8012b72:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012b76:	6803      	ldr	r3, [r0, #0]
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	4798      	blx	r3
 8012b7c:	b00b      	add	sp, #44	; 0x2c
 8012b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b80:	2400c84e 	.word	0x2400c84e

08012b84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b86:	b08d      	sub	sp, #52	; 0x34
 8012b88:	2501      	movs	r5, #1
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	466b      	mov	r3, sp
 8012b8e:	9503      	str	r5, [sp, #12]
 8012b90:	e883 0006 	stmia.w	r3, {r1, r2}
 8012b94:	2300      	movs	r3, #0
 8012b96:	f8bd 6000 	ldrh.w	r6, [sp]
 8012b9a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8012b9e:	9306      	str	r3, [sp, #24]
 8012ba0:	6803      	ldr	r3, [r0, #0]
 8012ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ba4:	4798      	blx	r3
 8012ba6:	463a      	mov	r2, r7
 8012ba8:	4631      	mov	r1, r6
 8012baa:	4603      	mov	r3, r0
 8012bac:	4620      	mov	r0, r4
 8012bae:	f7ff ff8b 	bl	8012ac8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012bb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012bb4:	9004      	str	r0, [sp, #16]
 8012bb6:	9307      	str	r3, [sp, #28]
 8012bb8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012bbc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012bc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012bc4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012bc8:	4b0e      	ldr	r3, [pc, #56]	; (8012c04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8012bca:	881b      	ldrh	r3, [r3, #0]
 8012bcc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012bd0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012bd4:	f7ff fca4 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 8012bd8:	6803      	ldr	r3, [r0, #0]
 8012bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bdc:	4798      	blx	r3
 8012bde:	23ff      	movs	r3, #255	; 0xff
 8012be0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012be4:	a903      	add	r1, sp, #12
 8012be6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012bea:	6860      	ldr	r0, [r4, #4]
 8012bec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012bf0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012bf4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012bf8:	6803      	ldr	r3, [r0, #0]
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	4798      	blx	r3
 8012bfe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012c00:	b00d      	add	sp, #52	; 0x34
 8012c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c04:	2400c84e 	.word	0x2400c84e

08012c08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8012c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c0c:	b08c      	sub	sp, #48	; 0x30
 8012c0e:	461e      	mov	r6, r3
 8012c10:	2300      	movs	r3, #0
 8012c12:	4604      	mov	r4, r0
 8012c14:	466d      	mov	r5, sp
 8012c16:	9306      	str	r3, [sp, #24]
 8012c18:	6803      	ldr	r3, [r0, #0]
 8012c1a:	e885 0006 	stmia.w	r5, {r1, r2}
 8012c1e:	2501      	movs	r5, #1
 8012c20:	f8bd 7000 	ldrh.w	r7, [sp]
 8012c24:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8012c28:	9503      	str	r5, [sp, #12]
 8012c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c2c:	4798      	blx	r3
 8012c2e:	4642      	mov	r2, r8
 8012c30:	4639      	mov	r1, r7
 8012c32:	4603      	mov	r3, r0
 8012c34:	4620      	mov	r0, r4
 8012c36:	f7ff ff47 	bl	8012ac8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012c3a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012c3e:	9004      	str	r0, [sp, #16]
 8012c40:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012c44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012c48:	9607      	str	r6, [sp, #28]
 8012c4a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012c4e:	4b10      	ldr	r3, [pc, #64]	; (8012c90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8012c50:	881b      	ldrh	r3, [r3, #0]
 8012c52:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012c56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c58:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012c5c:	f7ff fc60 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 8012c60:	6803      	ldr	r3, [r0, #0]
 8012c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c64:	4798      	blx	r3
 8012c66:	23ff      	movs	r3, #255	; 0xff
 8012c68:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012c6c:	a903      	add	r1, sp, #12
 8012c6e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012c72:	6860      	ldr	r0, [r4, #4]
 8012c74:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012c78:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012c7c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012c80:	6803      	ldr	r3, [r0, #0]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	4798      	blx	r3
 8012c86:	4630      	mov	r0, r6
 8012c88:	b00c      	add	sp, #48	; 0x30
 8012c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c8e:	bf00      	nop
 8012c90:	2400c84e 	.word	0x2400c84e

08012c94 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8012c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c96:	b085      	sub	sp, #20
 8012c98:	4605      	mov	r5, r0
 8012c9a:	ac02      	add	r4, sp, #8
 8012c9c:	e884 0006 	stmia.w	r4, {r1, r2}
 8012ca0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8012ca4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8012ca8:	f7ff fde6 	bl	8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012cac:	4631      	mov	r1, r6
 8012cae:	4603      	mov	r3, r0
 8012cb0:	463a      	mov	r2, r7
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	f7ff ff08 	bl	8012ac8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012cb8:	4a05      	ldr	r2, [pc, #20]	; (8012cd0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8012cba:	682b      	ldr	r3, [r5, #0]
 8012cbc:	8812      	ldrh	r2, [r2, #0]
 8012cbe:	9200      	str	r2, [sp, #0]
 8012cc0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012cca:	47b0      	blx	r6
 8012ccc:	b005      	add	sp, #20
 8012cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cd0:	2400c84e 	.word	0x2400c84e

08012cd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8012cd4:	b570      	push	{r4, r5, r6, lr}
 8012cd6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8012cda:	4604      	mov	r4, r0
 8012cdc:	b19b      	cbz	r3, 8012d06 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8012cde:	2002      	movs	r0, #2
 8012ce0:	f7ed fc6e 	bl	80005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012cec:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8012cf0:	6823      	ldr	r3, [r4, #0]
 8012cf2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8012cf6:	f7ff fdbf 	bl	8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012cfa:	4601      	mov	r1, r0
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	462b      	mov	r3, r5
 8012d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d04:	4718      	bx	r3
 8012d06:	bd70      	pop	{r4, r5, r6, pc}

08012d08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8012d08:	b538      	push	{r3, r4, r5, lr}
 8012d0a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8012d0e:	4604      	mov	r4, r0
 8012d10:	460d      	mov	r5, r1
 8012d12:	428b      	cmp	r3, r1
 8012d14:	d006      	beq.n	8012d24 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8012d16:	6803      	ldr	r3, [r0, #0]
 8012d18:	b929      	cbnz	r1, 8012d26 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8012d1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012d1e:	4798      	blx	r3
 8012d20:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8012d24:	bd38      	pop	{r3, r4, r5, pc}
 8012d26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012d2a:	e7f8      	b.n	8012d1e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08012d2c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012d2c:	4b0d      	ldr	r3, [pc, #52]	; (8012d64 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012d2e:	b510      	push	{r4, lr}
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	4604      	mov	r4, r0
 8012d34:	b95b      	cbnz	r3, 8012d4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012d36:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8012d3a:	2b02      	cmp	r3, #2
 8012d3c:	d007      	beq.n	8012d4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012d3e:	6840      	ldr	r0, [r0, #4]
 8012d40:	f000 f916 	bl	8012f70 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012d44:	b118      	cbz	r0, 8012d4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012d46:	6862      	ldr	r2, [r4, #4]
 8012d48:	7a53      	ldrb	r3, [r2, #9]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d0fc      	beq.n	8012d48 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012d4e:	f7ed fdbd 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012d52:	4620      	mov	r0, r4
 8012d54:	2100      	movs	r1, #0
 8012d56:	f7ff ffd7 	bl	8012d08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f7ff fd8c 	bl	8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012d60:	bd10      	pop	{r4, pc}
 8012d62:	bf00      	nop
 8012d64:	2400c852 	.word	0x2400c852

08012d68 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8012d68:	4770      	bx	lr

08012d6a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	4770      	bx	lr

08012d6e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8012d6e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8012d72:	1a13      	subs	r3, r2, r0
 8012d74:	4258      	negs	r0, r3
 8012d76:	4158      	adcs	r0, r3
 8012d78:	4770      	bx	lr

08012d7a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8012d7a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8012d7e:	1a9b      	subs	r3, r3, r2
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	bfdc      	itt	le
 8012d84:	6882      	ldrle	r2, [r0, #8]
 8012d86:	189b      	addle	r3, r3, r2
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	bfcc      	ite	gt
 8012d8c:	2000      	movgt	r0, #0
 8012d8e:	2001      	movle	r0, #1
 8012d90:	4770      	bx	lr

08012d92 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8012d92:	6902      	ldr	r2, [r0, #16]
 8012d94:	6843      	ldr	r3, [r0, #4]
 8012d96:	2024      	movs	r0, #36	; 0x24
 8012d98:	fb00 3002 	mla	r0, r0, r2, r3
 8012d9c:	4770      	bx	lr

08012d9e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8012d9e:	6803      	ldr	r3, [r0, #0]
 8012da0:	691b      	ldr	r3, [r3, #16]
 8012da2:	4718      	bx	r3

08012da4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8012da4:	2301      	movs	r3, #1
 8012da6:	b570      	push	{r4, r5, r6, lr}
 8012da8:	7203      	strb	r3, [r0, #8]
 8012daa:	4604      	mov	r4, r0
 8012dac:	6840      	ldr	r0, [r0, #4]
 8012dae:	6803      	ldr	r3, [r0, #0]
 8012db0:	699b      	ldr	r3, [r3, #24]
 8012db2:	4798      	blx	r3
 8012db4:	6803      	ldr	r3, [r0, #0]
 8012db6:	4605      	mov	r5, r0
 8012db8:	2b40      	cmp	r3, #64	; 0x40
 8012dba:	d00c      	beq.n	8012dd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012dbc:	d810      	bhi.n	8012de0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8012dbe:	2b04      	cmp	r3, #4
 8012dc0:	d01d      	beq.n	8012dfe <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8012dc2:	d804      	bhi.n	8012dce <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d006      	beq.n	8012dd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d02c      	beq.n	8012e26 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8012dcc:	bd70      	pop	{r4, r5, r6, pc}
 8012dce:	2b08      	cmp	r3, #8
 8012dd0:	d01d      	beq.n	8012e0e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8012dd2:	2b20      	cmp	r3, #32
 8012dd4:	d1fa      	bne.n	8012dcc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8012dd6:	6823      	ldr	r3, [r4, #0]
 8012dd8:	4620      	mov	r0, r4
 8012dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ddc:	4798      	blx	r3
 8012dde:	e013      	b.n	8012e08 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8012de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012de4:	d0f7      	beq.n	8012dd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012de6:	d804      	bhi.n	8012df2 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8012de8:	2b80      	cmp	r3, #128	; 0x80
 8012dea:	d0f4      	beq.n	8012dd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012df0:	e7f0      	b.n	8012dd4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8012df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012df6:	d0ee      	beq.n	8012dd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012dfc:	e7e5      	b.n	8012dca <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8012dfe:	6823      	ldr	r3, [r4, #0]
 8012e00:	7f01      	ldrb	r1, [r0, #28]
 8012e02:	4620      	mov	r0, r4
 8012e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e06:	4798      	blx	r3
 8012e08:	6823      	ldr	r3, [r4, #0]
 8012e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e0c:	e006      	b.n	8012e1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	7f01      	ldrb	r1, [r0, #28]
 8012e12:	4620      	mov	r0, r4
 8012e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e16:	4798      	blx	r3
 8012e18:	6823      	ldr	r3, [r4, #0]
 8012e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	4620      	mov	r0, r4
 8012e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e24:	4718      	bx	r3
 8012e26:	6823      	ldr	r3, [r4, #0]
 8012e28:	4620      	mov	r0, r4
 8012e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e2c:	4798      	blx	r3
 8012e2e:	e7f3      	b.n	8012e18 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08012e30 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8012e30:	4770      	bx	lr

08012e32 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012e32:	4770      	bx	lr

08012e34 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8012e34:	4770      	bx	lr

08012e36 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8012e36:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012e3a:	b510      	push	{r4, lr}
 8012e3c:	1ad2      	subs	r2, r2, r3
 8012e3e:	2a00      	cmp	r2, #0
 8012e40:	bfdc      	itt	le
 8012e42:	6884      	ldrle	r4, [r0, #8]
 8012e44:	1912      	addle	r2, r2, r4
 8012e46:	2a01      	cmp	r2, #1
 8012e48:	dd16      	ble.n	8012e78 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8012e4a:	6842      	ldr	r2, [r0, #4]
 8012e4c:	2424      	movs	r4, #36	; 0x24
 8012e4e:	fb04 2303 	mla	r3, r4, r3, r2
 8012e52:	f101 0220 	add.w	r2, r1, #32
 8012e56:	f851 4b04 	ldr.w	r4, [r1], #4
 8012e5a:	4291      	cmp	r1, r2
 8012e5c:	f843 4b04 	str.w	r4, [r3], #4
 8012e60:	d1f9      	bne.n	8012e56 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8012e62:	780a      	ldrb	r2, [r1, #0]
 8012e64:	701a      	strb	r2, [r3, #0]
 8012e66:	68c3      	ldr	r3, [r0, #12]
 8012e68:	6882      	ldr	r2, [r0, #8]
 8012e6a:	f3bf 8f5b 	dmb	ish
 8012e6e:	3301      	adds	r3, #1
 8012e70:	429a      	cmp	r2, r3
 8012e72:	bfd8      	it	le
 8012e74:	1a9b      	suble	r3, r3, r2
 8012e76:	60c3      	str	r3, [r0, #12]
 8012e78:	bd10      	pop	{r4, pc}

08012e7a <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8012e7a:	6903      	ldr	r3, [r0, #16]
 8012e7c:	6882      	ldr	r2, [r0, #8]
 8012e7e:	f3bf 8f5b 	dmb	ish
 8012e82:	3301      	adds	r3, #1
 8012e84:	429a      	cmp	r2, r3
 8012e86:	bfd8      	it	le
 8012e88:	1a9b      	suble	r3, r3, r2
 8012e8a:	6103      	str	r3, [r0, #16]
 8012e8c:	4770      	bx	lr
	...

08012e90 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8012e90:	b570      	push	{r4, r5, r6, lr}
 8012e92:	4604      	mov	r4, r0
 8012e94:	460e      	mov	r6, r1
 8012e96:	6860      	ldr	r0, [r4, #4]
 8012e98:	6803      	ldr	r3, [r0, #0]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	4798      	blx	r3
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d1f9      	bne.n	8012e96 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8012ea2:	4d0d      	ldr	r5, [pc, #52]	; (8012ed8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8012ea4:	6828      	ldr	r0, [r5, #0]
 8012ea6:	6803      	ldr	r3, [r0, #0]
 8012ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012eaa:	4798      	blx	r3
 8012eac:	f7ed fd20 	bl	80008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8012eb0:	6828      	ldr	r0, [r5, #0]
 8012eb2:	2101      	movs	r1, #1
 8012eb4:	f7ff ff28 	bl	8012d08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012eb8:	6860      	ldr	r0, [r4, #4]
 8012eba:	4631      	mov	r1, r6
 8012ebc:	6803      	ldr	r3, [r0, #0]
 8012ebe:	689b      	ldr	r3, [r3, #8]
 8012ec0:	4798      	blx	r3
 8012ec2:	6823      	ldr	r3, [r4, #0]
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec8:	4798      	blx	r3
 8012eca:	6828      	ldr	r0, [r5, #0]
 8012ecc:	6803      	ldr	r3, [r0, #0]
 8012ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ed4:	4718      	bx	r3
 8012ed6:	bf00      	nop
 8012ed8:	2400c854 	.word	0x2400c854

08012edc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012edc:	b508      	push	{r3, lr}
 8012ede:	f7ed fcf5 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012ee6:	f7ed bcfb 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012eea <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012eea:	b510      	push	{r4, lr}
 8012eec:	4604      	mov	r4, r0
 8012eee:	2114      	movs	r1, #20
 8012ef0:	f00d fafd 	bl	80204ee <_ZdlPvj>
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	bd10      	pop	{r4, pc}

08012ef8 <_ZN8touchgfx13DMA_Interface5startEv>:
 8012ef8:	b510      	push	{r4, lr}
 8012efa:	4604      	mov	r4, r0
 8012efc:	6840      	ldr	r0, [r0, #4]
 8012efe:	6803      	ldr	r3, [r0, #0]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	4798      	blx	r3
 8012f04:	b948      	cbnz	r0, 8012f1a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012f06:	7a63      	ldrb	r3, [r4, #9]
 8012f08:	b13b      	cbz	r3, 8012f1a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012f0a:	7a23      	ldrb	r3, [r4, #8]
 8012f0c:	b92b      	cbnz	r3, 8012f1a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012f0e:	6823      	ldr	r3, [r4, #0]
 8012f10:	4620      	mov	r0, r4
 8012f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f18:	4718      	bx	r3
 8012f1a:	bd10      	pop	{r4, pc}

08012f1c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012f1c:	b570      	push	{r4, r5, r6, lr}
 8012f1e:	4604      	mov	r4, r0
 8012f20:	6840      	ldr	r0, [r0, #4]
 8012f22:	6803      	ldr	r3, [r0, #0]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	4798      	blx	r3
 8012f28:	4605      	mov	r5, r0
 8012f2a:	b930      	cbnz	r0, 8012f3a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012f2c:	7a23      	ldrb	r3, [r4, #8]
 8012f2e:	b123      	cbz	r3, 8012f3a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012f30:	6860      	ldr	r0, [r4, #4]
 8012f32:	6803      	ldr	r3, [r0, #0]
 8012f34:	695b      	ldr	r3, [r3, #20]
 8012f36:	4798      	blx	r3
 8012f38:	7225      	strb	r5, [r4, #8]
 8012f3a:	6860      	ldr	r0, [r4, #4]
 8012f3c:	6803      	ldr	r3, [r0, #0]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4798      	blx	r3
 8012f42:	b928      	cbnz	r0, 8012f50 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012f44:	6823      	ldr	r3, [r4, #0]
 8012f46:	4620      	mov	r0, r4
 8012f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f4e:	4718      	bx	r3
 8012f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f54:	f7ed bcd6 	b.w	8000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08012f58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012f58:	b510      	push	{r4, lr}
 8012f5a:	6082      	str	r2, [r0, #8]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	4c03      	ldr	r4, [pc, #12]	; (8012f6c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8012f60:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012f64:	e9c0 4100 	strd	r4, r1, [r0]
 8012f68:	bd10      	pop	{r4, pc}
 8012f6a:	bf00      	nop
 8012f6c:	08023880 	.word	0x08023880

08012f70 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8012f70:	6840      	ldr	r0, [r0, #4]
 8012f72:	6803      	ldr	r3, [r0, #0]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4718      	bx	r3

08012f78 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8012f78:	2000      	movs	r0, #0
 8012f7a:	4770      	bx	lr

08012f7c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8012f7c:	4b07      	ldr	r3, [pc, #28]	; (8012f9c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8012f7e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8012f80:	881b      	ldrh	r3, [r3, #0]
 8012f82:	4293      	cmp	r3, r2
 8012f84:	bf81      	itttt	hi
 8012f86:	4b06      	ldrhi	r3, [pc, #24]	; (8012fa0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8012f88:	681b      	ldrhi	r3, [r3, #0]
 8012f8a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8012f8e:	7858      	ldrbhi	r0, [r3, #1]
 8012f90:	bf8c      	ite	hi
 8012f92:	f000 0003 	andhi.w	r0, r0, #3
 8012f96:	2000      	movls	r0, #0
 8012f98:	4770      	bx	lr
 8012f9a:	bf00      	nop
 8012f9c:	2400c8a8 	.word	0x2400c8a8
 8012fa0:	2400c8a4 	.word	0x2400c8a4

08012fa4 <_ZN8touchgfx8TextAreaD1Ev>:
 8012fa4:	4770      	bx	lr
	...

08012fa8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8012fa8:	4b11      	ldr	r3, [pc, #68]	; (8012ff0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8012faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fae:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	428b      	cmp	r3, r1
 8012fb6:	d918      	bls.n	8012fea <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8012fb8:	6803      	ldr	r3, [r0, #0]
 8012fba:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8012fbc:	4b0d      	ldr	r3, [pc, #52]	; (8012ff4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8012fbe:	6818      	ldr	r0, [r3, #0]
 8012fc0:	f7f1 fa5c 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 8012fc4:	6823      	ldr	r3, [r4, #0]
 8012fc6:	4606      	mov	r6, r0
 8012fc8:	4620      	mov	r0, r4
 8012fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fcc:	4798      	blx	r3
 8012fce:	6823      	ldr	r3, [r4, #0]
 8012fd0:	4607      	mov	r7, r0
 8012fd2:	4620      	mov	r0, r4
 8012fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fd8:	4798      	blx	r3
 8012fda:	463a      	mov	r2, r7
 8012fdc:	4603      	mov	r3, r0
 8012fde:	4631      	mov	r1, r6
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	46ac      	mov	ip, r5
 8012fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe8:	4760      	bx	ip
 8012fea:	2000      	movs	r0, #0
 8012fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ff0:	2400c8a8 	.word	0x2400c8a8
 8012ff4:	2400c8b0 	.word	0x2400c8b0

08012ff8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8012ff8:	4b18      	ldr	r3, [pc, #96]	; (801305c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8012ffa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ffe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013000:	4604      	mov	r4, r0
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	428b      	cmp	r3, r1
 8013006:	d926      	bls.n	8013056 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013008:	4b15      	ldr	r3, [pc, #84]	; (8013060 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013010:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013014:	4b13      	ldr	r3, [pc, #76]	; (8013064 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013016:	7855      	ldrb	r5, [r2, #1]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801301e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013022:	6833      	ldr	r3, [r6, #0]
 8013024:	69df      	ldr	r7, [r3, #28]
 8013026:	4b10      	ldr	r3, [pc, #64]	; (8013068 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013028:	6818      	ldr	r0, [r3, #0]
 801302a:	f7f1 fa27 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 801302e:	6823      	ldr	r3, [r4, #0]
 8013030:	4680      	mov	r8, r0
 8013032:	4620      	mov	r0, r4
 8013034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013036:	4798      	blx	r3
 8013038:	6823      	ldr	r3, [r4, #0]
 801303a:	4681      	mov	r9, r0
 801303c:	4620      	mov	r0, r4
 801303e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013042:	4798      	blx	r3
 8013044:	464b      	mov	r3, r9
 8013046:	9000      	str	r0, [sp, #0]
 8013048:	4642      	mov	r2, r8
 801304a:	4629      	mov	r1, r5
 801304c:	4630      	mov	r0, r6
 801304e:	47b8      	blx	r7
 8013050:	b003      	add	sp, #12
 8013052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013056:	2000      	movs	r0, #0
 8013058:	e7fa      	b.n	8013050 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801305a:	bf00      	nop
 801305c:	2400c8a8 	.word	0x2400c8a8
 8013060:	2400c8a4 	.word	0x2400c8a4
 8013064:	2400c8ac 	.word	0x2400c8ac
 8013068:	2400c8b0 	.word	0x2400c8b0

0801306c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801306c:	b40e      	push	{r1, r2, r3}
 801306e:	4b30      	ldr	r3, [pc, #192]	; (8013130 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013074:	881a      	ldrh	r2, [r3, #0]
 8013076:	b09d      	sub	sp, #116	; 0x74
 8013078:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801307a:	4604      	mov	r4, r0
 801307c:	429a      	cmp	r2, r3
 801307e:	d954      	bls.n	801312a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8013080:	aa26      	add	r2, sp, #152	; 0x98
 8013082:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8013134 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013086:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013138 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801308a:	9202      	str	r2, [sp, #8]
 801308c:	f8d9 2000 	ldr.w	r2, [r9]
 8013090:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013094:	f8d8 3000 	ldr.w	r3, [r8]
 8013098:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801309c:	682b      	ldr	r3, [r5, #0]
 801309e:	4628      	mov	r0, r5
 80130a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130a2:	4798      	blx	r3
 80130a4:	4606      	mov	r6, r0
 80130a6:	b207      	sxth	r7, r0
 80130a8:	a803      	add	r0, sp, #12
 80130aa:	f004 f86b 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 80130ae:	682b      	ldr	r3, [r5, #0]
 80130b0:	4628      	mov	r0, r5
 80130b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130b4:	4798      	blx	r3
 80130b6:	682b      	ldr	r3, [r5, #0]
 80130b8:	4682      	mov	sl, r0
 80130ba:	4628      	mov	r0, r5
 80130bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130be:	4798      	blx	r3
 80130c0:	4653      	mov	r3, sl
 80130c2:	9000      	str	r0, [sp, #0]
 80130c4:	a803      	add	r0, sp, #12
 80130c6:	9a02      	ldr	r2, [sp, #8]
 80130c8:	9925      	ldr	r1, [sp, #148]	; 0x94
 80130ca:	f004 f8b6 	bl	801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80130ce:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80130d0:	f8d9 3000 	ldr.w	r3, [r9]
 80130d4:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80130d8:	8925      	ldrh	r5, [r4, #8]
 80130da:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80130de:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80130e2:	eba5 050c 	sub.w	r5, r5, ip
 80130e6:	784a      	ldrb	r2, [r1, #1]
 80130e8:	f8d8 3000 	ldr.w	r3, [r8]
 80130ec:	b22d      	sxth	r5, r5
 80130ee:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80130f2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80130f6:	9500      	str	r5, [sp, #0]
 80130f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80130fc:	a803      	add	r0, sp, #12
 80130fe:	f001 ffe2 	bl	80150c6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8013102:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8013106:	b203      	sxth	r3, r0
 8013108:	18b9      	adds	r1, r7, r2
 801310a:	2900      	cmp	r1, #0
 801310c:	dd0b      	ble.n	8013126 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801310e:	3b01      	subs	r3, #1
 8013110:	fb13 f302 	smulbb	r3, r3, r2
 8013114:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013118:	b21f      	sxth	r7, r3
 801311a:	4638      	mov	r0, r7
 801311c:	b01d      	add	sp, #116	; 0x74
 801311e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013122:	b003      	add	sp, #12
 8013124:	4770      	bx	lr
 8013126:	2b00      	cmp	r3, #0
 8013128:	dcf7      	bgt.n	801311a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801312a:	2700      	movs	r7, #0
 801312c:	e7f5      	b.n	801311a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801312e:	bf00      	nop
 8013130:	2400c8a8 	.word	0x2400c8a8
 8013134:	2400c8a4 	.word	0x2400c8a4
 8013138:	2400c8ac 	.word	0x2400c8ac

0801313c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801313c:	4bbc      	ldr	r3, [pc, #752]	; (8013430 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 801313e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013142:	460c      	mov	r4, r1
 8013144:	881b      	ldrh	r3, [r3, #0]
 8013146:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8013148:	b0a9      	sub	sp, #164	; 0xa4
 801314a:	4681      	mov	r9, r0
 801314c:	428b      	cmp	r3, r1
 801314e:	d809      	bhi.n	8013164 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8013150:	2300      	movs	r3, #0
 8013152:	f04f 32ff 	mov.w	r2, #4294967295
 8013156:	6083      	str	r3, [r0, #8]
 8013158:	e9c0 3200 	strd	r3, r2, [r0]
 801315c:	4648      	mov	r0, r9
 801315e:	b029      	add	sp, #164	; 0xa4
 8013160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013164:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8013438 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8013168:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 801316c:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801343c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8013170:	f8db 3000 	ldr.w	r3, [fp]
 8013174:	f8d8 0000 	ldr.w	r0, [r8]
 8013178:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801317c:	4bad      	ldr	r3, [pc, #692]	; (8013434 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013184:	f7f1 f97a 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 8013188:	4607      	mov	r7, r0
 801318a:	682b      	ldr	r3, [r5, #0]
 801318c:	4628      	mov	r0, r5
 801318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013190:	4798      	blx	r3
 8013192:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8013194:	f8cd 800c 	str.w	r8, [sp, #12]
 8013198:	4430      	add	r0, r6
 801319a:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 801319e:	b283      	uxth	r3, r0
 80131a0:	4650      	mov	r0, sl
 80131a2:	9302      	str	r3, [sp, #8]
 80131a4:	2e00      	cmp	r6, #0
 80131a6:	f040 8090 	bne.w	80132ca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80131aa:	f003 ffeb 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 80131ae:	682b      	ldr	r3, [r5, #0]
 80131b0:	4628      	mov	r0, r5
 80131b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131b4:	4798      	blx	r3
 80131b6:	682b      	ldr	r3, [r5, #0]
 80131b8:	9005      	str	r0, [sp, #20]
 80131ba:	4628      	mov	r0, r5
 80131bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131be:	4798      	blx	r3
 80131c0:	6823      	ldr	r3, [r4, #0]
 80131c2:	4680      	mov	r8, r0
 80131c4:	4620      	mov	r0, r4
 80131c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80131c8:	4798      	blx	r3
 80131ca:	6822      	ldr	r2, [r4, #0]
 80131cc:	9004      	str	r0, [sp, #16]
 80131ce:	4620      	mov	r0, r4
 80131d0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80131d4:	4790      	blx	r2
 80131d6:	9905      	ldr	r1, [sp, #20]
 80131d8:	9b04      	ldr	r3, [sp, #16]
 80131da:	460a      	mov	r2, r1
 80131dc:	4639      	mov	r1, r7
 80131de:	4637      	mov	r7, r6
 80131e0:	9001      	str	r0, [sp, #4]
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	4650      	mov	r0, sl
 80131e6:	4643      	mov	r3, r8
 80131e8:	f004 f83c 	bl	8017264 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80131ec:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80131ee:	4629      	mov	r1, r5
 80131f0:	f8db 3000 	ldr.w	r3, [fp]
 80131f4:	4650      	mov	r0, sl
 80131f6:	3601      	adds	r6, #1
 80131f8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80131fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013200:	b2b6      	uxth	r6, r6
 8013202:	785b      	ldrb	r3, [r3, #1]
 8013204:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013208:	f001 fcae 	bl	8014b68 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801320c:	4287      	cmp	r7, r0
 801320e:	bfb8      	it	lt
 8013210:	b207      	sxthlt	r7, r0
 8013212:	4650      	mov	r0, sl
 8013214:	f003 ffdd 	bl	80171d2 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8013218:	2800      	cmp	r0, #0
 801321a:	d0e7      	beq.n	80131ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 801321c:	9b02      	ldr	r3, [sp, #8]
 801321e:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8013222:	fb13 f606 	smulbb	r6, r3, r6
 8013226:	eba6 0608 	sub.w	r6, r6, r8
 801322a:	b2b6      	uxth	r6, r6
 801322c:	fa0f f886 	sxth.w	r8, r6
 8013230:	f1b8 0f00 	cmp.w	r8, #0
 8013234:	dd06      	ble.n	8013244 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 8013236:	682b      	ldr	r3, [r5, #0]
 8013238:	4628      	mov	r0, r5
 801323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801323c:	4798      	blx	r3
 801323e:	4430      	add	r0, r6
 8013240:	fa0f f880 	sxth.w	r8, r0
 8013244:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013248:	4620      	mov	r0, r4
 801324a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013252:	bf0c      	ite	eq
 8013254:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8013258:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 801325c:	4798      	blx	r3
 801325e:	2801      	cmp	r0, #1
 8013260:	b2ba      	uxth	r2, r7
 8013262:	f000 80d2 	beq.w	801340a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8013266:	2802      	cmp	r0, #2
 8013268:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801326c:	f000 80d3 	beq.w	8013416 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8013270:	b21e      	sxth	r6, r3
 8013272:	7a29      	ldrb	r1, [r5, #8]
 8013274:	7a6d      	ldrb	r5, [r5, #9]
 8013276:	1a76      	subs	r6, r6, r1
 8013278:	4429      	add	r1, r5
 801327a:	b2b3      	uxth	r3, r6
 801327c:	440a      	add	r2, r1
 801327e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8013282:	b21f      	sxth	r7, r3
 8013284:	b292      	uxth	r2, r2
 8013286:	2902      	cmp	r1, #2
 8013288:	b216      	sxth	r6, r2
 801328a:	f000 80c7 	beq.w	801341c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 801328e:	2903      	cmp	r1, #3
 8013290:	f000 80d6 	beq.w	8013440 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8013294:	2901      	cmp	r1, #1
 8013296:	f040 80dc 	bne.w	8013452 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 801329a:	8923      	ldrh	r3, [r4, #8]
 801329c:	4632      	mov	r2, r6
 801329e:	463d      	mov	r5, r7
 80132a0:	4646      	mov	r6, r8
 80132a2:	eba3 0308 	sub.w	r3, r3, r8
 80132a6:	4690      	mov	r8, r2
 80132a8:	b21f      	sxth	r7, r3
 80132aa:	9b03      	ldr	r3, [sp, #12]
 80132ac:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80132ae:	6818      	ldr	r0, [r3, #0]
 80132b0:	f7f1 f8e4 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 80132b4:	f8a9 7000 	strh.w	r7, [r9]
 80132b8:	f8a9 5002 	strh.w	r5, [r9, #2]
 80132bc:	f8a9 6004 	strh.w	r6, [r9, #4]
 80132c0:	f8a9 8006 	strh.w	r8, [r9, #6]
 80132c4:	f8c9 0008 	str.w	r0, [r9, #8]
 80132c8:	e748      	b.n	801315c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80132ca:	f003 ff5b 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 80132ce:	682b      	ldr	r3, [r5, #0]
 80132d0:	4628      	mov	r0, r5
 80132d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132d4:	4798      	blx	r3
 80132d6:	682b      	ldr	r3, [r5, #0]
 80132d8:	4606      	mov	r6, r0
 80132da:	4628      	mov	r0, r5
 80132dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132de:	4798      	blx	r3
 80132e0:	6823      	ldr	r3, [r4, #0]
 80132e2:	4680      	mov	r8, r0
 80132e4:	4620      	mov	r0, r4
 80132e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80132e8:	4798      	blx	r3
 80132ea:	6822      	ldr	r2, [r4, #0]
 80132ec:	9004      	str	r0, [sp, #16]
 80132ee:	4620      	mov	r0, r4
 80132f0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80132f4:	4790      	blx	r2
 80132f6:	9b04      	ldr	r3, [sp, #16]
 80132f8:	4632      	mov	r2, r6
 80132fa:	9001      	str	r0, [sp, #4]
 80132fc:	9300      	str	r3, [sp, #0]
 80132fe:	4639      	mov	r1, r7
 8013300:	4643      	mov	r3, r8
 8013302:	4650      	mov	r0, sl
 8013304:	f003 ffae 	bl	8017264 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013308:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801330c:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8013310:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013314:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013318:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801331a:	bf0a      	itet	eq
 801331c:	4642      	moveq	r2, r8
 801331e:	461a      	movne	r2, r3
 8013320:	4698      	moveq	r8, r3
 8013322:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8013326:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801332a:	1ad2      	subs	r2, r2, r3
 801332c:	f8db 3000 	ldr.w	r3, [fp]
 8013330:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013334:	7859      	ldrb	r1, [r3, #1]
 8013336:	2300      	movs	r3, #0
 8013338:	f8cd a020 	str.w	sl, [sp, #32]
 801333c:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013340:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013344:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013348:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801334c:	950a      	str	r5, [sp, #40]	; 0x28
 801334e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013352:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013356:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801335a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801335e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013362:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013366:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801336a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801336e:	b350      	cbz	r0, 80133c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8013370:	682b      	ldr	r3, [r5, #0]
 8013372:	4628      	mov	r0, r5
 8013374:	695b      	ldr	r3, [r3, #20]
 8013376:	4798      	blx	r3
 8013378:	4607      	mov	r7, r0
 801337a:	b320      	cbz	r0, 80133c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801337c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801337e:	4639      	mov	r1, r7
 8013380:	6803      	ldr	r3, [r0, #0]
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	4798      	blx	r3
 8013386:	4606      	mov	r6, r0
 8013388:	b1e8      	cbz	r0, 80133c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801338a:	7b43      	ldrb	r3, [r0, #13]
 801338c:	7a82      	ldrb	r2, [r0, #10]
 801338e:	005b      	lsls	r3, r3, #1
 8013390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013394:	4313      	orrs	r3, r2
 8013396:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801339a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801339e:	2b04      	cmp	r3, #4
 80133a0:	d111      	bne.n	80133c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80133a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80133a4:	4632      	mov	r2, r6
 80133a6:	4639      	mov	r1, r7
 80133a8:	6803      	ldr	r3, [r0, #0]
 80133aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133ac:	4798      	blx	r3
 80133ae:	7b73      	ldrb	r3, [r6, #13]
 80133b0:	005b      	lsls	r3, r3, #1
 80133b2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80133b6:	7ab3      	ldrb	r3, [r6, #10]
 80133b8:	4313      	orrs	r3, r2
 80133ba:	4418      	add	r0, r3
 80133bc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80133c0:	4418      	add	r0, r3
 80133c2:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80133c6:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80133ca:	2600      	movs	r6, #0
 80133cc:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 80133d0:	4637      	mov	r7, r6
 80133d2:	45c3      	cmp	fp, r8
 80133d4:	a807      	add	r0, sp, #28
 80133d6:	f106 0601 	add.w	r6, r6, #1
 80133da:	bfd4      	ite	le
 80133dc:	2100      	movle	r1, #0
 80133de:	2101      	movgt	r1, #1
 80133e0:	f001 fda2 	bl	8014f28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80133e4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80133e8:	b2b6      	uxth	r6, r6
 80133ea:	429f      	cmp	r7, r3
 80133ec:	bfb8      	it	lt
 80133ee:	b21f      	sxthlt	r7, r3
 80133f0:	9b02      	ldr	r3, [sp, #8]
 80133f2:	eba8 0803 	sub.w	r8, r8, r3
 80133f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80133fa:	fa0f f888 	sxth.w	r8, r8
 80133fe:	2b00      	cmp	r3, #0
 8013400:	f43f af0c 	beq.w	801321c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8013404:	45c2      	cmp	sl, r8
 8013406:	dbe4      	blt.n	80133d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 8013408:	e708      	b.n	801321c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801340a:	1bf6      	subs	r6, r6, r7
 801340c:	2702      	movs	r7, #2
 801340e:	fb96 f6f7 	sdiv	r6, r6, r7
 8013412:	b236      	sxth	r6, r6
 8013414:	e72d      	b.n	8013272 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 8013416:	4413      	add	r3, r2
 8013418:	1af6      	subs	r6, r6, r3
 801341a:	e7fa      	b.n	8013412 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 801341c:	8925      	ldrh	r5, [r4, #8]
 801341e:	1aad      	subs	r5, r5, r2
 8013420:	1aed      	subs	r5, r5, r3
 8013422:	b22f      	sxth	r7, r5
 8013424:	8965      	ldrh	r5, [r4, #10]
 8013426:	eba5 0508 	sub.w	r5, r5, r8
 801342a:	b22d      	sxth	r5, r5
 801342c:	e73d      	b.n	80132aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801342e:	bf00      	nop
 8013430:	2400c8a8 	.word	0x2400c8a8
 8013434:	2400c8ac 	.word	0x2400c8ac
 8013438:	2400c8a4 	.word	0x2400c8a4
 801343c:	2400c8b0 	.word	0x2400c8b0
 8013440:	8965      	ldrh	r5, [r4, #10]
 8013442:	2700      	movs	r7, #0
 8013444:	1aad      	subs	r5, r5, r2
 8013446:	1aed      	subs	r5, r5, r3
 8013448:	4633      	mov	r3, r6
 801344a:	4646      	mov	r6, r8
 801344c:	b22d      	sxth	r5, r5
 801344e:	4698      	mov	r8, r3
 8013450:	e72b      	b.n	80132aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8013452:	2500      	movs	r5, #0
 8013454:	e729      	b.n	80132aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8013456:	bf00      	nop

08013458 <_ZN8touchgfx8TextAreaD0Ev>:
 8013458:	b510      	push	{r4, lr}
 801345a:	4604      	mov	r4, r0
 801345c:	2148      	movs	r1, #72	; 0x48
 801345e:	f00d f846 	bl	80204ee <_ZdlPvj>
 8013462:	4620      	mov	r0, r4
 8013464:	bd10      	pop	{r4, pc}
	...

08013468 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013468:	b513      	push	{r0, r1, r4, lr}
 801346a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801346e:	4604      	mov	r4, r0
 8013470:	b1fb      	cbz	r3, 80134b2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013472:	4b16      	ldr	r3, [pc, #88]	; (80134cc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013474:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013476:	881b      	ldrh	r3, [r3, #0]
 8013478:	428b      	cmp	r3, r1
 801347a:	d91a      	bls.n	80134b2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801347c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	dd16      	ble.n	80134b2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013484:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013488:	2b00      	cmp	r3, #0
 801348a:	dd12      	ble.n	80134b2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801348c:	4b10      	ldr	r3, [pc, #64]	; (80134d0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801348e:	6818      	ldr	r0, [r3, #0]
 8013490:	f7f0 fff4 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 8013494:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013498:	6822      	ldr	r2, [r4, #0]
 801349a:	2b00      	cmp	r3, #0
 801349c:	db06      	blt.n	80134ac <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801349e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	db02      	blt.n	80134ac <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80134a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80134a8:	4298      	cmp	r0, r3
 80134aa:	d004      	beq.n	80134b6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80134ac:	6953      	ldr	r3, [r2, #20]
 80134ae:	4620      	mov	r0, r4
 80134b0:	4798      	blx	r3
 80134b2:	b002      	add	sp, #8
 80134b4:	bd10      	pop	{r4, pc}
 80134b6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80134ba:	466b      	mov	r3, sp
 80134bc:	6912      	ldr	r2, [r2, #16]
 80134be:	c903      	ldmia	r1, {r0, r1}
 80134c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80134c4:	4619      	mov	r1, r3
 80134c6:	4620      	mov	r0, r4
 80134c8:	4790      	blx	r2
 80134ca:	e7f2      	b.n	80134b2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80134cc:	2400c8a8 	.word	0x2400c8a8
 80134d0:	2400c8b0 	.word	0x2400c8b0

080134d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80134d4:	4b45      	ldr	r3, [pc, #276]	; (80135ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80134d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134da:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80134dc:	b08e      	sub	sp, #56	; 0x38
 80134de:	881b      	ldrh	r3, [r3, #0]
 80134e0:	4604      	mov	r4, r0
 80134e2:	4293      	cmp	r3, r2
 80134e4:	d97e      	bls.n	80135e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80134e6:	6808      	ldr	r0, [r1, #0]
 80134e8:	ab05      	add	r3, sp, #20
 80134ea:	6849      	ldr	r1, [r1, #4]
 80134ec:	4d40      	ldr	r5, [pc, #256]	; (80135f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80134ee:	c303      	stmia	r3!, {r0, r1}
 80134f0:	4611      	mov	r1, r2
 80134f2:	6828      	ldr	r0, [r5, #0]
 80134f4:	f7f0 ffc2 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 80134f8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	db11      	blt.n	8013524 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013500:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013504:	2b00      	cmp	r3, #0
 8013506:	db0d      	blt.n	8013524 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013508:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801350a:	4298      	cmp	r0, r3
 801350c:	d10a      	bne.n	8013524 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801350e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8013512:	ab09      	add	r3, sp, #36	; 0x24
 8013514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013518:	e883 0003 	stmia.w	r3, {r0, r1}
 801351c:	4619      	mov	r1, r3
 801351e:	a805      	add	r0, sp, #20
 8013520:	f7fe fcac 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8013524:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013528:	2b00      	cmp	r3, #0
 801352a:	dd5b      	ble.n	80135e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801352c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013530:	2b00      	cmp	r3, #0
 8013532:	dd57      	ble.n	80135e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013534:	4f2f      	ldr	r7, [pc, #188]	; (80135f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013536:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801353e:	4b2e      	ldr	r3, [pc, #184]	; (80135f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013546:	2e00      	cmp	r6, #0
 8013548:	d04c      	beq.n	80135e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801354a:	6823      	ldr	r3, [r4, #0]
 801354c:	4620      	mov	r0, r4
 801354e:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8013552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013554:	4798      	blx	r3
 8013556:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801355e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013562:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8013566:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801356a:	785b      	ldrb	r3, [r3, #1]
 801356c:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8013570:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013574:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013576:	9609      	str	r6, [sp, #36]	; 0x24
 8013578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801357c:	4b1f      	ldr	r3, [pc, #124]	; (80135fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801357e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8013588:	910b      	str	r1, [sp, #44]	; 0x2c
 801358a:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801358e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8013592:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8013596:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801359a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801359e:	b10a      	cbz	r2, 80135a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80135a0:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80135a2:	b906      	cbnz	r6, 80135a6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80135a4:	689e      	ldr	r6, [r3, #8]
 80135a6:	af07      	add	r7, sp, #28
 80135a8:	4621      	mov	r1, r4
 80135aa:	4638      	mov	r0, r7
 80135ac:	f003 fa46 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80135b0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80135b2:	6828      	ldr	r0, [r5, #0]
 80135b4:	f7f0 ff62 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 80135b8:	6823      	ldr	r3, [r4, #0]
 80135ba:	4605      	mov	r5, r0
 80135bc:	4620      	mov	r0, r4
 80135be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135c0:	4798      	blx	r3
 80135c2:	6823      	ldr	r3, [r4, #0]
 80135c4:	4680      	mov	r8, r0
 80135c6:	4620      	mov	r0, r4
 80135c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135cc:	4798      	blx	r3
 80135ce:	ab09      	add	r3, sp, #36	; 0x24
 80135d0:	9501      	str	r5, [sp, #4]
 80135d2:	9300      	str	r3, [sp, #0]
 80135d4:	ab05      	add	r3, sp, #20
 80135d6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80135da:	4630      	mov	r0, r6
 80135dc:	e897 0006 	ldmia.w	r7, {r1, r2}
 80135e0:	f7f0 fef8 	bl	80043d4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80135e4:	b00e      	add	sp, #56	; 0x38
 80135e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135ea:	bf00      	nop
 80135ec:	2400c8a8 	.word	0x2400c8a8
 80135f0:	2400c8b0 	.word	0x2400c8b0
 80135f4:	2400c8a4 	.word	0x2400c8a4
 80135f8:	2400c8ac 	.word	0x2400c8ac
 80135fc:	2400c854 	.word	0x2400c854

08013600 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013600:	b538      	push	{r3, r4, r5, lr}
 8013602:	4b0e      	ldr	r3, [pc, #56]	; (801363c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013604:	4604      	mov	r4, r0
 8013606:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	429a      	cmp	r2, r3
 801360c:	d214      	bcs.n	8013638 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801360e:	6803      	ldr	r3, [r0, #0]
 8013610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013612:	4798      	blx	r3
 8013614:	6823      	ldr	r3, [r4, #0]
 8013616:	4605      	mov	r5, r0
 8013618:	4620      	mov	r0, r4
 801361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801361c:	4798      	blx	r3
 801361e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013622:	b22d      	sxth	r5, r5
 8013624:	4601      	mov	r1, r0
 8013626:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801362a:	bf06      	itte	eq
 801362c:	4602      	moveq	r2, r0
 801362e:	4629      	moveq	r1, r5
 8013630:	462a      	movne	r2, r5
 8013632:	4620      	mov	r0, r4
 8013634:	f7fe fd34 	bl	80120a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013638:	bd38      	pop	{r3, r4, r5, pc}
 801363a:	bf00      	nop
 801363c:	2400c8a8 	.word	0x2400c8a8

08013640 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013640:	b530      	push	{r4, r5, lr}
 8013642:	888b      	ldrh	r3, [r1, #4]
 8013644:	b085      	sub	sp, #20
 8013646:	4604      	mov	r4, r0
 8013648:	8583      	strh	r3, [r0, #44]	; 0x2c
 801364a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801364e:	b923      	cbnz	r3, 801365a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013650:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013654:	b90b      	cbnz	r3, 801365a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013656:	f7ff ffd3 	bl	8013600 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801365a:	6823      	ldr	r3, [r4, #0]
 801365c:	466d      	mov	r5, sp
 801365e:	4621      	mov	r1, r4
 8013660:	343c      	adds	r4, #60	; 0x3c
 8013662:	4628      	mov	r0, r5
 8013664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013668:	4798      	blx	r3
 801366a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801366e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013672:	b005      	add	sp, #20
 8013674:	bd30      	pop	{r4, r5, pc}

08013676 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013676:	2300      	movs	r3, #0
 8013678:	8083      	strh	r3, [r0, #4]
 801367a:	80c3      	strh	r3, [r0, #6]
 801367c:	8003      	strh	r3, [r0, #0]
 801367e:	8043      	strh	r3, [r0, #2]
 8013680:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013684:	2bff      	cmp	r3, #255	; 0xff
 8013686:	bf01      	itttt	eq
 8013688:	890b      	ldrheq	r3, [r1, #8]
 801368a:	8083      	strheq	r3, [r0, #4]
 801368c:	894b      	ldrheq	r3, [r1, #10]
 801368e:	80c3      	strheq	r3, [r0, #6]
 8013690:	4770      	bx	lr
	...

08013694 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013696:	4604      	mov	r4, r0
 8013698:	466b      	mov	r3, sp
 801369a:	6808      	ldr	r0, [r1, #0]
 801369c:	6849      	ldr	r1, [r1, #4]
 801369e:	c303      	stmia	r3!, {r0, r1}
 80136a0:	6823      	ldr	r3, [r4, #0]
 80136a2:	4669      	mov	r1, sp
 80136a4:	4620      	mov	r0, r4
 80136a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136a8:	4798      	blx	r3
 80136aa:	4b08      	ldr	r3, [pc, #32]	; (80136cc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80136b2:	b10a      	cbz	r2, 80136b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80136b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80136b6:	b900      	cbnz	r0, 80136ba <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80136b8:	6898      	ldr	r0, [r3, #8]
 80136ba:	6803      	ldr	r3, [r0, #0]
 80136bc:	4669      	mov	r1, sp
 80136be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80136c0:	6a1d      	ldr	r5, [r3, #32]
 80136c2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80136c6:	47a8      	blx	r5
 80136c8:	b003      	add	sp, #12
 80136ca:	bd30      	pop	{r4, r5, pc}
 80136cc:	2400c854 	.word	0x2400c854

080136d0 <_ZN8touchgfx3BoxD1Ev>:
 80136d0:	4770      	bx	lr

080136d2 <_ZN8touchgfx3BoxD0Ev>:
 80136d2:	b510      	push	{r4, lr}
 80136d4:	4604      	mov	r4, r0
 80136d6:	212c      	movs	r1, #44	; 0x2c
 80136d8:	f00c ff09 	bl	80204ee <_ZdlPvj>
 80136dc:	4620      	mov	r0, r4
 80136de:	bd10      	pop	{r4, pc}

080136e0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80136e0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80136e4:	b12a      	cbz	r2, 80136f2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80136e6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80136ea:	b112      	cbz	r2, 80136f2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80136ec:	6803      	ldr	r3, [r0, #0]
 80136ee:	695b      	ldr	r3, [r3, #20]
 80136f0:	4718      	bx	r3
 80136f2:	4770      	bx	lr

080136f4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
 80136f4:	4770      	bx	lr
	...

080136f8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80136f8:	4b30      	ldr	r3, [pc, #192]	; (80137bc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80136fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136fe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013700:	b08d      	sub	sp, #52	; 0x34
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	4604      	mov	r4, r0
 8013706:	460f      	mov	r7, r1
 8013708:	4293      	cmp	r3, r2
 801370a:	d954      	bls.n	80137b6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801370c:	4b2c      	ldr	r3, [pc, #176]	; (80137c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801370e:	6819      	ldr	r1, [r3, #0]
 8013710:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013714:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8013718:	4a2a      	ldr	r2, [pc, #168]	; (80137c4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801371a:	6812      	ldr	r2, [r2, #0]
 801371c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013720:	2900      	cmp	r1, #0
 8013722:	d048      	beq.n	80137b6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013724:	785a      	ldrb	r2, [r3, #1]
 8013726:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801372a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801372e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013732:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013736:	4b24      	ldr	r3, [pc, #144]	; (80137c8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013738:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8013742:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8013746:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801374a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801374c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8013750:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8013754:	9107      	str	r1, [sp, #28]
 8013756:	f88d 8020 	strb.w	r8, [sp, #32]
 801375a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801375e:	9609      	str	r6, [sp, #36]	; 0x24
 8013760:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8013764:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013768:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 801376c:	b10b      	cbz	r3, 8013772 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801376e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8013770:	b905      	cbnz	r5, 8013774 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8013772:	6895      	ldr	r5, [r2, #8]
 8013774:	ae05      	add	r6, sp, #20
 8013776:	4621      	mov	r1, r4
 8013778:	4630      	mov	r0, r6
 801377a:	f003 f95f 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801377e:	4b13      	ldr	r3, [pc, #76]	; (80137cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013780:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013782:	6818      	ldr	r0, [r3, #0]
 8013784:	f7f0 fe7a 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 8013788:	6823      	ldr	r3, [r4, #0]
 801378a:	4680      	mov	r8, r0
 801378c:	4620      	mov	r0, r4
 801378e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013790:	4798      	blx	r3
 8013792:	6823      	ldr	r3, [r4, #0]
 8013794:	4681      	mov	r9, r0
 8013796:	4620      	mov	r0, r4
 8013798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801379c:	4798      	blx	r3
 801379e:	ab07      	add	r3, sp, #28
 80137a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80137a4:	9300      	str	r3, [sp, #0]
 80137a6:	463b      	mov	r3, r7
 80137a8:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80137ac:	4628      	mov	r0, r5
 80137ae:	e896 0006 	ldmia.w	r6, {r1, r2}
 80137b2:	f7f0 fe0f 	bl	80043d4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80137b6:	b00d      	add	sp, #52	; 0x34
 80137b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137bc:	2400c8a8 	.word	0x2400c8a8
 80137c0:	2400c8a4 	.word	0x2400c8a4
 80137c4:	2400c8ac 	.word	0x2400c8ac
 80137c8:	2400c854 	.word	0x2400c854
 80137cc:	2400c8b0 	.word	0x2400c8b0

080137d0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 80137d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137d4:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80137d8:	b0a0      	sub	sp, #128	; 0x80
 80137da:	4604      	mov	r4, r0
 80137dc:	b193      	cbz	r3, 8013804 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80137de:	4b30      	ldr	r3, [pc, #192]	; (80138a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 80137e0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80137e2:	881b      	ldrh	r3, [r3, #0]
 80137e4:	428b      	cmp	r3, r1
 80137e6:	d90d      	bls.n	8013804 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80137e8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	dd09      	ble.n	8013804 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80137f0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	dd05      	ble.n	8013804 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80137f8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80137fc:	b12b      	cbz	r3, 801380a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 80137fe:	6803      	ldr	r3, [r0, #0]
 8013800:	695b      	ldr	r3, [r3, #20]
 8013802:	4798      	blx	r3
 8013804:	b020      	add	sp, #128	; 0x80
 8013806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801380a:	4b26      	ldr	r3, [pc, #152]	; (80138a4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8013812:	4b25      	ldr	r3, [pc, #148]	; (80138a8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801381a:	4b24      	ldr	r3, [pc, #144]	; (80138ac <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 801381c:	6818      	ldr	r0, [r3, #0]
 801381e:	f7f0 fe2d 	bl	800447c <_ZNK8touchgfx5Texts7getTextEt>
 8013822:	4606      	mov	r6, r0
 8013824:	a807      	add	r0, sp, #28
 8013826:	f003 fcad 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 801382a:	682b      	ldr	r3, [r5, #0]
 801382c:	4628      	mov	r0, r5
 801382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013830:	4798      	blx	r3
 8013832:	682b      	ldr	r3, [r5, #0]
 8013834:	4607      	mov	r7, r0
 8013836:	4628      	mov	r0, r5
 8013838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801383a:	4798      	blx	r3
 801383c:	6823      	ldr	r3, [r4, #0]
 801383e:	4605      	mov	r5, r0
 8013840:	4620      	mov	r0, r4
 8013842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013844:	4798      	blx	r3
 8013846:	6823      	ldr	r3, [r4, #0]
 8013848:	4680      	mov	r8, r0
 801384a:	4620      	mov	r0, r4
 801384c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013850:	4798      	blx	r3
 8013852:	462b      	mov	r3, r5
 8013854:	463a      	mov	r2, r7
 8013856:	4631      	mov	r1, r6
 8013858:	e9cd 8000 	strd	r8, r0, [sp]
 801385c:	a807      	add	r0, sp, #28
 801385e:	f003 fd01 	bl	8017264 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013862:	a807      	add	r0, sp, #28
 8013864:	f004 f8ba 	bl	80179dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013868:	280a      	cmp	r0, #10
 801386a:	d103      	bne.n	8013874 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 801386c:	6823      	ldr	r3, [r4, #0]
 801386e:	4620      	mov	r0, r4
 8013870:	695b      	ldr	r3, [r3, #20]
 8013872:	e7c6      	b.n	8013802 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8013874:	a807      	add	r0, sp, #28
 8013876:	f004 f8b1 	bl	80179dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801387a:	2800      	cmp	r0, #0
 801387c:	d1f4      	bne.n	8013868 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 801387e:	ad04      	add	r5, sp, #16
 8013880:	4621      	mov	r1, r4
 8013882:	4628      	mov	r0, r5
 8013884:	f7ff fc5a 	bl	801313c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8013888:	ab02      	add	r3, sp, #8
 801388a:	6822      	ldr	r2, [r4, #0]
 801388c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013890:	6912      	ldr	r2, [r2, #16]
 8013892:	e883 0003 	stmia.w	r3, {r0, r1}
 8013896:	4619      	mov	r1, r3
 8013898:	4620      	mov	r0, r4
 801389a:	4790      	blx	r2
 801389c:	e7b2      	b.n	8013804 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801389e:	bf00      	nop
 80138a0:	2400c8a8 	.word	0x2400c8a8
 80138a4:	2400c8a4 	.word	0x2400c8a4
 80138a8:	2400c8ac 	.word	0x2400c8ac
 80138ac:	2400c8b0 	.word	0x2400c8b0

080138b0 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 80138b0:	b510      	push	{r4, lr}
 80138b2:	4604      	mov	r4, r0
 80138b4:	2148      	movs	r1, #72	; 0x48
 80138b6:	f00c fe1a 	bl	80204ee <_ZdlPvj>
 80138ba:	4620      	mov	r0, r4
 80138bc:	bd10      	pop	{r4, pc}

080138be <_ZN8touchgfx5ImageD1Ev>:
 80138be:	4770      	bx	lr

080138c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80138c0:	b570      	push	{r4, r5, r6, lr}
 80138c2:	880b      	ldrh	r3, [r1, #0]
 80138c4:	460d      	mov	r5, r1
 80138c6:	4604      	mov	r4, r0
 80138c8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80138ca:	4608      	mov	r0, r1
 80138cc:	f004 fd34 	bl	8018338 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80138d0:	4606      	mov	r6, r0
 80138d2:	4628      	mov	r0, r5
 80138d4:	f004 fd64 	bl	80183a0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80138d8:	6823      	ldr	r3, [r4, #0]
 80138da:	4605      	mov	r5, r0
 80138dc:	4631      	mov	r1, r6
 80138de:	4620      	mov	r0, r4
 80138e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138e2:	4798      	blx	r3
 80138e4:	6823      	ldr	r3, [r4, #0]
 80138e6:	4629      	mov	r1, r5
 80138e8:	4620      	mov	r0, r4
 80138ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138f0:	4718      	bx	r3

080138f2 <_ZN8touchgfx5ImageD0Ev>:
 80138f2:	b510      	push	{r4, lr}
 80138f4:	4604      	mov	r4, r0
 80138f6:	212c      	movs	r1, #44	; 0x2c
 80138f8:	f00c fdf9 	bl	80204ee <_ZdlPvj>
 80138fc:	4620      	mov	r0, r4
 80138fe:	bd10      	pop	{r4, pc}

08013900 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013900:	b510      	push	{r4, lr}
 8013902:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8013906:	4604      	mov	r4, r0
 8013908:	2bff      	cmp	r3, #255	; 0xff
 801390a:	d006      	beq.n	801391a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801390c:	2300      	movs	r3, #0
 801390e:	8003      	strh	r3, [r0, #0]
 8013910:	8043      	strh	r3, [r0, #2]
 8013912:	8083      	strh	r3, [r0, #4]
 8013914:	80c3      	strh	r3, [r0, #6]
 8013916:	4620      	mov	r0, r4
 8013918:	bd10      	pop	{r4, pc}
 801391a:	3126      	adds	r1, #38	; 0x26
 801391c:	f004 fd74 	bl	8018408 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013920:	e7f9      	b.n	8013916 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013922 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013922:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8013926:	b12a      	cbz	r2, 8013934 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013928:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801392c:	b112      	cbz	r2, 8013934 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801392e:	6803      	ldr	r3, [r0, #0]
 8013930:	695b      	ldr	r3, [r3, #20]
 8013932:	4718      	bx	r3
 8013934:	4770      	bx	lr
	...

08013938 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801393c:	4604      	mov	r4, r0
 801393e:	b088      	sub	sp, #32
 8013940:	2500      	movs	r5, #0
 8013942:	460f      	mov	r7, r1
 8013944:	f854 3b26 	ldr.w	r3, [r4], #38
 8013948:	a904      	add	r1, sp, #16
 801394a:	4606      	mov	r6, r0
 801394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013952:	4798      	blx	r3
 8013954:	4620      	mov	r0, r4
 8013956:	f004 fcef 	bl	8018338 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801395a:	4680      	mov	r8, r0
 801395c:	4620      	mov	r0, r4
 801395e:	f004 fd1f 	bl	80183a0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013962:	9506      	str	r5, [sp, #24]
 8013964:	ad06      	add	r5, sp, #24
 8013966:	f8ad 001e 	strh.w	r0, [sp, #30]
 801396a:	4639      	mov	r1, r7
 801396c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013970:	4628      	mov	r0, r5
 8013972:	f7fe fa83 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8013976:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801397a:	2b00      	cmp	r3, #0
 801397c:	dd19      	ble.n	80139b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801397e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013982:	2b00      	cmp	r3, #0
 8013984:	dd15      	ble.n	80139b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013986:	4b0c      	ldr	r3, [pc, #48]	; (80139b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801398e:	b10a      	cbz	r2, 8013994 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013990:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013992:	b900      	cbnz	r0, 8013996 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013994:	6898      	ldr	r0, [r3, #8]
 8013996:	2701      	movs	r7, #1
 8013998:	6801      	ldr	r1, [r0, #0]
 801399a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801399e:	9702      	str	r7, [sp, #8]
 80139a0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80139a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80139a8:	e9cd 5600 	strd	r5, r6, [sp]
 80139ac:	688d      	ldr	r5, [r1, #8]
 80139ae:	4621      	mov	r1, r4
 80139b0:	47a8      	blx	r5
 80139b2:	b008      	add	sp, #32
 80139b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b8:	2400c854 	.word	0x2400c854

080139bc <_ZN8touchgfx8KeyboardD1Ev>:
 80139bc:	4770      	bx	lr

080139be <_ZN8touchgfx8Keyboard14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80139be:	b538      	push	{r3, r4, r5, lr}
 80139c0:	4604      	mov	r4, r0
 80139c2:	4615      	mov	r5, r2
 80139c4:	f7fe fb32 	bl	801202c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80139c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139cc:	81a3      	strh	r3, [r4, #12]
 80139ce:	f04f 33ff 	mov.w	r3, #4294967295
 80139d2:	6223      	str	r3, [r4, #32]
 80139d4:	682b      	ldr	r3, [r5, #0]
 80139d6:	61e3      	str	r3, [r4, #28]
 80139d8:	602c      	str	r4, [r5, #0]
 80139da:	bd38      	pop	{r3, r4, r5, pc}

080139dc <_ZN8touchgfx8KeyboardD0Ev>:
 80139dc:	b510      	push	{r4, lr}
 80139de:	4604      	mov	r4, r0
 80139e0:	21e8      	movs	r1, #232	; 0xe8
 80139e2:	f00c fd84 	bl	80204ee <_ZdlPvj>
 80139e6:	4620      	mov	r0, r4
 80139e8:	bd10      	pop	{r4, pc}

080139ea <_ZNK8touchgfx4Rect9intersectEss>:
 80139ea:	b510      	push	{r4, lr}
 80139ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 80139f0:	428b      	cmp	r3, r1
 80139f2:	dc10      	bgt.n	8013a16 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80139f4:	8884      	ldrh	r4, [r0, #4]
 80139f6:	4423      	add	r3, r4
 80139f8:	b21b      	sxth	r3, r3
 80139fa:	4299      	cmp	r1, r3
 80139fc:	da0b      	bge.n	8013a16 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80139fe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013a02:	4293      	cmp	r3, r2
 8013a04:	dc07      	bgt.n	8013a16 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013a06:	88c0      	ldrh	r0, [r0, #6]
 8013a08:	4418      	add	r0, r3
 8013a0a:	b200      	sxth	r0, r0
 8013a0c:	4282      	cmp	r2, r0
 8013a0e:	bfac      	ite	ge
 8013a10:	2000      	movge	r0, #0
 8013a12:	2001      	movlt	r0, #1
 8013a14:	bd10      	pop	{r4, pc}
 8013a16:	2000      	movs	r0, #0
 8013a18:	e7fc      	b.n	8013a14 <_ZNK8touchgfx4Rect9intersectEss+0x2a>
	...

08013a1c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE>:
 8013a1c:	b530      	push	{r4, r5, lr}
 8013a1e:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8013a22:	b085      	sub	sp, #20
 8013a24:	4604      	mov	r4, r0
 8013a26:	460d      	mov	r5, r1
 8013a28:	b1f3      	cbz	r3, 8013a68 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8013a2a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a2e:	30bc      	adds	r0, #188	; 0xbc
 8013a30:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8013a34:	f7ff ffd9 	bl	80139ea <_ZNK8touchgfx4Rect9intersectEss>
 8013a38:	b9b0      	cbnz	r0, 8013a68 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8013a3a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8013a3e:	b99b      	cbnz	r3, 8013a68 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8013a40:	480a      	ldr	r0, [pc, #40]	; (8013a6c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x50>)
 8013a42:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013a46:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8013a4a:	9001      	str	r0, [sp, #4]
 8013a4c:	2002      	movs	r0, #2
 8013a4e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013a52:	6823      	ldr	r3, [r4, #0]
 8013a54:	f88d 0008 	strb.w	r0, [sp, #8]
 8013a58:	4620      	mov	r0, r4
 8013a5a:	f8ad 100a 	strh.w	r1, [sp, #10]
 8013a5e:	a901      	add	r1, sp, #4
 8013a60:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a66:	4798      	blx	r3
 8013a68:	b005      	add	sp, #20
 8013a6a:	bd30      	pop	{r4, r5, pc}
 8013a6c:	08023724 	.word	0x08023724

08013a70 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013a70:	b510      	push	{r4, lr}
 8013a72:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013a76:	888a      	ldrh	r2, [r1, #4]
 8013a78:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013a7c:	4422      	add	r2, r4
 8013a7e:	b212      	sxth	r2, r2
 8013a80:	4293      	cmp	r3, r2
 8013a82:	da15      	bge.n	8013ab0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013a84:	8882      	ldrh	r2, [r0, #4]
 8013a86:	4413      	add	r3, r2
 8013a88:	b21b      	sxth	r3, r3
 8013a8a:	429c      	cmp	r4, r3
 8013a8c:	da10      	bge.n	8013ab0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013a8e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013a92:	88c9      	ldrh	r1, [r1, #6]
 8013a94:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013a98:	4419      	add	r1, r3
 8013a9a:	b209      	sxth	r1, r1
 8013a9c:	428a      	cmp	r2, r1
 8013a9e:	da07      	bge.n	8013ab0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013aa0:	88c0      	ldrh	r0, [r0, #6]
 8013aa2:	4410      	add	r0, r2
 8013aa4:	b200      	sxth	r0, r0
 8013aa6:	4283      	cmp	r3, r0
 8013aa8:	bfac      	ite	ge
 8013aaa:	2000      	movge	r0, #0
 8013aac:	2001      	movlt	r0, #1
 8013aae:	bd10      	pop	{r4, pc}
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	e7fc      	b.n	8013aae <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08013ab4 <_ZN8touchgfx8DrawableC1Ev>:
 8013ab4:	4a0a      	ldr	r2, [pc, #40]	; (8013ae0 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 8013ab6:	6002      	str	r2, [r0, #0]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	8082      	strh	r2, [r0, #4]
 8013abc:	80c2      	strh	r2, [r0, #6]
 8013abe:	8102      	strh	r2, [r0, #8]
 8013ac0:	8142      	strh	r2, [r0, #10]
 8013ac2:	8182      	strh	r2, [r0, #12]
 8013ac4:	81c2      	strh	r2, [r0, #14]
 8013ac6:	8202      	strh	r2, [r0, #16]
 8013ac8:	8242      	strh	r2, [r0, #18]
 8013aca:	61c2      	str	r2, [r0, #28]
 8013acc:	8402      	strh	r2, [r0, #32]
 8013ace:	8442      	strh	r2, [r0, #34]	; 0x22
 8013ad0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8013ad4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013ad8:	2201      	movs	r2, #1
 8013ada:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8013ade:	4770      	bx	lr
 8013ae0:	08023bcc 	.word	0x08023bcc

08013ae4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8013ae4:	b538      	push	{r3, r4, r5, lr}
 8013ae6:	4604      	mov	r4, r0
 8013ae8:	460d      	mov	r5, r1
 8013aea:	2226      	movs	r2, #38	; 0x26
 8013aec:	2100      	movs	r1, #0
 8013aee:	f00c fec3 	bl	8020878 <memset>
 8013af2:	4620      	mov	r0, r4
 8013af4:	f7ff ffde 	bl	8013ab4 <_ZN8touchgfx8DrawableC1Ev>
 8013af8:	4b06      	ldr	r3, [pc, #24]	; (8013b14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8013afa:	4620      	mov	r0, r4
 8013afc:	4629      	mov	r1, r5
 8013afe:	6023      	str	r3, [r4, #0]
 8013b00:	882b      	ldrh	r3, [r5, #0]
 8013b02:	84e3      	strh	r3, [r4, #38]	; 0x26
 8013b04:	23ff      	movs	r3, #255	; 0xff
 8013b06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8013b0a:	f7ff fed9 	bl	80138c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013b0e:	4620      	mov	r0, r4
 8013b10:	bd38      	pop	{r3, r4, r5, pc}
 8013b12:	bf00      	nop
 8013b14:	08023a2c 	.word	0x08023a2c

08013b18 <_ZN8touchgfx8KeyboardC1Ev>:
 8013b18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b1c:	4604      	mov	r4, r0
 8013b1e:	2500      	movs	r5, #0
 8013b20:	f7ff ffc8 	bl	8013ab4 <_ZN8touchgfx8DrawableC1Ev>
 8013b24:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8013b28:	4b2f      	ldr	r3, [pc, #188]	; (8013be8 <_ZN8touchgfx8KeyboardC1Ev+0xd0>)
 8013b2a:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8013b2e:	af02      	add	r7, sp, #8
 8013b30:	f104 0864 	add.w	r8, r4, #100	; 0x64
 8013b34:	6023      	str	r3, [r4, #0]
 8013b36:	4648      	mov	r0, r9
 8013b38:	f827 6d04 	strh.w	r6, [r7, #-4]!
 8013b3c:	4639      	mov	r1, r7
 8013b3e:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
 8013b42:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 8013b46:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8013b4a:	f7ff ffcb 	bl	8013ae4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013b4e:	2226      	movs	r2, #38	; 0x26
 8013b50:	4629      	mov	r1, r5
 8013b52:	4640      	mov	r0, r8
 8013b54:	f00c fe90 	bl	8020878 <memset>
 8013b58:	4640      	mov	r0, r8
 8013b5a:	f7ff ffab 	bl	8013ab4 <_ZN8touchgfx8DrawableC1Ev>
 8013b5e:	4b23      	ldr	r3, [pc, #140]	; (8013bec <_ZN8touchgfx8KeyboardC1Ev+0xd4>)
 8013b60:	4639      	mov	r1, r7
 8013b62:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 8013b66:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8013b6a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8013b6e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 8013b72:	4650      	mov	r0, sl
 8013b74:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8013b78:	4b1d      	ldr	r3, [pc, #116]	; (8013bf0 <_ZN8touchgfx8KeyboardC1Ev+0xd8>)
 8013b7a:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 8013b7e:	6663      	str	r3, [r4, #100]	; 0x64
 8013b80:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
 8013b84:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8013b88:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8013b8c:	f8a4 60a4 	strh.w	r6, [r4, #164]	; 0xa4
 8013b90:	f8a4 60a6 	strh.w	r6, [r4, #166]	; 0xa6
 8013b94:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8013b98:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 8013b9c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8013ba0:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8013ba4:	f7ff ff9e 	bl	8013ae4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013ba8:	2301      	movs	r3, #1
 8013baa:	462a      	mov	r2, r5
 8013bac:	4629      	mov	r1, r5
 8013bae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8013bb2:	4648      	mov	r0, r9
 8013bb4:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
 8013bb8:	f7fe fa65 	bl	8012086 <_ZN8touchgfx8Drawable5setXYEss>
 8013bbc:	4649      	mov	r1, r9
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	f7fd ffce 	bl	8011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013bc4:	4651      	mov	r1, sl
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
 8013bcc:	f7fd ffc8 	bl	8011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013bd0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	4641      	mov	r1, r8
 8013bd8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8013bdc:	f7fd ffc0 	bl	8011b60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013be0:	4620      	mov	r0, r4
 8013be2:	b002      	add	sp, #8
 8013be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013be8:	08023a98 	.word	0x08023a98
 8013bec:	080221f0 	.word	0x080221f0
 8013bf0:	08022e9c 	.word	0x08022e9c

08013bf4 <_ZN8touchgfx8Keyboard9setBufferEPtt>:
 8013bf4:	b510      	push	{r4, lr}
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	6301      	str	r1, [r0, #48]	; 0x30
 8013bfa:	8682      	strh	r2, [r0, #52]	; 0x34
 8013bfc:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
 8013c00:	4608      	mov	r0, r1
 8013c02:	f004 fa25 	bl	8018050 <_ZN8touchgfx7Unicode6strlenEPKt>
 8013c06:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013c08:	bd10      	pop	{r4, pc}

08013c0a <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>:
 8013c0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013c0e:	4605      	mov	r5, r0
 8013c10:	460c      	mov	r4, r1
 8013c12:	f8c5 10b0 	str.w	r1, [r5, #176]	; 0xb0
 8013c16:	b309      	cbz	r1, 8013c5c <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE+0x52>
 8013c18:	460f      	mov	r7, r1
 8013c1a:	a902      	add	r1, sp, #8
 8013c1c:	f105 0664 	add.w	r6, r5, #100	; 0x64
 8013c20:	3038      	adds	r0, #56	; 0x38
 8013c22:	f837 3b1c 	ldrh.w	r3, [r7], #28
 8013c26:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8013c2a:	f7ff fe49 	bl	80138c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013c2e:	4639      	mov	r1, r7
 8013c30:	4630      	mov	r0, r6
 8013c32:	f7ff fd05 	bl	8013640 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c38:	4630      	mov	r0, r6
 8013c3a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8013c3e:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 8013c42:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
 8013c46:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8013c4a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8013c4e:	f7fe fa1a 	bl	8012086 <_ZN8touchgfx8Drawable5setXYEss>
 8013c52:	4642      	mov	r2, r8
 8013c54:	4639      	mov	r1, r7
 8013c56:	4630      	mov	r0, r6
 8013c58:	f7fe fa22 	bl	80120a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013c5c:	682b      	ldr	r3, [r5, #0]
 8013c5e:	4628      	mov	r0, r5
 8013c60:	695b      	ldr	r3, [r3, #20]
 8013c62:	4798      	blx	r3
 8013c64:	b002      	add	sp, #8
 8013c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08013c6c <_ZN8touchgfx8Keyboard18setTextIndentationEv>:
 8013c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c70:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8013c74:	4604      	mov	r4, r0
 8013c76:	b343      	cbz	r3, 8013cca <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x5e>
 8013c78:	4a15      	ldr	r2, [pc, #84]	; (8013cd0 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x64>)
 8013c7a:	f100 0764 	add.w	r7, r0, #100	; 0x64
 8013c7e:	8c19      	ldrh	r1, [r3, #32]
 8013c80:	6812      	ldr	r2, [r2, #0]
 8013c82:	4638      	mov	r0, r7
 8013c84:	8add      	ldrh	r5, [r3, #22]
 8013c86:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 8013c8a:	4a12      	ldr	r2, [pc, #72]	; (8013cd4 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x68>)
 8013c8c:	f9b3 8018 	ldrsh.w	r8, [r3, #24]
 8013c90:	6812      	ldr	r2, [r2, #0]
 8013c92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8013c96:	8a59      	ldrh	r1, [r3, #18]
 8013c98:	7a16      	ldrb	r6, [r2, #8]
 8013c9a:	b2b2      	uxth	r2, r6
 8013c9c:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8013ca0:	1a89      	subs	r1, r1, r2
 8013ca2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013ca6:	b22d      	sxth	r5, r5
 8013ca8:	b209      	sxth	r1, r1
 8013caa:	f7fe f9ec 	bl	8012086 <_ZN8touchgfx8Drawable5setXYEss>
 8013cae:	4642      	mov	r2, r8
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	4638      	mov	r0, r7
 8013cb4:	f7fe f9f4 	bl	80120a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	f04f 32ff 	mov.w	r2, #4294967295
 8013cbe:	f884 609b 	strb.w	r6, [r4, #155]	; 0x9b
 8013cc2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8013cc6:	e9c4 3228 	strd	r3, r2, [r4, #160]	; 0xa0
 8013cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cce:	bf00      	nop
 8013cd0:	2400c8a4 	.word	0x2400c8a4
 8013cd4:	2400c8ac 	.word	0x2400c8ac

08013cd8 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>:
 8013cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cdc:	4690      	mov	r8, r2
 8013cde:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	4606      	mov	r6, r0
 8013ce6:	4699      	mov	r9, r3
 8013ce8:	8042      	strh	r2, [r0, #2]
 8013cea:	8082      	strh	r2, [r0, #4]
 8013cec:	80c2      	strh	r2, [r0, #6]
 8013cee:	8102      	strh	r2, [r0, #8]
 8013cf0:	7002      	strb	r2, [r0, #0]
 8013cf2:	b1c7      	cbz	r7, 8013d26 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8013cf4:	f897 a008 	ldrb.w	sl, [r7, #8]
 8013cf8:	4615      	mov	r5, r2
 8013cfa:	f04f 0b0c 	mov.w	fp, #12
 8013cfe:	b2eb      	uxtb	r3, r5
 8013d00:	459a      	cmp	sl, r3
 8013d02:	d910      	bls.n	8013d26 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8013d04:	687c      	ldr	r4, [r7, #4]
 8013d06:	464a      	mov	r2, r9
 8013d08:	4641      	mov	r1, r8
 8013d0a:	fb0b 4405 	mla	r4, fp, r5, r4
 8013d0e:	3501      	adds	r5, #1
 8013d10:	1ca0      	adds	r0, r4, #2
 8013d12:	f7ff fe6a 	bl	80139ea <_ZNK8touchgfx4Rect9intersectEss>
 8013d16:	2800      	cmp	r0, #0
 8013d18:	d0f1      	beq.n	8013cfe <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x26>
 8013d1a:	6823      	ldr	r3, [r4, #0]
 8013d1c:	6033      	str	r3, [r6, #0]
 8013d1e:	6863      	ldr	r3, [r4, #4]
 8013d20:	6073      	str	r3, [r6, #4]
 8013d22:	68a3      	ldr	r3, [r4, #8]
 8013d24:	60b3      	str	r3, [r6, #8]
 8013d26:	4630      	mov	r0, r6
 8013d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013d2c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>:
 8013d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d30:	2500      	movs	r5, #0
 8013d32:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8013d36:	4606      	mov	r6, r0
 8013d38:	4690      	mov	r8, r2
 8013d3a:	4699      	mov	r9, r3
 8013d3c:	6085      	str	r5, [r0, #8]
 8013d3e:	e9c0 5500 	strd	r5, r5, [r0]
 8013d42:	b307      	cbz	r7, 8013d86 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8013d44:	f897 a010 	ldrb.w	sl, [r7, #16]
 8013d48:	b2eb      	uxtb	r3, r5
 8013d4a:	459a      	cmp	sl, r3
 8013d4c:	d91b      	bls.n	8013d86 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8013d4e:	68fc      	ldr	r4, [r7, #12]
 8013d50:	464a      	mov	r2, r9
 8013d52:	4641      	mov	r1, r8
 8013d54:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8013d58:	3501      	adds	r5, #1
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	f7ff fe45 	bl	80139ea <_ZNK8touchgfx4Rect9intersectEss>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d0f1      	beq.n	8013d48 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x1c>
 8013d64:	4623      	mov	r3, r4
 8013d66:	4632      	mov	r2, r6
 8013d68:	f104 0508 	add.w	r5, r4, #8
 8013d6c:	6818      	ldr	r0, [r3, #0]
 8013d6e:	3308      	adds	r3, #8
 8013d70:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013d74:	4614      	mov	r4, r2
 8013d76:	42ab      	cmp	r3, r5
 8013d78:	c403      	stmia	r4!, {r0, r1}
 8013d7a:	4622      	mov	r2, r4
 8013d7c:	d1f6      	bne.n	8013d6c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x40>
 8013d7e:	6818      	ldr	r0, [r3, #0]
 8013d80:	6020      	str	r0, [r4, #0]
 8013d82:	889b      	ldrh	r3, [r3, #4]
 8013d84:	80a3      	strh	r3, [r4, #4]
 8013d86:	4630      	mov	r0, r6
 8013d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013d8c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>:
 8013d8c:	b570      	push	{r4, r5, r6, lr}
 8013d8e:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8013d92:	b160      	cbz	r0, 8013dae <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>
 8013d94:	7906      	ldrb	r6, [r0, #4]
 8013d96:	2300      	movs	r3, #0
 8013d98:	b2da      	uxtb	r2, r3
 8013d9a:	4296      	cmp	r6, r2
 8013d9c:	d908      	bls.n	8013db0 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x24>
 8013d9e:	009a      	lsls	r2, r3, #2
 8013da0:	6804      	ldr	r4, [r0, #0]
 8013da2:	3301      	adds	r3, #1
 8013da4:	18a5      	adds	r5, r4, r2
 8013da6:	5ca2      	ldrb	r2, [r4, r2]
 8013da8:	428a      	cmp	r2, r1
 8013daa:	d1f5      	bne.n	8013d98 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0xc>
 8013dac:	8868      	ldrh	r0, [r5, #2]
 8013dae:	bd70      	pop	{r4, r5, r6, pc}
 8013db0:	2000      	movs	r0, #0
 8013db2:	e7fc      	b.n	8013dae <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>

08013db4 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE>:
 8013db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db8:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8013dbc:	b08d      	sub	sp, #52	; 0x34
 8013dbe:	4605      	mov	r5, r0
 8013dc0:	460e      	mov	r6, r1
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	f000 80c4 	beq.w	8013f50 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8013dc8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8013dca:	f004 f955 	bl	8018078 <_ZN8touchgfx11FontManager7getFontEt>
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	f000 80be 	beq.w	8013f50 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8013dd4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8013dd8:	2400      	movs	r4, #0
 8013dda:	9007      	str	r0, [sp, #28]
 8013ddc:	920a      	str	r2, [sp, #40]	; 0x28
 8013dde:	2201      	movs	r2, #1
 8013de0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8013de4:	f88d 2020 	strb.w	r2, [sp, #32]
 8013de8:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 8013dec:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8013df0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013df2:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
 8013df6:	9209      	str	r2, [sp, #36]	; 0x24
 8013df8:	9402      	str	r4, [sp, #8]
 8013dfa:	6803      	ldr	r3, [r0, #0]
 8013dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dfe:	4798      	blx	r3
 8013e00:	4607      	mov	r7, r0
 8013e02:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8013e06:	fa5f f884 	uxtb.w	r8, r4
 8013e0a:	7a1a      	ldrb	r2, [r3, #8]
 8013e0c:	4542      	cmp	r2, r8
 8013e0e:	f240 809f 	bls.w	8013f50 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8013e12:	220c      	movs	r2, #12
 8013e14:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013e18:	4631      	mov	r1, r6
 8013e1a:	fb02 f808 	mul.w	r8, r2, r8
 8013e1e:	eb09 0a08 	add.w	sl, r9, r8
 8013e22:	f10a 0a02 	add.w	sl, sl, #2
 8013e26:	4650      	mov	r0, sl
 8013e28:	f7ff fe22 	bl	8013a70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	f000 808a 	beq.w	8013f46 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8013e32:	f819 1008 	ldrb.w	r1, [r9, r8]
 8013e36:	4628      	mov	r0, r5
 8013e38:	f7ff ffa8 	bl	8013d8c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 8013e3c:	4681      	mov	r9, r0
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	f000 8081 	beq.w	8013f46 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8013e44:	f8da 0000 	ldr.w	r0, [sl]
 8013e48:	ab03      	add	r3, sp, #12
 8013e4a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013e4e:	c303      	stmia	r3!, {r0, r1}
 8013e50:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8013e54:	2102      	movs	r1, #2
 8013e56:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8013e5a:	1bd3      	subs	r3, r2, r7
 8013e5c:	fb93 f3f1 	sdiv	r3, r3, r1
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	4498      	add	r8, r3
 8013e64:	1ad3      	subs	r3, r2, r3
 8013e66:	fa1f f888 	uxth.w	r8, r8
 8013e6a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013e6e:	ab05      	add	r3, sp, #20
 8013e70:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013e74:	f8ad 800e 	strh.w	r8, [sp, #14]
 8013e78:	f8da 0000 	ldr.w	r0, [sl]
 8013e7c:	c303      	stmia	r3!, {r0, r1}
 8013e7e:	4631      	mov	r1, r6
 8013e80:	a805      	add	r0, sp, #20
 8013e82:	f7ff fdf5 	bl	8013a70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d05f      	beq.n	8013f4a <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x196>
 8013e8a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8013e8e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013e92:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8013e96:	4686      	mov	lr, r0
 8013e98:	4290      	cmp	r0, r2
 8013e9a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8013e9e:	4450      	add	r0, sl
 8013ea0:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 8013ea4:	bfb8      	it	lt
 8013ea6:	4696      	movlt	lr, r2
 8013ea8:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8013eac:	4452      	add	r2, sl
 8013eae:	b280      	uxth	r0, r0
 8013eb0:	4299      	cmp	r1, r3
 8013eb2:	468c      	mov	ip, r1
 8013eb4:	b292      	uxth	r2, r2
 8013eb6:	f8ad e014 	strh.w	lr, [sp, #20]
 8013eba:	fa0f fb80 	sxth.w	fp, r0
 8013ebe:	bfb8      	it	lt
 8013ec0:	469c      	movlt	ip, r3
 8013ec2:	fa0f fa82 	sxth.w	sl, r2
 8013ec6:	f8ad c016 	strh.w	ip, [sp, #22]
 8013eca:	45d3      	cmp	fp, sl
 8013ecc:	bfb8      	it	lt
 8013ece:	4602      	movlt	r2, r0
 8013ed0:	eba2 020e 	sub.w	r2, r2, lr
 8013ed4:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013ed8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013edc:	4411      	add	r1, r2
 8013ede:	88f2      	ldrh	r2, [r6, #6]
 8013ee0:	4413      	add	r3, r2
 8013ee2:	b289      	uxth	r1, r1
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	b208      	sxth	r0, r1
 8013ee8:	b21a      	sxth	r2, r3
 8013eea:	4290      	cmp	r0, r2
 8013eec:	bfb8      	it	lt
 8013eee:	460b      	movlt	r3, r1
 8013ef0:	eba3 030c 	sub.w	r3, r3, ip
 8013ef4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013ef8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8013efc:	4628      	mov	r0, r5
 8013efe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013f02:	f8ad 9008 	strh.w	r9, [sp, #8]
 8013f06:	1a9b      	subs	r3, r3, r2
 8013f08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013f0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013f10:	eba3 0808 	sub.w	r8, r3, r8
 8013f14:	682b      	ldr	r3, [r5, #0]
 8013f16:	f8ad 8016 	strh.w	r8, [sp, #22]
 8013f1a:	f10d 080c 	add.w	r8, sp, #12
 8013f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f20:	4641      	mov	r1, r8
 8013f22:	4798      	blx	r3
 8013f24:	4b0c      	ldr	r3, [pc, #48]	; (8013f58 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a4>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013f2c:	b10a      	cbz	r2, 8013f32 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x17e>
 8013f2e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013f30:	b900      	cbnz	r0, 8013f34 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x180>
 8013f32:	6898      	ldr	r0, [r3, #8]
 8013f34:	ab02      	add	r3, sp, #8
 8013f36:	9301      	str	r3, [sp, #4]
 8013f38:	ab07      	add	r3, sp, #28
 8013f3a:	9300      	str	r3, [sp, #0]
 8013f3c:	ab05      	add	r3, sp, #20
 8013f3e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8013f42:	f7f0 fa47 	bl	80043d4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013f46:	3401      	adds	r4, #1
 8013f48:	e75b      	b.n	8013e02 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x4e>
 8013f4a:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8013f4e:	e7d3      	b.n	8013ef8 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x144>
 8013f50:	b00d      	add	sp, #52	; 0x34
 8013f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f56:	bf00      	nop
 8013f58:	2400c854 	.word	0x2400c854

08013f5c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE>:
 8013f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f60:	790d      	ldrb	r5, [r1, #4]
 8013f62:	b08b      	sub	sp, #44	; 0x2c
 8013f64:	4604      	mov	r4, r0
 8013f66:	2d01      	cmp	r5, #1
 8013f68:	d108      	bne.n	8013f7c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 8013f6a:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
 8013f6e:	b12b      	cbz	r3, 8013f7c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 8013f70:	2300      	movs	r3, #0
 8013f72:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8013f76:	b00b      	add	sp, #44	; 0x2c
 8013f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f7c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013f80:	2700      	movs	r7, #0
 8013f82:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8013f86:	a806      	add	r0, sp, #24
 8013f88:	4642      	mov	r2, r8
 8013f8a:	4621      	mov	r1, r4
 8013f8c:	464b      	mov	r3, r9
 8013f8e:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8013f92:	f7ff fecb 	bl	8013d2c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>
 8013f96:	9e08      	ldr	r6, [sp, #32]
 8013f98:	2e00      	cmp	r6, #0
 8013f9a:	d049      	beq.n	8014030 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xd4>
 8013f9c:	2d00      	cmp	r5, #0
 8013f9e:	d133      	bne.n	8014008 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xac>
 8013fa0:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8013fa4:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8013fa8:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8013fac:	4630      	mov	r0, r6
 8013fae:	f7fe f86a 	bl	8012086 <_ZN8touchgfx8Drawable5setXYEss>
 8013fb2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013fb6:	a90a      	add	r1, sp, #40	; 0x28
 8013fb8:	f821 3d1c 	strh.w	r3, [r1, #-28]!
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	f7ff fc7f 	bl	80138c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	4622      	mov	r2, r4
 8013fc6:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 8013fca:	ab01      	add	r3, sp, #4
 8013fcc:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 8013fd0:	6851      	ldr	r1, [r2, #4]
 8013fd2:	c303      	stmia	r3!, {r0, r1}
 8013fd4:	6823      	ldr	r3, [r4, #0]
 8013fd6:	a901      	add	r1, sp, #4
 8013fd8:	4620      	mov	r0, r4
 8013fda:	691b      	ldr	r3, [r3, #16]
 8013fdc:	4798      	blx	r3
 8013fde:	1e6b      	subs	r3, r5, #1
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	d8c8      	bhi.n	8013f76 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8013fe4:	4622      	mov	r2, r4
 8013fe6:	ab01      	add	r3, sp, #4
 8013fe8:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 8013fec:	6851      	ldr	r1, [r2, #4]
 8013fee:	c303      	stmia	r3!, {r0, r1}
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	a901      	add	r1, sp, #4
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	691b      	ldr	r3, [r3, #16]
 8013ffe:	4798      	blx	r3
 8014000:	2d02      	cmp	r5, #2
 8014002:	d1b8      	bne.n	8013f76 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8014004:	2301      	movs	r3, #1
 8014006:	e7b4      	b.n	8013f72 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x16>
 8014008:	2d01      	cmp	r5, #1
 801400a:	d1e8      	bne.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801400c:	6833      	ldr	r3, [r6, #0]
 801400e:	4630      	mov	r0, r6
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	4798      	blx	r3
 8014014:	2800      	cmp	r0, #0
 8014016:	d0e5      	beq.n	8013fe4 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8014018:	6833      	ldr	r3, [r6, #0]
 801401a:	4630      	mov	r0, r6
 801401c:	689b      	ldr	r3, [r3, #8]
 801401e:	4798      	blx	r3
 8014020:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014022:	2800      	cmp	r0, #0
 8014024:	d0de      	beq.n	8013fe4 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8014026:	6803      	ldr	r3, [r0, #0]
 8014028:	4639      	mov	r1, r7
 801402a:	689b      	ldr	r3, [r3, #8]
 801402c:	4798      	blx	r3
 801402e:	e7d6      	b.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8014030:	4621      	mov	r1, r4
 8014032:	464b      	mov	r3, r9
 8014034:	4642      	mov	r2, r8
 8014036:	a803      	add	r0, sp, #12
 8014038:	f7ff fe4e 	bl	8013cd8 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>
 801403c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8014040:	b985      	cbnz	r5, 8014064 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x108>
 8014042:	2900      	cmp	r1, #0
 8014044:	d0cb      	beq.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8014046:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 801404a:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 801404e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014052:	4630      	mov	r0, r6
 8014054:	f7fe f817 	bl	8012086 <_ZN8touchgfx8Drawable5setXYEss>
 8014058:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801405c:	a90a      	add	r1, sp, #40	; 0x28
 801405e:	f821 3d28 	strh.w	r3, [r1, #-40]!
 8014062:	e7ab      	b.n	8013fbc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x60>
 8014064:	2d01      	cmp	r5, #1
 8014066:	d1ba      	bne.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8014068:	2900      	cmp	r1, #0
 801406a:	d0b8      	beq.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801406c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801406e:	2b00      	cmp	r3, #0
 8014070:	d0b5      	beq.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8014072:	4620      	mov	r0, r4
 8014074:	f7ff fe8a 	bl	8013d8c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 8014078:	4607      	mov	r7, r0
 801407a:	2800      	cmp	r0, #0
 801407c:	d0af      	beq.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801407e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014080:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014082:	3b01      	subs	r3, #1
 8014084:	429a      	cmp	r2, r3
 8014086:	daaa      	bge.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8014088:	f104 0864 	add.w	r8, r4, #100	; 0x64
 801408c:	4640      	mov	r0, r8
 801408e:	f7ff fb9f 	bl	80137d0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8014092:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014094:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014096:	4640      	mov	r0, r8
 8014098:	1c59      	adds	r1, r3, #1
 801409a:	86e1      	strh	r1, [r4, #54]	; 0x36
 801409c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80140a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80140a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140a4:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
 80140a8:	f7ff fb92 	bl	80137d0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 80140ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80140ae:	2800      	cmp	r0, #0
 80140b0:	d1b9      	bne.n	8014026 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xca>
 80140b2:	e794      	b.n	8013fde <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>

080140b4 <_ZN8touchgfx8Keyboard17setBufferPositionEt>:
 80140b4:	86c1      	strh	r1, [r0, #54]	; 0x36
 80140b6:	3064      	adds	r0, #100	; 0x64
 80140b8:	f002 bc24 	b.w	8016904 <_ZNK8touchgfx8Drawable10invalidateEv>

080140bc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>:
 80140bc:	6803      	ldr	r3, [r0, #0]
 80140be:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
 80140c2:	695b      	ldr	r3, [r3, #20]
 80140c4:	4718      	bx	r3

080140c6 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80140c6:	b510      	push	{r4, lr}
 80140c8:	6803      	ldr	r3, [r0, #0]
 80140ca:	460c      	mov	r4, r1
 80140cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ce:	4798      	blx	r3
 80140d0:	1b03      	subs	r3, r0, r4
 80140d2:	4258      	negs	r0, r3
 80140d4:	4158      	adcs	r0, r3
 80140d6:	bd10      	pop	{r4, pc}

080140d8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80140d8:	4b01      	ldr	r3, [pc, #4]	; (80140e0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80140da:	6019      	str	r1, [r3, #0]
 80140dc:	4770      	bx	lr
 80140de:	bf00      	nop
 80140e0:	2400c85c 	.word	0x2400c85c

080140e4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80140e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e8:	4696      	mov	lr, r2
 80140ea:	b097      	sub	sp, #92	; 0x5c
 80140ec:	4605      	mov	r5, r0
 80140ee:	4614      	mov	r4, r2
 80140f0:	460e      	mov	r6, r1
 80140f2:	461f      	mov	r7, r3
 80140f4:	f10d 0c1c 	add.w	ip, sp, #28
 80140f8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80140fc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8014100:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8014104:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014108:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801410c:	f8de 3000 	ldr.w	r3, [lr]
 8014110:	f104 0e14 	add.w	lr, r4, #20
 8014114:	f8cc 3000 	str.w	r3, [ip]
 8014118:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801411c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014120:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014124:	f8de 3000 	ldr.w	r3, [lr]
 8014128:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801412c:	f8cc 3000 	str.w	r3, [ip]
 8014130:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014134:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014138:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801413c:	f8de 3000 	ldr.w	r3, [lr]
 8014140:	4631      	mov	r1, r6
 8014142:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014144:	4628      	mov	r0, r5
 8014146:	f8cc 3000 	str.w	r3, [ip]
 801414a:	682b      	ldr	r3, [r5, #0]
 801414c:	9201      	str	r2, [sp, #4]
 801414e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014150:	f8cd 8008 	str.w	r8, [sp, #8]
 8014154:	9200      	str	r2, [sp, #0]
 8014156:	aa07      	add	r2, sp, #28
 8014158:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801415c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8014160:	463b      	mov	r3, r7
 8014162:	47d8      	blx	fp
 8014164:	46a6      	mov	lr, r4
 8014166:	f10d 0c1c 	add.w	ip, sp, #28
 801416a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801416e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014172:	f8de 3000 	ldr.w	r3, [lr]
 8014176:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801417a:	343c      	adds	r4, #60	; 0x3c
 801417c:	f8cc 3000 	str.w	r3, [ip]
 8014180:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014184:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014188:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801418c:	f8de 3000 	ldr.w	r3, [lr]
 8014190:	f8cc 3000 	str.w	r3, [ip]
 8014194:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801419a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801419e:	6823      	ldr	r3, [r4, #0]
 80141a0:	4631      	mov	r1, r6
 80141a2:	4628      	mov	r0, r5
 80141a4:	f8cc 3000 	str.w	r3, [ip]
 80141a8:	682b      	ldr	r3, [r5, #0]
 80141aa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80141ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80141b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80141b4:	9201      	str	r2, [sp, #4]
 80141b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141b8:	9200      	str	r2, [sp, #0]
 80141ba:	aa07      	add	r2, sp, #28
 80141bc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80141be:	463b      	mov	r3, r7
 80141c0:	47a0      	blx	r4
 80141c2:	b017      	add	sp, #92	; 0x5c
 80141c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141c8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80141c8:	2000      	movs	r0, #0
 80141ca:	4770      	bx	lr

080141cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80141cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d0:	b08d      	sub	sp, #52	; 0x34
 80141d2:	4688      	mov	r8, r1
 80141d4:	f8d3 c000 	ldr.w	ip, [r3]
 80141d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80141da:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80141de:	680f      	ldr	r7, [r1, #0]
 80141e0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80141e4:	eba7 070c 	sub.w	r7, r7, ip
 80141e8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80141ec:	edd3 6a07 	vldr	s13, [r3, #28]
 80141f0:	42bc      	cmp	r4, r7
 80141f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80141f4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80141f8:	bfa8      	it	ge
 80141fa:	463c      	movge	r4, r7
 80141fc:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014200:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014204:	ee07 4a90 	vmov	s15, r4
 8014208:	eb09 0e0c 	add.w	lr, r9, ip
 801420c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8014210:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014214:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014218:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801421c:	4571      	cmp	r1, lr
 801421e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014222:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014226:	ee25 5a27 	vmul.f32	s10, s10, s15
 801422a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801422e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014232:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014236:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801423a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801423e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014242:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014246:	f340 808c 	ble.w	8014362 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801424a:	eba1 060e 	sub.w	r6, r1, lr
 801424e:	fb96 f5f4 	sdiv	r5, r6, r4
 8014252:	ee07 5a10 	vmov	s14, r5
 8014256:	2d00      	cmp	r5, #0
 8014258:	fb04 6615 	mls	r6, r4, r5, r6
 801425c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014260:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014264:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014268:	eea7 1a05 	vfma.f32	s2, s14, s10
 801426c:	dd12      	ble.n	8014294 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801426e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014272:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014276:	ee31 2a45 	vsub.f32	s4, s2, s10
 801427a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014282:	bf14      	ite	ne
 8014284:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014288:	eeb0 7a67 	vmoveq.f32	s14, s15
 801428c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014290:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014294:	fb05 f204 	mul.w	r2, r5, r4
 8014298:	1abf      	subs	r7, r7, r2
 801429a:	4494      	add	ip, r2
 801429c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80142a0:	4411      	add	r1, r2
 80142a2:	eb09 020c 	add.w	r2, r9, ip
 80142a6:	b209      	sxth	r1, r1
 80142a8:	443a      	add	r2, r7
 80142aa:	428a      	cmp	r2, r1
 80142ac:	bfc4      	itt	gt
 80142ae:	eba1 0209 	subgt.w	r2, r1, r9
 80142b2:	eba2 070c 	subgt.w	r7, r2, ip
 80142b6:	2f00      	cmp	r7, #0
 80142b8:	dd50      	ble.n	801435c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80142ba:	fb97 f1f4 	sdiv	r1, r7, r4
 80142be:	fb04 7211 	mls	r2, r4, r1, r7
 80142c2:	b90a      	cbnz	r2, 80142c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80142c4:	3901      	subs	r1, #1
 80142c6:	4622      	mov	r2, r4
 80142c8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80142cc:	6840      	ldr	r0, [r0, #4]
 80142ce:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80142d2:	44b6      	add	lr, r6
 80142d4:	f8d0 a000 	ldr.w	sl, [r0]
 80142d8:	2900      	cmp	r1, #0
 80142da:	bfcc      	ite	gt
 80142dc:	46a1      	movgt	r9, r4
 80142de:	4691      	movle	r9, r2
 80142e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80142e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80142e4:	fb04 e505 	mla	r5, r4, r5, lr
 80142e8:	eef0 6a42 	vmov.f32	s13, s4
 80142ec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80142f0:	9008      	str	r0, [sp, #32]
 80142f2:	eeb0 7a61 	vmov.f32	s14, s3
 80142f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80142f8:	695b      	ldr	r3, [r3, #20]
 80142fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80142fe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014302:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014306:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014308:	445b      	add	r3, fp
 801430a:	9307      	str	r3, [sp, #28]
 801430c:	ee16 3a90 	vmov	r3, s13
 8014310:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014314:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014318:	ee21 3a23 	vmul.f32	s6, s2, s7
 801431c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014320:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014324:	ee17 7a90 	vmov	r7, s15
 8014328:	ee73 7a42 	vsub.f32	s15, s6, s4
 801432c:	fb97 f7f4 	sdiv	r7, r7, r4
 8014330:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014334:	ee17 ca90 	vmov	ip, s15
 8014338:	fb9c fcf4 	sdiv	ip, ip, r4
 801433c:	fb0c 3306 	mla	r3, ip, r6, r3
 8014340:	9302      	str	r3, [sp, #8]
 8014342:	ee17 3a10 	vmov	r3, s14
 8014346:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801434a:	fb07 3706 	mla	r7, r7, r6, r3
 801434e:	eba9 0306 	sub.w	r3, r9, r6
 8014352:	e9cd 4700 	strd	r4, r7, [sp]
 8014356:	f8da 4008 	ldr.w	r4, [sl, #8]
 801435a:	47a0      	blx	r4
 801435c:	b00d      	add	sp, #52	; 0x34
 801435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014362:	2500      	movs	r5, #0
 8014364:	462e      	mov	r6, r5
 8014366:	e799      	b.n	801429c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801436c:	b0db      	sub	sp, #364	; 0x16c
 801436e:	461d      	mov	r5, r3
 8014370:	4614      	mov	r4, r2
 8014372:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014376:	910f      	str	r1, [sp, #60]	; 0x3c
 8014378:	4629      	mov	r1, r5
 801437a:	930a      	str	r3, [sp, #40]	; 0x28
 801437c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014380:	9009      	str	r0, [sp, #36]	; 0x24
 8014382:	930b      	str	r3, [sp, #44]	; 0x2c
 8014384:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014388:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801438c:	9310      	str	r3, [sp, #64]	; 0x40
 801438e:	6803      	ldr	r3, [r0, #0]
 8014390:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8014392:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014396:	47b8      	blx	r7
 8014398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801439a:	6058      	str	r0, [r3, #4]
 801439c:	2800      	cmp	r0, #0
 801439e:	f000 83a1 	beq.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143a2:	682b      	ldr	r3, [r5, #0]
 80143a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80143a8:	ed94 7a02 	vldr	s14, [r4, #8]
 80143ac:	9314      	str	r3, [sp, #80]	; 0x50
 80143ae:	686b      	ldr	r3, [r5, #4]
 80143b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143b4:	9315      	str	r3, [sp, #84]	; 0x54
 80143b6:	4bc1      	ldr	r3, [pc, #772]	; (80146bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80143b8:	7819      	ldrb	r1, [r3, #0]
 80143ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80143be:	2900      	cmp	r1, #0
 80143c0:	bf16      	itet	ne
 80143c2:	4619      	movne	r1, r3
 80143c4:	4611      	moveq	r1, r2
 80143c6:	4613      	movne	r3, r2
 80143c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143cc:	9116      	str	r1, [sp, #88]	; 0x58
 80143ce:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80143d2:	f240 8387 	bls.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143d6:	ed94 7a07 	vldr	s14, [r4, #28]
 80143da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e2:	f240 837f 	bls.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143e6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80143ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f2:	f240 8377 	bls.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143f6:	6822      	ldr	r2, [r4, #0]
 80143f8:	4bb1      	ldr	r3, [pc, #708]	; (80146c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80143fa:	429a      	cmp	r2, r3
 80143fc:	f2c0 8372 	blt.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014400:	49b0      	ldr	r1, [pc, #704]	; (80146c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014402:	6963      	ldr	r3, [r4, #20]
 8014404:	428a      	cmp	r2, r1
 8014406:	f300 836d 	bgt.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801440a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801440e:	48ae      	ldr	r0, [pc, #696]	; (80146c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014410:	33ff      	adds	r3, #255	; 0xff
 8014412:	4283      	cmp	r3, r0
 8014414:	f200 8366 	bhi.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801441a:	4dac      	ldr	r5, [pc, #688]	; (80146cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801441c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014420:	33ff      	adds	r3, #255	; 0xff
 8014422:	42ab      	cmp	r3, r5
 8014424:	f200 835e 	bhi.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014428:	6862      	ldr	r2, [r4, #4]
 801442a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801442e:	33ff      	adds	r3, #255	; 0xff
 8014430:	4283      	cmp	r3, r0
 8014432:	f200 8357 	bhi.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014436:	69a1      	ldr	r1, [r4, #24]
 8014438:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801443c:	33ff      	adds	r3, #255	; 0xff
 801443e:	4283      	cmp	r3, r0
 8014440:	f200 8350 	bhi.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014446:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801444a:	30ff      	adds	r0, #255	; 0xff
 801444c:	42a8      	cmp	r0, r5
 801444e:	f200 8349 	bhi.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014452:	428a      	cmp	r2, r1
 8014454:	f280 8110 	bge.w	8014678 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014458:	429a      	cmp	r2, r3
 801445a:	f300 8119 	bgt.w	8014690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801445e:	4299      	cmp	r1, r3
 8014460:	f280 811d 	bge.w	801469e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014464:	2502      	movs	r5, #2
 8014466:	2701      	movs	r7, #1
 8014468:	46a9      	mov	r9, r5
 801446a:	46b8      	mov	r8, r7
 801446c:	f04f 0a00 	mov.w	sl, #0
 8014470:	4621      	mov	r1, r4
 8014472:	a849      	add	r0, sp, #292	; 0x124
 8014474:	f003 fbd0 	bl	8017c18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014478:	4622      	mov	r2, r4
 801447a:	4653      	mov	r3, sl
 801447c:	a949      	add	r1, sp, #292	; 0x124
 801447e:	f8cd 9000 	str.w	r9, [sp]
 8014482:	a819      	add	r0, sp, #100	; 0x64
 8014484:	f003 fcf8 	bl	8017e78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014488:	4622      	mov	r2, r4
 801448a:	4653      	mov	r3, sl
 801448c:	a949      	add	r1, sp, #292	; 0x124
 801448e:	f8cd 8000 	str.w	r8, [sp]
 8014492:	a829      	add	r0, sp, #164	; 0xa4
 8014494:	f003 fcf0 	bl	8017e78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014498:	4643      	mov	r3, r8
 801449a:	4622      	mov	r2, r4
 801449c:	a949      	add	r1, sp, #292	; 0x124
 801449e:	f8cd 9000 	str.w	r9, [sp]
 80144a2:	a839      	add	r0, sp, #228	; 0xe4
 80144a4:	f003 fce8 	bl	8017e78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80144a8:	42af      	cmp	r7, r5
 80144aa:	af12      	add	r7, sp, #72	; 0x48
 80144ac:	bfb7      	itett	lt
 80144ae:	2300      	movlt	r3, #0
 80144b0:	2301      	movge	r3, #1
 80144b2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80144b4:	ac19      	addlt	r4, sp, #100	; 0x64
 80144b6:	bfb1      	iteee	lt
 80144b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80144ba:	ad19      	addge	r5, sp, #100	; 0x64
 80144bc:	930e      	strge	r3, [sp, #56]	; 0x38
 80144be:	ac29      	addge	r4, sp, #164	; 0xa4
 80144c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80144c6:	e887 0003 	stmia.w	r7, {r0, r1}
 80144ca:	b928      	cbnz	r0, 80144d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80144cc:	4b80      	ldr	r3, [pc, #512]	; (80146d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80144ce:	6818      	ldr	r0, [r3, #0]
 80144d0:	6803      	ldr	r3, [r0, #0]
 80144d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144d4:	4798      	blx	r3
 80144d6:	6038      	str	r0, [r7, #0]
 80144d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80144da:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80144de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80144e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80144e4:	930c      	str	r3, [sp, #48]	; 0x30
 80144e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80144e8:	6963      	ldr	r3, [r4, #20]
 80144ea:	440b      	add	r3, r1
 80144ec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80144f0:	4408      	add	r0, r1
 80144f2:	b200      	sxth	r0, r0
 80144f4:	4283      	cmp	r3, r0
 80144f6:	900d      	str	r0, [sp, #52]	; 0x34
 80144f8:	f280 80dd 	bge.w	80146b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80144fc:	428b      	cmp	r3, r1
 80144fe:	da08      	bge.n	8014512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014500:	2a00      	cmp	r2, #0
 8014502:	dd06      	ble.n	8014512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014504:	1acb      	subs	r3, r1, r3
 8014506:	429a      	cmp	r2, r3
 8014508:	f2c0 80e4 	blt.w	80146d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801450c:	2b00      	cmp	r3, #0
 801450e:	f300 80e2 	bgt.w	80146d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014512:	6967      	ldr	r7, [r4, #20]
 8014514:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801451a:	443b      	add	r3, r7
 801451c:	461f      	mov	r7, r3
 801451e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014520:	1bdf      	subs	r7, r3, r7
 8014522:	4297      	cmp	r7, r2
 8014524:	bfa8      	it	ge
 8014526:	4617      	movge	r7, r2
 8014528:	2f00      	cmp	r7, #0
 801452a:	f340 8166 	ble.w	80147fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801452e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014530:	6829      	ldr	r1, [r5, #0]
 8014532:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014536:	f9bb 3000 	ldrsh.w	r3, [fp]
 801453a:	4411      	add	r1, r2
 801453c:	6820      	ldr	r0, [r4, #0]
 801453e:	4299      	cmp	r1, r3
 8014540:	dd1a      	ble.n	8014578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014542:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014546:	4402      	add	r2, r0
 8014548:	440b      	add	r3, r1
 801454a:	b21b      	sxth	r3, r3
 801454c:	429a      	cmp	r2, r3
 801454e:	dc13      	bgt.n	8014578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014550:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014552:	a912      	add	r1, sp, #72	; 0x48
 8014554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	9206      	str	r2, [sp, #24]
 801455c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801455e:	9500      	str	r5, [sp, #0]
 8014560:	9205      	str	r2, [sp, #20]
 8014562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014564:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014568:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801456a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801456e:	aa49      	add	r2, sp, #292	; 0x124
 8014570:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014574:	4623      	mov	r3, r4
 8014576:	47c8      	blx	r9
 8014578:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801457c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014580:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014588:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801458c:	68a1      	ldr	r1, [r4, #8]
 801458e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014592:	ed94 6a08 	vldr	s12, [r4, #32]
 8014596:	edd4 6a07 	vldr	s13, [r4, #28]
 801459a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801459e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80145a2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80145a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80145aa:	edc4 6a07 	vstr	s13, [r4, #28]
 80145ae:	441a      	add	r2, r3
 80145b0:	6963      	ldr	r3, [r4, #20]
 80145b2:	3301      	adds	r3, #1
 80145b4:	6022      	str	r2, [r4, #0]
 80145b6:	6163      	str	r3, [r4, #20]
 80145b8:	69a3      	ldr	r3, [r4, #24]
 80145ba:	3b01      	subs	r3, #1
 80145bc:	61a3      	str	r3, [r4, #24]
 80145be:	6923      	ldr	r3, [r4, #16]
 80145c0:	440b      	add	r3, r1
 80145c2:	68e1      	ldr	r1, [r4, #12]
 80145c4:	428b      	cmp	r3, r1
 80145c6:	6123      	str	r3, [r4, #16]
 80145c8:	db15      	blt.n	80145f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80145ca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80145ce:	3201      	adds	r2, #1
 80145d0:	1a5b      	subs	r3, r3, r1
 80145d2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80145d6:	6022      	str	r2, [r4, #0]
 80145d8:	6123      	str	r3, [r4, #16]
 80145da:	edc4 6a07 	vstr	s13, [r4, #28]
 80145de:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80145e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80145e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80145ea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80145ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145f2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80145f6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80145fa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80145fe:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014602:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014606:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801460a:	68a9      	ldr	r1, [r5, #8]
 801460c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014610:	ed95 6a08 	vldr	s12, [r5, #32]
 8014614:	edd5 6a07 	vldr	s13, [r5, #28]
 8014618:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801461c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014620:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014624:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014628:	edc5 6a07 	vstr	s13, [r5, #28]
 801462c:	441a      	add	r2, r3
 801462e:	696b      	ldr	r3, [r5, #20]
 8014630:	3301      	adds	r3, #1
 8014632:	602a      	str	r2, [r5, #0]
 8014634:	616b      	str	r3, [r5, #20]
 8014636:	69ab      	ldr	r3, [r5, #24]
 8014638:	3b01      	subs	r3, #1
 801463a:	61ab      	str	r3, [r5, #24]
 801463c:	692b      	ldr	r3, [r5, #16]
 801463e:	440b      	add	r3, r1
 8014640:	68e9      	ldr	r1, [r5, #12]
 8014642:	428b      	cmp	r3, r1
 8014644:	612b      	str	r3, [r5, #16]
 8014646:	db15      	blt.n	8014674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014648:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801464c:	3201      	adds	r2, #1
 801464e:	1a5b      	subs	r3, r3, r1
 8014650:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014654:	602a      	str	r2, [r5, #0]
 8014656:	612b      	str	r3, [r5, #16]
 8014658:	edc5 6a07 	vstr	s13, [r5, #28]
 801465c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014660:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014664:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014668:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801466c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014670:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014674:	3f01      	subs	r7, #1
 8014676:	e757      	b.n	8014528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014678:	4299      	cmp	r1, r3
 801467a:	dc13      	bgt.n	80146a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801467c:	429a      	cmp	r2, r3
 801467e:	da14      	bge.n	80146aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014680:	2502      	movs	r5, #2
 8014682:	2703      	movs	r7, #3
 8014684:	f04f 0800 	mov.w	r8, #0
 8014688:	46a9      	mov	r9, r5
 801468a:	f04f 0a01 	mov.w	sl, #1
 801468e:	e6ef      	b.n	8014470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014690:	2501      	movs	r5, #1
 8014692:	2700      	movs	r7, #0
 8014694:	46a9      	mov	r9, r5
 8014696:	46b8      	mov	r8, r7
 8014698:	f04f 0a02 	mov.w	sl, #2
 801469c:	e6e8      	b.n	8014470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801469e:	2501      	movs	r5, #1
 80146a0:	2702      	movs	r7, #2
 80146a2:	e6e1      	b.n	8014468 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80146a4:	2500      	movs	r5, #0
 80146a6:	2701      	movs	r7, #1
 80146a8:	e7f4      	b.n	8014694 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80146aa:	2702      	movs	r7, #2
 80146ac:	2503      	movs	r5, #3
 80146ae:	f04f 0900 	mov.w	r9, #0
 80146b2:	46b8      	mov	r8, r7
 80146b4:	e7e9      	b.n	801468a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80146b6:	4613      	mov	r3, r2
 80146b8:	e728      	b.n	801450c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80146ba:	bf00      	nop
 80146bc:	2400c84c 	.word	0x2400c84c
 80146c0:	fffd8f01 	.word	0xfffd8f01
 80146c4:	00027100 	.word	0x00027100
 80146c8:	0004e1ff 	.word	0x0004e1ff
 80146cc:	0004e1fe 	.word	0x0004e1fe
 80146d0:	2400c854 	.word	0x2400c854
 80146d4:	4613      	mov	r3, r2
 80146d6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80146d8:	469e      	mov	lr, r3
 80146da:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80146dc:	469c      	mov	ip, r3
 80146de:	9111      	str	r1, [sp, #68]	; 0x44
 80146e0:	f04f 0900 	mov.w	r9, #0
 80146e4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80146e8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80146ec:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80146f0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80146f4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80146f8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80146fc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014700:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014704:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014708:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801470c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8014710:	f1bc 0f00 	cmp.w	ip, #0
 8014714:	d147      	bne.n	80147a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014716:	eb03 0c07 	add.w	ip, r3, r7
 801471a:	1ad7      	subs	r7, r2, r3
 801471c:	f1b9 0f00 	cmp.w	r9, #0
 8014720:	d009      	beq.n	8014736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8014722:	9029      	str	r0, [sp, #164]	; 0xa4
 8014724:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014728:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801472c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8014730:	912d      	str	r1, [sp, #180]	; 0xb4
 8014732:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8014736:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014738:	f04f 0800 	mov.w	r8, #0
 801473c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014740:	9111      	str	r1, [sp, #68]	; 0x44
 8014742:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014746:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801474a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801474e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014752:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014756:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801475a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801475e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014762:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014766:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801476a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801476e:	f1be 0f00 	cmp.w	lr, #0
 8014772:	d031      	beq.n	80147d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014774:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014776:	4450      	add	r0, sl
 8014778:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801477c:	4431      	add	r1, r6
 801477e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014782:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014786:	4549      	cmp	r1, r9
 8014788:	db08      	blt.n	801479c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801478a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801478e:	3001      	adds	r0, #1
 8014790:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014794:	eba1 0109 	sub.w	r1, r1, r9
 8014798:	ee37 7a06 	vadd.f32	s14, s14, s12
 801479c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80147a0:	f04f 0801 	mov.w	r8, #1
 80147a4:	e7e3      	b.n	801476e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80147a6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80147a8:	4450      	add	r0, sl
 80147aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80147ae:	4431      	add	r1, r6
 80147b0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80147b4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80147b8:	4541      	cmp	r1, r8
 80147ba:	db08      	blt.n	80147ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80147bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80147c0:	3001      	adds	r0, #1
 80147c2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80147c6:	eba1 0108 	sub.w	r1, r1, r8
 80147ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 80147ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80147d2:	f04f 0901 	mov.w	r9, #1
 80147d6:	e79b      	b.n	8014710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80147d8:	449c      	add	ip, r3
 80147da:	1aff      	subs	r7, r7, r3
 80147dc:	f1b8 0f00 	cmp.w	r8, #0
 80147e0:	d009      	beq.n	80147f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80147e2:	9019      	str	r0, [sp, #100]	; 0x64
 80147e4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80147e8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80147ec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80147f0:	911d      	str	r1, [sp, #116]	; 0x74
 80147f2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80147f6:	1ad2      	subs	r2, r2, r3
 80147f8:	e68b      	b.n	8014512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80147fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147fc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80147fe:	2b00      	cmp	r3, #0
 8014800:	f000 80d1 	beq.w	80149a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014804:	ad19      	add	r5, sp, #100	; 0x64
 8014806:	ac39      	add	r4, sp, #228	; 0xe4
 8014808:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801480a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801480e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014812:	930c      	str	r3, [sp, #48]	; 0x30
 8014814:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014816:	6963      	ldr	r3, [r4, #20]
 8014818:	440b      	add	r3, r1
 801481a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801481e:	4408      	add	r0, r1
 8014820:	b200      	sxth	r0, r0
 8014822:	4283      	cmp	r3, r0
 8014824:	900d      	str	r0, [sp, #52]	; 0x34
 8014826:	f280 80c1 	bge.w	80149ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801482a:	428b      	cmp	r3, r1
 801482c:	da08      	bge.n	8014840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801482e:	2a00      	cmp	r2, #0
 8014830:	dd06      	ble.n	8014840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014832:	1acb      	subs	r3, r1, r3
 8014834:	429a      	cmp	r2, r3
 8014836:	f2c0 80bb 	blt.w	80149b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801483a:	2b00      	cmp	r3, #0
 801483c:	f300 80b9 	bgt.w	80149b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8014840:	6967      	ldr	r7, [r4, #20]
 8014842:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014848:	443b      	add	r3, r7
 801484a:	461f      	mov	r7, r3
 801484c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801484e:	1bdf      	subs	r7, r3, r7
 8014850:	4297      	cmp	r7, r2
 8014852:	bfa8      	it	ge
 8014854:	4617      	movge	r7, r2
 8014856:	2f00      	cmp	r7, #0
 8014858:	f340 813c 	ble.w	8014ad4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801485c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801485e:	6829      	ldr	r1, [r5, #0]
 8014860:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014864:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014868:	4411      	add	r1, r2
 801486a:	6820      	ldr	r0, [r4, #0]
 801486c:	4299      	cmp	r1, r3
 801486e:	dd1a      	ble.n	80148a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014870:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014874:	4402      	add	r2, r0
 8014876:	440b      	add	r3, r1
 8014878:	b21b      	sxth	r3, r3
 801487a:	429a      	cmp	r2, r3
 801487c:	dc13      	bgt.n	80148a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801487e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014880:	a912      	add	r1, sp, #72	; 0x48
 8014882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	9206      	str	r2, [sp, #24]
 801488a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801488c:	9500      	str	r5, [sp, #0]
 801488e:	9205      	str	r2, [sp, #20]
 8014890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014892:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014896:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014898:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801489c:	aa49      	add	r2, sp, #292	; 0x124
 801489e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80148a2:	4623      	mov	r3, r4
 80148a4:	47c8      	blx	r9
 80148a6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80148aa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80148ae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80148b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80148b6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80148ba:	68a1      	ldr	r1, [r4, #8]
 80148bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80148c0:	ed94 6a08 	vldr	s12, [r4, #32]
 80148c4:	edd4 6a07 	vldr	s13, [r4, #28]
 80148c8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80148cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80148d0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80148d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80148d8:	edc4 6a07 	vstr	s13, [r4, #28]
 80148dc:	441a      	add	r2, r3
 80148de:	6963      	ldr	r3, [r4, #20]
 80148e0:	3301      	adds	r3, #1
 80148e2:	6022      	str	r2, [r4, #0]
 80148e4:	6163      	str	r3, [r4, #20]
 80148e6:	69a3      	ldr	r3, [r4, #24]
 80148e8:	3b01      	subs	r3, #1
 80148ea:	61a3      	str	r3, [r4, #24]
 80148ec:	6923      	ldr	r3, [r4, #16]
 80148ee:	440b      	add	r3, r1
 80148f0:	68e1      	ldr	r1, [r4, #12]
 80148f2:	428b      	cmp	r3, r1
 80148f4:	6123      	str	r3, [r4, #16]
 80148f6:	db15      	blt.n	8014924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80148f8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80148fc:	3201      	adds	r2, #1
 80148fe:	1a5b      	subs	r3, r3, r1
 8014900:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014904:	6022      	str	r2, [r4, #0]
 8014906:	6123      	str	r3, [r4, #16]
 8014908:	edc4 6a07 	vstr	s13, [r4, #28]
 801490c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014910:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014914:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014918:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801491c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014920:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014924:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014928:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801492c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014934:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014938:	68a9      	ldr	r1, [r5, #8]
 801493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801493e:	ed95 6a08 	vldr	s12, [r5, #32]
 8014942:	edd5 6a07 	vldr	s13, [r5, #28]
 8014946:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801494a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801494e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014952:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014956:	edc5 6a07 	vstr	s13, [r5, #28]
 801495a:	441a      	add	r2, r3
 801495c:	696b      	ldr	r3, [r5, #20]
 801495e:	3301      	adds	r3, #1
 8014960:	602a      	str	r2, [r5, #0]
 8014962:	616b      	str	r3, [r5, #20]
 8014964:	69ab      	ldr	r3, [r5, #24]
 8014966:	3b01      	subs	r3, #1
 8014968:	61ab      	str	r3, [r5, #24]
 801496a:	692b      	ldr	r3, [r5, #16]
 801496c:	440b      	add	r3, r1
 801496e:	68e9      	ldr	r1, [r5, #12]
 8014970:	428b      	cmp	r3, r1
 8014972:	612b      	str	r3, [r5, #16]
 8014974:	db15      	blt.n	80149a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014976:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801497a:	3201      	adds	r2, #1
 801497c:	1a5b      	subs	r3, r3, r1
 801497e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014982:	602a      	str	r2, [r5, #0]
 8014984:	612b      	str	r3, [r5, #16]
 8014986:	edc5 6a07 	vstr	s13, [r5, #28]
 801498a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801498e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014992:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014996:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801499a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801499e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80149a2:	3f01      	subs	r7, #1
 80149a4:	e757      	b.n	8014856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80149a6:	ad39      	add	r5, sp, #228	; 0xe4
 80149a8:	ac19      	add	r4, sp, #100	; 0x64
 80149aa:	e72d      	b.n	8014808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80149ac:	4613      	mov	r3, r2
 80149ae:	e744      	b.n	801483a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80149b0:	4613      	mov	r3, r2
 80149b2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80149b4:	469e      	mov	lr, r3
 80149b6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80149ba:	461f      	mov	r7, r3
 80149bc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80149c0:	f04f 0900 	mov.w	r9, #0
 80149c4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80149c8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80149cc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80149d0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80149d4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80149d8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80149da:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80149de:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80149e2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80149e6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80149ea:	960e      	str	r6, [sp, #56]	; 0x38
 80149ec:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80149f0:	2f00      	cmp	r7, #0
 80149f2:	d146      	bne.n	8014a82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80149f4:	449c      	add	ip, r3
 80149f6:	1ad7      	subs	r7, r2, r3
 80149f8:	f1b9 0f00 	cmp.w	r9, #0
 80149fc:	d009      	beq.n	8014a12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80149fe:	9039      	str	r0, [sp, #228]	; 0xe4
 8014a00:	913d      	str	r1, [sp, #244]	; 0xf4
 8014a02:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8014a06:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8014a0a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8014a0e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8014a12:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014a14:	f04f 0800 	mov.w	r8, #0
 8014a18:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014a1c:	910e      	str	r1, [sp, #56]	; 0x38
 8014a1e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014a22:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014a26:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014a2a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014a2e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014a32:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014a36:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014a3a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014a3e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014a42:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014a46:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014a4a:	f1be 0f00 	cmp.w	lr, #0
 8014a4e:	d030      	beq.n	8014ab2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8014a50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014a52:	4450      	add	r0, sl
 8014a54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014a58:	4431      	add	r1, r6
 8014a5a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014a5e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014a62:	4549      	cmp	r1, r9
 8014a64:	db08      	blt.n	8014a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014a66:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014a6a:	3001      	adds	r0, #1
 8014a6c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014a70:	eba1 0109 	sub.w	r1, r1, r9
 8014a74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014a78:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014a7c:	f04f 0801 	mov.w	r8, #1
 8014a80:	e7e3      	b.n	8014a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8014a82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014a84:	4450      	add	r0, sl
 8014a86:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014a8a:	4431      	add	r1, r6
 8014a8c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014a90:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014a94:	4541      	cmp	r1, r8
 8014a96:	db08      	blt.n	8014aaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014a98:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014a9c:	3001      	adds	r0, #1
 8014a9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014aa2:	eba1 0108 	sub.w	r1, r1, r8
 8014aa6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014aaa:	3f01      	subs	r7, #1
 8014aac:	f04f 0901 	mov.w	r9, #1
 8014ab0:	e79e      	b.n	80149f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8014ab2:	449c      	add	ip, r3
 8014ab4:	1aff      	subs	r7, r7, r3
 8014ab6:	f1b8 0f00 	cmp.w	r8, #0
 8014aba:	d009      	beq.n	8014ad0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8014abc:	9019      	str	r0, [sp, #100]	; 0x64
 8014abe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014ac2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014ac6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014aca:	911d      	str	r1, [sp, #116]	; 0x74
 8014acc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014ad0:	1ad2      	subs	r2, r2, r3
 8014ad2:	e6b5      	b.n	8014840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014ad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	b923      	cbnz	r3, 8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ada:	4b04      	ldr	r3, [pc, #16]	; (8014aec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8014adc:	6818      	ldr	r0, [r3, #0]
 8014ade:	6803      	ldr	r3, [r0, #0]
 8014ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ae2:	4798      	blx	r3
 8014ae4:	b05b      	add	sp, #364	; 0x16c
 8014ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aea:	bf00      	nop
 8014aec:	2400c854 	.word	0x2400c854

08014af0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8014af0:	b570      	push	{r4, r5, r6, lr}
 8014af2:	4604      	mov	r4, r0
 8014af4:	2500      	movs	r5, #0
 8014af6:	9804      	ldr	r0, [sp, #16]
 8014af8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8014afc:	8025      	strh	r5, [r4, #0]
 8014afe:	6061      	str	r1, [r4, #4]
 8014b00:	7223      	strb	r3, [r4, #8]
 8014b02:	7266      	strb	r6, [r4, #9]
 8014b04:	60e0      	str	r0, [r4, #12]
 8014b06:	8222      	strh	r2, [r4, #16]
 8014b08:	8265      	strh	r5, [r4, #18]
 8014b0a:	82a5      	strh	r5, [r4, #20]
 8014b0c:	82e5      	strh	r5, [r4, #22]
 8014b0e:	8325      	strh	r5, [r4, #24]
 8014b10:	8365      	strh	r5, [r4, #26]
 8014b12:	83a5      	strh	r5, [r4, #28]
 8014b14:	77a5      	strb	r5, [r4, #30]
 8014b16:	b32e      	cbz	r6, 8014b64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8014b18:	6803      	ldr	r3, [r0, #0]
 8014b1a:	695b      	ldr	r3, [r3, #20]
 8014b1c:	4798      	blx	r3
 8014b1e:	4606      	mov	r6, r0
 8014b20:	b300      	cbz	r0, 8014b64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8014b22:	68e0      	ldr	r0, [r4, #12]
 8014b24:	4631      	mov	r1, r6
 8014b26:	6803      	ldr	r3, [r0, #0]
 8014b28:	68db      	ldr	r3, [r3, #12]
 8014b2a:	4798      	blx	r3
 8014b2c:	4605      	mov	r5, r0
 8014b2e:	b1c8      	cbz	r0, 8014b64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8014b30:	7b43      	ldrb	r3, [r0, #13]
 8014b32:	7a82      	ldrb	r2, [r0, #10]
 8014b34:	005b      	lsls	r3, r3, #1
 8014b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b3a:	4313      	orrs	r3, r2
 8014b3c:	83a3      	strh	r3, [r4, #28]
 8014b3e:	7a63      	ldrb	r3, [r4, #9]
 8014b40:	2b04      	cmp	r3, #4
 8014b42:	d10f      	bne.n	8014b64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8014b44:	68e0      	ldr	r0, [r4, #12]
 8014b46:	462a      	mov	r2, r5
 8014b48:	4631      	mov	r1, r6
 8014b4a:	6803      	ldr	r3, [r0, #0]
 8014b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b4e:	4798      	blx	r3
 8014b50:	7b6b      	ldrb	r3, [r5, #13]
 8014b52:	005b      	lsls	r3, r3, #1
 8014b54:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014b58:	7aab      	ldrb	r3, [r5, #10]
 8014b5a:	4313      	orrs	r3, r2
 8014b5c:	4418      	add	r0, r3
 8014b5e:	8ba3      	ldrh	r3, [r4, #28]
 8014b60:	4418      	add	r0, r3
 8014b62:	83a0      	strh	r0, [r4, #28]
 8014b64:	4620      	mov	r0, r4
 8014b66:	bd70      	pop	{r4, r5, r6, pc}

08014b68 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6c:	2400      	movs	r4, #0
 8014b6e:	b085      	sub	sp, #20
 8014b70:	4681      	mov	r9, r0
 8014b72:	4688      	mov	r8, r1
 8014b74:	4692      	mov	sl, r2
 8014b76:	469b      	mov	fp, r3
 8014b78:	4627      	mov	r7, r4
 8014b7a:	4625      	mov	r5, r4
 8014b7c:	4626      	mov	r6, r4
 8014b7e:	4554      	cmp	r4, sl
 8014b80:	da2a      	bge.n	8014bd8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014b82:	2300      	movs	r3, #0
 8014b84:	9303      	str	r3, [sp, #12]
 8014b86:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014b8a:	429d      	cmp	r5, r3
 8014b8c:	d004      	beq.n	8014b98 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8014b8e:	f242 030b 	movw	r3, #8203	; 0x200b
 8014b92:	429d      	cmp	r5, r3
 8014b94:	bf18      	it	ne
 8014b96:	462f      	movne	r7, r5
 8014b98:	ab03      	add	r3, sp, #12
 8014b9a:	4642      	mov	r2, r8
 8014b9c:	4659      	mov	r1, fp
 8014b9e:	4648      	mov	r0, r9
 8014ba0:	f002 fe50 	bl	8017844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014ba4:	4605      	mov	r5, r0
 8014ba6:	b1b8      	cbz	r0, 8014bd8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014ba8:	280a      	cmp	r0, #10
 8014baa:	d015      	beq.n	8014bd8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014bac:	9a03      	ldr	r2, [sp, #12]
 8014bae:	b18a      	cbz	r2, 8014bd4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8014bb0:	7b50      	ldrb	r0, [r2, #13]
 8014bb2:	4639      	mov	r1, r7
 8014bb4:	7a93      	ldrb	r3, [r2, #10]
 8014bb6:	0040      	lsls	r0, r0, #1
 8014bb8:	8895      	ldrh	r5, [r2, #4]
 8014bba:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014bbe:	4303      	orrs	r3, r0
 8014bc0:	4640      	mov	r0, r8
 8014bc2:	9301      	str	r3, [sp, #4]
 8014bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8014bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bca:	4798      	blx	r3
 8014bcc:	9b01      	ldr	r3, [sp, #4]
 8014bce:	4418      	add	r0, r3
 8014bd0:	4406      	add	r6, r0
 8014bd2:	b2b6      	uxth	r6, r6
 8014bd4:	3401      	adds	r4, #1
 8014bd6:	e7d2      	b.n	8014b7e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8014bd8:	4630      	mov	r0, r6
 8014bda:	b005      	add	sp, #20
 8014bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014be0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8014be0:	2a02      	cmp	r2, #2
 8014be2:	b530      	push	{r4, r5, lr}
 8014be4:	d011      	beq.n	8014c0a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8014be6:	2a03      	cmp	r2, #3
 8014be8:	d01c      	beq.n	8014c24 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8014bea:	2a01      	cmp	r2, #1
 8014bec:	d10c      	bne.n	8014c08 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014bee:	888b      	ldrh	r3, [r1, #4]
 8014bf0:	8801      	ldrh	r1, [r0, #0]
 8014bf2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014bf6:	1a5b      	subs	r3, r3, r1
 8014bf8:	8844      	ldrh	r4, [r0, #2]
 8014bfa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014bfe:	1a9b      	subs	r3, r3, r2
 8014c00:	8004      	strh	r4, [r0, #0]
 8014c02:	8081      	strh	r1, [r0, #4]
 8014c04:	8043      	strh	r3, [r0, #2]
 8014c06:	80c2      	strh	r2, [r0, #6]
 8014c08:	bd30      	pop	{r4, r5, pc}
 8014c0a:	88cb      	ldrh	r3, [r1, #6]
 8014c0c:	8842      	ldrh	r2, [r0, #2]
 8014c0e:	1a9b      	subs	r3, r3, r2
 8014c10:	88c2      	ldrh	r2, [r0, #6]
 8014c12:	1a9b      	subs	r3, r3, r2
 8014c14:	888a      	ldrh	r2, [r1, #4]
 8014c16:	8801      	ldrh	r1, [r0, #0]
 8014c18:	8043      	strh	r3, [r0, #2]
 8014c1a:	1a52      	subs	r2, r2, r1
 8014c1c:	8881      	ldrh	r1, [r0, #4]
 8014c1e:	1a52      	subs	r2, r2, r1
 8014c20:	8002      	strh	r2, [r0, #0]
 8014c22:	e7f1      	b.n	8014c08 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014c24:	88cb      	ldrh	r3, [r1, #6]
 8014c26:	8841      	ldrh	r1, [r0, #2]
 8014c28:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014c2c:	1a5b      	subs	r3, r3, r1
 8014c2e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014c32:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014c36:	1a9b      	subs	r3, r3, r2
 8014c38:	8045      	strh	r5, [r0, #2]
 8014c3a:	8082      	strh	r2, [r0, #4]
 8014c3c:	8003      	strh	r3, [r0, #0]
 8014c3e:	80c4      	strh	r4, [r0, #6]
 8014c40:	e7e2      	b.n	8014c08 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08014c42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014c42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c46:	b09f      	sub	sp, #124	; 0x7c
 8014c48:	9116      	str	r1, [sp, #88]	; 0x58
 8014c4a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c4c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014c4e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014c50:	8809      	ldrh	r1, [r1, #0]
 8014c52:	889b      	ldrh	r3, [r3, #4]
 8014c54:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8014c58:	440b      	add	r3, r1
 8014c5a:	9212      	str	r2, [sp, #72]	; 0x48
 8014c5c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8014c60:	b21b      	sxth	r3, r3
 8014c62:	9011      	str	r0, [sp, #68]	; 0x44
 8014c64:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8014c68:	9310      	str	r3, [sp, #64]	; 0x40
 8014c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8014c6e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8014c72:	7a59      	ldrb	r1, [r3, #9]
 8014c74:	7a1b      	ldrb	r3, [r3, #8]
 8014c76:	9114      	str	r1, [sp, #80]	; 0x50
 8014c78:	9315      	str	r3, [sp, #84]	; 0x54
 8014c7a:	2a00      	cmp	r2, #0
 8014c7c:	d06a      	beq.n	8014d54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8014c7e:	f898 3010 	ldrb.w	r3, [r8, #16]
 8014c82:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014c84:	2b04      	cmp	r3, #4
 8014c86:	bf14      	ite	ne
 8014c88:	2301      	movne	r3, #1
 8014c8a:	2302      	moveq	r3, #2
 8014c8c:	4413      	add	r3, r2
 8014c8e:	f04f 0900 	mov.w	r9, #0
 8014c92:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c94:	464c      	mov	r4, r9
 8014c96:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014c9a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8014c9e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	f280 808f 	bge.w	8014dc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014ca8:	2300      	movs	r3, #0
 8014caa:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8014cae:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8014cb2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014cb6:	429c      	cmp	r4, r3
 8014cb8:	d006      	beq.n	8014cc8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8014cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cbc:	f242 020b 	movw	r2, #8203	; 0x200b
 8014cc0:	4294      	cmp	r4, r2
 8014cc2:	bf18      	it	ne
 8014cc4:	4623      	movne	r3, r4
 8014cc6:	930d      	str	r3, [sp, #52]	; 0x34
 8014cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cca:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8014ccc:	f8d8 2000 	ldr.w	r2, [r8]
 8014cd0:	428b      	cmp	r3, r1
 8014cd2:	db41      	blt.n	8014d58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8014cd4:	6813      	ldr	r3, [r2, #0]
 8014cd6:	4610      	mov	r0, r2
 8014cd8:	695b      	ldr	r3, [r3, #20]
 8014cda:	4798      	blx	r3
 8014cdc:	4604      	mov	r4, r0
 8014cde:	f8d8 0000 	ldr.w	r0, [r8]
 8014ce2:	aa1d      	add	r2, sp, #116	; 0x74
 8014ce4:	4621      	mov	r1, r4
 8014ce6:	6803      	ldr	r3, [r0, #0]
 8014ce8:	689e      	ldr	r6, [r3, #8]
 8014cea:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014cee:	47b0      	blx	r6
 8014cf0:	901c      	str	r0, [sp, #112]	; 0x70
 8014cf2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014cf6:	429c      	cmp	r4, r3
 8014cf8:	f000 80ea 	beq.w	8014ed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014cfc:	f242 030b 	movw	r3, #8203	; 0x200b
 8014d00:	429c      	cmp	r4, r3
 8014d02:	f000 80e5 	beq.w	8014ed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014d06:	2c00      	cmp	r4, #0
 8014d08:	f000 80f7 	beq.w	8014efa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8014d0c:	2c0a      	cmp	r4, #10
 8014d0e:	d060      	beq.n	8014dd2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014d10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014d12:	b36a      	cbz	r2, 8014d70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8014d14:	8894      	ldrh	r4, [r2, #4]
 8014d16:	f1bb 0f00 	cmp.w	fp, #0
 8014d1a:	d03b      	beq.n	8014d94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8014d1c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8014d20:	f1bb 0f01 	cmp.w	fp, #1
 8014d24:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8014d28:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8014d2c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8014d30:	ea49 0903 	orr.w	r9, r9, r3
 8014d34:	d134      	bne.n	8014da0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8014d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d38:	eba5 0509 	sub.w	r5, r5, r9
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d14f      	bne.n	8014de0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014d40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014d42:	eb09 0305 	add.w	r3, r9, r5
 8014d46:	4413      	add	r3, r2
 8014d48:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014d4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014d4e:	4293      	cmp	r3, r2
 8014d50:	da51      	bge.n	8014df6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014d52:	e038      	b.n	8014dc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014d54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014d56:	e79a      	b.n	8014c8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8014d58:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014d5c:	4659      	mov	r1, fp
 8014d5e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014d60:	9301      	str	r3, [sp, #4]
 8014d62:	ab1d      	add	r3, sp, #116	; 0x74
 8014d64:	9300      	str	r3, [sp, #0]
 8014d66:	ab1c      	add	r3, sp, #112	; 0x70
 8014d68:	f002 fdb5 	bl	80178d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014d6c:	4604      	mov	r4, r0
 8014d6e:	e7c0      	b.n	8014cf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8014d70:	f8d8 0000 	ldr.w	r0, [r8]
 8014d74:	6803      	ldr	r3, [r0, #0]
 8014d76:	691b      	ldr	r3, [r3, #16]
 8014d78:	4798      	blx	r3
 8014d7a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014d7e:	4298      	cmp	r0, r3
 8014d80:	f000 80a6 	beq.w	8014ed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014d84:	f242 030b 	movw	r3, #8203	; 0x200b
 8014d88:	4298      	cmp	r0, r3
 8014d8a:	f000 80a1 	beq.w	8014ed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014d8e:	f1bb 0f00 	cmp.w	fp, #0
 8014d92:	d100      	bne.n	8014d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014d94:	444d      	add	r5, r9
 8014d96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014d98:	2a00      	cmp	r2, #0
 8014d9a:	d1bf      	bne.n	8014d1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014d9c:	4691      	mov	r9, r2
 8014d9e:	e097      	b.n	8014ed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	f000 80ab 	beq.w	8014efe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8014da8:	f1bb 0f00 	cmp.w	fp, #0
 8014dac:	d118      	bne.n	8014de0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014dae:	f8d8 0000 	ldr.w	r0, [r8]
 8014db2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014db4:	6803      	ldr	r3, [r0, #0]
 8014db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014db8:	4798      	blx	r3
 8014dba:	4405      	add	r5, r0
 8014dbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014dc0:	1aeb      	subs	r3, r5, r3
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	dd17      	ble.n	8014df6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014dc6:	2c00      	cmp	r4, #0
 8014dc8:	f000 8097 	beq.w	8014efa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8014dcc:	2c0a      	cmp	r4, #10
 8014dce:	f040 8085 	bne.w	8014edc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8014dd2:	240a      	movs	r4, #10
 8014dd4:	fab4 f084 	clz	r0, r4
 8014dd8:	0940      	lsrs	r0, r0, #5
 8014dda:	b01f      	add	sp, #124	; 0x7c
 8014ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014de0:	f8d8 0000 	ldr.w	r0, [r8]
 8014de4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014de6:	6803      	ldr	r3, [r0, #0]
 8014de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014dea:	4798      	blx	r3
 8014dec:	f1bb 0f01 	cmp.w	fp, #1
 8014df0:	eba5 0500 	sub.w	r5, r5, r0
 8014df4:	d0a4      	beq.n	8014d40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8014df6:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014df8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014dfa:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014dfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014e02:	7b43      	ldrb	r3, [r0, #13]
 8014e04:	4429      	add	r1, r5
 8014e06:	015b      	lsls	r3, r3, #5
 8014e08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014e0c:	7983      	ldrb	r3, [r0, #6]
 8014e0e:	4313      	orrs	r3, r2
 8014e10:	440b      	add	r3, r1
 8014e12:	42b3      	cmp	r3, r6
 8014e14:	db5c      	blt.n	8014ed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e18:	4299      	cmp	r1, r3
 8014e1a:	da59      	bge.n	8014ed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014e1c:	f8d8 0000 	ldr.w	r0, [r8]
 8014e20:	42ae      	cmp	r6, r5
 8014e22:	6803      	ldr	r3, [r0, #0]
 8014e24:	bfcc      	ite	gt
 8014e26:	1b76      	subgt	r6, r6, r5
 8014e28:	2600      	movle	r6, #0
 8014e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e2c:	bfc8      	it	gt
 8014e2e:	b2b6      	uxthgt	r6, r6
 8014e30:	4798      	blx	r3
 8014e32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014e34:	7b5a      	ldrb	r2, [r3, #13]
 8014e36:	00d1      	lsls	r1, r2, #3
 8014e38:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8014e3c:	7a19      	ldrb	r1, [r3, #8]
 8014e3e:	4339      	orrs	r1, r7
 8014e40:	0657      	lsls	r7, r2, #25
 8014e42:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8014e44:	bf48      	it	mi
 8014e46:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8014e4a:	4407      	add	r7, r0
 8014e4c:	bf48      	it	mi
 8014e4e:	b209      	sxthmi	r1, r1
 8014e50:	1a7f      	subs	r7, r7, r1
 8014e52:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014e54:	b2bf      	uxth	r7, r7
 8014e56:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014e5a:	fa0f fa87 	sxth.w	sl, r7
 8014e5e:	4551      	cmp	r1, sl
 8014e60:	dd3a      	ble.n	8014ed8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8014e62:	0112      	lsls	r2, r2, #4
 8014e64:	79d8      	ldrb	r0, [r3, #7]
 8014e66:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014e6a:	4302      	orrs	r2, r0
 8014e6c:	4492      	add	sl, r2
 8014e6e:	4551      	cmp	r1, sl
 8014e70:	dc2e      	bgt.n	8014ed0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8014e72:	1bcf      	subs	r7, r1, r7
 8014e74:	468a      	mov	sl, r1
 8014e76:	b2bf      	uxth	r7, r7
 8014e78:	9319      	str	r3, [sp, #100]	; 0x64
 8014e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e7c:	f8d8 0000 	ldr.w	r0, [r8]
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	6801      	ldr	r1, [r0, #0]
 8014e84:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014e86:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014e88:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e8a:	9218      	str	r2, [sp, #96]	; 0x60
 8014e8c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014e8e:	4788      	blx	r1
 8014e90:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e96:	910b      	str	r1, [sp, #44]	; 0x2c
 8014e98:	f898 100e 	ldrb.w	r1, [r8, #14]
 8014e9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014e9e:	910a      	str	r1, [sp, #40]	; 0x28
 8014ea0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8014ea4:	9109      	str	r1, [sp, #36]	; 0x24
 8014ea6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014eaa:	9305      	str	r3, [sp, #20]
 8014eac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014eae:	9206      	str	r2, [sp, #24]
 8014eb0:	e9cd a601 	strd	sl, r6, [sp, #4]
 8014eb4:	442e      	add	r6, r5
 8014eb6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8014eba:	b236      	sxth	r6, r6
 8014ebc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ebe:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014ec2:	9600      	str	r6, [sp, #0]
 8014ec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014ece:	47b0      	blx	r6
 8014ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	930e      	str	r3, [sp, #56]	; 0x38
 8014ed6:	e6e2      	b.n	8014c9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8014ed8:	2700      	movs	r7, #0
 8014eda:	e7cd      	b.n	8014e78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8014edc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014ede:	3501      	adds	r5, #1
 8014ee0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014ee2:	429d      	cmp	r5, r3
 8014ee4:	f6bf af76 	bge.w	8014dd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014ee8:	4659      	mov	r1, fp
 8014eea:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014eec:	f7ef fa1c 	bl	8004328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014ef0:	4604      	mov	r4, r0
 8014ef2:	b110      	cbz	r0, 8014efa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8014ef4:	280a      	cmp	r0, #10
 8014ef6:	d1f2      	bne.n	8014ede <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8014ef8:	e76b      	b.n	8014dd2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014efa:	2400      	movs	r4, #0
 8014efc:	e76a      	b.n	8014dd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014efe:	f1bb 0f00 	cmp.w	fp, #0
 8014f02:	f43f af5b 	beq.w	8014dbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8014f06:	e776      	b.n	8014df6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08014f08 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8014f08:	b530      	push	{r4, r5, lr}
 8014f0a:	8a44      	ldrh	r4, [r0, #18]
 8014f0c:	8ac5      	ldrh	r5, [r0, #22]
 8014f0e:	82c3      	strh	r3, [r0, #22]
 8014f10:	442c      	add	r4, r5
 8014f12:	1ae4      	subs	r4, r4, r3
 8014f14:	8b03      	ldrh	r3, [r0, #24]
 8014f16:	8244      	strh	r4, [r0, #18]
 8014f18:	8a84      	ldrh	r4, [r0, #20]
 8014f1a:	4422      	add	r2, r4
 8014f1c:	440c      	add	r4, r1
 8014f1e:	1a59      	subs	r1, r3, r1
 8014f20:	8342      	strh	r2, [r0, #26]
 8014f22:	8284      	strh	r4, [r0, #20]
 8014f24:	8301      	strh	r1, [r0, #24]
 8014f26:	bd30      	pop	{r4, r5, pc}

08014f28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8014f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f2c:	7a43      	ldrb	r3, [r0, #9]
 8014f2e:	b087      	sub	sp, #28
 8014f30:	4604      	mov	r4, r0
 8014f32:	460f      	mov	r7, r1
 8014f34:	1eda      	subs	r2, r3, #3
 8014f36:	b2d2      	uxtb	r2, r2
 8014f38:	2900      	cmp	r1, #0
 8014f3a:	d036      	beq.n	8014faa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8014f3c:	2a01      	cmp	r2, #1
 8014f3e:	d932      	bls.n	8014fa6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8014f40:	1e58      	subs	r0, r3, #1
 8014f42:	f1d0 0b00 	rsbs	fp, r0, #0
 8014f46:	eb4b 0b00 	adc.w	fp, fp, r0
 8014f4a:	1e99      	subs	r1, r3, #2
 8014f4c:	424b      	negs	r3, r1
 8014f4e:	414b      	adcs	r3, r1
 8014f50:	9303      	str	r3, [sp, #12]
 8014f52:	2300      	movs	r3, #0
 8014f54:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8014f58:	2500      	movs	r5, #0
 8014f5a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8014f5e:	46a9      	mov	r9, r5
 8014f60:	8265      	strh	r5, [r4, #18]
 8014f62:	82a5      	strh	r5, [r4, #20]
 8014f64:	2300      	movs	r3, #0
 8014f66:	9305      	str	r3, [sp, #20]
 8014f68:	8823      	ldrh	r3, [r4, #0]
 8014f6a:	2b20      	cmp	r3, #32
 8014f6c:	d02b      	beq.n	8014fc6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8014f6e:	eba3 020a 	sub.w	r2, r3, sl
 8014f72:	4256      	negs	r6, r2
 8014f74:	4156      	adcs	r6, r2
 8014f76:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d004      	beq.n	8014f88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8014f7e:	4553      	cmp	r3, sl
 8014f80:	bf16      	itet	ne
 8014f82:	4699      	movne	r9, r3
 8014f84:	2601      	moveq	r6, #1
 8014f86:	2600      	movne	r6, #0
 8014f88:	ab05      	add	r3, sp, #20
 8014f8a:	68e2      	ldr	r2, [r4, #12]
 8014f8c:	7a21      	ldrb	r1, [r4, #8]
 8014f8e:	6860      	ldr	r0, [r4, #4]
 8014f90:	f002 fc58 	bl	8017844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014f94:	8020      	strh	r0, [r4, #0]
 8014f96:	b9c8      	cbnz	r0, 8014fcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8014f98:	8b22      	ldrh	r2, [r4, #24]
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	4611      	mov	r1, r2
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	f7ff ffb2 	bl	8014f08 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8014fa4:	e066      	b.n	8015074 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8014fa6:	468b      	mov	fp, r1
 8014fa8:	e7cf      	b.n	8014f4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8014faa:	3b01      	subs	r3, #1
 8014fac:	2a01      	cmp	r2, #1
 8014fae:	9103      	str	r1, [sp, #12]
 8014fb0:	468b      	mov	fp, r1
 8014fb2:	bf8c      	ite	hi
 8014fb4:	2200      	movhi	r2, #0
 8014fb6:	2201      	movls	r2, #1
 8014fb8:	2b01      	cmp	r3, #1
 8014fba:	9202      	str	r2, [sp, #8]
 8014fbc:	bf8c      	ite	hi
 8014fbe:	2300      	movhi	r3, #0
 8014fc0:	2301      	movls	r3, #1
 8014fc2:	9301      	str	r3, [sp, #4]
 8014fc4:	e7c8      	b.n	8014f58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8014fc6:	4699      	mov	r9, r3
 8014fc8:	2601      	movs	r6, #1
 8014fca:	e7dd      	b.n	8014f88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8014fcc:	8ae3      	ldrh	r3, [r4, #22]
 8014fce:	280a      	cmp	r0, #10
 8014fd0:	f103 0301 	add.w	r3, r3, #1
 8014fd4:	82e3      	strh	r3, [r4, #22]
 8014fd6:	d0df      	beq.n	8014f98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8014fd8:	9a05      	ldr	r2, [sp, #20]
 8014fda:	bb42      	cbnz	r2, 801502e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8014fdc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014fe0:	4298      	cmp	r0, r3
 8014fe2:	d001      	beq.n	8014fe8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8014fe4:	4550      	cmp	r0, sl
 8014fe6:	d1bd      	bne.n	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014fe8:	8823      	ldrh	r3, [r4, #0]
 8014fea:	8b21      	ldrh	r1, [r4, #24]
 8014fec:	2b20      	cmp	r3, #32
 8014fee:	d001      	beq.n	8014ff4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8014ff0:	4553      	cmp	r3, sl
 8014ff2:	d131      	bne.n	8015058 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8014ff4:	2e00      	cmp	r6, #0
 8014ff6:	bf0a      	itet	eq
 8014ff8:	460d      	moveq	r5, r1
 8014ffa:	4630      	movne	r0, r6
 8014ffc:	2001      	moveq	r0, #1
 8014ffe:	440a      	add	r2, r1
 8015000:	8aa3      	ldrh	r3, [r4, #20]
 8015002:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015006:	b292      	uxth	r2, r2
 8015008:	8322      	strh	r2, [r4, #24]
 801500a:	4413      	add	r3, r2
 801500c:	2f00      	cmp	r7, #0
 801500e:	d03a      	beq.n	8015086 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8015010:	f1bb 0f00 	cmp.w	fp, #0
 8015014:	d102      	bne.n	801501c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8015016:	9903      	ldr	r1, [sp, #12]
 8015018:	b301      	cbz	r1, 801505c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801501a:	b1f8      	cbz	r0, 801505c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801501c:	8ba1      	ldrh	r1, [r4, #28]
 801501e:	4419      	add	r1, r3
 8015020:	458c      	cmp	ip, r1
 8015022:	da2a      	bge.n	801507a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8015024:	8a61      	ldrh	r1, [r4, #18]
 8015026:	b341      	cbz	r1, 801507a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8015028:	4563      	cmp	r3, ip
 801502a:	dd9b      	ble.n	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801502c:	e01c      	b.n	8015068 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801502e:	8893      	ldrh	r3, [r2, #4]
 8015030:	4649      	mov	r1, r9
 8015032:	8023      	strh	r3, [r4, #0]
 8015034:	f892 800d 	ldrb.w	r8, [r2, #13]
 8015038:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801503c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8015040:	f892 800a 	ldrb.w	r8, [r2, #10]
 8015044:	ea48 0800 	orr.w	r8, r8, r0
 8015048:	68e0      	ldr	r0, [r4, #12]
 801504a:	6803      	ldr	r3, [r0, #0]
 801504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801504e:	4798      	blx	r3
 8015050:	eb08 0200 	add.w	r2, r8, r0
 8015054:	b292      	uxth	r2, r2
 8015056:	e7c7      	b.n	8014fe8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8015058:	2000      	movs	r0, #0
 801505a:	e7d0      	b.n	8014ffe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801505c:	4563      	cmp	r3, ip
 801505e:	dd81      	ble.n	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015060:	8a63      	ldrh	r3, [r4, #18]
 8015062:	2b00      	cmp	r3, #0
 8015064:	f43f af7e 	beq.w	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015068:	2301      	movs	r3, #1
 801506a:	8ba2      	ldrh	r2, [r4, #28]
 801506c:	77a3      	strb	r3, [r4, #30]
 801506e:	8b63      	ldrh	r3, [r4, #26]
 8015070:	4413      	add	r3, r2
 8015072:	8363      	strh	r3, [r4, #26]
 8015074:	b007      	add	sp, #28
 8015076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801507a:	2300      	movs	r3, #0
 801507c:	4611      	mov	r1, r2
 801507e:	4620      	mov	r0, r4
 8015080:	f7ff ff42 	bl	8014f08 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015084:	e76e      	b.n	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015086:	4563      	cmp	r3, ip
 8015088:	dd14      	ble.n	80150b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801508a:	9b02      	ldr	r3, [sp, #8]
 801508c:	b113      	cbz	r3, 8015094 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801508e:	2301      	movs	r3, #1
 8015090:	460a      	mov	r2, r1
 8015092:	e783      	b.n	8014f9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8015094:	9b01      	ldr	r3, [sp, #4]
 8015096:	2b00      	cmp	r3, #0
 8015098:	f43f af64 	beq.w	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801509c:	2800      	cmp	r0, #0
 801509e:	f47f af61 	bne.w	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80150a2:	b116      	cbz	r6, 80150aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80150a4:	2301      	movs	r3, #1
 80150a6:	462a      	mov	r2, r5
 80150a8:	e779      	b.n	8014f9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80150aa:	8a63      	ldrh	r3, [r4, #18]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	f43f af59 	beq.w	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80150b2:	e7df      	b.n	8015074 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80150b4:	2800      	cmp	r0, #0
 80150b6:	f47f af55 	bne.w	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80150ba:	2e00      	cmp	r6, #0
 80150bc:	f43f af52 	beq.w	8014f64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80150c0:	2301      	movs	r3, #1
 80150c2:	462a      	mov	r2, r5
 80150c4:	e7db      	b.n	801507e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080150c6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80150c6:	b530      	push	{r4, r5, lr}
 80150c8:	4605      	mov	r5, r0
 80150ca:	b08b      	sub	sp, #44	; 0x2c
 80150cc:	b191      	cbz	r1, 80150f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80150ce:	2401      	movs	r4, #1
 80150d0:	e9cd 3100 	strd	r3, r1, [sp]
 80150d4:	4613      	mov	r3, r2
 80150d6:	4601      	mov	r1, r0
 80150d8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80150dc:	a802      	add	r0, sp, #8
 80150de:	f7ff fd07 	bl	8014af0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80150e2:	2100      	movs	r1, #0
 80150e4:	a802      	add	r0, sp, #8
 80150e6:	f7ff ff1f 	bl	8014f28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80150ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80150ee:	b163      	cbz	r3, 801510a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80150f0:	3401      	adds	r4, #1
 80150f2:	e7f6      	b.n	80150e2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80150f4:	2401      	movs	r4, #1
 80150f6:	f002 fc71 	bl	80179dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80150fa:	280a      	cmp	r0, #10
 80150fc:	4628      	mov	r0, r5
 80150fe:	bf08      	it	eq
 8015100:	3401      	addeq	r4, #1
 8015102:	f002 fc6b 	bl	80179dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015106:	2800      	cmp	r0, #0
 8015108:	d1f7      	bne.n	80150fa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801510a:	b2a0      	uxth	r0, r4
 801510c:	b00b      	add	sp, #44	; 0x2c
 801510e:	bd30      	pop	{r4, r5, pc}

08015110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015114:	b0e5      	sub	sp, #404	; 0x194
 8015116:	4689      	mov	r9, r1
 8015118:	461c      	mov	r4, r3
 801511a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801511e:	900a      	str	r0, [sp, #40]	; 0x28
 8015120:	f1ba 0f00 	cmp.w	sl, #0
 8015124:	f000 80b4 	beq.w	8015290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	f000 80b0 	beq.w	8015290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015130:	7ba3      	ldrb	r3, [r4, #14]
 8015132:	2b00      	cmp	r3, #0
 8015134:	f000 80ac 	beq.w	8015290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015138:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801513c:	6810      	ldr	r0, [r2, #0]
 801513e:	6851      	ldr	r1, [r2, #4]
 8015140:	2500      	movs	r5, #0
 8015142:	4643      	mov	r3, r8
 8015144:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8015148:	950f      	str	r5, [sp, #60]	; 0x3c
 801514a:	af19      	add	r7, sp, #100	; 0x64
 801514c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8015150:	79a2      	ldrb	r2, [r4, #6]
 8015152:	c303      	stmia	r3!, {r0, r1}
 8015154:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8015158:	a90f      	add	r1, sp, #60	; 0x3c
 801515a:	4640      	mov	r0, r8
 801515c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015160:	f7ff fd3e 	bl	8014be0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015164:	a90f      	add	r1, sp, #60	; 0x3c
 8015166:	79a2      	ldrb	r2, [r4, #6]
 8015168:	4608      	mov	r0, r1
 801516a:	f7ff fd39 	bl	8014be0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801516e:	4638      	mov	r0, r7
 8015170:	f002 f808 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 8015174:	6820      	ldr	r0, [r4, #0]
 8015176:	6803      	ldr	r3, [r0, #0]
 8015178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801517a:	4798      	blx	r3
 801517c:	4606      	mov	r6, r0
 801517e:	6820      	ldr	r0, [r4, #0]
 8015180:	6803      	ldr	r3, [r0, #0]
 8015182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015184:	4798      	blx	r3
 8015186:	4633      	mov	r3, r6
 8015188:	9000      	str	r0, [sp, #0]
 801518a:	4651      	mov	r1, sl
 801518c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801518e:	4638      	mov	r0, r7
 8015190:	f002 f853 	bl	801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015194:	7923      	ldrb	r3, [r4, #4]
 8015196:	6820      	ldr	r0, [r4, #0]
 8015198:	9308      	str	r3, [sp, #32]
 801519a:	6803      	ldr	r3, [r0, #0]
 801519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801519e:	4798      	blx	r3
 80151a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151a4:	181e      	adds	r6, r3, r0
 80151a6:	42ae      	cmp	r6, r5
 80151a8:	dd06      	ble.n	80151b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80151aa:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80151ae:	4282      	cmp	r2, r0
 80151b0:	bfa4      	itt	ge
 80151b2:	189d      	addge	r5, r3, r2
 80151b4:	fb95 f5f6 	sdivge	r5, r5, r6
 80151b8:	a832      	add	r0, sp, #200	; 0xc8
 80151ba:	f001 ffe3 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 80151be:	7c23      	ldrb	r3, [r4, #16]
 80151c0:	b17b      	cbz	r3, 80151e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80151c2:	6820      	ldr	r0, [r4, #0]
 80151c4:	6803      	ldr	r3, [r0, #0]
 80151c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151c8:	4798      	blx	r3
 80151ca:	4683      	mov	fp, r0
 80151cc:	6820      	ldr	r0, [r4, #0]
 80151ce:	6803      	ldr	r3, [r0, #0]
 80151d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80151d2:	4798      	blx	r3
 80151d4:	465b      	mov	r3, fp
 80151d6:	9000      	str	r0, [sp, #0]
 80151d8:	4651      	mov	r1, sl
 80151da:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80151dc:	a832      	add	r0, sp, #200	; 0xc8
 80151de:	f002 f82c 	bl	801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80151e2:	7be1      	ldrb	r1, [r4, #15]
 80151e4:	a811      	add	r0, sp, #68	; 0x44
 80151e6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80151ea:	7963      	ldrb	r3, [r4, #5]
 80151ec:	1a52      	subs	r2, r2, r1
 80151ee:	7c21      	ldrb	r1, [r4, #16]
 80151f0:	9101      	str	r1, [sp, #4]
 80151f2:	b292      	uxth	r2, r2
 80151f4:	6821      	ldr	r1, [r4, #0]
 80151f6:	9100      	str	r1, [sp, #0]
 80151f8:	a932      	add	r1, sp, #200	; 0xc8
 80151fa:	f7ff fc79 	bl	8014af0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80151fe:	7c23      	ldrb	r3, [r4, #16]
 8015200:	b9bb      	cbnz	r3, 8015232 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8015202:	fa1f fa86 	uxth.w	sl, r6
 8015206:	2d00      	cmp	r5, #0
 8015208:	dd45      	ble.n	8015296 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801520a:	4638      	mov	r0, r7
 801520c:	f002 fbe6 	bl	80179dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015210:	2800      	cmp	r0, #0
 8015212:	d03d      	beq.n	8015290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015214:	280a      	cmp	r0, #10
 8015216:	d1f6      	bne.n	8015206 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8015218:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801521c:	3d01      	subs	r5, #1
 801521e:	4453      	add	r3, sl
 8015220:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015224:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8015228:	eba3 030a 	sub.w	r3, r3, sl
 801522c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015230:	e7e9      	b.n	8015206 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8015232:	0073      	lsls	r3, r6, #1
 8015234:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8015238:	fa1f fa86 	uxth.w	sl, r6
 801523c:	9309      	str	r3, [sp, #36]	; 0x24
 801523e:	2d00      	cmp	r5, #0
 8015240:	dd29      	ble.n	8015296 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8015242:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015246:	a811      	add	r0, sp, #68	; 0x44
 8015248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801524a:	428b      	cmp	r3, r1
 801524c:	bfd4      	ite	le
 801524e:	2100      	movle	r1, #0
 8015250:	2101      	movgt	r1, #1
 8015252:	f7ff fe69 	bl	8014f28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015256:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801525a:	3b01      	subs	r3, #1
 801525c:	b29b      	uxth	r3, r3
 801525e:	455b      	cmp	r3, fp
 8015260:	930b      	str	r3, [sp, #44]	; 0x2c
 8015262:	d005      	beq.n	8015270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8015264:	7961      	ldrb	r1, [r4, #5]
 8015266:	4638      	mov	r0, r7
 8015268:	f7ef f85e 	bl	8004328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801526c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801526e:	e7f4      	b.n	801525a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8015270:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015274:	3d01      	subs	r5, #1
 8015276:	4453      	add	r3, sl
 8015278:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801527c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8015280:	eba3 030a 	sub.w	r3, r3, sl
 8015284:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015288:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801528c:	2b00      	cmp	r3, #0
 801528e:	d1d6      	bne.n	801523e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8015290:	b065      	add	sp, #404	; 0x194
 8015292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015296:	0075      	lsls	r5, r6, #1
 8015298:	f04f 0a00 	mov.w	sl, #0
 801529c:	7c23      	ldrb	r3, [r4, #16]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d066      	beq.n	8015370 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80152a2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80152a6:	a811      	add	r0, sp, #68	; 0x44
 80152a8:	428d      	cmp	r5, r1
 80152aa:	bfd4      	ite	le
 80152ac:	2100      	movle	r1, #0
 80152ae:	2101      	movgt	r1, #1
 80152b0:	f7ff fe3a 	bl	8014f28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80152b4:	9b08      	ldr	r3, [sp, #32]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d055      	beq.n	8015366 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80152ba:	f894 b010 	ldrb.w	fp, [r4, #16]
 80152be:	2264      	movs	r2, #100	; 0x64
 80152c0:	4639      	mov	r1, r7
 80152c2:	a84b      	add	r0, sp, #300	; 0x12c
 80152c4:	f00b faca 	bl	802085c <memcpy>
 80152c8:	f1bb 0f00 	cmp.w	fp, #0
 80152cc:	d058      	beq.n	8015380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80152ce:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80152d2:	7922      	ldrb	r2, [r4, #4]
 80152d4:	2a01      	cmp	r2, #1
 80152d6:	d13c      	bne.n	8015352 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80152d8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80152dc:	1ac0      	subs	r0, r0, r3
 80152de:	2302      	movs	r3, #2
 80152e0:	fb90 f0f3 	sdiv	r0, r0, r3
 80152e4:	b200      	sxth	r0, r0
 80152e6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80152ea:	4418      	add	r0, r3
 80152ec:	7c23      	ldrb	r3, [r4, #16]
 80152ee:	b200      	sxth	r0, r0
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d03a      	beq.n	801536a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 80152f4:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 80152f8:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 80152fc:	9000      	str	r0, [sp, #0]
 80152fe:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8015302:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015304:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015308:	e9cd a703 	strd	sl, r7, [sp, #12]
 801530c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8015310:	464a      	mov	r2, r9
 8015312:	2100      	movs	r1, #0
 8015314:	f7ff fc95 	bl	8014c42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015318:	2800      	cmp	r0, #0
 801531a:	d1b9      	bne.n	8015290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801531c:	b2b2      	uxth	r2, r6
 801531e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015322:	4611      	mov	r1, r2
 8015324:	4413      	add	r3, r2
 8015326:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801532a:	b21b      	sxth	r3, r3
 801532c:	1a52      	subs	r2, r2, r1
 801532e:	7c21      	ldrb	r1, [r4, #16]
 8015330:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015334:	b212      	sxth	r2, r2
 8015336:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801533a:	b109      	cbz	r1, 8015340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801533c:	42b2      	cmp	r2, r6
 801533e:	dba7      	blt.n	8015290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015340:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8015344:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8015348:	440a      	add	r2, r1
 801534a:	b212      	sxth	r2, r2
 801534c:	4293      	cmp	r3, r2
 801534e:	dda5      	ble.n	801529c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8015350:	e79e      	b.n	8015290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015352:	2a02      	cmp	r2, #2
 8015354:	d105      	bne.n	8015362 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015356:	7be2      	ldrb	r2, [r4, #15]
 8015358:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801535c:	1a80      	subs	r0, r0, r2
 801535e:	1ac0      	subs	r0, r0, r3
 8015360:	e7c0      	b.n	80152e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8015362:	2000      	movs	r0, #0
 8015364:	e7bf      	b.n	80152e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8015366:	7be0      	ldrb	r0, [r4, #15]
 8015368:	e7bd      	b.n	80152e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801536a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801536e:	e7c3      	b.n	80152f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8015370:	9b08      	ldr	r3, [sp, #32]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d0f7      	beq.n	8015366 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015376:	2264      	movs	r2, #100	; 0x64
 8015378:	4639      	mov	r1, r7
 801537a:	a84b      	add	r0, sp, #300	; 0x12c
 801537c:	f00b fa6e 	bl	802085c <memcpy>
 8015380:	2300      	movs	r3, #0
 8015382:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015386:	6821      	ldr	r1, [r4, #0]
 8015388:	a84b      	add	r0, sp, #300	; 0x12c
 801538a:	f7ff fbed 	bl	8014b68 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801538e:	b203      	sxth	r3, r0
 8015390:	e79f      	b.n	80152d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

08015392 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015392:	2b03      	cmp	r3, #3
 8015394:	d818      	bhi.n	80153c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015396:	e8df f003 	tbb	[pc, r3]
 801539a:	0602      	.short	0x0602
 801539c:	130d      	.short	0x130d
 801539e:	f9b0 2000 	ldrsh.w	r2, [r0]
 80153a2:	1850      	adds	r0, r2, r1
 80153a4:	4770      	bx	lr
 80153a6:	8803      	ldrh	r3, [r0, #0]
 80153a8:	8880      	ldrh	r0, [r0, #4]
 80153aa:	4418      	add	r0, r3
 80153ac:	b200      	sxth	r0, r0
 80153ae:	1a80      	subs	r0, r0, r2
 80153b0:	3801      	subs	r0, #1
 80153b2:	4770      	bx	lr
 80153b4:	8803      	ldrh	r3, [r0, #0]
 80153b6:	8880      	ldrh	r0, [r0, #4]
 80153b8:	4418      	add	r0, r3
 80153ba:	b200      	sxth	r0, r0
 80153bc:	1a40      	subs	r0, r0, r1
 80153be:	e7f7      	b.n	80153b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80153c0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80153c4:	4410      	add	r0, r2
 80153c6:	4770      	bx	lr
 80153c8:	2000      	movs	r0, #0
 80153ca:	4770      	bx	lr

080153cc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80153cc:	2b03      	cmp	r3, #3
 80153ce:	d817      	bhi.n	8015400 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80153d0:	e8df f003 	tbb	[pc, r3]
 80153d4:	10090602 	.word	0x10090602
 80153d8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80153dc:	1850      	adds	r0, r2, r1
 80153de:	4770      	bx	lr
 80153e0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80153e4:	e7fa      	b.n	80153dc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80153e6:	8843      	ldrh	r3, [r0, #2]
 80153e8:	88c0      	ldrh	r0, [r0, #6]
 80153ea:	4418      	add	r0, r3
 80153ec:	b200      	sxth	r0, r0
 80153ee:	1a80      	subs	r0, r0, r2
 80153f0:	3801      	subs	r0, #1
 80153f2:	4770      	bx	lr
 80153f4:	8843      	ldrh	r3, [r0, #2]
 80153f6:	88c0      	ldrh	r0, [r0, #6]
 80153f8:	4418      	add	r0, r3
 80153fa:	b200      	sxth	r0, r0
 80153fc:	1a40      	subs	r0, r0, r1
 80153fe:	e7f7      	b.n	80153f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015400:	2000      	movs	r0, #0
 8015402:	4770      	bx	lr

08015404 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015404:	4b01      	ldr	r3, [pc, #4]	; (801540c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015406:	2200      	movs	r2, #0
 8015408:	601a      	str	r2, [r3, #0]
 801540a:	4770      	bx	lr
 801540c:	2400c85c 	.word	0x2400c85c

08015410 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015410:	4603      	mov	r3, r0
 8015412:	b1c8      	cbz	r0, 8015448 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015414:	0c02      	lsrs	r2, r0, #16
 8015416:	0412      	lsls	r2, r2, #16
 8015418:	b9a2      	cbnz	r2, 8015444 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801541a:	0403      	lsls	r3, r0, #16
 801541c:	2010      	movs	r0, #16
 801541e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015422:	bf04      	itt	eq
 8015424:	021b      	lsleq	r3, r3, #8
 8015426:	3008      	addeq	r0, #8
 8015428:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801542c:	bf04      	itt	eq
 801542e:	011b      	lsleq	r3, r3, #4
 8015430:	3004      	addeq	r0, #4
 8015432:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015436:	bf04      	itt	eq
 8015438:	009b      	lsleq	r3, r3, #2
 801543a:	3002      	addeq	r0, #2
 801543c:	2b00      	cmp	r3, #0
 801543e:	db04      	blt.n	801544a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015440:	3001      	adds	r0, #1
 8015442:	4770      	bx	lr
 8015444:	2000      	movs	r0, #0
 8015446:	e7ea      	b.n	801541e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015448:	2020      	movs	r0, #32
 801544a:	4770      	bx	lr

0801544c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015450:	b087      	sub	sp, #28
 8015452:	4681      	mov	r9, r0
 8015454:	4698      	mov	r8, r3
 8015456:	4610      	mov	r0, r2
 8015458:	460d      	mov	r5, r1
 801545a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801545e:	b981      	cbnz	r1, 8015482 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015460:	b14b      	cbz	r3, 8015476 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015462:	460b      	mov	r3, r1
 8015464:	464a      	mov	r2, r9
 8015466:	4641      	mov	r1, r8
 8015468:	e9cd 4700 	strd	r4, r7, [sp]
 801546c:	f7ff ffee 	bl	801544c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015470:	b007      	add	sp, #28
 8015472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015476:	f04f 33ff 	mov.w	r3, #4294967295
 801547a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801547e:	603b      	str	r3, [r7, #0]
 8015480:	e7f6      	b.n	8015470 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015482:	fa32 fa01 	lsrs.w	sl, r2, r1
 8015486:	d107      	bne.n	8015498 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8015488:	fb09 f602 	mul.w	r6, r9, r2
 801548c:	fbb6 f0f4 	udiv	r0, r6, r4
 8015490:	fb04 6610 	mls	r6, r4, r0, r6
 8015494:	603e      	str	r6, [r7, #0]
 8015496:	e7eb      	b.n	8015470 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015498:	2601      	movs	r6, #1
 801549a:	fa09 fb01 	lsl.w	fp, r9, r1
 801549e:	408e      	lsls	r6, r1
 80154a0:	fbbb f3f4 	udiv	r3, fp, r4
 80154a4:	3e01      	subs	r6, #1
 80154a6:	9302      	str	r3, [sp, #8]
 80154a8:	fb0a f303 	mul.w	r3, sl, r3
 80154ac:	4016      	ands	r6, r2
 80154ae:	9303      	str	r3, [sp, #12]
 80154b0:	4630      	mov	r0, r6
 80154b2:	f7ff ffad 	bl	8015410 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80154b6:	464a      	mov	r2, r9
 80154b8:	460b      	mov	r3, r1
 80154ba:	4601      	mov	r1, r0
 80154bc:	4630      	mov	r0, r6
 80154be:	e9cd 4700 	strd	r4, r7, [sp]
 80154c2:	f7ff ffc3 	bl	801544c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80154c6:	9b02      	ldr	r3, [sp, #8]
 80154c8:	4606      	mov	r6, r0
 80154ca:	eb05 0108 	add.w	r1, r5, r8
 80154ce:	fb04 bb13 	mls	fp, r4, r3, fp
 80154d2:	4658      	mov	r0, fp
 80154d4:	f7ff ff9c 	bl	8015410 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80154d8:	ab05      	add	r3, sp, #20
 80154da:	465a      	mov	r2, fp
 80154dc:	e9cd 4300 	strd	r4, r3, [sp]
 80154e0:	4603      	mov	r3, r0
 80154e2:	4650      	mov	r0, sl
 80154e4:	f7ff ffb2 	bl	801544c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80154e8:	6839      	ldr	r1, [r7, #0]
 80154ea:	9a05      	ldr	r2, [sp, #20]
 80154ec:	9b03      	ldr	r3, [sp, #12]
 80154ee:	4411      	add	r1, r2
 80154f0:	fbb1 f2f4 	udiv	r2, r1, r4
 80154f4:	18d3      	adds	r3, r2, r3
 80154f6:	fb04 1412 	mls	r4, r4, r2, r1
 80154fa:	441e      	add	r6, r3
 80154fc:	603c      	str	r4, [r7, #0]
 80154fe:	4430      	add	r0, r6
 8015500:	e7b6      	b.n	8015470 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015502 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015502:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015506:	b085      	sub	sp, #20
 8015508:	f1b0 0900 	subs.w	r9, r0, #0
 801550c:	461d      	mov	r5, r3
 801550e:	4617      	mov	r7, r2
 8015510:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015512:	bfbb      	ittet	lt
 8015514:	f1c9 0900 	rsblt	r9, r9, #0
 8015518:	f04f 36ff 	movlt.w	r6, #4294967295
 801551c:	2601      	movge	r6, #1
 801551e:	6823      	ldrlt	r3, [r4, #0]
 8015520:	bfbc      	itt	lt
 8015522:	425b      	neglt	r3, r3
 8015524:	6023      	strlt	r3, [r4, #0]
 8015526:	2a00      	cmp	r2, #0
 8015528:	da04      	bge.n	8015534 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801552a:	6823      	ldr	r3, [r4, #0]
 801552c:	4257      	negs	r7, r2
 801552e:	4276      	negs	r6, r6
 8015530:	425b      	negs	r3, r3
 8015532:	6023      	str	r3, [r4, #0]
 8015534:	2d00      	cmp	r5, #0
 8015536:	4638      	mov	r0, r7
 8015538:	bfba      	itte	lt
 801553a:	426d      	neglt	r5, r5
 801553c:	f04f 38ff 	movlt.w	r8, #4294967295
 8015540:	f04f 0801 	movge.w	r8, #1
 8015544:	f7ff ff64 	bl	8015410 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015548:	ab03      	add	r3, sp, #12
 801554a:	463a      	mov	r2, r7
 801554c:	e9cd 5300 	strd	r5, r3, [sp]
 8015550:	4603      	mov	r3, r0
 8015552:	4648      	mov	r0, r9
 8015554:	f7ff ff7a 	bl	801544c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015558:	6823      	ldr	r3, [r4, #0]
 801555a:	9a03      	ldr	r2, [sp, #12]
 801555c:	4546      	cmp	r6, r8
 801555e:	441a      	add	r2, r3
 8015560:	fb92 f3f5 	sdiv	r3, r2, r5
 8015564:	4418      	add	r0, r3
 8015566:	fb05 2313 	mls	r3, r5, r3, r2
 801556a:	bf18      	it	ne
 801556c:	4240      	negne	r0, r0
 801556e:	1c72      	adds	r2, r6, #1
 8015570:	6023      	str	r3, [r4, #0]
 8015572:	d105      	bne.n	8015580 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015574:	2b00      	cmp	r3, #0
 8015576:	f1c3 0200 	rsb	r2, r3, #0
 801557a:	db0b      	blt.n	8015594 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801557c:	6022      	str	r2, [r4, #0]
 801557e:	e006      	b.n	801558e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015580:	2e01      	cmp	r6, #1
 8015582:	d104      	bne.n	801558e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015584:	2b00      	cmp	r3, #0
 8015586:	da02      	bge.n	801558e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015588:	442b      	add	r3, r5
 801558a:	3801      	subs	r0, #1
 801558c:	6023      	str	r3, [r4, #0]
 801558e:	b005      	add	sp, #20
 8015590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015594:	3801      	subs	r0, #1
 8015596:	1b52      	subs	r2, r2, r5
 8015598:	e7f0      	b.n	801557c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801559c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801559c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80155a0:	4c1c      	ldr	r4, [pc, #112]	; (8015614 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80155a2:	4605      	mov	r5, r0
 80155a4:	6807      	ldr	r7, [r0, #0]
 80155a6:	69a3      	ldr	r3, [r4, #24]
 80155a8:	b92b      	cbnz	r3, 80155b6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80155aa:	6840      	ldr	r0, [r0, #4]
 80155ac:	e9c5 7000 	strd	r7, r0, [r5]
 80155b0:	b004      	add	sp, #16
 80155b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155b6:	f04f 0802 	mov.w	r8, #2
 80155ba:	68a2      	ldr	r2, [r4, #8]
 80155bc:	ae04      	add	r6, sp, #16
 80155be:	6820      	ldr	r0, [r4, #0]
 80155c0:	fb93 f1f8 	sdiv	r1, r3, r8
 80155c4:	440a      	add	r2, r1
 80155c6:	69e1      	ldr	r1, [r4, #28]
 80155c8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80155cc:	463a      	mov	r2, r7
 80155ce:	9600      	str	r6, [sp, #0]
 80155d0:	f7ff ff97 	bl	8015502 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80155d4:	69a3      	ldr	r3, [r4, #24]
 80155d6:	4607      	mov	r7, r0
 80155d8:	686a      	ldr	r2, [r5, #4]
 80155da:	6a21      	ldr	r1, [r4, #32]
 80155dc:	9600      	str	r6, [sp, #0]
 80155de:	6860      	ldr	r0, [r4, #4]
 80155e0:	f7ff ff8f 	bl	8015502 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80155e4:	69a3      	ldr	r3, [r4, #24]
 80155e6:	6962      	ldr	r2, [r4, #20]
 80155e8:	4407      	add	r7, r0
 80155ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80155ec:	9600      	str	r6, [sp, #0]
 80155ee:	68e0      	ldr	r0, [r4, #12]
 80155f0:	fb93 f8f8 	sdiv	r8, r3, r8
 80155f4:	4442      	add	r2, r8
 80155f6:	9203      	str	r2, [sp, #12]
 80155f8:	682a      	ldr	r2, [r5, #0]
 80155fa:	f7ff ff82 	bl	8015502 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80155fe:	4680      	mov	r8, r0
 8015600:	9600      	str	r6, [sp, #0]
 8015602:	69a3      	ldr	r3, [r4, #24]
 8015604:	686a      	ldr	r2, [r5, #4]
 8015606:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015608:	6920      	ldr	r0, [r4, #16]
 801560a:	f7ff ff7a 	bl	8015502 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801560e:	4440      	add	r0, r8
 8015610:	e7cc      	b.n	80155ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015612:	bf00      	nop
 8015614:	2400c860 	.word	0x2400c860

08015618 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015618:	4b07      	ldr	r3, [pc, #28]	; (8015638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	2b01      	cmp	r3, #1
 801561e:	d109      	bne.n	8015634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015620:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015624:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015628:	8003      	strh	r3, [r0, #0]
 801562a:	4b04      	ldr	r3, [pc, #16]	; (801563c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801562c:	881b      	ldrh	r3, [r3, #0]
 801562e:	3b01      	subs	r3, #1
 8015630:	1a9b      	subs	r3, r3, r2
 8015632:	800b      	strh	r3, [r1, #0]
 8015634:	4770      	bx	lr
 8015636:	bf00      	nop
 8015638:	2400c84c 	.word	0x2400c84c
 801563c:	2400c848 	.word	0x2400c848

08015640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015640:	4b07      	ldr	r3, [pc, #28]	; (8015660 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015642:	b510      	push	{r4, lr}
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	2b01      	cmp	r3, #1
 8015648:	d108      	bne.n	801565c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801564a:	4b06      	ldr	r3, [pc, #24]	; (8015664 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801564c:	880c      	ldrh	r4, [r1, #0]
 801564e:	881b      	ldrh	r3, [r3, #0]
 8015650:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015654:	3b01      	subs	r3, #1
 8015656:	1b1b      	subs	r3, r3, r4
 8015658:	8003      	strh	r3, [r0, #0]
 801565a:	800a      	strh	r2, [r1, #0]
 801565c:	bd10      	pop	{r4, pc}
 801565e:	bf00      	nop
 8015660:	2400c84c 	.word	0x2400c84c
 8015664:	2400c848 	.word	0x2400c848

08015668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015668:	4b0a      	ldr	r3, [pc, #40]	; (8015694 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801566a:	b510      	push	{r4, lr}
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	2b01      	cmp	r3, #1
 8015670:	d10e      	bne.n	8015690 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015672:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015676:	8843      	ldrh	r3, [r0, #2]
 8015678:	f9b0 4000 	ldrsh.w	r4, [r0]
 801567c:	18ca      	adds	r2, r1, r3
 801567e:	4b06      	ldr	r3, [pc, #24]	; (8015698 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015680:	8044      	strh	r4, [r0, #2]
 8015682:	881b      	ldrh	r3, [r3, #0]
 8015684:	1a9b      	subs	r3, r3, r2
 8015686:	8003      	strh	r3, [r0, #0]
 8015688:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801568c:	8081      	strh	r1, [r0, #4]
 801568e:	80c3      	strh	r3, [r0, #6]
 8015690:	bd10      	pop	{r4, pc}
 8015692:	bf00      	nop
 8015694:	2400c84c 	.word	0x2400c84c
 8015698:	2400c848 	.word	0x2400c848

0801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801569c:	4b08      	ldr	r3, [pc, #32]	; (80156c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	2b01      	cmp	r3, #1
 80156a2:	d10c      	bne.n	80156be <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80156a4:	8803      	ldrh	r3, [r0, #0]
 80156a6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80156aa:	8842      	ldrh	r2, [r0, #2]
 80156ac:	8002      	strh	r2, [r0, #0]
 80156ae:	185a      	adds	r2, r3, r1
 80156b0:	4b04      	ldr	r3, [pc, #16]	; (80156c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80156b2:	881b      	ldrh	r3, [r3, #0]
 80156b4:	1a9b      	subs	r3, r3, r2
 80156b6:	8043      	strh	r3, [r0, #2]
 80156b8:	88c3      	ldrh	r3, [r0, #6]
 80156ba:	80c1      	strh	r1, [r0, #6]
 80156bc:	8083      	strh	r3, [r0, #4]
 80156be:	4770      	bx	lr
 80156c0:	2400c84c 	.word	0x2400c84c
 80156c4:	2400c848 	.word	0x2400c848

080156c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80156c8:	4b07      	ldr	r3, [pc, #28]	; (80156e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80156ca:	b510      	push	{r4, lr}
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d108      	bne.n	80156e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80156d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80156d6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80156da:	8003      	strh	r3, [r0, #0]
 80156dc:	8893      	ldrh	r3, [r2, #4]
 80156de:	3b01      	subs	r3, #1
 80156e0:	1b1b      	subs	r3, r3, r4
 80156e2:	800b      	strh	r3, [r1, #0]
 80156e4:	bd10      	pop	{r4, pc}
 80156e6:	bf00      	nop
 80156e8:	2400c84c 	.word	0x2400c84c

080156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80156ec:	4b0a      	ldr	r3, [pc, #40]	; (8015718 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80156ee:	460a      	mov	r2, r1
 80156f0:	b510      	push	{r4, lr}
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	d10d      	bne.n	8015714 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80156f8:	8881      	ldrh	r1, [r0, #4]
 80156fa:	8803      	ldrh	r3, [r0, #0]
 80156fc:	440b      	add	r3, r1
 80156fe:	4601      	mov	r1, r0
 8015700:	3b01      	subs	r3, #1
 8015702:	f821 3b02 	strh.w	r3, [r1], #2
 8015706:	f7ff ffdf 	bl	80156c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801570a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801570e:	88c2      	ldrh	r2, [r0, #6]
 8015710:	80c3      	strh	r3, [r0, #6]
 8015712:	8082      	strh	r2, [r0, #4]
 8015714:	bd10      	pop	{r4, pc}
 8015716:	bf00      	nop
 8015718:	2400c84c 	.word	0x2400c84c

0801571c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801571c:	b570      	push	{r4, r5, r6, lr}
 801571e:	2300      	movs	r3, #0
 8015720:	4c0a      	ldr	r4, [pc, #40]	; (801574c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8015722:	4605      	mov	r5, r0
 8015724:	460e      	mov	r6, r1
 8015726:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801572a:	6820      	ldr	r0, [r4, #0]
 801572c:	b110      	cbz	r0, 8015734 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801572e:	6803      	ldr	r3, [r0, #0]
 8015730:	695b      	ldr	r3, [r3, #20]
 8015732:	4798      	blx	r3
 8015734:	6026      	str	r6, [r4, #0]
 8015736:	4630      	mov	r0, r6
 8015738:	6833      	ldr	r3, [r6, #0]
 801573a:	68db      	ldr	r3, [r3, #12]
 801573c:	4798      	blx	r3
 801573e:	682b      	ldr	r3, [r5, #0]
 8015740:	4628      	mov	r0, r5
 8015742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015748:	4718      	bx	r3
 801574a:	bf00      	nop
 801574c:	2400c890 	.word	0x2400c890

08015750 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015750:	4b06      	ldr	r3, [pc, #24]	; (801576c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015752:	2100      	movs	r1, #0
 8015754:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015758:	4b05      	ldr	r3, [pc, #20]	; (8015770 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801575a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801575e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015762:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8015766:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801576a:	4770      	bx	lr
 801576c:	2400c848 	.word	0x2400c848
 8015770:	2400c84a 	.word	0x2400c84a

08015774 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015774:	4b03      	ldr	r3, [pc, #12]	; (8015784 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8015776:	6818      	ldr	r0, [r3, #0]
 8015778:	b110      	cbz	r0, 8015780 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801577a:	6803      	ldr	r3, [r0, #0]
 801577c:	699b      	ldr	r3, [r3, #24]
 801577e:	4718      	bx	r3
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop
 8015784:	2400c890 	.word	0x2400c890

08015788 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015788:	4770      	bx	lr
	...

0801578c <_ZN8touchgfx11Application4drawEv>:
 801578c:	4b09      	ldr	r3, [pc, #36]	; (80157b4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801578e:	b507      	push	{r0, r1, r2, lr}
 8015790:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015794:	2100      	movs	r1, #0
 8015796:	4b08      	ldr	r3, [pc, #32]	; (80157b8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8015798:	9100      	str	r1, [sp, #0]
 801579a:	4669      	mov	r1, sp
 801579c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80157a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80157a8:	6803      	ldr	r3, [r0, #0]
 80157aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157ac:	4798      	blx	r3
 80157ae:	b003      	add	sp, #12
 80157b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80157b4:	2400c848 	.word	0x2400c848
 80157b8:	2400c84a 	.word	0x2400c84a

080157bc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80157bc:	4b03      	ldr	r3, [pc, #12]	; (80157cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80157be:	6818      	ldr	r0, [r3, #0]
 80157c0:	b110      	cbz	r0, 80157c8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80157c2:	6803      	ldr	r3, [r0, #0]
 80157c4:	69db      	ldr	r3, [r3, #28]
 80157c6:	4718      	bx	r3
 80157c8:	4770      	bx	lr
 80157ca:	bf00      	nop
 80157cc:	2400c890 	.word	0x2400c890

080157d0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80157d0:	4b03      	ldr	r3, [pc, #12]	; (80157e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80157d2:	6818      	ldr	r0, [r3, #0]
 80157d4:	b110      	cbz	r0, 80157dc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80157d6:	6803      	ldr	r3, [r0, #0]
 80157d8:	6a1b      	ldr	r3, [r3, #32]
 80157da:	4718      	bx	r3
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop
 80157e0:	2400c890 	.word	0x2400c890

080157e4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80157e4:	2300      	movs	r3, #0
 80157e6:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80157ea:	4770      	bx	lr

080157ec <_ZN8touchgfx11Application14handleKeyEventEh>:
 80157ec:	4b03      	ldr	r3, [pc, #12]	; (80157fc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80157ee:	6818      	ldr	r0, [r3, #0]
 80157f0:	b110      	cbz	r0, 80157f8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80157f2:	6803      	ldr	r3, [r0, #0]
 80157f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157f6:	4718      	bx	r3
 80157f8:	4770      	bx	lr
 80157fa:	bf00      	nop
 80157fc:	2400c890 	.word	0x2400c890

08015800 <_ZN8touchgfx11Application15handleTickEventEv>:
 8015800:	b570      	push	{r4, r5, r6, lr}
 8015802:	4d32      	ldr	r5, [pc, #200]	; (80158cc <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8015804:	4604      	mov	r4, r0
 8015806:	6828      	ldr	r0, [r5, #0]
 8015808:	b140      	cbz	r0, 801581c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801580a:	7a03      	ldrb	r3, [r0, #8]
 801580c:	b933      	cbnz	r3, 801581c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801580e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8015812:	6803      	ldr	r3, [r0, #0]
 8015814:	689b      	ldr	r3, [r3, #8]
 8015816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801581a:	4718      	bx	r3
 801581c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8015820:	b97b      	cbnz	r3, 8015842 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015822:	b170      	cbz	r0, 8015842 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015824:	7a03      	ldrb	r3, [r0, #8]
 8015826:	b163      	cbz	r3, 8015842 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015828:	4b29      	ldr	r3, [pc, #164]	; (80158d0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801582a:	6818      	ldr	r0, [r3, #0]
 801582c:	b110      	cbz	r0, 8015834 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801582e:	6803      	ldr	r3, [r0, #0]
 8015830:	691b      	ldr	r3, [r3, #16]
 8015832:	4798      	blx	r3
 8015834:	6828      	ldr	r0, [r5, #0]
 8015836:	6803      	ldr	r3, [r0, #0]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	4798      	blx	r3
 801583c:	2301      	movs	r3, #1
 801583e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8015842:	2500      	movs	r5, #0
 8015844:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8015848:	42a8      	cmp	r0, r5
 801584a:	dd0c      	ble.n	8015866 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801584c:	1963      	adds	r3, r4, r5
 801584e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8015852:	b132      	cbz	r2, 8015862 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8015854:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8015858:	4413      	add	r3, r2
 801585a:	6858      	ldr	r0, [r3, #4]
 801585c:	6803      	ldr	r3, [r0, #0]
 801585e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015860:	4798      	blx	r3
 8015862:	3501      	adds	r5, #1
 8015864:	e7ee      	b.n	8015844 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8015866:	2300      	movs	r3, #0
 8015868:	461a      	mov	r2, r3
 801586a:	4298      	cmp	r0, r3
 801586c:	d015      	beq.n	801589a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801586e:	18e1      	adds	r1, r4, r3
 8015870:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8015874:	b16d      	cbz	r5, 8015892 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8015876:	429a      	cmp	r2, r3
 8015878:	d00a      	beq.n	8015890 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801587a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801587e:	4431      	add	r1, r6
 8015880:	684e      	ldr	r6, [r1, #4]
 8015882:	b291      	uxth	r1, r2
 8015884:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8015888:	604e      	str	r6, [r1, #4]
 801588a:	18a1      	adds	r1, r4, r2
 801588c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8015890:	3201      	adds	r2, #1
 8015892:	3301      	adds	r3, #1
 8015894:	e7e9      	b.n	801586a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8015896:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801589a:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801589e:	4295      	cmp	r5, r2
 80158a0:	dd0d      	ble.n	80158be <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 80158a2:	1e6b      	subs	r3, r5, #1
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80158aa:	4618      	mov	r0, r3
 80158ac:	3104      	adds	r1, #4
 80158ae:	4285      	cmp	r5, r0
 80158b0:	ddf1      	ble.n	8015896 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 80158b2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 80158b6:	3001      	adds	r0, #1
 80158b8:	f841 6c04 	str.w	r6, [r1, #-4]
 80158bc:	e7f7      	b.n	80158ae <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 80158be:	4b04      	ldr	r3, [pc, #16]	; (80158d0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80158c0:	6818      	ldr	r0, [r3, #0]
 80158c2:	b110      	cbz	r0, 80158ca <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80158c4:	6803      	ldr	r3, [r0, #0]
 80158c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158c8:	e7a5      	b.n	8015816 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80158ca:	bd70      	pop	{r4, r5, r6, pc}
 80158cc:	2400c894 	.word	0x2400c894
 80158d0:	2400c890 	.word	0x2400c890

080158d4 <_ZN8touchgfx11ApplicationD1Ev>:
 80158d4:	4770      	bx	lr

080158d6 <_ZN8touchgfx11ApplicationD0Ev>:
 80158d6:	b510      	push	{r4, lr}
 80158d8:	4604      	mov	r4, r0
 80158da:	f44f 719c 	mov.w	r1, #312	; 0x138
 80158de:	f00a fe06 	bl	80204ee <_ZdlPvj>
 80158e2:	4620      	mov	r0, r4
 80158e4:	bd10      	pop	{r4, pc}

080158e6 <_ZN8touchgfx4Rect10restrictToEss>:
 80158e6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	b510      	push	{r4, lr}
 80158ee:	da04      	bge.n	80158fa <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80158f0:	8884      	ldrh	r4, [r0, #4]
 80158f2:	4423      	add	r3, r4
 80158f4:	8083      	strh	r3, [r0, #4]
 80158f6:	2300      	movs	r3, #0
 80158f8:	8003      	strh	r3, [r0, #0]
 80158fa:	f9b0 4000 	ldrsh.w	r4, [r0]
 80158fe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015902:	1b09      	subs	r1, r1, r4
 8015904:	428b      	cmp	r3, r1
 8015906:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801590a:	bfc8      	it	gt
 801590c:	8081      	strhgt	r1, [r0, #4]
 801590e:	2b00      	cmp	r3, #0
 8015910:	da04      	bge.n	801591c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8015912:	88c1      	ldrh	r1, [r0, #6]
 8015914:	440b      	add	r3, r1
 8015916:	80c3      	strh	r3, [r0, #6]
 8015918:	2300      	movs	r3, #0
 801591a:	8043      	strh	r3, [r0, #2]
 801591c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015920:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8015924:	1a52      	subs	r2, r2, r1
 8015926:	4293      	cmp	r3, r2
 8015928:	bfc8      	it	gt
 801592a:	80c2      	strhgt	r2, [r0, #6]
 801592c:	bd10      	pop	{r4, pc}
	...

08015930 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015930:	4b10      	ldr	r3, [pc, #64]	; (8015974 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8015932:	b510      	push	{r4, lr}
 8015934:	460c      	mov	r4, r1
 8015936:	f9b3 2000 	ldrsh.w	r2, [r3]
 801593a:	4b0f      	ldr	r3, [pc, #60]	; (8015978 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801593c:	4620      	mov	r0, r4
 801593e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015942:	f7ff ffd0 	bl	80158e6 <_ZN8touchgfx4Rect10restrictToEss>
 8015946:	4b0d      	ldr	r3, [pc, #52]	; (801597c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8015948:	6818      	ldr	r0, [r3, #0]
 801594a:	b190      	cbz	r0, 8015972 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801594c:	6803      	ldr	r3, [r0, #0]
 801594e:	4621      	mov	r1, r4
 8015950:	689b      	ldr	r3, [r3, #8]
 8015952:	4798      	blx	r3
 8015954:	4b0a      	ldr	r3, [pc, #40]	; (8015980 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8015956:	6818      	ldr	r0, [r3, #0]
 8015958:	b118      	cbz	r0, 8015962 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801595a:	6803      	ldr	r3, [r0, #0]
 801595c:	4621      	mov	r1, r4
 801595e:	689b      	ldr	r3, [r3, #8]
 8015960:	4798      	blx	r3
 8015962:	4b08      	ldr	r3, [pc, #32]	; (8015984 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8015964:	4621      	mov	r1, r4
 8015966:	6818      	ldr	r0, [r3, #0]
 8015968:	6803      	ldr	r3, [r0, #0]
 801596a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801596e:	69db      	ldr	r3, [r3, #28]
 8015970:	4718      	bx	r3
 8015972:	bd10      	pop	{r4, pc}
 8015974:	2400c84a 	.word	0x2400c84a
 8015978:	2400c848 	.word	0x2400c848
 801597c:	2400c890 	.word	0x2400c890
 8015980:	2400c88c 	.word	0x2400c88c
 8015984:	2400c854 	.word	0x2400c854

08015988 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8015988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598a:	4606      	mov	r6, r0
 801598c:	4608      	mov	r0, r1
 801598e:	460f      	mov	r7, r1
 8015990:	f7fc fab7 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015994:	b9e8      	cbnz	r0, 80159d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015996:	f9b7 5000 	ldrsh.w	r5, [r7]
 801599a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801599e:	42a5      	cmp	r5, r4
 80159a0:	db17      	blt.n	80159d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80159a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80159a6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80159aa:	429a      	cmp	r2, r3
 80159ac:	db11      	blt.n	80159d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80159ae:	88b9      	ldrh	r1, [r7, #4]
 80159b0:	440d      	add	r5, r1
 80159b2:	88b1      	ldrh	r1, [r6, #4]
 80159b4:	440c      	add	r4, r1
 80159b6:	b22d      	sxth	r5, r5
 80159b8:	b224      	sxth	r4, r4
 80159ba:	42a5      	cmp	r5, r4
 80159bc:	dc09      	bgt.n	80159d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80159be:	88f8      	ldrh	r0, [r7, #6]
 80159c0:	4410      	add	r0, r2
 80159c2:	88f2      	ldrh	r2, [r6, #6]
 80159c4:	4413      	add	r3, r2
 80159c6:	b200      	sxth	r0, r0
 80159c8:	b21b      	sxth	r3, r3
 80159ca:	4298      	cmp	r0, r3
 80159cc:	bfcc      	ite	gt
 80159ce:	2000      	movgt	r0, #0
 80159d0:	2001      	movle	r0, #1
 80159d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080159d4 <_ZN8touchgfx11Application11getInstanceEv>:
 80159d4:	4b01      	ldr	r3, [pc, #4]	; (80159dc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80159d6:	6818      	ldr	r0, [r3, #0]
 80159d8:	4770      	bx	lr
 80159da:	bf00      	nop
 80159dc:	2400c8a0 	.word	0x2400c8a0

080159e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80159e0:	2300      	movs	r3, #0
 80159e2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80159e6:	30a8      	adds	r0, #168	; 0xa8
 80159e8:	f820 3c24 	strh.w	r3, [r0, #-36]
 80159ec:	f802 3b01 	strb.w	r3, [r2], #1
 80159f0:	4282      	cmp	r2, r0
 80159f2:	d1fb      	bne.n	80159ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80159f4:	4770      	bx	lr

080159f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80159f6:	4603      	mov	r3, r0
 80159f8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80159fc:	2200      	movs	r2, #0
 80159fe:	801a      	strh	r2, [r3, #0]
 8015a00:	3308      	adds	r3, #8
 8015a02:	f823 2c06 	strh.w	r2, [r3, #-6]
 8015a06:	f823 2c04 	strh.w	r2, [r3, #-4]
 8015a0a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8015a0e:	428b      	cmp	r3, r1
 8015a10:	d1f5      	bne.n	80159fe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015a12:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8015a16:	4770      	bx	lr

08015a18 <_ZN8touchgfx11ApplicationC1Ev>:
 8015a18:	b570      	push	{r4, r5, r6, lr}
 8015a1a:	4b19      	ldr	r3, [pc, #100]	; (8015a80 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8015a1c:	2500      	movs	r5, #0
 8015a1e:	4604      	mov	r4, r0
 8015a20:	30a8      	adds	r0, #168	; 0xa8
 8015a22:	f840 3ca8 	str.w	r3, [r0, #-168]
 8015a26:	f820 5c24 	strh.w	r5, [r0, #-36]
 8015a2a:	f7ff ffe4 	bl	80159f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015a2e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8015a32:	f7ff ffe0 	bl	80159f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015a36:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8015a3a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8015a3e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8015a42:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8015a46:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8015a4a:	490e      	ldr	r1, [pc, #56]	; (8015a84 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8015a4c:	480e      	ldr	r0, [pc, #56]	; (8015a88 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8015a4e:	f00a fc45 	bl	80202dc <CRC_Lock>
 8015a52:	4e0e      	ldr	r6, [pc, #56]	; (8015a8c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8015a54:	4b0e      	ldr	r3, [pc, #56]	; (8015a90 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015a56:	b158      	cbz	r0, 8015a70 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8015a58:	801d      	strh	r5, [r3, #0]
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	4a0d      	ldr	r2, [pc, #52]	; (8015a94 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8015a5e:	4620      	mov	r0, r4
 8015a60:	6013      	str	r3, [r2, #0]
 8015a62:	4a0d      	ldr	r2, [pc, #52]	; (8015a98 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015a64:	6033      	str	r3, [r6, #0]
 8015a66:	6013      	str	r3, [r2, #0]
 8015a68:	f7ff ffba 	bl	80159e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8015a6c:	4620      	mov	r0, r4
 8015a6e:	bd70      	pop	{r4, r5, r6, pc}
 8015a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015a74:	2002      	movs	r0, #2
 8015a76:	801a      	strh	r2, [r3, #0]
 8015a78:	6030      	str	r0, [r6, #0]
 8015a7a:	f001 fa09 	bl	8016e90 <_ZN8touchgfx6Screen4drawEv>
 8015a7e:	e7ec      	b.n	8015a5a <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8015a80:	08023b80 	.word	0x08023b80
 8015a84:	b5e8b5cd 	.word	0xb5e8b5cd
 8015a88:	f407a5c2 	.word	0xf407a5c2
 8015a8c:	2400c890 	.word	0x2400c890
 8015a90:	24000084 	.word	0x24000084
 8015a94:	2400c8a0 	.word	0x2400c8a0
 8015a98:	2400c894 	.word	0x2400c894

08015a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015a9c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015aa0:	3b01      	subs	r3, #1
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	428b      	cmp	r3, r1
 8015aa6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015aaa:	b510      	push	{r4, lr}
 8015aac:	d908      	bls.n	8015ac0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015aae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015ab2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015ab6:	681a      	ldr	r2, [r3, #0]
 8015ab8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015abc:	685a      	ldr	r2, [r3, #4]
 8015abe:	6062      	str	r2, [r4, #4]
 8015ac0:	bd10      	pop	{r4, pc}
	...

08015ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac8:	b08f      	sub	sp, #60	; 0x3c
 8015aca:	4b94      	ldr	r3, [pc, #592]	; (8015d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8015acc:	4683      	mov	fp, r0
 8015ace:	ac0a      	add	r4, sp, #40	; 0x28
 8015ad0:	e884 0006 	stmia.w	r4, {r1, r2}
 8015ad4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015ad8:	4620      	mov	r0, r4
 8015ada:	4b91      	ldr	r3, [pc, #580]	; (8015d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8015adc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015ae0:	f7ff ff01 	bl	80158e6 <_ZN8touchgfx4Rect10restrictToEss>
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	f7fc fa0c 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d16a      	bne.n	8015bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015aee:	9403      	str	r4, [sp, #12]
 8015af0:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8015af4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8015af8:	2400      	movs	r4, #0
 8015afa:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8015afe:	9301      	str	r3, [sp, #4]
 8015b00:	36a0      	adds	r6, #160	; 0xa0
 8015b02:	42a5      	cmp	r5, r4
 8015b04:	d00d      	beq.n	8015b22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8015b06:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8015b0a:	9803      	ldr	r0, [sp, #12]
 8015b0c:	f7ff ff3c 	bl	8015988 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015b10:	b128      	cbz	r0, 8015b1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8015b12:	1e69      	subs	r1, r5, #1
 8015b14:	9801      	ldr	r0, [sp, #4]
 8015b16:	1b09      	subs	r1, r1, r4
 8015b18:	b289      	uxth	r1, r1
 8015b1a:	f7ff ffbf 	bl	8015a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015b1e:	3401      	adds	r4, #1
 8015b20:	e7ef      	b.n	8015b02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8015b22:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8015b26:	1e7b      	subs	r3, r7, #1
 8015b28:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8015b2c:	9704      	str	r7, [sp, #16]
 8015b2e:	9302      	str	r3, [sp, #8]
 8015b30:	2400      	movs	r4, #0
 8015b32:	4655      	mov	r5, sl
 8015b34:	9705      	str	r7, [sp, #20]
 8015b36:	4626      	mov	r6, r4
 8015b38:	9b05      	ldr	r3, [sp, #20]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d078      	beq.n	8015c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8015b3e:	9903      	ldr	r1, [sp, #12]
 8015b40:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8015b44:	f7fd ff94 	bl	8013a70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015b48:	b360      	cbz	r0, 8015ba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015b4a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8015b4e:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8015b52:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8015b56:	45e6      	cmp	lr, ip
 8015b58:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8015b5c:	db35      	blt.n	8015bca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015b5e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015b62:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8015b66:	4472      	add	r2, lr
 8015b68:	4463      	add	r3, ip
 8015b6a:	b212      	sxth	r2, r2
 8015b6c:	b21b      	sxth	r3, r3
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	dc2b      	bgt.n	8015bca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015b72:	fa1f f288 	uxth.w	r2, r8
 8015b76:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8015b7a:	45c1      	cmp	r9, r8
 8015b7c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015b80:	4413      	add	r3, r2
 8015b82:	fa1f fc89 	uxth.w	ip, r9
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	fa0f fe83 	sxth.w	lr, r3
 8015b8c:	db0f      	blt.n	8015bae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015b8e:	eba3 030c 	sub.w	r3, r3, ip
 8015b92:	1ac9      	subs	r1, r1, r3
 8015b94:	b209      	sxth	r1, r1
 8015b96:	2900      	cmp	r1, #0
 8015b98:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015b9c:	dd12      	ble.n	8015bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015b9e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	9b05      	ldr	r3, [sp, #20]
 8015ba6:	3d08      	subs	r5, #8
 8015ba8:	3b01      	subs	r3, #1
 8015baa:	9305      	str	r3, [sp, #20]
 8015bac:	e7c4      	b.n	8015b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8015bae:	4461      	add	r1, ip
 8015bb0:	b209      	sxth	r1, r1
 8015bb2:	4571      	cmp	r1, lr
 8015bb4:	dc3a      	bgt.n	8015c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015bb6:	eba2 020c 	sub.w	r2, r2, ip
 8015bba:	b212      	sxth	r2, r2
 8015bbc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015bc0:	2a00      	cmp	r2, #0
 8015bc2:	dcee      	bgt.n	8015ba2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015bc4:	b00f      	add	sp, #60	; 0x3c
 8015bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bca:	45c1      	cmp	r9, r8
 8015bcc:	db2e      	blt.n	8015c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015bce:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015bd2:	4499      	add	r9, r3
 8015bd4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8015bd8:	4498      	add	r8, r3
 8015bda:	fa0f f989 	sxth.w	r9, r9
 8015bde:	fa0f f888 	sxth.w	r8, r8
 8015be2:	45c1      	cmp	r9, r8
 8015be4:	dc22      	bgt.n	8015c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015be6:	fa1f f28c 	uxth.w	r2, ip
 8015bea:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8015bee:	45e6      	cmp	lr, ip
 8015bf0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015bf4:	4413      	add	r3, r2
 8015bf6:	fa1f f88e 	uxth.w	r8, lr
 8015bfa:	b29b      	uxth	r3, r3
 8015bfc:	fa0f f983 	sxth.w	r9, r3
 8015c00:	db0a      	blt.n	8015c18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8015c02:	eba3 0308 	sub.w	r3, r3, r8
 8015c06:	1ac9      	subs	r1, r1, r3
 8015c08:	b209      	sxth	r1, r1
 8015c0a:	2900      	cmp	r1, #0
 8015c0c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8015c10:	ddd8      	ble.n	8015bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015c12:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8015c16:	e7c4      	b.n	8015ba2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015c18:	4441      	add	r1, r8
 8015c1a:	b209      	sxth	r1, r1
 8015c1c:	4549      	cmp	r1, r9
 8015c1e:	dc05      	bgt.n	8015c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015c20:	eba2 0208 	sub.w	r2, r2, r8
 8015c24:	b212      	sxth	r2, r2
 8015c26:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015c2a:	e7c9      	b.n	8015bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8015c2c:	4606      	mov	r6, r0
 8015c2e:	e7b9      	b.n	8015ba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015c30:	2c00      	cmp	r4, #0
 8015c32:	f47f af7d 	bne.w	8015b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8015c36:	2e00      	cmp	r6, #0
 8015c38:	f000 81e1 	beq.w	8015ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8015c3c:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8015c40:	4655      	mov	r5, sl
 8015c42:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8015c46:	b2b9      	uxth	r1, r7
 8015c48:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015c4c:	b2b3      	uxth	r3, r6
 8015c4e:	9105      	str	r1, [sp, #20]
 8015c50:	9805      	ldr	r0, [sp, #20]
 8015c52:	441a      	add	r2, r3
 8015c54:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015c58:	b292      	uxth	r2, r2
 8015c5a:	4401      	add	r1, r0
 8015c5c:	fa0f f882 	sxth.w	r8, r2
 8015c60:	b289      	uxth	r1, r1
 8015c62:	9106      	str	r1, [sp, #24]
 8015c64:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8015c68:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015c6c:	9b04      	ldr	r3, [sp, #16]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d058      	beq.n	8015d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8015c72:	9903      	ldr	r1, [sp, #12]
 8015c74:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8015c78:	f7fd fefa 	bl	8013a70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015c7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015c80:	b1d8      	cbz	r0, 8015cba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015c82:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8015c86:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8015c8a:	4576      	cmp	r6, lr
 8015c8c:	dc26      	bgt.n	8015cdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8015c8e:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8015c92:	44f4      	add	ip, lr
 8015c94:	fa0f fc8c 	sxth.w	ip, ip
 8015c98:	45e0      	cmp	r8, ip
 8015c9a:	db1f      	blt.n	8015cdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8015c9c:	428f      	cmp	r7, r1
 8015c9e:	fa1f fc81 	uxth.w	ip, r1
 8015ca2:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8015ca6:	dc0f      	bgt.n	8015cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8015ca8:	9806      	ldr	r0, [sp, #24]
 8015caa:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8015cae:	eba0 0c0c 	sub.w	ip, r0, ip
 8015cb2:	eba1 010c 	sub.w	r1, r1, ip
 8015cb6:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8015cba:	4620      	mov	r0, r4
 8015cbc:	9904      	ldr	r1, [sp, #16]
 8015cbe:	3d08      	subs	r5, #8
 8015cc0:	4604      	mov	r4, r0
 8015cc2:	3901      	subs	r1, #1
 8015cc4:	9104      	str	r1, [sp, #16]
 8015cc6:	e7cf      	b.n	8015c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8015cc8:	4461      	add	r1, ip
 8015cca:	b209      	sxth	r1, r1
 8015ccc:	4549      	cmp	r1, r9
 8015cce:	dcf5      	bgt.n	8015cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015cd0:	9905      	ldr	r1, [sp, #20]
 8015cd2:	eba1 0c0c 	sub.w	ip, r1, ip
 8015cd6:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8015cda:	e7ee      	b.n	8015cba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015cdc:	428f      	cmp	r7, r1
 8015cde:	dced      	bgt.n	8015cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015ce0:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8015ce4:	4461      	add	r1, ip
 8015ce6:	b209      	sxth	r1, r1
 8015ce8:	4589      	cmp	r9, r1
 8015cea:	dbe7      	blt.n	8015cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015cec:	4576      	cmp	r6, lr
 8015cee:	fa1f fc8e 	uxth.w	ip, lr
 8015cf2:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8015cf6:	dc08      	bgt.n	8015d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8015cf8:	eba2 0c0c 	sub.w	ip, r2, ip
 8015cfc:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8015d00:	eba1 010c 	sub.w	r1, r1, ip
 8015d04:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8015d08:	e7d7      	b.n	8015cba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015d0a:	4461      	add	r1, ip
 8015d0c:	b209      	sxth	r1, r1
 8015d0e:	4588      	cmp	r8, r1
 8015d10:	dbd4      	blt.n	8015cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015d12:	eba3 0c0c 	sub.w	ip, r3, ip
 8015d16:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8015d1a:	e7ce      	b.n	8015cba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015d1c:	2400c84a 	.word	0x2400c84a
 8015d20:	2400c848 	.word	0x2400c848
 8015d24:	2c00      	cmp	r4, #0
 8015d26:	f000 816a 	beq.w	8015ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8015d2a:	9b02      	ldr	r3, [sp, #8]
 8015d2c:	3301      	adds	r3, #1
 8015d2e:	f000 8166 	beq.w	8015ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8015d32:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8015d36:	9803      	ldr	r0, [sp, #12]
 8015d38:	4621      	mov	r1, r4
 8015d3a:	f7ff fe25 	bl	8015988 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015d3e:	b120      	cbz	r0, 8015d4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8015d40:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8015d44:	9801      	ldr	r0, [sp, #4]
 8015d46:	f7ff fea9 	bl	8015a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015d4a:	9903      	ldr	r1, [sp, #12]
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	f7fd fe8f 	bl	8013a70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015d52:	2800      	cmp	r0, #0
 8015d54:	f000 809b 	beq.w	8015e8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8015d58:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8015d5c:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8015d60:	b281      	uxth	r1, r0
 8015d62:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8015d66:	9309      	str	r3, [sp, #36]	; 0x24
 8015d68:	eb01 0c03 	add.w	ip, r1, r3
 8015d6c:	b2ab      	uxth	r3, r5
 8015d6e:	4285      	cmp	r5, r0
 8015d70:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8015d74:	fa1f f98c 	uxth.w	r9, ip
 8015d78:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015d7c:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8015d80:	eb03 040c 	add.w	r4, r3, ip
 8015d84:	b2a4      	uxth	r4, r4
 8015d86:	9405      	str	r4, [sp, #20]
 8015d88:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8015d8c:	9404      	str	r4, [sp, #16]
 8015d8e:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8015d92:	f340 809a 	ble.w	8015eca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8015d96:	1a5b      	subs	r3, r3, r1
 8015d98:	4596      	cmp	lr, r2
 8015d9a:	fa0f f589 	sxth.w	r5, r9
 8015d9e:	b29b      	uxth	r3, r3
 8015da0:	b21e      	sxth	r6, r3
 8015da2:	dd2e      	ble.n	8015e02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8015da4:	9f02      	ldr	r7, [sp, #8]
 8015da6:	fa1f fe8e 	uxth.w	lr, lr
 8015daa:	b292      	uxth	r2, r2
 8015dac:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8015db0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015db4:	9f04      	ldr	r7, [sp, #16]
 8015db6:	ebae 0102 	sub.w	r1, lr, r2
 8015dba:	4486      	add	lr, r0
 8015dbc:	1b7f      	subs	r7, r7, r5
 8015dbe:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8015dc2:	b289      	uxth	r1, r1
 8015dc4:	442a      	add	r2, r5
 8015dc6:	fa0f fe8e 	sxth.w	lr, lr
 8015dca:	b20c      	sxth	r4, r1
 8015dcc:	b212      	sxth	r2, r2
 8015dce:	4367      	muls	r7, r4
 8015dd0:	ebae 0202 	sub.w	r2, lr, r2
 8015dd4:	4372      	muls	r2, r6
 8015dd6:	4297      	cmp	r7, r2
 8015dd8:	db09      	blt.n	8015dee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8015dda:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8015dde:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8015de2:	449c      	add	ip, r3
 8015de4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015de8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015dec:	e680      	b.n	8015af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015dee:	4401      	add	r1, r0
 8015df0:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8015df4:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8015df8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015dfc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015e00:	e676      	b.n	8015af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015e02:	9f04      	ldr	r7, [sp, #16]
 8015e04:	42bd      	cmp	r5, r7
 8015e06:	da27      	bge.n	8015e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8015e08:	9902      	ldr	r1, [sp, #8]
 8015e0a:	1b7f      	subs	r7, r7, r5
 8015e0c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8015e10:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8015e14:	eb04 010e 	add.w	r1, r4, lr
 8015e18:	fa1f f881 	uxth.w	r8, r1
 8015e1c:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8015e20:	4411      	add	r1, r2
 8015e22:	fa0f f988 	sxth.w	r9, r8
 8015e26:	eba2 020e 	sub.w	r2, r2, lr
 8015e2a:	eba1 0108 	sub.w	r1, r1, r8
 8015e2e:	4372      	muls	r2, r6
 8015e30:	b289      	uxth	r1, r1
 8015e32:	fa0f f881 	sxth.w	r8, r1
 8015e36:	fb08 f707 	mul.w	r7, r8, r7
 8015e3a:	42ba      	cmp	r2, r7
 8015e3c:	dc06      	bgt.n	8015e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8015e3e:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8015e42:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8015e46:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8015e4a:	e7ca      	b.n	8015de2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8015e4c:	4421      	add	r1, r4
 8015e4e:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8015e52:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015e56:	e64b      	b.n	8015af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015e58:	9d05      	ldr	r5, [sp, #20]
 8015e5a:	2c06      	cmp	r4, #6
 8015e5c:	eba9 0505 	sub.w	r5, r9, r5
 8015e60:	b2ad      	uxth	r5, r5
 8015e62:	fa0f fe85 	sxth.w	lr, r5
 8015e66:	d818      	bhi.n	8015e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8015e68:	9b04      	ldr	r3, [sp, #16]
 8015e6a:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8015e6e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8015e72:	1c63      	adds	r3, r4, #1
 8015e74:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8015e78:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8015e7c:	9b01      	ldr	r3, [sp, #4]
 8015e7e:	9d01      	ldr	r5, [sp, #4]
 8015e80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015e84:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8015e88:	805a      	strh	r2, [r3, #2]
 8015e8a:	809e      	strh	r6, [r3, #4]
 8015e8c:	80d9      	strh	r1, [r3, #6]
 8015e8e:	9b02      	ldr	r3, [sp, #8]
 8015e90:	f1aa 0a08 	sub.w	sl, sl, #8
 8015e94:	3b01      	subs	r3, #1
 8015e96:	9302      	str	r3, [sp, #8]
 8015e98:	e747      	b.n	8015d2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8015e9a:	9a02      	ldr	r2, [sp, #8]
 8015e9c:	45b6      	cmp	lr, r6
 8015e9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015ea2:	db0d      	blt.n	8015ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8015ea4:	449c      	add	ip, r3
 8015ea6:	445a      	add	r2, fp
 8015ea8:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8015eac:	fa1f fc8c 	uxth.w	ip, ip
 8015eb0:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8015eb4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015eb8:	448c      	add	ip, r1
 8015eba:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8015ebe:	e617      	b.n	8015af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015ec0:	445a      	add	r2, fp
 8015ec2:	44ac      	add	ip, r5
 8015ec4:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8015ec8:	e78e      	b.n	8015de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015eca:	fa1f f18e 	uxth.w	r1, lr
 8015ece:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8015ed2:	b293      	uxth	r3, r2
 8015ed4:	4596      	cmp	lr, r2
 8015ed6:	eb01 0806 	add.w	r8, r1, r6
 8015eda:	9306      	str	r3, [sp, #24]
 8015edc:	fa1f f888 	uxth.w	r8, r8
 8015ee0:	9f06      	ldr	r7, [sp, #24]
 8015ee2:	fa0f f388 	sxth.w	r3, r8
 8015ee6:	9307      	str	r3, [sp, #28]
 8015ee8:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8015eec:	443b      	add	r3, r7
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	9308      	str	r3, [sp, #32]
 8015ef2:	da25      	bge.n	8015f40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8015ef4:	9905      	ldr	r1, [sp, #20]
 8015ef6:	eba3 0308 	sub.w	r3, r3, r8
 8015efa:	eba2 020e 	sub.w	r2, r2, lr
 8015efe:	1b40      	subs	r0, r0, r5
 8015f00:	eba9 0401 	sub.w	r4, r9, r1
 8015f04:	b29b      	uxth	r3, r3
 8015f06:	b2a4      	uxth	r4, r4
 8015f08:	b219      	sxth	r1, r3
 8015f0a:	fa0f f984 	sxth.w	r9, r4
 8015f0e:	4348      	muls	r0, r1
 8015f10:	fb09 f202 	mul.w	r2, r9, r2
 8015f14:	4282      	cmp	r2, r0
 8015f16:	9a02      	ldr	r2, [sp, #8]
 8015f18:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015f1c:	445a      	add	r2, fp
 8015f1e:	dc06      	bgt.n	8015f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8015f20:	9b07      	ldr	r3, [sp, #28]
 8015f22:	44a4      	add	ip, r4
 8015f24:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8015f28:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8015f2c:	e75c      	b.n	8015de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015f2e:	9904      	ldr	r1, [sp, #16]
 8015f30:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8015f34:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8015f38:	4433      	add	r3, r6
 8015f3a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015f3e:	e5d7      	b.n	8015af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015f40:	9f06      	ldr	r7, [sp, #24]
 8015f42:	9b04      	ldr	r3, [sp, #16]
 8015f44:	1bc9      	subs	r1, r1, r7
 8015f46:	fa0f f789 	sxth.w	r7, r9
 8015f4a:	b289      	uxth	r1, r1
 8015f4c:	429f      	cmp	r7, r3
 8015f4e:	fa0f fe81 	sxth.w	lr, r1
 8015f52:	dd22      	ble.n	8015f9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8015f54:	9a05      	ldr	r2, [sp, #20]
 8015f56:	1b40      	subs	r0, r0, r5
 8015f58:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015f5c:	eba9 0202 	sub.w	r2, r9, r2
 8015f60:	9d07      	ldr	r5, [sp, #28]
 8015f62:	fb0e f000 	mul.w	r0, lr, r0
 8015f66:	b292      	uxth	r2, r2
 8015f68:	eba5 0a03 	sub.w	sl, r5, r3
 8015f6c:	9b02      	ldr	r3, [sp, #8]
 8015f6e:	b214      	sxth	r4, r2
 8015f70:	00db      	lsls	r3, r3, #3
 8015f72:	fb04 fa0a 	mul.w	sl, r4, sl
 8015f76:	445b      	add	r3, fp
 8015f78:	4550      	cmp	r0, sl
 8015f7a:	db03      	blt.n	8015f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8015f7c:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8015f80:	4494      	add	ip, r2
 8015f82:	e731      	b.n	8015de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015f84:	9a04      	ldr	r2, [sp, #16]
 8015f86:	4431      	add	r1, r6
 8015f88:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8015f8c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8015f90:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8015f94:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015f98:	e75b      	b.n	8015e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8015f9a:	9b08      	ldr	r3, [sp, #32]
 8015f9c:	2c06      	cmp	r4, #6
 8015f9e:	eba3 0308 	sub.w	r3, r3, r8
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	b21d      	sxth	r5, r3
 8015fa6:	d813      	bhi.n	8015fd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8015fa8:	9b07      	ldr	r3, [sp, #28]
 8015faa:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8015fae:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8015fb2:	1c63      	adds	r3, r4, #1
 8015fb4:	9901      	ldr	r1, [sp, #4]
 8015fb6:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8015fba:	9b01      	ldr	r3, [sp, #4]
 8015fbc:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8015fc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015fc4:	805a      	strh	r2, [r3, #2]
 8015fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fc8:	f8a3 e006 	strh.w	lr, [r3, #6]
 8015fcc:	809a      	strh	r2, [r3, #4]
 8015fce:	e75e      	b.n	8015e8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8015fd0:	9802      	ldr	r0, [sp, #8]
 8015fd2:	4575      	cmp	r5, lr
 8015fd4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8015fd8:	db0d      	blt.n	8015ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8015fda:	4431      	add	r1, r6
 8015fdc:	9b06      	ldr	r3, [sp, #24]
 8015fde:	4458      	add	r0, fp
 8015fe0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8015fe4:	b289      	uxth	r1, r1
 8015fe6:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8015fea:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015fee:	4419      	add	r1, r3
 8015ff0:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8015ff4:	e57c      	b.n	8015af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015ff6:	4458      	add	r0, fp
 8015ff8:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8015ffc:	e79c      	b.n	8015f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8015ffe:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8016002:	2e07      	cmp	r6, #7
 8016004:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016008:	d812      	bhi.n	8016030 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801600a:	1c75      	adds	r5, r6, #1
 801600c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8016010:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8016014:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8016018:	9d01      	ldr	r5, [sp, #4]
 801601a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801601e:	442c      	add	r4, r5
 8016020:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8016024:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016028:	8061      	strh	r1, [r4, #2]
 801602a:	80a2      	strh	r2, [r4, #4]
 801602c:	80e3      	strh	r3, [r4, #6]
 801602e:	e5c9      	b.n	8015bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016030:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8016034:	3e01      	subs	r6, #1
 8016036:	445c      	add	r4, fp
 8016038:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801603c:	f04f 37ff 	mov.w	r7, #4294967295
 8016040:	2500      	movs	r5, #0
 8016042:	9305      	str	r3, [sp, #20]
 8016044:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8016048:	1e72      	subs	r2, r6, #1
 801604a:	9302      	str	r3, [sp, #8]
 801604c:	4691      	mov	r9, r2
 801604e:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8016052:	9304      	str	r3, [sp, #16]
 8016054:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8016058:	f1b9 3fff 	cmp.w	r9, #4294967295
 801605c:	6818      	ldr	r0, [r3, #0]
 801605e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016062:	9207      	str	r2, [sp, #28]
 8016064:	bf16      	itet	ne
 8016066:	9905      	ldrne	r1, [sp, #20]
 8016068:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801606c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016070:	9306      	str	r3, [sp, #24]
 8016072:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016076:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801607a:	fb18 f801 	smulbb	r8, r8, r1
 801607e:	6859      	ldr	r1, [r3, #4]
 8016080:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016084:	4671      	mov	r1, lr
 8016086:	a80c      	add	r0, sp, #48	; 0x30
 8016088:	f7fc f82b 	bl	80120e2 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801608c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016090:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8016094:	f04f 0c08 	mov.w	ip, #8
 8016098:	9b04      	ldr	r3, [sp, #16]
 801609a:	9a02      	ldr	r2, [sp, #8]
 801609c:	fb10 f001 	smulbb	r0, r0, r1
 80160a0:	fb02 8803 	mla	r8, r2, r3, r8
 80160a4:	eba0 0108 	sub.w	r1, r0, r8
 80160a8:	fb90 f0fc 	sdiv	r0, r0, ip
 80160ac:	4288      	cmp	r0, r1
 80160ae:	dc20      	bgt.n	80160f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 80160b0:	4551      	cmp	r1, sl
 80160b2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80160b6:	da03      	bge.n	80160c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80160b8:	b1d9      	cbz	r1, 80160f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 80160ba:	468a      	mov	sl, r1
 80160bc:	464f      	mov	r7, r9
 80160be:	4635      	mov	r5, r6
 80160c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80160c4:	f119 0f02 	cmn.w	r9, #2
 80160c8:	d1c6      	bne.n	8016058 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80160ca:	4616      	mov	r6, r2
 80160cc:	3201      	adds	r2, #1
 80160ce:	f1a4 0408 	sub.w	r4, r4, #8
 80160d2:	d1b7      	bne.n	8016044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 80160d4:	9b01      	ldr	r3, [sp, #4]
 80160d6:	b2ac      	uxth	r4, r5
 80160d8:	00ed      	lsls	r5, r5, #3
 80160da:	1958      	adds	r0, r3, r5
 80160dc:	1c7b      	adds	r3, r7, #1
 80160de:	d10b      	bne.n	80160f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 80160e0:	4601      	mov	r1, r0
 80160e2:	9803      	ldr	r0, [sp, #12]
 80160e4:	f7fb fffd 	bl	80120e2 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80160e8:	4621      	mov	r1, r4
 80160ea:	9801      	ldr	r0, [sp, #4]
 80160ec:	f7ff fcd6 	bl	8015a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80160f0:	e4fe      	b.n	8015af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80160f2:	464f      	mov	r7, r9
 80160f4:	4635      	mov	r5, r6
 80160f6:	e7ed      	b.n	80160d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80160f8:	9b01      	ldr	r3, [sp, #4]
 80160fa:	00ff      	lsls	r7, r7, #3
 80160fc:	445d      	add	r5, fp
 80160fe:	19d9      	adds	r1, r3, r7
 8016100:	445f      	add	r7, fp
 8016102:	f7fb ffee 	bl	80120e2 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016106:	9b03      	ldr	r3, [sp, #12]
 8016108:	cb03      	ldmia	r3!, {r0, r1}
 801610a:	9b03      	ldr	r3, [sp, #12]
 801610c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8016110:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8016114:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8016118:	6869      	ldr	r1, [r5, #4]
 801611a:	c303      	stmia	r3!, {r0, r1}
 801611c:	e7e4      	b.n	80160e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801611e:	bf00      	nop

08016120 <_ZN8touchgfx11Application10invalidateEv>:
 8016120:	4b09      	ldr	r3, [pc, #36]	; (8016148 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016122:	b082      	sub	sp, #8
 8016124:	2100      	movs	r1, #0
 8016126:	f9b3 2000 	ldrsh.w	r2, [r3]
 801612a:	4b08      	ldr	r3, [pc, #32]	; (801614c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801612c:	9100      	str	r1, [sp, #0]
 801612e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016132:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016136:	f8ad 3006 	strh.w	r3, [sp, #6]
 801613a:	ab02      	add	r3, sp, #8
 801613c:	e913 0006 	ldmdb	r3, {r1, r2}
 8016140:	b002      	add	sp, #8
 8016142:	f7ff bcbf 	b.w	8015ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016146:	bf00      	nop
 8016148:	2400c848 	.word	0x2400c848
 801614c:	2400c84a 	.word	0x2400c84a

08016150 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016154:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8016158:	b09b      	sub	sp, #108	; 0x6c
 801615a:	4604      	mov	r4, r0
 801615c:	4630      	mov	r0, r6
 801615e:	f7fb fed0 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016162:	4605      	mov	r5, r0
 8016164:	b940      	cbnz	r0, 8016178 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016166:	4620      	mov	r0, r4
 8016168:	e896 0006 	ldmia.w	r6, {r1, r2}
 801616c:	f7ff fcaa 	bl	8015ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016170:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8016174:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016178:	4bc8      	ldr	r3, [pc, #800]	; (801649c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d03e      	beq.n	80161fe <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016180:	4dc7      	ldr	r5, [pc, #796]	; (80164a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016182:	4628      	mov	r0, r5
 8016184:	f7fb febd 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016188:	4606      	mov	r6, r0
 801618a:	2800      	cmp	r0, #0
 801618c:	d137      	bne.n	80161fe <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801618e:	4628      	mov	r0, r5
 8016190:	f7ff fa6a 	bl	8015668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016194:	6829      	ldr	r1, [r5, #0]
 8016196:	686a      	ldr	r2, [r5, #4]
 8016198:	4620      	mov	r0, r4
 801619a:	f7ff fc93 	bl	8015ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801619e:	802e      	strh	r6, [r5, #0]
 80161a0:	806e      	strh	r6, [r5, #2]
 80161a2:	80ae      	strh	r6, [r5, #4]
 80161a4:	80ee      	strh	r6, [r5, #6]
 80161a6:	ae09      	add	r6, sp, #36	; 0x24
 80161a8:	4630      	mov	r0, r6
 80161aa:	f7ff fc24 	bl	80159f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80161ae:	4abd      	ldr	r2, [pc, #756]	; (80164a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80161b0:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80161b4:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80161b8:	8815      	ldrh	r5, [r2, #0]
 80161ba:	9202      	str	r2, [sp, #8]
 80161bc:	462b      	mov	r3, r5
 80161be:	429f      	cmp	r7, r3
 80161c0:	d924      	bls.n	801620c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 80161c2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80161c6:	2907      	cmp	r1, #7
 80161c8:	d816      	bhi.n	80161f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 80161ca:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80161ce:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80161d2:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 80161d6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80161da:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80161de:	1c4a      	adds	r2, r1, #1
 80161e0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80161e4:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80161e8:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80161ec:	f8a2 9002 	strh.w	r9, [r2, #2]
 80161f0:	f8a2 e004 	strh.w	lr, [r2, #4]
 80161f4:	f8a2 c006 	strh.w	ip, [r2, #6]
 80161f8:	3301      	adds	r3, #1
 80161fa:	b29b      	uxth	r3, r3
 80161fc:	e7df      	b.n	80161be <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80161fe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016202:	2b00      	cmp	r3, #0
 8016204:	d1cf      	bne.n	80161a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8016206:	b01b      	add	sp, #108	; 0x6c
 8016208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801620c:	462f      	mov	r7, r5
 801620e:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8016212:	42bb      	cmp	r3, r7
 8016214:	d90b      	bls.n	801622e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8016216:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801621a:	3701      	adds	r7, #1
 801621c:	4620      	mov	r0, r4
 801621e:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8016222:	b2bf      	uxth	r7, r7
 8016224:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8016228:	f7ff fc4c 	bl	8015ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801622c:	e7ef      	b.n	801620e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801622e:	4a9e      	ldr	r2, [pc, #632]	; (80164a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016230:	6813      	ldr	r3, [r2, #0]
 8016232:	4690      	mov	r8, r2
 8016234:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016238:	2b01      	cmp	r3, #1
 801623a:	f040 80e4 	bne.w	8016406 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801623e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016242:	4629      	mov	r1, r5
 8016244:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8016248:	2500      	movs	r5, #0
 801624a:	33aa      	adds	r3, #170	; 0xaa
 801624c:	428f      	cmp	r7, r1
 801624e:	f103 0308 	add.w	r3, r3, #8
 8016252:	dd0a      	ble.n	801626a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8016254:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016258:	3101      	adds	r1, #1
 801625a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801625e:	4402      	add	r2, r0
 8016260:	b212      	sxth	r2, r2
 8016262:	4295      	cmp	r5, r2
 8016264:	bfb8      	it	lt
 8016266:	4615      	movlt	r5, r2
 8016268:	e7f0      	b.n	801624c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801626a:	4b90      	ldr	r3, [pc, #576]	; (80164ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801626c:	f8df b238 	ldr.w	fp, [pc, #568]	; 80164a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8016270:	881b      	ldrh	r3, [r3, #0]
 8016272:	46d8      	mov	r8, fp
 8016274:	2b0f      	cmp	r3, #15
 8016276:	bf8c      	ite	hi
 8016278:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801627c:	f04f 0a01 	movls.w	sl, #1
 8016280:	2300      	movs	r3, #0
 8016282:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016286:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801628a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801628e:	4438      	add	r0, r7
 8016290:	b207      	sxth	r7, r0
 8016292:	f8db 0000 	ldr.w	r0, [fp]
 8016296:	42bd      	cmp	r5, r7
 8016298:	6803      	ldr	r3, [r0, #0]
 801629a:	f340 8084 	ble.w	80163a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801629e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80162a2:	4798      	blx	r3
 80162a4:	eb07 030a 	add.w	r3, r7, sl
 80162a8:	4298      	cmp	r0, r3
 80162aa:	da07      	bge.n	80162bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80162ac:	4285      	cmp	r5, r0
 80162ae:	dd05      	ble.n	80162bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80162b0:	4287      	cmp	r7, r0
 80162b2:	dd6d      	ble.n	8016390 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80162b4:	2f00      	cmp	r7, #0
 80162b6:	dd6b      	ble.n	8016390 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80162b8:	4628      	mov	r0, r5
 80162ba:	e004      	b.n	80162c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 80162bc:	4287      	cmp	r7, r0
 80162be:	dcfb      	bgt.n	80162b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 80162c0:	42a8      	cmp	r0, r5
 80162c2:	bfa8      	it	ge
 80162c4:	4628      	movge	r0, r5
 80162c6:	4b7a      	ldr	r3, [pc, #488]	; (80164b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80162c8:	1bc0      	subs	r0, r0, r7
 80162ca:	2200      	movs	r2, #0
 80162cc:	f8ad 7016 	strh.w	r7, [sp, #22]
 80162d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80162d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80162dc:	9b02      	ldr	r3, [sp, #8]
 80162de:	f8ad 001a 	strh.w	r0, [sp, #26]
 80162e2:	881f      	ldrh	r7, [r3, #0]
 80162e4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80162e8:	42bb      	cmp	r3, r7
 80162ea:	d9cc      	bls.n	8016286 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80162ec:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80162f0:	ab07      	add	r3, sp, #28
 80162f2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80162f6:	6851      	ldr	r1, [r2, #4]
 80162f8:	c303      	stmia	r3!, {r0, r1}
 80162fa:	a905      	add	r1, sp, #20
 80162fc:	a807      	add	r0, sp, #28
 80162fe:	f7fd fbb7 	bl	8013a70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016302:	2800      	cmp	r0, #0
 8016304:	d04c      	beq.n	80163a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8016306:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801630a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801630e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8016312:	4686      	mov	lr, r0
 8016314:	4290      	cmp	r0, r2
 8016316:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801631a:	4448      	add	r0, r9
 801631c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8016320:	bfb8      	it	lt
 8016322:	4696      	movlt	lr, r2
 8016324:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016328:	444a      	add	r2, r9
 801632a:	b280      	uxth	r0, r0
 801632c:	4299      	cmp	r1, r3
 801632e:	468c      	mov	ip, r1
 8016330:	b292      	uxth	r2, r2
 8016332:	9303      	str	r3, [sp, #12]
 8016334:	bfb8      	it	lt
 8016336:	469c      	movlt	ip, r3
 8016338:	b203      	sxth	r3, r0
 801633a:	fa0f f982 	sxth.w	r9, r2
 801633e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016342:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016346:	454b      	cmp	r3, r9
 8016348:	bfb8      	it	lt
 801634a:	4602      	movlt	r2, r0
 801634c:	9b03      	ldr	r3, [sp, #12]
 801634e:	eba2 020e 	sub.w	r2, r2, lr
 8016352:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016356:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801635a:	4411      	add	r1, r2
 801635c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016360:	4413      	add	r3, r2
 8016362:	b289      	uxth	r1, r1
 8016364:	b29b      	uxth	r3, r3
 8016366:	b208      	sxth	r0, r1
 8016368:	b21a      	sxth	r2, r3
 801636a:	4290      	cmp	r0, r2
 801636c:	bfb8      	it	lt
 801636e:	460b      	movlt	r3, r1
 8016370:	eba3 030c 	sub.w	r3, r3, ip
 8016374:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016378:	a807      	add	r0, sp, #28
 801637a:	f7fb fdc2 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 801637e:	b920      	cbnz	r0, 801638a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8016380:	6823      	ldr	r3, [r4, #0]
 8016382:	a907      	add	r1, sp, #28
 8016384:	4620      	mov	r0, r4
 8016386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016388:	4798      	blx	r3
 801638a:	3701      	adds	r7, #1
 801638c:	b2bf      	uxth	r7, r7
 801638e:	e7a9      	b.n	80162e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8016390:	f8d8 0000 	ldr.w	r0, [r8]
 8016394:	2101      	movs	r1, #1
 8016396:	6803      	ldr	r3, [r0, #0]
 8016398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801639c:	4798      	blx	r3
 801639e:	e772      	b.n	8016286 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80163a0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80163a4:	e7e8      	b.n	8016378 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80163a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a8:	4798      	blx	r3
 80163aa:	4b42      	ldr	r3, [pc, #264]	; (80164b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	f43f af29 	beq.w	8016206 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80163b4:	2300      	movs	r3, #0
 80163b6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80163ba:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80163be:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 80163c2:	9b02      	ldr	r3, [sp, #8]
 80163c4:	881b      	ldrh	r3, [r3, #0]
 80163c6:	429d      	cmp	r5, r3
 80163c8:	f67f af1d 	bls.w	8016206 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80163cc:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 80163d0:	2907      	cmp	r1, #7
 80163d2:	d815      	bhi.n	8016400 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80163d4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80163d8:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 80163dc:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80163e0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80163e4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80163e8:	1c4a      	adds	r2, r1, #1
 80163ea:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 80163ee:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80163f2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 80163f6:	f8a2 e002 	strh.w	lr, [r2, #2]
 80163fa:	f8a2 c004 	strh.w	ip, [r2, #4]
 80163fe:	80d7      	strh	r7, [r2, #6]
 8016400:	3301      	adds	r3, #1
 8016402:	b29b      	uxth	r3, r3
 8016404:	e7df      	b.n	80163c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8016406:	2b02      	cmp	r3, #2
 8016408:	f040 8135 	bne.w	8016676 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801640c:	4b2a      	ldr	r3, [pc, #168]	; (80164b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801640e:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	2b01      	cmp	r3, #1
 8016416:	f000 809c 	beq.w	8016552 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801641a:	9b02      	ldr	r3, [sp, #8]
 801641c:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8016420:	f8b3 b000 	ldrh.w	fp, [r3]
 8016424:	f10b 0b01 	add.w	fp, fp, #1
 8016428:	fa1f fb8b 	uxth.w	fp, fp
 801642c:	2a00      	cmp	r2, #0
 801642e:	d0bc      	beq.n	80163aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016430:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8016434:	4659      	mov	r1, fp
 8016436:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801643a:	f04f 0800 	mov.w	r8, #0
 801643e:	441d      	add	r5, r3
 8016440:	b22d      	sxth	r5, r5
 8016442:	b28b      	uxth	r3, r1
 8016444:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8016448:	429a      	cmp	r2, r3
 801644a:	f240 80c0 	bls.w	80165ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801644e:	4427      	add	r7, r4
 8016450:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8016454:	4608      	mov	r0, r1
 8016456:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801645a:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801645e:	4563      	cmp	r3, ip
 8016460:	f340 80a2 	ble.w	80165a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8016464:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8016468:	4465      	add	r5, ip
 801646a:	b22d      	sxth	r5, r5
 801646c:	429d      	cmp	r5, r3
 801646e:	bfa8      	it	ge
 8016470:	461d      	movge	r5, r3
 8016472:	3101      	adds	r1, #1
 8016474:	4680      	mov	r8, r0
 8016476:	e7e4      	b.n	8016442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8016478:	d10b      	bne.n	8016492 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801647a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801647e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8016482:	458c      	cmp	ip, r1
 8016484:	bfb4      	ite	lt
 8016486:	469c      	movlt	ip, r3
 8016488:	46bc      	movge	ip, r7
 801648a:	4572      	cmp	r2, lr
 801648c:	bfb8      	it	lt
 801648e:	4672      	movlt	r2, lr
 8016490:	e087      	b.n	80165a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016492:	428a      	cmp	r2, r1
 8016494:	46bc      	mov	ip, r7
 8016496:	bfb8      	it	lt
 8016498:	460a      	movlt	r2, r1
 801649a:	e082      	b.n	80165a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801649c:	2400c88c 	.word	0x2400c88c
 80164a0:	2400c898 	.word	0x2400c898
 80164a4:	24000084 	.word	0x24000084
 80164a8:	2400c854 	.word	0x2400c854
 80164ac:	2400c84a 	.word	0x2400c84a
 80164b0:	2400c848 	.word	0x2400c848
 80164b4:	2400c852 	.word	0x2400c852
 80164b8:	2400c84c 	.word	0x2400c84c
 80164bc:	1961      	adds	r1, r4, r5
 80164be:	ab07      	add	r3, sp, #28
 80164c0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80164c4:	6849      	ldr	r1, [r1, #4]
 80164c6:	c303      	stmia	r3!, {r0, r1}
 80164c8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80164cc:	a807      	add	r0, sp, #28
 80164ce:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80164d2:	2b13      	cmp	r3, #19
 80164d4:	440b      	add	r3, r1
 80164d6:	bfd8      	it	le
 80164d8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80164dc:	1a9b      	subs	r3, r3, r2
 80164de:	f8ad 201c 	strh.w	r2, [sp, #28]
 80164e2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80164e6:	f7ff f8d9 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80164ea:	a807      	add	r0, sp, #28
 80164ec:	f7fb fd09 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 80164f0:	bb78      	cbnz	r0, 8016552 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80164f2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80164f6:	4425      	add	r5, r4
 80164f8:	f8d8 0000 	ldr.w	r0, [r8]
 80164fc:	f1bc 0f14 	cmp.w	ip, #20
 8016500:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016504:	f8d0 e000 	ldr.w	lr, [r0]
 8016508:	bfa8      	it	ge
 801650a:	f04f 0c14 	movge.w	ip, #20
 801650e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016512:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016516:	fa1f fc8c 	uxth.w	ip, ip
 801651a:	f8cd c000 	str.w	ip, [sp]
 801651e:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8016522:	47d0      	blx	sl
 8016524:	4682      	mov	sl, r0
 8016526:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801652a:	a807      	add	r0, sp, #28
 801652c:	f7ff f89c 	bl	8015668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016530:	6823      	ldr	r3, [r4, #0]
 8016532:	4620      	mov	r0, r4
 8016534:	a907      	add	r1, sp, #28
 8016536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016538:	4798      	blx	r3
 801653a:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801653e:	eba0 000a 	sub.w	r0, r0, sl
 8016542:	b200      	sxth	r0, r0
 8016544:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8016548:	b918      	cbnz	r0, 8016552 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801654a:	b2b9      	uxth	r1, r7
 801654c:	4648      	mov	r0, r9
 801654e:	f7ff faa5 	bl	8015a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016552:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8016556:	f1bb 0f00 	cmp.w	fp, #0
 801655a:	f43f af26 	beq.w	80163aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801655e:	9b02      	ldr	r3, [sp, #8]
 8016560:	2700      	movs	r7, #0
 8016562:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8016566:	881b      	ldrh	r3, [r3, #0]
 8016568:	3301      	adds	r3, #1
 801656a:	b29b      	uxth	r3, r3
 801656c:	b299      	uxth	r1, r3
 801656e:	00fd      	lsls	r5, r7, #3
 8016570:	458b      	cmp	fp, r1
 8016572:	d9a3      	bls.n	80164bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8016574:	4425      	add	r5, r4
 8016576:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801657a:	469c      	mov	ip, r3
 801657c:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8016580:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8016584:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8016588:	4408      	add	r0, r1
 801658a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801658e:	4471      	add	r1, lr
 8016590:	b200      	sxth	r0, r0
 8016592:	b209      	sxth	r1, r1
 8016594:	4288      	cmp	r0, r1
 8016596:	f6bf af6f 	bge.w	8016478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801659a:	4586      	cmp	lr, r0
 801659c:	4672      	mov	r2, lr
 801659e:	bfb8      	it	lt
 80165a0:	4602      	movlt	r2, r0
 80165a2:	3301      	adds	r3, #1
 80165a4:	4667      	mov	r7, ip
 80165a6:	e7e1      	b.n	801656c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 80165a8:	d10c      	bne.n	80165c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 80165aa:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 80165ae:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 80165b2:	4287      	cmp	r7, r0
 80165b4:	bfb4      	ite	lt
 80165b6:	4608      	movlt	r0, r1
 80165b8:	4640      	movge	r0, r8
 80165ba:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 80165be:	443b      	add	r3, r7
 80165c0:	b21b      	sxth	r3, r3
 80165c2:	e753      	b.n	801646c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 80165c4:	4565      	cmp	r5, ip
 80165c6:	4640      	mov	r0, r8
 80165c8:	bfa8      	it	ge
 80165ca:	4665      	movge	r5, ip
 80165cc:	e751      	b.n	8016472 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 80165ce:	eb09 0007 	add.w	r0, r9, r7
 80165d2:	4427      	add	r7, r4
 80165d4:	9203      	str	r2, [sp, #12]
 80165d6:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 80165da:	f1ba 0f13 	cmp.w	sl, #19
 80165de:	bfde      	ittt	le
 80165e0:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 80165e4:	4455      	addle	r5, sl
 80165e6:	b22d      	sxthle	r5, r5
 80165e8:	f7fb fc8b 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 80165ec:	9a03      	ldr	r2, [sp, #12]
 80165ee:	2800      	cmp	r0, #0
 80165f0:	f47f af1c 	bne.w	801642c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 80165f4:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 80165f8:	fa1f fa8a 	uxth.w	sl, sl
 80165fc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016600:	1aad      	subs	r5, r5, r2
 8016602:	4829      	ldr	r0, [pc, #164]	; (80166a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8016604:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8016608:	2d14      	cmp	r5, #20
 801660a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801660e:	6800      	ldr	r0, [r0, #0]
 8016610:	bfa8      	it	ge
 8016612:	2514      	movge	r5, #20
 8016614:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016618:	f8ad 201e 	strh.w	r2, [sp, #30]
 801661c:	b289      	uxth	r1, r1
 801661e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016622:	b2ad      	uxth	r5, r5
 8016624:	f8d0 c000 	ldr.w	ip, [r0]
 8016628:	b292      	uxth	r2, r2
 801662a:	4555      	cmp	r5, sl
 801662c:	bf94      	ite	ls
 801662e:	9500      	strls	r5, [sp, #0]
 8016630:	f8cd a000 	strhi.w	sl, [sp]
 8016634:	b29b      	uxth	r3, r3
 8016636:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801663a:	47a8      	blx	r5
 801663c:	6823      	ldr	r3, [r4, #0]
 801663e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016642:	a907      	add	r1, sp, #28
 8016644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016646:	4620      	mov	r0, r4
 8016648:	4798      	blx	r3
 801664a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801664e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016652:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8016656:	1a5b      	subs	r3, r3, r1
 8016658:	440a      	add	r2, r1
 801665a:	b21b      	sxth	r3, r3
 801665c:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8016660:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8016664:	2b00      	cmp	r3, #0
 8016666:	f47f aed8 	bne.w	801641a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801666a:	fa1f f188 	uxth.w	r1, r8
 801666e:	4648      	mov	r0, r9
 8016670:	f7ff fa14 	bl	8015a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016674:	e6d1      	b.n	801641a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016676:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801667a:	42ab      	cmp	r3, r5
 801667c:	f67f ae95 	bls.w	80163aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016680:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016684:	ab07      	add	r3, sp, #28
 8016686:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801668a:	6851      	ldr	r1, [r2, #4]
 801668c:	c303      	stmia	r3!, {r0, r1}
 801668e:	a807      	add	r0, sp, #28
 8016690:	f7fb fc37 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016694:	b920      	cbnz	r0, 80166a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8016696:	6823      	ldr	r3, [r4, #0]
 8016698:	a907      	add	r1, sp, #28
 801669a:	4620      	mov	r0, r4
 801669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801669e:	4798      	blx	r3
 80166a0:	3501      	adds	r5, #1
 80166a2:	b2ad      	uxth	r5, r5
 80166a4:	e7e7      	b.n	8016676 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80166a6:	bf00      	nop
 80166a8:	2400c854 	.word	0x2400c854

080166ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80166ac:	4b03      	ldr	r3, [pc, #12]	; (80166bc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80166ae:	2200      	movs	r2, #0
 80166b0:	801a      	strh	r2, [r3, #0]
 80166b2:	805a      	strh	r2, [r3, #2]
 80166b4:	809a      	strh	r2, [r3, #4]
 80166b6:	80da      	strh	r2, [r3, #6]
 80166b8:	4770      	bx	lr
 80166ba:	bf00      	nop
 80166bc:	2400c898 	.word	0x2400c898

080166c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80166c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c4:	b09d      	sub	sp, #116	; 0x74
 80166c6:	4606      	mov	r6, r0
 80166c8:	4614      	mov	r4, r2
 80166ca:	468a      	mov	sl, r1
 80166cc:	a803      	add	r0, sp, #12
 80166ce:	461d      	mov	r5, r3
 80166d0:	f000 fd58 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 80166d4:	6833      	ldr	r3, [r6, #0]
 80166d6:	4630      	mov	r0, r6
 80166d8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80166dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166de:	4798      	blx	r3
 80166e0:	6833      	ldr	r3, [r6, #0]
 80166e2:	4607      	mov	r7, r0
 80166e4:	4630      	mov	r0, r6
 80166e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80166e8:	4798      	blx	r3
 80166ea:	462a      	mov	r2, r5
 80166ec:	2500      	movs	r5, #0
 80166ee:	4621      	mov	r1, r4
 80166f0:	9000      	str	r0, [sp, #0]
 80166f2:	463b      	mov	r3, r7
 80166f4:	462c      	mov	r4, r5
 80166f6:	46a9      	mov	r9, r5
 80166f8:	46a8      	mov	r8, r5
 80166fa:	a803      	add	r0, sp, #12
 80166fc:	f000 fd9d 	bl	801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016700:	2300      	movs	r3, #0
 8016702:	9302      	str	r3, [sp, #8]
 8016704:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016708:	429c      	cmp	r4, r3
 801670a:	d002      	beq.n	8016712 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801670c:	455c      	cmp	r4, fp
 801670e:	bf18      	it	ne
 8016710:	4625      	movne	r5, r4
 8016712:	ab02      	add	r3, sp, #8
 8016714:	4632      	mov	r2, r6
 8016716:	4651      	mov	r1, sl
 8016718:	a803      	add	r0, sp, #12
 801671a:	f001 f893 	bl	8017844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801671e:	4604      	mov	r4, r0
 8016720:	b108      	cbz	r0, 8016726 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016722:	280a      	cmp	r0, #10
 8016724:	d10a      	bne.n	801673c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8016726:	45c1      	cmp	r9, r8
 8016728:	bf38      	it	cc
 801672a:	46c1      	movcc	r9, r8
 801672c:	f04f 0800 	mov.w	r8, #0
 8016730:	2c00      	cmp	r4, #0
 8016732:	d1e5      	bne.n	8016700 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016734:	4648      	mov	r0, r9
 8016736:	b01d      	add	sp, #116	; 0x74
 8016738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801673c:	9a02      	ldr	r2, [sp, #8]
 801673e:	2a00      	cmp	r2, #0
 8016740:	d0de      	beq.n	8016700 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016742:	7b57      	ldrb	r7, [r2, #13]
 8016744:	4629      	mov	r1, r5
 8016746:	6833      	ldr	r3, [r6, #0]
 8016748:	007f      	lsls	r7, r7, #1
 801674a:	8894      	ldrh	r4, [r2, #4]
 801674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801674e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8016752:	7a97      	ldrb	r7, [r2, #10]
 8016754:	4307      	orrs	r7, r0
 8016756:	4630      	mov	r0, r6
 8016758:	4798      	blx	r3
 801675a:	4438      	add	r0, r7
 801675c:	4480      	add	r8, r0
 801675e:	fa1f f888 	uxth.w	r8, r8
 8016762:	e7e5      	b.n	8016730 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016764 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016764:	b508      	push	{r3, lr}
 8016766:	6803      	ldr	r3, [r0, #0]
 8016768:	68db      	ldr	r3, [r3, #12]
 801676a:	4798      	blx	r3
 801676c:	b128      	cbz	r0, 801677a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801676e:	7b43      	ldrb	r3, [r0, #13]
 8016770:	7a80      	ldrb	r0, [r0, #10]
 8016772:	005b      	lsls	r3, r3, #1
 8016774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016778:	4318      	orrs	r0, r3
 801677a:	bd08      	pop	{r3, pc}

0801677c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801677c:	b40e      	push	{r1, r2, r3}
 801677e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016780:	b09e      	sub	sp, #120	; 0x78
 8016782:	4605      	mov	r5, r0
 8016784:	ab23      	add	r3, sp, #140	; 0x8c
 8016786:	a805      	add	r0, sp, #20
 8016788:	f853 4b04 	ldr.w	r4, [r3], #4
 801678c:	9303      	str	r3, [sp, #12]
 801678e:	f000 fcf9 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 8016792:	682b      	ldr	r3, [r5, #0]
 8016794:	4628      	mov	r0, r5
 8016796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016798:	4798      	blx	r3
 801679a:	682b      	ldr	r3, [r5, #0]
 801679c:	4606      	mov	r6, r0
 801679e:	4628      	mov	r0, r5
 80167a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80167a2:	4798      	blx	r3
 80167a4:	4633      	mov	r3, r6
 80167a6:	4621      	mov	r1, r4
 80167a8:	ae1e      	add	r6, sp, #120	; 0x78
 80167aa:	2400      	movs	r4, #0
 80167ac:	9000      	str	r0, [sp, #0]
 80167ae:	9a03      	ldr	r2, [sp, #12]
 80167b0:	a805      	add	r0, sp, #20
 80167b2:	f000 fd42 	bl	801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80167b6:	f846 4d68 	str.w	r4, [r6, #-104]!
 80167ba:	462a      	mov	r2, r5
 80167bc:	4633      	mov	r3, r6
 80167be:	4621      	mov	r1, r4
 80167c0:	a805      	add	r0, sp, #20
 80167c2:	f001 f83f 	bl	8017844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80167c6:	b300      	cbz	r0, 801680a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80167c8:	280a      	cmp	r0, #10
 80167ca:	d01a      	beq.n	8016802 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80167cc:	9f04      	ldr	r7, [sp, #16]
 80167ce:	b1c7      	cbz	r7, 8016802 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80167d0:	7b78      	ldrb	r0, [r7, #13]
 80167d2:	7a3b      	ldrb	r3, [r7, #8]
 80167d4:	00c1      	lsls	r1, r0, #3
 80167d6:	88aa      	ldrh	r2, [r5, #4]
 80167d8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80167dc:	4319      	orrs	r1, r3
 80167de:	0643      	lsls	r3, r0, #25
 80167e0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80167e4:	bf48      	it	mi
 80167e6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80167ea:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80167ee:	bf48      	it	mi
 80167f0:	b219      	sxthmi	r1, r3
 80167f2:	79fb      	ldrb	r3, [r7, #7]
 80167f4:	4303      	orrs	r3, r0
 80167f6:	4413      	add	r3, r2
 80167f8:	1a5b      	subs	r3, r3, r1
 80167fa:	b29b      	uxth	r3, r3
 80167fc:	42a3      	cmp	r3, r4
 80167fe:	bfc8      	it	gt
 8016800:	b21c      	sxthgt	r4, r3
 8016802:	4633      	mov	r3, r6
 8016804:	462a      	mov	r2, r5
 8016806:	2100      	movs	r1, #0
 8016808:	e7da      	b.n	80167c0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801680a:	b2a0      	uxth	r0, r4
 801680c:	b01e      	add	sp, #120	; 0x78
 801680e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016812:	b003      	add	sp, #12
 8016814:	4770      	bx	lr

08016816 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016816:	b40e      	push	{r1, r2, r3}
 8016818:	b570      	push	{r4, r5, r6, lr}
 801681a:	b09d      	sub	sp, #116	; 0x74
 801681c:	4604      	mov	r4, r0
 801681e:	ab21      	add	r3, sp, #132	; 0x84
 8016820:	a803      	add	r0, sp, #12
 8016822:	f853 5b04 	ldr.w	r5, [r3], #4
 8016826:	9302      	str	r3, [sp, #8]
 8016828:	f000 fcac 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 801682c:	6823      	ldr	r3, [r4, #0]
 801682e:	4620      	mov	r0, r4
 8016830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016832:	4798      	blx	r3
 8016834:	6823      	ldr	r3, [r4, #0]
 8016836:	4606      	mov	r6, r0
 8016838:	4620      	mov	r0, r4
 801683a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801683c:	2401      	movs	r4, #1
 801683e:	4798      	blx	r3
 8016840:	4633      	mov	r3, r6
 8016842:	9000      	str	r0, [sp, #0]
 8016844:	4629      	mov	r1, r5
 8016846:	9a02      	ldr	r2, [sp, #8]
 8016848:	a803      	add	r0, sp, #12
 801684a:	f000 fcf6 	bl	801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801684e:	a803      	add	r0, sp, #12
 8016850:	f001 f8c4 	bl	80179dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016854:	b2a3      	uxth	r3, r4
 8016856:	b138      	cbz	r0, 8016868 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8016858:	280a      	cmp	r0, #10
 801685a:	a803      	add	r0, sp, #12
 801685c:	bf04      	itt	eq
 801685e:	3301      	addeq	r3, #1
 8016860:	b21c      	sxtheq	r4, r3
 8016862:	f001 f8bb 	bl	80179dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016866:	e7f5      	b.n	8016854 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016868:	4618      	mov	r0, r3
 801686a:	b01d      	add	sp, #116	; 0x74
 801686c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016870:	b003      	add	sp, #12
 8016872:	4770      	bx	lr

08016874 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016874:	b40e      	push	{r1, r2, r3}
 8016876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016878:	b09e      	sub	sp, #120	; 0x78
 801687a:	4604      	mov	r4, r0
 801687c:	ab23      	add	r3, sp, #140	; 0x8c
 801687e:	a805      	add	r0, sp, #20
 8016880:	f853 5b04 	ldr.w	r5, [r3], #4
 8016884:	9303      	str	r3, [sp, #12]
 8016886:	f000 fc7d 	bl	8017184 <_ZN8touchgfx12TextProviderC1Ev>
 801688a:	6823      	ldr	r3, [r4, #0]
 801688c:	4620      	mov	r0, r4
 801688e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016890:	4798      	blx	r3
 8016892:	6823      	ldr	r3, [r4, #0]
 8016894:	4606      	mov	r6, r0
 8016896:	4620      	mov	r0, r4
 8016898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801689a:	4798      	blx	r3
 801689c:	4633      	mov	r3, r6
 801689e:	4629      	mov	r1, r5
 80168a0:	9000      	str	r0, [sp, #0]
 80168a2:	9a03      	ldr	r2, [sp, #12]
 80168a4:	a805      	add	r0, sp, #20
 80168a6:	f000 fcc8 	bl	801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80168aa:	ad1e      	add	r5, sp, #120	; 0x78
 80168ac:	2100      	movs	r1, #0
 80168ae:	26ff      	movs	r6, #255	; 0xff
 80168b0:	4622      	mov	r2, r4
 80168b2:	a805      	add	r0, sp, #20
 80168b4:	f845 1d68 	str.w	r1, [r5, #-104]!
 80168b8:	462b      	mov	r3, r5
 80168ba:	f000 ffc3 	bl	8017844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80168be:	b1d8      	cbz	r0, 80168f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80168c0:	280a      	cmp	r0, #10
 80168c2:	d012      	beq.n	80168ea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80168c4:	9804      	ldr	r0, [sp, #16]
 80168c6:	b180      	cbz	r0, 80168ea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80168c8:	7b47      	ldrb	r7, [r0, #13]
 80168ca:	7922      	ldrb	r2, [r4, #4]
 80168cc:	00fb      	lsls	r3, r7, #3
 80168ce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80168d2:	7a03      	ldrb	r3, [r0, #8]
 80168d4:	430b      	orrs	r3, r1
 80168d6:	0679      	lsls	r1, r7, #25
 80168d8:	bf44      	itt	mi
 80168da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80168de:	b21b      	sxthmi	r3, r3
 80168e0:	1ad3      	subs	r3, r2, r3
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	429e      	cmp	r6, r3
 80168e6:	bf28      	it	cs
 80168e8:	461e      	movcs	r6, r3
 80168ea:	462b      	mov	r3, r5
 80168ec:	4622      	mov	r2, r4
 80168ee:	2100      	movs	r1, #0
 80168f0:	a805      	add	r0, sp, #20
 80168f2:	f000 ffa7 	bl	8017844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80168f6:	e7e2      	b.n	80168be <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80168f8:	4630      	mov	r0, r6
 80168fa:	b01e      	add	sp, #120	; 0x78
 80168fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016900:	b003      	add	sp, #12
 8016902:	4770      	bx	lr

08016904 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016904:	b513      	push	{r0, r1, r4, lr}
 8016906:	6803      	ldr	r3, [r0, #0]
 8016908:	2400      	movs	r4, #0
 801690a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801690e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016912:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016916:	4669      	mov	r1, sp
 8016918:	691b      	ldr	r3, [r3, #16]
 801691a:	9400      	str	r4, [sp, #0]
 801691c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016920:	4798      	blx	r3
 8016922:	b002      	add	sp, #8
 8016924:	bd10      	pop	{r4, pc}

08016926 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8016926:	b538      	push	{r3, r4, r5, lr}
 8016928:	680b      	ldr	r3, [r1, #0]
 801692a:	460c      	mov	r4, r1
 801692c:	4605      	mov	r5, r0
 801692e:	68db      	ldr	r3, [r3, #12]
 8016930:	4798      	blx	r3
 8016932:	6823      	ldr	r3, [r4, #0]
 8016934:	4620      	mov	r0, r4
 8016936:	4629      	mov	r1, r5
 8016938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801693a:	4798      	blx	r3
 801693c:	4628      	mov	r0, r5
 801693e:	bd38      	pop	{r3, r4, r5, pc}

08016940 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016940:	b410      	push	{r4}
 8016942:	880a      	ldrh	r2, [r1, #0]
 8016944:	8884      	ldrh	r4, [r0, #4]
 8016946:	4422      	add	r2, r4
 8016948:	800a      	strh	r2, [r1, #0]
 801694a:	884a      	ldrh	r2, [r1, #2]
 801694c:	88c4      	ldrh	r4, [r0, #6]
 801694e:	4422      	add	r2, r4
 8016950:	804a      	strh	r2, [r1, #2]
 8016952:	6940      	ldr	r0, [r0, #20]
 8016954:	b120      	cbz	r0, 8016960 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8016956:	6803      	ldr	r3, [r0, #0]
 8016958:	f85d 4b04 	ldr.w	r4, [sp], #4
 801695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801695e:	4718      	bx	r3
 8016960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016964:	4770      	bx	lr

08016966 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8016966:	b570      	push	{r4, r5, r6, lr}
 8016968:	8882      	ldrh	r2, [r0, #4]
 801696a:	460c      	mov	r4, r1
 801696c:	880b      	ldrh	r3, [r1, #0]
 801696e:	4605      	mov	r5, r0
 8016970:	4413      	add	r3, r2
 8016972:	800b      	strh	r3, [r1, #0]
 8016974:	884b      	ldrh	r3, [r1, #2]
 8016976:	88c2      	ldrh	r2, [r0, #6]
 8016978:	4413      	add	r3, r2
 801697a:	804b      	strh	r3, [r1, #2]
 801697c:	1d01      	adds	r1, r0, #4
 801697e:	4620      	mov	r0, r4
 8016980:	f7fb fa7c 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8016984:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016988:	2b00      	cmp	r3, #0
 801698a:	dd0b      	ble.n	80169a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801698c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016990:	2b00      	cmp	r3, #0
 8016992:	dd07      	ble.n	80169a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016994:	6968      	ldr	r0, [r5, #20]
 8016996:	b128      	cbz	r0, 80169a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016998:	6803      	ldr	r3, [r0, #0]
 801699a:	4621      	mov	r1, r4
 801699c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801699e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169a2:	4718      	bx	r3
 80169a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080169a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80169a8:	b570      	push	{r4, r5, r6, lr}
 80169aa:	8882      	ldrh	r2, [r0, #4]
 80169ac:	460c      	mov	r4, r1
 80169ae:	880b      	ldrh	r3, [r1, #0]
 80169b0:	4605      	mov	r5, r0
 80169b2:	4413      	add	r3, r2
 80169b4:	800b      	strh	r3, [r1, #0]
 80169b6:	884b      	ldrh	r3, [r1, #2]
 80169b8:	88c2      	ldrh	r2, [r0, #6]
 80169ba:	4413      	add	r3, r2
 80169bc:	804b      	strh	r3, [r1, #2]
 80169be:	1d01      	adds	r1, r0, #4
 80169c0:	4620      	mov	r0, r4
 80169c2:	f7fb fa5b 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 80169c6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	dd18      	ble.n	8016a00 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80169ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	dd14      	ble.n	8016a00 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80169d6:	6968      	ldr	r0, [r5, #20]
 80169d8:	b128      	cbz	r0, 80169e6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80169da:	6803      	ldr	r3, [r0, #0]
 80169dc:	4621      	mov	r1, r4
 80169de:	691b      	ldr	r3, [r3, #16]
 80169e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169e4:	4718      	bx	r3
 80169e6:	4b07      	ldr	r3, [pc, #28]	; (8016a04 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	3304      	adds	r3, #4
 80169ec:	429d      	cmp	r5, r3
 80169ee:	d107      	bne.n	8016a00 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80169f0:	f7fe fff0 	bl	80159d4 <_ZN8touchgfx11Application11getInstanceEv>
 80169f4:	6821      	ldr	r1, [r4, #0]
 80169f6:	6862      	ldr	r2, [r4, #4]
 80169f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169fc:	f7ff b862 	b.w	8015ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016a00:	bd70      	pop	{r4, r5, r6, pc}
 8016a02:	bf00      	nop
 8016a04:	2400c890 	.word	0x2400c890

08016a08 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016a08:	b570      	push	{r4, r5, r6, lr}
 8016a0a:	4604      	mov	r4, r0
 8016a0c:	4616      	mov	r6, r2
 8016a0e:	460d      	mov	r5, r1
 8016a10:	b901      	cbnz	r1, 8016a14 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8016a12:	b192      	cbz	r2, 8016a3a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8016a14:	6823      	ldr	r3, [r4, #0]
 8016a16:	4620      	mov	r0, r4
 8016a18:	699b      	ldr	r3, [r3, #24]
 8016a1a:	4798      	blx	r3
 8016a1c:	88e2      	ldrh	r2, [r4, #6]
 8016a1e:	88a1      	ldrh	r1, [r4, #4]
 8016a20:	4620      	mov	r0, r4
 8016a22:	4432      	add	r2, r6
 8016a24:	4429      	add	r1, r5
 8016a26:	b212      	sxth	r2, r2
 8016a28:	b209      	sxth	r1, r1
 8016a2a:	f7fb fb2c 	bl	8012086 <_ZN8touchgfx8Drawable5setXYEss>
 8016a2e:	6823      	ldr	r3, [r4, #0]
 8016a30:	4620      	mov	r0, r4
 8016a32:	699b      	ldr	r3, [r3, #24]
 8016a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a38:	4718      	bx	r3
 8016a3a:	bd70      	pop	{r4, r5, r6, pc}

08016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016a3c:	b510      	push	{r4, lr}
 8016a3e:	2300      	movs	r3, #0
 8016a40:	4604      	mov	r4, r0
 8016a42:	4608      	mov	r0, r1
 8016a44:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016a48:	8023      	strh	r3, [r4, #0]
 8016a4a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016a4e:	8063      	strh	r3, [r4, #2]
 8016a50:	6803      	ldr	r3, [r0, #0]
 8016a52:	80a1      	strh	r1, [r4, #4]
 8016a54:	4621      	mov	r1, r4
 8016a56:	80e2      	strh	r2, [r4, #6]
 8016a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a5a:	4798      	blx	r3
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	bd10      	pop	{r4, pc}

08016a60 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8016a60:	b530      	push	{r4, r5, lr}
 8016a62:	8083      	strh	r3, [r0, #4]
 8016a64:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016a68:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8016a6c:	7183      	strb	r3, [r0, #6]
 8016a6e:	79c3      	ldrb	r3, [r0, #7]
 8016a70:	6101      	str	r1, [r0, #16]
 8016a72:	f365 0306 	bfi	r3, r5, #0, #7
 8016a76:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8016a7a:	8282      	strh	r2, [r0, #20]
 8016a7c:	f365 13c7 	bfi	r3, r5, #7, #1
 8016a80:	71c3      	strb	r3, [r0, #7]
 8016a82:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8016a86:	7203      	strb	r3, [r0, #8]
 8016a88:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016a8c:	7243      	strb	r3, [r0, #9]
 8016a8e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016a92:	8143      	strh	r3, [r0, #10]
 8016a94:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8016a98:	8183      	strh	r3, [r0, #12]
 8016a9a:	4b01      	ldr	r3, [pc, #4]	; (8016aa0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8016a9c:	6003      	str	r3, [r0, #0]
 8016a9e:	bd30      	pop	{r4, r5, pc}
 8016aa0:	08023c34 	.word	0x08023c34

08016aa4 <_ZNK8touchgfx9ConstFont4findEt>:
 8016aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aa6:	6904      	ldr	r4, [r0, #16]
 8016aa8:	b3bc      	cbz	r4, 8016b1a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016aaa:	88a3      	ldrh	r3, [r4, #4]
 8016aac:	8a82      	ldrh	r2, [r0, #20]
 8016aae:	1acb      	subs	r3, r1, r3
 8016ab0:	f102 32ff 	add.w	r2, r2, #4294967295
 8016ab4:	d431      	bmi.n	8016b1a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016ab6:	4293      	cmp	r3, r2
 8016ab8:	dd0c      	ble.n	8016ad4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016aba:	230e      	movs	r3, #14
 8016abc:	fb03 4302 	mla	r3, r3, r2, r4
 8016ac0:	889b      	ldrh	r3, [r3, #4]
 8016ac2:	1a5b      	subs	r3, r3, r1
 8016ac4:	1ad3      	subs	r3, r2, r3
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	db27      	blt.n	8016b1a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	bfbc      	itt	lt
 8016ace:	2302      	movlt	r3, #2
 8016ad0:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016ad4:	2500      	movs	r5, #0
 8016ad6:	260e      	movs	r6, #14
 8016ad8:	4295      	cmp	r5, r2
 8016ada:	dc1e      	bgt.n	8016b1a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016adc:	fb06 4003 	mla	r0, r6, r3, r4
 8016ae0:	8887      	ldrh	r7, [r0, #4]
 8016ae2:	42b9      	cmp	r1, r7
 8016ae4:	d01a      	beq.n	8016b1c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8016ae6:	d20d      	bcs.n	8016b04 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016ae8:	1e5a      	subs	r2, r3, #1
 8016aea:	4295      	cmp	r5, r2
 8016aec:	dc15      	bgt.n	8016b1a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016aee:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016af2:	1a5b      	subs	r3, r3, r1
 8016af4:	1ad3      	subs	r3, r2, r3
 8016af6:	429a      	cmp	r2, r3
 8016af8:	db0f      	blt.n	8016b1a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016afa:	429d      	cmp	r5, r3
 8016afc:	ddec      	ble.n	8016ad8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016afe:	1953      	adds	r3, r2, r5
 8016b00:	105b      	asrs	r3, r3, #1
 8016b02:	e7e9      	b.n	8016ad8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016b04:	1c5d      	adds	r5, r3, #1
 8016b06:	42aa      	cmp	r2, r5
 8016b08:	db07      	blt.n	8016b1a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b0a:	8a43      	ldrh	r3, [r0, #18]
 8016b0c:	1acb      	subs	r3, r1, r3
 8016b0e:	442b      	add	r3, r5
 8016b10:	429d      	cmp	r5, r3
 8016b12:	dc02      	bgt.n	8016b1a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b14:	429a      	cmp	r2, r3
 8016b16:	dadf      	bge.n	8016ad8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016b18:	e7f1      	b.n	8016afe <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8016b1a:	2000      	movs	r0, #0
 8016b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b1e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b20:	4604      	mov	r4, r0
 8016b22:	4617      	mov	r7, r2
 8016b24:	461e      	mov	r6, r3
 8016b26:	b911      	cbnz	r1, 8016b2e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016b28:	2500      	movs	r5, #0
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b2e:	290a      	cmp	r1, #10
 8016b30:	d0fa      	beq.n	8016b28 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016b32:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016b36:	4291      	cmp	r1, r2
 8016b38:	d0f6      	beq.n	8016b28 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016b3a:	f242 020b 	movw	r2, #8203	; 0x200b
 8016b3e:	4291      	cmp	r1, r2
 8016b40:	d0f2      	beq.n	8016b28 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016b42:	f7ff ffaf 	bl	8016aa4 <_ZNK8touchgfx9ConstFont4findEt>
 8016b46:	4605      	mov	r5, r0
 8016b48:	b950      	cbnz	r0, 8016b60 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016b4a:	6823      	ldr	r3, [r4, #0]
 8016b4c:	4620      	mov	r0, r4
 8016b4e:	691b      	ldr	r3, [r3, #16]
 8016b50:	4798      	blx	r3
 8016b52:	4601      	mov	r1, r0
 8016b54:	4620      	mov	r0, r4
 8016b56:	f7ff ffa5 	bl	8016aa4 <_ZNK8touchgfx9ConstFont4findEt>
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	2800      	cmp	r0, #0
 8016b5e:	d0e3      	beq.n	8016b28 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016b60:	6823      	ldr	r3, [r4, #0]
 8016b62:	4629      	mov	r1, r5
 8016b64:	4620      	mov	r0, r4
 8016b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016b68:	4798      	blx	r3
 8016b6a:	6038      	str	r0, [r7, #0]
 8016b6c:	6823      	ldr	r3, [r4, #0]
 8016b6e:	4620      	mov	r0, r4
 8016b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b72:	4798      	blx	r3
 8016b74:	7030      	strb	r0, [r6, #0]
 8016b76:	e7d8      	b.n	8016b2a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016b78 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016b78:	2002      	movs	r0, #2
 8016b7a:	4770      	bx	lr

08016b7c <_ZN8touchgfx6ScreenD1Ev>:
 8016b7c:	4770      	bx	lr

08016b7e <_ZN8touchgfx12GestureEventD1Ev>:
 8016b7e:	4770      	bx	lr

08016b80 <_ZN8touchgfx12GestureEventD0Ev>:
 8016b80:	b510      	push	{r4, lr}
 8016b82:	4604      	mov	r4, r0
 8016b84:	210c      	movs	r1, #12
 8016b86:	f009 fcb2 	bl	80204ee <_ZdlPvj>
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	bd10      	pop	{r4, pc}

08016b8e <_ZN8touchgfx6ScreenD0Ev>:
 8016b8e:	b510      	push	{r4, lr}
 8016b90:	4604      	mov	r4, r0
 8016b92:	213c      	movs	r1, #60	; 0x3c
 8016b94:	f009 fcab 	bl	80204ee <_ZdlPvj>
 8016b98:	4620      	mov	r0, r4
 8016b9a:	bd10      	pop	{r4, pc}

08016b9c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016b9c:	b530      	push	{r4, r5, lr}
 8016b9e:	460d      	mov	r5, r1
 8016ba0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016ba2:	b087      	sub	sp, #28
 8016ba4:	4604      	mov	r4, r0
 8016ba6:	b301      	cbz	r1, 8016bea <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016ba8:	a801      	add	r0, sp, #4
 8016baa:	f7ff ff47 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016bae:	892a      	ldrh	r2, [r5, #8]
 8016bb0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016bb4:	7928      	ldrb	r0, [r5, #4]
 8016bb6:	1ad2      	subs	r2, r2, r3
 8016bb8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016bba:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016bbe:	441a      	add	r2, r3
 8016bc0:	896b      	ldrh	r3, [r5, #10]
 8016bc2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016bc6:	f88d 0010 	strb.w	r0, [sp, #16]
 8016bca:	1b5b      	subs	r3, r3, r5
 8016bcc:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8016bce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016bd0:	442b      	add	r3, r5
 8016bd2:	4d07      	ldr	r5, [pc, #28]	; (8016bf0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016bd4:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016bd8:	a903      	add	r1, sp, #12
 8016bda:	9503      	str	r5, [sp, #12]
 8016bdc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016be0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016be4:	6803      	ldr	r3, [r0, #0]
 8016be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016be8:	4798      	blx	r3
 8016bea:	b007      	add	sp, #28
 8016bec:	bd30      	pop	{r4, r5, pc}
 8016bee:	bf00      	nop
 8016bf0:	08023c8c 	.word	0x08023c8c

08016bf4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016bfa:	b08a      	sub	sp, #40	; 0x28
 8016bfc:	4604      	mov	r4, r0
 8016bfe:	460d      	mov	r5, r1
 8016c00:	b113      	cbz	r3, 8016c08 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8016c02:	790b      	ldrb	r3, [r1, #4]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d044      	beq.n	8016c92 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016c08:	f104 0804 	add.w	r8, r4, #4
 8016c0c:	a803      	add	r0, sp, #12
 8016c0e:	4641      	mov	r1, r8
 8016c10:	f7ff ff14 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016c14:	792b      	ldrb	r3, [r5, #4]
 8016c16:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016c1a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016c1e:	b983      	cbnz	r3, 8016c42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016c20:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8016c24:	892a      	ldrh	r2, [r5, #8]
 8016c26:	88e9      	ldrh	r1, [r5, #6]
 8016c28:	4640      	mov	r0, r8
 8016c2a:	1b92      	subs	r2, r2, r6
 8016c2c:	9301      	str	r3, [sp, #4]
 8016c2e:	1bc9      	subs	r1, r1, r7
 8016c30:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8016c34:	b212      	sxth	r2, r2
 8016c36:	9300      	str	r3, [sp, #0]
 8016c38:	b209      	sxth	r1, r1
 8016c3a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016c3e:	f7fb f83b 	bl	8011cb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016c42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016c44:	b329      	cbz	r1, 8016c92 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016c46:	a805      	add	r0, sp, #20
 8016c48:	f7ff fef8 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016c4c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016c50:	792b      	ldrb	r3, [r5, #4]
 8016c52:	a907      	add	r1, sp, #28
 8016c54:	1abf      	subs	r7, r7, r2
 8016c56:	88ea      	ldrh	r2, [r5, #6]
 8016c58:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016c5a:	4417      	add	r7, r2
 8016c5c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8016c5e:	f88d 3020 	strb.w	r3, [sp, #32]
 8016c62:	4417      	add	r7, r2
 8016c64:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016c68:	1ab6      	subs	r6, r6, r2
 8016c6a:	892a      	ldrh	r2, [r5, #8]
 8016c6c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8016c70:	4416      	add	r6, r2
 8016c72:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016c74:	4416      	add	r6, r2
 8016c76:	4a08      	ldr	r2, [pc, #32]	; (8016c98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016c78:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8016c7c:	2600      	movs	r6, #0
 8016c7e:	9207      	str	r2, [sp, #28]
 8016c80:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8016c84:	6803      	ldr	r3, [r0, #0]
 8016c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c88:	4798      	blx	r3
 8016c8a:	792b      	ldrb	r3, [r5, #4]
 8016c8c:	b10b      	cbz	r3, 8016c92 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016c8e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8016c92:	b00a      	add	sp, #40	; 0x28
 8016c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c98:	08023724 	.word	0x08023724

08016c9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ca0:	460c      	mov	r4, r1
 8016ca2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016ca4:	b088      	sub	sp, #32
 8016ca6:	4605      	mov	r5, r0
 8016ca8:	2900      	cmp	r1, #0
 8016caa:	d06d      	beq.n	8016d88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016cac:	4668      	mov	r0, sp
 8016cae:	f7ff fec5 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016cb2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016cb4:	88e3      	ldrh	r3, [r4, #6]
 8016cb6:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016cba:	440b      	add	r3, r1
 8016cbc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016cc0:	b21b      	sxth	r3, r3
 8016cc2:	4543      	cmp	r3, r8
 8016cc4:	db31      	blt.n	8016d2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016cc6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016cca:	44c4      	add	ip, r8
 8016ccc:	fa0f fc8c 	sxth.w	ip, ip
 8016cd0:	4563      	cmp	r3, ip
 8016cd2:	da2a      	bge.n	8016d2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016cd4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8016cd6:	8926      	ldrh	r6, [r4, #8]
 8016cd8:	4416      	add	r6, r2
 8016cda:	b236      	sxth	r6, r6
 8016cdc:	42be      	cmp	r6, r7
 8016cde:	db24      	blt.n	8016d2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016ce0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016ce4:	4438      	add	r0, r7
 8016ce6:	b200      	sxth	r0, r0
 8016ce8:	4286      	cmp	r6, r0
 8016cea:	da1e      	bge.n	8016d2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016cec:	8963      	ldrh	r3, [r4, #10]
 8016cee:	4419      	add	r1, r3
 8016cf0:	b209      	sxth	r1, r1
 8016cf2:	4541      	cmp	r1, r8
 8016cf4:	db08      	blt.n	8016d08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016cf6:	4561      	cmp	r1, ip
 8016cf8:	da06      	bge.n	8016d08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016cfa:	89a3      	ldrh	r3, [r4, #12]
 8016cfc:	441a      	add	r2, r3
 8016cfe:	b212      	sxth	r2, r2
 8016d00:	42ba      	cmp	r2, r7
 8016d02:	db01      	blt.n	8016d08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016d04:	4282      	cmp	r2, r0
 8016d06:	db10      	blt.n	8016d2a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016d08:	4b21      	ldr	r3, [pc, #132]	; (8016d90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016d0a:	a904      	add	r1, sp, #16
 8016d0c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016d0e:	9304      	str	r3, [sp, #16]
 8016d10:	2302      	movs	r3, #2
 8016d12:	f88d 3014 	strb.w	r3, [sp, #20]
 8016d16:	2300      	movs	r3, #0
 8016d18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016d1c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016d20:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016d24:	6803      	ldr	r3, [r0, #0]
 8016d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d28:	4798      	blx	r3
 8016d2a:	1d29      	adds	r1, r5, #4
 8016d2c:	a802      	add	r0, sp, #8
 8016d2e:	f7ff fe85 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016d32:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016d36:	88e0      	ldrh	r0, [r4, #6]
 8016d38:	eba3 0808 	sub.w	r8, r3, r8
 8016d3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016d40:	7921      	ldrb	r1, [r4, #4]
 8016d42:	fa1f f888 	uxth.w	r8, r8
 8016d46:	1bdf      	subs	r7, r3, r7
 8016d48:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016d4c:	b2bb      	uxth	r3, r7
 8016d4e:	4440      	add	r0, r8
 8016d50:	8922      	ldrh	r2, [r4, #8]
 8016d52:	8967      	ldrh	r7, [r4, #10]
 8016d54:	4460      	add	r0, ip
 8016d56:	89a4      	ldrh	r4, [r4, #12]
 8016d58:	441a      	add	r2, r3
 8016d5a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8016d5c:	44b8      	add	r8, r7
 8016d5e:	4423      	add	r3, r4
 8016d60:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016d64:	4432      	add	r2, r6
 8016d66:	44e0      	add	r8, ip
 8016d68:	4433      	add	r3, r6
 8016d6a:	4c0a      	ldr	r4, [pc, #40]	; (8016d94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016d6c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016d6e:	f88d 1014 	strb.w	r1, [sp, #20]
 8016d72:	a904      	add	r1, sp, #16
 8016d74:	9404      	str	r4, [sp, #16]
 8016d76:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016d7a:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016d7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016d82:	6803      	ldr	r3, [r0, #0]
 8016d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d86:	4798      	blx	r3
 8016d88:	b008      	add	sp, #32
 8016d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d8e:	bf00      	nop
 8016d90:	08023724 	.word	0x08023724
 8016d94:	08023738 	.word	0x08023738

08016d98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8016d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d9a:	4604      	mov	r4, r0
 8016d9c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016da0:	3201      	adds	r2, #1
 8016da2:	d112      	bne.n	8016dca <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016da4:	2500      	movs	r5, #0
 8016da6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016daa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016dae:	6803      	ldr	r3, [r0, #0]
 8016db0:	9500      	str	r5, [sp, #0]
 8016db2:	466d      	mov	r5, sp
 8016db4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016db8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016dbc:	4629      	mov	r1, r5
 8016dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dc0:	4798      	blx	r3
 8016dc2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016dc6:	e884 0003 	stmia.w	r4, {r0, r1}
 8016dca:	4620      	mov	r0, r4
 8016dcc:	b003      	add	sp, #12
 8016dce:	bd30      	pop	{r4, r5, pc}

08016dd0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016dd0:	b513      	push	{r0, r1, r4, lr}
 8016dd2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016dd6:	4604      	mov	r4, r0
 8016dd8:	3301      	adds	r3, #1
 8016dda:	d109      	bne.n	8016df0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016ddc:	4601      	mov	r1, r0
 8016dde:	4668      	mov	r0, sp
 8016de0:	f7ff fe2c 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016de4:	f8bd 3000 	ldrh.w	r3, [sp]
 8016de8:	8423      	strh	r3, [r4, #32]
 8016dea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016dee:	8463      	strh	r3, [r4, #34]	; 0x22
 8016df0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016df4:	b002      	add	sp, #8
 8016df6:	bd10      	pop	{r4, pc}

08016df8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8016df8:	b513      	push	{r0, r1, r4, lr}
 8016dfa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8016dfe:	4604      	mov	r4, r0
 8016e00:	3301      	adds	r3, #1
 8016e02:	d109      	bne.n	8016e18 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016e04:	4601      	mov	r1, r0
 8016e06:	4668      	mov	r0, sp
 8016e08:	f7ff fe18 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016e0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8016e10:	8423      	strh	r3, [r4, #32]
 8016e12:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016e16:	8463      	strh	r3, [r4, #34]	; 0x22
 8016e18:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8016e1c:	b002      	add	sp, #8
 8016e1e:	bd10      	pop	{r4, pc}

08016e20 <_ZN8touchgfx6ScreenC1Ev>:
 8016e20:	b570      	push	{r4, r5, r6, lr}
 8016e22:	4b17      	ldr	r3, [pc, #92]	; (8016e80 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8016e24:	4605      	mov	r5, r0
 8016e26:	4a17      	ldr	r2, [pc, #92]	; (8016e84 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8016e28:	2101      	movs	r1, #1
 8016e2a:	f845 3b04 	str.w	r3, [r5], #4
 8016e2e:	2300      	movs	r3, #0
 8016e30:	6042      	str	r2, [r0, #4]
 8016e32:	4604      	mov	r4, r0
 8016e34:	8103      	strh	r3, [r0, #8]
 8016e36:	8143      	strh	r3, [r0, #10]
 8016e38:	8183      	strh	r3, [r0, #12]
 8016e3a:	81c3      	strh	r3, [r0, #14]
 8016e3c:	8203      	strh	r3, [r0, #16]
 8016e3e:	8243      	strh	r3, [r0, #18]
 8016e40:	8283      	strh	r3, [r0, #20]
 8016e42:	82c3      	strh	r3, [r0, #22]
 8016e44:	6203      	str	r3, [r0, #32]
 8016e46:	8483      	strh	r3, [r0, #36]	; 0x24
 8016e48:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016e4a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8016e4e:	6343      	str	r3, [r0, #52]	; 0x34
 8016e50:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8016e54:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8016e58:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016e5c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8016e60:	4b09      	ldr	r3, [pc, #36]	; (8016e88 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8016e62:	4628      	mov	r0, r5
 8016e64:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016e68:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8016e6a:	4a08      	ldr	r2, [pc, #32]	; (8016e8c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016e6c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016e70:	4798      	blx	r3
 8016e72:	6863      	ldr	r3, [r4, #4]
 8016e74:	4628      	mov	r0, r5
 8016e76:	4631      	mov	r1, r6
 8016e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e7a:	4798      	blx	r3
 8016e7c:	4620      	mov	r0, r4
 8016e7e:	bd70      	pop	{r4, r5, r6, pc}
 8016e80:	08023ca0 	.word	0x08023ca0
 8016e84:	08023694 	.word	0x08023694
 8016e88:	2400c84a 	.word	0x2400c84a
 8016e8c:	2400c848 	.word	0x2400c848

08016e90 <_ZN8touchgfx6Screen4drawEv>:
 8016e90:	4b09      	ldr	r3, [pc, #36]	; (8016eb8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8016e92:	b507      	push	{r0, r1, r2, lr}
 8016e94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e98:	2100      	movs	r1, #0
 8016e9a:	4b08      	ldr	r3, [pc, #32]	; (8016ebc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016e9c:	9100      	str	r1, [sp, #0]
 8016e9e:	4669      	mov	r1, sp
 8016ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ea4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016ea8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016eac:	6803      	ldr	r3, [r0, #0]
 8016eae:	689b      	ldr	r3, [r3, #8]
 8016eb0:	4798      	blx	r3
 8016eb2:	b003      	add	sp, #12
 8016eb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8016eb8:	2400c848 	.word	0x2400c848
 8016ebc:	2400c84a 	.word	0x2400c84a

08016ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8016ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016ec8:	b089      	sub	sp, #36	; 0x24
 8016eca:	4680      	mov	r8, r0
 8016ecc:	460c      	mov	r4, r1
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	4615      	mov	r5, r2
 8016ed2:	dd0e      	ble.n	8016ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016ed4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	dd0a      	ble.n	8016ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016edc:	4628      	mov	r0, r5
 8016ede:	f7ff ff5b 	bl	8016d98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016ee2:	4621      	mov	r1, r4
 8016ee4:	f7fc fdc4 	bl	8013a70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016ee8:	69eb      	ldr	r3, [r5, #28]
 8016eea:	b928      	cbnz	r0, 8016ef8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8016eec:	461d      	mov	r5, r3
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d1f4      	bne.n	8016edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8016ef2:	b009      	add	sp, #36	; 0x24
 8016ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef8:	ae04      	add	r6, sp, #16
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	f000 80b5 	beq.w	801706a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016f00:	682b      	ldr	r3, [r5, #0]
 8016f02:	4629      	mov	r1, r5
 8016f04:	a802      	add	r0, sp, #8
 8016f06:	68db      	ldr	r3, [r3, #12]
 8016f08:	4798      	blx	r3
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	f7ff ff60 	bl	8016dd0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016f10:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016f14:	4407      	add	r7, r0
 8016f16:	4628      	mov	r0, r5
 8016f18:	f7ff ff6e 	bl	8016df8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016f1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016f20:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016f24:	b23f      	sxth	r7, r7
 8016f26:	4418      	add	r0, r3
 8016f28:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016f2c:	4621      	mov	r1, r4
 8016f2e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016f32:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016f36:	4630      	mov	r0, r6
 8016f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f3c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016f40:	f7fa ff9c 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8016f44:	4628      	mov	r0, r5
 8016f46:	f7ff ff27 	bl	8016d98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016f4a:	ab06      	add	r3, sp, #24
 8016f4c:	4602      	mov	r2, r0
 8016f4e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016f52:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f56:	4611      	mov	r1, r2
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7fa ff8f 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8016f5e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016f62:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016f66:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8016f6a:	4299      	cmp	r1, r3
 8016f6c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016f70:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016f74:	d10b      	bne.n	8016f8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016f76:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016f7a:	4552      	cmp	r2, sl
 8016f7c:	d107      	bne.n	8016f8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016f7e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016f82:	455a      	cmp	r2, fp
 8016f84:	d103      	bne.n	8016f8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016f86:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016f8a:	454a      	cmp	r2, r9
 8016f8c:	d06d      	beq.n	801706a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016f8e:	f1bb 0f00 	cmp.w	fp, #0
 8016f92:	dd65      	ble.n	8017060 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016f94:	f1b9 0f00 	cmp.w	r9, #0
 8016f98:	dd62      	ble.n	8017060 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016f9a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016f9e:	fa1f f08a 	uxth.w	r0, sl
 8016fa2:	4552      	cmp	r2, sl
 8016fa4:	9000      	str	r0, [sp, #0]
 8016fa6:	da12      	bge.n	8016fce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8016fa8:	9301      	str	r3, [sp, #4]
 8016faa:	9b00      	ldr	r3, [sp, #0]
 8016fac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016fb0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016fb4:	1a9a      	subs	r2, r3, r2
 8016fb6:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016fba:	4631      	mov	r1, r6
 8016fbc:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016fc0:	4640      	mov	r0, r8
 8016fc2:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016fc6:	69ea      	ldr	r2, [r5, #28]
 8016fc8:	f7ff ff7a 	bl	8016ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016fcc:	9b01      	ldr	r3, [sp, #4]
 8016fce:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016fd2:	b29f      	uxth	r7, r3
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	da0d      	bge.n	8016ff4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8016fd8:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016fdc:	1aba      	subs	r2, r7, r2
 8016fde:	f8ad a012 	strh.w	sl, [sp, #18]
 8016fe2:	4631      	mov	r1, r6
 8016fe4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016fe8:	4640      	mov	r0, r8
 8016fea:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016fee:	69ea      	ldr	r2, [r5, #28]
 8016ff0:	f7ff ff66 	bl	8016ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016ff4:	8822      	ldrh	r2, [r4, #0]
 8016ff6:	445f      	add	r7, fp
 8016ff8:	88a3      	ldrh	r3, [r4, #4]
 8016ffa:	b2bf      	uxth	r7, r7
 8016ffc:	4413      	add	r3, r2
 8016ffe:	b23a      	sxth	r2, r7
 8017000:	b29b      	uxth	r3, r3
 8017002:	b219      	sxth	r1, r3
 8017004:	4291      	cmp	r1, r2
 8017006:	dd0d      	ble.n	8017024 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017008:	1bdb      	subs	r3, r3, r7
 801700a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801700e:	f8ad a012 	strh.w	sl, [sp, #18]
 8017012:	4631      	mov	r1, r6
 8017014:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017018:	4640      	mov	r0, r8
 801701a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801701e:	69ea      	ldr	r2, [r5, #28]
 8017020:	f7ff ff4e 	bl	8016ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017024:	88e2      	ldrh	r2, [r4, #6]
 8017026:	8863      	ldrh	r3, [r4, #2]
 8017028:	4413      	add	r3, r2
 801702a:	9a00      	ldr	r2, [sp, #0]
 801702c:	444a      	add	r2, r9
 801702e:	b29b      	uxth	r3, r3
 8017030:	fa1f f982 	uxth.w	r9, r2
 8017034:	b219      	sxth	r1, r3
 8017036:	fa0f f289 	sxth.w	r2, r9
 801703a:	428a      	cmp	r2, r1
 801703c:	da15      	bge.n	801706a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801703e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017042:	eba3 0309 	sub.w	r3, r3, r9
 8017046:	f9b4 0000 	ldrsh.w	r0, [r4]
 801704a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801704e:	4631      	mov	r1, r6
 8017050:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017054:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017058:	f8ad 3016 	strh.w	r3, [sp, #22]
 801705c:	69ea      	ldr	r2, [r5, #28]
 801705e:	e001      	b.n	8017064 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017060:	69ea      	ldr	r2, [r5, #28]
 8017062:	4621      	mov	r1, r4
 8017064:	4640      	mov	r0, r8
 8017066:	f7ff ff2b 	bl	8016ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801706a:	4628      	mov	r0, r5
 801706c:	f7ff fe94 	bl	8016d98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017070:	6861      	ldr	r1, [r4, #4]
 8017072:	4602      	mov	r2, r0
 8017074:	4633      	mov	r3, r6
 8017076:	6820      	ldr	r0, [r4, #0]
 8017078:	c303      	stmia	r3!, {r0, r1}
 801707a:	4611      	mov	r1, r2
 801707c:	4630      	mov	r0, r6
 801707e:	f7fa fefd 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8017082:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017086:	2b00      	cmp	r3, #0
 8017088:	f77f af33 	ble.w	8016ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801708c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017090:	2b00      	cmp	r3, #0
 8017092:	f77f af2e 	ble.w	8016ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017096:	4628      	mov	r0, r5
 8017098:	f7ff fe9a 	bl	8016dd0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801709c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80170a0:	1a18      	subs	r0, r3, r0
 80170a2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80170a6:	4628      	mov	r0, r5
 80170a8:	f7ff fea6 	bl	8016df8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80170ac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80170b0:	4631      	mov	r1, r6
 80170b2:	1a18      	subs	r0, r3, r0
 80170b4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80170b8:	4628      	mov	r0, r5
 80170ba:	682b      	ldr	r3, [r5, #0]
 80170bc:	689b      	ldr	r3, [r3, #8]
 80170be:	4798      	blx	r3
 80170c0:	e717      	b.n	8016ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080170c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80170c2:	b570      	push	{r4, r5, r6, lr}
 80170c4:	1d06      	adds	r6, r0, #4
 80170c6:	b086      	sub	sp, #24
 80170c8:	460c      	mov	r4, r1
 80170ca:	2300      	movs	r3, #0
 80170cc:	4631      	mov	r1, r6
 80170ce:	4605      	mov	r5, r0
 80170d0:	a802      	add	r0, sp, #8
 80170d2:	9301      	str	r3, [sp, #4]
 80170d4:	f7ff fcb2 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80170dc:	8822      	ldrh	r2, [r4, #0]
 80170de:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80170e2:	1ad2      	subs	r2, r2, r3
 80170e4:	8863      	ldrh	r3, [r4, #2]
 80170e6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80170ea:	1a5b      	subs	r3, r3, r1
 80170ec:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80170f0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80170f4:	aa01      	add	r2, sp, #4
 80170f6:	f8ad 0014 	strh.w	r0, [sp, #20]
 80170fa:	4630      	mov	r0, r6
 80170fc:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017100:	a904      	add	r1, sp, #16
 8017102:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017106:	f7fa ff91 	bl	801202c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801710a:	9a01      	ldr	r2, [sp, #4]
 801710c:	b11a      	cbz	r2, 8017116 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801710e:	4621      	mov	r1, r4
 8017110:	4628      	mov	r0, r5
 8017112:	f7ff fed5 	bl	8016ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017116:	b006      	add	sp, #24
 8017118:	bd70      	pop	{r4, r5, r6, pc}

0801711a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801711a:	4602      	mov	r2, r0
 801711c:	b530      	push	{r4, r5, lr}
 801711e:	4604      	mov	r4, r0
 8017120:	b085      	sub	sp, #20
 8017122:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017126:	460d      	mov	r5, r1
 8017128:	466b      	mov	r3, sp
 801712a:	6851      	ldr	r1, [r2, #4]
 801712c:	c303      	stmia	r3!, {r0, r1}
 801712e:	4629      	mov	r1, r5
 8017130:	4668      	mov	r0, sp
 8017132:	f7fa fea3 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 8017136:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801713a:	b12b      	cbz	r3, 8017148 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801713c:	4669      	mov	r1, sp
 801713e:	4620      	mov	r0, r4
 8017140:	f7ff ffbf 	bl	80170c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017144:	b005      	add	sp, #20
 8017146:	bd30      	pop	{r4, r5, pc}
 8017148:	3404      	adds	r4, #4
 801714a:	a802      	add	r0, sp, #8
 801714c:	4621      	mov	r1, r4
 801714e:	f7ff fc75 	bl	8016a3c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017152:	f8bd 3000 	ldrh.w	r3, [sp]
 8017156:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801715a:	4669      	mov	r1, sp
 801715c:	4620      	mov	r0, r4
 801715e:	1a9b      	subs	r3, r3, r2
 8017160:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017164:	f8ad 3000 	strh.w	r3, [sp]
 8017168:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801716c:	1a9b      	subs	r3, r3, r2
 801716e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017172:	f7fa ff22 	bl	8011fba <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017176:	e7e5      	b.n	8017144 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017178 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017178:	460b      	mov	r3, r1
 801717a:	680a      	ldr	r2, [r1, #0]
 801717c:	1d01      	adds	r1, r0, #4
 801717e:	6992      	ldr	r2, [r2, #24]
 8017180:	4618      	mov	r0, r3
 8017182:	4710      	bx	r2

08017184 <_ZN8touchgfx12TextProviderC1Ev>:
 8017184:	b538      	push	{r3, r4, r5, lr}
 8017186:	2500      	movs	r5, #0
 8017188:	2302      	movs	r3, #2
 801718a:	4604      	mov	r4, r0
 801718c:	220e      	movs	r2, #14
 801718e:	7403      	strb	r3, [r0, #16]
 8017190:	4629      	mov	r1, r5
 8017192:	6145      	str	r5, [r0, #20]
 8017194:	7605      	strb	r5, [r0, #24]
 8017196:	83c5      	strh	r5, [r0, #30]
 8017198:	8405      	strh	r5, [r0, #32]
 801719a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801719c:	8705      	strh	r5, [r0, #56]	; 0x38
 801719e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80171a0:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80171a4:	e9c0 5500 	strd	r5, r5, [r0]
 80171a8:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80171ac:	304c      	adds	r0, #76	; 0x4c
 80171ae:	f009 fb63 	bl	8020878 <memset>
 80171b2:	2301      	movs	r3, #1
 80171b4:	4620      	mov	r0, r4
 80171b6:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80171ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80171be:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80171c2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80171c6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80171ca:	f7ed f8ff 	bl	80043cc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80171ce:	4620      	mov	r0, r4
 80171d0:	bd38      	pop	{r3, r4, r5, pc}

080171d2 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80171d2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80171d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80171d8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80171da:	fab0 f080 	clz	r0, r0
 80171de:	0940      	lsrs	r0, r0, #5
 80171e0:	4770      	bx	lr

080171e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80171e2:	b530      	push	{r4, r5, lr}
 80171e4:	2500      	movs	r5, #0
 80171e6:	2401      	movs	r4, #1
 80171e8:	6843      	ldr	r3, [r0, #4]
 80171ea:	b913      	cbnz	r3, 80171f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80171ec:	6803      	ldr	r3, [r0, #0]
 80171ee:	b313      	cbz	r3, 8017236 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80171f0:	6043      	str	r3, [r0, #4]
 80171f2:	7e03      	ldrb	r3, [r0, #24]
 80171f4:	b143      	cbz	r3, 8017208 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80171f6:	6943      	ldr	r3, [r0, #20]
 80171f8:	b12b      	cbz	r3, 8017206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80171fa:	881a      	ldrh	r2, [r3, #0]
 80171fc:	b11a      	cbz	r2, 8017206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80171fe:	1c9a      	adds	r2, r3, #2
 8017200:	6142      	str	r2, [r0, #20]
 8017202:	8818      	ldrh	r0, [r3, #0]
 8017204:	bd30      	pop	{r4, r5, pc}
 8017206:	7605      	strb	r5, [r0, #24]
 8017208:	6843      	ldr	r3, [r0, #4]
 801720a:	8819      	ldrh	r1, [r3, #0]
 801720c:	b199      	cbz	r1, 8017236 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801720e:	1c9a      	adds	r2, r3, #2
 8017210:	2902      	cmp	r1, #2
 8017212:	6042      	str	r2, [r0, #4]
 8017214:	d1f5      	bne.n	8017202 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017216:	7c03      	ldrb	r3, [r0, #16]
 8017218:	2b01      	cmp	r3, #1
 801721a:	d8e5      	bhi.n	80171e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801721c:	1c5a      	adds	r2, r3, #1
 801721e:	3302      	adds	r3, #2
 8017220:	7402      	strb	r2, [r0, #16]
 8017222:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017226:	6143      	str	r3, [r0, #20]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d0dd      	beq.n	80171e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801722c:	881b      	ldrh	r3, [r3, #0]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d0da      	beq.n	80171e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017232:	7604      	strb	r4, [r0, #24]
 8017234:	e7d8      	b.n	80171e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017236:	2000      	movs	r0, #0
 8017238:	e7e4      	b.n	8017204 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801723a:	6001      	str	r1, [r0, #0]
 801723c:	2100      	movs	r1, #0
 801723e:	b430      	push	{r4, r5}
 8017240:	6041      	str	r1, [r0, #4]
 8017242:	6815      	ldr	r5, [r2, #0]
 8017244:	6085      	str	r5, [r0, #8]
 8017246:	6852      	ldr	r2, [r2, #4]
 8017248:	6443      	str	r3, [r0, #68]	; 0x44
 801724a:	9b02      	ldr	r3, [sp, #8]
 801724c:	60c2      	str	r2, [r0, #12]
 801724e:	7401      	strb	r1, [r0, #16]
 8017250:	6141      	str	r1, [r0, #20]
 8017252:	7601      	strb	r1, [r0, #24]
 8017254:	8701      	strh	r1, [r0, #56]	; 0x38
 8017256:	8401      	strh	r1, [r0, #32]
 8017258:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801725c:	6483      	str	r3, [r0, #72]	; 0x48
 801725e:	bc30      	pop	{r4, r5}
 8017260:	f7ed b8b4 	b.w	80043cc <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017264 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8017264:	b408      	push	{r3}
 8017266:	b510      	push	{r4, lr}
 8017268:	b085      	sub	sp, #20
 801726a:	ac07      	add	r4, sp, #28
 801726c:	f854 3b04 	ldr.w	r3, [r4], #4
 8017270:	9300      	str	r3, [sp, #0]
 8017272:	4613      	mov	r3, r2
 8017274:	4622      	mov	r2, r4
 8017276:	9403      	str	r4, [sp, #12]
 8017278:	f7ff ffdf 	bl	801723a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801727c:	b005      	add	sp, #20
 801727e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017282:	b001      	add	sp, #4
 8017284:	4770      	bx	lr

08017286 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017288:	4605      	mov	r5, r0
 801728a:	4608      	mov	r0, r1
 801728c:	b1f1      	cbz	r1, 80172cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801728e:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017292:	460b      	mov	r3, r1
 8017294:	f101 0708 	add.w	r7, r1, #8
 8017298:	4622      	mov	r2, r4
 801729a:	6818      	ldr	r0, [r3, #0]
 801729c:	3308      	adds	r3, #8
 801729e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80172a2:	4626      	mov	r6, r4
 80172a4:	42bb      	cmp	r3, r7
 80172a6:	c603      	stmia	r6!, {r0, r1}
 80172a8:	4634      	mov	r4, r6
 80172aa:	d1f6      	bne.n	801729a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80172ac:	6818      	ldr	r0, [r3, #0]
 80172ae:	6030      	str	r0, [r6, #0]
 80172b0:	4610      	mov	r0, r2
 80172b2:	889b      	ldrh	r3, [r3, #4]
 80172b4:	80b3      	strh	r3, [r6, #4]
 80172b6:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80172ba:	015b      	lsls	r3, r3, #5
 80172bc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80172c0:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80172c4:	430b      	orrs	r3, r1
 80172c6:	425b      	negs	r3, r3
 80172c8:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80172cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080172ce <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80172ce:	b538      	push	{r3, r4, r5, lr}
 80172d0:	460c      	mov	r4, r1
 80172d2:	6811      	ldr	r1, [r2, #0]
 80172d4:	4610      	mov	r0, r2
 80172d6:	68cd      	ldr	r5, [r1, #12]
 80172d8:	4619      	mov	r1, r3
 80172da:	47a8      	blx	r5
 80172dc:	2800      	cmp	r0, #0
 80172de:	bf08      	it	eq
 80172e0:	4620      	moveq	r0, r4
 80172e2:	bd38      	pop	{r3, r4, r5, pc}

080172e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80172e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172e6:	4604      	mov	r4, r0
 80172e8:	4615      	mov	r5, r2
 80172ea:	4608      	mov	r0, r1
 80172ec:	b93a      	cbnz	r2, 80172fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80172ee:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80172f2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80172f6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80172fa:	4628      	mov	r0, r5
 80172fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172fe:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017302:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8017306:	8893      	ldrh	r3, [r2, #4]
 8017308:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801730c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017310:	79ee      	ldrb	r6, [r5, #7]
 8017312:	4316      	orrs	r6, r2
 8017314:	19da      	adds	r2, r3, r7
 8017316:	b291      	uxth	r1, r2
 8017318:	b2b7      	uxth	r7, r6
 801731a:	291d      	cmp	r1, #29
 801731c:	d87b      	bhi.n	8017416 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801731e:	2201      	movs	r2, #1
 8017320:	10f6      	asrs	r6, r6, #3
 8017322:	408a      	lsls	r2, r1
 8017324:	4974      	ldr	r1, [pc, #464]	; (80174f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8017326:	420a      	tst	r2, r1
 8017328:	d12e      	bne.n	8017388 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801732a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801732e:	d072      	beq.n	8017416 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017330:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8017334:	462b      	mov	r3, r5
 8017336:	f105 0e08 	add.w	lr, r5, #8
 801733a:	4615      	mov	r5, r2
 801733c:	6818      	ldr	r0, [r3, #0]
 801733e:	3308      	adds	r3, #8
 8017340:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017344:	4694      	mov	ip, r2
 8017346:	4573      	cmp	r3, lr
 8017348:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801734c:	4662      	mov	r2, ip
 801734e:	d1f5      	bne.n	801733c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017350:	6818      	ldr	r0, [r3, #0]
 8017352:	f8cc 0000 	str.w	r0, [ip]
 8017356:	889b      	ldrh	r3, [r3, #4]
 8017358:	f8ac 3004 	strh.w	r3, [ip, #4]
 801735c:	b2b3      	uxth	r3, r6
 801735e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017362:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8017366:	1aca      	subs	r2, r1, r3
 8017368:	1bcf      	subs	r7, r1, r7
 801736a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801736e:	b292      	uxth	r2, r2
 8017370:	1afb      	subs	r3, r7, r3
 8017372:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017376:	10d2      	asrs	r2, r2, #3
 8017378:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801737c:	4302      	orrs	r2, r0
 801737e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017382:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017386:	e7b8      	b.n	80172fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017388:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801738a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801738e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017390:	f640 6333 	movw	r3, #3635	; 0xe33
 8017394:	4299      	cmp	r1, r3
 8017396:	d110      	bne.n	80173ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8017398:	6803      	ldr	r3, [r0, #0]
 801739a:	68db      	ldr	r3, [r3, #12]
 801739c:	4798      	blx	r3
 801739e:	7b41      	ldrb	r1, [r0, #13]
 80173a0:	00cb      	lsls	r3, r1, #3
 80173a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80173a6:	7a03      	ldrb	r3, [r0, #8]
 80173a8:	0648      	lsls	r0, r1, #25
 80173aa:	ea43 0302 	orr.w	r3, r3, r2
 80173ae:	bf44      	itt	mi
 80173b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80173b4:	b21b      	sxthmi	r3, r3
 80173b6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80173ba:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80173be:	462a      	mov	r2, r5
 80173c0:	f105 0c08 	add.w	ip, r5, #8
 80173c4:	443b      	add	r3, r7
 80173c6:	4433      	add	r3, r6
 80173c8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80173cc:	b29b      	uxth	r3, r3
 80173ce:	4635      	mov	r5, r6
 80173d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80173d4:	6810      	ldr	r0, [r2, #0]
 80173d6:	3208      	adds	r2, #8
 80173d8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80173dc:	4637      	mov	r7, r6
 80173de:	4562      	cmp	r2, ip
 80173e0:	c703      	stmia	r7!, {r0, r1}
 80173e2:	463e      	mov	r6, r7
 80173e4:	d1f6      	bne.n	80173d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80173e6:	6810      	ldr	r0, [r2, #0]
 80173e8:	6038      	str	r0, [r7, #0]
 80173ea:	8892      	ldrh	r2, [r2, #4]
 80173ec:	80ba      	strh	r2, [r7, #4]
 80173ee:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80173f2:	10db      	asrs	r3, r3, #3
 80173f4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80173f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80173fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017400:	4313      	orrs	r3, r2
 8017402:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8017406:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801740a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801740e:	1a9b      	subs	r3, r3, r2
 8017410:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8017414:	e771      	b.n	80172fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017416:	f023 0204 	bic.w	r2, r3, #4
 801741a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801741e:	428a      	cmp	r2, r1
 8017420:	d003      	beq.n	801742a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8017422:	f640 621d 	movw	r2, #3613	; 0xe1d
 8017426:	4293      	cmp	r3, r2
 8017428:	d120      	bne.n	801746c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801742a:	3b01      	subs	r3, #1
 801742c:	4602      	mov	r2, r0
 801742e:	4629      	mov	r1, r5
 8017430:	4620      	mov	r0, r4
 8017432:	b29b      	uxth	r3, r3
 8017434:	f7ff ff4b 	bl	80172ce <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017438:	7b41      	ldrb	r1, [r0, #13]
 801743a:	00cb      	lsls	r3, r1, #3
 801743c:	0649      	lsls	r1, r1, #25
 801743e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017442:	7a03      	ldrb	r3, [r0, #8]
 8017444:	ea43 0302 	orr.w	r3, r3, r2
 8017448:	bf44      	itt	mi
 801744a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801744e:	b21b      	sxthmi	r3, r3
 8017450:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017454:	7b6b      	ldrb	r3, [r5, #13]
 8017456:	7aaa      	ldrb	r2, [r5, #10]
 8017458:	005b      	lsls	r3, r3, #1
 801745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801745e:	4313      	orrs	r3, r2
 8017460:	115a      	asrs	r2, r3, #5
 8017462:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017466:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801746a:	e035      	b.n	80174d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801746c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017470:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017474:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017478:	7a2a      	ldrb	r2, [r5, #8]
 801747a:	ea42 0201 	orr.w	r2, r2, r1
 801747e:	f640 6109 	movw	r1, #3593	; 0xe09
 8017482:	bf1c      	itt	ne
 8017484:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017488:	b212      	sxthne	r2, r2
 801748a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801748e:	f023 0210 	bic.w	r2, r3, #16
 8017492:	428a      	cmp	r2, r1
 8017494:	d003      	beq.n	801749e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8017496:	f640 6213 	movw	r2, #3603	; 0xe13
 801749a:	4293      	cmp	r3, r2
 801749c:	d129      	bne.n	80174f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801749e:	7b6e      	ldrb	r6, [r5, #13]
 80174a0:	4629      	mov	r1, r5
 80174a2:	0076      	lsls	r6, r6, #1
 80174a4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80174a8:	7aae      	ldrb	r6, [r5, #10]
 80174aa:	4316      	orrs	r6, r2
 80174ac:	f640 6213 	movw	r2, #3603	; 0xe13
 80174b0:	4293      	cmp	r3, r2
 80174b2:	4602      	mov	r2, r0
 80174b4:	4620      	mov	r0, r4
 80174b6:	bf16      	itet	ne
 80174b8:	f103 33ff 	addne.w	r3, r3, #4294967295
 80174bc:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80174c0:	b29b      	uxthne	r3, r3
 80174c2:	f7ff ff04 	bl	80172ce <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80174c6:	7b43      	ldrb	r3, [r0, #13]
 80174c8:	7a82      	ldrb	r2, [r0, #10]
 80174ca:	005b      	lsls	r3, r3, #1
 80174cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174d0:	4313      	orrs	r3, r2
 80174d2:	1af6      	subs	r6, r6, r3
 80174d4:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80174d8:	7b69      	ldrb	r1, [r5, #13]
 80174da:	00cb      	lsls	r3, r1, #3
 80174dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80174e0:	7a2b      	ldrb	r3, [r5, #8]
 80174e2:	4313      	orrs	r3, r2
 80174e4:	064a      	lsls	r2, r1, #25
 80174e6:	bf44      	itt	mi
 80174e8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80174ec:	b21b      	sxthmi	r3, r3
 80174ee:	1bdb      	subs	r3, r3, r7
 80174f0:	e747      	b.n	8017382 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80174f2:	2300      	movs	r3, #0
 80174f4:	e7b7      	b.n	8017466 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80174f6:	bf00      	nop
 80174f8:	3fc00079 	.word	0x3fc00079

080174fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80174fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017500:	4604      	mov	r4, r0
 8017502:	b942      	cbnz	r2, 8017516 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8017504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017508:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801750c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8017510:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017514:	e047      	b.n	80175a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017516:	7b51      	ldrb	r1, [r2, #13]
 8017518:	8893      	ldrh	r3, [r2, #4]
 801751a:	010d      	lsls	r5, r1, #4
 801751c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8017520:	79d5      	ldrb	r5, [r2, #7]
 8017522:	4305      	orrs	r5, r0
 8017524:	2d04      	cmp	r5, #4
 8017526:	bfcc      	ite	gt
 8017528:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801752c:	f04f 0e01 	movle.w	lr, #1
 8017530:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8017534:	f200 80ab 	bhi.w	801768e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8017538:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801753c:	4283      	cmp	r3, r0
 801753e:	d216      	bcs.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017540:	f240 605b 	movw	r0, #1627	; 0x65b
 8017544:	4283      	cmp	r3, r0
 8017546:	d859      	bhi.n	80175fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8017548:	f240 6057 	movw	r0, #1623	; 0x657
 801754c:	4283      	cmp	r3, r0
 801754e:	d20e      	bcs.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017550:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017554:	d24a      	bcs.n	80175ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8017556:	f240 604e 	movw	r0, #1614	; 0x64e
 801755a:	4283      	cmp	r3, r0
 801755c:	d207      	bcs.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801755e:	f240 601a 	movw	r0, #1562	; 0x61a
 8017562:	4283      	cmp	r3, r0
 8017564:	d02a      	beq.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017566:	d821      	bhi.n	80175ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8017568:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801756c:	d35b      	bcc.n	8017626 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801756e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8017572:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017576:	f040 80d0 	bne.w	801771a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801757a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801757e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017582:	f040 80ca 	bne.w	801771a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017586:	00cb      	lsls	r3, r1, #3
 8017588:	0649      	lsls	r1, r1, #25
 801758a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801758e:	7a13      	ldrb	r3, [r2, #8]
 8017590:	ea43 0300 	orr.w	r3, r3, r0
 8017594:	bf44      	itt	mi
 8017596:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801759a:	b21b      	sxthmi	r3, r3
 801759c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80175a0:	1b5d      	subs	r5, r3, r5
 80175a2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80175a6:	4610      	mov	r0, r2
 80175a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175ac:	f240 604b 	movw	r0, #1611	; 0x64b
 80175b0:	4283      	cmp	r3, r0
 80175b2:	d338      	bcc.n	8017626 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80175b4:	f240 604c 	movw	r0, #1612	; 0x64c
 80175b8:	4283      	cmp	r3, r0
 80175ba:	d9d8      	bls.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80175bc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80175c0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80175c4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80175c8:	f040 80f3 	bne.w	80177b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80175cc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80175d0:	f040 80ef 	bne.w	80177b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80175d4:	00cb      	lsls	r3, r1, #3
 80175d6:	064e      	lsls	r6, r1, #25
 80175d8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80175dc:	7a13      	ldrb	r3, [r2, #8]
 80175de:	ea43 0300 	orr.w	r3, r3, r0
 80175e2:	bf44      	itt	mi
 80175e4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80175e8:	b21b      	sxthmi	r3, r3
 80175ea:	e7d9      	b.n	80175a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80175ec:	f240 6054 	movw	r0, #1620	; 0x654
 80175f0:	4283      	cmp	r3, r0
 80175f2:	d8e3      	bhi.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80175f4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80175f8:	d9e0      	bls.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80175fa:	e7b8      	b.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80175fc:	f240 6074 	movw	r0, #1652	; 0x674
 8017600:	4283      	cmp	r3, r0
 8017602:	d0b4      	beq.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017604:	d82d      	bhi.n	8017662 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8017606:	f240 605e 	movw	r0, #1630	; 0x65e
 801760a:	4283      	cmp	r3, r0
 801760c:	d804      	bhi.n	8017618 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801760e:	f240 605d 	movw	r0, #1629	; 0x65d
 8017612:	4283      	cmp	r3, r0
 8017614:	d3d2      	bcc.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017616:	e7aa      	b.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017618:	f240 605f 	movw	r0, #1631	; 0x65f
 801761c:	4283      	cmp	r3, r0
 801761e:	d0cd      	beq.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017620:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8017624:	d0a3      	beq.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017626:	00cb      	lsls	r3, r1, #3
 8017628:	0649      	lsls	r1, r1, #25
 801762a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801762e:	7a13      	ldrb	r3, [r2, #8]
 8017630:	ea43 0300 	orr.w	r3, r3, r0
 8017634:	bf44      	itt	mi
 8017636:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801763a:	b21b      	sxthmi	r3, r3
 801763c:	1b5d      	subs	r5, r3, r5
 801763e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017642:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017646:	7b53      	ldrb	r3, [r2, #13]
 8017648:	015b      	lsls	r3, r3, #5
 801764a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801764e:	7993      	ldrb	r3, [r2, #6]
 8017650:	430b      	orrs	r3, r1
 8017652:	2105      	movs	r1, #5
 8017654:	005b      	lsls	r3, r3, #1
 8017656:	fb93 f3f1 	sdiv	r3, r3, r1
 801765a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801765e:	440b      	add	r3, r1
 8017660:	e756      	b.n	8017510 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017662:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8017666:	4283      	cmp	r3, r0
 8017668:	d809      	bhi.n	801767e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801766a:	f240 60df 	movw	r0, #1759	; 0x6df
 801766e:	4283      	cmp	r3, r0
 8017670:	f4bf af7d 	bcs.w	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017674:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8017678:	2b05      	cmp	r3, #5
 801767a:	d8d4      	bhi.n	8017626 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801767c:	e777      	b.n	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801767e:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017682:	4283      	cmp	r3, r0
 8017684:	d09a      	beq.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017686:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801768a:	4283      	cmp	r3, r0
 801768c:	e7ca      	b.n	8017624 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801768e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017692:	d22b      	bcs.n	80176ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8017694:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8017698:	4283      	cmp	r3, r0
 801769a:	d28f      	bcs.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801769c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80176a0:	4283      	cmp	r3, r0
 80176a2:	d816      	bhi.n	80176d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80176a4:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80176a8:	4283      	cmp	r3, r0
 80176aa:	f4bf af60 	bcs.w	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80176ae:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80176b2:	4283      	cmp	r3, r0
 80176b4:	d80a      	bhi.n	80176cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80176b6:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80176ba:	4283      	cmp	r3, r0
 80176bc:	f4bf af57 	bcs.w	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80176c0:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80176c4:	4283      	cmp	r3, r0
 80176c6:	f43f af79 	beq.w	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80176ca:	e7ac      	b.n	8017626 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80176cc:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80176d0:	e7f8      	b.n	80176c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80176d2:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80176d6:	4283      	cmp	r3, r0
 80176d8:	d802      	bhi.n	80176e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80176da:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80176de:	e798      	b.n	8017612 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80176e0:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80176e4:	4283      	cmp	r3, r0
 80176e6:	f47f af42 	bne.w	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80176ea:	e767      	b.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80176ec:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80176f0:	4283      	cmp	r3, r0
 80176f2:	f43f af63 	beq.w	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80176f6:	d802      	bhi.n	80176fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80176f8:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80176fc:	e7f2      	b.n	80176e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80176fe:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8017702:	4283      	cmp	r3, r0
 8017704:	d805      	bhi.n	8017712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8017706:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801770a:	4283      	cmp	r3, r0
 801770c:	f4ff af2f 	bcc.w	801756e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017710:	e754      	b.n	80175bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017712:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8017716:	4283      	cmp	r3, r0
 8017718:	e7af      	b.n	801767a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801771a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801771e:	4617      	mov	r7, r2
 8017720:	f102 0808 	add.w	r8, r2, #8
 8017724:	4666      	mov	r6, ip
 8017726:	6838      	ldr	r0, [r7, #0]
 8017728:	3708      	adds	r7, #8
 801772a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801772e:	46e6      	mov	lr, ip
 8017730:	4547      	cmp	r7, r8
 8017732:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017736:	46f4      	mov	ip, lr
 8017738:	d1f5      	bne.n	8017726 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801773a:	6838      	ldr	r0, [r7, #0]
 801773c:	f8ce 0000 	str.w	r0, [lr]
 8017740:	88b9      	ldrh	r1, [r7, #4]
 8017742:	f8ae 1004 	strh.w	r1, [lr, #4]
 8017746:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801774a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801774e:	d009      	beq.n	8017764 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8017750:	7b51      	ldrb	r1, [r2, #13]
 8017752:	7992      	ldrb	r2, [r2, #6]
 8017754:	0149      	lsls	r1, r1, #5
 8017756:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801775a:	4311      	orrs	r1, r2
 801775c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017760:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017764:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017768:	b2ad      	uxth	r5, r5
 801776a:	d00d      	beq.n	8017788 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801776c:	442b      	add	r3, r5
 801776e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017772:	b29b      	uxth	r3, r3
 8017774:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017778:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801777c:	10db      	asrs	r3, r3, #3
 801777e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017782:	4313      	orrs	r3, r2
 8017784:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017788:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801778c:	00cb      	lsls	r3, r1, #3
 801778e:	064f      	lsls	r7, r1, #25
 8017790:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017794:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017798:	ea43 0302 	orr.w	r3, r3, r2
 801779c:	bf44      	itt	mi
 801779e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80177a2:	b21b      	sxthmi	r3, r3
 80177a4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80177a8:	1b5b      	subs	r3, r3, r5
 80177aa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80177ae:	4632      	mov	r2, r6
 80177b0:	e6f9      	b.n	80175a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80177b2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80177b6:	4617      	mov	r7, r2
 80177b8:	f102 0908 	add.w	r9, r2, #8
 80177bc:	4666      	mov	r6, ip
 80177be:	6838      	ldr	r0, [r7, #0]
 80177c0:	3708      	adds	r7, #8
 80177c2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80177c6:	46e0      	mov	r8, ip
 80177c8:	454f      	cmp	r7, r9
 80177ca:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80177ce:	46c4      	mov	ip, r8
 80177d0:	d1f5      	bne.n	80177be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80177d2:	6838      	ldr	r0, [r7, #0]
 80177d4:	f8c8 0000 	str.w	r0, [r8]
 80177d8:	88b9      	ldrh	r1, [r7, #4]
 80177da:	f8a8 1004 	strh.w	r1, [r8, #4]
 80177de:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80177e2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80177e6:	d009      	beq.n	80177fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80177e8:	7b51      	ldrb	r1, [r2, #13]
 80177ea:	7992      	ldrb	r2, [r2, #6]
 80177ec:	0149      	lsls	r1, r1, #5
 80177ee:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80177f2:	4311      	orrs	r1, r2
 80177f4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80177f8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80177fc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017800:	d00e      	beq.n	8017820 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8017802:	eba3 030e 	sub.w	r3, r3, lr
 8017806:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801780a:	b29b      	uxth	r3, r3
 801780c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017810:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017814:	10db      	asrs	r3, r3, #3
 8017816:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801781a:	4313      	orrs	r3, r2
 801781c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017820:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017824:	00cb      	lsls	r3, r1, #3
 8017826:	0648      	lsls	r0, r1, #25
 8017828:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801782c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017830:	ea43 0302 	orr.w	r3, r3, r2
 8017834:	bf44      	itt	mi
 8017836:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801783a:	b21b      	sxthmi	r3, r3
 801783c:	1b5d      	subs	r5, r3, r5
 801783e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017842:	e7b4      	b.n	80177ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08017844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017848:	461e      	mov	r6, r3
 801784a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801784c:	4604      	mov	r4, r0
 801784e:	4617      	mov	r7, r2
 8017850:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017854:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017858:	f7ec fd66 	bl	8004328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801785c:	4605      	mov	r5, r0
 801785e:	b918      	cbnz	r0, 8017868 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017860:	6030      	str	r0, [r6, #0]
 8017862:	4628      	mov	r0, r5
 8017864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017868:	683b      	ldr	r3, [r7, #0]
 801786a:	4601      	mov	r1, r0
 801786c:	4638      	mov	r0, r7
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	4798      	blx	r3
 8017872:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017876:	4602      	mov	r2, r0
 8017878:	6030      	str	r0, [r6, #0]
 801787a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801787e:	d213      	bcs.n	80178a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017880:	4643      	mov	r3, r8
 8017882:	4639      	mov	r1, r7
 8017884:	4620      	mov	r0, r4
 8017886:	f7ff fe39 	bl	80174fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801788a:	6030      	str	r0, [r6, #0]
 801788c:	6833      	ldr	r3, [r6, #0]
 801788e:	b143      	cbz	r3, 80178a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017890:	7b5a      	ldrb	r2, [r3, #13]
 8017892:	7a9b      	ldrb	r3, [r3, #10]
 8017894:	0052      	lsls	r2, r2, #1
 8017896:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801789a:	4313      	orrs	r3, r2
 801789c:	bf0c      	ite	eq
 801789e:	2301      	moveq	r3, #1
 80178a0:	2300      	movne	r3, #0
 80178a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80178a6:	e7dc      	b.n	8017862 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80178a8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80178ac:	b29b      	uxth	r3, r3
 80178ae:	2b7f      	cmp	r3, #127	; 0x7f
 80178b0:	d804      	bhi.n	80178bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80178b2:	4639      	mov	r1, r7
 80178b4:	4620      	mov	r0, r4
 80178b6:	f7ff fd15 	bl	80172e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80178ba:	e7e6      	b.n	801788a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80178bc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d0e3      	beq.n	801788c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80178c4:	f640 1302 	movw	r3, #2306	; 0x902
 80178c8:	429d      	cmp	r5, r3
 80178ca:	d1df      	bne.n	801788c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80178cc:	4601      	mov	r1, r0
 80178ce:	4620      	mov	r0, r4
 80178d0:	f7ff fcd9 	bl	8017286 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80178d4:	e7d9      	b.n	801788a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080178d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80178d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178da:	461e      	mov	r6, r3
 80178dc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80178de:	4604      	mov	r4, r0
 80178e0:	4617      	mov	r7, r2
 80178e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80178e6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80178ea:	f7ec fd1d 	bl	8004328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80178ee:	4605      	mov	r5, r0
 80178f0:	b918      	cbnz	r0, 80178fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80178f2:	6030      	str	r0, [r6, #0]
 80178f4:	4628      	mov	r0, r5
 80178f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	4601      	mov	r1, r0
 80178fe:	4638      	mov	r0, r7
 8017900:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8017904:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017908:	47c8      	blx	r9
 801790a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801790e:	4602      	mov	r2, r0
 8017910:	6030      	str	r0, [r6, #0]
 8017912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017916:	d213      	bcs.n	8017940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8017918:	4643      	mov	r3, r8
 801791a:	4639      	mov	r1, r7
 801791c:	4620      	mov	r0, r4
 801791e:	f7ff fded 	bl	80174fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017922:	6030      	str	r0, [r6, #0]
 8017924:	6833      	ldr	r3, [r6, #0]
 8017926:	b143      	cbz	r3, 801793a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8017928:	7b5a      	ldrb	r2, [r3, #13]
 801792a:	7a9b      	ldrb	r3, [r3, #10]
 801792c:	0052      	lsls	r2, r2, #1
 801792e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017932:	4313      	orrs	r3, r2
 8017934:	bf0c      	ite	eq
 8017936:	2301      	moveq	r3, #1
 8017938:	2300      	movne	r3, #0
 801793a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801793e:	e7d9      	b.n	80178f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8017940:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017944:	b29b      	uxth	r3, r3
 8017946:	2b7f      	cmp	r3, #127	; 0x7f
 8017948:	d804      	bhi.n	8017954 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801794a:	4639      	mov	r1, r7
 801794c:	4620      	mov	r0, r4
 801794e:	f7ff fcc9 	bl	80172e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017952:	e7e6      	b.n	8017922 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8017954:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017958:	2b00      	cmp	r3, #0
 801795a:	d0e3      	beq.n	8017924 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801795c:	f640 1302 	movw	r3, #2306	; 0x902
 8017960:	429d      	cmp	r5, r3
 8017962:	d1df      	bne.n	8017924 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017964:	4601      	mov	r1, r0
 8017966:	4620      	mov	r0, r4
 8017968:	f7ff fc8d 	bl	8017286 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801796c:	e7d9      	b.n	8017922 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801796e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801796e:	b510      	push	{r4, lr}
 8017970:	4604      	mov	r4, r0
 8017972:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8017976:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017978:	b1e1      	cbz	r1, 80179b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801797a:	2b0a      	cmp	r3, #10
 801797c:	d02d      	beq.n	80179da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801797e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017980:	3901      	subs	r1, #1
 8017982:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017986:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8017988:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801798c:	1c51      	adds	r1, r2, #1
 801798e:	b289      	uxth	r1, r1
 8017990:	2901      	cmp	r1, #1
 8017992:	bf8a      	itet	hi
 8017994:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017998:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801799a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801799c:	1c5a      	adds	r2, r3, #1
 801799e:	8722      	strh	r2, [r4, #56]	; 0x38
 80179a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80179a2:	4413      	add	r3, r2
 80179a4:	b29b      	uxth	r3, r3
 80179a6:	2b09      	cmp	r3, #9
 80179a8:	bf88      	it	hi
 80179aa:	3b0a      	subhi	r3, #10
 80179ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80179b0:	8458      	strh	r0, [r3, #34]	; 0x22
 80179b2:	e7de      	b.n	8017972 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80179b4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80179b6:	2b0a      	cmp	r3, #10
 80179b8:	d00f      	beq.n	80179da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80179ba:	4620      	mov	r0, r4
 80179bc:	f7ff fc11 	bl	80171e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80179c0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80179c2:	1c5a      	adds	r2, r3, #1
 80179c4:	8722      	strh	r2, [r4, #56]	; 0x38
 80179c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80179c8:	4413      	add	r3, r2
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	2b09      	cmp	r3, #9
 80179ce:	bf88      	it	hi
 80179d0:	3b0a      	subhi	r3, #10
 80179d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80179d6:	8458      	strh	r0, [r3, #34]	; 0x22
 80179d8:	e7ec      	b.n	80179b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80179da:	bd10      	pop	{r4, pc}

080179dc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80179dc:	b538      	push	{r3, r4, r5, lr}
 80179de:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80179e0:	4604      	mov	r4, r0
 80179e2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80179e6:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 80179e8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80179ea:	3a01      	subs	r2, #1
 80179ec:	8702      	strh	r2, [r0, #56]	; 0x38
 80179ee:	1c5a      	adds	r2, r3, #1
 80179f0:	b292      	uxth	r2, r2
 80179f2:	2a09      	cmp	r2, #9
 80179f4:	bf8a      	itet	hi
 80179f6:	3b09      	subhi	r3, #9
 80179f8:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80179fa:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80179fc:	f7ff ffb7 	bl	801796e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017a00:	8c23      	ldrh	r3, [r4, #32]
 8017a02:	2b01      	cmp	r3, #1
 8017a04:	bf9c      	itt	ls
 8017a06:	3301      	addls	r3, #1
 8017a08:	8423      	strhls	r3, [r4, #32]
 8017a0a:	8be3      	ldrh	r3, [r4, #30]
 8017a0c:	b90b      	cbnz	r3, 8017a12 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017a0e:	2302      	movs	r3, #2
 8017a10:	83e3      	strh	r3, [r4, #30]
 8017a12:	8be3      	ldrh	r3, [r4, #30]
 8017a14:	4628      	mov	r0, r5
 8017a16:	3b01      	subs	r3, #1
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	83e3      	strh	r3, [r4, #30]
 8017a1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017a20:	8365      	strh	r5, [r4, #26]
 8017a22:	bd38      	pop	{r3, r4, r5, pc}

08017a24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017a24:	428a      	cmp	r2, r1
 8017a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a2a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017a2c:	d932      	bls.n	8017a94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8017a2e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8017a30:	1a54      	subs	r4, r2, r1
 8017a32:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8017a36:	19ee      	adds	r6, r5, r7
 8017a38:	fa1f fe84 	uxth.w	lr, r4
 8017a3c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8017a40:	3e01      	subs	r6, #1
 8017a42:	b2b4      	uxth	r4, r6
 8017a44:	eba4 090e 	sub.w	r9, r4, lr
 8017a48:	fa1f f989 	uxth.w	r9, r9
 8017a4c:	2c09      	cmp	r4, #9
 8017a4e:	4626      	mov	r6, r4
 8017a50:	bf88      	it	hi
 8017a52:	f1a4 060a 	subhi.w	r6, r4, #10
 8017a56:	f1bc 0f00 	cmp.w	ip, #0
 8017a5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8017a5e:	bf08      	it	eq
 8017a60:	f04f 0c02 	moveq.w	ip, #2
 8017a64:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017a68:	b2a4      	uxth	r4, r4
 8017a6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017a6e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8017a72:	454c      	cmp	r4, r9
 8017a74:	fa1f fc8c 	uxth.w	ip, ip
 8017a78:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017a7c:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017a80:	d1e4      	bne.n	8017a4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017a82:	eba5 050e 	sub.w	r5, r5, lr
 8017a86:	eb0e 0408 	add.w	r4, lr, r8
 8017a8a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017a8e:	8705      	strh	r5, [r0, #56]	; 0x38
 8017a90:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8017a94:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8017a96:	250a      	movs	r5, #10
 8017a98:	1a64      	subs	r4, r4, r1
 8017a9a:	4439      	add	r1, r7
 8017a9c:	b289      	uxth	r1, r1
 8017a9e:	8704      	strh	r4, [r0, #56]	; 0x38
 8017aa0:	2909      	cmp	r1, #9
 8017aa2:	bf88      	it	hi
 8017aa4:	390a      	subhi	r1, #10
 8017aa6:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017aa8:	b18a      	cbz	r2, 8017ace <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8017aaa:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8017aac:	3a01      	subs	r2, #1
 8017aae:	3101      	adds	r1, #1
 8017ab0:	b292      	uxth	r2, r2
 8017ab2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017ab6:	8701      	strh	r1, [r0, #56]	; 0x38
 8017ab8:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017aba:	b901      	cbnz	r1, 8017abe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8017abc:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017abe:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017ac0:	3901      	subs	r1, #1
 8017ac2:	b289      	uxth	r1, r1
 8017ac4:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017ac6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017aca:	844c      	strh	r4, [r1, #34]	; 0x22
 8017acc:	e7ec      	b.n	8017aa8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8017ace:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ad2:	f7ff bf4c 	b.w	801796e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08017ad6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017ad6:	b570      	push	{r4, r5, r6, lr}
 8017ad8:	2500      	movs	r5, #0
 8017ada:	4295      	cmp	r5, r2
 8017adc:	d011      	beq.n	8017b02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8017ade:	8bc4      	ldrh	r4, [r0, #30]
 8017ae0:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017ae4:	4414      	add	r4, r2
 8017ae6:	3c01      	subs	r4, #1
 8017ae8:	1b64      	subs	r4, r4, r5
 8017aea:	b2a4      	uxth	r4, r4
 8017aec:	2c01      	cmp	r4, #1
 8017aee:	bf88      	it	hi
 8017af0:	3c02      	subhi	r4, #2
 8017af2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017af6:	8b64      	ldrh	r4, [r4, #26]
 8017af8:	42b4      	cmp	r4, r6
 8017afa:	d117      	bne.n	8017b2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017afc:	3501      	adds	r5, #1
 8017afe:	b2ad      	uxth	r5, r5
 8017b00:	e7eb      	b.n	8017ada <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017b02:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017b06:	2400      	movs	r4, #0
 8017b08:	4413      	add	r3, r2
 8017b0a:	b2a2      	uxth	r2, r4
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	da0f      	bge.n	8017b30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017b10:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8017b12:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017b16:	3401      	adds	r4, #1
 8017b18:	4432      	add	r2, r6
 8017b1a:	b292      	uxth	r2, r2
 8017b1c:	2a09      	cmp	r2, #9
 8017b1e:	bf88      	it	hi
 8017b20:	3a0a      	subhi	r2, #10
 8017b22:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017b26:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8017b28:	42aa      	cmp	r2, r5
 8017b2a:	d0ee      	beq.n	8017b0a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017b2c:	2000      	movs	r0, #0
 8017b2e:	bd70      	pop	{r4, r5, r6, pc}
 8017b30:	2001      	movs	r0, #1
 8017b32:	e7fc      	b.n	8017b2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017b34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b38:	4605      	mov	r5, r0
 8017b3a:	4616      	mov	r6, r2
 8017b3c:	1c8c      	adds	r4, r1, #2
 8017b3e:	8809      	ldrh	r1, [r1, #0]
 8017b40:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017b44:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017b48:	42b3      	cmp	r3, r6
 8017b4a:	d124      	bne.n	8017b96 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017b4c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017b50:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017b54:	f001 070f 	and.w	r7, r1, #15
 8017b58:	4652      	mov	r2, sl
 8017b5a:	f8cd 8000 	str.w	r8, [sp]
 8017b5e:	464b      	mov	r3, r9
 8017b60:	4621      	mov	r1, r4
 8017b62:	4628      	mov	r0, r5
 8017b64:	f7ff ffb7 	bl	8017ad6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017b68:	4683      	mov	fp, r0
 8017b6a:	b168      	cbz	r0, 8017b88 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017b6c:	eb0a 0109 	add.w	r1, sl, r9
 8017b70:	463a      	mov	r2, r7
 8017b72:	4628      	mov	r0, r5
 8017b74:	4441      	add	r1, r8
 8017b76:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017b7a:	4649      	mov	r1, r9
 8017b7c:	f7ff ff52 	bl	8017a24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017b80:	4658      	mov	r0, fp
 8017b82:	b003      	add	sp, #12
 8017b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b88:	eb07 010a 	add.w	r1, r7, sl
 8017b8c:	4449      	add	r1, r9
 8017b8e:	4441      	add	r1, r8
 8017b90:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017b94:	e7d2      	b.n	8017b3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8017b96:	f04f 0b00 	mov.w	fp, #0
 8017b9a:	e7f1      	b.n	8017b80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017b9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017b9c:	b570      	push	{r4, r5, r6, lr}
 8017b9e:	8810      	ldrh	r0, [r2, #0]
 8017ba0:	4298      	cmp	r0, r3
 8017ba2:	d817      	bhi.n	8017bd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017ba4:	1e48      	subs	r0, r1, #1
 8017ba6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017baa:	4298      	cmp	r0, r3
 8017bac:	d312      	bcc.n	8017bd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017bae:	2400      	movs	r4, #0
 8017bb0:	428c      	cmp	r4, r1
 8017bb2:	d20f      	bcs.n	8017bd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017bb4:	1860      	adds	r0, r4, r1
 8017bb6:	1040      	asrs	r0, r0, #1
 8017bb8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017bbc:	0085      	lsls	r5, r0, #2
 8017bbe:	42b3      	cmp	r3, r6
 8017bc0:	d902      	bls.n	8017bc8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017bc2:	3001      	adds	r0, #1
 8017bc4:	b284      	uxth	r4, r0
 8017bc6:	e7f3      	b.n	8017bb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017bc8:	d201      	bcs.n	8017bce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8017bca:	b281      	uxth	r1, r0
 8017bcc:	e7f0      	b.n	8017bb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017bce:	442a      	add	r2, r5
 8017bd0:	8850      	ldrh	r0, [r2, #2]
 8017bd2:	bd70      	pop	{r4, r5, r6, pc}
 8017bd4:	2000      	movs	r0, #0
 8017bd6:	e7fc      	b.n	8017bd2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08017bd8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bdc:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8017bde:	4604      	mov	r4, r0
 8017be0:	260b      	movs	r6, #11
 8017be2:	886f      	ldrh	r7, [r5, #2]
 8017be4:	087f      	lsrs	r7, r7, #1
 8017be6:	3e01      	subs	r6, #1
 8017be8:	d013      	beq.n	8017c12 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017bea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017bec:	462a      	mov	r2, r5
 8017bee:	4639      	mov	r1, r7
 8017bf0:	4620      	mov	r0, r4
 8017bf2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017bf6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017bfa:	4643      	mov	r3, r8
 8017bfc:	f7ff ffce 	bl	8017b9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017c00:	b138      	cbz	r0, 8017c12 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017c02:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017c06:	4642      	mov	r2, r8
 8017c08:	4620      	mov	r0, r4
 8017c0a:	f7ff ff93 	bl	8017b34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	d1e9      	bne.n	8017be6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017c18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017c18:	b570      	push	{r4, r5, r6, lr}
 8017c1a:	694a      	ldr	r2, [r1, #20]
 8017c1c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017c1e:	684b      	ldr	r3, [r1, #4]
 8017c20:	1b54      	subs	r4, r2, r5
 8017c22:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017c24:	f000 8106 	beq.w	8017e34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017c28:	1b9b      	subs	r3, r3, r6
 8017c2a:	d003      	beq.n	8017c34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017c2c:	4363      	muls	r3, r4
 8017c2e:	2210      	movs	r2, #16
 8017c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8017c34:	680c      	ldr	r4, [r1, #0]
 8017c36:	698a      	ldr	r2, [r1, #24]
 8017c38:	1b65      	subs	r5, r4, r5
 8017c3a:	f000 80fd 	beq.w	8017e38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017c3e:	1b92      	subs	r2, r2, r6
 8017c40:	d003      	beq.n	8017c4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017c42:	436a      	muls	r2, r5
 8017c44:	2410      	movs	r4, #16
 8017c46:	fb92 f2f4 	sdiv	r2, r2, r4
 8017c4a:	1a9b      	subs	r3, r3, r2
 8017c4c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8017e74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017c54:	460a      	mov	r2, r1
 8017c56:	ee07 3a90 	vmov	s15, r3
 8017c5a:	f100 040c 	add.w	r4, r0, #12
 8017c5e:	4603      	mov	r3, r0
 8017c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c64:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017c68:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017c6c:	eeb1 6a43 	vneg.f32	s12, s6
 8017c70:	edd2 7a02 	vldr	s15, [r2, #8]
 8017c74:	3214      	adds	r2, #20
 8017c76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017c7a:	ece3 6a01 	vstmia	r3!, {s13}
 8017c7e:	429c      	cmp	r4, r3
 8017c80:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017c84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017c88:	edc3 7a02 	vstr	s15, [r3, #8]
 8017c8c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017c90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017c94:	edc3 7a05 	vstr	s15, [r3, #20]
 8017c98:	d1ea      	bne.n	8017c70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8017c9a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017c9c:	698b      	ldr	r3, [r1, #24]
 8017c9e:	edd0 4a02 	vldr	s9, [r0, #8]
 8017ca2:	1a9b      	subs	r3, r3, r2
 8017ca4:	edd0 3a00 	vldr	s7, [r0]
 8017ca8:	edd0 6a01 	vldr	s13, [r0, #4]
 8017cac:	ee07 3a90 	vmov	s15, r3
 8017cb0:	684b      	ldr	r3, [r1, #4]
 8017cb2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017cb6:	ed90 5a05 	vldr	s10, [r0, #20]
 8017cba:	1a9b      	subs	r3, r3, r2
 8017cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cc0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017cc4:	ed90 2a03 	vldr	s4, [r0, #12]
 8017cc8:	ee07 3a10 	vmov	s14, r3
 8017ccc:	edd0 5a04 	vldr	s11, [r0, #16]
 8017cd0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017cd4:	ed90 1a07 	vldr	s2, [r0, #28]
 8017cd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017cdc:	edd0 2a06 	vldr	s5, [r0, #24]
 8017ce0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017ce4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017ce8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017cec:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017cf0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017cf4:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017cf8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8017cfc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017cfe:	694a      	ldr	r2, [r1, #20]
 8017d00:	1b13      	subs	r3, r2, r4
 8017d02:	ee07 3a10 	vmov	s14, r3
 8017d06:	680b      	ldr	r3, [r1, #0]
 8017d08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017d0c:	1b1b      	subs	r3, r3, r4
 8017d0e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017d12:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017d16:	ee07 3a10 	vmov	s14, r3
 8017d1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017d1e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017d22:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017d26:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017d2a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8017d2e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017d30:	698b      	ldr	r3, [r1, #24]
 8017d32:	1a9b      	subs	r3, r3, r2
 8017d34:	ee06 3a90 	vmov	s13, r3
 8017d38:	684b      	ldr	r3, [r1, #4]
 8017d3a:	1a9b      	subs	r3, r3, r2
 8017d3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017d40:	ee07 3a10 	vmov	s14, r3
 8017d44:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017d48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017d4c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017d50:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017d54:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017d58:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017d5c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8017d60:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017d62:	694a      	ldr	r2, [r1, #20]
 8017d64:	1b13      	subs	r3, r2, r4
 8017d66:	ee07 3a10 	vmov	s14, r3
 8017d6a:	680b      	ldr	r3, [r1, #0]
 8017d6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017d70:	1b1b      	subs	r3, r3, r4
 8017d72:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017d76:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8017d7a:	ee07 3a10 	vmov	s14, r3
 8017d7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017d82:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017d86:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017d8a:	edd0 5a08 	vldr	s11, [r0, #32]
 8017d8e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8017d92:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8017d96:	ee25 5a06 	vmul.f32	s10, s10, s12
 8017d9a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8017d9e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017da0:	698b      	ldr	r3, [r1, #24]
 8017da2:	1a9b      	subs	r3, r3, r2
 8017da4:	ee07 3a10 	vmov	s14, r3
 8017da8:	684b      	ldr	r3, [r1, #4]
 8017daa:	1a9b      	subs	r3, r3, r2
 8017dac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017db0:	ee01 3a90 	vmov	s3, r3
 8017db4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017db8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017dbc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8017dc0:	ee61 1a84 	vmul.f32	s3, s3, s8
 8017dc4:	eea1 7a21 	vfma.f32	s14, s2, s3
 8017dc8:	ee27 7a03 	vmul.f32	s14, s14, s6
 8017dcc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017dd0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017dd2:	694a      	ldr	r2, [r1, #20]
 8017dd4:	1b13      	subs	r3, r2, r4
 8017dd6:	ee03 3a10 	vmov	s6, r3
 8017dda:	680b      	ldr	r3, [r1, #0]
 8017ddc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017de0:	1b1b      	subs	r3, r3, r4
 8017de2:	ee23 3a04 	vmul.f32	s6, s6, s8
 8017de6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8017dea:	ee03 3a10 	vmov	s6, r3
 8017dee:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017df2:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017df6:	eee1 5a04 	vfma.f32	s11, s2, s8
 8017dfa:	ee25 6a86 	vmul.f32	s12, s11, s12
 8017dfe:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8017e02:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8017e06:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8017e0a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8017e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e12:	dd13      	ble.n	8017e3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017e18:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017e1c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017e1e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e2a:	dd15      	ble.n	8017e58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017e30:	6403      	str	r3, [r0, #64]	; 0x40
 8017e32:	bd70      	pop	{r4, r5, r6, pc}
 8017e34:	4623      	mov	r3, r4
 8017e36:	e6fd      	b.n	8017c34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017e38:	462a      	mov	r2, r5
 8017e3a:	e706      	b.n	8017c4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017e3c:	d502      	bpl.n	8017e44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8017e3e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017e42:	e7e9      	b.n	8017e18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017e44:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017e48:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017e4c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e54:	dade      	bge.n	8017e14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017e56:	e7f2      	b.n	8017e3e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017e58:	d502      	bpl.n	8017e60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8017e5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017e5e:	e7e7      	b.n	8017e30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017e60:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017e64:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017e68:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e70:	dadc      	bge.n	8017e2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017e72:	e7f2      	b.n	8017e5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017e74:	3d800000 	.word	0x3d800000

08017e78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e7c:	2714      	movs	r7, #20
 8017e7e:	435f      	muls	r7, r3
 8017e80:	eb02 0c07 	add.w	ip, r2, r7
 8017e84:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017e88:	f115 0e0f 	adds.w	lr, r5, #15
 8017e8c:	f100 80a2 	bmi.w	8017fd4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017e90:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8017e94:	9c08      	ldr	r4, [sp, #32]
 8017e96:	2614      	movs	r6, #20
 8017e98:	f8c0 e014 	str.w	lr, [r0, #20]
 8017e9c:	4366      	muls	r6, r4
 8017e9e:	eb02 0806 	add.w	r8, r2, r6
 8017ea2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017ea6:	f115 040f 	adds.w	r4, r5, #15
 8017eaa:	f100 809f 	bmi.w	8017fec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8017eae:	1124      	asrs	r4, r4, #4
 8017eb0:	eba4 040e 	sub.w	r4, r4, lr
 8017eb4:	6184      	str	r4, [r0, #24]
 8017eb6:	2c00      	cmp	r4, #0
 8017eb8:	f000 808a 	beq.w	8017fd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8017ebc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8017ec0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017ec4:	5995      	ldr	r5, [r2, r6]
 8017ec6:	eba4 0809 	sub.w	r8, r4, r9
 8017eca:	59d4      	ldr	r4, [r2, r7]
 8017ecc:	eba5 0a04 	sub.w	sl, r5, r4
 8017ed0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8017ed4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8017ed8:	fb0e fe05 	mul.w	lr, lr, r5
 8017edc:	fb0a ee19 	mls	lr, sl, r9, lr
 8017ee0:	fb08 e404 	mla	r4, r8, r4, lr
 8017ee4:	3c01      	subs	r4, #1
 8017ee6:	19a4      	adds	r4, r4, r6
 8017ee8:	f100 808c 	bmi.w	8018004 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8017eec:	fb94 fef6 	sdiv	lr, r4, r6
 8017ef0:	fb06 441e 	mls	r4, r6, lr, r4
 8017ef4:	f8c0 e000 	str.w	lr, [r0]
 8017ef8:	6104      	str	r4, [r0, #16]
 8017efa:	2d00      	cmp	r5, #0
 8017efc:	f2c0 8095 	blt.w	801802a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8017f00:	fb95 f4f6 	sdiv	r4, r5, r6
 8017f04:	fb06 5514 	mls	r5, r6, r4, r5
 8017f08:	6044      	str	r4, [r0, #4]
 8017f0a:	6085      	str	r5, [r0, #8]
 8017f0c:	60c6      	str	r6, [r0, #12]
 8017f0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017f12:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017f16:	6945      	ldr	r5, [r0, #20]
 8017f18:	59d2      	ldr	r2, [r2, r7]
 8017f1a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8017f1e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801804c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8017f22:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8017f26:	ee07 4a10 	vmov	s14, r4
 8017f2a:	6804      	ldr	r4, [r0, #0]
 8017f2c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8017f30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017f34:	ee07 2a90 	vmov	s15, r2
 8017f38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017f44:	edd3 6a00 	vldr	s13, [r3]
 8017f48:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017f4c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8017f50:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017f54:	edc0 6a07 	vstr	s13, [r0, #28]
 8017f58:	edd0 6a01 	vldr	s13, [r0, #4]
 8017f5c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8017f60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017f64:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8017f68:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017f6c:	ed80 6a08 	vstr	s12, [r0, #32]
 8017f70:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8017f72:	6242      	str	r2, [r0, #36]	; 0x24
 8017f74:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8017f78:	ed93 6a03 	vldr	s12, [r3, #12]
 8017f7c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017f80:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8017f84:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017f88:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8017f8c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8017f90:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8017f94:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017f98:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8017f9c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017f9e:	6302      	str	r2, [r0, #48]	; 0x30
 8017fa0:	ed93 6a06 	vldr	s12, [r3, #24]
 8017fa4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8017fa8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017fac:	eeb0 7a46 	vmov.f32	s14, s12
 8017fb0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8017fb4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017fb8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017fbc:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8017fc0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8017fc4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017fc8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8017fcc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8017fce:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fd4:	2410      	movs	r4, #16
 8017fd6:	f1c5 0501 	rsb	r5, r5, #1
 8017fda:	fb9e fef4 	sdiv	lr, lr, r4
 8017fde:	f015 050f 	ands.w	r5, r5, #15
 8017fe2:	bf18      	it	ne
 8017fe4:	2501      	movne	r5, #1
 8017fe6:	ebae 0e05 	sub.w	lr, lr, r5
 8017fea:	e753      	b.n	8017e94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8017fec:	f04f 0910 	mov.w	r9, #16
 8017ff0:	f1c5 0501 	rsb	r5, r5, #1
 8017ff4:	fb94 f4f9 	sdiv	r4, r4, r9
 8017ff8:	f015 050f 	ands.w	r5, r5, #15
 8017ffc:	bf18      	it	ne
 8017ffe:	2501      	movne	r5, #1
 8018000:	1b64      	subs	r4, r4, r5
 8018002:	e755      	b.n	8017eb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018004:	4264      	negs	r4, r4
 8018006:	fb94 fef6 	sdiv	lr, r4, r6
 801800a:	f1ce 0800 	rsb	r8, lr, #0
 801800e:	fb06 441e 	mls	r4, r6, lr, r4
 8018012:	f8c0 8000 	str.w	r8, [r0]
 8018016:	6104      	str	r4, [r0, #16]
 8018018:	2c00      	cmp	r4, #0
 801801a:	f43f af6e 	beq.w	8017efa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801801e:	ea6f 0e0e 	mvn.w	lr, lr
 8018022:	1b34      	subs	r4, r6, r4
 8018024:	f8c0 e000 	str.w	lr, [r0]
 8018028:	e766      	b.n	8017ef8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801802a:	426d      	negs	r5, r5
 801802c:	fb95 f4f6 	sdiv	r4, r5, r6
 8018030:	f1c4 0e00 	rsb	lr, r4, #0
 8018034:	fb06 5514 	mls	r5, r6, r4, r5
 8018038:	f8c0 e004 	str.w	lr, [r0, #4]
 801803c:	6085      	str	r5, [r0, #8]
 801803e:	2d00      	cmp	r5, #0
 8018040:	f43f af64 	beq.w	8017f0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018044:	43e4      	mvns	r4, r4
 8018046:	1b75      	subs	r5, r6, r5
 8018048:	6044      	str	r4, [r0, #4]
 801804a:	e75e      	b.n	8017f0a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801804c:	3d800000 	.word	0x3d800000

08018050 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018050:	4602      	mov	r2, r0
 8018052:	b148      	cbz	r0, 8018068 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018054:	2300      	movs	r3, #0
 8018056:	b298      	uxth	r0, r3
 8018058:	3301      	adds	r3, #1
 801805a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801805e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018062:	2900      	cmp	r1, #0
 8018064:	d1f7      	bne.n	8018056 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018066:	4770      	bx	lr
 8018068:	4770      	bx	lr
	...

0801806c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801806c:	4b01      	ldr	r3, [pc, #4]	; (8018074 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801806e:	6018      	str	r0, [r3, #0]
 8018070:	4770      	bx	lr
 8018072:	bf00      	nop
 8018074:	2400c8b4 	.word	0x2400c8b4

08018078 <_ZN8touchgfx11FontManager7getFontEt>:
 8018078:	4b03      	ldr	r3, [pc, #12]	; (8018088 <_ZN8touchgfx11FontManager7getFontEt+0x10>)
 801807a:	4601      	mov	r1, r0
 801807c:	6818      	ldr	r0, [r3, #0]
 801807e:	b110      	cbz	r0, 8018086 <_ZN8touchgfx11FontManager7getFontEt+0xe>
 8018080:	6803      	ldr	r3, [r0, #0]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	4718      	bx	r3
 8018086:	4770      	bx	lr
 8018088:	2400c8b4 	.word	0x2400c8b4

0801808c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801808c:	4b06      	ldr	r3, [pc, #24]	; (80180a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801808e:	881a      	ldrh	r2, [r3, #0]
 8018090:	4282      	cmp	r2, r0
 8018092:	d807      	bhi.n	80180a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8018094:	4b05      	ldr	r3, [pc, #20]	; (80180ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8018096:	881b      	ldrh	r3, [r3, #0]
 8018098:	4413      	add	r3, r2
 801809a:	4298      	cmp	r0, r3
 801809c:	bfac      	ite	ge
 801809e:	2000      	movge	r0, #0
 80180a0:	2001      	movlt	r0, #1
 80180a2:	4770      	bx	lr
 80180a4:	2000      	movs	r0, #0
 80180a6:	4770      	bx	lr
 80180a8:	2400c8d4 	.word	0x2400c8d4
 80180ac:	2400c8d8 	.word	0x2400c8d8

080180b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80180b0:	b508      	push	{r3, lr}
 80180b2:	4601      	mov	r1, r0
 80180b4:	f7ff ffea 	bl	801808c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80180b8:	b118      	cbz	r0, 80180c2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80180ba:	4b02      	ldr	r3, [pc, #8]	; (80180c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80180c2:	bd08      	pop	{r3, pc}
 80180c4:	2400c8b8 	.word	0x2400c8b8

080180c8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80180c8:	b538      	push	{r3, r4, r5, lr}
 80180ca:	4604      	mov	r4, r0
 80180cc:	f7ff ffde 	bl	801808c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80180d0:	b188      	cbz	r0, 80180f6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 80180d2:	4b09      	ldr	r3, [pc, #36]	; (80180f8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 80180d4:	881a      	ldrh	r2, [r3, #0]
 80180d6:	4b09      	ldr	r3, [pc, #36]	; (80180fc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 80180d8:	1aa4      	subs	r4, r4, r2
 80180da:	220e      	movs	r2, #14
 80180dc:	681d      	ldr	r5, [r3, #0]
 80180de:	4362      	muls	r2, r4
 80180e0:	18ac      	adds	r4, r5, r2
 80180e2:	7b23      	ldrb	r3, [r4, #12]
 80180e4:	f013 0320 	ands.w	r3, r3, #32
 80180e8:	bf17      	itett	ne
 80180ea:	680b      	ldrne	r3, [r1, #0]
 80180ec:	4618      	moveq	r0, r3
 80180ee:	50ab      	strne	r3, [r5, r2]
 80180f0:	684b      	ldrne	r3, [r1, #4]
 80180f2:	bf18      	it	ne
 80180f4:	6063      	strne	r3, [r4, #4]
 80180f6:	bd38      	pop	{r3, r4, r5, pc}
 80180f8:	2400c8d4 	.word	0x2400c8d4
 80180fc:	2400c8bc 	.word	0x2400c8bc

08018100 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8018100:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018104:	4606      	mov	r6, r0
 8018106:	460c      	mov	r4, r1
 8018108:	f7ff ffc0 	bl	801808c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801810c:	b918      	cbnz	r0, 8018116 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801810e:	2000      	movs	r0, #0
 8018110:	b002      	add	sp, #8
 8018112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018116:	4608      	mov	r0, r1
 8018118:	f7f9 fef3 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 801811c:	2800      	cmp	r0, #0
 801811e:	d1f6      	bne.n	801810e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018120:	4b3f      	ldr	r3, [pc, #252]	; (8018220 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8018122:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8018224 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8018126:	881d      	ldrh	r5, [r3, #0]
 8018128:	f8d9 a000 	ldr.w	sl, [r9]
 801812c:	46c8      	mov	r8, r9
 801812e:	1b73      	subs	r3, r6, r5
 8018130:	250e      	movs	r5, #14
 8018132:	435d      	muls	r5, r3
 8018134:	eb0a 0705 	add.w	r7, sl, r5
 8018138:	7b3b      	ldrb	r3, [r7, #12]
 801813a:	f013 0f20 	tst.w	r3, #32
 801813e:	d0e6      	beq.n	801810e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018140:	4621      	mov	r1, r4
 8018142:	4638      	mov	r0, r7
 8018144:	f7fd fc20 	bl	8015988 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018148:	2800      	cmp	r0, #0
 801814a:	d1e1      	bne.n	8018110 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801814c:	4639      	mov	r1, r7
 801814e:	4620      	mov	r0, r4
 8018150:	f7fd fc1a 	bl	8015988 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018154:	b108      	cbz	r0, 801815a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8018156:	4621      	mov	r1, r4
 8018158:	e020      	b.n	801819c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801815a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801815e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8018162:	429a      	cmp	r2, r3
 8018164:	d11e      	bne.n	80181a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018166:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801816a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801816e:	429a      	cmp	r2, r3
 8018170:	d118      	bne.n	80181a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018172:	6820      	ldr	r0, [r4, #0]
 8018174:	466b      	mov	r3, sp
 8018176:	6861      	ldr	r1, [r4, #4]
 8018178:	c303      	stmia	r3!, {r0, r1}
 801817a:	4639      	mov	r1, r7
 801817c:	4668      	mov	r0, sp
 801817e:	f7f9 ffb0 	bl	80120e2 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018182:	f8d9 3000 	ldr.w	r3, [r9]
 8018186:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801818a:	442b      	add	r3, r5
 801818c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018190:	4413      	add	r3, r2
 8018192:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8018196:	4293      	cmp	r3, r2
 8018198:	dc04      	bgt.n	80181a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801819a:	4669      	mov	r1, sp
 801819c:	4630      	mov	r0, r6
 801819e:	f7ff ff93 	bl	80180c8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80181a2:	e7b5      	b.n	8018110 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80181a4:	f8d8 3000 	ldr.w	r3, [r8]
 80181a8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80181ac:	442b      	add	r3, r5
 80181ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80181b2:	4291      	cmp	r1, r2
 80181b4:	d119      	bne.n	80181ea <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80181b6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80181ba:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80181be:	4291      	cmp	r1, r2
 80181c0:	d113      	bne.n	80181ea <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80181c2:	6820      	ldr	r0, [r4, #0]
 80181c4:	466a      	mov	r2, sp
 80181c6:	6861      	ldr	r1, [r4, #4]
 80181c8:	c203      	stmia	r2!, {r0, r1}
 80181ca:	4619      	mov	r1, r3
 80181cc:	4668      	mov	r0, sp
 80181ce:	f7f9 ff88 	bl	80120e2 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80181d2:	f8d8 3000 	ldr.w	r3, [r8]
 80181d6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80181da:	442b      	add	r3, r5
 80181dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80181e0:	4413      	add	r3, r2
 80181e2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80181e6:	4293      	cmp	r3, r2
 80181e8:	ddd7      	ble.n	801819a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80181ea:	4620      	mov	r0, r4
 80181ec:	f7f9 fe89 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 80181f0:	b990      	cbnz	r0, 8018218 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80181f2:	88a7      	ldrh	r7, [r4, #4]
 80181f4:	88e3      	ldrh	r3, [r4, #6]
 80181f6:	fb17 f703 	smulbb	r7, r7, r3
 80181fa:	f8d8 3000 	ldr.w	r3, [r8]
 80181fe:	441d      	add	r5, r3
 8018200:	4628      	mov	r0, r5
 8018202:	f7f9 fe7e 	bl	8011f02 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018206:	b948      	cbnz	r0, 801821c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8018208:	88ab      	ldrh	r3, [r5, #4]
 801820a:	88ea      	ldrh	r2, [r5, #6]
 801820c:	fb13 f302 	smulbb	r3, r3, r2
 8018210:	42bb      	cmp	r3, r7
 8018212:	f6bf af7c 	bge.w	801810e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018216:	e79e      	b.n	8018156 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8018218:	2700      	movs	r7, #0
 801821a:	e7ee      	b.n	80181fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801821c:	2300      	movs	r3, #0
 801821e:	e7f7      	b.n	8018210 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8018220:	2400c8d4 	.word	0x2400c8d4
 8018224:	2400c8bc 	.word	0x2400c8bc

08018228 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801822a:	4c24      	ldr	r4, [pc, #144]	; (80182bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801822c:	6823      	ldr	r3, [r4, #0]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d042      	beq.n	80182b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018232:	4a23      	ldr	r2, [pc, #140]	; (80182c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8018234:	4d23      	ldr	r5, [pc, #140]	; (80182c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8018236:	8811      	ldrh	r1, [r2, #0]
 8018238:	f8b5 c000 	ldrh.w	ip, [r5]
 801823c:	4822      	ldr	r0, [pc, #136]	; (80182c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801823e:	4461      	add	r1, ip
 8018240:	1c4a      	adds	r2, r1, #1
 8018242:	008f      	lsls	r7, r1, #2
 8018244:	f022 0201 	bic.w	r2, r2, #1
 8018248:	19de      	adds	r6, r3, r7
 801824a:	0412      	lsls	r2, r2, #16
 801824c:	6006      	str	r6, [r0, #0]
 801824e:	4e1f      	ldr	r6, [pc, #124]	; (80182cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018250:	0c12      	lsrs	r2, r2, #16
 8018252:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8018256:	19da      	adds	r2, r3, r7
 8018258:	6032      	str	r2, [r6, #0]
 801825a:	220e      	movs	r2, #14
 801825c:	fb02 f20c 	mul.w	r2, r2, ip
 8018260:	3203      	adds	r2, #3
 8018262:	f022 0203 	bic.w	r2, r2, #3
 8018266:	443a      	add	r2, r7
 8018268:	4f19      	ldr	r7, [pc, #100]	; (80182d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801826a:	4413      	add	r3, r2
 801826c:	603b      	str	r3, [r7, #0]
 801826e:	2300      	movs	r3, #0
 8018270:	4f18      	ldr	r7, [pc, #96]	; (80182d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018272:	469c      	mov	ip, r3
 8018274:	803b      	strh	r3, [r7, #0]
 8018276:	4f18      	ldr	r7, [pc, #96]	; (80182d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018278:	683f      	ldr	r7, [r7, #0]
 801827a:	1aba      	subs	r2, r7, r2
 801827c:	4f17      	ldr	r7, [pc, #92]	; (80182dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801827e:	603a      	str	r2, [r7, #0]
 8018280:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018284:	4a16      	ldr	r2, [pc, #88]	; (80182e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018286:	8013      	strh	r3, [r2, #0]
 8018288:	428b      	cmp	r3, r1
 801828a:	d10d      	bne.n	80182a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801828c:	882d      	ldrh	r5, [r5, #0]
 801828e:	2300      	movs	r3, #0
 8018290:	6830      	ldr	r0, [r6, #0]
 8018292:	240e      	movs	r4, #14
 8018294:	429d      	cmp	r5, r3
 8018296:	d90f      	bls.n	80182b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018298:	fb04 0203 	mla	r2, r4, r3, r0
 801829c:	3301      	adds	r3, #1
 801829e:	7b11      	ldrb	r1, [r2, #12]
 80182a0:	f36f 1145 	bfc	r1, #5, #1
 80182a4:	7311      	strb	r1, [r2, #12]
 80182a6:	e7f5      	b.n	8018294 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80182a8:	6822      	ldr	r2, [r4, #0]
 80182aa:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80182ae:	6802      	ldr	r2, [r0, #0]
 80182b0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80182b4:	3301      	adds	r3, #1
 80182b6:	e7e7      	b.n	8018288 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80182b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182ba:	bf00      	nop
 80182bc:	2400c8b8 	.word	0x2400c8b8
 80182c0:	2400c8d4 	.word	0x2400c8d4
 80182c4:	2400c8d8 	.word	0x2400c8d8
 80182c8:	2400c8cc 	.word	0x2400c8cc
 80182cc:	2400c8bc 	.word	0x2400c8bc
 80182d0:	2400c8c4 	.word	0x2400c8c4
 80182d4:	2400c8d6 	.word	0x2400c8d6
 80182d8:	2400c8c0 	.word	0x2400c8c0
 80182dc:	2400c8d0 	.word	0x2400c8d0
 80182e0:	2400c8c8 	.word	0x2400c8c8

080182e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80182e4:	4b06      	ldr	r3, [pc, #24]	; (8018300 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	b943      	cbnz	r3, 80182fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80182ea:	b139      	cbz	r1, 80182fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80182ec:	4b05      	ldr	r3, [pc, #20]	; (8018304 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80182ee:	801a      	strh	r2, [r3, #0]
 80182f0:	4b05      	ldr	r3, [pc, #20]	; (8018308 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80182f2:	6019      	str	r1, [r3, #0]
 80182f4:	4b05      	ldr	r3, [pc, #20]	; (801830c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80182f6:	6018      	str	r0, [r3, #0]
 80182f8:	f7ff bf96 	b.w	8018228 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80182fc:	4770      	bx	lr
 80182fe:	bf00      	nop
 8018300:	2400c8c4 	.word	0x2400c8c4
 8018304:	2400c8d8 	.word	0x2400c8d8
 8018308:	2400c8c0 	.word	0x2400c8c0
 801830c:	2400c8b8 	.word	0x2400c8b8

08018310 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018310:	b470      	push	{r4, r5, r6}
 8018312:	4c07      	ldr	r4, [pc, #28]	; (8018330 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018314:	4605      	mov	r5, r0
 8018316:	4610      	mov	r0, r2
 8018318:	9a03      	ldr	r2, [sp, #12]
 801831a:	6826      	ldr	r6, [r4, #0]
 801831c:	b936      	cbnz	r6, 801832c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801831e:	6025      	str	r5, [r4, #0]
 8018320:	4c04      	ldr	r4, [pc, #16]	; (8018334 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018322:	8021      	strh	r1, [r4, #0]
 8018324:	4619      	mov	r1, r3
 8018326:	bc70      	pop	{r4, r5, r6}
 8018328:	f7ff bfdc 	b.w	80182e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801832c:	bc70      	pop	{r4, r5, r6}
 801832e:	4770      	bx	lr
 8018330:	2400c8dc 	.word	0x2400c8dc
 8018334:	2400c8d4 	.word	0x2400c8d4

08018338 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018338:	4a12      	ldr	r2, [pc, #72]	; (8018384 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801833a:	8803      	ldrh	r3, [r0, #0]
 801833c:	8812      	ldrh	r2, [r2, #0]
 801833e:	4293      	cmp	r3, r2
 8018340:	d207      	bcs.n	8018352 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018342:	4a11      	ldr	r2, [pc, #68]	; (8018388 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018344:	2114      	movs	r1, #20
 8018346:	6812      	ldr	r2, [r2, #0]
 8018348:	fb01 2303 	mla	r3, r1, r3, r2
 801834c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018350:	4770      	bx	lr
 8018352:	490e      	ldr	r1, [pc, #56]	; (801838c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018354:	8809      	ldrh	r1, [r1, #0]
 8018356:	4411      	add	r1, r2
 8018358:	428b      	cmp	r3, r1
 801835a:	da04      	bge.n	8018366 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801835c:	1a9b      	subs	r3, r3, r2
 801835e:	4a0c      	ldr	r2, [pc, #48]	; (8018390 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018360:	210e      	movs	r1, #14
 8018362:	6812      	ldr	r2, [r2, #0]
 8018364:	e7f0      	b.n	8018348 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8018366:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801836a:	4293      	cmp	r3, r2
 801836c:	d108      	bne.n	8018380 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801836e:	4b09      	ldr	r3, [pc, #36]	; (8018394 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018370:	781b      	ldrb	r3, [r3, #0]
 8018372:	b91b      	cbnz	r3, 801837c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018374:	4b08      	ldr	r3, [pc, #32]	; (8018398 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018376:	f9b3 0000 	ldrsh.w	r0, [r3]
 801837a:	4770      	bx	lr
 801837c:	4b07      	ldr	r3, [pc, #28]	; (801839c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801837e:	e7fa      	b.n	8018376 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018380:	2000      	movs	r0, #0
 8018382:	4770      	bx	lr
 8018384:	2400c8d4 	.word	0x2400c8d4
 8018388:	2400c8dc 	.word	0x2400c8dc
 801838c:	2400c8d8 	.word	0x2400c8d8
 8018390:	2400c8bc 	.word	0x2400c8bc
 8018394:	2400c84c 	.word	0x2400c84c
 8018398:	2400c84e 	.word	0x2400c84e
 801839c:	2400c850 	.word	0x2400c850

080183a0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80183a0:	4a12      	ldr	r2, [pc, #72]	; (80183ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80183a2:	8803      	ldrh	r3, [r0, #0]
 80183a4:	8812      	ldrh	r2, [r2, #0]
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d207      	bcs.n	80183ba <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80183aa:	4a11      	ldr	r2, [pc, #68]	; (80183f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80183ac:	2114      	movs	r1, #20
 80183ae:	6812      	ldr	r2, [r2, #0]
 80183b0:	fb01 2303 	mla	r3, r1, r3, r2
 80183b4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80183b8:	4770      	bx	lr
 80183ba:	490e      	ldr	r1, [pc, #56]	; (80183f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80183bc:	8809      	ldrh	r1, [r1, #0]
 80183be:	4411      	add	r1, r2
 80183c0:	428b      	cmp	r3, r1
 80183c2:	da04      	bge.n	80183ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80183c4:	1a9b      	subs	r3, r3, r2
 80183c6:	4a0c      	ldr	r2, [pc, #48]	; (80183f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80183c8:	210e      	movs	r1, #14
 80183ca:	6812      	ldr	r2, [r2, #0]
 80183cc:	e7f0      	b.n	80183b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80183ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80183d2:	4293      	cmp	r3, r2
 80183d4:	d108      	bne.n	80183e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80183d6:	4b09      	ldr	r3, [pc, #36]	; (80183fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	b91b      	cbnz	r3, 80183e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80183dc:	4b08      	ldr	r3, [pc, #32]	; (8018400 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80183de:	f9b3 0000 	ldrsh.w	r0, [r3]
 80183e2:	4770      	bx	lr
 80183e4:	4b07      	ldr	r3, [pc, #28]	; (8018404 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80183e6:	e7fa      	b.n	80183de <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80183e8:	2000      	movs	r0, #0
 80183ea:	4770      	bx	lr
 80183ec:	2400c8d4 	.word	0x2400c8d4
 80183f0:	2400c8dc 	.word	0x2400c8dc
 80183f4:	2400c8d8 	.word	0x2400c8d8
 80183f8:	2400c8bc 	.word	0x2400c8bc
 80183fc:	2400c84c 	.word	0x2400c84c
 8018400:	2400c850 	.word	0x2400c850
 8018404:	2400c84e 	.word	0x2400c84e

08018408 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018408:	4a1f      	ldr	r2, [pc, #124]	; (8018488 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801840a:	b510      	push	{r4, lr}
 801840c:	880b      	ldrh	r3, [r1, #0]
 801840e:	8812      	ldrh	r2, [r2, #0]
 8018410:	4293      	cmp	r3, r2
 8018412:	d213      	bcs.n	801843c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8018414:	4a1d      	ldr	r2, [pc, #116]	; (801848c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8018416:	2114      	movs	r1, #20
 8018418:	6812      	ldr	r2, [r2, #0]
 801841a:	fb01 2303 	mla	r3, r1, r3, r2
 801841e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018422:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018426:	8a1a      	ldrh	r2, [r3, #16]
 8018428:	8a5b      	ldrh	r3, [r3, #18]
 801842a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801842e:	8004      	strh	r4, [r0, #0]
 8018430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018434:	8041      	strh	r1, [r0, #2]
 8018436:	8082      	strh	r2, [r0, #4]
 8018438:	80c3      	strh	r3, [r0, #6]
 801843a:	e00e      	b.n	801845a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801843c:	4914      	ldr	r1, [pc, #80]	; (8018490 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801843e:	8809      	ldrh	r1, [r1, #0]
 8018440:	4411      	add	r1, r2
 8018442:	428b      	cmp	r3, r1
 8018444:	da0a      	bge.n	801845c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8018446:	1a9b      	subs	r3, r3, r2
 8018448:	4a12      	ldr	r2, [pc, #72]	; (8018494 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801844a:	210e      	movs	r1, #14
 801844c:	6812      	ldr	r2, [r2, #0]
 801844e:	fb01 2303 	mla	r3, r1, r3, r2
 8018452:	681a      	ldr	r2, [r3, #0]
 8018454:	6002      	str	r2, [r0, #0]
 8018456:	685a      	ldr	r2, [r3, #4]
 8018458:	6042      	str	r2, [r0, #4]
 801845a:	bd10      	pop	{r4, pc}
 801845c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018460:	4293      	cmp	r3, r2
 8018462:	d10b      	bne.n	801847c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018464:	4b0c      	ldr	r3, [pc, #48]	; (8018498 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018466:	f9b3 1000 	ldrsh.w	r1, [r3]
 801846a:	4b0c      	ldr	r3, [pc, #48]	; (801849c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801846c:	8081      	strh	r1, [r0, #4]
 801846e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018472:	2300      	movs	r3, #0
 8018474:	80c2      	strh	r2, [r0, #6]
 8018476:	8003      	strh	r3, [r0, #0]
 8018478:	8043      	strh	r3, [r0, #2]
 801847a:	e7ee      	b.n	801845a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801847c:	2300      	movs	r3, #0
 801847e:	8003      	strh	r3, [r0, #0]
 8018480:	8043      	strh	r3, [r0, #2]
 8018482:	8083      	strh	r3, [r0, #4]
 8018484:	e7d8      	b.n	8018438 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018486:	bf00      	nop
 8018488:	2400c8d4 	.word	0x2400c8d4
 801848c:	2400c8dc 	.word	0x2400c8dc
 8018490:	2400c8d8 	.word	0x2400c8d8
 8018494:	2400c8bc 	.word	0x2400c8bc
 8018498:	2400c848 	.word	0x2400c848
 801849c:	2400c84a 	.word	0x2400c84a

080184a0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80184a0:	4a12      	ldr	r2, [pc, #72]	; (80184ec <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80184a2:	8803      	ldrh	r3, [r0, #0]
 80184a4:	8811      	ldrh	r1, [r2, #0]
 80184a6:	428b      	cmp	r3, r1
 80184a8:	d20b      	bcs.n	80184c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80184aa:	4a11      	ldr	r2, [pc, #68]	; (80184f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80184ac:	6812      	ldr	r2, [r2, #0]
 80184ae:	b112      	cbz	r2, 80184b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80184b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80184b4:	b9c0      	cbnz	r0, 80184e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80184b6:	4a0f      	ldr	r2, [pc, #60]	; (80184f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80184b8:	6811      	ldr	r1, [r2, #0]
 80184ba:	2214      	movs	r2, #20
 80184bc:	4353      	muls	r3, r2
 80184be:	58c8      	ldr	r0, [r1, r3]
 80184c0:	4770      	bx	lr
 80184c2:	4a0d      	ldr	r2, [pc, #52]	; (80184f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80184c4:	8812      	ldrh	r2, [r2, #0]
 80184c6:	440a      	add	r2, r1
 80184c8:	4293      	cmp	r3, r2
 80184ca:	da04      	bge.n	80184d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80184cc:	4a08      	ldr	r2, [pc, #32]	; (80184f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80184ce:	6812      	ldr	r2, [r2, #0]
 80184d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80184d4:	4770      	bx	lr
 80184d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80184da:	4293      	cmp	r3, r2
 80184dc:	d103      	bne.n	80184e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80184de:	4b07      	ldr	r3, [pc, #28]	; (80184fc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80184e4:	4770      	bx	lr
 80184e6:	2000      	movs	r0, #0
 80184e8:	4770      	bx	lr
 80184ea:	bf00      	nop
 80184ec:	2400c8d4 	.word	0x2400c8d4
 80184f0:	2400c8b8 	.word	0x2400c8b8
 80184f4:	2400c8dc 	.word	0x2400c8dc
 80184f8:	2400c8d8 	.word	0x2400c8d8
 80184fc:	2400c854 	.word	0x2400c854

08018500 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018500:	4b24      	ldr	r3, [pc, #144]	; (8018594 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018502:	8802      	ldrh	r2, [r0, #0]
 8018504:	8818      	ldrh	r0, [r3, #0]
 8018506:	4282      	cmp	r2, r0
 8018508:	d221      	bcs.n	801854e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801850a:	4b23      	ldr	r3, [pc, #140]	; (8018598 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801850c:	6819      	ldr	r1, [r3, #0]
 801850e:	2314      	movs	r3, #20
 8018510:	fb03 1302 	mla	r3, r3, r2, r1
 8018514:	6858      	ldr	r0, [r3, #4]
 8018516:	2800      	cmp	r0, #0
 8018518:	d03a      	beq.n	8018590 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801851a:	4920      	ldr	r1, [pc, #128]	; (801859c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801851c:	6809      	ldr	r1, [r1, #0]
 801851e:	2900      	cmp	r1, #0
 8018520:	d036      	beq.n	8018590 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018522:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018526:	2900      	cmp	r1, #0
 8018528:	d032      	beq.n	8018590 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801852a:	891a      	ldrh	r2, [r3, #8]
 801852c:	8958      	ldrh	r0, [r3, #10]
 801852e:	4350      	muls	r0, r2
 8018530:	7c5a      	ldrb	r2, [r3, #17]
 8018532:	7cdb      	ldrb	r3, [r3, #19]
 8018534:	0952      	lsrs	r2, r2, #5
 8018536:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801853a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801853e:	2b0b      	cmp	r3, #11
 8018540:	bf18      	it	ne
 8018542:	0040      	lslne	r0, r0, #1
 8018544:	3003      	adds	r0, #3
 8018546:	f020 0003 	bic.w	r0, r0, #3
 801854a:	4408      	add	r0, r1
 801854c:	4770      	bx	lr
 801854e:	4b14      	ldr	r3, [pc, #80]	; (80185a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018550:	881b      	ldrh	r3, [r3, #0]
 8018552:	4403      	add	r3, r0
 8018554:	429a      	cmp	r2, r3
 8018556:	da1a      	bge.n	801858e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018558:	4b12      	ldr	r3, [pc, #72]	; (80185a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801855a:	1a10      	subs	r0, r2, r0
 801855c:	210e      	movs	r1, #14
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	fb01 3000 	mla	r0, r1, r0, r3
 8018564:	7b03      	ldrb	r3, [r0, #12]
 8018566:	f003 031f 	and.w	r3, r3, #31
 801856a:	2b0b      	cmp	r3, #11
 801856c:	d10b      	bne.n	8018586 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801856e:	8903      	ldrh	r3, [r0, #8]
 8018570:	8940      	ldrh	r0, [r0, #10]
 8018572:	4358      	muls	r0, r3
 8018574:	4b09      	ldr	r3, [pc, #36]	; (801859c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018576:	3003      	adds	r0, #3
 8018578:	6819      	ldr	r1, [r3, #0]
 801857a:	f020 0303 	bic.w	r3, r0, #3
 801857e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8018582:	4418      	add	r0, r3
 8018584:	4770      	bx	lr
 8018586:	2b0d      	cmp	r3, #13
 8018588:	d101      	bne.n	801858e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801858a:	300d      	adds	r0, #13
 801858c:	4770      	bx	lr
 801858e:	2000      	movs	r0, #0
 8018590:	4770      	bx	lr
 8018592:	bf00      	nop
 8018594:	2400c8d4 	.word	0x2400c8d4
 8018598:	2400c8dc 	.word	0x2400c8dc
 801859c:	2400c8b8 	.word	0x2400c8b8
 80185a0:	2400c8d8 	.word	0x2400c8d8
 80185a4:	2400c8bc 	.word	0x2400c8bc

080185a8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80185a8:	4a17      	ldr	r2, [pc, #92]	; (8018608 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80185aa:	b510      	push	{r4, lr}
 80185ac:	8803      	ldrh	r3, [r0, #0]
 80185ae:	8812      	ldrh	r2, [r2, #0]
 80185b0:	4293      	cmp	r3, r2
 80185b2:	d20c      	bcs.n	80185ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80185b4:	4a15      	ldr	r2, [pc, #84]	; (801860c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80185b6:	2114      	movs	r1, #20
 80185b8:	6812      	ldr	r2, [r2, #0]
 80185ba:	fb01 2303 	mla	r3, r1, r3, r2
 80185be:	7c58      	ldrb	r0, [r3, #17]
 80185c0:	0942      	lsrs	r2, r0, #5
 80185c2:	7cd8      	ldrb	r0, [r3, #19]
 80185c4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80185c8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80185cc:	bd10      	pop	{r4, pc}
 80185ce:	4910      	ldr	r1, [pc, #64]	; (8018610 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80185d0:	8809      	ldrh	r1, [r1, #0]
 80185d2:	4411      	add	r1, r2
 80185d4:	428b      	cmp	r3, r1
 80185d6:	da09      	bge.n	80185ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80185d8:	1a9b      	subs	r3, r3, r2
 80185da:	4a0e      	ldr	r2, [pc, #56]	; (8018614 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80185dc:	210e      	movs	r1, #14
 80185de:	6812      	ldr	r2, [r2, #0]
 80185e0:	fb01 2303 	mla	r3, r1, r3, r2
 80185e4:	7b18      	ldrb	r0, [r3, #12]
 80185e6:	f000 001f 	and.w	r0, r0, #31
 80185ea:	e7ef      	b.n	80185cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80185ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80185f0:	4293      	cmp	r3, r2
 80185f2:	d106      	bne.n	8018602 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80185f4:	f7f9 ff94 	bl	8012520 <_ZN8touchgfx3HAL3lcdEv>
 80185f8:	6803      	ldr	r3, [r0, #0]
 80185fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018600:	4718      	bx	r3
 8018602:	2000      	movs	r0, #0
 8018604:	e7e2      	b.n	80185cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018606:	bf00      	nop
 8018608:	2400c8d4 	.word	0x2400c8d4
 801860c:	2400c8dc 	.word	0x2400c8dc
 8018610:	2400c8d8 	.word	0x2400c8d8
 8018614:	2400c8bc 	.word	0x2400c8bc

08018618 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8018618:	2018      	movs	r0, #24
 801861a:	4770      	bx	lr

0801861c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801861c:	2001      	movs	r0, #1
 801861e:	4770      	bx	lr

08018620 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8018620:	4b02      	ldr	r3, [pc, #8]	; (801862c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8018622:	8818      	ldrh	r0, [r3, #0]
 8018624:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018628:	b280      	uxth	r0, r0
 801862a:	4770      	bx	lr
 801862c:	2400c84e 	.word	0x2400c84e

08018630 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018630:	2bff      	cmp	r3, #255	; 0xff
 8018632:	d040      	beq.n	80186b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8018634:	2a2c      	cmp	r2, #44	; 0x2c
 8018636:	d02a      	beq.n	801868e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8018638:	d80f      	bhi.n	801865a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801863a:	2a08      	cmp	r2, #8
 801863c:	d037      	beq.n	80186ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801863e:	d805      	bhi.n	801864c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8018640:	2a04      	cmp	r2, #4
 8018642:	d032      	beq.n	80186aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8018644:	2a05      	cmp	r2, #5
 8018646:	d02e      	beq.n	80186a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8018648:	2000      	movs	r0, #0
 801864a:	4770      	bx	lr
 801864c:	2a0a      	cmp	r2, #10
 801864e:	d02e      	beq.n	80186ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018650:	d301      	bcc.n	8018656 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8018652:	2a0b      	cmp	r2, #11
 8018654:	d1f8      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018656:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018658:	4770      	bx	lr
 801865a:	2a30      	cmp	r2, #48	; 0x30
 801865c:	d029      	beq.n	80186b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801865e:	d808      	bhi.n	8018672 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8018660:	2a2e      	cmp	r2, #46	; 0x2e
 8018662:	684b      	ldr	r3, [r1, #4]
 8018664:	d01a      	beq.n	801869c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8018666:	d90b      	bls.n	8018680 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d1ec      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801866e:	6a00      	ldr	r0, [r0, #32]
 8018670:	4770      	bx	lr
 8018672:	2a32      	cmp	r2, #50	; 0x32
 8018674:	d01d      	beq.n	80186b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8018676:	d301      	bcc.n	801867c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8018678:	2a33      	cmp	r2, #51	; 0x33
 801867a:	d1e5      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801867c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801867e:	4770      	bx	lr
 8018680:	781b      	ldrb	r3, [r3, #0]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d0f3      	beq.n	801866e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8018686:	2b01      	cmp	r3, #1
 8018688:	d1de      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801868a:	6900      	ldr	r0, [r0, #16]
 801868c:	4770      	bx	lr
 801868e:	684b      	ldr	r3, [r1, #4]
 8018690:	781b      	ldrb	r3, [r3, #0]
 8018692:	b133      	cbz	r3, 80186a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8018694:	2b01      	cmp	r3, #1
 8018696:	d1d7      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018698:	6880      	ldr	r0, [r0, #8]
 801869a:	4770      	bx	lr
 801869c:	781b      	ldrb	r3, [r3, #0]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d1d2      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80186a2:	6980      	ldr	r0, [r0, #24]
 80186a4:	4770      	bx	lr
 80186a6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80186a8:	4770      	bx	lr
 80186aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80186ac:	4770      	bx	lr
 80186ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80186b0:	4770      	bx	lr
 80186b2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80186b4:	4770      	bx	lr
 80186b6:	2a2c      	cmp	r2, #44	; 0x2c
 80186b8:	d02a      	beq.n	8018710 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80186ba:	d80f      	bhi.n	80186dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 80186bc:	2a08      	cmp	r2, #8
 80186be:	d035      	beq.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80186c0:	d805      	bhi.n	80186ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80186c2:	2a04      	cmp	r2, #4
 80186c4:	d030      	beq.n	8018728 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 80186c6:	2a05      	cmp	r2, #5
 80186c8:	d1be      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80186ca:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80186cc:	4770      	bx	lr
 80186ce:	2a0a      	cmp	r2, #10
 80186d0:	d02c      	beq.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80186d2:	d301      	bcc.n	80186d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 80186d4:	2a0b      	cmp	r2, #11
 80186d6:	d1b7      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80186d8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80186da:	4770      	bx	lr
 80186dc:	2a30      	cmp	r2, #48	; 0x30
 80186de:	d027      	beq.n	8018730 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80186e0:	d808      	bhi.n	80186f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80186e2:	2a2e      	cmp	r2, #46	; 0x2e
 80186e4:	684b      	ldr	r3, [r1, #4]
 80186e6:	d01a      	beq.n	801871e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80186e8:	d90b      	bls.n	8018702 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d1ab      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80186f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80186f2:	4770      	bx	lr
 80186f4:	2a32      	cmp	r2, #50	; 0x32
 80186f6:	d01b      	beq.n	8018730 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80186f8:	d301      	bcc.n	80186fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 80186fa:	2a33      	cmp	r2, #51	; 0x33
 80186fc:	d1a4      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80186fe:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8018700:	4770      	bx	lr
 8018702:	781b      	ldrb	r3, [r3, #0]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d0f3      	beq.n	80186f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8018708:	2b01      	cmp	r3, #1
 801870a:	d19d      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801870c:	6940      	ldr	r0, [r0, #20]
 801870e:	4770      	bx	lr
 8018710:	684b      	ldr	r3, [r1, #4]
 8018712:	781b      	ldrb	r3, [r3, #0]
 8018714:	b133      	cbz	r3, 8018724 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8018716:	2b01      	cmp	r3, #1
 8018718:	d196      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801871a:	68c0      	ldr	r0, [r0, #12]
 801871c:	4770      	bx	lr
 801871e:	781b      	ldrb	r3, [r3, #0]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d191      	bne.n	8018648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018724:	69c0      	ldr	r0, [r0, #28]
 8018726:	4770      	bx	lr
 8018728:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801872a:	4770      	bx	lr
 801872c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801872e:	4770      	bx	lr
 8018730:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8018732:	4770      	bx	lr

08018734 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018738:	b085      	sub	sp, #20
 801873a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801873c:	9203      	str	r2, [sp, #12]
 801873e:	6870      	ldr	r0, [r6, #4]
 8018740:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8018744:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8018748:	9101      	str	r1, [sp, #4]
 801874a:	fa1f f885 	uxth.w	r8, r5
 801874e:	43ed      	mvns	r5, r5
 8018750:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018754:	b2ed      	uxtb	r5, r5
 8018756:	fb00 2404 	mla	r4, r0, r4, r2
 801875a:	6832      	ldr	r2, [r6, #0]
 801875c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018760:	4414      	add	r4, r2
 8018762:	f8dc 2000 	ldr.w	r2, [ip]
 8018766:	9202      	str	r2, [sp, #8]
 8018768:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801876c:	f102 0e04 	add.w	lr, r2, #4
 8018770:	9a01      	ldr	r2, [sp, #4]
 8018772:	2a00      	cmp	r2, #0
 8018774:	dc03      	bgt.n	801877e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018776:	9a03      	ldr	r2, [sp, #12]
 8018778:	2a00      	cmp	r2, #0
 801877a:	f340 8116 	ble.w	80189aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801877e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018780:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018784:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018788:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801878a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801878e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018792:	2b00      	cmp	r3, #0
 8018794:	dd0e      	ble.n	80187b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018796:	1406      	asrs	r6, r0, #16
 8018798:	d405      	bmi.n	80187a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801879a:	4556      	cmp	r6, sl
 801879c:	da03      	bge.n	80187a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801879e:	1416      	asrs	r6, r2, #16
 80187a0:	d401      	bmi.n	80187a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80187a2:	454e      	cmp	r6, r9
 80187a4:	db07      	blt.n	80187b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80187a6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80187a8:	3b01      	subs	r3, #1
 80187aa:	3403      	adds	r4, #3
 80187ac:	4430      	add	r0, r6
 80187ae:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80187b0:	4432      	add	r2, r6
 80187b2:	e7ee      	b.n	8018792 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80187b4:	d063      	beq.n	801887e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80187b6:	1e5e      	subs	r6, r3, #1
 80187b8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80187ba:	fb07 0706 	mla	r7, r7, r6, r0
 80187be:	143f      	asrs	r7, r7, #16
 80187c0:	d454      	bmi.n	801886c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80187c2:	4557      	cmp	r7, sl
 80187c4:	da52      	bge.n	801886c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80187c6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80187c8:	fb07 2606 	mla	r6, r7, r6, r2
 80187cc:	1436      	asrs	r6, r6, #16
 80187ce:	d44d      	bmi.n	801886c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80187d0:	454e      	cmp	r6, r9
 80187d2:	da4b      	bge.n	801886c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80187d4:	1ce6      	adds	r6, r4, #3
 80187d6:	4699      	mov	r9, r3
 80187d8:	f1b9 0f00 	cmp.w	r9, #0
 80187dc:	f106 0603 	add.w	r6, r6, #3
 80187e0:	dd48      	ble.n	8018874 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80187e2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80187e6:	1417      	asrs	r7, r2, #16
 80187e8:	9902      	ldr	r1, [sp, #8]
 80187ea:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80187ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80187f2:	fb0b 1707 	mla	r7, fp, r7, r1
 80187f6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80187fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80187fc:	f817 700a 	ldrb.w	r7, [r7, sl]
 8018800:	fb1b fb05 	smulbb	fp, fp, r5
 8018804:	4408      	add	r0, r1
 8018806:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018808:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801880c:	440a      	add	r2, r1
 801880e:	eb0e 0a07 	add.w	sl, lr, r7
 8018812:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8018816:	fb07 b708 	mla	r7, r7, r8, fp
 801881a:	b2bf      	uxth	r7, r7
 801881c:	f107 0b01 	add.w	fp, r7, #1
 8018820:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018824:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018828:	fb1b fb05 	smulbb	fp, fp, r5
 801882c:	123f      	asrs	r7, r7, #8
 801882e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018832:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018836:	fb07 b708 	mla	r7, r7, r8, fp
 801883a:	b2bf      	uxth	r7, r7
 801883c:	f107 0b01 	add.w	fp, r7, #1
 8018840:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018844:	123f      	asrs	r7, r7, #8
 8018846:	f806 7c05 	strb.w	r7, [r6, #-5]
 801884a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801884e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018852:	fb1a fa05 	smulbb	sl, sl, r5
 8018856:	fb07 a708 	mla	r7, r7, r8, sl
 801885a:	b2bf      	uxth	r7, r7
 801885c:	f107 0a01 	add.w	sl, r7, #1
 8018860:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018864:	123f      	asrs	r7, r7, #8
 8018866:	f806 7c04 	strb.w	r7, [r6, #-4]
 801886a:	e7b5      	b.n	80187d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801886c:	2700      	movs	r7, #0
 801886e:	1bde      	subs	r6, r3, r7
 8018870:	2e00      	cmp	r6, #0
 8018872:	dc42      	bgt.n	80188fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8018874:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801887c:	441c      	add	r4, r3
 801887e:	9b01      	ldr	r3, [sp, #4]
 8018880:	2b00      	cmp	r3, #0
 8018882:	f340 8092 	ble.w	80189aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801888a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801888c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018890:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018894:	eef0 6a62 	vmov.f32	s13, s5
 8018898:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801889c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80188a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80188a4:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80188a8:	eef0 6a43 	vmov.f32	s13, s6
 80188ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80188b0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80188b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80188b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80188bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80188c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80188c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80188c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80188cc:	ee12 2a90 	vmov	r2, s5
 80188d0:	eef0 2a47 	vmov.f32	s5, s14
 80188d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80188d8:	ee13 2a10 	vmov	r2, s6
 80188dc:	9311      	str	r3, [sp, #68]	; 0x44
 80188de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188e0:	eeb0 3a67 	vmov.f32	s6, s15
 80188e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80188e8:	9312      	str	r3, [sp, #72]	; 0x48
 80188ea:	9b01      	ldr	r3, [sp, #4]
 80188ec:	9a03      	ldr	r2, [sp, #12]
 80188ee:	3b01      	subs	r3, #1
 80188f0:	9301      	str	r3, [sp, #4]
 80188f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188f4:	bf08      	it	eq
 80188f6:	4613      	moveq	r3, r2
 80188f8:	e73a      	b.n	8018770 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80188fa:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80188fe:	d44e      	bmi.n	801899e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018900:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018904:	4556      	cmp	r6, sl
 8018906:	dd4a      	ble.n	801899e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018908:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801890c:	d447      	bmi.n	801899e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801890e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8018912:	4559      	cmp	r1, fp
 8018914:	dd43      	ble.n	801899e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018916:	fa0f f986 	sxth.w	r9, r6
 801891a:	9902      	ldr	r1, [sp, #8]
 801891c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018920:	fb0b 1909 	mla	r9, fp, r9, r1
 8018924:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018928:	f819 900a 	ldrb.w	r9, [r9, sl]
 801892c:	fb1b fb05 	smulbb	fp, fp, r5
 8018930:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018934:	eb0e 0a09 	add.w	sl, lr, r9
 8018938:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801893c:	fb09 b908 	mla	r9, r9, r8, fp
 8018940:	fa1f f989 	uxth.w	r9, r9
 8018944:	f109 0b01 	add.w	fp, r9, #1
 8018948:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801894c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018950:	f804 9006 	strb.w	r9, [r4, r6]
 8018954:	4426      	add	r6, r4
 8018956:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801895a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801895e:	fb1b fb05 	smulbb	fp, fp, r5
 8018962:	fb09 b908 	mla	r9, r9, r8, fp
 8018966:	fa1f f989 	uxth.w	r9, r9
 801896a:	f109 0b01 	add.w	fp, r9, #1
 801896e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018972:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018976:	f886 9001 	strb.w	r9, [r6, #1]
 801897a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801897e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018982:	fb1a fa05 	smulbb	sl, sl, r5
 8018986:	fb09 a908 	mla	r9, r9, r8, sl
 801898a:	fa1f f989 	uxth.w	r9, r9
 801898e:	f109 0a01 	add.w	sl, r9, #1
 8018992:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018996:	ea4f 2929 	mov.w	r9, r9, asr #8
 801899a:	f886 9002 	strb.w	r9, [r6, #2]
 801899e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80189a0:	3701      	adds	r7, #1
 80189a2:	4408      	add	r0, r1
 80189a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80189a6:	440a      	add	r2, r1
 80189a8:	e761      	b.n	801886e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80189aa:	b005      	add	sp, #20
 80189ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80189b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80189b6:	4693      	mov	fp, r2
 80189b8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80189ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80189be:	6868      	ldr	r0, [r5, #4]
 80189c0:	6877      	ldr	r7, [r6, #4]
 80189c2:	9100      	str	r1, [sp, #0]
 80189c4:	3704      	adds	r7, #4
 80189c6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80189ca:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 80189ce:	fb00 2404 	mla	r4, r0, r4, r2
 80189d2:	682a      	ldr	r2, [r5, #0]
 80189d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80189d8:	4414      	add	r4, r2
 80189da:	6832      	ldr	r2, [r6, #0]
 80189dc:	9201      	str	r2, [sp, #4]
 80189de:	9a00      	ldr	r2, [sp, #0]
 80189e0:	2a00      	cmp	r2, #0
 80189e2:	dc03      	bgt.n	80189ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80189e4:	f1bb 0f00 	cmp.w	fp, #0
 80189e8:	f340 80bc 	ble.w	8018b64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80189ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189ee:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80189f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80189f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80189f8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80189fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	dd0c      	ble.n	8018a1e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018a04:	1405      	asrs	r5, r0, #16
 8018a06:	d405      	bmi.n	8018a14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018a08:	4555      	cmp	r5, sl
 8018a0a:	da03      	bge.n	8018a14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018a0c:	1415      	asrs	r5, r2, #16
 8018a0e:	d401      	bmi.n	8018a14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018a10:	454d      	cmp	r5, r9
 8018a12:	db05      	blt.n	8018a20 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018a14:	4440      	add	r0, r8
 8018a16:	4472      	add	r2, lr
 8018a18:	3b01      	subs	r3, #1
 8018a1a:	3403      	adds	r4, #3
 8018a1c:	e7f0      	b.n	8018a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8018a1e:	d03f      	beq.n	8018aa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8018a20:	1e5d      	subs	r5, r3, #1
 8018a22:	fb08 0c05 	mla	ip, r8, r5, r0
 8018a26:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8018a2a:	d42e      	bmi.n	8018a8a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018a2c:	45d4      	cmp	ip, sl
 8018a2e:	da2c      	bge.n	8018a8a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018a30:	fb0e 2505 	mla	r5, lr, r5, r2
 8018a34:	142d      	asrs	r5, r5, #16
 8018a36:	d428      	bmi.n	8018a8a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018a38:	454d      	cmp	r5, r9
 8018a3a:	da26      	bge.n	8018a8a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018a3c:	1ce5      	adds	r5, r4, #3
 8018a3e:	469c      	mov	ip, r3
 8018a40:	f1bc 0f00 	cmp.w	ip, #0
 8018a44:	f105 0503 	add.w	r5, r5, #3
 8018a48:	dd25      	ble.n	8018a96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8018a4a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018a4e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8018a52:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018a56:	4472      	add	r2, lr
 8018a58:	468a      	mov	sl, r1
 8018a5a:	9901      	ldr	r1, [sp, #4]
 8018a5c:	fb0a 1909 	mla	r9, sl, r9, r1
 8018a60:	1401      	asrs	r1, r0, #16
 8018a62:	4440      	add	r0, r8
 8018a64:	f819 9001 	ldrb.w	r9, [r9, r1]
 8018a68:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018a6c:	eb07 0a09 	add.w	sl, r7, r9
 8018a70:	f817 9009 	ldrb.w	r9, [r7, r9]
 8018a74:	f805 9c06 	strb.w	r9, [r5, #-6]
 8018a78:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018a7c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8018a80:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018a84:	f805 9c04 	strb.w	r9, [r5, #-4]
 8018a88:	e7da      	b.n	8018a40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018a8a:	2500      	movs	r5, #0
 8018a8c:	eba3 0c05 	sub.w	ip, r3, r5
 8018a90:	f1bc 0f00 	cmp.w	ip, #0
 8018a94:	dc3b      	bgt.n	8018b0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018a96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a9e:	441c      	add	r4, r3
 8018aa0:	9b00      	ldr	r3, [sp, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	dd5e      	ble.n	8018b64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018aa6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018aac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ab0:	eeb0 6a62 	vmov.f32	s12, s5
 8018ab4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ab8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018abc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ac0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8018ac4:	eeb0 6a43 	vmov.f32	s12, s6
 8018ac8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018acc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8018ad0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018ad4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018ad8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018adc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018ae0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018ae4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018ae8:	ee12 2a90 	vmov	r2, s5
 8018aec:	eef0 2a47 	vmov.f32	s5, s14
 8018af0:	fb92 f8f3 	sdiv	r8, r2, r3
 8018af4:	ee13 2a10 	vmov	r2, s6
 8018af8:	eeb0 3a67 	vmov.f32	s6, s15
 8018afc:	fb92 fef3 	sdiv	lr, r2, r3
 8018b00:	9b00      	ldr	r3, [sp, #0]
 8018b02:	3b01      	subs	r3, #1
 8018b04:	9300      	str	r3, [sp, #0]
 8018b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b08:	bf08      	it	eq
 8018b0a:	465b      	moveq	r3, fp
 8018b0c:	e767      	b.n	80189de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018b0e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018b12:	d423      	bmi.n	8018b5c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018b14:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8018b18:	45cc      	cmp	ip, r9
 8018b1a:	dd1f      	ble.n	8018b5c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018b1c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018b20:	d41c      	bmi.n	8018b5c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018b22:	68f1      	ldr	r1, [r6, #12]
 8018b24:	4551      	cmp	r1, sl
 8018b26:	dd19      	ble.n	8018b5c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018b28:	fa0f fc8c 	sxth.w	ip, ip
 8018b2c:	9901      	ldr	r1, [sp, #4]
 8018b2e:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8018b32:	f81c c009 	ldrb.w	ip, [ip, r9]
 8018b36:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018b3a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8018b3e:	eb07 090c 	add.w	r9, r7, ip
 8018b42:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8018b46:	f804 a00c 	strb.w	sl, [r4, ip]
 8018b4a:	44a4      	add	ip, r4
 8018b4c:	f899 a001 	ldrb.w	sl, [r9, #1]
 8018b50:	f88c a001 	strb.w	sl, [ip, #1]
 8018b54:	f899 9002 	ldrb.w	r9, [r9, #2]
 8018b58:	f88c 9002 	strb.w	r9, [ip, #2]
 8018b5c:	4440      	add	r0, r8
 8018b5e:	4472      	add	r2, lr
 8018b60:	3501      	adds	r5, #1
 8018b62:	e793      	b.n	8018a8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8018b64:	b003      	add	sp, #12
 8018b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b6a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b6e:	b085      	sub	sp, #20
 8018b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018b74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018b76:	9202      	str	r2, [sp, #8]
 8018b78:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8018b7c:	6860      	ldr	r0, [r4, #4]
 8018b7e:	9203      	str	r2, [sp, #12]
 8018b80:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8018b84:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8018b88:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8018b8c:	fb00 2505 	mla	r5, r0, r5, r2
 8018b90:	6822      	ldr	r2, [r4, #0]
 8018b92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b96:	4415      	add	r5, r2
 8018b98:	f8dc 2000 	ldr.w	r2, [ip]
 8018b9c:	9200      	str	r2, [sp, #0]
 8018b9e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018ba2:	3204      	adds	r2, #4
 8018ba4:	9201      	str	r2, [sp, #4]
 8018ba6:	2900      	cmp	r1, #0
 8018ba8:	dc03      	bgt.n	8018bb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018baa:	9a02      	ldr	r2, [sp, #8]
 8018bac:	2a00      	cmp	r2, #0
 8018bae:	f340 8127 	ble.w	8018e00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018bb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018bb4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018bb8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8018bbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018bbe:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018bc2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	dd0d      	ble.n	8018be6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018bca:	1422      	asrs	r2, r4, #16
 8018bcc:	d405      	bmi.n	8018bda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018bce:	4542      	cmp	r2, r8
 8018bd0:	da03      	bge.n	8018bda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018bd2:	1402      	asrs	r2, r0, #16
 8018bd4:	d401      	bmi.n	8018bda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018bd6:	42ba      	cmp	r2, r7
 8018bd8:	db06      	blt.n	8018be8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018bda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018bdc:	4474      	add	r4, lr
 8018bde:	3b01      	subs	r3, #1
 8018be0:	3503      	adds	r5, #3
 8018be2:	4410      	add	r0, r2
 8018be4:	e7ef      	b.n	8018bc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018be6:	d075      	beq.n	8018cd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8018be8:	1e5a      	subs	r2, r3, #1
 8018bea:	fb0e 4602 	mla	r6, lr, r2, r4
 8018bee:	1436      	asrs	r6, r6, #16
 8018bf0:	d465      	bmi.n	8018cbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018bf2:	4546      	cmp	r6, r8
 8018bf4:	da63      	bge.n	8018cbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018bf6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018bf8:	fb06 0202 	mla	r2, r6, r2, r0
 8018bfc:	1412      	asrs	r2, r2, #16
 8018bfe:	d45e      	bmi.n	8018cbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018c00:	42ba      	cmp	r2, r7
 8018c02:	da5c      	bge.n	8018cbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018c04:	1cef      	adds	r7, r5, #3
 8018c06:	4699      	mov	r9, r3
 8018c08:	f1b9 0f00 	cmp.w	r9, #0
 8018c0c:	dd5d      	ble.n	8018cca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8018c0e:	1402      	asrs	r2, r0, #16
 8018c10:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018c14:	1426      	asrs	r6, r4, #16
 8018c16:	4692      	mov	sl, r2
 8018c18:	9a00      	ldr	r2, [sp, #0]
 8018c1a:	fb08 220a 	mla	r2, r8, sl, r2
 8018c1e:	5d92      	ldrb	r2, [r2, r6]
 8018c20:	9e01      	ldr	r6, [sp, #4]
 8018c22:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018c26:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018c2a:	d041      	beq.n	8018cb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018c2c:	9a03      	ldr	r2, [sp, #12]
 8018c2e:	fa5f fb86 	uxtb.w	fp, r6
 8018c32:	fb02 f808 	mul.w	r8, r2, r8
 8018c36:	f108 0201 	add.w	r2, r8, #1
 8018c3a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018c3e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018c42:	1212      	asrs	r2, r2, #8
 8018c44:	fa1f fa82 	uxth.w	sl, r2
 8018c48:	43d2      	mvns	r2, r2
 8018c4a:	fb1b fb0a 	smulbb	fp, fp, sl
 8018c4e:	b2d2      	uxtb	r2, r2
 8018c50:	fb08 b802 	mla	r8, r8, r2, fp
 8018c54:	fa1f f888 	uxth.w	r8, r8
 8018c58:	f108 0b01 	add.w	fp, r8, #1
 8018c5c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018c60:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018c64:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018c68:	fb1b fb0a 	smulbb	fp, fp, sl
 8018c6c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018c70:	fb16 fa0a 	smulbb	sl, r6, sl
 8018c74:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018c78:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018c7c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018c80:	fb06 aa02 	mla	sl, r6, r2, sl
 8018c84:	fb08 b802 	mla	r8, r8, r2, fp
 8018c88:	fa1f fa8a 	uxth.w	sl, sl
 8018c8c:	fa1f f888 	uxth.w	r8, r8
 8018c90:	f10a 0601 	add.w	r6, sl, #1
 8018c94:	f108 0b01 	add.w	fp, r8, #1
 8018c98:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018c9c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018ca0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ca4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018ca8:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018cac:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018cb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018cb2:	4474      	add	r4, lr
 8018cb4:	3703      	adds	r7, #3
 8018cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8018cba:	4410      	add	r0, r2
 8018cbc:	e7a4      	b.n	8018c08 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018cbe:	f04f 0800 	mov.w	r8, #0
 8018cc2:	eba3 0208 	sub.w	r2, r3, r8
 8018cc6:	2a00      	cmp	r2, #0
 8018cc8:	dc3b      	bgt.n	8018d42 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018cca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018cce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018cd2:	441d      	add	r5, r3
 8018cd4:	2900      	cmp	r1, #0
 8018cd6:	f340 8093 	ble.w	8018e00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018cda:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ce0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ce4:	3901      	subs	r1, #1
 8018ce6:	eeb0 6a62 	vmov.f32	s12, s5
 8018cea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018cee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018cf2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018cf6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018cfa:	eeb0 6a43 	vmov.f32	s12, s6
 8018cfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d02:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018d06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018d0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018d0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018d12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018d16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018d1e:	ee12 2a90 	vmov	r2, s5
 8018d22:	eef0 2a47 	vmov.f32	s5, s14
 8018d26:	fb92 fef3 	sdiv	lr, r2, r3
 8018d2a:	ee13 2a10 	vmov	r2, s6
 8018d2e:	eeb0 3a67 	vmov.f32	s6, s15
 8018d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d36:	9a02      	ldr	r2, [sp, #8]
 8018d38:	9312      	str	r3, [sp, #72]	; 0x48
 8018d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d3c:	bf08      	it	eq
 8018d3e:	4613      	moveq	r3, r2
 8018d40:	e731      	b.n	8018ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018d42:	1427      	asrs	r7, r4, #16
 8018d44:	d456      	bmi.n	8018df4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018d46:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018d4a:	42be      	cmp	r6, r7
 8018d4c:	dd52      	ble.n	8018df4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018d4e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018d52:	d44f      	bmi.n	8018df4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018d54:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018d58:	454a      	cmp	r2, r9
 8018d5a:	dd4b      	ble.n	8018df4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018d5c:	9a00      	ldr	r2, [sp, #0]
 8018d5e:	b236      	sxth	r6, r6
 8018d60:	fb09 2606 	mla	r6, r9, r6, r2
 8018d64:	5df2      	ldrb	r2, [r6, r7]
 8018d66:	9e01      	ldr	r6, [sp, #4]
 8018d68:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8018d6c:	0e3a      	lsrs	r2, r7, #24
 8018d6e:	d041      	beq.n	8018df4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018d70:	9e03      	ldr	r6, [sp, #12]
 8018d72:	fa5f fb87 	uxtb.w	fp, r7
 8018d76:	4372      	muls	r2, r6
 8018d78:	1c56      	adds	r6, r2, #1
 8018d7a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018d7e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018d82:	1212      	asrs	r2, r2, #8
 8018d84:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018d88:	fa1f fa82 	uxth.w	sl, r2
 8018d8c:	43d2      	mvns	r2, r2
 8018d8e:	fb1b fb0a 	smulbb	fp, fp, sl
 8018d92:	b2d2      	uxtb	r2, r2
 8018d94:	fb09 b902 	mla	r9, r9, r2, fp
 8018d98:	fa1f f989 	uxth.w	r9, r9
 8018d9c:	f109 0b01 	add.w	fp, r9, #1
 8018da0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018da4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018da8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018dac:	fb1b fb0a 	smulbb	fp, fp, sl
 8018db0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018db4:	fb17 fa0a 	smulbb	sl, r7, sl
 8018db8:	f805 9006 	strb.w	r9, [r5, r6]
 8018dbc:	442e      	add	r6, r5
 8018dbe:	78b7      	ldrb	r7, [r6, #2]
 8018dc0:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018dc4:	fb07 aa02 	mla	sl, r7, r2, sl
 8018dc8:	fb09 b902 	mla	r9, r9, r2, fp
 8018dcc:	fa1f fa8a 	uxth.w	sl, sl
 8018dd0:	fa1f f989 	uxth.w	r9, r9
 8018dd4:	f10a 0701 	add.w	r7, sl, #1
 8018dd8:	f109 0b01 	add.w	fp, r9, #1
 8018ddc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018de0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018de4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018de8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018dec:	f886 a002 	strb.w	sl, [r6, #2]
 8018df0:	f886 9001 	strb.w	r9, [r6, #1]
 8018df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018df6:	4474      	add	r4, lr
 8018df8:	f108 0801 	add.w	r8, r8, #1
 8018dfc:	4410      	add	r0, r2
 8018dfe:	e760      	b.n	8018cc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8018e00:	b005      	add	sp, #20
 8018e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e06 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e0a:	b085      	sub	sp, #20
 8018e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018e10:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018e12:	9203      	str	r2, [sp, #12]
 8018e14:	6868      	ldr	r0, [r5, #4]
 8018e16:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8018e1a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8018e1e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018e22:	fb00 2404 	mla	r4, r0, r4, r2
 8018e26:	682a      	ldr	r2, [r5, #0]
 8018e28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018e2c:	4414      	add	r4, r2
 8018e2e:	f8dc 2000 	ldr.w	r2, [ip]
 8018e32:	9201      	str	r2, [sp, #4]
 8018e34:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018e38:	3204      	adds	r2, #4
 8018e3a:	9202      	str	r2, [sp, #8]
 8018e3c:	2900      	cmp	r1, #0
 8018e3e:	dc03      	bgt.n	8018e48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018e40:	9a03      	ldr	r2, [sp, #12]
 8018e42:	2a00      	cmp	r2, #0
 8018e44:	f340 8137 	ble.w	80190b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018e4a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018e4e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018e52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e54:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018e58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	dd0d      	ble.n	8018e7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018e60:	1405      	asrs	r5, r0, #16
 8018e62:	d405      	bmi.n	8018e70 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018e64:	4545      	cmp	r5, r8
 8018e66:	da03      	bge.n	8018e70 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018e68:	1415      	asrs	r5, r2, #16
 8018e6a:	d401      	bmi.n	8018e70 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018e6c:	42bd      	cmp	r5, r7
 8018e6e:	db06      	blt.n	8018e7e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018e70:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018e72:	4470      	add	r0, lr
 8018e74:	3b01      	subs	r3, #1
 8018e76:	3403      	adds	r4, #3
 8018e78:	442a      	add	r2, r5
 8018e7a:	e7ef      	b.n	8018e5c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018e7c:	d070      	beq.n	8018f60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018e7e:	1e5d      	subs	r5, r3, #1
 8018e80:	fb0e 0605 	mla	r6, lr, r5, r0
 8018e84:	1436      	asrs	r6, r6, #16
 8018e86:	d462      	bmi.n	8018f4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018e88:	4546      	cmp	r6, r8
 8018e8a:	da60      	bge.n	8018f4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018e8c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018e8e:	fb06 2505 	mla	r5, r6, r5, r2
 8018e92:	142d      	asrs	r5, r5, #16
 8018e94:	d45b      	bmi.n	8018f4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018e96:	42bd      	cmp	r5, r7
 8018e98:	da59      	bge.n	8018f4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018e9a:	1ce5      	adds	r5, r4, #3
 8018e9c:	469a      	mov	sl, r3
 8018e9e:	f1ba 0f00 	cmp.w	sl, #0
 8018ea2:	dd58      	ble.n	8018f56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8018ea4:	1416      	asrs	r6, r2, #16
 8018ea6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018eaa:	1407      	asrs	r7, r0, #16
 8018eac:	46b1      	mov	r9, r6
 8018eae:	9e01      	ldr	r6, [sp, #4]
 8018eb0:	fb08 6609 	mla	r6, r8, r9, r6
 8018eb4:	5df6      	ldrb	r6, [r6, r7]
 8018eb6:	9f02      	ldr	r7, [sp, #8]
 8018eb8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8018ebc:	0e37      	lsrs	r7, r6, #24
 8018ebe:	2fff      	cmp	r7, #255	; 0xff
 8018ec0:	f000 80f0 	beq.w	80190a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018ec4:	fa5f f887 	uxtb.w	r8, r7
 8018ec8:	b3d7      	cbz	r7, 8018f40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018eca:	fa1f f788 	uxth.w	r7, r8
 8018ece:	ea6f 0808 	mvn.w	r8, r8
 8018ed2:	fa5f fb86 	uxtb.w	fp, r6
 8018ed6:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8018eda:	fa5f f888 	uxtb.w	r8, r8
 8018ede:	fb1b fb07 	smulbb	fp, fp, r7
 8018ee2:	fb09 b908 	mla	r9, r9, r8, fp
 8018ee6:	fa1f f989 	uxth.w	r9, r9
 8018eea:	f109 0b01 	add.w	fp, r9, #1
 8018eee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018ef2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8018ef6:	fb1b fb08 	smulbb	fp, fp, r8
 8018efa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018efe:	f805 9c03 	strb.w	r9, [r5, #-3]
 8018f02:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8018f06:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018f0a:	fb09 b907 	mla	r9, r9, r7, fp
 8018f0e:	fa1f f989 	uxth.w	r9, r9
 8018f12:	f109 0b01 	add.w	fp, r9, #1
 8018f16:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018f1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f1e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8018f22:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8018f26:	fb19 f808 	smulbb	r8, r9, r8
 8018f2a:	fb06 8607 	mla	r6, r6, r7, r8
 8018f2e:	b2b6      	uxth	r6, r6
 8018f30:	f106 0801 	add.w	r8, r6, #1
 8018f34:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8018f38:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f3c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018f40:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018f42:	4470      	add	r0, lr
 8018f44:	3503      	adds	r5, #3
 8018f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f4a:	4432      	add	r2, r6
 8018f4c:	e7a7      	b.n	8018e9e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018f4e:	2600      	movs	r6, #0
 8018f50:	1b9d      	subs	r5, r3, r6
 8018f52:	2d00      	cmp	r5, #0
 8018f54:	dc3b      	bgt.n	8018fce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f5e:	441c      	add	r4, r3
 8018f60:	2900      	cmp	r1, #0
 8018f62:	f340 80a8 	ble.w	80190b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018f66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018f70:	3901      	subs	r1, #1
 8018f72:	eeb0 6a62 	vmov.f32	s12, s5
 8018f76:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018f7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018f7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018f82:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018f86:	eeb0 6a43 	vmov.f32	s12, s6
 8018f8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018f8e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018f92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018f96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018f9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018f9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018fa2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018fa6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018faa:	ee12 2a90 	vmov	r2, s5
 8018fae:	eef0 2a47 	vmov.f32	s5, s14
 8018fb2:	fb92 fef3 	sdiv	lr, r2, r3
 8018fb6:	ee13 2a10 	vmov	r2, s6
 8018fba:	eeb0 3a67 	vmov.f32	s6, s15
 8018fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fc2:	9a03      	ldr	r2, [sp, #12]
 8018fc4:	9312      	str	r3, [sp, #72]	; 0x48
 8018fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fc8:	bf08      	it	eq
 8018fca:	4613      	moveq	r3, r2
 8018fcc:	e736      	b.n	8018e3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018fce:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018fd2:	d457      	bmi.n	8019084 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018fd4:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8018fd8:	4547      	cmp	r7, r8
 8018fda:	dd53      	ble.n	8019084 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018fdc:	ea5f 4922 	movs.w	r9, r2, asr #16
 8018fe0:	d450      	bmi.n	8019084 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018fe2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8018fe6:	454d      	cmp	r5, r9
 8018fe8:	dd4c      	ble.n	8019084 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018fea:	9d01      	ldr	r5, [sp, #4]
 8018fec:	b23f      	sxth	r7, r7
 8018fee:	fb09 5707 	mla	r7, r9, r7, r5
 8018ff2:	f817 5008 	ldrb.w	r5, [r7, r8]
 8018ff6:	9f02      	ldr	r7, [sp, #8]
 8018ff8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8018ffc:	0e2f      	lsrs	r7, r5, #24
 8018ffe:	2fff      	cmp	r7, #255	; 0xff
 8019000:	d045      	beq.n	801908e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019002:	fa5f f987 	uxtb.w	r9, r7
 8019006:	b3ef      	cbz	r7, 8019084 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019008:	fa1f f889 	uxth.w	r8, r9
 801900c:	ea6f 0909 	mvn.w	r9, r9
 8019010:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019014:	fa5f fb85 	uxtb.w	fp, r5
 8019018:	f814 a007 	ldrb.w	sl, [r4, r7]
 801901c:	fa5f f989 	uxtb.w	r9, r9
 8019020:	fb1b fb08 	smulbb	fp, fp, r8
 8019024:	fb0a ba09 	mla	sl, sl, r9, fp
 8019028:	fa1f fa8a 	uxth.w	sl, sl
 801902c:	f10a 0b01 	add.w	fp, sl, #1
 8019030:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019034:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019038:	f804 a007 	strb.w	sl, [r4, r7]
 801903c:	4427      	add	r7, r4
 801903e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019042:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8019046:	f897 b001 	ldrb.w	fp, [r7, #1]
 801904a:	fb1b fb09 	smulbb	fp, fp, r9
 801904e:	fb0a ba08 	mla	sl, sl, r8, fp
 8019052:	fa1f fa8a 	uxth.w	sl, sl
 8019056:	f10a 0b01 	add.w	fp, sl, #1
 801905a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801905e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019062:	f887 a001 	strb.w	sl, [r7, #1]
 8019066:	f897 a002 	ldrb.w	sl, [r7, #2]
 801906a:	fb1a f909 	smulbb	r9, sl, r9
 801906e:	fb05 9508 	mla	r5, r5, r8, r9
 8019072:	b2ad      	uxth	r5, r5
 8019074:	f105 0901 	add.w	r9, r5, #1
 8019078:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801907c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019080:	f887 9002 	strb.w	r9, [r7, #2]
 8019084:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019086:	4470      	add	r0, lr
 8019088:	3601      	adds	r6, #1
 801908a:	442a      	add	r2, r5
 801908c:	e760      	b.n	8018f50 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801908e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019092:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8019096:	55e5      	strb	r5, [r4, r7]
 8019098:	4427      	add	r7, r4
 801909a:	0c2d      	lsrs	r5, r5, #16
 801909c:	f887 8001 	strb.w	r8, [r7, #1]
 80190a0:	70bd      	strb	r5, [r7, #2]
 80190a2:	e7ef      	b.n	8019084 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80190a4:	0a37      	lsrs	r7, r6, #8
 80190a6:	f805 6c03 	strb.w	r6, [r5, #-3]
 80190aa:	0c36      	lsrs	r6, r6, #16
 80190ac:	f805 7c02 	strb.w	r7, [r5, #-2]
 80190b0:	f805 6c01 	strb.w	r6, [r5, #-1]
 80190b4:	e744      	b.n	8018f40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80190b6:	b005      	add	sp, #20
 80190b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80190bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80190c2:	9201      	str	r2, [sp, #4]
 80190c4:	6870      	ldr	r0, [r6, #4]
 80190c6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80190ca:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80190ce:	fa1f fe85 	uxth.w	lr, r5
 80190d2:	43ed      	mvns	r5, r5
 80190d4:	f8dc 8000 	ldr.w	r8, [ip]
 80190d8:	b2ed      	uxtb	r5, r5
 80190da:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80190de:	fb00 2404 	mla	r4, r0, r4, r2
 80190e2:	6832      	ldr	r2, [r6, #0]
 80190e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80190e8:	4414      	add	r4, r2
 80190ea:	2900      	cmp	r1, #0
 80190ec:	dc03      	bgt.n	80190f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80190ee:	9a01      	ldr	r2, [sp, #4]
 80190f0:	2a00      	cmp	r2, #0
 80190f2:	f340 810d 	ble.w	8019310 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80190f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80190f8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80190fc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019102:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8019106:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801910a:	2b00      	cmp	r3, #0
 801910c:	dd0e      	ble.n	801912c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801910e:	1406      	asrs	r6, r0, #16
 8019110:	d405      	bmi.n	801911e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019112:	4556      	cmp	r6, sl
 8019114:	da03      	bge.n	801911e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019116:	1416      	asrs	r6, r2, #16
 8019118:	d401      	bmi.n	801911e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801911a:	454e      	cmp	r6, r9
 801911c:	db07      	blt.n	801912e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801911e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019120:	3b01      	subs	r3, #1
 8019122:	3403      	adds	r4, #3
 8019124:	4430      	add	r0, r6
 8019126:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019128:	4432      	add	r2, r6
 801912a:	e7ee      	b.n	801910a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801912c:	d060      	beq.n	80191f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801912e:	1e5e      	subs	r6, r3, #1
 8019130:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019132:	fb07 0706 	mla	r7, r7, r6, r0
 8019136:	143f      	asrs	r7, r7, #16
 8019138:	d451      	bmi.n	80191de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801913a:	4557      	cmp	r7, sl
 801913c:	da4f      	bge.n	80191de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801913e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019140:	fb07 2606 	mla	r6, r7, r6, r2
 8019144:	1436      	asrs	r6, r6, #16
 8019146:	d44a      	bmi.n	80191de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019148:	454e      	cmp	r6, r9
 801914a:	da48      	bge.n	80191de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801914c:	1ce6      	adds	r6, r4, #3
 801914e:	4699      	mov	r9, r3
 8019150:	f1b9 0f00 	cmp.w	r9, #0
 8019154:	f106 0603 	add.w	r6, r6, #3
 8019158:	dd45      	ble.n	80191e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801915a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801915e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019162:	1417      	asrs	r7, r2, #16
 8019164:	f109 39ff 	add.w	r9, r9, #4294967295
 8019168:	fb0b a707 	mla	r7, fp, r7, sl
 801916c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019170:	fb1b fb05 	smulbb	fp, fp, r5
 8019174:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019178:	eb08 0a07 	add.w	sl, r8, r7
 801917c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8019180:	fb07 b70e 	mla	r7, r7, lr, fp
 8019184:	b2bf      	uxth	r7, r7
 8019186:	f107 0b01 	add.w	fp, r7, #1
 801918a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801918e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019192:	fb1b fb05 	smulbb	fp, fp, r5
 8019196:	123f      	asrs	r7, r7, #8
 8019198:	f806 7c06 	strb.w	r7, [r6, #-6]
 801919c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80191a0:	fb07 b70e 	mla	r7, r7, lr, fp
 80191a4:	b2bf      	uxth	r7, r7
 80191a6:	f107 0b01 	add.w	fp, r7, #1
 80191aa:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80191ae:	123f      	asrs	r7, r7, #8
 80191b0:	f806 7c05 	strb.w	r7, [r6, #-5]
 80191b4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80191b8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80191bc:	fb1a fa05 	smulbb	sl, sl, r5
 80191c0:	fb07 a70e 	mla	r7, r7, lr, sl
 80191c4:	b2bf      	uxth	r7, r7
 80191c6:	f107 0a01 	add.w	sl, r7, #1
 80191ca:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80191ce:	123f      	asrs	r7, r7, #8
 80191d0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80191d4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80191d6:	4438      	add	r0, r7
 80191d8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80191da:	443a      	add	r2, r7
 80191dc:	e7b8      	b.n	8019150 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80191de:	2700      	movs	r7, #0
 80191e0:	1bde      	subs	r6, r3, r7
 80191e2:	2e00      	cmp	r6, #0
 80191e4:	dc3f      	bgt.n	8019266 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80191e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80191ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80191ee:	441c      	add	r4, r3
 80191f0:	2900      	cmp	r1, #0
 80191f2:	f340 808d 	ble.w	8019310 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80191f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80191fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019200:	3901      	subs	r1, #1
 8019202:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019206:	eef0 6a62 	vmov.f32	s13, s5
 801920a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801920e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019212:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019216:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801921a:	eef0 6a43 	vmov.f32	s13, s6
 801921e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019222:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8019226:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801922a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801922e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019232:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019236:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801923a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801923e:	ee12 2a90 	vmov	r2, s5
 8019242:	eef0 2a47 	vmov.f32	s5, s14
 8019246:	fb92 f3f3 	sdiv	r3, r2, r3
 801924a:	ee13 2a10 	vmov	r2, s6
 801924e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019252:	eeb0 3a67 	vmov.f32	s6, s15
 8019256:	fb92 f3f3 	sdiv	r3, r2, r3
 801925a:	9a01      	ldr	r2, [sp, #4]
 801925c:	9310      	str	r3, [sp, #64]	; 0x40
 801925e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019260:	bf08      	it	eq
 8019262:	4613      	moveq	r3, r2
 8019264:	e741      	b.n	80190ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019266:	ea5f 4920 	movs.w	r9, r0, asr #16
 801926a:	d44b      	bmi.n	8019304 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801926c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8019270:	45cb      	cmp	fp, r9
 8019272:	dd47      	ble.n	8019304 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019274:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019278:	d444      	bmi.n	8019304 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801927a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801927e:	4556      	cmp	r6, sl
 8019280:	dd40      	ble.n	8019304 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019282:	fa0f f68b 	sxth.w	r6, fp
 8019286:	fb0a 9906 	mla	r9, sl, r6, r9
 801928a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801928e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019292:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019296:	fb1b fb05 	smulbb	fp, fp, r5
 801929a:	eb08 0a09 	add.w	sl, r8, r9
 801929e:	f818 9009 	ldrb.w	r9, [r8, r9]
 80192a2:	fb09 b90e 	mla	r9, r9, lr, fp
 80192a6:	fa1f f989 	uxth.w	r9, r9
 80192aa:	f109 0b01 	add.w	fp, r9, #1
 80192ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80192b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80192b6:	f804 9006 	strb.w	r9, [r4, r6]
 80192ba:	4426      	add	r6, r4
 80192bc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80192c0:	f896 b001 	ldrb.w	fp, [r6, #1]
 80192c4:	fb1b fb05 	smulbb	fp, fp, r5
 80192c8:	fb09 b90e 	mla	r9, r9, lr, fp
 80192cc:	fa1f f989 	uxth.w	r9, r9
 80192d0:	f109 0b01 	add.w	fp, r9, #1
 80192d4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80192d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80192dc:	f886 9001 	strb.w	r9, [r6, #1]
 80192e0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80192e4:	f896 a002 	ldrb.w	sl, [r6, #2]
 80192e8:	fb1a fa05 	smulbb	sl, sl, r5
 80192ec:	fb09 a90e 	mla	r9, r9, lr, sl
 80192f0:	fa1f f989 	uxth.w	r9, r9
 80192f4:	f109 0a01 	add.w	sl, r9, #1
 80192f8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80192fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019300:	f886 9002 	strb.w	r9, [r6, #2]
 8019304:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019306:	3701      	adds	r7, #1
 8019308:	4430      	add	r0, r6
 801930a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801930c:	4432      	add	r2, r6
 801930e:	e767      	b.n	80191e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8019310:	b003      	add	sp, #12
 8019312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019316 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019316:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801931a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801931c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019320:	9201      	str	r2, [sp, #4]
 8019322:	6868      	ldr	r0, [r5, #4]
 8019324:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8019326:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801932a:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801932e:	fb00 2404 	mla	r4, r0, r4, r2
 8019332:	682a      	ldr	r2, [r5, #0]
 8019334:	f8d7 8000 	ldr.w	r8, [r7]
 8019338:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801933c:	4414      	add	r4, r2
 801933e:	2900      	cmp	r1, #0
 8019340:	dc03      	bgt.n	801934a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019342:	9a01      	ldr	r2, [sp, #4]
 8019344:	2a00      	cmp	r2, #0
 8019346:	f340 80af 	ble.w	80194a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801934a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801934c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8019350:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019356:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801935a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801935e:	2b00      	cmp	r3, #0
 8019360:	dd0c      	ble.n	801937c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019362:	1405      	asrs	r5, r0, #16
 8019364:	d405      	bmi.n	8019372 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019366:	4555      	cmp	r5, sl
 8019368:	da03      	bge.n	8019372 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801936a:	1415      	asrs	r5, r2, #16
 801936c:	d401      	bmi.n	8019372 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801936e:	454d      	cmp	r5, r9
 8019370:	db05      	blt.n	801937e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019372:	4470      	add	r0, lr
 8019374:	4462      	add	r2, ip
 8019376:	3b01      	subs	r3, #1
 8019378:	3403      	adds	r4, #3
 801937a:	e7f0      	b.n	801935e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801937c:	d038      	beq.n	80193f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801937e:	1e5d      	subs	r5, r3, #1
 8019380:	fb0e 0605 	mla	r6, lr, r5, r0
 8019384:	1436      	asrs	r6, r6, #16
 8019386:	d42a      	bmi.n	80193de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019388:	4556      	cmp	r6, sl
 801938a:	da28      	bge.n	80193de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801938c:	fb0c 2505 	mla	r5, ip, r5, r2
 8019390:	142d      	asrs	r5, r5, #16
 8019392:	d424      	bmi.n	80193de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019394:	454d      	cmp	r5, r9
 8019396:	da22      	bge.n	80193de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019398:	1ce6      	adds	r6, r4, #3
 801939a:	4699      	mov	r9, r3
 801939c:	f1b9 0f00 	cmp.w	r9, #0
 80193a0:	f106 0603 	add.w	r6, r6, #3
 80193a4:	dd1f      	ble.n	80193e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80193a6:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80193aa:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80193ae:	1415      	asrs	r5, r2, #16
 80193b0:	4470      	add	r0, lr
 80193b2:	4462      	add	r2, ip
 80193b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80193b8:	fb0b a505 	mla	r5, fp, r5, sl
 80193bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80193c0:	eb08 0a05 	add.w	sl, r8, r5
 80193c4:	f818 5005 	ldrb.w	r5, [r8, r5]
 80193c8:	f806 5c06 	strb.w	r5, [r6, #-6]
 80193cc:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80193d0:	f806 5c05 	strb.w	r5, [r6, #-5]
 80193d4:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80193d8:	f806 5c04 	strb.w	r5, [r6, #-4]
 80193dc:	e7de      	b.n	801939c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80193de:	2600      	movs	r6, #0
 80193e0:	1b9d      	subs	r5, r3, r6
 80193e2:	2d00      	cmp	r5, #0
 80193e4:	dc38      	bgt.n	8019458 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80193e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80193ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80193ee:	441c      	add	r4, r3
 80193f0:	2900      	cmp	r1, #0
 80193f2:	dd59      	ble.n	80194a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80193f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80193f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80193fe:	3901      	subs	r1, #1
 8019400:	eeb0 6a62 	vmov.f32	s12, s5
 8019404:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019408:	ee31 1a05 	vadd.f32	s2, s2, s10
 801940c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019410:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8019414:	eeb0 6a43 	vmov.f32	s12, s6
 8019418:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801941c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8019420:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019424:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019428:	ee77 2a62 	vsub.f32	s5, s14, s5
 801942c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019430:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019434:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019438:	ee12 2a90 	vmov	r2, s5
 801943c:	eef0 2a47 	vmov.f32	s5, s14
 8019440:	fb92 fef3 	sdiv	lr, r2, r3
 8019444:	ee13 2a10 	vmov	r2, s6
 8019448:	eeb0 3a67 	vmov.f32	s6, s15
 801944c:	fb92 fcf3 	sdiv	ip, r2, r3
 8019450:	9a01      	ldr	r2, [sp, #4]
 8019452:	bf08      	it	eq
 8019454:	4613      	moveq	r3, r2
 8019456:	e772      	b.n	801933e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8019458:	ea5f 4920 	movs.w	r9, r0, asr #16
 801945c:	d420      	bmi.n	80194a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801945e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8019462:	45cb      	cmp	fp, r9
 8019464:	dd1c      	ble.n	80194a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019466:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801946a:	d419      	bmi.n	80194a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801946c:	68fd      	ldr	r5, [r7, #12]
 801946e:	4555      	cmp	r5, sl
 8019470:	dd16      	ble.n	80194a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019472:	fa0f f58b 	sxth.w	r5, fp
 8019476:	fb0a 9505 	mla	r5, sl, r5, r9
 801947a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801947e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8019482:	eb08 0b05 	add.w	fp, r8, r5
 8019486:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801948a:	f804 9005 	strb.w	r9, [r4, r5]
 801948e:	4425      	add	r5, r4
 8019490:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8019494:	f885 9001 	strb.w	r9, [r5, #1]
 8019498:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801949c:	f885 9002 	strb.w	r9, [r5, #2]
 80194a0:	4470      	add	r0, lr
 80194a2:	4462      	add	r2, ip
 80194a4:	3601      	adds	r6, #1
 80194a6:	e79b      	b.n	80193e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80194a8:	b003      	add	sp, #12
 80194aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80194ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b2:	b085      	sub	sp, #20
 80194b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80194b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80194ba:	9202      	str	r2, [sp, #8]
 80194bc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80194c0:	6860      	ldr	r0, [r4, #4]
 80194c2:	9203      	str	r2, [sp, #12]
 80194c4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80194c8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80194cc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80194d0:	fb00 2505 	mla	r5, r0, r5, r2
 80194d4:	6822      	ldr	r2, [r4, #0]
 80194d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194da:	4415      	add	r5, r2
 80194dc:	f8dc 2000 	ldr.w	r2, [ip]
 80194e0:	9201      	str	r2, [sp, #4]
 80194e2:	2900      	cmp	r1, #0
 80194e4:	dc03      	bgt.n	80194ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80194e6:	9a02      	ldr	r2, [sp, #8]
 80194e8:	2a00      	cmp	r2, #0
 80194ea:	f340 8122 	ble.w	8019732 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80194ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194f0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80194f4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80194f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80194fa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80194fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019502:	2b00      	cmp	r3, #0
 8019504:	dd0d      	ble.n	8019522 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8019506:	1422      	asrs	r2, r4, #16
 8019508:	d405      	bmi.n	8019516 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801950a:	4542      	cmp	r2, r8
 801950c:	da03      	bge.n	8019516 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801950e:	1402      	asrs	r2, r0, #16
 8019510:	d401      	bmi.n	8019516 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019512:	42ba      	cmp	r2, r7
 8019514:	db06      	blt.n	8019524 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019516:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019518:	4474      	add	r4, lr
 801951a:	3b01      	subs	r3, #1
 801951c:	3503      	adds	r5, #3
 801951e:	4410      	add	r0, r2
 8019520:	e7ef      	b.n	8019502 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019522:	d072      	beq.n	801960a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019524:	1e5a      	subs	r2, r3, #1
 8019526:	fb0e 4602 	mla	r6, lr, r2, r4
 801952a:	1436      	asrs	r6, r6, #16
 801952c:	d462      	bmi.n	80195f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801952e:	4546      	cmp	r6, r8
 8019530:	da60      	bge.n	80195f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019532:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019534:	fb06 0202 	mla	r2, r6, r2, r0
 8019538:	1412      	asrs	r2, r2, #16
 801953a:	d45b      	bmi.n	80195f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801953c:	42ba      	cmp	r2, r7
 801953e:	da59      	bge.n	80195f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019540:	1cef      	adds	r7, r5, #3
 8019542:	4699      	mov	r9, r3
 8019544:	f1b9 0f00 	cmp.w	r9, #0
 8019548:	dd5a      	ble.n	8019600 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801954a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801954e:	1426      	asrs	r6, r4, #16
 8019550:	1402      	asrs	r2, r0, #16
 8019552:	fb08 6202 	mla	r2, r8, r2, r6
 8019556:	9e01      	ldr	r6, [sp, #4]
 8019558:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801955c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8019560:	d041      	beq.n	80195e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019562:	9a03      	ldr	r2, [sp, #12]
 8019564:	fa5f fb86 	uxtb.w	fp, r6
 8019568:	fb02 f808 	mul.w	r8, r2, r8
 801956c:	f108 0201 	add.w	r2, r8, #1
 8019570:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8019574:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8019578:	1212      	asrs	r2, r2, #8
 801957a:	fa1f fa82 	uxth.w	sl, r2
 801957e:	43d2      	mvns	r2, r2
 8019580:	fb1b fb0a 	smulbb	fp, fp, sl
 8019584:	b2d2      	uxtb	r2, r2
 8019586:	fb08 b802 	mla	r8, r8, r2, fp
 801958a:	fa1f f888 	uxth.w	r8, r8
 801958e:	f108 0b01 	add.w	fp, r8, #1
 8019592:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019596:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801959a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801959e:	fb1b fb0a 	smulbb	fp, fp, sl
 80195a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80195a6:	fb16 fa0a 	smulbb	sl, r6, sl
 80195aa:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80195ae:	f807 8c03 	strb.w	r8, [r7, #-3]
 80195b2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80195b6:	fb06 aa02 	mla	sl, r6, r2, sl
 80195ba:	fb08 b802 	mla	r8, r8, r2, fp
 80195be:	fa1f fa8a 	uxth.w	sl, sl
 80195c2:	fa1f f888 	uxth.w	r8, r8
 80195c6:	f10a 0601 	add.w	r6, sl, #1
 80195ca:	f108 0b01 	add.w	fp, r8, #1
 80195ce:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80195d2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80195d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80195da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80195de:	f807 ac01 	strb.w	sl, [r7, #-1]
 80195e2:	f807 8c02 	strb.w	r8, [r7, #-2]
 80195e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80195e8:	4474      	add	r4, lr
 80195ea:	3703      	adds	r7, #3
 80195ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80195f0:	4410      	add	r0, r2
 80195f2:	e7a7      	b.n	8019544 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80195f4:	f04f 0800 	mov.w	r8, #0
 80195f8:	eba3 0208 	sub.w	r2, r3, r8
 80195fc:	2a00      	cmp	r2, #0
 80195fe:	dc3b      	bgt.n	8019678 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019600:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019604:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019608:	441d      	add	r5, r3
 801960a:	2900      	cmp	r1, #0
 801960c:	f340 8091 	ble.w	8019732 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019610:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019616:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801961a:	3901      	subs	r1, #1
 801961c:	eeb0 6a62 	vmov.f32	s12, s5
 8019620:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019624:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019628:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801962c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019630:	eeb0 6a43 	vmov.f32	s12, s6
 8019634:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019638:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801963c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019640:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019644:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019648:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801964c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019650:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019654:	ee12 2a90 	vmov	r2, s5
 8019658:	eef0 2a47 	vmov.f32	s5, s14
 801965c:	fb92 fef3 	sdiv	lr, r2, r3
 8019660:	ee13 2a10 	vmov	r2, s6
 8019664:	eeb0 3a67 	vmov.f32	s6, s15
 8019668:	fb92 f3f3 	sdiv	r3, r2, r3
 801966c:	9a02      	ldr	r2, [sp, #8]
 801966e:	9312      	str	r3, [sp, #72]	; 0x48
 8019670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019672:	bf08      	it	eq
 8019674:	4613      	moveq	r3, r2
 8019676:	e734      	b.n	80194e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019678:	1427      	asrs	r7, r4, #16
 801967a:	d454      	bmi.n	8019726 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801967c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019680:	42be      	cmp	r6, r7
 8019682:	dd50      	ble.n	8019726 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019684:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019688:	d44d      	bmi.n	8019726 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801968a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801968e:	454a      	cmp	r2, r9
 8019690:	dd49      	ble.n	8019726 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019692:	b236      	sxth	r6, r6
 8019694:	9a01      	ldr	r2, [sp, #4]
 8019696:	fb09 7606 	mla	r6, r9, r6, r7
 801969a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801969e:	0e3a      	lsrs	r2, r7, #24
 80196a0:	d041      	beq.n	8019726 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80196a2:	9e03      	ldr	r6, [sp, #12]
 80196a4:	fa5f fb87 	uxtb.w	fp, r7
 80196a8:	4372      	muls	r2, r6
 80196aa:	1c56      	adds	r6, r2, #1
 80196ac:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80196b0:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80196b4:	1212      	asrs	r2, r2, #8
 80196b6:	f815 9006 	ldrb.w	r9, [r5, r6]
 80196ba:	fa1f fa82 	uxth.w	sl, r2
 80196be:	43d2      	mvns	r2, r2
 80196c0:	fb1b fb0a 	smulbb	fp, fp, sl
 80196c4:	b2d2      	uxtb	r2, r2
 80196c6:	fb09 b902 	mla	r9, r9, r2, fp
 80196ca:	fa1f f989 	uxth.w	r9, r9
 80196ce:	f109 0b01 	add.w	fp, r9, #1
 80196d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80196d6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80196da:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80196de:	fb1b fb0a 	smulbb	fp, fp, sl
 80196e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80196e6:	fb17 fa0a 	smulbb	sl, r7, sl
 80196ea:	f805 9006 	strb.w	r9, [r5, r6]
 80196ee:	442e      	add	r6, r5
 80196f0:	78b7      	ldrb	r7, [r6, #2]
 80196f2:	f896 9001 	ldrb.w	r9, [r6, #1]
 80196f6:	fb07 aa02 	mla	sl, r7, r2, sl
 80196fa:	fb09 b902 	mla	r9, r9, r2, fp
 80196fe:	fa1f fa8a 	uxth.w	sl, sl
 8019702:	fa1f f989 	uxth.w	r9, r9
 8019706:	f10a 0701 	add.w	r7, sl, #1
 801970a:	f109 0b01 	add.w	fp, r9, #1
 801970e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019712:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019716:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801971a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801971e:	f886 a002 	strb.w	sl, [r6, #2]
 8019722:	f886 9001 	strb.w	r9, [r6, #1]
 8019726:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019728:	4474      	add	r4, lr
 801972a:	f108 0801 	add.w	r8, r8, #1
 801972e:	4410      	add	r0, r2
 8019730:	e762      	b.n	80195f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019732:	b005      	add	sp, #20
 8019734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019738 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801973c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801973e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019742:	9201      	str	r2, [sp, #4]
 8019744:	6860      	ldr	r0, [r4, #4]
 8019746:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801974a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801974e:	fb00 2505 	mla	r5, r0, r5, r2
 8019752:	6822      	ldr	r2, [r4, #0]
 8019754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019758:	4415      	add	r5, r2
 801975a:	f8dc 2000 	ldr.w	r2, [ip]
 801975e:	9200      	str	r2, [sp, #0]
 8019760:	2900      	cmp	r1, #0
 8019762:	dc03      	bgt.n	801976c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019764:	9a01      	ldr	r2, [sp, #4]
 8019766:	2a00      	cmp	r2, #0
 8019768:	f340 812b 	ble.w	80199c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801976c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801976e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019772:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019778:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801977c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019780:	2b00      	cmp	r3, #0
 8019782:	dd0e      	ble.n	80197a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019784:	1422      	asrs	r2, r4, #16
 8019786:	d405      	bmi.n	8019794 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019788:	4572      	cmp	r2, lr
 801978a:	da03      	bge.n	8019794 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801978c:	1402      	asrs	r2, r0, #16
 801978e:	d401      	bmi.n	8019794 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019790:	42ba      	cmp	r2, r7
 8019792:	db07      	blt.n	80197a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019796:	3b01      	subs	r3, #1
 8019798:	3503      	adds	r5, #3
 801979a:	4414      	add	r4, r2
 801979c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801979e:	4410      	add	r0, r2
 80197a0:	e7ee      	b.n	8019780 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80197a2:	d06f      	beq.n	8019884 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80197a4:	1e5a      	subs	r2, r3, #1
 80197a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80197a8:	fb06 4602 	mla	r6, r6, r2, r4
 80197ac:	1436      	asrs	r6, r6, #16
 80197ae:	d45e      	bmi.n	801986e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80197b0:	4576      	cmp	r6, lr
 80197b2:	da5c      	bge.n	801986e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80197b4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80197b6:	fb06 0202 	mla	r2, r6, r2, r0
 80197ba:	1412      	asrs	r2, r2, #16
 80197bc:	d457      	bmi.n	801986e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80197be:	42ba      	cmp	r2, r7
 80197c0:	da55      	bge.n	801986e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80197c2:	1cee      	adds	r6, r5, #3
 80197c4:	469a      	mov	sl, r3
 80197c6:	f1ba 0f00 	cmp.w	sl, #0
 80197ca:	dd56      	ble.n	801987a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80197cc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80197d0:	1427      	asrs	r7, r4, #16
 80197d2:	1402      	asrs	r2, r0, #16
 80197d4:	fb0e 7202 	mla	r2, lr, r2, r7
 80197d8:	9f00      	ldr	r7, [sp, #0]
 80197da:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80197de:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80197e2:	d03c      	beq.n	801985e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80197e4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80197e8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80197ec:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80197f0:	fa5f f28e 	uxtb.w	r2, lr
 80197f4:	b2ff      	uxtb	r7, r7
 80197f6:	f000 80dd 	beq.w	80199b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80197fa:	fa1f f882 	uxth.w	r8, r2
 80197fe:	43d2      	mvns	r2, r2
 8019800:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8019804:	fb17 f708 	smulbb	r7, r7, r8
 8019808:	b2d2      	uxtb	r2, r2
 801980a:	fb19 f908 	smulbb	r9, r9, r8
 801980e:	fb0e 7702 	mla	r7, lr, r2, r7
 8019812:	fb1b f808 	smulbb	r8, fp, r8
 8019816:	b2bf      	uxth	r7, r7
 8019818:	f107 0e01 	add.w	lr, r7, #1
 801981c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019820:	123f      	asrs	r7, r7, #8
 8019822:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019826:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801982a:	fb07 9902 	mla	r9, r7, r2, r9
 801982e:	fa1f f989 	uxth.w	r9, r9
 8019832:	f109 0701 	add.w	r7, r9, #1
 8019836:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801983a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801983e:	fb07 8802 	mla	r8, r7, r2, r8
 8019842:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019846:	fa1f f888 	uxth.w	r8, r8
 801984a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801984e:	f108 0201 	add.w	r2, r8, #1
 8019852:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019856:	ea4f 2828 	mov.w	r8, r8, asr #8
 801985a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801985e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019860:	3603      	adds	r6, #3
 8019862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019866:	4414      	add	r4, r2
 8019868:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801986a:	4410      	add	r0, r2
 801986c:	e7ab      	b.n	80197c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801986e:	f04f 0e00 	mov.w	lr, #0
 8019872:	eba3 020e 	sub.w	r2, r3, lr
 8019876:	2a00      	cmp	r2, #0
 8019878:	dc3d      	bgt.n	80198f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801987a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801987e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019882:	441d      	add	r5, r3
 8019884:	2900      	cmp	r1, #0
 8019886:	f340 809c 	ble.w	80199c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801988a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801988e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019890:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019894:	3901      	subs	r1, #1
 8019896:	eeb0 6a62 	vmov.f32	s12, s5
 801989a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801989e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80198a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80198a6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80198aa:	eeb0 6a43 	vmov.f32	s12, s6
 80198ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80198b2:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80198b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80198ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80198be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80198c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80198c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80198ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80198ce:	ee12 2a90 	vmov	r2, s5
 80198d2:	eef0 2a47 	vmov.f32	s5, s14
 80198d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80198da:	ee13 2a10 	vmov	r2, s6
 80198de:	930f      	str	r3, [sp, #60]	; 0x3c
 80198e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198e2:	eeb0 3a67 	vmov.f32	s6, s15
 80198e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80198ea:	9a01      	ldr	r2, [sp, #4]
 80198ec:	9310      	str	r3, [sp, #64]	; 0x40
 80198ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198f0:	bf08      	it	eq
 80198f2:	4613      	moveq	r3, r2
 80198f4:	e734      	b.n	8019760 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80198f6:	1427      	asrs	r7, r4, #16
 80198f8:	d44d      	bmi.n	8019996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80198fa:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80198fe:	42be      	cmp	r6, r7
 8019900:	dd49      	ble.n	8019996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019902:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019906:	d446      	bmi.n	8019996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019908:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801990c:	4542      	cmp	r2, r8
 801990e:	dd42      	ble.n	8019996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019910:	b236      	sxth	r6, r6
 8019912:	9a00      	ldr	r2, [sp, #0]
 8019914:	fb08 7606 	mla	r6, r8, r6, r7
 8019918:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801991c:	0e3a      	lsrs	r2, r7, #24
 801991e:	d03a      	beq.n	8019996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019920:	2aff      	cmp	r2, #255	; 0xff
 8019922:	b2d6      	uxtb	r6, r2
 8019924:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019928:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801992c:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8019930:	b2ff      	uxtb	r7, r7
 8019932:	d037      	beq.n	80199a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8019934:	fa1f f986 	uxth.w	r9, r6
 8019938:	4472      	add	r2, lr
 801993a:	43f6      	mvns	r6, r6
 801993c:	f815 8002 	ldrb.w	r8, [r5, r2]
 8019940:	fb17 f709 	smulbb	r7, r7, r9
 8019944:	fb1a fa09 	smulbb	sl, sl, r9
 8019948:	b2f6      	uxtb	r6, r6
 801994a:	fb1b f909 	smulbb	r9, fp, r9
 801994e:	fb08 7706 	mla	r7, r8, r6, r7
 8019952:	b2bf      	uxth	r7, r7
 8019954:	f107 0801 	add.w	r8, r7, #1
 8019958:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801995c:	123f      	asrs	r7, r7, #8
 801995e:	54af      	strb	r7, [r5, r2]
 8019960:	442a      	add	r2, r5
 8019962:	7857      	ldrb	r7, [r2, #1]
 8019964:	fb07 aa06 	mla	sl, r7, r6, sl
 8019968:	fa1f fa8a 	uxth.w	sl, sl
 801996c:	f10a 0701 	add.w	r7, sl, #1
 8019970:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019974:	7897      	ldrb	r7, [r2, #2]
 8019976:	fb07 9906 	mla	r9, r7, r6, r9
 801997a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801997e:	fa1f f989 	uxth.w	r9, r9
 8019982:	f882 a001 	strb.w	sl, [r2, #1]
 8019986:	f109 0601 	add.w	r6, r9, #1
 801998a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801998e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019992:	f882 9002 	strb.w	r9, [r2, #2]
 8019996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019998:	f10e 0e01 	add.w	lr, lr, #1
 801999c:	4414      	add	r4, r2
 801999e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80199a0:	4410      	add	r0, r2
 80199a2:	e766      	b.n	8019872 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80199a4:	4472      	add	r2, lr
 80199a6:	54af      	strb	r7, [r5, r2]
 80199a8:	442a      	add	r2, r5
 80199aa:	f882 a001 	strb.w	sl, [r2, #1]
 80199ae:	f882 b002 	strb.w	fp, [r2, #2]
 80199b2:	e7f0      	b.n	8019996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80199b4:	f806 7c03 	strb.w	r7, [r6, #-3]
 80199b8:	f806 9c02 	strb.w	r9, [r6, #-2]
 80199bc:	f806 bc01 	strb.w	fp, [r6, #-1]
 80199c0:	e74d      	b.n	801985e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80199c2:	b003      	add	sp, #12
 80199c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80199c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199cc:	b087      	sub	sp, #28
 80199ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80199d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80199d4:	9204      	str	r2, [sp, #16]
 80199d6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80199da:	6860      	ldr	r0, [r4, #4]
 80199dc:	9205      	str	r2, [sp, #20]
 80199de:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80199e2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80199e6:	9101      	str	r1, [sp, #4]
 80199e8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80199ec:	fb00 2505 	mla	r5, r0, r5, r2
 80199f0:	6822      	ldr	r2, [r4, #0]
 80199f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80199f6:	4415      	add	r5, r2
 80199f8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80199fc:	3201      	adds	r2, #1
 80199fe:	f022 0201 	bic.w	r2, r2, #1
 8019a02:	9202      	str	r2, [sp, #8]
 8019a04:	f8dc 2000 	ldr.w	r2, [ip]
 8019a08:	9203      	str	r2, [sp, #12]
 8019a0a:	9a01      	ldr	r2, [sp, #4]
 8019a0c:	2a00      	cmp	r2, #0
 8019a0e:	dc03      	bgt.n	8019a18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019a10:	9a04      	ldr	r2, [sp, #16]
 8019a12:	2a00      	cmp	r2, #0
 8019a14:	f340 8135 	ble.w	8019c82 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019a18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a1a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019a1e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019a22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019a24:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019a28:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	dd0d      	ble.n	8019a4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019a30:	1422      	asrs	r2, r4, #16
 8019a32:	d405      	bmi.n	8019a40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019a34:	4542      	cmp	r2, r8
 8019a36:	da03      	bge.n	8019a40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019a38:	1402      	asrs	r2, r0, #16
 8019a3a:	d401      	bmi.n	8019a40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019a3c:	42ba      	cmp	r2, r7
 8019a3e:	db06      	blt.n	8019a4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019a40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a42:	4474      	add	r4, lr
 8019a44:	3b01      	subs	r3, #1
 8019a46:	3503      	adds	r5, #3
 8019a48:	4410      	add	r0, r2
 8019a4a:	e7ef      	b.n	8019a2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019a4c:	d077      	beq.n	8019b3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8019a4e:	1e5a      	subs	r2, r3, #1
 8019a50:	fb0e 4602 	mla	r6, lr, r2, r4
 8019a54:	1436      	asrs	r6, r6, #16
 8019a56:	d469      	bmi.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a58:	4546      	cmp	r6, r8
 8019a5a:	da67      	bge.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a5c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019a5e:	fb06 0202 	mla	r2, r6, r2, r0
 8019a62:	1412      	asrs	r2, r2, #16
 8019a64:	d462      	bmi.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a66:	42ba      	cmp	r2, r7
 8019a68:	da60      	bge.n	8019b2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a6a:	1cee      	adds	r6, r5, #3
 8019a6c:	4699      	mov	r9, r3
 8019a6e:	f1b9 0f00 	cmp.w	r9, #0
 8019a72:	dd5f      	ble.n	8019b34 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019a74:	1422      	asrs	r2, r4, #16
 8019a76:	9902      	ldr	r1, [sp, #8]
 8019a78:	1407      	asrs	r7, r0, #16
 8019a7a:	fb01 2707 	mla	r7, r1, r7, r2
 8019a7e:	9903      	ldr	r1, [sp, #12]
 8019a80:	087a      	lsrs	r2, r7, #1
 8019a82:	5c8a      	ldrb	r2, [r1, r2]
 8019a84:	07f9      	lsls	r1, r7, #31
 8019a86:	bf54      	ite	pl
 8019a88:	f002 020f 	andpl.w	r2, r2, #15
 8019a8c:	1112      	asrmi	r2, r2, #4
 8019a8e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019a92:	b2d2      	uxtb	r2, r2
 8019a94:	2a00      	cmp	r2, #0
 8019a96:	d042      	beq.n	8019b1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019a98:	497b      	ldr	r1, [pc, #492]	; (8019c88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019a9a:	680f      	ldr	r7, [r1, #0]
 8019a9c:	9905      	ldr	r1, [sp, #20]
 8019a9e:	fa5f fb87 	uxtb.w	fp, r7
 8019aa2:	434a      	muls	r2, r1
 8019aa4:	f102 0801 	add.w	r8, r2, #1
 8019aa8:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8019aac:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8019ab0:	1212      	asrs	r2, r2, #8
 8019ab2:	fa1f fa82 	uxth.w	sl, r2
 8019ab6:	43d2      	mvns	r2, r2
 8019ab8:	fb1b fb0a 	smulbb	fp, fp, sl
 8019abc:	b2d2      	uxtb	r2, r2
 8019abe:	fb08 b802 	mla	r8, r8, r2, fp
 8019ac2:	fa1f f888 	uxth.w	r8, r8
 8019ac6:	f108 0b01 	add.w	fp, r8, #1
 8019aca:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019ace:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019ad2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019ad6:	fb1b fb0a 	smulbb	fp, fp, sl
 8019ada:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019ade:	fb17 fa0a 	smulbb	sl, r7, sl
 8019ae2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019ae6:	f806 8c03 	strb.w	r8, [r6, #-3]
 8019aea:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8019aee:	fb07 aa02 	mla	sl, r7, r2, sl
 8019af2:	fb08 b802 	mla	r8, r8, r2, fp
 8019af6:	fa1f fa8a 	uxth.w	sl, sl
 8019afa:	fa1f f888 	uxth.w	r8, r8
 8019afe:	f10a 0701 	add.w	r7, sl, #1
 8019b02:	f108 0b01 	add.w	fp, r8, #1
 8019b06:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019b0a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019b0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019b12:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019b16:	f806 ac01 	strb.w	sl, [r6, #-1]
 8019b1a:	f806 8c02 	strb.w	r8, [r6, #-2]
 8019b1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b20:	4474      	add	r4, lr
 8019b22:	3603      	adds	r6, #3
 8019b24:	f109 39ff 	add.w	r9, r9, #4294967295
 8019b28:	4410      	add	r0, r2
 8019b2a:	e7a0      	b.n	8019a6e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b2c:	2700      	movs	r7, #0
 8019b2e:	1bda      	subs	r2, r3, r7
 8019b30:	2a00      	cmp	r2, #0
 8019b32:	dc3e      	bgt.n	8019bb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8019b34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b3c:	441d      	add	r5, r3
 8019b3e:	9b01      	ldr	r3, [sp, #4]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	f340 809e 	ble.w	8019c82 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019b46:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019b4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019b4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019b50:	eeb0 6a62 	vmov.f32	s12, s5
 8019b54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019b58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019b5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b60:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019b64:	eeb0 6a43 	vmov.f32	s12, s6
 8019b68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b6c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019b70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019b74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019b78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019b7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019b80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019b84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019b88:	ee12 2a90 	vmov	r2, s5
 8019b8c:	eef0 2a47 	vmov.f32	s5, s14
 8019b90:	fb92 fef3 	sdiv	lr, r2, r3
 8019b94:	ee13 2a10 	vmov	r2, s6
 8019b98:	eeb0 3a67 	vmov.f32	s6, s15
 8019b9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ba0:	9314      	str	r3, [sp, #80]	; 0x50
 8019ba2:	9b01      	ldr	r3, [sp, #4]
 8019ba4:	9a04      	ldr	r2, [sp, #16]
 8019ba6:	3b01      	subs	r3, #1
 8019ba8:	9301      	str	r3, [sp, #4]
 8019baa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019bac:	bf08      	it	eq
 8019bae:	4613      	moveq	r3, r2
 8019bb0:	e72b      	b.n	8019a0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019bb2:	1426      	asrs	r6, r4, #16
 8019bb4:	d460      	bmi.n	8019c78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019bb6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019bba:	42b2      	cmp	r2, r6
 8019bbc:	dd5c      	ble.n	8019c78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019bbe:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019bc2:	d459      	bmi.n	8019c78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019bc4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019bc8:	4542      	cmp	r2, r8
 8019bca:	dd55      	ble.n	8019c78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019bcc:	9a02      	ldr	r2, [sp, #8]
 8019bce:	9903      	ldr	r1, [sp, #12]
 8019bd0:	fb08 6602 	mla	r6, r8, r2, r6
 8019bd4:	0872      	lsrs	r2, r6, #1
 8019bd6:	07f6      	lsls	r6, r6, #31
 8019bd8:	5c8a      	ldrb	r2, [r1, r2]
 8019bda:	bf54      	ite	pl
 8019bdc:	f002 020f 	andpl.w	r2, r2, #15
 8019be0:	1112      	asrmi	r2, r2, #4
 8019be2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019be6:	b2d2      	uxtb	r2, r2
 8019be8:	2a00      	cmp	r2, #0
 8019bea:	d045      	beq.n	8019c78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019bec:	4926      	ldr	r1, [pc, #152]	; (8019c88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019bee:	f8d1 8000 	ldr.w	r8, [r1]
 8019bf2:	9905      	ldr	r1, [sp, #20]
 8019bf4:	fa5f fb88 	uxtb.w	fp, r8
 8019bf8:	434a      	muls	r2, r1
 8019bfa:	1c56      	adds	r6, r2, #1
 8019bfc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019c00:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019c04:	1212      	asrs	r2, r2, #8
 8019c06:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019c0a:	fa1f fa82 	uxth.w	sl, r2
 8019c0e:	43d2      	mvns	r2, r2
 8019c10:	fb1b fb0a 	smulbb	fp, fp, sl
 8019c14:	b2d2      	uxtb	r2, r2
 8019c16:	fb09 b902 	mla	r9, r9, r2, fp
 8019c1a:	fa1f f989 	uxth.w	r9, r9
 8019c1e:	f109 0b01 	add.w	fp, r9, #1
 8019c22:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c26:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8019c2a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8019c2e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019c32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c36:	fb18 fa0a 	smulbb	sl, r8, sl
 8019c3a:	f805 9006 	strb.w	r9, [r5, r6]
 8019c3e:	442e      	add	r6, r5
 8019c40:	f896 8002 	ldrb.w	r8, [r6, #2]
 8019c44:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019c48:	fb08 aa02 	mla	sl, r8, r2, sl
 8019c4c:	fb09 b902 	mla	r9, r9, r2, fp
 8019c50:	fa1f fa8a 	uxth.w	sl, sl
 8019c54:	fa1f f989 	uxth.w	r9, r9
 8019c58:	f10a 0801 	add.w	r8, sl, #1
 8019c5c:	f109 0b01 	add.w	fp, r9, #1
 8019c60:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8019c64:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c68:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019c6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c70:	f886 a002 	strb.w	sl, [r6, #2]
 8019c74:	f886 9001 	strb.w	r9, [r6, #1]
 8019c78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c7a:	4474      	add	r4, lr
 8019c7c:	3701      	adds	r7, #1
 8019c7e:	4410      	add	r0, r2
 8019c80:	e755      	b.n	8019b2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8019c82:	b007      	add	sp, #28
 8019c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c88:	2400c85c 	.word	0x2400c85c

08019c8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c90:	b085      	sub	sp, #20
 8019c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019c96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019c98:	9203      	str	r2, [sp, #12]
 8019c9a:	6860      	ldr	r0, [r4, #4]
 8019c9c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019ca0:	9100      	str	r1, [sp, #0]
 8019ca2:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8019ca6:	fb00 2606 	mla	r6, r0, r6, r2
 8019caa:	6822      	ldr	r2, [r4, #0]
 8019cac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019cb0:	4416      	add	r6, r2
 8019cb2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019cb6:	3201      	adds	r2, #1
 8019cb8:	f022 0201 	bic.w	r2, r2, #1
 8019cbc:	9201      	str	r2, [sp, #4]
 8019cbe:	f8dc 2000 	ldr.w	r2, [ip]
 8019cc2:	9202      	str	r2, [sp, #8]
 8019cc4:	9a00      	ldr	r2, [sp, #0]
 8019cc6:	2a00      	cmp	r2, #0
 8019cc8:	dc03      	bgt.n	8019cd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8019cca:	9a03      	ldr	r2, [sp, #12]
 8019ccc:	2a00      	cmp	r2, #0
 8019cce:	f340 8140 	ble.w	8019f52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019cd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019cd4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019cd8:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8019cdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019cde:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019ce2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	dd0e      	ble.n	8019d08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019cea:	142a      	asrs	r2, r5, #16
 8019cec:	d405      	bmi.n	8019cfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019cee:	4572      	cmp	r2, lr
 8019cf0:	da03      	bge.n	8019cfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019cf2:	1422      	asrs	r2, r4, #16
 8019cf4:	d401      	bmi.n	8019cfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019cf6:	42ba      	cmp	r2, r7
 8019cf8:	db07      	blt.n	8019d0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019cfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019cfc:	3b01      	subs	r3, #1
 8019cfe:	3603      	adds	r6, #3
 8019d00:	4415      	add	r5, r2
 8019d02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d04:	4414      	add	r4, r2
 8019d06:	e7ee      	b.n	8019ce6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019d08:	d072      	beq.n	8019df0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019d0a:	1e5a      	subs	r2, r3, #1
 8019d0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019d0e:	fb00 5002 	mla	r0, r0, r2, r5
 8019d12:	1400      	asrs	r0, r0, #16
 8019d14:	d463      	bmi.n	8019dde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019d16:	4570      	cmp	r0, lr
 8019d18:	da61      	bge.n	8019dde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019d1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019d1c:	fb00 4202 	mla	r2, r0, r2, r4
 8019d20:	1412      	asrs	r2, r2, #16
 8019d22:	d45c      	bmi.n	8019dde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019d24:	42ba      	cmp	r2, r7
 8019d26:	da5a      	bge.n	8019dde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019d28:	1cf0      	adds	r0, r6, #3
 8019d2a:	469a      	mov	sl, r3
 8019d2c:	f1ba 0f00 	cmp.w	sl, #0
 8019d30:	dd59      	ble.n	8019de6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8019d32:	142a      	asrs	r2, r5, #16
 8019d34:	9901      	ldr	r1, [sp, #4]
 8019d36:	1427      	asrs	r7, r4, #16
 8019d38:	fb01 2707 	mla	r7, r1, r7, r2
 8019d3c:	9902      	ldr	r1, [sp, #8]
 8019d3e:	087a      	lsrs	r2, r7, #1
 8019d40:	5c8a      	ldrb	r2, [r1, r2]
 8019d42:	07f9      	lsls	r1, r7, #31
 8019d44:	bf54      	ite	pl
 8019d46:	f002 020f 	andpl.w	r2, r2, #15
 8019d4a:	1112      	asrmi	r2, r2, #4
 8019d4c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019d50:	b2d2      	uxtb	r2, r2
 8019d52:	2a00      	cmp	r2, #0
 8019d54:	d03b      	beq.n	8019dce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019d56:	4980      	ldr	r1, [pc, #512]	; (8019f58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019d58:	2aff      	cmp	r2, #255	; 0xff
 8019d5a:	680f      	ldr	r7, [r1, #0]
 8019d5c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019d60:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019d64:	b2ff      	uxtb	r7, r7
 8019d66:	f000 80ed 	beq.w	8019f44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8019d6a:	fa1f f882 	uxth.w	r8, r2
 8019d6e:	43d2      	mvns	r2, r2
 8019d70:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8019d74:	fb17 f708 	smulbb	r7, r7, r8
 8019d78:	b2d2      	uxtb	r2, r2
 8019d7a:	fb19 f908 	smulbb	r9, r9, r8
 8019d7e:	fb0e 7702 	mla	r7, lr, r2, r7
 8019d82:	fb1b f808 	smulbb	r8, fp, r8
 8019d86:	b2bf      	uxth	r7, r7
 8019d88:	f107 0e01 	add.w	lr, r7, #1
 8019d8c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019d90:	123f      	asrs	r7, r7, #8
 8019d92:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019d96:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8019d9a:	fb07 9902 	mla	r9, r7, r2, r9
 8019d9e:	fa1f f989 	uxth.w	r9, r9
 8019da2:	f109 0701 	add.w	r7, r9, #1
 8019da6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019daa:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8019dae:	fb07 8802 	mla	r8, r7, r2, r8
 8019db2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019db6:	fa1f f888 	uxth.w	r8, r8
 8019dba:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019dbe:	f108 0201 	add.w	r2, r8, #1
 8019dc2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019dc6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019dca:	f800 8c01 	strb.w	r8, [r0, #-1]
 8019dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019dd0:	3003      	adds	r0, #3
 8019dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019dd6:	4415      	add	r5, r2
 8019dd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019dda:	4414      	add	r4, r2
 8019ddc:	e7a6      	b.n	8019d2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019dde:	2700      	movs	r7, #0
 8019de0:	1bda      	subs	r2, r3, r7
 8019de2:	2a00      	cmp	r2, #0
 8019de4:	dc40      	bgt.n	8019e68 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019dea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019dee:	441e      	add	r6, r3
 8019df0:	9b00      	ldr	r3, [sp, #0]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	f340 80ad 	ble.w	8019f52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019df8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e02:	eeb0 6a62 	vmov.f32	s12, s5
 8019e06:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e12:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019e16:	eeb0 6a43 	vmov.f32	s12, s6
 8019e1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e1e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019e22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e26:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e3a:	ee12 2a90 	vmov	r2, s5
 8019e3e:	eef0 2a47 	vmov.f32	s5, s14
 8019e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e46:	ee13 2a10 	vmov	r2, s6
 8019e4a:	9311      	str	r3, [sp, #68]	; 0x44
 8019e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e4e:	eeb0 3a67 	vmov.f32	s6, s15
 8019e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e56:	9312      	str	r3, [sp, #72]	; 0x48
 8019e58:	9b00      	ldr	r3, [sp, #0]
 8019e5a:	9a03      	ldr	r2, [sp, #12]
 8019e5c:	3b01      	subs	r3, #1
 8019e5e:	9300      	str	r3, [sp, #0]
 8019e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e62:	bf08      	it	eq
 8019e64:	4613      	moveq	r3, r2
 8019e66:	e72d      	b.n	8019cc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019e68:	1428      	asrs	r0, r5, #16
 8019e6a:	d45c      	bmi.n	8019f26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019e6c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019e70:	4282      	cmp	r2, r0
 8019e72:	dd58      	ble.n	8019f26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019e74:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019e78:	d455      	bmi.n	8019f26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019e7a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019e7e:	4572      	cmp	r2, lr
 8019e80:	dd51      	ble.n	8019f26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019e82:	9a01      	ldr	r2, [sp, #4]
 8019e84:	9902      	ldr	r1, [sp, #8]
 8019e86:	fb0e 0002 	mla	r0, lr, r2, r0
 8019e8a:	0842      	lsrs	r2, r0, #1
 8019e8c:	07c0      	lsls	r0, r0, #31
 8019e8e:	5c8a      	ldrb	r2, [r1, r2]
 8019e90:	bf54      	ite	pl
 8019e92:	f002 020f 	andpl.w	r2, r2, #15
 8019e96:	1112      	asrmi	r2, r2, #4
 8019e98:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019e9c:	b2d2      	uxtb	r2, r2
 8019e9e:	2a00      	cmp	r2, #0
 8019ea0:	d041      	beq.n	8019f26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019ea2:	492d      	ldr	r1, [pc, #180]	; (8019f58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019ea4:	2aff      	cmp	r2, #255	; 0xff
 8019ea6:	6808      	ldr	r0, [r1, #0]
 8019ea8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8019eac:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019eb0:	fa5f fe80 	uxtb.w	lr, r0
 8019eb4:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8019eb8:	d03b      	beq.n	8019f32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019eba:	fa1f f982 	uxth.w	r9, r2
 8019ebe:	4438      	add	r0, r7
 8019ec0:	43d2      	mvns	r2, r2
 8019ec2:	f816 8000 	ldrb.w	r8, [r6, r0]
 8019ec6:	fb1e fe09 	smulbb	lr, lr, r9
 8019eca:	fb1a fa09 	smulbb	sl, sl, r9
 8019ece:	b2d2      	uxtb	r2, r2
 8019ed0:	fb1b f909 	smulbb	r9, fp, r9
 8019ed4:	fb08 ee02 	mla	lr, r8, r2, lr
 8019ed8:	fa1f fe8e 	uxth.w	lr, lr
 8019edc:	f10e 0801 	add.w	r8, lr, #1
 8019ee0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8019ee4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019ee8:	f806 e000 	strb.w	lr, [r6, r0]
 8019eec:	4430      	add	r0, r6
 8019eee:	f890 e001 	ldrb.w	lr, [r0, #1]
 8019ef2:	fb0e aa02 	mla	sl, lr, r2, sl
 8019ef6:	fa1f fa8a 	uxth.w	sl, sl
 8019efa:	f10a 0e01 	add.w	lr, sl, #1
 8019efe:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8019f02:	f890 e002 	ldrb.w	lr, [r0, #2]
 8019f06:	fb0e 9902 	mla	r9, lr, r2, r9
 8019f0a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019f0e:	fa1f f989 	uxth.w	r9, r9
 8019f12:	f880 a001 	strb.w	sl, [r0, #1]
 8019f16:	f109 0201 	add.w	r2, r9, #1
 8019f1a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8019f1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019f22:	f880 9002 	strb.w	r9, [r0, #2]
 8019f26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f28:	3701      	adds	r7, #1
 8019f2a:	4415      	add	r5, r2
 8019f2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019f2e:	4414      	add	r4, r2
 8019f30:	e756      	b.n	8019de0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019f32:	4438      	add	r0, r7
 8019f34:	f806 e000 	strb.w	lr, [r6, r0]
 8019f38:	4430      	add	r0, r6
 8019f3a:	f880 a001 	strb.w	sl, [r0, #1]
 8019f3e:	f880 b002 	strb.w	fp, [r0, #2]
 8019f42:	e7f0      	b.n	8019f26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019f44:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019f48:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019f4c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8019f50:	e73d      	b.n	8019dce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019f52:	b005      	add	sp, #20
 8019f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f58:	2400c85c 	.word	0x2400c85c

08019f5c <_ZN8touchgfx8LCD24bppD1Ev>:
 8019f5c:	4770      	bx	lr

08019f5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019f5e:	4770      	bx	lr

08019f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019f60:	4770      	bx	lr

08019f62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019f62:	4770      	bx	lr

08019f64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8019f64:	4770      	bx	lr

08019f66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019f66:	4770      	bx	lr

08019f68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019f68:	4770      	bx	lr

08019f6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019f6a:	4770      	bx	lr

08019f6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019f6c:	4770      	bx	lr

08019f6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019f6e:	4770      	bx	lr

08019f70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019f70:	4770      	bx	lr

08019f72 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019f72:	4770      	bx	lr

08019f74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019f74:	4770      	bx	lr

08019f76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019f76:	4770      	bx	lr

08019f78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019f78:	4770      	bx	lr

08019f7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019f7a:	4770      	bx	lr

08019f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019f7c:	4770      	bx	lr

08019f7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019f7e:	4770      	bx	lr

08019f80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019f80:	4770      	bx	lr

08019f82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019f82:	4770      	bx	lr

08019f84 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019f84:	4770      	bx	lr
	...

08019f88 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f8a:	4606      	mov	r6, r0
 8019f8c:	b087      	sub	sp, #28
 8019f8e:	4615      	mov	r5, r2
 8019f90:	461f      	mov	r7, r3
 8019f92:	b353      	cbz	r3, 8019fea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019f94:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	dd26      	ble.n	8019fea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019f9c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	dd22      	ble.n	8019fea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019fa4:	6808      	ldr	r0, [r1, #0]
 8019fa6:	aa04      	add	r2, sp, #16
 8019fa8:	6849      	ldr	r1, [r1, #4]
 8019faa:	4c1b      	ldr	r4, [pc, #108]	; (801a018 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019fac:	c203      	stmia	r2!, {r0, r1}
 8019fae:	a804      	add	r0, sp, #16
 8019fb0:	f7fb fb74 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019fb4:	6820      	ldr	r0, [r4, #0]
 8019fb6:	6803      	ldr	r3, [r0, #0]
 8019fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fba:	4798      	blx	r3
 8019fbc:	2fff      	cmp	r7, #255	; 0xff
 8019fbe:	d016      	beq.n	8019fee <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019fc0:	f010 0f08 	tst.w	r0, #8
 8019fc4:	6820      	ldr	r0, [r4, #0]
 8019fc6:	d015      	beq.n	8019ff4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8019fc8:	2400      	movs	r4, #0
 8019fca:	6801      	ldr	r1, [r0, #0]
 8019fcc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019fd0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019fd4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8019fd8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019fdc:	9401      	str	r4, [sp, #4]
 8019fde:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019fe2:	9400      	str	r4, [sp, #0]
 8019fe4:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8019fe6:	4629      	mov	r1, r5
 8019fe8:	47a0      	blx	r4
 8019fea:	b007      	add	sp, #28
 8019fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fee:	f010 0f02 	tst.w	r0, #2
 8019ff2:	e7e7      	b.n	8019fc4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8019ff4:	6803      	ldr	r3, [r0, #0]
 8019ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ff8:	4798      	blx	r3
 8019ffa:	4b08      	ldr	r3, [pc, #32]	; (801a01c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8019ffc:	4601      	mov	r1, r0
 8019ffe:	4630      	mov	r0, r6
 801a000:	881a      	ldrh	r2, [r3, #0]
 801a002:	6833      	ldr	r3, [r6, #0]
 801a004:	e9cd 5700 	strd	r5, r7, [sp]
 801a008:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801a00a:	ab04      	add	r3, sp, #16
 801a00c:	47a8      	blx	r5
 801a00e:	6820      	ldr	r0, [r4, #0]
 801a010:	6803      	ldr	r3, [r0, #0]
 801a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a014:	4798      	blx	r3
 801a016:	e7e8      	b.n	8019fea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a018:	2400c854 	.word	0x2400c854
 801a01c:	2400c84e 	.word	0x2400c84e

0801a020 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a024:	b08b      	sub	sp, #44	; 0x2c
 801a026:	460d      	mov	r5, r1
 801a028:	4616      	mov	r6, r2
 801a02a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801a02e:	f1b8 0f00 	cmp.w	r8, #0
 801a032:	d047      	beq.n	801a0c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801a034:	6810      	ldr	r0, [r2, #0]
 801a036:	ac06      	add	r4, sp, #24
 801a038:	6851      	ldr	r1, [r2, #4]
 801a03a:	4f51      	ldr	r7, [pc, #324]	; (801a180 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801a03c:	c403      	stmia	r4!, {r0, r1}
 801a03e:	6818      	ldr	r0, [r3, #0]
 801a040:	ac08      	add	r4, sp, #32
 801a042:	6859      	ldr	r1, [r3, #4]
 801a044:	c403      	stmia	r4!, {r0, r1}
 801a046:	a806      	add	r0, sp, #24
 801a048:	f7fb fb28 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a04c:	4631      	mov	r1, r6
 801a04e:	a808      	add	r0, sp, #32
 801a050:	f7fb fb4c 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a054:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a058:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a05c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a060:	6838      	ldr	r0, [r7, #0]
 801a062:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a066:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801a06a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801a06e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a072:	440d      	add	r5, r1
 801a074:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a078:	440a      	add	r2, r1
 801a07a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a07e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a082:	4413      	add	r3, r2
 801a084:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a088:	6803      	ldr	r3, [r0, #0]
 801a08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a08c:	4798      	blx	r3
 801a08e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a092:	d01a      	beq.n	801a0ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801a094:	f010 0f04 	tst.w	r0, #4
 801a098:	6838      	ldr	r0, [r7, #0]
 801a09a:	d019      	beq.n	801a0d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801a09c:	2100      	movs	r1, #0
 801a09e:	6807      	ldr	r7, [r0, #0]
 801a0a0:	b2a4      	uxth	r4, r4
 801a0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0a6:	b2b6      	uxth	r6, r6
 801a0a8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a0ac:	9401      	str	r4, [sp, #4]
 801a0ae:	9600      	str	r6, [sp, #0]
 801a0b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a0b4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801a0b8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a0bc:	9102      	str	r1, [sp, #8]
 801a0be:	4629      	mov	r1, r5
 801a0c0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801a0c2:	47a0      	blx	r4
 801a0c4:	b00b      	add	sp, #44	; 0x2c
 801a0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0ca:	f010 0f01 	tst.w	r0, #1
 801a0ce:	e7e3      	b.n	801a098 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801a0d0:	6803      	ldr	r3, [r0, #0]
 801a0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0d4:	4798      	blx	r3
 801a0d6:	4a2b      	ldr	r2, [pc, #172]	; (801a184 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801a0d8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801a0dc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a0e0:	8813      	ldrh	r3, [r2, #0]
 801a0e2:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801a0e6:	fb03 f404 	mul.w	r4, r3, r4
 801a0ea:	fb03 c101 	mla	r1, r3, r1, ip
 801a0ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a0f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a0f6:	4408      	add	r0, r1
 801a0f8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801a0fc:	4404      	add	r4, r0
 801a0fe:	d02e      	beq.n	801a15e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801a100:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801a104:	1b9b      	subs	r3, r3, r6
 801a106:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801a10a:	1b96      	subs	r6, r2, r6
 801a10c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a110:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a114:	42a0      	cmp	r0, r4
 801a116:	d22d      	bcs.n	801a174 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801a118:	eb00 0e01 	add.w	lr, r0, r1
 801a11c:	4570      	cmp	r0, lr
 801a11e:	d210      	bcs.n	801a142 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801a120:	f890 9000 	ldrb.w	r9, [r0]
 801a124:	f815 2b01 	ldrb.w	r2, [r5], #1
 801a128:	fb19 f90c 	smulbb	r9, r9, ip
 801a12c:	fb02 9208 	mla	r2, r2, r8, r9
 801a130:	b292      	uxth	r2, r2
 801a132:	f102 0901 	add.w	r9, r2, #1
 801a136:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801a13a:	1212      	asrs	r2, r2, #8
 801a13c:	f800 2b01 	strb.w	r2, [r0], #1
 801a140:	e7ec      	b.n	801a11c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801a142:	4418      	add	r0, r3
 801a144:	4435      	add	r5, r6
 801a146:	e7e5      	b.n	801a114 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801a148:	8813      	ldrh	r3, [r2, #0]
 801a14a:	1b9b      	subs	r3, r3, r6
 801a14c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a150:	4418      	add	r0, r3
 801a152:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a156:	1b9b      	subs	r3, r3, r6
 801a158:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a15c:	441d      	add	r5, r3
 801a15e:	42a0      	cmp	r0, r4
 801a160:	d208      	bcs.n	801a174 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801a162:	eb00 0c01 	add.w	ip, r0, r1
 801a166:	4560      	cmp	r0, ip
 801a168:	d2ee      	bcs.n	801a148 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801a16a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a16e:	f800 3b01 	strb.w	r3, [r0], #1
 801a172:	e7f8      	b.n	801a166 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801a174:	6838      	ldr	r0, [r7, #0]
 801a176:	6803      	ldr	r3, [r0, #0]
 801a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a17a:	4798      	blx	r3
 801a17c:	e7a2      	b.n	801a0c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801a17e:	bf00      	nop
 801a180:	2400c854 	.word	0x2400c854
 801a184:	2400c84e 	.word	0x2400c84e

0801a188 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801a188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a18a:	2300      	movs	r3, #0
 801a18c:	b085      	sub	sp, #20
 801a18e:	9300      	str	r3, [sp, #0]
 801a190:	4b41      	ldr	r3, [pc, #260]	; (801a298 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801a192:	781b      	ldrb	r3, [r3, #0]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d136      	bne.n	801a206 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801a198:	4a40      	ldr	r2, [pc, #256]	; (801a29c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a19a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a19e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d131      	bne.n	801a20a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801a1a6:	4b3e      	ldr	r3, [pc, #248]	; (801a2a0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801a1a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a1ac:	ac02      	add	r4, sp, #8
 801a1ae:	6808      	ldr	r0, [r1, #0]
 801a1b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a1b4:	ab02      	add	r3, sp, #8
 801a1b6:	6849      	ldr	r1, [r1, #4]
 801a1b8:	4d3a      	ldr	r5, [pc, #232]	; (801a2a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801a1ba:	c303      	stmia	r3!, {r0, r1}
 801a1bc:	4669      	mov	r1, sp
 801a1be:	4620      	mov	r0, r4
 801a1c0:	f7fb fa94 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a1c4:	4668      	mov	r0, sp
 801a1c6:	f7fb fa69 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a1ce:	f8bd 2000 	ldrh.w	r2, [sp]
 801a1d2:	462e      	mov	r6, r5
 801a1d4:	6828      	ldr	r0, [r5, #0]
 801a1d6:	4413      	add	r3, r2
 801a1d8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a1dc:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a1e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a1e4:	4413      	add	r3, r2
 801a1e6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a1ea:	6803      	ldr	r3, [r0, #0]
 801a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1ee:	4798      	blx	r3
 801a1f0:	f010 0f01 	tst.w	r0, #1
 801a1f4:	d00b      	beq.n	801a20e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801a1f6:	6828      	ldr	r0, [r5, #0]
 801a1f8:	6803      	ldr	r3, [r0, #0]
 801a1fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a1fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a200:	4798      	blx	r3
 801a202:	b005      	add	sp, #20
 801a204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a206:	4a26      	ldr	r2, [pc, #152]	; (801a2a0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801a208:	e7c7      	b.n	801a19a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801a20a:	4b24      	ldr	r3, [pc, #144]	; (801a29c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a20c:	e7cc      	b.n	801a1a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801a20e:	6830      	ldr	r0, [r6, #0]
 801a210:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801a214:	6803      	ldr	r3, [r0, #0]
 801a216:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a21c:	4798      	blx	r3
 801a21e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a222:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a226:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801a22a:	fb14 3402 	smlabb	r4, r4, r2, r3
 801a22e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a232:	4404      	add	r4, r0
 801a234:	6830      	ldr	r0, [r6, #0]
 801a236:	6803      	ldr	r3, [r0, #0]
 801a238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a23a:	4798      	blx	r3
 801a23c:	4917      	ldr	r1, [pc, #92]	; (801a29c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a23e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801a242:	880b      	ldrh	r3, [r1, #0]
 801a244:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801a248:	fb03 c202 	mla	r2, r3, r2, ip
 801a24c:	437b      	muls	r3, r7
 801a24e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801a252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a256:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a25a:	4410      	add	r0, r2
 801a25c:	18c2      	adds	r2, r0, r3
 801a25e:	4290      	cmp	r0, r2
 801a260:	d214      	bcs.n	801a28c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801a262:	eb00 0c07 	add.w	ip, r0, r7
 801a266:	4560      	cmp	r0, ip
 801a268:	d204      	bcs.n	801a274 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801a26a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a26e:	f800 3b01 	strb.w	r3, [r0], #1
 801a272:	e7f8      	b.n	801a266 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801a274:	880b      	ldrh	r3, [r1, #0]
 801a276:	1b5b      	subs	r3, r3, r5
 801a278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a27c:	4418      	add	r0, r3
 801a27e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a282:	1b5b      	subs	r3, r3, r5
 801a284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a288:	441c      	add	r4, r3
 801a28a:	e7e8      	b.n	801a25e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801a28c:	6830      	ldr	r0, [r6, #0]
 801a28e:	6803      	ldr	r3, [r0, #0]
 801a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a292:	4798      	blx	r3
 801a294:	e7b5      	b.n	801a202 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801a296:	bf00      	nop
 801a298:	2400c84c 	.word	0x2400c84c
 801a29c:	2400c84e 	.word	0x2400c84e
 801a2a0:	2400c850 	.word	0x2400c850
 801a2a4:	2400c854 	.word	0x2400c854

0801a2a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2ac:	b089      	sub	sp, #36	; 0x24
 801a2ae:	4607      	mov	r7, r0
 801a2b0:	4689      	mov	r9, r1
 801a2b2:	4692      	mov	sl, r2
 801a2b4:	ac08      	add	r4, sp, #32
 801a2b6:	461e      	mov	r6, r3
 801a2b8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801a2bc:	4620      	mov	r0, r4
 801a2be:	f7fe f8ef 	bl	80184a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	4605      	mov	r5, r0
 801a2c6:	4620      	mov	r0, r4
 801a2c8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801a2cc:	f7fe f834 	bl	8018338 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a2d0:	4683      	mov	fp, r0
 801a2d2:	4620      	mov	r0, r4
 801a2d4:	f7fe f864 	bl	80183a0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a2d8:	4653      	mov	r3, sl
 801a2da:	464a      	mov	r2, r9
 801a2dc:	4639      	mov	r1, r7
 801a2de:	9500      	str	r5, [sp, #0]
 801a2e0:	e9cd b001 	strd	fp, r0, [sp, #4]
 801a2e4:	a806      	add	r0, sp, #24
 801a2e6:	47c0      	blx	r8
 801a2e8:	a906      	add	r1, sp, #24
 801a2ea:	4630      	mov	r0, r6
 801a2ec:	f7fd ff08 	bl	8018100 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	b009      	add	sp, #36	; 0x24
 801a2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2f8 <_ZN8touchgfx8LCD24bppD0Ev>:
 801a2f8:	b510      	push	{r4, lr}
 801a2fa:	4604      	mov	r4, r0
 801a2fc:	2158      	movs	r1, #88	; 0x58
 801a2fe:	f006 f8f6 	bl	80204ee <_ZdlPvj>
 801a302:	4620      	mov	r0, r4
 801a304:	bd10      	pop	{r4, pc}

0801a306 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a306:	b510      	push	{r4, lr}
 801a308:	4604      	mov	r4, r0
 801a30a:	2104      	movs	r1, #4
 801a30c:	f006 f8ef 	bl	80204ee <_ZdlPvj>
 801a310:	4620      	mov	r0, r4
 801a312:	bd10      	pop	{r4, pc}

0801a314 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a314:	b510      	push	{r4, lr}
 801a316:	4604      	mov	r4, r0
 801a318:	2104      	movs	r1, #4
 801a31a:	f006 f8e8 	bl	80204ee <_ZdlPvj>
 801a31e:	4620      	mov	r0, r4
 801a320:	bd10      	pop	{r4, pc}

0801a322 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a322:	b510      	push	{r4, lr}
 801a324:	4604      	mov	r4, r0
 801a326:	2104      	movs	r1, #4
 801a328:	f006 f8e1 	bl	80204ee <_ZdlPvj>
 801a32c:	4620      	mov	r0, r4
 801a32e:	bd10      	pop	{r4, pc}

0801a330 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a330:	b510      	push	{r4, lr}
 801a332:	4604      	mov	r4, r0
 801a334:	2104      	movs	r1, #4
 801a336:	f006 f8da 	bl	80204ee <_ZdlPvj>
 801a33a:	4620      	mov	r0, r4
 801a33c:	bd10      	pop	{r4, pc}

0801a33e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a33e:	b510      	push	{r4, lr}
 801a340:	4604      	mov	r4, r0
 801a342:	2104      	movs	r1, #4
 801a344:	f006 f8d3 	bl	80204ee <_ZdlPvj>
 801a348:	4620      	mov	r0, r4
 801a34a:	bd10      	pop	{r4, pc}

0801a34c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a34c:	b510      	push	{r4, lr}
 801a34e:	4604      	mov	r4, r0
 801a350:	2104      	movs	r1, #4
 801a352:	f006 f8cc 	bl	80204ee <_ZdlPvj>
 801a356:	4620      	mov	r0, r4
 801a358:	bd10      	pop	{r4, pc}

0801a35a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a35a:	b510      	push	{r4, lr}
 801a35c:	4604      	mov	r4, r0
 801a35e:	2104      	movs	r1, #4
 801a360:	f006 f8c5 	bl	80204ee <_ZdlPvj>
 801a364:	4620      	mov	r0, r4
 801a366:	bd10      	pop	{r4, pc}

0801a368 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a368:	b510      	push	{r4, lr}
 801a36a:	4604      	mov	r4, r0
 801a36c:	2104      	movs	r1, #4
 801a36e:	f006 f8be 	bl	80204ee <_ZdlPvj>
 801a372:	4620      	mov	r0, r4
 801a374:	bd10      	pop	{r4, pc}

0801a376 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a376:	b510      	push	{r4, lr}
 801a378:	4604      	mov	r4, r0
 801a37a:	2104      	movs	r1, #4
 801a37c:	f006 f8b7 	bl	80204ee <_ZdlPvj>
 801a380:	4620      	mov	r0, r4
 801a382:	bd10      	pop	{r4, pc}

0801a384 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a384:	b510      	push	{r4, lr}
 801a386:	4604      	mov	r4, r0
 801a388:	2104      	movs	r1, #4
 801a38a:	f006 f8b0 	bl	80204ee <_ZdlPvj>
 801a38e:	4620      	mov	r0, r4
 801a390:	bd10      	pop	{r4, pc}

0801a392 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a392:	b510      	push	{r4, lr}
 801a394:	4604      	mov	r4, r0
 801a396:	2104      	movs	r1, #4
 801a398:	f006 f8a9 	bl	80204ee <_ZdlPvj>
 801a39c:	4620      	mov	r0, r4
 801a39e:	bd10      	pop	{r4, pc}

0801a3a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a3a0:	b510      	push	{r4, lr}
 801a3a2:	4604      	mov	r4, r0
 801a3a4:	2104      	movs	r1, #4
 801a3a6:	f006 f8a2 	bl	80204ee <_ZdlPvj>
 801a3aa:	4620      	mov	r0, r4
 801a3ac:	bd10      	pop	{r4, pc}

0801a3ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a3ae:	b510      	push	{r4, lr}
 801a3b0:	4604      	mov	r4, r0
 801a3b2:	2104      	movs	r1, #4
 801a3b4:	f006 f89b 	bl	80204ee <_ZdlPvj>
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	bd10      	pop	{r4, pc}

0801a3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a3bc:	b510      	push	{r4, lr}
 801a3be:	4604      	mov	r4, r0
 801a3c0:	2104      	movs	r1, #4
 801a3c2:	f006 f894 	bl	80204ee <_ZdlPvj>
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	bd10      	pop	{r4, pc}

0801a3ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a3ca:	b510      	push	{r4, lr}
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	2104      	movs	r1, #4
 801a3d0:	f006 f88d 	bl	80204ee <_ZdlPvj>
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	bd10      	pop	{r4, pc}

0801a3d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a3d8:	b510      	push	{r4, lr}
 801a3da:	4604      	mov	r4, r0
 801a3dc:	2104      	movs	r1, #4
 801a3de:	f006 f886 	bl	80204ee <_ZdlPvj>
 801a3e2:	4620      	mov	r0, r4
 801a3e4:	bd10      	pop	{r4, pc}

0801a3e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a3e6:	b510      	push	{r4, lr}
 801a3e8:	4604      	mov	r4, r0
 801a3ea:	2104      	movs	r1, #4
 801a3ec:	f006 f87f 	bl	80204ee <_ZdlPvj>
 801a3f0:	4620      	mov	r0, r4
 801a3f2:	bd10      	pop	{r4, pc}

0801a3f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a3f4:	b510      	push	{r4, lr}
 801a3f6:	4604      	mov	r4, r0
 801a3f8:	2104      	movs	r1, #4
 801a3fa:	f006 f878 	bl	80204ee <_ZdlPvj>
 801a3fe:	4620      	mov	r0, r4
 801a400:	bd10      	pop	{r4, pc}

0801a402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a402:	b510      	push	{r4, lr}
 801a404:	4604      	mov	r4, r0
 801a406:	2104      	movs	r1, #4
 801a408:	f006 f871 	bl	80204ee <_ZdlPvj>
 801a40c:	4620      	mov	r0, r4
 801a40e:	bd10      	pop	{r4, pc}

0801a410 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a410:	b510      	push	{r4, lr}
 801a412:	4604      	mov	r4, r0
 801a414:	2104      	movs	r1, #4
 801a416:	f006 f86a 	bl	80204ee <_ZdlPvj>
 801a41a:	4620      	mov	r0, r4
 801a41c:	bd10      	pop	{r4, pc}

0801a41e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a422:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801a426:	9c06      	ldr	r4, [sp, #24]
 801a428:	2800      	cmp	r0, #0
 801a42a:	d06e      	beq.n	801a50a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a42c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801a430:	2d00      	cmp	r5, #0
 801a432:	dd6a      	ble.n	801a50a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a434:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801a438:	f1bc 0f00 	cmp.w	ip, #0
 801a43c:	dd65      	ble.n	801a50a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a43e:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801a442:	28ff      	cmp	r0, #255	; 0xff
 801a444:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a448:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801a44c:	fb02 3306 	mla	r3, r2, r6, r3
 801a450:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801a454:	b2e4      	uxtb	r4, r4
 801a456:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a45a:	4419      	add	r1, r3
 801a45c:	fb02 f30c 	mul.w	r3, r2, ip
 801a460:	eba2 0205 	sub.w	r2, r2, r5
 801a464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a46c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a470:	440b      	add	r3, r1
 801a472:	d03e      	beq.n	801a4f2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801a474:	fa1f fc80 	uxth.w	ip, r0
 801a478:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801a47c:	fb06 f60c 	mul.w	r6, r6, ip
 801a480:	b280      	uxth	r0, r0
 801a482:	fb07 f70c 	mul.w	r7, r7, ip
 801a486:	fb04 f40c 	mul.w	r4, r4, ip
 801a48a:	4299      	cmp	r1, r3
 801a48c:	d23d      	bcs.n	801a50a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a48e:	eb01 0c05 	add.w	ip, r1, r5
 801a492:	458c      	cmp	ip, r1
 801a494:	f101 0e03 	add.w	lr, r1, #3
 801a498:	d928      	bls.n	801a4ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801a49a:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801a49e:	fb11 f100 	smulbb	r1, r1, r0
 801a4a2:	4421      	add	r1, r4
 801a4a4:	b289      	uxth	r1, r1
 801a4a6:	f101 0801 	add.w	r8, r1, #1
 801a4aa:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a4ae:	1209      	asrs	r1, r1, #8
 801a4b0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801a4b4:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801a4b8:	fb11 f100 	smulbb	r1, r1, r0
 801a4bc:	4439      	add	r1, r7
 801a4be:	b289      	uxth	r1, r1
 801a4c0:	f101 0801 	add.w	r8, r1, #1
 801a4c4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a4c8:	1209      	asrs	r1, r1, #8
 801a4ca:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801a4ce:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801a4d2:	fb11 f100 	smulbb	r1, r1, r0
 801a4d6:	4431      	add	r1, r6
 801a4d8:	b289      	uxth	r1, r1
 801a4da:	f101 0801 	add.w	r8, r1, #1
 801a4de:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a4e2:	1209      	asrs	r1, r1, #8
 801a4e4:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801a4e8:	4671      	mov	r1, lr
 801a4ea:	e7d2      	b.n	801a492 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801a4ec:	4411      	add	r1, r2
 801a4ee:	e7cc      	b.n	801a48a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801a4f0:	4411      	add	r1, r2
 801a4f2:	4299      	cmp	r1, r3
 801a4f4:	d209      	bcs.n	801a50a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a4f6:	1948      	adds	r0, r1, r5
 801a4f8:	4281      	cmp	r1, r0
 801a4fa:	d2f9      	bcs.n	801a4f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801a4fc:	700c      	strb	r4, [r1, #0]
 801a4fe:	3103      	adds	r1, #3
 801a500:	f801 7c02 	strb.w	r7, [r1, #-2]
 801a504:	f801 6c01 	strb.w	r6, [r1, #-1]
 801a508:	e7f6      	b.n	801a4f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801a50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801a510 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a514:	b093      	sub	sp, #76	; 0x4c
 801a516:	4699      	mov	r9, r3
 801a518:	4617      	mov	r7, r2
 801a51a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a51e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801a522:	4604      	mov	r4, r0
 801a524:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a528:	a80c      	add	r0, sp, #48	; 0x30
 801a52a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801a52e:	460d      	mov	r5, r1
 801a530:	4649      	mov	r1, r9
 801a532:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801a536:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a53a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801a53e:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801a542:	f7f7 fc9b 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 801a546:	4639      	mov	r1, r7
 801a548:	a80c      	add	r0, sp, #48	; 0x30
 801a54a:	f7f7 fc97 	bl	8011e7c <_ZN8touchgfx4RectaNERKS0_>
 801a54e:	4b78      	ldr	r3, [pc, #480]	; (801a730 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a550:	8818      	ldrh	r0, [r3, #0]
 801a552:	4b78      	ldr	r3, [pc, #480]	; (801a734 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801a554:	b202      	sxth	r2, r0
 801a556:	8819      	ldrh	r1, [r3, #0]
 801a558:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a55c:	b20f      	sxth	r7, r1
 801a55e:	2b00      	cmp	r3, #0
 801a560:	da07      	bge.n	801a572 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801a562:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801a566:	4463      	add	r3, ip
 801a568:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a56c:	2300      	movs	r3, #0
 801a56e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801a572:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a576:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801a57a:	1ad2      	subs	r2, r2, r3
 801a57c:	4594      	cmp	ip, r2
 801a57e:	bfc4      	itt	gt
 801a580:	1ac2      	subgt	r2, r0, r3
 801a582:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801a586:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a58a:	2a00      	cmp	r2, #0
 801a58c:	da07      	bge.n	801a59e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801a58e:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801a592:	4462      	add	r2, ip
 801a594:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801a598:	2200      	movs	r2, #0
 801a59a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801a59e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a5a2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801a5a6:	1abf      	subs	r7, r7, r2
 801a5a8:	45bc      	cmp	ip, r7
 801a5aa:	f8df c190 	ldr.w	ip, [pc, #400]	; 801a73c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801a5ae:	bfc8      	it	gt
 801a5b0:	1a8f      	subgt	r7, r1, r2
 801a5b2:	f89c c000 	ldrb.w	ip, [ip]
 801a5b6:	bfc8      	it	gt
 801a5b8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801a5bc:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801a5c0:	f1bc 0f00 	cmp.w	ip, #0
 801a5c4:	d176      	bne.n	801a6b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801a5c6:	4287      	cmp	r7, r0
 801a5c8:	bf14      	ite	ne
 801a5ca:	2100      	movne	r1, #0
 801a5cc:	2101      	moveq	r1, #1
 801a5ce:	2f00      	cmp	r7, #0
 801a5d0:	9107      	str	r1, [sp, #28]
 801a5d2:	dd73      	ble.n	801a6bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a5d4:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801a5d8:	2900      	cmp	r1, #0
 801a5da:	9104      	str	r1, [sp, #16]
 801a5dc:	dd6e      	ble.n	801a6bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a5de:	f8b9 1000 	ldrh.w	r1, [r9]
 801a5e2:	a80e      	add	r0, sp, #56	; 0x38
 801a5e4:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801a5e8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801a5ec:	1a5b      	subs	r3, r3, r1
 801a5ee:	a910      	add	r1, sp, #64	; 0x40
 801a5f0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801a5f4:	b21b      	sxth	r3, r3
 801a5f6:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801a5fa:	f8df a144 	ldr.w	sl, [pc, #324]	; 801a740 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a5fe:	9305      	str	r3, [sp, #20]
 801a600:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801a604:	1ad2      	subs	r2, r2, r3
 801a606:	b213      	sxth	r3, r2
 801a608:	9306      	str	r3, [sp, #24]
 801a60a:	9b05      	ldr	r3, [sp, #20]
 801a60c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801a610:	9b06      	ldr	r3, [sp, #24]
 801a612:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a616:	9b04      	ldr	r3, [sp, #16]
 801a618:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a61c:	2300      	movs	r3, #0
 801a61e:	9310      	str	r3, [sp, #64]	; 0x40
 801a620:	f7fb f864 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a624:	4640      	mov	r0, r8
 801a626:	f7fb f839 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a62a:	a810      	add	r0, sp, #64	; 0x40
 801a62c:	f7fb f836 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a630:	4b41      	ldr	r3, [pc, #260]	; (801a738 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801a632:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801a636:	4628      	mov	r0, r5
 801a638:	881b      	ldrh	r3, [r3, #0]
 801a63a:	9308      	str	r3, [sp, #32]
 801a63c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801a640:	b21b      	sxth	r3, r3
 801a642:	9303      	str	r3, [sp, #12]
 801a644:	682b      	ldr	r3, [r5, #0]
 801a646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a648:	4798      	blx	r3
 801a64a:	9a03      	ldr	r2, [sp, #12]
 801a64c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a650:	4681      	mov	r9, r0
 801a652:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801a656:	fb13 f302 	smulbb	r3, r3, r2
 801a65a:	2203      	movs	r2, #3
 801a65c:	f8da 0000 	ldr.w	r0, [sl]
 801a660:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a664:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801a666:	920b      	str	r2, [sp, #44]	; 0x2c
 801a668:	441d      	add	r5, r3
 801a66a:	6803      	ldr	r3, [r0, #0]
 801a66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a66e:	4798      	blx	r3
 801a670:	9009      	str	r0, [sp, #36]	; 0x24
 801a672:	f8da 0000 	ldr.w	r0, [sl]
 801a676:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a67a:	6803      	ldr	r3, [r0, #0]
 801a67c:	910a      	str	r1, [sp, #40]	; 0x28
 801a67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a680:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801a684:	4798      	blx	r3
 801a686:	f010 0f01 	tst.w	r0, #1
 801a68a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801a68e:	d01e      	beq.n	801a6ce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801a690:	f8da 0000 	ldr.w	r0, [sl]
 801a694:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801a698:	6803      	ldr	r3, [r0, #0]
 801a69a:	9200      	str	r2, [sp, #0]
 801a69c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a69e:	462b      	mov	r3, r5
 801a6a0:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a6a4:	47b0      	blx	r6
 801a6a6:	9b05      	ldr	r3, [sp, #20]
 801a6a8:	80a7      	strh	r7, [r4, #4]
 801a6aa:	8023      	strh	r3, [r4, #0]
 801a6ac:	9b06      	ldr	r3, [sp, #24]
 801a6ae:	8063      	strh	r3, [r4, #2]
 801a6b0:	9b04      	ldr	r3, [sp, #16]
 801a6b2:	e007      	b.n	801a6c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801a6b4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801a6b8:	4288      	cmp	r0, r1
 801a6ba:	e785      	b.n	801a5c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801a6bc:	2300      	movs	r3, #0
 801a6be:	8023      	strh	r3, [r4, #0]
 801a6c0:	8063      	strh	r3, [r4, #2]
 801a6c2:	80a3      	strh	r3, [r4, #4]
 801a6c4:	4620      	mov	r0, r4
 801a6c6:	80e3      	strh	r3, [r4, #6]
 801a6c8:	b013      	add	sp, #76	; 0x4c
 801a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6ce:	fb09 f606 	mul.w	r6, r9, r6
 801a6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6d4:	fb11 6602 	smlabb	r6, r1, r2, r6
 801a6d8:	9a07      	ldr	r2, [sp, #28]
 801a6da:	4433      	add	r3, r6
 801a6dc:	461e      	mov	r6, r3
 801a6de:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a6e2:	b16a      	cbz	r2, 801a700 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a6e4:	9a08      	ldr	r2, [sp, #32]
 801a6e6:	4593      	cmp	fp, r2
 801a6e8:	d10a      	bne.n	801a700 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a6ea:	f8da 0000 	ldr.w	r0, [sl]
 801a6ee:	fb09 f303 	mul.w	r3, r9, r3
 801a6f2:	4629      	mov	r1, r5
 801a6f4:	6802      	ldr	r2, [r0, #0]
 801a6f6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a6fa:	4632      	mov	r2, r6
 801a6fc:	47d0      	blx	sl
 801a6fe:	e7d2      	b.n	801a6a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a700:	9a03      	ldr	r2, [sp, #12]
 801a702:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801a740 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a706:	fb02 5803 	mla	r8, r2, r3, r5
 801a70a:	4545      	cmp	r5, r8
 801a70c:	d2cb      	bcs.n	801a6a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a70e:	f8db 0000 	ldr.w	r0, [fp]
 801a712:	4629      	mov	r1, r5
 801a714:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801a718:	6802      	ldr	r2, [r0, #0]
 801a71a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a71e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a722:	4632      	mov	r2, r6
 801a724:	47d0      	blx	sl
 801a726:	9b03      	ldr	r3, [sp, #12]
 801a728:	444e      	add	r6, r9
 801a72a:	441d      	add	r5, r3
 801a72c:	e7ed      	b.n	801a70a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801a72e:	bf00      	nop
 801a730:	2400c848 	.word	0x2400c848
 801a734:	2400c84a 	.word	0x2400c84a
 801a738:	2400c84e 	.word	0x2400c84e
 801a73c:	2400c84c 	.word	0x2400c84c
 801a740:	2400c854 	.word	0x2400c854

0801a744 <_ZN8touchgfx8LCD24bppC1Ev>:
 801a744:	2200      	movs	r2, #0
 801a746:	490c      	ldr	r1, [pc, #48]	; (801a778 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801a748:	6042      	str	r2, [r0, #4]
 801a74a:	6001      	str	r1, [r0, #0]
 801a74c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a750:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801a754:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a758:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801a75c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801a760:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801a764:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801a768:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801a76c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801a770:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801a774:	4770      	bx	lr
 801a776:	bf00      	nop
 801a778:	08023e64 	.word	0x08023e64

0801a77c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a780:	b091      	sub	sp, #68	; 0x44
 801a782:	4607      	mov	r7, r0
 801a784:	4688      	mov	r8, r1
 801a786:	6810      	ldr	r0, [r2, #0]
 801a788:	6851      	ldr	r1, [r2, #4]
 801a78a:	ac0c      	add	r4, sp, #48	; 0x30
 801a78c:	4616      	mov	r6, r2
 801a78e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801a792:	4d64      	ldr	r5, [pc, #400]	; (801a924 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a794:	f8df a190 	ldr.w	sl, [pc, #400]	; 801a928 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801a798:	c403      	stmia	r4!, {r0, r1}
 801a79a:	6818      	ldr	r0, [r3, #0]
 801a79c:	ac0e      	add	r4, sp, #56	; 0x38
 801a79e:	6859      	ldr	r1, [r3, #4]
 801a7a0:	c403      	stmia	r4!, {r0, r1}
 801a7a2:	a80c      	add	r0, sp, #48	; 0x30
 801a7a4:	f7fa ff7a 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a7a8:	4631      	mov	r1, r6
 801a7aa:	a80e      	add	r0, sp, #56	; 0x38
 801a7ac:	f7fa ff9e 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a7b0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a7b4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a7b8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a7bc:	6828      	ldr	r0, [r5, #0]
 801a7be:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a7c2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801a7c6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801a7ca:	440f      	add	r7, r1
 801a7cc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a7d0:	440a      	add	r2, r1
 801a7d2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a7d6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a7da:	4413      	add	r3, r2
 801a7dc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a7e0:	6803      	ldr	r3, [r0, #0]
 801a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7e4:	4798      	blx	r3
 801a7e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a7ea:	6828      	ldr	r0, [r5, #0]
 801a7ec:	d01f      	beq.n	801a82e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801a7ee:	2201      	movs	r2, #1
 801a7f0:	2500      	movs	r5, #0
 801a7f2:	6801      	ldr	r1, [r0, #0]
 801a7f4:	b2a4      	uxth	r4, r4
 801a7f6:	b2b6      	uxth	r6, r6
 801a7f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a7fc:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801a800:	250b      	movs	r5, #11
 801a802:	9507      	str	r5, [sp, #28]
 801a804:	f8ba 5000 	ldrh.w	r5, [sl]
 801a808:	f8cd 9010 	str.w	r9, [sp, #16]
 801a80c:	9602      	str	r6, [sp, #8]
 801a80e:	9401      	str	r4, [sp, #4]
 801a810:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801a814:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a818:	9203      	str	r2, [sp, #12]
 801a81a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a81e:	9200      	str	r2, [sp, #0]
 801a820:	4642      	mov	r2, r8
 801a822:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801a824:	4639      	mov	r1, r7
 801a826:	47a0      	blx	r4
 801a828:	b011      	add	sp, #68	; 0x44
 801a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a82e:	6803      	ldr	r3, [r0, #0]
 801a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a832:	4798      	blx	r3
 801a834:	f8ba 5000 	ldrh.w	r5, [sl]
 801a838:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a83c:	f04f 0e04 	mov.w	lr, #4
 801a840:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a844:	436e      	muls	r6, r5
 801a846:	fb05 2303 	mla	r3, r5, r3, r2
 801a84a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a84e:	1b2d      	subs	r5, r5, r4
 801a850:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a858:	4418      	add	r0, r3
 801a85a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a85e:	1982      	adds	r2, r0, r6
 801a860:	1b1b      	subs	r3, r3, r4
 801a862:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a866:	930b      	str	r3, [sp, #44]	; 0x2c
 801a868:	4290      	cmp	r0, r2
 801a86a:	d254      	bcs.n	801a916 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a86c:	eb00 0a04 	add.w	sl, r0, r4
 801a870:	4550      	cmp	r0, sl
 801a872:	d24c      	bcs.n	801a90e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801a874:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a878:	fb1e e101 	smlabb	r1, lr, r1, lr
 801a87c:	eb08 0c01 	add.w	ip, r8, r1
 801a880:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801a884:	b173      	cbz	r3, 801a8a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a886:	2bff      	cmp	r3, #255	; 0xff
 801a888:	f818 b001 	ldrb.w	fp, [r8, r1]
 801a88c:	d10c      	bne.n	801a8a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a88e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a892:	d109      	bne.n	801a8a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a894:	f880 b000 	strb.w	fp, [r0]
 801a898:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801a89c:	7043      	strb	r3, [r0, #1]
 801a89e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801a8a2:	7083      	strb	r3, [r0, #2]
 801a8a4:	3003      	adds	r0, #3
 801a8a6:	e7e3      	b.n	801a870 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801a8a8:	fb09 f103 	mul.w	r1, r9, r3
 801a8ac:	1c4b      	adds	r3, r1, #1
 801a8ae:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a8b2:	7801      	ldrb	r1, [r0, #0]
 801a8b4:	121b      	asrs	r3, r3, #8
 801a8b6:	b29e      	uxth	r6, r3
 801a8b8:	43db      	mvns	r3, r3
 801a8ba:	fb1b fb06 	smulbb	fp, fp, r6
 801a8be:	b2db      	uxtb	r3, r3
 801a8c0:	fb01 b103 	mla	r1, r1, r3, fp
 801a8c4:	b289      	uxth	r1, r1
 801a8c6:	f101 0b01 	add.w	fp, r1, #1
 801a8ca:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a8ce:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a8d2:	fb1b fb03 	smulbb	fp, fp, r3
 801a8d6:	1209      	asrs	r1, r1, #8
 801a8d8:	7001      	strb	r1, [r0, #0]
 801a8da:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a8de:	fb01 b106 	mla	r1, r1, r6, fp
 801a8e2:	b289      	uxth	r1, r1
 801a8e4:	f101 0b01 	add.w	fp, r1, #1
 801a8e8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a8ec:	1209      	asrs	r1, r1, #8
 801a8ee:	7041      	strb	r1, [r0, #1]
 801a8f0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801a8f4:	f890 c002 	ldrb.w	ip, [r0, #2]
 801a8f8:	fb1c f303 	smulbb	r3, ip, r3
 801a8fc:	fb01 3606 	mla	r6, r1, r6, r3
 801a900:	b2b6      	uxth	r6, r6
 801a902:	1c73      	adds	r3, r6, #1
 801a904:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801a908:	1236      	asrs	r6, r6, #8
 801a90a:	7086      	strb	r6, [r0, #2]
 801a90c:	e7ca      	b.n	801a8a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a910:	4428      	add	r0, r5
 801a912:	441f      	add	r7, r3
 801a914:	e7a8      	b.n	801a868 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801a916:	4b03      	ldr	r3, [pc, #12]	; (801a924 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a918:	6818      	ldr	r0, [r3, #0]
 801a91a:	6803      	ldr	r3, [r0, #0]
 801a91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a91e:	4798      	blx	r3
 801a920:	e782      	b.n	801a828 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801a922:	bf00      	nop
 801a924:	2400c854 	.word	0x2400c854
 801a928:	2400c84e 	.word	0x2400c84e

0801a92c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a930:	b091      	sub	sp, #68	; 0x44
 801a932:	4680      	mov	r8, r0
 801a934:	460e      	mov	r6, r1
 801a936:	6810      	ldr	r0, [r2, #0]
 801a938:	6851      	ldr	r1, [r2, #4]
 801a93a:	ad0c      	add	r5, sp, #48	; 0x30
 801a93c:	4614      	mov	r4, r2
 801a93e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801a942:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801aadc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801a946:	f8df a198 	ldr.w	sl, [pc, #408]	; 801aae0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801a94a:	c503      	stmia	r5!, {r0, r1}
 801a94c:	6818      	ldr	r0, [r3, #0]
 801a94e:	ad0e      	add	r5, sp, #56	; 0x38
 801a950:	6859      	ldr	r1, [r3, #4]
 801a952:	c503      	stmia	r5!, {r0, r1}
 801a954:	a80c      	add	r0, sp, #48	; 0x30
 801a956:	f7fa fea1 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a95a:	4621      	mov	r1, r4
 801a95c:	a80e      	add	r0, sp, #56	; 0x38
 801a95e:	f7fa fec5 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a962:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a966:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a96a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a96e:	f8d9 0000 	ldr.w	r0, [r9]
 801a972:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a976:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801a97a:	eb08 0401 	add.w	r4, r8, r1
 801a97e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a982:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801a986:	440a      	add	r2, r1
 801a988:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a98c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a990:	4413      	add	r3, r2
 801a992:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a996:	6803      	ldr	r3, [r0, #0]
 801a998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a99a:	4798      	blx	r3
 801a99c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a9a0:	f8d9 0000 	ldr.w	r0, [r9]
 801a9a4:	d022      	beq.n	801a9ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	f04f 0c01 	mov.w	ip, #1
 801a9ac:	6801      	ldr	r1, [r0, #0]
 801a9ae:	b2ad      	uxth	r5, r5
 801a9b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a9b4:	e9cd c208 	strd	ip, r2, [sp, #32]
 801a9b8:	f04f 0c0b 	mov.w	ip, #11
 801a9bc:	f8cd c01c 	str.w	ip, [sp, #28]
 801a9c0:	f8ba c000 	ldrh.w	ip, [sl]
 801a9c4:	9704      	str	r7, [sp, #16]
 801a9c6:	9502      	str	r5, [sp, #8]
 801a9c8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801a9cc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a9d0:	9203      	str	r2, [sp, #12]
 801a9d2:	fa1f f288 	uxth.w	r2, r8
 801a9d6:	9201      	str	r2, [sp, #4]
 801a9d8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a9dc:	9200      	str	r2, [sp, #0]
 801a9de:	4632      	mov	r2, r6
 801a9e0:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801a9e2:	4621      	mov	r1, r4
 801a9e4:	47a8      	blx	r5
 801a9e6:	b011      	add	sp, #68	; 0x44
 801a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9ec:	6803      	ldr	r3, [r0, #0]
 801a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9f0:	4798      	blx	r3
 801a9f2:	f8ba 2000 	ldrh.w	r2, [sl]
 801a9f6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a9fa:	f04f 0e03 	mov.w	lr, #3
 801a9fe:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801aa02:	4355      	muls	r5, r2
 801aa04:	fa1f fc87 	uxth.w	ip, r7
 801aa08:	fb02 1303 	mla	r3, r2, r3, r1
 801aa0c:	eba2 0208 	sub.w	r2, r2, r8
 801aa10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aa1c:	4418      	add	r0, r3
 801aa1e:	920b      	str	r2, [sp, #44]	; 0x2c
 801aa20:	1943      	adds	r3, r0, r5
 801aa22:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801aa26:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801aa2a:	eba2 0208 	sub.w	r2, r2, r8
 801aa2e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801aa32:	b2ad      	uxth	r5, r5
 801aa34:	4298      	cmp	r0, r3
 801aa36:	d24a      	bcs.n	801aace <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801aa38:	eb00 0908 	add.w	r9, r0, r8
 801aa3c:	4621      	mov	r1, r4
 801aa3e:	4548      	cmp	r0, r9
 801aa40:	460c      	mov	r4, r1
 801aa42:	d240      	bcs.n	801aac6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801aa44:	f04f 0a04 	mov.w	sl, #4
 801aa48:	7824      	ldrb	r4, [r4, #0]
 801aa4a:	2fff      	cmp	r7, #255	; 0xff
 801aa4c:	f101 0101 	add.w	r1, r1, #1
 801aa50:	fb1e a404 	smlabb	r4, lr, r4, sl
 801aa54:	eb06 0a04 	add.w	sl, r6, r4
 801aa58:	f816 b004 	ldrb.w	fp, [r6, r4]
 801aa5c:	d02b      	beq.n	801aab6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801aa5e:	7804      	ldrb	r4, [r0, #0]
 801aa60:	fb14 f405 	smulbb	r4, r4, r5
 801aa64:	fb0b 440c 	mla	r4, fp, ip, r4
 801aa68:	b2a4      	uxth	r4, r4
 801aa6a:	f104 0b01 	add.w	fp, r4, #1
 801aa6e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801aa72:	f890 b001 	ldrb.w	fp, [r0, #1]
 801aa76:	fb1b fb05 	smulbb	fp, fp, r5
 801aa7a:	1224      	asrs	r4, r4, #8
 801aa7c:	7004      	strb	r4, [r0, #0]
 801aa7e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801aa82:	fb04 b40c 	mla	r4, r4, ip, fp
 801aa86:	b2a4      	uxth	r4, r4
 801aa88:	f104 0b01 	add.w	fp, r4, #1
 801aa8c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801aa90:	1224      	asrs	r4, r4, #8
 801aa92:	7044      	strb	r4, [r0, #1]
 801aa94:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801aa98:	f890 a002 	ldrb.w	sl, [r0, #2]
 801aa9c:	fb1a fa05 	smulbb	sl, sl, r5
 801aaa0:	fb04 a40c 	mla	r4, r4, ip, sl
 801aaa4:	b2a4      	uxth	r4, r4
 801aaa6:	f104 0a01 	add.w	sl, r4, #1
 801aaaa:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801aaae:	1224      	asrs	r4, r4, #8
 801aab0:	7084      	strb	r4, [r0, #2]
 801aab2:	3003      	adds	r0, #3
 801aab4:	e7c3      	b.n	801aa3e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801aab6:	f880 b000 	strb.w	fp, [r0]
 801aaba:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801aabe:	7044      	strb	r4, [r0, #1]
 801aac0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801aac4:	e7f4      	b.n	801aab0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801aac6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801aac8:	4420      	add	r0, r4
 801aaca:	188c      	adds	r4, r1, r2
 801aacc:	e7b2      	b.n	801aa34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801aace:	4b03      	ldr	r3, [pc, #12]	; (801aadc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801aad0:	6818      	ldr	r0, [r3, #0]
 801aad2:	6803      	ldr	r3, [r0, #0]
 801aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aad6:	4798      	blx	r3
 801aad8:	e785      	b.n	801a9e6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801aada:	bf00      	nop
 801aadc:	2400c854 	.word	0x2400c854
 801aae0:	2400c84e 	.word	0x2400c84e

0801aae4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801aae4:	b430      	push	{r4, r5}
 801aae6:	780d      	ldrb	r5, [r1, #0]
 801aae8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801aaec:	b11d      	cbz	r5, 801aaf6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801aaee:	2d01      	cmp	r5, #1
 801aaf0:	d005      	beq.n	801aafe <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801aaf2:	bc30      	pop	{r4, r5}
 801aaf4:	4770      	bx	lr
 801aaf6:	9402      	str	r4, [sp, #8]
 801aaf8:	bc30      	pop	{r4, r5}
 801aafa:	f7ff be3f 	b.w	801a77c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801aafe:	9402      	str	r4, [sp, #8]
 801ab00:	bc30      	pop	{r4, r5}
 801ab02:	f7ff bf13 	b.w	801a92c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801ab08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801ab08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab0c:	4605      	mov	r5, r0
 801ab0e:	b08f      	sub	sp, #60	; 0x3c
 801ab10:	460c      	mov	r4, r1
 801ab12:	461f      	mov	r7, r3
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d052      	beq.n	801abbe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801ab18:	6808      	ldr	r0, [r1, #0]
 801ab1a:	ab0a      	add	r3, sp, #40	; 0x28
 801ab1c:	6849      	ldr	r1, [r1, #4]
 801ab1e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801ace8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801ab22:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801acec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801ab26:	c303      	stmia	r3!, {r0, r1}
 801ab28:	6810      	ldr	r0, [r2, #0]
 801ab2a:	ab0c      	add	r3, sp, #48	; 0x30
 801ab2c:	6851      	ldr	r1, [r2, #4]
 801ab2e:	c303      	stmia	r3!, {r0, r1}
 801ab30:	a80a      	add	r0, sp, #40	; 0x28
 801ab32:	f7fa fdb3 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab36:	4621      	mov	r1, r4
 801ab38:	a80c      	add	r0, sp, #48	; 0x30
 801ab3a:	f7fa fdd7 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab3e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801ab42:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801ab46:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ab4a:	f8d8 0000 	ldr.w	r0, [r8]
 801ab4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ab52:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801ab56:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801ab5a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801ab5e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801ab62:	440a      	add	r2, r1
 801ab64:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801ab68:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801ab6c:	4413      	add	r3, r2
 801ab6e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ab72:	6803      	ldr	r3, [r0, #0]
 801ab74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab76:	4798      	blx	r3
 801ab78:	2fff      	cmp	r7, #255	; 0xff
 801ab7a:	d023      	beq.n	801abc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801ab7c:	f010 0f04 	tst.w	r0, #4
 801ab80:	f8d8 0000 	ldr.w	r0, [r8]
 801ab84:	d021      	beq.n	801abca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801ab86:	2100      	movs	r1, #0
 801ab88:	f04f 0e01 	mov.w	lr, #1
 801ab8c:	f8d0 c000 	ldr.w	ip, [r0]
 801ab90:	b2a4      	uxth	r4, r4
 801ab92:	9106      	str	r1, [sp, #24]
 801ab94:	b2b6      	uxth	r6, r6
 801ab96:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ab9a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ab9e:	e9cd e107 	strd	lr, r1, [sp, #28]
 801aba2:	f8b9 e000 	ldrh.w	lr, [r9]
 801aba6:	9703      	str	r7, [sp, #12]
 801aba8:	9401      	str	r4, [sp, #4]
 801abaa:	9600      	str	r6, [sp, #0]
 801abac:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801abb0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801abb4:	9102      	str	r1, [sp, #8]
 801abb6:	4629      	mov	r1, r5
 801abb8:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801abbc:	47a0      	blx	r4
 801abbe:	b00f      	add	sp, #60	; 0x3c
 801abc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abc4:	f010 0f01 	tst.w	r0, #1
 801abc8:	e7da      	b.n	801ab80 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801abca:	6803      	ldr	r3, [r0, #0]
 801abcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abce:	4798      	blx	r3
 801abd0:	f8b9 1000 	ldrh.w	r1, [r9]
 801abd4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801abd8:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801abdc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801abe0:	434c      	muls	r4, r1
 801abe2:	2fff      	cmp	r7, #255	; 0xff
 801abe4:	fb01 2303 	mla	r3, r1, r3, r2
 801abe8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801abec:	eba1 0106 	sub.w	r1, r1, r6
 801abf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801abf8:	4418      	add	r0, r3
 801abfa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801abfe:	eba3 0606 	sub.w	r6, r3, r6
 801ac02:	4404      	add	r4, r0
 801ac04:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801ac08:	d04a      	beq.n	801aca0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801ac0a:	43fa      	mvns	r2, r7
 801ac0c:	b2bb      	uxth	r3, r7
 801ac0e:	b2d7      	uxtb	r7, r2
 801ac10:	42a0      	cmp	r0, r4
 801ac12:	d263      	bcs.n	801acdc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801ac14:	eb00 0e0c 	add.w	lr, r0, ip
 801ac18:	4586      	cmp	lr, r0
 801ac1a:	f100 0803 	add.w	r8, r0, #3
 801ac1e:	d93a      	bls.n	801ac96 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801ac20:	f835 2b02 	ldrh.w	r2, [r5], #2
 801ac24:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801ac28:	00d0      	lsls	r0, r2, #3
 801ac2a:	fb19 f907 	smulbb	r9, r9, r7
 801ac2e:	b2c0      	uxtb	r0, r0
 801ac30:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801ac34:	fb00 9003 	mla	r0, r0, r3, r9
 801ac38:	b280      	uxth	r0, r0
 801ac3a:	f100 0901 	add.w	r9, r0, #1
 801ac3e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ac42:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801ac46:	fb19 f907 	smulbb	r9, r9, r7
 801ac4a:	1200      	asrs	r0, r0, #8
 801ac4c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801ac50:	10d0      	asrs	r0, r2, #3
 801ac52:	1212      	asrs	r2, r2, #8
 801ac54:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ac58:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ac5c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801ac60:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ac64:	fb00 9003 	mla	r0, r0, r3, r9
 801ac68:	b280      	uxth	r0, r0
 801ac6a:	f100 0901 	add.w	r9, r0, #1
 801ac6e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ac72:	1200      	asrs	r0, r0, #8
 801ac74:	f808 0c02 	strb.w	r0, [r8, #-2]
 801ac78:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801ac7c:	fb10 f007 	smulbb	r0, r0, r7
 801ac80:	fb02 0203 	mla	r2, r2, r3, r0
 801ac84:	b292      	uxth	r2, r2
 801ac86:	1c50      	adds	r0, r2, #1
 801ac88:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ac8c:	4640      	mov	r0, r8
 801ac8e:	1212      	asrs	r2, r2, #8
 801ac90:	f808 2c01 	strb.w	r2, [r8, #-1]
 801ac94:	e7c0      	b.n	801ac18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801ac96:	4408      	add	r0, r1
 801ac98:	4435      	add	r5, r6
 801ac9a:	e7b9      	b.n	801ac10 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801ac9c:	4408      	add	r0, r1
 801ac9e:	4435      	add	r5, r6
 801aca0:	42a0      	cmp	r0, r4
 801aca2:	d21b      	bcs.n	801acdc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801aca4:	eb00 070c 	add.w	r7, r0, ip
 801aca8:	42b8      	cmp	r0, r7
 801acaa:	d2f7      	bcs.n	801ac9c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801acac:	f835 3b02 	ldrh.w	r3, [r5], #2
 801acb0:	3003      	adds	r0, #3
 801acb2:	00da      	lsls	r2, r3, #3
 801acb4:	b2d2      	uxtb	r2, r2
 801acb6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801acba:	f800 2c03 	strb.w	r2, [r0, #-3]
 801acbe:	10da      	asrs	r2, r3, #3
 801acc0:	121b      	asrs	r3, r3, #8
 801acc2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801acc6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801acca:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801acce:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801acd2:	f800 2c02 	strb.w	r2, [r0, #-2]
 801acd6:	f800 3c01 	strb.w	r3, [r0, #-1]
 801acda:	e7e5      	b.n	801aca8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801acdc:	4b02      	ldr	r3, [pc, #8]	; (801ace8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801acde:	6818      	ldr	r0, [r3, #0]
 801ace0:	6803      	ldr	r3, [r0, #0]
 801ace2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ace4:	4798      	blx	r3
 801ace6:	e76a      	b.n	801abbe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801ace8:	2400c854 	.word	0x2400c854
 801acec:	2400c84e 	.word	0x2400c84e

0801acf0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801acf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acf4:	b08a      	sub	sp, #40	; 0x28
 801acf6:	460d      	mov	r5, r1
 801acf8:	4604      	mov	r4, r0
 801acfa:	461e      	mov	r6, r3
 801acfc:	6808      	ldr	r0, [r1, #0]
 801acfe:	ab06      	add	r3, sp, #24
 801ad00:	6849      	ldr	r1, [r1, #4]
 801ad02:	4f5d      	ldr	r7, [pc, #372]	; (801ae78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801ad04:	c303      	stmia	r3!, {r0, r1}
 801ad06:	6810      	ldr	r0, [r2, #0]
 801ad08:	ab08      	add	r3, sp, #32
 801ad0a:	6851      	ldr	r1, [r2, #4]
 801ad0c:	c303      	stmia	r3!, {r0, r1}
 801ad0e:	a806      	add	r0, sp, #24
 801ad10:	f7fa fcc4 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ad14:	4629      	mov	r1, r5
 801ad16:	a808      	add	r0, sp, #32
 801ad18:	f7fa fce8 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ad1c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ad20:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ad24:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ad28:	6838      	ldr	r0, [r7, #0]
 801ad2a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ad2e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801ad32:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801ad36:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ad3a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ad3e:	440a      	add	r2, r1
 801ad40:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ad44:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ad48:	4413      	add	r3, r2
 801ad4a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ad4e:	6803      	ldr	r3, [r0, #0]
 801ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad52:	4798      	blx	r3
 801ad54:	2eff      	cmp	r6, #255	; 0xff
 801ad56:	d119      	bne.n	801ad8c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801ad58:	f010 0f20 	tst.w	r0, #32
 801ad5c:	6838      	ldr	r0, [r7, #0]
 801ad5e:	d018      	beq.n	801ad92 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801ad60:	b2ad      	uxth	r5, r5
 801ad62:	2700      	movs	r7, #0
 801ad64:	6801      	ldr	r1, [r0, #0]
 801ad66:	9501      	str	r5, [sp, #4]
 801ad68:	fa1f f588 	uxth.w	r5, r8
 801ad6c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ad70:	9500      	str	r5, [sp, #0]
 801ad72:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ad76:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801ad7a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ad7e:	9602      	str	r6, [sp, #8]
 801ad80:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801ad82:	4621      	mov	r1, r4
 801ad84:	47a8      	blx	r5
 801ad86:	b00a      	add	sp, #40	; 0x28
 801ad88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ad90:	e7e4      	b.n	801ad5c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801ad92:	6803      	ldr	r3, [r0, #0]
 801ad94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad96:	4798      	blx	r3
 801ad98:	4b38      	ldr	r3, [pc, #224]	; (801ae7c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801ad9a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ad9e:	f8b3 c000 	ldrh.w	ip, [r3]
 801ada2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ada6:	fb0c f505 	mul.w	r5, ip, r5
 801adaa:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801adae:	fb0c 2303 	mla	r3, ip, r3, r2
 801adb2:	ebac 0c08 	sub.w	ip, ip, r8
 801adb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801adba:	ebae 0e08 	sub.w	lr, lr, r8
 801adbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801adc2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801adc6:	4418      	add	r0, r3
 801adc8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801adcc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801add0:	4405      	add	r5, r0
 801add2:	42a8      	cmp	r0, r5
 801add4:	d24a      	bcs.n	801ae6c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801add6:	eb00 0803 	add.w	r8, r0, r3
 801adda:	4540      	cmp	r0, r8
 801addc:	d243      	bcs.n	801ae66 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801adde:	78e2      	ldrb	r2, [r4, #3]
 801ade0:	b15a      	cbz	r2, 801adfa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801ade2:	2aff      	cmp	r2, #255	; 0xff
 801ade4:	f894 9000 	ldrb.w	r9, [r4]
 801ade8:	d10a      	bne.n	801ae00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801adea:	2eff      	cmp	r6, #255	; 0xff
 801adec:	d108      	bne.n	801ae00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801adee:	f880 9000 	strb.w	r9, [r0]
 801adf2:	7862      	ldrb	r2, [r4, #1]
 801adf4:	7042      	strb	r2, [r0, #1]
 801adf6:	78a2      	ldrb	r2, [r4, #2]
 801adf8:	7082      	strb	r2, [r0, #2]
 801adfa:	3003      	adds	r0, #3
 801adfc:	3404      	adds	r4, #4
 801adfe:	e7ec      	b.n	801adda <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801ae00:	4372      	muls	r2, r6
 801ae02:	1c51      	adds	r1, r2, #1
 801ae04:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801ae08:	1209      	asrs	r1, r1, #8
 801ae0a:	fa1f fa81 	uxth.w	sl, r1
 801ae0e:	43c9      	mvns	r1, r1
 801ae10:	fb19 f90a 	smulbb	r9, r9, sl
 801ae14:	b2ca      	uxtb	r2, r1
 801ae16:	7801      	ldrb	r1, [r0, #0]
 801ae18:	fb01 9902 	mla	r9, r1, r2, r9
 801ae1c:	fa1f f989 	uxth.w	r9, r9
 801ae20:	f109 0101 	add.w	r1, r9, #1
 801ae24:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801ae28:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ae2c:	f880 9000 	strb.w	r9, [r0]
 801ae30:	f890 9001 	ldrb.w	r9, [r0, #1]
 801ae34:	7861      	ldrb	r1, [r4, #1]
 801ae36:	fb19 f902 	smulbb	r9, r9, r2
 801ae3a:	fb01 910a 	mla	r1, r1, sl, r9
 801ae3e:	b289      	uxth	r1, r1
 801ae40:	f101 0901 	add.w	r9, r1, #1
 801ae44:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801ae48:	1209      	asrs	r1, r1, #8
 801ae4a:	7041      	strb	r1, [r0, #1]
 801ae4c:	7881      	ldrb	r1, [r0, #2]
 801ae4e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801ae52:	fb11 f202 	smulbb	r2, r1, r2
 801ae56:	fb09 220a 	mla	r2, r9, sl, r2
 801ae5a:	b292      	uxth	r2, r2
 801ae5c:	1c51      	adds	r1, r2, #1
 801ae5e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ae62:	1212      	asrs	r2, r2, #8
 801ae64:	e7c8      	b.n	801adf8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801ae66:	4460      	add	r0, ip
 801ae68:	4474      	add	r4, lr
 801ae6a:	e7b2      	b.n	801add2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801ae6c:	6838      	ldr	r0, [r7, #0]
 801ae6e:	6803      	ldr	r3, [r0, #0]
 801ae70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae72:	4798      	blx	r3
 801ae74:	e787      	b.n	801ad86 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801ae76:	bf00      	nop
 801ae78:	2400c854 	.word	0x2400c854
 801ae7c:	2400c84e 	.word	0x2400c84e

0801ae80 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ae80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae84:	b085      	sub	sp, #20
 801ae86:	4606      	mov	r6, r0
 801ae88:	460c      	mov	r4, r1
 801ae8a:	4691      	mov	r9, r2
 801ae8c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801ae90:	4698      	mov	r8, r3
 801ae92:	b31d      	cbz	r5, 801aedc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ae94:	4608      	mov	r0, r1
 801ae96:	f7fd fa4f 	bl	8018338 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ae9a:	4607      	mov	r7, r0
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	f7fd fa7f 	bl	80183a0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aea2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801aea6:	4620      	mov	r0, r4
 801aea8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801aeac:	f8ad 800a 	strh.w	r8, [sp, #10]
 801aeb0:	f8ad 700c 	strh.w	r7, [sp, #12]
 801aeb4:	f7fd fb78 	bl	80185a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801aeb8:	280b      	cmp	r0, #11
 801aeba:	d80f      	bhi.n	801aedc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801aebc:	e8df f000 	tbb	[pc, r0]
 801aec0:	0e062920 	.word	0x0e062920
 801aec4:	0e0e0e0e 	.word	0x0e0e0e0e
 801aec8:	110e0e0e 	.word	0x110e0e0e
 801aecc:	4620      	mov	r0, r4
 801aece:	f7fd fae7 	bl	80184a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801aed2:	462b      	mov	r3, r5
 801aed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aed6:	a902      	add	r1, sp, #8
 801aed8:	f7ff ff0a 	bl	801acf0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aedc:	b005      	add	sp, #20
 801aede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aee2:	4620      	mov	r0, r4
 801aee4:	f7fd fadc 	bl	80184a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801aee8:	4606      	mov	r6, r0
 801aeea:	4620      	mov	r0, r4
 801aeec:	f7fd fb08 	bl	8018500 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801aef0:	9500      	str	r5, [sp, #0]
 801aef2:	4601      	mov	r1, r0
 801aef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aef6:	aa02      	add	r2, sp, #8
 801aef8:	4630      	mov	r0, r6
 801aefa:	f7ff fdf3 	bl	801aae4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801aefe:	e7ed      	b.n	801aedc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801af00:	4620      	mov	r0, r4
 801af02:	f7fd facd 	bl	80184a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801af06:	462b      	mov	r3, r5
 801af08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801af0a:	a902      	add	r1, sp, #8
 801af0c:	f7ff fdfc 	bl	801ab08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801af10:	e7e4      	b.n	801aedc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801af12:	6833      	ldr	r3, [r6, #0]
 801af14:	4620      	mov	r0, r4
 801af16:	68df      	ldr	r7, [r3, #12]
 801af18:	f7fd fac2 	bl	80184a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801af1c:	2300      	movs	r3, #0
 801af1e:	4601      	mov	r1, r0
 801af20:	aa02      	add	r2, sp, #8
 801af22:	4630      	mov	r0, r6
 801af24:	e9cd 5300 	strd	r5, r3, [sp]
 801af28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af2a:	47b8      	blx	r7
 801af2c:	e7d6      	b.n	801aedc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801af2e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801af2e:	b4f0      	push	{r4, r5, r6, r7}
 801af30:	4616      	mov	r6, r2
 801af32:	461c      	mov	r4, r3
 801af34:	460d      	mov	r5, r1
 801af36:	9a04      	ldr	r2, [sp, #16]
 801af38:	2e01      	cmp	r6, #1
 801af3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801af3e:	d00e      	beq.n	801af5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801af40:	d303      	bcc.n	801af4a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801af42:	2e02      	cmp	r6, #2
 801af44:	d006      	beq.n	801af54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801af46:	bcf0      	pop	{r4, r5, r6, r7}
 801af48:	4770      	bx	lr
 801af4a:	4621      	mov	r1, r4
 801af4c:	4628      	mov	r0, r5
 801af4e:	bcf0      	pop	{r4, r5, r6, r7}
 801af50:	f7ff bdda 	b.w	801ab08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801af54:	4621      	mov	r1, r4
 801af56:	4628      	mov	r0, r5
 801af58:	bcf0      	pop	{r4, r5, r6, r7}
 801af5a:	f7ff bec9 	b.w	801acf0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801af5e:	6805      	ldr	r5, [r0, #0]
 801af60:	2600      	movs	r6, #0
 801af62:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801af66:	68ed      	ldr	r5, [r5, #12]
 801af68:	4613      	mov	r3, r2
 801af6a:	4622      	mov	r2, r4
 801af6c:	46ac      	mov	ip, r5
 801af6e:	bcf0      	pop	{r4, r5, r6, r7}
 801af70:	4760      	bx	ip
	...

0801af74 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801af74:	b160      	cbz	r0, 801af90 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801af76:	2903      	cmp	r1, #3
 801af78:	d818      	bhi.n	801afac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801af7a:	e8df f001 	tbb	[pc, r1]
 801af7e:	1902      	.short	0x1902
 801af80:	1b06      	.short	0x1b06
 801af82:	4b0e      	ldr	r3, [pc, #56]	; (801afbc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801af84:	8818      	ldrh	r0, [r3, #0]
 801af86:	4240      	negs	r0, r0
 801af88:	4770      	bx	lr
 801af8a:	4b0c      	ldr	r3, [pc, #48]	; (801afbc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801af8c:	8818      	ldrh	r0, [r3, #0]
 801af8e:	4770      	bx	lr
 801af90:	2903      	cmp	r1, #3
 801af92:	d80b      	bhi.n	801afac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801af94:	a301      	add	r3, pc, #4	; (adr r3, 801af9c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801af96:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801af9a:	bf00      	nop
 801af9c:	0801afb1 	.word	0x0801afb1
 801afa0:	0801af8b 	.word	0x0801af8b
 801afa4:	0801afb5 	.word	0x0801afb5
 801afa8:	0801af83 	.word	0x0801af83
 801afac:	2000      	movs	r0, #0
 801afae:	4770      	bx	lr
 801afb0:	2001      	movs	r0, #1
 801afb2:	4770      	bx	lr
 801afb4:	f04f 30ff 	mov.w	r0, #4294967295
 801afb8:	4770      	bx	lr
 801afba:	bf00      	nop
 801afbc:	2400c84e 	.word	0x2400c84e

0801afc0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801afc0:	b160      	cbz	r0, 801afdc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801afc2:	2903      	cmp	r1, #3
 801afc4:	d818      	bhi.n	801aff8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801afc6:	e8df f001 	tbb	[pc, r1]
 801afca:	0219      	.short	0x0219
 801afcc:	051b      	.short	0x051b
 801afce:	4b0e      	ldr	r3, [pc, #56]	; (801b008 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801afd0:	8818      	ldrh	r0, [r3, #0]
 801afd2:	4770      	bx	lr
 801afd4:	4b0c      	ldr	r3, [pc, #48]	; (801b008 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801afd6:	8818      	ldrh	r0, [r3, #0]
 801afd8:	4240      	negs	r0, r0
 801afda:	4770      	bx	lr
 801afdc:	2903      	cmp	r1, #3
 801afde:	d80b      	bhi.n	801aff8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801afe0:	a301      	add	r3, pc, #4	; (adr r3, 801afe8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801afe2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801afe6:	bf00      	nop
 801afe8:	0801afcf 	.word	0x0801afcf
 801afec:	0801b001 	.word	0x0801b001
 801aff0:	0801afd5 	.word	0x0801afd5
 801aff4:	0801affd 	.word	0x0801affd
 801aff8:	2000      	movs	r0, #0
 801affa:	4770      	bx	lr
 801affc:	2001      	movs	r0, #1
 801affe:	4770      	bx	lr
 801b000:	f04f 30ff 	mov.w	r0, #4294967295
 801b004:	4770      	bx	lr
 801b006:	bf00      	nop
 801b008:	2400c84e 	.word	0x2400c84e

0801b00c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b010:	b097      	sub	sp, #92	; 0x5c
 801b012:	910b      	str	r1, [sp, #44]	; 0x2c
 801b014:	a912      	add	r1, sp, #72	; 0x48
 801b016:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801b01a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801b01e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801b022:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801b026:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801b02a:	e881 000c 	stmia.w	r1, {r2, r3}
 801b02e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801b032:	930a      	str	r3, [sp, #40]	; 0x28
 801b034:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801b038:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801b03c:	9311      	str	r3, [sp, #68]	; 0x44
 801b03e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801b042:	798d      	ldrb	r5, [r1, #6]
 801b044:	930c      	str	r3, [sp, #48]	; 0x30
 801b046:	7b4b      	ldrb	r3, [r1, #13]
 801b048:	0158      	lsls	r0, r3, #5
 801b04a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b04e:	4328      	orrs	r0, r5
 801b050:	9009      	str	r0, [sp, #36]	; 0x24
 801b052:	f000 817c 	beq.w	801b34e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b056:	011b      	lsls	r3, r3, #4
 801b058:	79c8      	ldrb	r0, [r1, #7]
 801b05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b05e:	4303      	orrs	r3, r0
 801b060:	930e      	str	r3, [sp, #56]	; 0x38
 801b062:	f000 8174 	beq.w	801b34e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b066:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b06a:	b29b      	uxth	r3, r3
 801b06c:	2f00      	cmp	r7, #0
 801b06e:	f000 8116 	beq.w	801b29e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801b072:	1aff      	subs	r7, r7, r3
 801b074:	b2bf      	uxth	r7, r7
 801b076:	043b      	lsls	r3, r7, #16
 801b078:	d502      	bpl.n	801b080 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b07a:	1bf6      	subs	r6, r6, r7
 801b07c:	2700      	movs	r7, #0
 801b07e:	b236      	sxth	r6, r6
 801b080:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b084:	a812      	add	r0, sp, #72	; 0x48
 801b086:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801b08a:	428e      	cmp	r6, r1
 801b08c:	b28b      	uxth	r3, r1
 801b08e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801b092:	bfbf      	itttt	lt
 801b094:	18ff      	addlt	r7, r7, r3
 801b096:	1bbe      	sublt	r6, r7, r6
 801b098:	b2b7      	uxthlt	r7, r6
 801b09a:	460e      	movlt	r6, r1
 801b09c:	8891      	ldrh	r1, [r2, #4]
 801b09e:	440b      	add	r3, r1
 801b0a0:	4631      	mov	r1, r6
 801b0a2:	b21b      	sxth	r3, r3
 801b0a4:	9310      	str	r3, [sp, #64]	; 0x40
 801b0a6:	88d3      	ldrh	r3, [r2, #6]
 801b0a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b0aa:	449a      	add	sl, r3
 801b0ac:	fa0f f38a 	sxth.w	r3, sl
 801b0b0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801b0b4:	930f      	str	r3, [sp, #60]	; 0x3c
 801b0b6:	4bb5      	ldr	r3, [pc, #724]	; (801b38c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801b0b8:	f893 b000 	ldrb.w	fp, [r3]
 801b0bc:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b0c0:	f1dc 0300 	rsbs	r3, ip, #0
 801b0c4:	eb43 030c 	adc.w	r3, r3, ip
 801b0c8:	930d      	str	r3, [sp, #52]	; 0x34
 801b0ca:	464b      	mov	r3, r9
 801b0cc:	f7fa f961 	bl	8015392 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b0d0:	4631      	mov	r1, r6
 801b0d2:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801b0d6:	464b      	mov	r3, r9
 801b0d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b0da:	a812      	add	r0, sp, #72	; 0x48
 801b0dc:	f7fa f976 	bl	80153cc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b0e0:	a916      	add	r1, sp, #88	; 0x58
 801b0e2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b0e6:	a815      	add	r0, sp, #84	; 0x54
 801b0e8:	f7fa fa96 	bl	8015618 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b0ec:	f1b9 0f00 	cmp.w	r9, #0
 801b0f0:	f040 80d8 	bne.w	801b2a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801b0f4:	f1bb 0f01 	cmp.w	fp, #1
 801b0f8:	f040 80dc 	bne.w	801b2b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801b0fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b0fe:	b153      	cbz	r3, 801b116 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801b100:	2508      	movs	r5, #8
 801b102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b104:	fb95 f3f8 	sdiv	r3, r5, r8
 801b108:	1e5d      	subs	r5, r3, #1
 801b10a:	4415      	add	r5, r2
 801b10c:	fb95 f5f3 	sdiv	r5, r5, r3
 801b110:	fb15 f503 	smulbb	r5, r5, r3
 801b114:	b2ad      	uxth	r5, r5
 801b116:	b907      	cbnz	r7, 801b11a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801b118:	b16c      	cbz	r4, 801b136 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801b11a:	fb04 7305 	mla	r3, r4, r5, r7
 801b11e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801b120:	ebaa 0a04 	sub.w	sl, sl, r4
 801b124:	fb08 f303 	mul.w	r3, r8, r3
 801b128:	fa1f fa8a 	uxth.w	sl, sl
 801b12c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801b130:	f003 0407 	and.w	r4, r3, #7
 801b134:	9226      	str	r2, [sp, #152]	; 0x98
 801b136:	4649      	mov	r1, r9
 801b138:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b13a:	f7ff ff1b 	bl	801af74 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801b13e:	4683      	mov	fp, r0
 801b140:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b142:	f7ff ff3d 	bl	801afc0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801b146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b14a:	4681      	mov	r9, r0
 801b14c:	1a9b      	subs	r3, r3, r2
 801b14e:	459a      	cmp	sl, r3
 801b150:	bfa8      	it	ge
 801b152:	469a      	movge	sl, r3
 801b154:	f1ba 0f00 	cmp.w	sl, #0
 801b158:	f340 80f9 	ble.w	801b34e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b15c:	1bf6      	subs	r6, r6, r7
 801b15e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b160:	1b9e      	subs	r6, r3, r6
 801b162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b164:	429e      	cmp	r6, r3
 801b166:	bfd4      	ite	le
 801b168:	ebc7 0706 	rsble	r7, r7, r6
 801b16c:	ebc7 0703 	rsbgt	r7, r7, r3
 801b170:	2f00      	cmp	r7, #0
 801b172:	f340 80ec 	ble.w	801b34e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b176:	1bed      	subs	r5, r5, r7
 801b178:	fb08 f305 	mul.w	r3, r8, r5
 801b17c:	930d      	str	r3, [sp, #52]	; 0x34
 801b17e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b180:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b184:	930e      	str	r3, [sp, #56]	; 0x38
 801b186:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b188:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b18c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b18e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b190:	b2db      	uxtb	r3, r3
 801b192:	9310      	str	r3, [sp, #64]	; 0x40
 801b194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b196:	2b00      	cmp	r3, #0
 801b198:	f040 80de 	bne.w	801b358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801b19c:	4b7c      	ldr	r3, [pc, #496]	; (801b390 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801b19e:	6818      	ldr	r0, [r3, #0]
 801b1a0:	6803      	ldr	r3, [r0, #0]
 801b1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1a4:	4798      	blx	r3
 801b1a6:	2301      	movs	r3, #1
 801b1a8:	4a7a      	ldr	r2, [pc, #488]	; (801b394 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801b1aa:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801b1ae:	fb07 9b1b 	mls	fp, r7, fp, r9
 801b1b2:	fa03 f308 	lsl.w	r3, r3, r8
 801b1b6:	8811      	ldrh	r1, [r2, #0]
 801b1b8:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801b1bc:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801b1c0:	3b01      	subs	r3, #1
 801b1c2:	fb06 bb07 	mla	fp, r6, r7, fp
 801b1c6:	b2db      	uxtb	r3, r3
 801b1c8:	930a      	str	r3, [sp, #40]	; 0x28
 801b1ca:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801b1ce:	fb01 2303 	mla	r3, r1, r3, r2
 801b1d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b1d6:	18c3      	adds	r3, r0, r3
 801b1d8:	9309      	str	r3, [sp, #36]	; 0x24
 801b1da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b1dc:	781a      	ldrb	r2, [r3, #0]
 801b1de:	4122      	asrs	r2, r4
 801b1e0:	b2d2      	uxtb	r2, r2
 801b1e2:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b1e6:	f0c0 80d7 	bcc.w	801b398 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801b1ea:	46be      	mov	lr, r7
 801b1ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b1ee:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b1f2:	f0c0 80ba 	bcc.w	801b36a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801b1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1f8:	4013      	ands	r3, r2
 801b1fa:	d041      	beq.n	801b280 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b1fc:	20ff      	movs	r0, #255	; 0xff
 801b1fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b200:	fb90 f5f5 	sdiv	r5, r0, r5
 801b204:	436b      	muls	r3, r5
 801b206:	2bfe      	cmp	r3, #254	; 0xfe
 801b208:	dd03      	ble.n	801b212 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801b20a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b20c:	4285      	cmp	r5, r0
 801b20e:	f000 80a5 	beq.w	801b35c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801b212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b214:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b216:	fb15 f303 	smulbb	r3, r5, r3
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	1c5d      	adds	r5, r3, #1
 801b21e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801b222:	780d      	ldrb	r5, [r1, #0]
 801b224:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b228:	fa1f fc83 	uxth.w	ip, r3
 801b22c:	43db      	mvns	r3, r3
 801b22e:	fb10 f90c 	smulbb	r9, r0, ip
 801b232:	b2db      	uxtb	r3, r3
 801b234:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b236:	fb05 9503 	mla	r5, r5, r3, r9
 801b23a:	b2ad      	uxth	r5, r5
 801b23c:	f105 0901 	add.w	r9, r5, #1
 801b240:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b244:	fb10 f90c 	smulbb	r9, r0, ip
 801b248:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b24a:	122d      	asrs	r5, r5, #8
 801b24c:	fb10 fc0c 	smulbb	ip, r0, ip
 801b250:	700d      	strb	r5, [r1, #0]
 801b252:	784d      	ldrb	r5, [r1, #1]
 801b254:	fb05 9503 	mla	r5, r5, r3, r9
 801b258:	b2ad      	uxth	r5, r5
 801b25a:	f105 0901 	add.w	r9, r5, #1
 801b25e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b262:	122d      	asrs	r5, r5, #8
 801b264:	704d      	strb	r5, [r1, #1]
 801b266:	788d      	ldrb	r5, [r1, #2]
 801b268:	fb05 cc03 	mla	ip, r5, r3, ip
 801b26c:	fa1f fc8c 	uxth.w	ip, ip
 801b270:	f10c 0301 	add.w	r3, ip, #1
 801b274:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b278:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b27c:	f881 c002 	strb.w	ip, [r1, #2]
 801b280:	4444      	add	r4, r8
 801b282:	4431      	add	r1, r6
 801b284:	b2a4      	uxth	r4, r4
 801b286:	2c07      	cmp	r4, #7
 801b288:	bf89      	itett	hi
 801b28a:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801b28c:	fa42 f208 	asrls.w	r2, r2, r8
 801b290:	2400      	movhi	r4, #0
 801b292:	785a      	ldrbhi	r2, [r3, #1]
 801b294:	bf8a      	itet	hi
 801b296:	3301      	addhi	r3, #1
 801b298:	b2d2      	uxtbls	r2, r2
 801b29a:	9326      	strhi	r3, [sp, #152]	; 0x98
 801b29c:	e7a7      	b.n	801b1ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801b29e:	441e      	add	r6, r3
 801b2a0:	b236      	sxth	r6, r6
 801b2a2:	e6ed      	b.n	801b080 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b2a4:	f1b9 0f01 	cmp.w	r9, #1
 801b2a8:	f47f af28 	bne.w	801b0fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b2ac:	f1bb 0f01 	cmp.w	fp, #1
 801b2b0:	f47f af24 	bne.w	801b0fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b2b4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801b390 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801b2b8:	f8db 0000 	ldr.w	r0, [fp]
 801b2bc:	6803      	ldr	r3, [r0, #0]
 801b2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2c0:	4798      	blx	r3
 801b2c2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801b2c6:	465a      	mov	r2, fp
 801b2c8:	d006      	beq.n	801b2d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b2ca:	f1b8 0f04 	cmp.w	r8, #4
 801b2ce:	d141      	bne.n	801b354 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801b2d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b2d2:	3300      	adds	r3, #0
 801b2d4:	bf18      	it	ne
 801b2d6:	2301      	movne	r3, #1
 801b2d8:	0580      	lsls	r0, r0, #22
 801b2da:	d566      	bpl.n	801b3aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b2dc:	f1b8 0f08 	cmp.w	r8, #8
 801b2e0:	d163      	bne.n	801b3aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	bf0c      	ite	eq
 801b2e6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801b2ea:	f44f 7180 	movne.w	r1, #256	; 0x100
 801b2ee:	2f00      	cmp	r7, #0
 801b2f0:	f47f af04 	bne.w	801b0fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b2f4:	2c00      	cmp	r4, #0
 801b2f6:	f47f af01 	bne.w	801b0fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b2fe:	18f3      	adds	r3, r6, r3
 801b300:	4283      	cmp	r3, r0
 801b302:	f73f aefb 	bgt.w	801b0fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b306:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b30a:	4403      	add	r3, r0
 801b30c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b30e:	4283      	cmp	r3, r0
 801b310:	f73f aef4 	bgt.w	801b0fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b314:	f1b8 0f08 	cmp.w	r8, #8
 801b318:	6810      	ldr	r0, [r2, #0]
 801b31a:	f04f 0600 	mov.w	r6, #0
 801b31e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b322:	bf18      	it	ne
 801b324:	3501      	addne	r5, #1
 801b326:	6804      	ldr	r4, [r0, #0]
 801b328:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801b32c:	bf18      	it	ne
 801b32e:	f025 0501 	bicne.w	r5, r5, #1
 801b332:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801b336:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b338:	bf18      	it	ne
 801b33a:	b2ad      	uxthne	r5, r5
 801b33c:	9104      	str	r1, [sp, #16]
 801b33e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b340:	e9cd 5a00 	strd	r5, sl, [sp]
 801b344:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801b348:	9926      	ldr	r1, [sp, #152]	; 0x98
 801b34a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801b34c:	47a0      	blx	r4
 801b34e:	b017      	add	sp, #92	; 0x5c
 801b350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b354:	2300      	movs	r3, #0
 801b356:	e7bf      	b.n	801b2d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b358:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b35a:	e724      	b.n	801b1a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801b35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b35e:	700b      	strb	r3, [r1, #0]
 801b360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b362:	704b      	strb	r3, [r1, #1]
 801b364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b366:	708b      	strb	r3, [r1, #2]
 801b368:	e78a      	b.n	801b280 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b36c:	b153      	cbz	r3, 801b384 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801b36e:	441c      	add	r4, r3
 801b370:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b372:	b2a4      	uxth	r4, r4
 801b374:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801b378:	f004 0407 	and.w	r4, r4, #7
 801b37c:	781a      	ldrb	r2, [r3, #0]
 801b37e:	9326      	str	r3, [sp, #152]	; 0x98
 801b380:	4122      	asrs	r2, r4
 801b382:	b2d2      	uxtb	r2, r2
 801b384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b386:	445b      	add	r3, fp
 801b388:	9309      	str	r3, [sp, #36]	; 0x24
 801b38a:	e72a      	b.n	801b1e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801b38c:	2400c84c 	.word	0x2400c84c
 801b390:	2400c854 	.word	0x2400c854
 801b394:	2400c84e 	.word	0x2400c84e
 801b398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d1d7      	bne.n	801b34e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b39e:	4b06      	ldr	r3, [pc, #24]	; (801b3b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801b3a0:	6818      	ldr	r0, [r3, #0]
 801b3a2:	6803      	ldr	r3, [r0, #0]
 801b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3a6:	4798      	blx	r3
 801b3a8:	e7d1      	b.n	801b34e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	f43f aea6 	beq.w	801b0fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b3b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b3b4:	e79b      	b.n	801b2ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801b3b6:	bf00      	nop
 801b3b8:	2400c854 	.word	0x2400c854

0801b3bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b3bc:	b538      	push	{r3, r4, r5, lr}
 801b3be:	4c15      	ldr	r4, [pc, #84]	; (801b414 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b3c0:	4605      	mov	r5, r0
 801b3c2:	7823      	ldrb	r3, [r4, #0]
 801b3c4:	f3bf 8f5b 	dmb	ish
 801b3c8:	07da      	lsls	r2, r3, #31
 801b3ca:	d40b      	bmi.n	801b3e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b3cc:	4620      	mov	r0, r4
 801b3ce:	f005 f890 	bl	80204f2 <__cxa_guard_acquire>
 801b3d2:	b138      	cbz	r0, 801b3e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b3d4:	4620      	mov	r0, r4
 801b3d6:	f005 f898 	bl	802050a <__cxa_guard_release>
 801b3da:	4a0f      	ldr	r2, [pc, #60]	; (801b418 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b3dc:	490f      	ldr	r1, [pc, #60]	; (801b41c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b3de:	4810      	ldr	r0, [pc, #64]	; (801b420 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b3e0:	f005 f880 	bl	80204e4 <__aeabi_atexit>
 801b3e4:	4c0f      	ldr	r4, [pc, #60]	; (801b424 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b3e6:	7823      	ldrb	r3, [r4, #0]
 801b3e8:	f3bf 8f5b 	dmb	ish
 801b3ec:	07db      	lsls	r3, r3, #31
 801b3ee:	d40b      	bmi.n	801b408 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f005 f87e 	bl	80204f2 <__cxa_guard_acquire>
 801b3f6:	b138      	cbz	r0, 801b408 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	f005 f886 	bl	802050a <__cxa_guard_release>
 801b3fe:	4a06      	ldr	r2, [pc, #24]	; (801b418 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b400:	4909      	ldr	r1, [pc, #36]	; (801b428 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b402:	480a      	ldr	r0, [pc, #40]	; (801b42c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b404:	f005 f86e 	bl	80204e4 <__aeabi_atexit>
 801b408:	4b05      	ldr	r3, [pc, #20]	; (801b420 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b40a:	612b      	str	r3, [r5, #16]
 801b40c:	4b07      	ldr	r3, [pc, #28]	; (801b42c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b40e:	616b      	str	r3, [r5, #20]
 801b410:	bd38      	pop	{r3, r4, r5, pc}
 801b412:	bf00      	nop
 801b414:	2400c920 	.word	0x2400c920
 801b418:	24000000 	.word	0x24000000
 801b41c:	08019f81 	.word	0x08019f81
 801b420:	240000c8 	.word	0x240000c8
 801b424:	2400c924 	.word	0x2400c924
 801b428:	08019f7f 	.word	0x08019f7f
 801b42c:	240000cc 	.word	0x240000cc

0801b430 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b430:	b538      	push	{r3, r4, r5, lr}
 801b432:	4c15      	ldr	r4, [pc, #84]	; (801b488 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b434:	4605      	mov	r5, r0
 801b436:	7823      	ldrb	r3, [r4, #0]
 801b438:	f3bf 8f5b 	dmb	ish
 801b43c:	07da      	lsls	r2, r3, #31
 801b43e:	d40b      	bmi.n	801b458 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b440:	4620      	mov	r0, r4
 801b442:	f005 f856 	bl	80204f2 <__cxa_guard_acquire>
 801b446:	b138      	cbz	r0, 801b458 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b448:	4620      	mov	r0, r4
 801b44a:	f005 f85e 	bl	802050a <__cxa_guard_release>
 801b44e:	4a0f      	ldr	r2, [pc, #60]	; (801b48c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b450:	490f      	ldr	r1, [pc, #60]	; (801b490 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b452:	4810      	ldr	r0, [pc, #64]	; (801b494 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b454:	f005 f846 	bl	80204e4 <__aeabi_atexit>
 801b458:	4c0f      	ldr	r4, [pc, #60]	; (801b498 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b45a:	7823      	ldrb	r3, [r4, #0]
 801b45c:	f3bf 8f5b 	dmb	ish
 801b460:	07db      	lsls	r3, r3, #31
 801b462:	d40b      	bmi.n	801b47c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b464:	4620      	mov	r0, r4
 801b466:	f005 f844 	bl	80204f2 <__cxa_guard_acquire>
 801b46a:	b138      	cbz	r0, 801b47c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b46c:	4620      	mov	r0, r4
 801b46e:	f005 f84c 	bl	802050a <__cxa_guard_release>
 801b472:	4a06      	ldr	r2, [pc, #24]	; (801b48c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b474:	4909      	ldr	r1, [pc, #36]	; (801b49c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b476:	480a      	ldr	r0, [pc, #40]	; (801b4a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b478:	f005 f834 	bl	80204e4 <__aeabi_atexit>
 801b47c:	4b05      	ldr	r3, [pc, #20]	; (801b494 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b47e:	60ab      	str	r3, [r5, #8]
 801b480:	4b07      	ldr	r3, [pc, #28]	; (801b4a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b482:	60eb      	str	r3, [r5, #12]
 801b484:	bd38      	pop	{r3, r4, r5, pc}
 801b486:	bf00      	nop
 801b488:	2400c900 	.word	0x2400c900
 801b48c:	24000000 	.word	0x24000000
 801b490:	08019f85 	.word	0x08019f85
 801b494:	240000a8 	.word	0x240000a8
 801b498:	2400c904 	.word	0x2400c904
 801b49c:	08019f83 	.word	0x08019f83
 801b4a0:	240000ac 	.word	0x240000ac

0801b4a4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801b4a4:	b510      	push	{r4, lr}
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	f7ff ff88 	bl	801b3bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b4ac:	4620      	mov	r0, r4
 801b4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4b2:	f7ff bfbd 	b.w	801b430 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b4b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b4b8:	b538      	push	{r3, r4, r5, lr}
 801b4ba:	4c15      	ldr	r4, [pc, #84]	; (801b510 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b4bc:	4605      	mov	r5, r0
 801b4be:	7823      	ldrb	r3, [r4, #0]
 801b4c0:	f3bf 8f5b 	dmb	ish
 801b4c4:	07da      	lsls	r2, r3, #31
 801b4c6:	d40b      	bmi.n	801b4e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b4c8:	4620      	mov	r0, r4
 801b4ca:	f005 f812 	bl	80204f2 <__cxa_guard_acquire>
 801b4ce:	b138      	cbz	r0, 801b4e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b4d0:	4620      	mov	r0, r4
 801b4d2:	f005 f81a 	bl	802050a <__cxa_guard_release>
 801b4d6:	4a0f      	ldr	r2, [pc, #60]	; (801b514 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b4d8:	490f      	ldr	r1, [pc, #60]	; (801b518 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b4da:	4810      	ldr	r0, [pc, #64]	; (801b51c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b4dc:	f005 f802 	bl	80204e4 <__aeabi_atexit>
 801b4e0:	4c0f      	ldr	r4, [pc, #60]	; (801b520 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b4e2:	7823      	ldrb	r3, [r4, #0]
 801b4e4:	f3bf 8f5b 	dmb	ish
 801b4e8:	07db      	lsls	r3, r3, #31
 801b4ea:	d40b      	bmi.n	801b504 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	f005 f800 	bl	80204f2 <__cxa_guard_acquire>
 801b4f2:	b138      	cbz	r0, 801b504 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b4f4:	4620      	mov	r0, r4
 801b4f6:	f005 f808 	bl	802050a <__cxa_guard_release>
 801b4fa:	4a06      	ldr	r2, [pc, #24]	; (801b514 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b4fc:	4909      	ldr	r1, [pc, #36]	; (801b524 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b4fe:	480a      	ldr	r0, [pc, #40]	; (801b528 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b500:	f004 fff0 	bl	80204e4 <__aeabi_atexit>
 801b504:	4b05      	ldr	r3, [pc, #20]	; (801b51c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b506:	622b      	str	r3, [r5, #32]
 801b508:	4b07      	ldr	r3, [pc, #28]	; (801b528 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b50a:	626b      	str	r3, [r5, #36]	; 0x24
 801b50c:	bd38      	pop	{r3, r4, r5, pc}
 801b50e:	bf00      	nop
 801b510:	2400c928 	.word	0x2400c928
 801b514:	24000000 	.word	0x24000000
 801b518:	08019f79 	.word	0x08019f79
 801b51c:	240000d0 	.word	0x240000d0
 801b520:	2400c92c 	.word	0x2400c92c
 801b524:	08019f77 	.word	0x08019f77
 801b528:	240000d4 	.word	0x240000d4

0801b52c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b52c:	b538      	push	{r3, r4, r5, lr}
 801b52e:	4c15      	ldr	r4, [pc, #84]	; (801b584 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b530:	4605      	mov	r5, r0
 801b532:	7823      	ldrb	r3, [r4, #0]
 801b534:	f3bf 8f5b 	dmb	ish
 801b538:	07da      	lsls	r2, r3, #31
 801b53a:	d40b      	bmi.n	801b554 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b53c:	4620      	mov	r0, r4
 801b53e:	f004 ffd8 	bl	80204f2 <__cxa_guard_acquire>
 801b542:	b138      	cbz	r0, 801b554 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b544:	4620      	mov	r0, r4
 801b546:	f004 ffe0 	bl	802050a <__cxa_guard_release>
 801b54a:	4a0f      	ldr	r2, [pc, #60]	; (801b588 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b54c:	490f      	ldr	r1, [pc, #60]	; (801b58c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b54e:	4810      	ldr	r0, [pc, #64]	; (801b590 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b550:	f004 ffc8 	bl	80204e4 <__aeabi_atexit>
 801b554:	4c0f      	ldr	r4, [pc, #60]	; (801b594 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b556:	7823      	ldrb	r3, [r4, #0]
 801b558:	f3bf 8f5b 	dmb	ish
 801b55c:	07db      	lsls	r3, r3, #31
 801b55e:	d40b      	bmi.n	801b578 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b560:	4620      	mov	r0, r4
 801b562:	f004 ffc6 	bl	80204f2 <__cxa_guard_acquire>
 801b566:	b138      	cbz	r0, 801b578 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b568:	4620      	mov	r0, r4
 801b56a:	f004 ffce 	bl	802050a <__cxa_guard_release>
 801b56e:	4a06      	ldr	r2, [pc, #24]	; (801b588 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b570:	4909      	ldr	r1, [pc, #36]	; (801b598 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b572:	480a      	ldr	r0, [pc, #40]	; (801b59c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b574:	f004 ffb6 	bl	80204e4 <__aeabi_atexit>
 801b578:	4b05      	ldr	r3, [pc, #20]	; (801b590 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b57a:	61ab      	str	r3, [r5, #24]
 801b57c:	4b07      	ldr	r3, [pc, #28]	; (801b59c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b57e:	61eb      	str	r3, [r5, #28]
 801b580:	bd38      	pop	{r3, r4, r5, pc}
 801b582:	bf00      	nop
 801b584:	2400c908 	.word	0x2400c908
 801b588:	24000000 	.word	0x24000000
 801b58c:	08019f7d 	.word	0x08019f7d
 801b590:	240000b0 	.word	0x240000b0
 801b594:	2400c90c 	.word	0x2400c90c
 801b598:	08019f7b 	.word	0x08019f7b
 801b59c:	240000b4 	.word	0x240000b4

0801b5a0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b5a0:	b510      	push	{r4, lr}
 801b5a2:	4604      	mov	r4, r0
 801b5a4:	f7ff ff88 	bl	801b4b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b5a8:	4620      	mov	r0, r4
 801b5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5ae:	f7ff bfbd 	b.w	801b52c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b5b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801b5b4:	b538      	push	{r3, r4, r5, lr}
 801b5b6:	4c15      	ldr	r4, [pc, #84]	; (801b60c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801b5b8:	4605      	mov	r5, r0
 801b5ba:	7823      	ldrb	r3, [r4, #0]
 801b5bc:	f3bf 8f5b 	dmb	ish
 801b5c0:	07da      	lsls	r2, r3, #31
 801b5c2:	d40b      	bmi.n	801b5dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b5c4:	4620      	mov	r0, r4
 801b5c6:	f004 ff94 	bl	80204f2 <__cxa_guard_acquire>
 801b5ca:	b138      	cbz	r0, 801b5dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	f004 ff9c 	bl	802050a <__cxa_guard_release>
 801b5d2:	4a0f      	ldr	r2, [pc, #60]	; (801b610 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b5d4:	490f      	ldr	r1, [pc, #60]	; (801b614 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801b5d6:	4810      	ldr	r0, [pc, #64]	; (801b618 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b5d8:	f004 ff84 	bl	80204e4 <__aeabi_atexit>
 801b5dc:	4c0f      	ldr	r4, [pc, #60]	; (801b61c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801b5de:	7823      	ldrb	r3, [r4, #0]
 801b5e0:	f3bf 8f5b 	dmb	ish
 801b5e4:	07db      	lsls	r3, r3, #31
 801b5e6:	d40b      	bmi.n	801b600 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f004 ff82 	bl	80204f2 <__cxa_guard_acquire>
 801b5ee:	b138      	cbz	r0, 801b600 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	f004 ff8a 	bl	802050a <__cxa_guard_release>
 801b5f6:	4a06      	ldr	r2, [pc, #24]	; (801b610 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b5f8:	4909      	ldr	r1, [pc, #36]	; (801b620 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801b5fa:	480a      	ldr	r0, [pc, #40]	; (801b624 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b5fc:	f004 ff72 	bl	80204e4 <__aeabi_atexit>
 801b600:	4b05      	ldr	r3, [pc, #20]	; (801b618 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b602:	632b      	str	r3, [r5, #48]	; 0x30
 801b604:	4b07      	ldr	r3, [pc, #28]	; (801b624 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b606:	636b      	str	r3, [r5, #52]	; 0x34
 801b608:	bd38      	pop	{r3, r4, r5, pc}
 801b60a:	bf00      	nop
 801b60c:	2400c910 	.word	0x2400c910
 801b610:	24000000 	.word	0x24000000
 801b614:	08019f71 	.word	0x08019f71
 801b618:	240000b8 	.word	0x240000b8
 801b61c:	2400c914 	.word	0x2400c914
 801b620:	08019f6f 	.word	0x08019f6f
 801b624:	240000bc 	.word	0x240000bc

0801b628 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801b628:	b538      	push	{r3, r4, r5, lr}
 801b62a:	4c15      	ldr	r4, [pc, #84]	; (801b680 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801b62c:	4605      	mov	r5, r0
 801b62e:	7823      	ldrb	r3, [r4, #0]
 801b630:	f3bf 8f5b 	dmb	ish
 801b634:	07da      	lsls	r2, r3, #31
 801b636:	d40b      	bmi.n	801b650 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b638:	4620      	mov	r0, r4
 801b63a:	f004 ff5a 	bl	80204f2 <__cxa_guard_acquire>
 801b63e:	b138      	cbz	r0, 801b650 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b640:	4620      	mov	r0, r4
 801b642:	f004 ff62 	bl	802050a <__cxa_guard_release>
 801b646:	4a0f      	ldr	r2, [pc, #60]	; (801b684 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b648:	490f      	ldr	r1, [pc, #60]	; (801b688 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801b64a:	4810      	ldr	r0, [pc, #64]	; (801b68c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b64c:	f004 ff4a 	bl	80204e4 <__aeabi_atexit>
 801b650:	4c0f      	ldr	r4, [pc, #60]	; (801b690 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801b652:	7823      	ldrb	r3, [r4, #0]
 801b654:	f3bf 8f5b 	dmb	ish
 801b658:	07db      	lsls	r3, r3, #31
 801b65a:	d40b      	bmi.n	801b674 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b65c:	4620      	mov	r0, r4
 801b65e:	f004 ff48 	bl	80204f2 <__cxa_guard_acquire>
 801b662:	b138      	cbz	r0, 801b674 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b664:	4620      	mov	r0, r4
 801b666:	f004 ff50 	bl	802050a <__cxa_guard_release>
 801b66a:	4a06      	ldr	r2, [pc, #24]	; (801b684 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b66c:	4909      	ldr	r1, [pc, #36]	; (801b694 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801b66e:	480a      	ldr	r0, [pc, #40]	; (801b698 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b670:	f004 ff38 	bl	80204e4 <__aeabi_atexit>
 801b674:	4b05      	ldr	r3, [pc, #20]	; (801b68c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b676:	62ab      	str	r3, [r5, #40]	; 0x28
 801b678:	4b07      	ldr	r3, [pc, #28]	; (801b698 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b67a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b67c:	bd38      	pop	{r3, r4, r5, pc}
 801b67e:	bf00      	nop
 801b680:	2400c8e8 	.word	0x2400c8e8
 801b684:	24000000 	.word	0x24000000
 801b688:	08019f75 	.word	0x08019f75
 801b68c:	24000090 	.word	0x24000090
 801b690:	2400c8ec 	.word	0x2400c8ec
 801b694:	08019f73 	.word	0x08019f73
 801b698:	24000094 	.word	0x24000094

0801b69c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801b69c:	b510      	push	{r4, lr}
 801b69e:	4604      	mov	r4, r0
 801b6a0:	f7ff ff88 	bl	801b5b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801b6a4:	4620      	mov	r0, r4
 801b6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b6aa:	f7ff bfbd 	b.w	801b628 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801b6b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b6b0:	b538      	push	{r3, r4, r5, lr}
 801b6b2:	4c15      	ldr	r4, [pc, #84]	; (801b708 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b6b4:	4605      	mov	r5, r0
 801b6b6:	7823      	ldrb	r3, [r4, #0]
 801b6b8:	f3bf 8f5b 	dmb	ish
 801b6bc:	07da      	lsls	r2, r3, #31
 801b6be:	d40b      	bmi.n	801b6d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b6c0:	4620      	mov	r0, r4
 801b6c2:	f004 ff16 	bl	80204f2 <__cxa_guard_acquire>
 801b6c6:	b138      	cbz	r0, 801b6d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	f004 ff1e 	bl	802050a <__cxa_guard_release>
 801b6ce:	4a0f      	ldr	r2, [pc, #60]	; (801b70c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b6d0:	490f      	ldr	r1, [pc, #60]	; (801b710 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b6d2:	4810      	ldr	r0, [pc, #64]	; (801b714 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b6d4:	f004 ff06 	bl	80204e4 <__aeabi_atexit>
 801b6d8:	4c0f      	ldr	r4, [pc, #60]	; (801b718 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b6da:	7823      	ldrb	r3, [r4, #0]
 801b6dc:	f3bf 8f5b 	dmb	ish
 801b6e0:	07db      	lsls	r3, r3, #31
 801b6e2:	d40b      	bmi.n	801b6fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b6e4:	4620      	mov	r0, r4
 801b6e6:	f004 ff04 	bl	80204f2 <__cxa_guard_acquire>
 801b6ea:	b138      	cbz	r0, 801b6fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b6ec:	4620      	mov	r0, r4
 801b6ee:	f004 ff0c 	bl	802050a <__cxa_guard_release>
 801b6f2:	4a06      	ldr	r2, [pc, #24]	; (801b70c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b6f4:	4909      	ldr	r1, [pc, #36]	; (801b71c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b6f6:	480a      	ldr	r0, [pc, #40]	; (801b720 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b6f8:	f004 fef4 	bl	80204e4 <__aeabi_atexit>
 801b6fc:	4b05      	ldr	r3, [pc, #20]	; (801b714 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b6fe:	642b      	str	r3, [r5, #64]	; 0x40
 801b700:	4b07      	ldr	r3, [pc, #28]	; (801b720 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b702:	646b      	str	r3, [r5, #68]	; 0x44
 801b704:	bd38      	pop	{r3, r4, r5, pc}
 801b706:	bf00      	nop
 801b708:	2400c918 	.word	0x2400c918
 801b70c:	24000000 	.word	0x24000000
 801b710:	08019f69 	.word	0x08019f69
 801b714:	240000c0 	.word	0x240000c0
 801b718:	2400c91c 	.word	0x2400c91c
 801b71c:	08019f67 	.word	0x08019f67
 801b720:	240000c4 	.word	0x240000c4

0801b724 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b724:	b538      	push	{r3, r4, r5, lr}
 801b726:	4c15      	ldr	r4, [pc, #84]	; (801b77c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b728:	4605      	mov	r5, r0
 801b72a:	7823      	ldrb	r3, [r4, #0]
 801b72c:	f3bf 8f5b 	dmb	ish
 801b730:	07da      	lsls	r2, r3, #31
 801b732:	d40b      	bmi.n	801b74c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b734:	4620      	mov	r0, r4
 801b736:	f004 fedc 	bl	80204f2 <__cxa_guard_acquire>
 801b73a:	b138      	cbz	r0, 801b74c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b73c:	4620      	mov	r0, r4
 801b73e:	f004 fee4 	bl	802050a <__cxa_guard_release>
 801b742:	4a0f      	ldr	r2, [pc, #60]	; (801b780 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b744:	490f      	ldr	r1, [pc, #60]	; (801b784 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b746:	4810      	ldr	r0, [pc, #64]	; (801b788 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b748:	f004 fecc 	bl	80204e4 <__aeabi_atexit>
 801b74c:	4c0f      	ldr	r4, [pc, #60]	; (801b78c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b74e:	7823      	ldrb	r3, [r4, #0]
 801b750:	f3bf 8f5b 	dmb	ish
 801b754:	07db      	lsls	r3, r3, #31
 801b756:	d40b      	bmi.n	801b770 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b758:	4620      	mov	r0, r4
 801b75a:	f004 feca 	bl	80204f2 <__cxa_guard_acquire>
 801b75e:	b138      	cbz	r0, 801b770 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b760:	4620      	mov	r0, r4
 801b762:	f004 fed2 	bl	802050a <__cxa_guard_release>
 801b766:	4a06      	ldr	r2, [pc, #24]	; (801b780 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b768:	4909      	ldr	r1, [pc, #36]	; (801b790 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b76a:	480a      	ldr	r0, [pc, #40]	; (801b794 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b76c:	f004 feba 	bl	80204e4 <__aeabi_atexit>
 801b770:	4b05      	ldr	r3, [pc, #20]	; (801b788 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b772:	63ab      	str	r3, [r5, #56]	; 0x38
 801b774:	4b07      	ldr	r3, [pc, #28]	; (801b794 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b776:	63eb      	str	r3, [r5, #60]	; 0x3c
 801b778:	bd38      	pop	{r3, r4, r5, pc}
 801b77a:	bf00      	nop
 801b77c:	2400c8f8 	.word	0x2400c8f8
 801b780:	24000000 	.word	0x24000000
 801b784:	08019f6d 	.word	0x08019f6d
 801b788:	240000a0 	.word	0x240000a0
 801b78c:	2400c8fc 	.word	0x2400c8fc
 801b790:	08019f6b 	.word	0x08019f6b
 801b794:	240000a4 	.word	0x240000a4

0801b798 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801b798:	b510      	push	{r4, lr}
 801b79a:	4604      	mov	r4, r0
 801b79c:	f7ff ff88 	bl	801b6b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7a6:	f7ff bfbd 	b.w	801b724 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b7ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b7ac:	b538      	push	{r3, r4, r5, lr}
 801b7ae:	4c15      	ldr	r4, [pc, #84]	; (801b804 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b7b0:	4605      	mov	r5, r0
 801b7b2:	7823      	ldrb	r3, [r4, #0]
 801b7b4:	f3bf 8f5b 	dmb	ish
 801b7b8:	07da      	lsls	r2, r3, #31
 801b7ba:	d40b      	bmi.n	801b7d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b7bc:	4620      	mov	r0, r4
 801b7be:	f004 fe98 	bl	80204f2 <__cxa_guard_acquire>
 801b7c2:	b138      	cbz	r0, 801b7d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b7c4:	4620      	mov	r0, r4
 801b7c6:	f004 fea0 	bl	802050a <__cxa_guard_release>
 801b7ca:	4a0f      	ldr	r2, [pc, #60]	; (801b808 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b7cc:	490f      	ldr	r1, [pc, #60]	; (801b80c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b7ce:	4810      	ldr	r0, [pc, #64]	; (801b810 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b7d0:	f004 fe88 	bl	80204e4 <__aeabi_atexit>
 801b7d4:	4c0f      	ldr	r4, [pc, #60]	; (801b814 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b7d6:	7823      	ldrb	r3, [r4, #0]
 801b7d8:	f3bf 8f5b 	dmb	ish
 801b7dc:	07db      	lsls	r3, r3, #31
 801b7de:	d40b      	bmi.n	801b7f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	f004 fe86 	bl	80204f2 <__cxa_guard_acquire>
 801b7e6:	b138      	cbz	r0, 801b7f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b7e8:	4620      	mov	r0, r4
 801b7ea:	f004 fe8e 	bl	802050a <__cxa_guard_release>
 801b7ee:	4a06      	ldr	r2, [pc, #24]	; (801b808 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b7f0:	4909      	ldr	r1, [pc, #36]	; (801b818 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b7f2:	480a      	ldr	r0, [pc, #40]	; (801b81c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b7f4:	f004 fe76 	bl	80204e4 <__aeabi_atexit>
 801b7f8:	4b05      	ldr	r3, [pc, #20]	; (801b810 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b7fa:	652b      	str	r3, [r5, #80]	; 0x50
 801b7fc:	4b07      	ldr	r3, [pc, #28]	; (801b81c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b7fe:	656b      	str	r3, [r5, #84]	; 0x54
 801b800:	bd38      	pop	{r3, r4, r5, pc}
 801b802:	bf00      	nop
 801b804:	2400c8f0 	.word	0x2400c8f0
 801b808:	24000000 	.word	0x24000000
 801b80c:	08019f61 	.word	0x08019f61
 801b810:	24000098 	.word	0x24000098
 801b814:	2400c8f4 	.word	0x2400c8f4
 801b818:	08019f5f 	.word	0x08019f5f
 801b81c:	2400009c 	.word	0x2400009c

0801b820 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b820:	b538      	push	{r3, r4, r5, lr}
 801b822:	4c15      	ldr	r4, [pc, #84]	; (801b878 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b824:	4605      	mov	r5, r0
 801b826:	7823      	ldrb	r3, [r4, #0]
 801b828:	f3bf 8f5b 	dmb	ish
 801b82c:	07da      	lsls	r2, r3, #31
 801b82e:	d40b      	bmi.n	801b848 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b830:	4620      	mov	r0, r4
 801b832:	f004 fe5e 	bl	80204f2 <__cxa_guard_acquire>
 801b836:	b138      	cbz	r0, 801b848 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b838:	4620      	mov	r0, r4
 801b83a:	f004 fe66 	bl	802050a <__cxa_guard_release>
 801b83e:	4a0f      	ldr	r2, [pc, #60]	; (801b87c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b840:	490f      	ldr	r1, [pc, #60]	; (801b880 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b842:	4810      	ldr	r0, [pc, #64]	; (801b884 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b844:	f004 fe4e 	bl	80204e4 <__aeabi_atexit>
 801b848:	4c0f      	ldr	r4, [pc, #60]	; (801b888 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b84a:	7823      	ldrb	r3, [r4, #0]
 801b84c:	f3bf 8f5b 	dmb	ish
 801b850:	07db      	lsls	r3, r3, #31
 801b852:	d40b      	bmi.n	801b86c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b854:	4620      	mov	r0, r4
 801b856:	f004 fe4c 	bl	80204f2 <__cxa_guard_acquire>
 801b85a:	b138      	cbz	r0, 801b86c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b85c:	4620      	mov	r0, r4
 801b85e:	f004 fe54 	bl	802050a <__cxa_guard_release>
 801b862:	4a06      	ldr	r2, [pc, #24]	; (801b87c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b864:	4909      	ldr	r1, [pc, #36]	; (801b88c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b866:	480a      	ldr	r0, [pc, #40]	; (801b890 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b868:	f004 fe3c 	bl	80204e4 <__aeabi_atexit>
 801b86c:	4b05      	ldr	r3, [pc, #20]	; (801b884 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b86e:	64ab      	str	r3, [r5, #72]	; 0x48
 801b870:	4b07      	ldr	r3, [pc, #28]	; (801b890 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b872:	64eb      	str	r3, [r5, #76]	; 0x4c
 801b874:	bd38      	pop	{r3, r4, r5, pc}
 801b876:	bf00      	nop
 801b878:	2400c8e0 	.word	0x2400c8e0
 801b87c:	24000000 	.word	0x24000000
 801b880:	08019f65 	.word	0x08019f65
 801b884:	24000088 	.word	0x24000088
 801b888:	2400c8e4 	.word	0x2400c8e4
 801b88c:	08019f63 	.word	0x08019f63
 801b890:	2400008c 	.word	0x2400008c

0801b894 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801b894:	b510      	push	{r4, lr}
 801b896:	4604      	mov	r4, r0
 801b898:	f7ff ff88 	bl	801b7ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b89c:	4620      	mov	r0, r4
 801b89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8a2:	f7ff bfbd 	b.w	801b820 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801b8a6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801b8a6:	b510      	push	{r4, lr}
 801b8a8:	4604      	mov	r4, r0
 801b8aa:	f7ff fff3 	bl	801b894 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	f7ff ff72 	bl	801b798 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801b8b4:	4620      	mov	r0, r4
 801b8b6:	f7ff fe73 	bl	801b5a0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801b8ba:	4620      	mov	r0, r4
 801b8bc:	f7ff fdf2 	bl	801b4a4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8c6:	f7ff bee9 	b.w	801b69c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801b8ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801b8ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ce:	b087      	sub	sp, #28
 801b8d0:	788d      	ldrb	r5, [r1, #2]
 801b8d2:	f891 9000 	ldrb.w	r9, [r1]
 801b8d6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b8da:	9501      	str	r5, [sp, #4]
 801b8dc:	784d      	ldrb	r5, [r1, #1]
 801b8de:	9203      	str	r2, [sp, #12]
 801b8e0:	9502      	str	r5, [sp, #8]
 801b8e2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801b8e6:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801b8ea:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801b8ee:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801b8f2:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801b8f6:	fb06 0708 	mla	r7, r6, r8, r0
 801b8fa:	2e00      	cmp	r6, #0
 801b8fc:	eb02 0a07 	add.w	sl, r2, r7
 801b900:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801b904:	9d01      	ldr	r5, [sp, #4]
 801b906:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801b90a:	ea45 0509 	orr.w	r5, r5, r9
 801b90e:	9505      	str	r5, [sp, #20]
 801b910:	f2c0 80b2 	blt.w	801ba78 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b914:	45b3      	cmp	fp, r6
 801b916:	f340 80af 	ble.w	801ba78 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b91a:	2800      	cmp	r0, #0
 801b91c:	f2c0 80aa 	blt.w	801ba74 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b920:	4580      	cmp	r8, r0
 801b922:	f340 80a7 	ble.w	801ba74 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b926:	9a03      	ldr	r2, [sp, #12]
 801b928:	5dd7      	ldrb	r7, [r2, r7]
 801b92a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b92e:	441f      	add	r7, r3
 801b930:	1c42      	adds	r2, r0, #1
 801b932:	f100 80a4 	bmi.w	801ba7e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b936:	4590      	cmp	r8, r2
 801b938:	f340 80a1 	ble.w	801ba7e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b93c:	2c00      	cmp	r4, #0
 801b93e:	f000 809e 	beq.w	801ba7e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b942:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b946:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b94a:	441d      	add	r5, r3
 801b94c:	3601      	adds	r6, #1
 801b94e:	f100 809a 	bmi.w	801ba86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b952:	45b3      	cmp	fp, r6
 801b954:	f340 8097 	ble.w	801ba86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b958:	f1bc 0f00 	cmp.w	ip, #0
 801b95c:	f000 8093 	beq.w	801ba86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b960:	2800      	cmp	r0, #0
 801b962:	f2c0 808e 	blt.w	801ba82 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b966:	4580      	cmp	r8, r0
 801b968:	f340 808b 	ble.w	801ba82 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b96c:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801b970:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b974:	441e      	add	r6, r3
 801b976:	3001      	adds	r0, #1
 801b978:	f100 8088 	bmi.w	801ba8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b97c:	4580      	cmp	r8, r0
 801b97e:	f340 8085 	ble.w	801ba8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b982:	2c00      	cmp	r4, #0
 801b984:	f000 8082 	beq.w	801ba8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b988:	44d0      	add	r8, sl
 801b98a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b98e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b992:	4413      	add	r3, r2
 801b994:	b2a4      	uxth	r4, r4
 801b996:	f895 a000 	ldrb.w	sl, [r5]
 801b99a:	fa1f fc8c 	uxth.w	ip, ip
 801b99e:	fb04 fb0c 	mul.w	fp, r4, ip
 801b9a2:	0124      	lsls	r4, r4, #4
 801b9a4:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801b9a8:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801b9ac:	eba4 040b 	sub.w	r4, r4, fp
 801b9b0:	fa1f f08c 	uxth.w	r0, ip
 801b9b4:	b2a2      	uxth	r2, r4
 801b9b6:	783c      	ldrb	r4, [r7, #0]
 801b9b8:	eba8 0800 	sub.w	r8, r8, r0
 801b9bc:	fa1f fc8e 	uxth.w	ip, lr
 801b9c0:	fb02 fa0a 	mul.w	sl, r2, sl
 801b9c4:	ea6f 0e0e 	mvn.w	lr, lr
 801b9c8:	fa1f f888 	uxth.w	r8, r8
 801b9cc:	fa5f fe8e 	uxtb.w	lr, lr
 801b9d0:	fb08 aa04 	mla	sl, r8, r4, sl
 801b9d4:	7834      	ldrb	r4, [r6, #0]
 801b9d6:	fb19 f90e 	smulbb	r9, r9, lr
 801b9da:	fb00 aa04 	mla	sl, r0, r4, sl
 801b9de:	781c      	ldrb	r4, [r3, #0]
 801b9e0:	fb0b a404 	mla	r4, fp, r4, sl
 801b9e4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b9e8:	fb04 990c 	mla	r9, r4, ip, r9
 801b9ec:	fa1f f989 	uxth.w	r9, r9
 801b9f0:	f109 0401 	add.w	r4, r9, #1
 801b9f4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801b9f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b9fc:	f881 9000 	strb.w	r9, [r1]
 801ba00:	f895 9001 	ldrb.w	r9, [r5, #1]
 801ba04:	787c      	ldrb	r4, [r7, #1]
 801ba06:	fb02 f909 	mul.w	r9, r2, r9
 801ba0a:	fb08 9904 	mla	r9, r8, r4, r9
 801ba0e:	7874      	ldrb	r4, [r6, #1]
 801ba10:	fb00 9904 	mla	r9, r0, r4, r9
 801ba14:	785c      	ldrb	r4, [r3, #1]
 801ba16:	fb0b 9404 	mla	r4, fp, r4, r9
 801ba1a:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801ba1e:	9c02      	ldr	r4, [sp, #8]
 801ba20:	fb14 f90e 	smulbb	r9, r4, lr
 801ba24:	fb0a 940c 	mla	r4, sl, ip, r9
 801ba28:	b2a4      	uxth	r4, r4
 801ba2a:	f104 0901 	add.w	r9, r4, #1
 801ba2e:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801ba32:	1224      	asrs	r4, r4, #8
 801ba34:	704c      	strb	r4, [r1, #1]
 801ba36:	78ad      	ldrb	r5, [r5, #2]
 801ba38:	78bc      	ldrb	r4, [r7, #2]
 801ba3a:	436a      	muls	r2, r5
 801ba3c:	789b      	ldrb	r3, [r3, #2]
 801ba3e:	fb08 2204 	mla	r2, r8, r4, r2
 801ba42:	78b4      	ldrb	r4, [r6, #2]
 801ba44:	fb00 2004 	mla	r0, r0, r4, r2
 801ba48:	fb0b 0b03 	mla	fp, fp, r3, r0
 801ba4c:	9b01      	ldr	r3, [sp, #4]
 801ba4e:	fb13 fe0e 	smulbb	lr, r3, lr
 801ba52:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801ba56:	fb0b ec0c 	mla	ip, fp, ip, lr
 801ba5a:	fa1f fc8c 	uxth.w	ip, ip
 801ba5e:	f10c 0e01 	add.w	lr, ip, #1
 801ba62:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ba66:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ba6a:	f881 c002 	strb.w	ip, [r1, #2]
 801ba6e:	b007      	add	sp, #28
 801ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba74:	af05      	add	r7, sp, #20
 801ba76:	e75b      	b.n	801b930 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801ba78:	ad05      	add	r5, sp, #20
 801ba7a:	462f      	mov	r7, r5
 801ba7c:	e766      	b.n	801b94c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ba7e:	ad05      	add	r5, sp, #20
 801ba80:	e764      	b.n	801b94c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ba82:	ae05      	add	r6, sp, #20
 801ba84:	e777      	b.n	801b976 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801ba86:	ab05      	add	r3, sp, #20
 801ba88:	461e      	mov	r6, r3
 801ba8a:	e783      	b.n	801b994 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801ba8c:	ab05      	add	r3, sp, #20
 801ba8e:	e781      	b.n	801b994 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801ba90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba94:	b093      	sub	sp, #76	; 0x4c
 801ba96:	9210      	str	r2, [sp, #64]	; 0x40
 801ba98:	9309      	str	r3, [sp, #36]	; 0x24
 801ba9a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ba9c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801baa0:	9011      	str	r0, [sp, #68]	; 0x44
 801baa2:	930e      	str	r3, [sp, #56]	; 0x38
 801baa4:	6850      	ldr	r0, [r2, #4]
 801baa6:	910d      	str	r1, [sp, #52]	; 0x34
 801baa8:	6812      	ldr	r2, [r2, #0]
 801baaa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801baae:	fb00 1303 	mla	r3, r0, r3, r1
 801bab2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bab6:	18d3      	adds	r3, r2, r3
 801bab8:	930a      	str	r3, [sp, #40]	; 0x28
 801baba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	930c      	str	r3, [sp, #48]	; 0x30
 801bac0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bac2:	685c      	ldr	r4, [r3, #4]
 801bac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bac6:	3404      	adds	r4, #4
 801bac8:	43db      	mvns	r3, r3
 801baca:	b2db      	uxtb	r3, r3
 801bacc:	930b      	str	r3, [sp, #44]	; 0x2c
 801bace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	dc03      	bgt.n	801badc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801bad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	f340 8250 	ble.w	801bf7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801badc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bade:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bae2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bae6:	1e48      	subs	r0, r1, #1
 801bae8:	1e55      	subs	r5, r2, #1
 801baea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801baec:	2b00      	cmp	r3, #0
 801baee:	f340 80ee 	ble.w	801bcce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801baf2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801baf4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801baf6:	1436      	asrs	r6, r6, #16
 801baf8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bafc:	d406      	bmi.n	801bb0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bafe:	4286      	cmp	r6, r0
 801bb00:	da04      	bge.n	801bb0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	db02      	blt.n	801bb0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb06:	42ab      	cmp	r3, r5
 801bb08:	f2c0 80e2 	blt.w	801bcd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801bb0c:	3601      	adds	r6, #1
 801bb0e:	f100 80cf 	bmi.w	801bcb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801bb12:	42b1      	cmp	r1, r6
 801bb14:	f2c0 80cc 	blt.w	801bcb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801bb18:	3301      	adds	r3, #1
 801bb1a:	f100 80c9 	bmi.w	801bcb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801bb1e:	429a      	cmp	r2, r3
 801bb20:	f2c0 80c6 	blt.w	801bcb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801bb24:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801bb28:	f1bb 0f00 	cmp.w	fp, #0
 801bb2c:	f340 80f1 	ble.w	801bd12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801bb30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bb32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bb34:	9824      	ldr	r0, [sp, #144]	; 0x90
 801bb36:	141d      	asrs	r5, r3, #16
 801bb38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb3a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bb3e:	68c7      	ldr	r7, [r0, #12]
 801bb40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801bb42:	1418      	asrs	r0, r3, #16
 801bb44:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801bb48:	6892      	ldr	r2, [r2, #8]
 801bb4a:	f100 8137 	bmi.w	801bdbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801bb4e:	f102 3cff 	add.w	ip, r2, #4294967295
 801bb52:	4560      	cmp	r0, ip
 801bb54:	f280 8132 	bge.w	801bdbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801bb58:	2d00      	cmp	r5, #0
 801bb5a:	f2c0 812f 	blt.w	801bdbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801bb5e:	f107 3cff 	add.w	ip, r7, #4294967295
 801bb62:	4565      	cmp	r5, ip
 801bb64:	f280 812a 	bge.w	801bdbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801bb68:	b212      	sxth	r2, r2
 801bb6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bb6c:	fb05 0002 	mla	r0, r5, r2, r0
 801bb70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bb72:	f817 c000 	ldrb.w	ip, [r7, r0]
 801bb76:	4405      	add	r5, r0
 801bb78:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bb7c:	eb04 0e0c 	add.w	lr, r4, ip
 801bb80:	f1b8 0f00 	cmp.w	r8, #0
 801bb84:	f000 810c 	beq.w	801bda0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801bb88:	786f      	ldrb	r7, [r5, #1]
 801bb8a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bb8e:	4427      	add	r7, r4
 801bb90:	2900      	cmp	r1, #0
 801bb92:	f000 810d 	beq.w	801bdb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801bb96:	18a8      	adds	r0, r5, r2
 801bb98:	5caa      	ldrb	r2, [r5, r2]
 801bb9a:	7840      	ldrb	r0, [r0, #1]
 801bb9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bba4:	4422      	add	r2, r4
 801bba6:	4420      	add	r0, r4
 801bba8:	fa1f f388 	uxth.w	r3, r8
 801bbac:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801bbb0:	b289      	uxth	r1, r1
 801bbb2:	f897 c000 	ldrb.w	ip, [r7]
 801bbb6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801bbba:	fb03 f901 	mul.w	r9, r3, r1
 801bbbe:	011b      	lsls	r3, r3, #4
 801bbc0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801bbc4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801bbc8:	eba3 0309 	sub.w	r3, r3, r9
 801bbcc:	b289      	uxth	r1, r1
 801bbce:	b29b      	uxth	r3, r3
 801bbd0:	eba8 0801 	sub.w	r8, r8, r1
 801bbd4:	fb03 fc0c 	mul.w	ip, r3, ip
 801bbd8:	fa1f f888 	uxth.w	r8, r8
 801bbdc:	930f      	str	r3, [sp, #60]	; 0x3c
 801bbde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bbe0:	fb08 cc0a 	mla	ip, r8, sl, ip
 801bbe4:	f892 a000 	ldrb.w	sl, [r2]
 801bbe8:	fb01 cc0a 	mla	ip, r1, sl, ip
 801bbec:	f890 a000 	ldrb.w	sl, [r0]
 801bbf0:	fb09 cc0a 	mla	ip, r9, sl, ip
 801bbf4:	f896 a000 	ldrb.w	sl, [r6]
 801bbf8:	fb1a fa03 	smulbb	sl, sl, r3
 801bbfc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801bc00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc02:	fb0c ac05 	mla	ip, ip, r5, sl
 801bc06:	fa1f fc8c 	uxth.w	ip, ip
 801bc0a:	f10c 0a01 	add.w	sl, ip, #1
 801bc0e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801bc12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bc16:	f886 a000 	strb.w	sl, [r6]
 801bc1a:	f897 c001 	ldrb.w	ip, [r7, #1]
 801bc1e:	f89e a001 	ldrb.w	sl, [lr, #1]
 801bc22:	fb03 fc0c 	mul.w	ip, r3, ip
 801bc26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc28:	fb08 cc0a 	mla	ip, r8, sl, ip
 801bc2c:	f892 a001 	ldrb.w	sl, [r2, #1]
 801bc30:	fb01 cc0a 	mla	ip, r1, sl, ip
 801bc34:	f890 a001 	ldrb.w	sl, [r0, #1]
 801bc38:	fb09 cc0a 	mla	ip, r9, sl, ip
 801bc3c:	f896 a001 	ldrb.w	sl, [r6, #1]
 801bc40:	fb1a fa03 	smulbb	sl, sl, r3
 801bc44:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801bc48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc4a:	fb0c ac05 	mla	ip, ip, r5, sl
 801bc4e:	fa1f fc8c 	uxth.w	ip, ip
 801bc52:	f10c 0a01 	add.w	sl, ip, #1
 801bc56:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801bc5a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bc5e:	f886 c001 	strb.w	ip, [r6, #1]
 801bc62:	78bf      	ldrb	r7, [r7, #2]
 801bc64:	f89e c002 	ldrb.w	ip, [lr, #2]
 801bc68:	437b      	muls	r3, r7
 801bc6a:	fb08 330c 	mla	r3, r8, ip, r3
 801bc6e:	f892 c002 	ldrb.w	ip, [r2, #2]
 801bc72:	7882      	ldrb	r2, [r0, #2]
 801bc74:	fb01 310c 	mla	r1, r1, ip, r3
 801bc78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc7a:	fb09 1902 	mla	r9, r9, r2, r1
 801bc7e:	78b1      	ldrb	r1, [r6, #2]
 801bc80:	fb11 f103 	smulbb	r1, r1, r3
 801bc84:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801bc88:	fb09 1505 	mla	r5, r9, r5, r1
 801bc8c:	b2ad      	uxth	r5, r5
 801bc8e:	1c6b      	adds	r3, r5, #1
 801bc90:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801bc94:	122d      	asrs	r5, r5, #8
 801bc96:	70b5      	strb	r5, [r6, #2]
 801bc98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc9a:	3603      	adds	r6, #3
 801bc9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801bc9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bca2:	4413      	add	r3, r2
 801bca4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bca6:	931d      	str	r3, [sp, #116]	; 0x74
 801bca8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bcaa:	4413      	add	r3, r2
 801bcac:	931e      	str	r3, [sp, #120]	; 0x78
 801bcae:	e73b      	b.n	801bb28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bcb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bcb2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801bcb4:	4433      	add	r3, r6
 801bcb6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801bcb8:	931d      	str	r3, [sp, #116]	; 0x74
 801bcba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bcbc:	4433      	add	r3, r6
 801bcbe:	931e      	str	r3, [sp, #120]	; 0x78
 801bcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcc2:	3b01      	subs	r3, #1
 801bcc4:	9309      	str	r3, [sp, #36]	; 0x24
 801bcc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcc8:	3303      	adds	r3, #3
 801bcca:	930a      	str	r3, [sp, #40]	; 0x28
 801bccc:	e70d      	b.n	801baea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801bcce:	d028      	beq.n	801bd22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801bcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcd2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801bcd4:	3b01      	subs	r3, #1
 801bcd6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801bcd8:	fb00 5003 	mla	r0, r0, r3, r5
 801bcdc:	1400      	asrs	r0, r0, #16
 801bcde:	f53f af21 	bmi.w	801bb24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bce2:	3901      	subs	r1, #1
 801bce4:	4288      	cmp	r0, r1
 801bce6:	f6bf af1d 	bge.w	801bb24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bcea:	9920      	ldr	r1, [sp, #128]	; 0x80
 801bcec:	981e      	ldr	r0, [sp, #120]	; 0x78
 801bcee:	fb01 0303 	mla	r3, r1, r3, r0
 801bcf2:	141b      	asrs	r3, r3, #16
 801bcf4:	f53f af16 	bmi.w	801bb24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bcf8:	3a01      	subs	r2, #1
 801bcfa:	4293      	cmp	r3, r2
 801bcfc:	f6bf af12 	bge.w	801bb24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bd00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd02:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bd06:	1cdf      	adds	r7, r3, #3
 801bd08:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801bd0c:	f1b9 0f00 	cmp.w	r9, #0
 801bd10:	dc73      	bgt.n	801bdfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801bd12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bd16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd1e:	441a      	add	r2, r3
 801bd20:	920a      	str	r2, [sp, #40]	; 0x28
 801bd22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	f340 8129 	ble.w	801bf7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801bd2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bd2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bd30:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd38:	eef0 6a62 	vmov.f32	s13, s5
 801bd3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bd40:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd48:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801bd4c:	eef0 6a43 	vmov.f32	s13, s6
 801bd50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd54:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801bd58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd60:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd70:	ee12 2a90 	vmov	r2, s5
 801bd74:	eef0 2a47 	vmov.f32	s5, s14
 801bd78:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd7c:	ee13 2a10 	vmov	r2, s6
 801bd80:	931f      	str	r3, [sp, #124]	; 0x7c
 801bd82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bd84:	eeb0 3a67 	vmov.f32	s6, s15
 801bd88:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd8c:	9320      	str	r3, [sp, #128]	; 0x80
 801bd8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bd92:	3b01      	subs	r3, #1
 801bd94:	930d      	str	r3, [sp, #52]	; 0x34
 801bd96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bd98:	bf08      	it	eq
 801bd9a:	4613      	moveq	r3, r2
 801bd9c:	9309      	str	r3, [sp, #36]	; 0x24
 801bd9e:	e696      	b.n	801bace <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bda0:	b149      	cbz	r1, 801bdb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801bda2:	5caa      	ldrb	r2, [r5, r2]
 801bda4:	4670      	mov	r0, lr
 801bda6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bdaa:	4422      	add	r2, r4
 801bdac:	4677      	mov	r7, lr
 801bdae:	e6fb      	b.n	801bba8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801bdb0:	4670      	mov	r0, lr
 801bdb2:	4672      	mov	r2, lr
 801bdb4:	e6f8      	b.n	801bba8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801bdb6:	4670      	mov	r0, lr
 801bdb8:	4672      	mov	r2, lr
 801bdba:	e7f7      	b.n	801bdac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801bdbc:	f110 0c01 	adds.w	ip, r0, #1
 801bdc0:	f53f af6a 	bmi.w	801bc98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bdc4:	4562      	cmp	r2, ip
 801bdc6:	f6ff af67 	blt.w	801bc98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bdca:	f115 0c01 	adds.w	ip, r5, #1
 801bdce:	f53f af63 	bmi.w	801bc98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bdd2:	4567      	cmp	r7, ip
 801bdd4:	f6ff af60 	blt.w	801bc98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bdd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdda:	b23f      	sxth	r7, r7
 801bddc:	b212      	sxth	r2, r2
 801bdde:	9002      	str	r0, [sp, #8]
 801bde0:	9701      	str	r7, [sp, #4]
 801bde2:	9200      	str	r2, [sp, #0]
 801bde4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bde6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bde8:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801bdec:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801bdf0:	4623      	mov	r3, r4
 801bdf2:	4631      	mov	r1, r6
 801bdf4:	f7ff fd69 	bl	801b8ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801bdf8:	e74e      	b.n	801bc98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bdfa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bdfc:	981e      	ldr	r0, [sp, #120]	; 0x78
 801bdfe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801be02:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801be04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801be06:	1400      	asrs	r0, r0, #16
 801be08:	142d      	asrs	r5, r5, #16
 801be0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801be0c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801be10:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801be14:	fb02 5000 	mla	r0, r2, r0, r5
 801be18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801be1a:	f815 e000 	ldrb.w	lr, [r5, r0]
 801be1e:	eb05 0c00 	add.w	ip, r5, r0
 801be22:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801be26:	eb04 060e 	add.w	r6, r4, lr
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	f000 8097 	beq.w	801bf5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801be30:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801be34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be38:	4425      	add	r5, r4
 801be3a:	2900      	cmp	r1, #0
 801be3c:	f000 8098 	beq.w	801bf70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801be40:	eb0c 0002 	add.w	r0, ip, r2
 801be44:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801be48:	7840      	ldrb	r0, [r0, #1]
 801be4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801be4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801be52:	4422      	add	r2, r4
 801be54:	4420      	add	r0, r4
 801be56:	b29b      	uxth	r3, r3
 801be58:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801be5c:	b289      	uxth	r1, r1
 801be5e:	f895 e000 	ldrb.w	lr, [r5]
 801be62:	3703      	adds	r7, #3
 801be64:	f109 39ff 	add.w	r9, r9, #4294967295
 801be68:	fb03 f801 	mul.w	r8, r3, r1
 801be6c:	011b      	lsls	r3, r3, #4
 801be6e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801be72:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801be76:	eba3 0308 	sub.w	r3, r3, r8
 801be7a:	b289      	uxth	r1, r1
 801be7c:	b29b      	uxth	r3, r3
 801be7e:	ebac 0c01 	sub.w	ip, ip, r1
 801be82:	fb03 fe0e 	mul.w	lr, r3, lr
 801be86:	fa1f fc8c 	uxth.w	ip, ip
 801be8a:	930f      	str	r3, [sp, #60]	; 0x3c
 801be8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be8e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801be92:	f892 b000 	ldrb.w	fp, [r2]
 801be96:	fb01 ee0b 	mla	lr, r1, fp, lr
 801be9a:	f890 b000 	ldrb.w	fp, [r0]
 801be9e:	fb08 ee0b 	mla	lr, r8, fp, lr
 801bea2:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801bea6:	fb1b fb03 	smulbb	fp, fp, r3
 801beaa:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801beae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801beb0:	fb0e be0a 	mla	lr, lr, sl, fp
 801beb4:	fa1f fe8e 	uxth.w	lr, lr
 801beb8:	f10e 0b01 	add.w	fp, lr, #1
 801bebc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bec0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bec4:	f807 ec06 	strb.w	lr, [r7, #-6]
 801bec8:	f895 e001 	ldrb.w	lr, [r5, #1]
 801becc:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bed0:	fb03 fe0e 	mul.w	lr, r3, lr
 801bed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bed6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801beda:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bede:	fb01 ee0b 	mla	lr, r1, fp, lr
 801bee2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bee6:	fb08 ee0b 	mla	lr, r8, fp, lr
 801beea:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801beee:	fb1b fb03 	smulbb	fp, fp, r3
 801bef2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801bef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bef8:	fb0e be0a 	mla	lr, lr, sl, fp
 801befc:	fa1f fe8e 	uxth.w	lr, lr
 801bf00:	f10e 0b01 	add.w	fp, lr, #1
 801bf04:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bf08:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf0c:	f807 ec05 	strb.w	lr, [r7, #-5]
 801bf10:	78ad      	ldrb	r5, [r5, #2]
 801bf12:	78b6      	ldrb	r6, [r6, #2]
 801bf14:	436b      	muls	r3, r5
 801bf16:	7895      	ldrb	r5, [r2, #2]
 801bf18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bf1a:	fb0c 3306 	mla	r3, ip, r6, r3
 801bf1e:	fb01 3305 	mla	r3, r1, r5, r3
 801bf22:	7885      	ldrb	r5, [r0, #2]
 801bf24:	fb08 3805 	mla	r8, r8, r5, r3
 801bf28:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801bf2c:	fb13 f302 	smulbb	r3, r3, r2
 801bf30:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801bf34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801bf36:	fb08 380a 	mla	r8, r8, sl, r3
 801bf3a:	fa1f f888 	uxth.w	r8, r8
 801bf3e:	f108 0301 	add.w	r3, r8, #1
 801bf42:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801bf46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bf48:	4413      	add	r3, r2
 801bf4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bf4c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bf50:	931d      	str	r3, [sp, #116]	; 0x74
 801bf52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bf54:	f807 8c04 	strb.w	r8, [r7, #-4]
 801bf58:	4413      	add	r3, r2
 801bf5a:	931e      	str	r3, [sp, #120]	; 0x78
 801bf5c:	e6d6      	b.n	801bd0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bf5e:	b151      	cbz	r1, 801bf76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801bf60:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bf64:	4630      	mov	r0, r6
 801bf66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bf6a:	4422      	add	r2, r4
 801bf6c:	4635      	mov	r5, r6
 801bf6e:	e772      	b.n	801be56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bf70:	4630      	mov	r0, r6
 801bf72:	4632      	mov	r2, r6
 801bf74:	e76f      	b.n	801be56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bf76:	4630      	mov	r0, r6
 801bf78:	4632      	mov	r2, r6
 801bf7a:	e7f7      	b.n	801bf6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801bf7c:	b013      	add	sp, #76	; 0x4c
 801bf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf82 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801bf82:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801bf86:	784c      	ldrb	r4, [r1, #1]
 801bf88:	f891 a002 	ldrb.w	sl, [r1, #2]
 801bf8c:	0224      	lsls	r4, r4, #8
 801bf8e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801bf92:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801bf96:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801bf9a:	f891 a000 	ldrb.w	sl, [r1]
 801bf9e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801bfa2:	ea44 040a 	orr.w	r4, r4, sl
 801bfa6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801bfaa:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801bfae:	9401      	str	r4, [sp, #4]
 801bfb0:	fb05 c70e 	mla	r7, r5, lr, ip
 801bfb4:	2d00      	cmp	r5, #0
 801bfb6:	eb02 0807 	add.w	r8, r2, r7
 801bfba:	db72      	blt.n	801c0a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801bfbc:	45a9      	cmp	r9, r5
 801bfbe:	dd70      	ble.n	801c0a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801bfc0:	f1bc 0f00 	cmp.w	ip, #0
 801bfc4:	db6b      	blt.n	801c09e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801bfc6:	45e6      	cmp	lr, ip
 801bfc8:	dd69      	ble.n	801c09e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801bfca:	5dd7      	ldrb	r7, [r2, r7]
 801bfcc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bfd0:	441f      	add	r7, r3
 801bfd2:	f11c 0201 	adds.w	r2, ip, #1
 801bfd6:	d467      	bmi.n	801c0a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bfd8:	4596      	cmp	lr, r2
 801bfda:	dd65      	ble.n	801c0a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bfdc:	2800      	cmp	r0, #0
 801bfde:	d063      	beq.n	801c0a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bfe0:	f898 4001 	ldrb.w	r4, [r8, #1]
 801bfe4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bfe8:	441c      	add	r4, r3
 801bfea:	3501      	adds	r5, #1
 801bfec:	d460      	bmi.n	801c0b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bfee:	45a9      	cmp	r9, r5
 801bff0:	dd5e      	ble.n	801c0b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bff2:	2e00      	cmp	r6, #0
 801bff4:	d05c      	beq.n	801c0b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bff6:	f1bc 0f00 	cmp.w	ip, #0
 801bffa:	db57      	blt.n	801c0ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801bffc:	45e6      	cmp	lr, ip
 801bffe:	dd55      	ble.n	801c0ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c000:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c008:	441d      	add	r5, r3
 801c00a:	f11c 0201 	adds.w	r2, ip, #1
 801c00e:	d452      	bmi.n	801c0b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c010:	4596      	cmp	lr, r2
 801c012:	dd50      	ble.n	801c0b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c014:	2800      	cmp	r0, #0
 801c016:	d04e      	beq.n	801c0b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c018:	44c6      	add	lr, r8
 801c01a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c01e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c022:	4413      	add	r3, r2
 801c024:	b280      	uxth	r0, r0
 801c026:	f897 8000 	ldrb.w	r8, [r7]
 801c02a:	b2b2      	uxth	r2, r6
 801c02c:	fb00 f602 	mul.w	r6, r0, r2
 801c030:	0100      	lsls	r0, r0, #4
 801c032:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801c036:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801c03a:	1b80      	subs	r0, r0, r6
 801c03c:	fa1f fc82 	uxth.w	ip, r2
 801c040:	b282      	uxth	r2, r0
 801c042:	7820      	ldrb	r0, [r4, #0]
 801c044:	ebae 0e0c 	sub.w	lr, lr, ip
 801c048:	4350      	muls	r0, r2
 801c04a:	fa1f fe8e 	uxth.w	lr, lr
 801c04e:	fb0e 0808 	mla	r8, lr, r8, r0
 801c052:	7828      	ldrb	r0, [r5, #0]
 801c054:	fb0c 8800 	mla	r8, ip, r0, r8
 801c058:	7818      	ldrb	r0, [r3, #0]
 801c05a:	fb06 8000 	mla	r0, r6, r0, r8
 801c05e:	1200      	asrs	r0, r0, #8
 801c060:	7008      	strb	r0, [r1, #0]
 801c062:	7860      	ldrb	r0, [r4, #1]
 801c064:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c068:	4350      	muls	r0, r2
 801c06a:	fb0e 0808 	mla	r8, lr, r8, r0
 801c06e:	7868      	ldrb	r0, [r5, #1]
 801c070:	fb0c 8800 	mla	r8, ip, r0, r8
 801c074:	7858      	ldrb	r0, [r3, #1]
 801c076:	fb06 8000 	mla	r0, r6, r0, r8
 801c07a:	1200      	asrs	r0, r0, #8
 801c07c:	7048      	strb	r0, [r1, #1]
 801c07e:	78a0      	ldrb	r0, [r4, #2]
 801c080:	78bf      	ldrb	r7, [r7, #2]
 801c082:	4350      	muls	r0, r2
 801c084:	78aa      	ldrb	r2, [r5, #2]
 801c086:	fb0e 0007 	mla	r0, lr, r7, r0
 801c08a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c08e:	789a      	ldrb	r2, [r3, #2]
 801c090:	fb06 c202 	mla	r2, r6, r2, ip
 801c094:	1212      	asrs	r2, r2, #8
 801c096:	708a      	strb	r2, [r1, #2]
 801c098:	b002      	add	sp, #8
 801c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c09e:	af01      	add	r7, sp, #4
 801c0a0:	e797      	b.n	801bfd2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801c0a2:	ac01      	add	r4, sp, #4
 801c0a4:	4627      	mov	r7, r4
 801c0a6:	e7a0      	b.n	801bfea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c0a8:	ac01      	add	r4, sp, #4
 801c0aa:	e79e      	b.n	801bfea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c0ac:	ad01      	add	r5, sp, #4
 801c0ae:	e7ac      	b.n	801c00a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801c0b0:	ab01      	add	r3, sp, #4
 801c0b2:	461d      	mov	r5, r3
 801c0b4:	e7b6      	b.n	801c024 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801c0b6:	ab01      	add	r3, sp, #4
 801c0b8:	e7b4      	b.n	801c024 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801c0ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c0ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0be:	b08d      	sub	sp, #52	; 0x34
 801c0c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c0c4:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801c0c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c0ca:	900b      	str	r0, [sp, #44]	; 0x2c
 801c0cc:	9306      	str	r3, [sp, #24]
 801c0ce:	6850      	ldr	r0, [r2, #4]
 801c0d0:	6812      	ldr	r2, [r2, #0]
 801c0d2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c0d4:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801c0d8:	fb00 1303 	mla	r3, r0, r3, r1
 801c0dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0e0:	18d3      	adds	r3, r2, r3
 801c0e2:	9307      	str	r3, [sp, #28]
 801c0e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	9308      	str	r3, [sp, #32]
 801c0ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c0ec:	685d      	ldr	r5, [r3, #4]
 801c0ee:	3504      	adds	r5, #4
 801c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	dc03      	bgt.n	801c0fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	f340 81e6 	ble.w	801c4ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801c0fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c100:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c104:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c108:	1e48      	subs	r0, r1, #1
 801c10a:	1e56      	subs	r6, r2, #1
 801c10c:	9b06      	ldr	r3, [sp, #24]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	f340 80bd 	ble.w	801c28e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c114:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c116:	1427      	asrs	r7, r4, #16
 801c118:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c11c:	d406      	bmi.n	801c12c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c11e:	4287      	cmp	r7, r0
 801c120:	da04      	bge.n	801c12c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c122:	2b00      	cmp	r3, #0
 801c124:	db02      	blt.n	801c12c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c126:	42b3      	cmp	r3, r6
 801c128:	f2c0 80b2 	blt.w	801c290 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801c12c:	3701      	adds	r7, #1
 801c12e:	f100 80a1 	bmi.w	801c274 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c132:	42b9      	cmp	r1, r7
 801c134:	f2c0 809e 	blt.w	801c274 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c138:	3301      	adds	r3, #1
 801c13a:	f100 809b 	bmi.w	801c274 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c13e:	429a      	cmp	r2, r3
 801c140:	f2c0 8098 	blt.w	801c274 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c144:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801c148:	f1bb 0f00 	cmp.w	fp, #0
 801c14c:	f340 80bf 	ble.w	801c2ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c150:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c152:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c154:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c156:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c15a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801c15e:	1420      	asrs	r0, r4, #16
 801c160:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c162:	ea4f 4723 	mov.w	r7, r3, asr #16
 801c166:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c16a:	6892      	ldr	r2, [r2, #8]
 801c16c:	f100 8103 	bmi.w	801c376 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c170:	f102 3eff 	add.w	lr, r2, #4294967295
 801c174:	4570      	cmp	r0, lr
 801c176:	f280 80fe 	bge.w	801c376 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c17a:	2f00      	cmp	r7, #0
 801c17c:	f2c0 80fb 	blt.w	801c376 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c180:	f10c 3eff 	add.w	lr, ip, #4294967295
 801c184:	4577      	cmp	r7, lr
 801c186:	f280 80f6 	bge.w	801c376 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c18a:	b212      	sxth	r2, r2
 801c18c:	fb07 0002 	mla	r0, r7, r2, r0
 801c190:	9f08      	ldr	r7, [sp, #32]
 801c192:	f817 8000 	ldrb.w	r8, [r7, r0]
 801c196:	eb07 0e00 	add.w	lr, r7, r0
 801c19a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c19e:	eb05 0c08 	add.w	ip, r5, r8
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	f000 80d8 	beq.w	801c358 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c1a8:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801c1ac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c1b0:	442f      	add	r7, r5
 801c1b2:	2900      	cmp	r1, #0
 801c1b4:	f000 80d9 	beq.w	801c36a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c1b8:	eb0e 0002 	add.w	r0, lr, r2
 801c1bc:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801c1c0:	7840      	ldrb	r0, [r0, #1]
 801c1c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c1c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c1ca:	442a      	add	r2, r5
 801c1cc:	4428      	add	r0, r5
 801c1ce:	b29b      	uxth	r3, r3
 801c1d0:	f815 a008 	ldrb.w	sl, [r5, r8]
 801c1d4:	b289      	uxth	r1, r1
 801c1d6:	f897 8000 	ldrb.w	r8, [r7]
 801c1da:	fb03 f901 	mul.w	r9, r3, r1
 801c1de:	011b      	lsls	r3, r3, #4
 801c1e0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c1e4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c1e8:	eba3 0309 	sub.w	r3, r3, r9
 801c1ec:	b289      	uxth	r1, r1
 801c1ee:	b29b      	uxth	r3, r3
 801c1f0:	ebae 0e01 	sub.w	lr, lr, r1
 801c1f4:	fb03 f808 	mul.w	r8, r3, r8
 801c1f8:	fa1f fe8e 	uxth.w	lr, lr
 801c1fc:	fb0e 880a 	mla	r8, lr, sl, r8
 801c200:	f892 a000 	ldrb.w	sl, [r2]
 801c204:	fb01 880a 	mla	r8, r1, sl, r8
 801c208:	f890 a000 	ldrb.w	sl, [r0]
 801c20c:	fb09 880a 	mla	r8, r9, sl, r8
 801c210:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c214:	f886 8000 	strb.w	r8, [r6]
 801c218:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c21c:	f89c a001 	ldrb.w	sl, [ip, #1]
 801c220:	fb03 f808 	mul.w	r8, r3, r8
 801c224:	fb0e 880a 	mla	r8, lr, sl, r8
 801c228:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c22c:	fb01 880a 	mla	r8, r1, sl, r8
 801c230:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c234:	fb09 880a 	mla	r8, r9, sl, r8
 801c238:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c23c:	f886 8001 	strb.w	r8, [r6, #1]
 801c240:	78bf      	ldrb	r7, [r7, #2]
 801c242:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c246:	437b      	muls	r3, r7
 801c248:	7892      	ldrb	r2, [r2, #2]
 801c24a:	fb0e 330c 	mla	r3, lr, ip, r3
 801c24e:	fb01 3102 	mla	r1, r1, r2, r3
 801c252:	7882      	ldrb	r2, [r0, #2]
 801c254:	fb09 1902 	mla	r9, r9, r2, r1
 801c258:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c25c:	f886 9002 	strb.w	r9, [r6, #2]
 801c260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c262:	3603      	adds	r6, #3
 801c264:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c266:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c26a:	441c      	add	r4, r3
 801c26c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c26e:	4413      	add	r3, r2
 801c270:	9318      	str	r3, [sp, #96]	; 0x60
 801c272:	e769      	b.n	801c148 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c276:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c278:	441c      	add	r4, r3
 801c27a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c27c:	443b      	add	r3, r7
 801c27e:	9318      	str	r3, [sp, #96]	; 0x60
 801c280:	9b06      	ldr	r3, [sp, #24]
 801c282:	3b01      	subs	r3, #1
 801c284:	9306      	str	r3, [sp, #24]
 801c286:	9b07      	ldr	r3, [sp, #28]
 801c288:	3303      	adds	r3, #3
 801c28a:	9307      	str	r3, [sp, #28]
 801c28c:	e73e      	b.n	801c10c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c28e:	d026      	beq.n	801c2de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c290:	9b06      	ldr	r3, [sp, #24]
 801c292:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c294:	3b01      	subs	r3, #1
 801c296:	fb00 4003 	mla	r0, r0, r3, r4
 801c29a:	1400      	asrs	r0, r0, #16
 801c29c:	f53f af52 	bmi.w	801c144 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c2a0:	3901      	subs	r1, #1
 801c2a2:	4288      	cmp	r0, r1
 801c2a4:	f6bf af4e 	bge.w	801c144 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c2a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c2aa:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c2ac:	fb01 0303 	mla	r3, r1, r3, r0
 801c2b0:	141b      	asrs	r3, r3, #16
 801c2b2:	f53f af47 	bmi.w	801c144 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c2b6:	3a01      	subs	r2, #1
 801c2b8:	4293      	cmp	r3, r2
 801c2ba:	f6bf af43 	bge.w	801c144 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c2be:	9b07      	ldr	r3, [sp, #28]
 801c2c0:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c2c4:	f103 0803 	add.w	r8, r3, #3
 801c2c8:	f1ba 0f00 	cmp.w	sl, #0
 801c2cc:	dc71      	bgt.n	801c3b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801c2ce:	9b06      	ldr	r3, [sp, #24]
 801c2d0:	9a07      	ldr	r2, [sp, #28]
 801c2d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c2d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2da:	441a      	add	r2, r3
 801c2dc:	9207      	str	r2, [sp, #28]
 801c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	f340 80f2 	ble.w	801c4ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801c2e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c2ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c2ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c2f0:	eeb0 6a62 	vmov.f32	s12, s5
 801c2f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c2f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c2fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c300:	ee16 4a10 	vmov	r4, s12
 801c304:	eeb0 6a43 	vmov.f32	s12, s6
 801c308:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c30c:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801c310:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c314:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c318:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c31c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c320:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c324:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c328:	ee12 2a90 	vmov	r2, s5
 801c32c:	eef0 2a47 	vmov.f32	s5, s14
 801c330:	fb92 f3f3 	sdiv	r3, r2, r3
 801c334:	ee13 2a10 	vmov	r2, s6
 801c338:	9319      	str	r3, [sp, #100]	; 0x64
 801c33a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c33c:	eeb0 3a67 	vmov.f32	s6, s15
 801c340:	fb92 f3f3 	sdiv	r3, r2, r3
 801c344:	931a      	str	r3, [sp, #104]	; 0x68
 801c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c34a:	3b01      	subs	r3, #1
 801c34c:	9309      	str	r3, [sp, #36]	; 0x24
 801c34e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c350:	bf08      	it	eq
 801c352:	4613      	moveq	r3, r2
 801c354:	9306      	str	r3, [sp, #24]
 801c356:	e6cb      	b.n	801c0f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c358:	b151      	cbz	r1, 801c370 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c35a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801c35e:	4660      	mov	r0, ip
 801c360:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c364:	442a      	add	r2, r5
 801c366:	4667      	mov	r7, ip
 801c368:	e731      	b.n	801c1ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c36a:	4660      	mov	r0, ip
 801c36c:	4662      	mov	r2, ip
 801c36e:	e72e      	b.n	801c1ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c370:	4660      	mov	r0, ip
 801c372:	4662      	mov	r2, ip
 801c374:	e7f7      	b.n	801c366 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801c376:	f110 0e01 	adds.w	lr, r0, #1
 801c37a:	f53f af71 	bmi.w	801c260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c37e:	4572      	cmp	r2, lr
 801c380:	f6ff af6e 	blt.w	801c260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c384:	f117 0e01 	adds.w	lr, r7, #1
 801c388:	f53f af6a 	bmi.w	801c260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c38c:	45f4      	cmp	ip, lr
 801c38e:	f6ff af67 	blt.w	801c260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c392:	b212      	sxth	r2, r2
 801c394:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801c398:	fa0f f38c 	sxth.w	r3, ip
 801c39c:	9200      	str	r2, [sp, #0]
 801c39e:	4631      	mov	r1, r6
 801c3a0:	9a08      	ldr	r2, [sp, #32]
 801c3a2:	9301      	str	r3, [sp, #4]
 801c3a4:	462b      	mov	r3, r5
 801c3a6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801c3aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c3ac:	f7ff fde9 	bl	801bf82 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801c3b0:	e756      	b.n	801c260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c3b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c3b4:	1426      	asrs	r6, r4, #16
 801c3b6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c3b8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c3bc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c3c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c3c2:	1400      	asrs	r0, r0, #16
 801c3c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c3c8:	fb02 6000 	mla	r0, r2, r0, r6
 801c3cc:	9e08      	ldr	r6, [sp, #32]
 801c3ce:	f816 e000 	ldrb.w	lr, [r6, r0]
 801c3d2:	eb06 0c00 	add.w	ip, r6, r0
 801c3d6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c3da:	eb05 070e 	add.w	r7, r5, lr
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d064      	beq.n	801c4ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801c3e2:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801c3e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c3ea:	442e      	add	r6, r5
 801c3ec:	2900      	cmp	r1, #0
 801c3ee:	d066      	beq.n	801c4be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801c3f0:	eb0c 0002 	add.w	r0, ip, r2
 801c3f4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c3f8:	7840      	ldrb	r0, [r0, #1]
 801c3fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c3fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c402:	442a      	add	r2, r5
 801c404:	4428      	add	r0, r5
 801c406:	b29b      	uxth	r3, r3
 801c408:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801c40c:	b289      	uxth	r1, r1
 801c40e:	f896 e000 	ldrb.w	lr, [r6]
 801c412:	f108 0803 	add.w	r8, r8, #3
 801c416:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c41a:	fb03 f901 	mul.w	r9, r3, r1
 801c41e:	011b      	lsls	r3, r3, #4
 801c420:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c424:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801c428:	eba3 0309 	sub.w	r3, r3, r9
 801c42c:	b289      	uxth	r1, r1
 801c42e:	b29b      	uxth	r3, r3
 801c430:	ebac 0c01 	sub.w	ip, ip, r1
 801c434:	fb03 fe0e 	mul.w	lr, r3, lr
 801c438:	fa1f fc8c 	uxth.w	ip, ip
 801c43c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c440:	f892 b000 	ldrb.w	fp, [r2]
 801c444:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c448:	f890 b000 	ldrb.w	fp, [r0]
 801c44c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c450:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c454:	f808 ec06 	strb.w	lr, [r8, #-6]
 801c458:	f896 e001 	ldrb.w	lr, [r6, #1]
 801c45c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c460:	fb03 fe0e 	mul.w	lr, r3, lr
 801c464:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c468:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c46c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c470:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c474:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c478:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c47c:	f808 ec05 	strb.w	lr, [r8, #-5]
 801c480:	78b6      	ldrb	r6, [r6, #2]
 801c482:	78bf      	ldrb	r7, [r7, #2]
 801c484:	4373      	muls	r3, r6
 801c486:	7896      	ldrb	r6, [r2, #2]
 801c488:	7882      	ldrb	r2, [r0, #2]
 801c48a:	fb0c 3307 	mla	r3, ip, r7, r3
 801c48e:	fb01 3306 	mla	r3, r1, r6, r3
 801c492:	fb09 3902 	mla	r9, r9, r2, r3
 801c496:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c498:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c49a:	441c      	add	r4, r3
 801c49c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c49e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4a2:	4413      	add	r3, r2
 801c4a4:	f808 9c04 	strb.w	r9, [r8, #-4]
 801c4a8:	9318      	str	r3, [sp, #96]	; 0x60
 801c4aa:	e70d      	b.n	801c2c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801c4ac:	b151      	cbz	r1, 801c4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801c4ae:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c4b2:	4638      	mov	r0, r7
 801c4b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c4b8:	442a      	add	r2, r5
 801c4ba:	463e      	mov	r6, r7
 801c4bc:	e7a3      	b.n	801c406 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c4be:	4638      	mov	r0, r7
 801c4c0:	463a      	mov	r2, r7
 801c4c2:	e7a0      	b.n	801c406 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c4c4:	4638      	mov	r0, r7
 801c4c6:	463a      	mov	r2, r7
 801c4c8:	e7f7      	b.n	801c4ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801c4ca:	b00d      	add	sp, #52	; 0x34
 801c4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c4d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801c4d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4d4:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801c4d8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c4dc:	2d00      	cmp	r5, #0
 801c4de:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801c4e2:	fb05 700c 	mla	r0, r5, ip, r7
 801c4e6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801c4ea:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801c4ee:	eb02 0800 	add.w	r8, r2, r0
 801c4f2:	f2c0 8118 	blt.w	801c726 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c4f6:	45a9      	cmp	r9, r5
 801c4f8:	f340 8115 	ble.w	801c726 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c4fc:	2f00      	cmp	r7, #0
 801c4fe:	f2c0 8110 	blt.w	801c722 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c502:	45bc      	cmp	ip, r7
 801c504:	f340 810d 	ble.w	801c722 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c508:	5c12      	ldrb	r2, [r2, r0]
 801c50a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801c50e:	1c7a      	adds	r2, r7, #1
 801c510:	f100 810c 	bmi.w	801c72c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c514:	4594      	cmp	ip, r2
 801c516:	f340 8109 	ble.w	801c72c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c51a:	2c00      	cmp	r4, #0
 801c51c:	f000 8108 	beq.w	801c730 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801c520:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c524:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c528:	3501      	adds	r5, #1
 801c52a:	f100 8105 	bmi.w	801c738 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c52e:	45a9      	cmp	r9, r5
 801c530:	f340 8102 	ble.w	801c738 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c534:	f1be 0f00 	cmp.w	lr, #0
 801c538:	f000 8101 	beq.w	801c73e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801c53c:	2f00      	cmp	r7, #0
 801c53e:	f2c0 80f9 	blt.w	801c734 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c542:	45bc      	cmp	ip, r7
 801c544:	f340 80f6 	ble.w	801c734 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c548:	f818 200c 	ldrb.w	r2, [r8, ip]
 801c54c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c550:	3701      	adds	r7, #1
 801c552:	f100 80f7 	bmi.w	801c744 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c556:	45bc      	cmp	ip, r7
 801c558:	f340 80f4 	ble.w	801c744 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c55c:	2c00      	cmp	r4, #0
 801c55e:	f000 80f3 	beq.w	801c748 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801c562:	44c4      	add	ip, r8
 801c564:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c568:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c56c:	fa1f fc84 	uxth.w	ip, r4
 801c570:	fa1f f48e 	uxth.w	r4, lr
 801c574:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801c578:	fb04 fe0c 	mul.w	lr, r4, ip
 801c57c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c580:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801c584:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801c588:	ebac 070e 	sub.w	r7, ip, lr
 801c58c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801c590:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801c594:	b2a4      	uxth	r4, r4
 801c596:	b2bf      	uxth	r7, r7
 801c598:	1b1b      	subs	r3, r3, r4
 801c59a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c59e:	fb07 fc0a 	mul.w	ip, r7, sl
 801c5a2:	b29b      	uxth	r3, r3
 801c5a4:	fb03 cc0b 	mla	ip, r3, fp, ip
 801c5a8:	9300      	str	r3, [sp, #0]
 801c5aa:	fb04 cc09 	mla	ip, r4, r9, ip
 801c5ae:	fb0e cc08 	mla	ip, lr, r8, ip
 801c5b2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c5b6:	9301      	str	r3, [sp, #4]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	f000 80af 	beq.w	801c71c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801c5be:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c5c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c5c6:	fb0b fc0c 	mul.w	ip, fp, ip
 801c5ca:	fb0b f606 	mul.w	r6, fp, r6
 801c5ce:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c5d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c5d6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801c5da:	44dc      	add	ip, fp
 801c5dc:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801c5e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c5e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c5e8:	fb0a fb0b 	mul.w	fp, sl, fp
 801c5ec:	fb0a fa00 	mul.w	sl, sl, r0
 801c5f0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801c5f4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c5f8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801c5fc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c600:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c604:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c608:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c60c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c610:	0a36      	lsrs	r6, r6, #8
 801c612:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c616:	44dc      	add	ip, fp
 801c618:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801c61c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c620:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c624:	fb09 fb0b 	mul.w	fp, r9, fp
 801c628:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c62c:	fb09 f905 	mul.w	r9, r9, r5
 801c630:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801c634:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c638:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801c63c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c640:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c644:	fb0c fc07 	mul.w	ip, ip, r7
 801c648:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801c64c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801c650:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c654:	4458      	add	r0, fp
 801c656:	fb08 f505 	mul.w	r5, r8, r5
 801c65a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c65e:	fb08 f802 	mul.w	r8, r8, r2
 801c662:	0a00      	lsrs	r0, r0, #8
 801c664:	0a2a      	lsrs	r2, r5, #8
 801c666:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801c66a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c66e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c672:	4415      	add	r5, r2
 801c674:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801c678:	0a2d      	lsrs	r5, r5, #8
 801c67a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c67e:	9a00      	ldr	r2, [sp, #0]
 801c680:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c684:	fb03 cc02 	mla	ip, r3, r2, ip
 801c688:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c68c:	9b01      	ldr	r3, [sp, #4]
 801c68e:	fb05 c50e 	mla	r5, r5, lr, ip
 801c692:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c696:	fb00 5004 	mla	r0, r0, r4, r5
 801c69a:	0a00      	lsrs	r0, r0, #8
 801c69c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801c6a0:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801c6a4:	4378      	muls	r0, r7
 801c6a6:	fb02 0006 	mla	r0, r2, r6, r0
 801c6aa:	fb0e 0e08 	mla	lr, lr, r8, r0
 801c6ae:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801c6b2:	fb04 e000 	mla	r0, r4, r0, lr
 801c6b6:	0a00      	lsrs	r0, r0, #8
 801c6b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c6bc:	4328      	orrs	r0, r5
 801c6be:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801c6c2:	b2ad      	uxth	r5, r5
 801c6c4:	b2c4      	uxtb	r4, r0
 801c6c6:	436b      	muls	r3, r5
 801c6c8:	fb14 f405 	smulbb	r4, r4, r5
 801c6cc:	1c5a      	adds	r2, r3, #1
 801c6ce:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c6d2:	780b      	ldrb	r3, [r1, #0]
 801c6d4:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801c6d8:	b2d2      	uxtb	r2, r2
 801c6da:	fb03 4302 	mla	r3, r3, r2, r4
 801c6de:	b29b      	uxth	r3, r3
 801c6e0:	1c5c      	adds	r4, r3, #1
 801c6e2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c6e6:	784c      	ldrb	r4, [r1, #1]
 801c6e8:	fb14 f402 	smulbb	r4, r4, r2
 801c6ec:	121b      	asrs	r3, r3, #8
 801c6ee:	700b      	strb	r3, [r1, #0]
 801c6f0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801c6f4:	fb03 4305 	mla	r3, r3, r5, r4
 801c6f8:	b29b      	uxth	r3, r3
 801c6fa:	1c5c      	adds	r4, r3, #1
 801c6fc:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c700:	0c04      	lsrs	r4, r0, #16
 801c702:	7888      	ldrb	r0, [r1, #2]
 801c704:	121b      	asrs	r3, r3, #8
 801c706:	fb10 f002 	smulbb	r0, r0, r2
 801c70a:	704b      	strb	r3, [r1, #1]
 801c70c:	fb04 0005 	mla	r0, r4, r5, r0
 801c710:	b280      	uxth	r0, r0
 801c712:	1c43      	adds	r3, r0, #1
 801c714:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c718:	1200      	asrs	r0, r0, #8
 801c71a:	7088      	strb	r0, [r1, #2]
 801c71c:	b003      	add	sp, #12
 801c71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c722:	2600      	movs	r6, #0
 801c724:	e6f3      	b.n	801c50e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801c726:	2000      	movs	r0, #0
 801c728:	4606      	mov	r6, r0
 801c72a:	e6fd      	b.n	801c528 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c72c:	2000      	movs	r0, #0
 801c72e:	e6fb      	b.n	801c528 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c730:	4620      	mov	r0, r4
 801c732:	e6f9      	b.n	801c528 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c734:	2500      	movs	r5, #0
 801c736:	e70b      	b.n	801c550 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801c738:	2200      	movs	r2, #0
 801c73a:	4615      	mov	r5, r2
 801c73c:	e716      	b.n	801c56c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c73e:	4672      	mov	r2, lr
 801c740:	4675      	mov	r5, lr
 801c742:	e713      	b.n	801c56c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c744:	2200      	movs	r2, #0
 801c746:	e711      	b.n	801c56c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c748:	4622      	mov	r2, r4
 801c74a:	e70f      	b.n	801c56c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801c74c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c750:	b09f      	sub	sp, #124	; 0x7c
 801c752:	921b      	str	r2, [sp, #108]	; 0x6c
 801c754:	9309      	str	r3, [sp, #36]	; 0x24
 801c756:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c758:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801c75c:	901d      	str	r0, [sp, #116]	; 0x74
 801c75e:	931c      	str	r3, [sp, #112]	; 0x70
 801c760:	6850      	ldr	r0, [r2, #4]
 801c762:	9119      	str	r1, [sp, #100]	; 0x64
 801c764:	6812      	ldr	r2, [r2, #0]
 801c766:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801c768:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801c76c:	fb00 1303 	mla	r3, r0, r3, r1
 801c770:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c774:	18d3      	adds	r3, r2, r3
 801c776:	930c      	str	r3, [sp, #48]	; 0x30
 801c778:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	9312      	str	r3, [sp, #72]	; 0x48
 801c77e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c780:	685e      	ldr	r6, [r3, #4]
 801c782:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801c786:	3604      	adds	r6, #4
 801c788:	930d      	str	r3, [sp, #52]	; 0x34
 801c78a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	dc03      	bgt.n	801c798 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c792:	2b00      	cmp	r3, #0
 801c794:	f340 8378 	ble.w	801ce88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c798:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c79a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c79e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c7a2:	1e48      	subs	r0, r1, #1
 801c7a4:	1e57      	subs	r7, r2, #1
 801c7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	f340 818c 	ble.w	801cac6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801c7ae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c7b0:	142b      	asrs	r3, r5, #16
 801c7b2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c7b6:	d406      	bmi.n	801c7c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c7b8:	4584      	cmp	ip, r0
 801c7ba:	da04      	bge.n	801c7c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	db02      	blt.n	801c7c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c7c0:	42bb      	cmp	r3, r7
 801c7c2:	f2c0 8181 	blt.w	801cac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801c7c6:	f11c 0c01 	adds.w	ip, ip, #1
 801c7ca:	f100 816f 	bmi.w	801caac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c7ce:	4561      	cmp	r1, ip
 801c7d0:	f2c0 816c 	blt.w	801caac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c7d4:	3301      	adds	r3, #1
 801c7d6:	f100 8169 	bmi.w	801caac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c7da:	429a      	cmp	r2, r3
 801c7dc:	f2c0 8166 	blt.w	801caac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c7e4:	931a      	str	r3, [sp, #104]	; 0x68
 801c7e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	f340 818c 	ble.w	801cb06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801c7ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c7f0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c7f4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c7f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c7fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c7fe:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801c802:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c804:	141b      	asrs	r3, r3, #16
 801c806:	f100 81d0 	bmi.w	801cbaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c80a:	f100 38ff 	add.w	r8, r0, #4294967295
 801c80e:	4543      	cmp	r3, r8
 801c810:	f280 81cb 	bge.w	801cbaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c814:	f1bc 0f00 	cmp.w	ip, #0
 801c818:	f2c0 81c7 	blt.w	801cbaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c81c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c820:	45c4      	cmp	ip, r8
 801c822:	f280 81c2 	bge.w	801cbaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c826:	b200      	sxth	r0, r0
 801c828:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c82a:	fb0c 3300 	mla	r3, ip, r0, r3
 801c82e:	eb04 0803 	add.w	r8, r4, r3
 801c832:	5ce3      	ldrb	r3, [r4, r3]
 801c834:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c838:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c83c:	2a00      	cmp	r2, #0
 801c83e:	f000 81a9 	beq.w	801cb94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801c842:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c846:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c84a:	940e      	str	r4, [sp, #56]	; 0x38
 801c84c:	0e24      	lsrs	r4, r4, #24
 801c84e:	9415      	str	r4, [sp, #84]	; 0x54
 801c850:	b179      	cbz	r1, 801c872 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c852:	eb08 0c00 	add.w	ip, r8, r0
 801c856:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c85a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c85e:	900a      	str	r0, [sp, #40]	; 0x28
 801c860:	0e00      	lsrs	r0, r0, #24
 801c862:	9013      	str	r0, [sp, #76]	; 0x4c
 801c864:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801c868:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c86c:	900f      	str	r0, [sp, #60]	; 0x3c
 801c86e:	0e00      	lsrs	r0, r0, #24
 801c870:	9016      	str	r0, [sp, #88]	; 0x58
 801c872:	b292      	uxth	r2, r2
 801c874:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c876:	b289      	uxth	r1, r1
 801c878:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c87a:	fb02 f901 	mul.w	r9, r2, r1
 801c87e:	0112      	lsls	r2, r2, #4
 801c880:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c884:	eba2 0809 	sub.w	r8, r2, r9
 801c888:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c88c:	b289      	uxth	r1, r1
 801c88e:	fa1f f888 	uxth.w	r8, r8
 801c892:	1a52      	subs	r2, r2, r1
 801c894:	fb08 f000 	mul.w	r0, r8, r0
 801c898:	b292      	uxth	r2, r2
 801c89a:	fb02 000e 	mla	r0, r2, lr, r0
 801c89e:	fb01 0004 	mla	r0, r1, r4, r0
 801c8a2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c8a4:	fb09 0004 	mla	r0, r9, r4, r0
 801c8a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c8ac:	2800      	cmp	r0, #0
 801c8ae:	f000 80f2 	beq.w	801ca96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c8b2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c8b6:	d01b      	beq.n	801c8f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c8b8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c8bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c8c0:	fb0e fa0a 	mul.w	sl, lr, sl
 801c8c4:	fb0e fe03 	mul.w	lr, lr, r3
 801c8c8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c8cc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c8d0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c8d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c8d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c8dc:	4453      	add	r3, sl
 801c8de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c8e2:	0a1b      	lsrs	r3, r3, #8
 801c8e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c8e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c8ec:	ea43 030c 	orr.w	r3, r3, ip
 801c8f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c8f2:	2cff      	cmp	r4, #255	; 0xff
 801c8f4:	d021      	beq.n	801c93a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801c8f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c8f8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c8fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c8fe:	fb04 fb0b 	mul.w	fp, r4, fp
 801c902:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c904:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c908:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c90a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c90e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c912:	fb04 fa0a 	mul.w	sl, r4, sl
 801c916:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c91a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c91e:	44de      	add	lr, fp
 801c920:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c924:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c928:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c92c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c930:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c934:	ea4e 040a 	orr.w	r4, lr, sl
 801c938:	940e      	str	r4, [sp, #56]	; 0x38
 801c93a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c93c:	2cff      	cmp	r4, #255	; 0xff
 801c93e:	d021      	beq.n	801c984 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c940:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c942:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c946:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c948:	fb04 fb0b 	mul.w	fp, r4, fp
 801c94c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c94e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c952:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c954:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c958:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c95c:	fb04 fa0a 	mul.w	sl, r4, sl
 801c960:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c964:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c968:	44de      	add	lr, fp
 801c96a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c96e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c972:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c976:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c97a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c97e:	ea4e 040a 	orr.w	r4, lr, sl
 801c982:	940a      	str	r4, [sp, #40]	; 0x28
 801c984:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c986:	2cff      	cmp	r4, #255	; 0xff
 801c988:	d021      	beq.n	801c9ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c98a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c98c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c990:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c992:	fb04 fb0b 	mul.w	fp, r4, fp
 801c996:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c998:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c99c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c99e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c9a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c9a6:	fb04 fa0a 	mul.w	sl, r4, sl
 801c9aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c9ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c9b2:	44de      	add	lr, fp
 801c9b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c9b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c9bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c9c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c9c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c9c8:	ea4e 040a 	orr.w	r4, lr, sl
 801c9cc:	940f      	str	r4, [sp, #60]	; 0x3c
 801c9ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c9d0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c9d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c9d8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c9dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c9de:	fb08 fc0c 	mul.w	ip, r8, ip
 801c9e2:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c9e6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c9ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c9ec:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c9f0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c9f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c9f6:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c9fa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c9fe:	fb08 f80e 	mul.w	r8, r8, lr
 801ca02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ca06:	fb02 8303 	mla	r3, r2, r3, r8
 801ca0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ca0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ca10:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ca14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ca16:	fb01 330a 	mla	r3, r1, sl, r3
 801ca1a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ca1e:	fb09 3901 	mla	r9, r9, r1, r3
 801ca22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca24:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ca26:	4343      	muls	r3, r0
 801ca28:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ca2c:	1c58      	adds	r0, r3, #1
 801ca2e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ca32:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ca36:	ea4c 0c09 	orr.w	ip, ip, r9
 801ca3a:	783b      	ldrb	r3, [r7, #0]
 801ca3c:	fa5f f28c 	uxtb.w	r2, ip
 801ca40:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ca44:	fb12 f201 	smulbb	r2, r2, r1
 801ca48:	b2c0      	uxtb	r0, r0
 801ca4a:	fb03 2300 	mla	r3, r3, r0, r2
 801ca4e:	b29b      	uxth	r3, r3
 801ca50:	1c5a      	adds	r2, r3, #1
 801ca52:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ca56:	787a      	ldrb	r2, [r7, #1]
 801ca58:	fb12 f200 	smulbb	r2, r2, r0
 801ca5c:	121b      	asrs	r3, r3, #8
 801ca5e:	703b      	strb	r3, [r7, #0]
 801ca60:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ca64:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ca68:	fb03 2301 	mla	r3, r3, r1, r2
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	1c5a      	adds	r2, r3, #1
 801ca70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ca74:	121b      	asrs	r3, r3, #8
 801ca76:	707b      	strb	r3, [r7, #1]
 801ca78:	78bb      	ldrb	r3, [r7, #2]
 801ca7a:	fb13 f000 	smulbb	r0, r3, r0
 801ca7e:	fb0c 0c01 	mla	ip, ip, r1, r0
 801ca82:	fa1f fc8c 	uxth.w	ip, ip
 801ca86:	f10c 0301 	add.w	r3, ip, #1
 801ca8a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ca8e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ca92:	f887 c002 	strb.w	ip, [r7, #2]
 801ca96:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ca98:	3703      	adds	r7, #3
 801ca9a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ca9c:	441a      	add	r2, r3
 801ca9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801caa0:	441d      	add	r5, r3
 801caa2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801caa4:	9229      	str	r2, [sp, #164]	; 0xa4
 801caa6:	3b01      	subs	r3, #1
 801caa8:	931a      	str	r3, [sp, #104]	; 0x68
 801caaa:	e69c      	b.n	801c7e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801caac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801caae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801cab0:	441c      	add	r4, r3
 801cab2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cab4:	441d      	add	r5, r3
 801cab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cab8:	9429      	str	r4, [sp, #164]	; 0xa4
 801caba:	3b01      	subs	r3, #1
 801cabc:	9309      	str	r3, [sp, #36]	; 0x24
 801cabe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cac0:	3303      	adds	r3, #3
 801cac2:	930c      	str	r3, [sp, #48]	; 0x30
 801cac4:	e66f      	b.n	801c7a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801cac6:	d026      	beq.n	801cb16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801cac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801caca:	982b      	ldr	r0, [sp, #172]	; 0xac
 801cacc:	3b01      	subs	r3, #1
 801cace:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801cad0:	fb00 4003 	mla	r0, r0, r3, r4
 801cad4:	1400      	asrs	r0, r0, #16
 801cad6:	f53f ae83 	bmi.w	801c7e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cada:	3901      	subs	r1, #1
 801cadc:	4288      	cmp	r0, r1
 801cade:	f6bf ae7f 	bge.w	801c7e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cae2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801cae4:	fb01 5303 	mla	r3, r1, r3, r5
 801cae8:	141b      	asrs	r3, r3, #16
 801caea:	f53f ae79 	bmi.w	801c7e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801caee:	3a01      	subs	r2, #1
 801caf0:	4293      	cmp	r3, r2
 801caf2:	f6bf ae75 	bge.w	801c7e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801caf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801caf8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801cafc:	f103 0e03 	add.w	lr, r3, #3
 801cb00:	f1bb 0f00 	cmp.w	fp, #0
 801cb04:	dc71      	bgt.n	801cbea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801cb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cb0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cb12:	4423      	add	r3, r4
 801cb14:	930c      	str	r3, [sp, #48]	; 0x30
 801cb16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	f340 81b5 	ble.w	801ce88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801cb1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cb22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cb24:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb2c:	eef0 6a62 	vmov.f32	s13, s5
 801cb30:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cb34:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb3c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801cb40:	eef0 6a43 	vmov.f32	s13, s6
 801cb44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb48:	ee16 5a90 	vmov	r5, s13
 801cb4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb50:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb64:	ee12 2a90 	vmov	r2, s5
 801cb68:	eef0 2a47 	vmov.f32	s5, s14
 801cb6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb70:	ee13 2a10 	vmov	r2, s6
 801cb74:	932b      	str	r3, [sp, #172]	; 0xac
 801cb76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cb78:	eeb0 3a67 	vmov.f32	s6, s15
 801cb7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb80:	932c      	str	r3, [sp, #176]	; 0xb0
 801cb82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cb84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801cb86:	3b01      	subs	r3, #1
 801cb88:	9319      	str	r3, [sp, #100]	; 0x64
 801cb8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cb8c:	bf08      	it	eq
 801cb8e:	4613      	moveq	r3, r2
 801cb90:	9309      	str	r3, [sp, #36]	; 0x24
 801cb92:	e5fa      	b.n	801c78a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cb94:	2900      	cmp	r1, #0
 801cb96:	f43f ae6c 	beq.w	801c872 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cb9a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801cb9e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801cba2:	900a      	str	r0, [sp, #40]	; 0x28
 801cba4:	0e00      	lsrs	r0, r0, #24
 801cba6:	9013      	str	r0, [sp, #76]	; 0x4c
 801cba8:	e663      	b.n	801c872 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cbaa:	f113 0801 	adds.w	r8, r3, #1
 801cbae:	f53f af72 	bmi.w	801ca96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cbb2:	4540      	cmp	r0, r8
 801cbb4:	f6ff af6f 	blt.w	801ca96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cbb8:	f11c 0801 	adds.w	r8, ip, #1
 801cbbc:	f53f af6b 	bmi.w	801ca96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cbc0:	45c6      	cmp	lr, r8
 801cbc2:	f6ff af68 	blt.w	801ca96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cbc6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801cbc8:	b200      	sxth	r0, r0
 801cbca:	9302      	str	r3, [sp, #8]
 801cbcc:	fa0f f38e 	sxth.w	r3, lr
 801cbd0:	9000      	str	r0, [sp, #0]
 801cbd2:	9301      	str	r3, [sp, #4]
 801cbd4:	4633      	mov	r3, r6
 801cbd6:	981d      	ldr	r0, [sp, #116]	; 0x74
 801cbd8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801cbdc:	e9cd c203 	strd	ip, r2, [sp, #12]
 801cbe0:	4639      	mov	r1, r7
 801cbe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cbe4:	f7ff fc74 	bl	801c4d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801cbe8:	e755      	b.n	801ca96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cbea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cbec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cbf0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801cbf2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cbf6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cbf8:	1427      	asrs	r7, r4, #16
 801cbfa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cbfc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cc00:	142b      	asrs	r3, r5, #16
 801cc02:	fb01 7303 	mla	r3, r1, r3, r7
 801cc06:	18e7      	adds	r7, r4, r3
 801cc08:	5ce3      	ldrb	r3, [r4, r3]
 801cc0a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cc0e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801cc12:	2a00      	cmp	r2, #0
 801cc14:	f000 812e 	beq.w	801ce74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801cc18:	f897 8001 	ldrb.w	r8, [r7, #1]
 801cc1c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801cc20:	9410      	str	r4, [sp, #64]	; 0x40
 801cc22:	0e24      	lsrs	r4, r4, #24
 801cc24:	9417      	str	r4, [sp, #92]	; 0x5c
 801cc26:	b170      	cbz	r0, 801cc46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801cc28:	eb07 0801 	add.w	r8, r7, r1
 801cc2c:	5c79      	ldrb	r1, [r7, r1]
 801cc2e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cc32:	910b      	str	r1, [sp, #44]	; 0x2c
 801cc34:	0e09      	lsrs	r1, r1, #24
 801cc36:	9114      	str	r1, [sp, #80]	; 0x50
 801cc38:	f898 1001 	ldrb.w	r1, [r8, #1]
 801cc3c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cc40:	9111      	str	r1, [sp, #68]	; 0x44
 801cc42:	0e09      	lsrs	r1, r1, #24
 801cc44:	9118      	str	r1, [sp, #96]	; 0x60
 801cc46:	b292      	uxth	r2, r2
 801cc48:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801cc4a:	b280      	uxth	r0, r0
 801cc4c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc4e:	fb02 f900 	mul.w	r9, r2, r0
 801cc52:	0112      	lsls	r2, r2, #4
 801cc54:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801cc58:	eba2 0809 	sub.w	r8, r2, r9
 801cc5c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801cc60:	b280      	uxth	r0, r0
 801cc62:	fa1f f888 	uxth.w	r8, r8
 801cc66:	1a12      	subs	r2, r2, r0
 801cc68:	fb08 f101 	mul.w	r1, r8, r1
 801cc6c:	b292      	uxth	r2, r2
 801cc6e:	fb02 110c 	mla	r1, r2, ip, r1
 801cc72:	fb00 1104 	mla	r1, r0, r4, r1
 801cc76:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cc78:	fb09 1104 	mla	r1, r9, r4, r1
 801cc7c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cc80:	2900      	cmp	r1, #0
 801cc82:	f000 80ec 	beq.w	801ce5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801cc86:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cc8a:	d019      	beq.n	801ccc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801cc8c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cc90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cc94:	fb0c fa0a 	mul.w	sl, ip, sl
 801cc98:	fb0c fc03 	mul.w	ip, ip, r3
 801cc9c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cca0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cca4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801cca8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ccac:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ccb0:	4453      	add	r3, sl
 801ccb2:	0a3f      	lsrs	r7, r7, #8
 801ccb4:	0a1b      	lsrs	r3, r3, #8
 801ccb6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ccba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ccbe:	433b      	orrs	r3, r7
 801ccc0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ccc2:	2cff      	cmp	r4, #255	; 0xff
 801ccc4:	d020      	beq.n	801cd08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801ccc6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ccc8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cccc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ccce:	4367      	muls	r7, r4
 801ccd0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ccd2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ccd6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ccda:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ccdc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cce0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cce4:	fb04 fa0a 	mul.w	sl, r4, sl
 801cce8:	44bc      	add	ip, r7
 801ccea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ccee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ccf2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ccf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ccfa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ccfe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cd02:	ea4c 040a 	orr.w	r4, ip, sl
 801cd06:	9410      	str	r4, [sp, #64]	; 0x40
 801cd08:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cd0a:	2cff      	cmp	r4, #255	; 0xff
 801cd0c:	d020      	beq.n	801cd50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801cd0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cd10:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cd14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cd16:	4367      	muls	r7, r4
 801cd18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cd1a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cd1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cd22:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cd24:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cd28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cd2c:	fb04 fa0a 	mul.w	sl, r4, sl
 801cd30:	44bc      	add	ip, r7
 801cd32:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cd36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cd3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cd3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cd42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cd46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cd4a:	ea4c 040a 	orr.w	r4, ip, sl
 801cd4e:	940b      	str	r4, [sp, #44]	; 0x2c
 801cd50:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cd52:	2cff      	cmp	r4, #255	; 0xff
 801cd54:	d020      	beq.n	801cd98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801cd56:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cd58:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cd5c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cd5e:	4367      	muls	r7, r4
 801cd60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cd62:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cd66:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cd6a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cd6c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cd70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cd74:	fb04 fa0a 	mul.w	sl, r4, sl
 801cd78:	44bc      	add	ip, r7
 801cd7a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cd7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cd82:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cd86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cd8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cd8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cd92:	ea4c 040a 	orr.w	r4, ip, sl
 801cd96:	9411      	str	r4, [sp, #68]	; 0x44
 801cd98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cd9a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801cd9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cda2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cda6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cda8:	fb08 f707 	mul.w	r7, r8, r7
 801cdac:	fb02 770c 	mla	r7, r2, ip, r7
 801cdb0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cdb4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cdb6:	fb00 770c 	mla	r7, r0, ip, r7
 801cdba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cdbe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cdc0:	fb09 770c 	mla	r7, r9, ip, r7
 801cdc4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801cdc8:	fb08 f80c 	mul.w	r8, r8, ip
 801cdcc:	0a3f      	lsrs	r7, r7, #8
 801cdce:	fb02 8303 	mla	r3, r2, r3, r8
 801cdd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cdd4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801cdd8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801cddc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cdde:	fb00 330a 	mla	r3, r0, sl, r3
 801cde2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801cde6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cde8:	fb09 3c0c 	mla	ip, r9, ip, r3
 801cdec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cdee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cdf2:	434b      	muls	r3, r1
 801cdf4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cdf8:	1c59      	adds	r1, r3, #1
 801cdfa:	ea47 070c 	orr.w	r7, r7, ip
 801cdfe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ce02:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ce06:	b2fa      	uxtb	r2, r7
 801ce08:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ce0c:	fb12 f200 	smulbb	r2, r2, r0
 801ce10:	b2c9      	uxtb	r1, r1
 801ce12:	fb03 2301 	mla	r3, r3, r1, r2
 801ce16:	b29b      	uxth	r3, r3
 801ce18:	1c5a      	adds	r2, r3, #1
 801ce1a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ce1e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ce22:	fb12 f201 	smulbb	r2, r2, r1
 801ce26:	121b      	asrs	r3, r3, #8
 801ce28:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ce2c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ce30:	0c3f      	lsrs	r7, r7, #16
 801ce32:	fb03 2300 	mla	r3, r3, r0, r2
 801ce36:	b29b      	uxth	r3, r3
 801ce38:	1c5a      	adds	r2, r3, #1
 801ce3a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ce3e:	121b      	asrs	r3, r3, #8
 801ce40:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ce44:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ce48:	fb13 f101 	smulbb	r1, r3, r1
 801ce4c:	fb07 1700 	mla	r7, r7, r0, r1
 801ce50:	b2bf      	uxth	r7, r7
 801ce52:	1c7b      	adds	r3, r7, #1
 801ce54:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ce58:	123f      	asrs	r7, r7, #8
 801ce5a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ce5e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ce60:	f10e 0e03 	add.w	lr, lr, #3
 801ce64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ce66:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ce6a:	441a      	add	r2, r3
 801ce6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ce6e:	9229      	str	r2, [sp, #164]	; 0xa4
 801ce70:	441d      	add	r5, r3
 801ce72:	e645      	b.n	801cb00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801ce74:	2800      	cmp	r0, #0
 801ce76:	f43f aee6 	beq.w	801cc46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801ce7a:	5c79      	ldrb	r1, [r7, r1]
 801ce7c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ce80:	910b      	str	r1, [sp, #44]	; 0x2c
 801ce82:	0e09      	lsrs	r1, r1, #24
 801ce84:	9114      	str	r1, [sp, #80]	; 0x50
 801ce86:	e6de      	b.n	801cc46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801ce88:	b01f      	add	sp, #124	; 0x7c
 801ce8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce8e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801ce8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce92:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801ce96:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801ce9a:	2d00      	cmp	r5, #0
 801ce9c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801cea0:	fb05 700e 	mla	r0, r5, lr, r7
 801cea4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801cea8:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801ceac:	eb02 0800 	add.w	r8, r2, r0
 801ceb0:	f2c0 8105 	blt.w	801d0be <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801ceb4:	45a9      	cmp	r9, r5
 801ceb6:	f340 8102 	ble.w	801d0be <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801ceba:	2f00      	cmp	r7, #0
 801cebc:	f2c0 80fd 	blt.w	801d0ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801cec0:	45be      	cmp	lr, r7
 801cec2:	f340 80fa 	ble.w	801d0ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801cec6:	5c12      	ldrb	r2, [r2, r0]
 801cec8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801cecc:	1c7a      	adds	r2, r7, #1
 801cece:	f100 80f9 	bmi.w	801d0c4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801ced2:	4596      	cmp	lr, r2
 801ced4:	f340 80f6 	ble.w	801d0c4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801ced8:	2c00      	cmp	r4, #0
 801ceda:	f000 80f5 	beq.w	801d0c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801cede:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cee2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cee6:	3501      	adds	r5, #1
 801cee8:	f100 80f2 	bmi.w	801d0d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801ceec:	45a9      	cmp	r9, r5
 801ceee:	f340 80ef 	ble.w	801d0d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cef2:	f1bc 0f00 	cmp.w	ip, #0
 801cef6:	f000 80ee 	beq.w	801d0d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801cefa:	2f00      	cmp	r7, #0
 801cefc:	f2c0 80e6 	blt.w	801d0cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cf00:	45be      	cmp	lr, r7
 801cf02:	f340 80e3 	ble.w	801d0cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cf06:	f818 200e 	ldrb.w	r2, [r8, lr]
 801cf0a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cf0e:	3701      	adds	r7, #1
 801cf10:	f100 80e4 	bmi.w	801d0dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cf14:	45be      	cmp	lr, r7
 801cf16:	f340 80e1 	ble.w	801d0dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cf1a:	2c00      	cmp	r4, #0
 801cf1c:	f000 80e0 	beq.w	801d0e0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801cf20:	44c6      	add	lr, r8
 801cf22:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cf26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cf2a:	b2a3      	uxth	r3, r4
 801cf2c:	fa1f fc8c 	uxth.w	ip, ip
 801cf30:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801cf34:	fb0c fe03 	mul.w	lr, ip, r3
 801cf38:	011b      	lsls	r3, r3, #4
 801cf3a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cf3e:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801cf42:	eba3 070e 	sub.w	r7, r3, lr
 801cf46:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801cf4a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801cf4e:	fa1f f48c 	uxth.w	r4, ip
 801cf52:	b2bf      	uxth	r7, r7
 801cf54:	1b1b      	subs	r3, r3, r4
 801cf56:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801cf5a:	fb07 fc0a 	mul.w	ip, r7, sl
 801cf5e:	b29b      	uxth	r3, r3
 801cf60:	fb03 cc0b 	mla	ip, r3, fp, ip
 801cf64:	9300      	str	r3, [sp, #0]
 801cf66:	fb04 cc09 	mla	ip, r4, r9, ip
 801cf6a:	fb0e cc08 	mla	ip, lr, r8, ip
 801cf6e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cf72:	9301      	str	r3, [sp, #4]
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	f000 809d 	beq.w	801d0b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801cf7a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801cf7e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cf82:	fb0b fc0c 	mul.w	ip, fp, ip
 801cf86:	fb0b f606 	mul.w	r6, fp, r6
 801cf8a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801cf8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cf92:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801cf96:	44dc      	add	ip, fp
 801cf98:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801cf9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cfa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cfa4:	fb0a fb0b 	mul.w	fp, sl, fp
 801cfa8:	fb0a fa00 	mul.w	sl, sl, r0
 801cfac:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801cfb0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801cfb4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801cfb8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cfbc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801cfc0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cfc4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801cfc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cfcc:	0a36      	lsrs	r6, r6, #8
 801cfce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cfd2:	44dc      	add	ip, fp
 801cfd4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801cfd8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801cfdc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cfe0:	fb09 fb0b 	mul.w	fp, r9, fp
 801cfe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cfe8:	fb09 f905 	mul.w	r9, r9, r5
 801cfec:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801cff0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cff4:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801cff8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cffc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d000:	fb0c fc07 	mul.w	ip, ip, r7
 801d004:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d008:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801d00c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d010:	4458      	add	r0, fp
 801d012:	fb08 f505 	mul.w	r5, r8, r5
 801d016:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d01a:	fb08 f802 	mul.w	r8, r8, r2
 801d01e:	0a00      	lsrs	r0, r0, #8
 801d020:	0a2a      	lsrs	r2, r5, #8
 801d022:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801d026:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d02a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d02e:	4415      	add	r5, r2
 801d030:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d034:	0a2d      	lsrs	r5, r5, #8
 801d036:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d03a:	9a00      	ldr	r2, [sp, #0]
 801d03c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d040:	fb03 cc02 	mla	ip, r3, r2, ip
 801d044:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d048:	9b01      	ldr	r3, [sp, #4]
 801d04a:	fb05 c50e 	mla	r5, r5, lr, ip
 801d04e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d052:	43db      	mvns	r3, r3
 801d054:	fb00 5004 	mla	r0, r0, r4, r5
 801d058:	b2db      	uxtb	r3, r3
 801d05a:	0a00      	lsrs	r0, r0, #8
 801d05c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801d060:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801d064:	4378      	muls	r0, r7
 801d066:	fb02 0006 	mla	r0, r2, r6, r0
 801d06a:	780a      	ldrb	r2, [r1, #0]
 801d06c:	fb0e 0e08 	mla	lr, lr, r8, r0
 801d070:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801d074:	fb04 e000 	mla	r0, r4, r0, lr
 801d078:	fb02 f403 	mul.w	r4, r2, r3
 801d07c:	0a00      	lsrs	r0, r0, #8
 801d07e:	1c62      	adds	r2, r4, #1
 801d080:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d084:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d088:	4328      	orrs	r0, r5
 801d08a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d08e:	700a      	strb	r2, [r1, #0]
 801d090:	784a      	ldrb	r2, [r1, #1]
 801d092:	435a      	muls	r2, r3
 801d094:	1c54      	adds	r4, r2, #1
 801d096:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801d09a:	0a02      	lsrs	r2, r0, #8
 801d09c:	0c00      	lsrs	r0, r0, #16
 801d09e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d0a2:	704a      	strb	r2, [r1, #1]
 801d0a4:	788a      	ldrb	r2, [r1, #2]
 801d0a6:	4353      	muls	r3, r2
 801d0a8:	1c5a      	adds	r2, r3, #1
 801d0aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d0ae:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d0b2:	7088      	strb	r0, [r1, #2]
 801d0b4:	b003      	add	sp, #12
 801d0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0ba:	2600      	movs	r6, #0
 801d0bc:	e706      	b.n	801cecc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801d0be:	2000      	movs	r0, #0
 801d0c0:	4606      	mov	r6, r0
 801d0c2:	e710      	b.n	801cee6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d0c4:	2000      	movs	r0, #0
 801d0c6:	e70e      	b.n	801cee6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d0c8:	4620      	mov	r0, r4
 801d0ca:	e70c      	b.n	801cee6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d0cc:	2500      	movs	r5, #0
 801d0ce:	e71e      	b.n	801cf0e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801d0d0:	2200      	movs	r2, #0
 801d0d2:	4615      	mov	r5, r2
 801d0d4:	e729      	b.n	801cf2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d0d6:	4662      	mov	r2, ip
 801d0d8:	4665      	mov	r5, ip
 801d0da:	e726      	b.n	801cf2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d0dc:	2200      	movs	r2, #0
 801d0de:	e724      	b.n	801cf2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d0e0:	4622      	mov	r2, r4
 801d0e2:	e722      	b.n	801cf2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801d0e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e8:	b09b      	sub	sp, #108	; 0x6c
 801d0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0ee:	9218      	str	r2, [sp, #96]	; 0x60
 801d0f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d0f2:	9019      	str	r0, [sp, #100]	; 0x64
 801d0f4:	9116      	str	r1, [sp, #88]	; 0x58
 801d0f6:	6850      	ldr	r0, [r2, #4]
 801d0f8:	9307      	str	r3, [sp, #28]
 801d0fa:	6812      	ldr	r2, [r2, #0]
 801d0fc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801d0fe:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d102:	fb00 1303 	mla	r3, r0, r3, r1
 801d106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d10a:	18d3      	adds	r3, r2, r3
 801d10c:	930a      	str	r3, [sp, #40]	; 0x28
 801d10e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	930f      	str	r3, [sp, #60]	; 0x3c
 801d114:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d116:	685e      	ldr	r6, [r3, #4]
 801d118:	3604      	adds	r6, #4
 801d11a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	dc03      	bgt.n	801d128 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d120:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d122:	2b00      	cmp	r3, #0
 801d124:	f340 834f 	ble.w	801d7c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d128:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d12a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d12e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d132:	1e48      	subs	r0, r1, #1
 801d134:	1e57      	subs	r7, r2, #1
 801d136:	9b07      	ldr	r3, [sp, #28]
 801d138:	2b00      	cmp	r3, #0
 801d13a:	f340 8178 	ble.w	801d42e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d13e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d140:	142b      	asrs	r3, r5, #16
 801d142:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d146:	d406      	bmi.n	801d156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d148:	4584      	cmp	ip, r0
 801d14a:	da04      	bge.n	801d156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	db02      	blt.n	801d156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d150:	42bb      	cmp	r3, r7
 801d152:	f2c0 816d 	blt.w	801d430 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d156:	f11c 0c01 	adds.w	ip, ip, #1
 801d15a:	f100 815b 	bmi.w	801d414 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d15e:	4561      	cmp	r1, ip
 801d160:	f2c0 8158 	blt.w	801d414 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d164:	3301      	adds	r3, #1
 801d166:	f100 8155 	bmi.w	801d414 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d16a:	429a      	cmp	r2, r3
 801d16c:	f2c0 8152 	blt.w	801d414 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d170:	9b07      	ldr	r3, [sp, #28]
 801d172:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d174:	9317      	str	r3, [sp, #92]	; 0x5c
 801d176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d178:	2b00      	cmp	r3, #0
 801d17a:	f340 8178 	ble.w	801d46e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801d17e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d180:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d184:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d188:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d18c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d18e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801d192:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d194:	141b      	asrs	r3, r3, #16
 801d196:	f100 81ba 	bmi.w	801d50e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d19a:	f101 38ff 	add.w	r8, r1, #4294967295
 801d19e:	4543      	cmp	r3, r8
 801d1a0:	f280 81b5 	bge.w	801d50e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d1a4:	f1bc 0f00 	cmp.w	ip, #0
 801d1a8:	f2c0 81b1 	blt.w	801d50e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d1ac:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d1b0:	45c4      	cmp	ip, r8
 801d1b2:	f280 81ac 	bge.w	801d50e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d1b6:	b209      	sxth	r1, r1
 801d1b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d1ba:	fb0c 3301 	mla	r3, ip, r1, r3
 801d1be:	eb04 0803 	add.w	r8, r4, r3
 801d1c2:	5ce3      	ldrb	r3, [r4, r3]
 801d1c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d1c8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d1cc:	2a00      	cmp	r2, #0
 801d1ce:	f000 8193 	beq.w	801d4f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801d1d2:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d1d6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d1da:	940b      	str	r4, [sp, #44]	; 0x2c
 801d1dc:	0e24      	lsrs	r4, r4, #24
 801d1de:	9412      	str	r4, [sp, #72]	; 0x48
 801d1e0:	b178      	cbz	r0, 801d202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d1e2:	eb08 0c01 	add.w	ip, r8, r1
 801d1e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d1ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d1ee:	9108      	str	r1, [sp, #32]
 801d1f0:	0e09      	lsrs	r1, r1, #24
 801d1f2:	9110      	str	r1, [sp, #64]	; 0x40
 801d1f4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d1f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d1fc:	910c      	str	r1, [sp, #48]	; 0x30
 801d1fe:	0e09      	lsrs	r1, r1, #24
 801d200:	9113      	str	r1, [sp, #76]	; 0x4c
 801d202:	b292      	uxth	r2, r2
 801d204:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d206:	b280      	uxth	r0, r0
 801d208:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d20a:	fb02 f900 	mul.w	r9, r2, r0
 801d20e:	0112      	lsls	r2, r2, #4
 801d210:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d214:	eba2 0809 	sub.w	r8, r2, r9
 801d218:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d21c:	b280      	uxth	r0, r0
 801d21e:	fa1f f888 	uxth.w	r8, r8
 801d222:	1a12      	subs	r2, r2, r0
 801d224:	fb08 f101 	mul.w	r1, r8, r1
 801d228:	b292      	uxth	r2, r2
 801d22a:	fb02 110e 	mla	r1, r2, lr, r1
 801d22e:	fb00 1104 	mla	r1, r0, r4, r1
 801d232:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d234:	fb09 1104 	mla	r1, r9, r4, r1
 801d238:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d23c:	2900      	cmp	r1, #0
 801d23e:	f000 80de 	beq.w	801d3fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d242:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d246:	d01b      	beq.n	801d280 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801d248:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d24c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d250:	fb0e fa0a 	mul.w	sl, lr, sl
 801d254:	fb0e fe03 	mul.w	lr, lr, r3
 801d258:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d25c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d260:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d264:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d268:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d26c:	4453      	add	r3, sl
 801d26e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d272:	0a1b      	lsrs	r3, r3, #8
 801d274:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d278:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d27c:	ea43 030c 	orr.w	r3, r3, ip
 801d280:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d282:	2cff      	cmp	r4, #255	; 0xff
 801d284:	d021      	beq.n	801d2ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d286:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d288:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d28c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d28e:	fb04 fb0b 	mul.w	fp, r4, fp
 801d292:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d294:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d298:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d29a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d29e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d2a2:	fb04 fa0a 	mul.w	sl, r4, sl
 801d2a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2aa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d2ae:	44de      	add	lr, fp
 801d2b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d2b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d2b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d2bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d2c4:	ea4e 040a 	orr.w	r4, lr, sl
 801d2c8:	940b      	str	r4, [sp, #44]	; 0x2c
 801d2ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d2cc:	2cff      	cmp	r4, #255	; 0xff
 801d2ce:	d021      	beq.n	801d314 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801d2d0:	9c08      	ldr	r4, [sp, #32]
 801d2d2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d2d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d2d8:	fb04 fb0b 	mul.w	fp, r4, fp
 801d2dc:	9c08      	ldr	r4, [sp, #32]
 801d2de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d2e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d2e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d2e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d2ec:	fb04 fa0a 	mul.w	sl, r4, sl
 801d2f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d2f8:	44de      	add	lr, fp
 801d2fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d2fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d302:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d306:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d30a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d30e:	ea4e 040a 	orr.w	r4, lr, sl
 801d312:	9408      	str	r4, [sp, #32]
 801d314:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d316:	2cff      	cmp	r4, #255	; 0xff
 801d318:	d021      	beq.n	801d35e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d31a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d31c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d320:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d322:	fb04 fb0b 	mul.w	fp, r4, fp
 801d326:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d328:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d32c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d32e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d332:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d336:	fb04 fa0a 	mul.w	sl, r4, sl
 801d33a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d33e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d342:	44de      	add	lr, fp
 801d344:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d348:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d34c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d350:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d354:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d358:	ea4e 040a 	orr.w	r4, lr, sl
 801d35c:	940c      	str	r4, [sp, #48]	; 0x30
 801d35e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d360:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d364:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d368:	43c9      	mvns	r1, r1
 801d36a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d36e:	9c08      	ldr	r4, [sp, #32]
 801d370:	b2c9      	uxtb	r1, r1
 801d372:	fb08 fc0c 	mul.w	ip, r8, ip
 801d376:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d37a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d37e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d380:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d384:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d388:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d38a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d38e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d392:	fb08 f80e 	mul.w	r8, r8, lr
 801d396:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d39a:	fb02 8303 	mla	r3, r2, r3, r8
 801d39e:	9a08      	ldr	r2, [sp, #32]
 801d3a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d3a4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d3a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d3aa:	fb00 330a 	mla	r3, r0, sl, r3
 801d3ae:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801d3b2:	fb09 3900 	mla	r9, r9, r0, r3
 801d3b6:	783b      	ldrb	r3, [r7, #0]
 801d3b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d3bc:	fb03 f201 	mul.w	r2, r3, r1
 801d3c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d3c4:	1c53      	adds	r3, r2, #1
 801d3c6:	ea4c 0c09 	orr.w	ip, ip, r9
 801d3ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d3ce:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d3d2:	703b      	strb	r3, [r7, #0]
 801d3d4:	787b      	ldrb	r3, [r7, #1]
 801d3d6:	434b      	muls	r3, r1
 801d3d8:	1c5a      	adds	r2, r3, #1
 801d3da:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d3de:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d3e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d3e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d3ea:	707b      	strb	r3, [r7, #1]
 801d3ec:	78bb      	ldrb	r3, [r7, #2]
 801d3ee:	4359      	muls	r1, r3
 801d3f0:	1c4b      	adds	r3, r1, #1
 801d3f2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d3f6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801d3fa:	f887 c002 	strb.w	ip, [r7, #2]
 801d3fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d400:	3703      	adds	r7, #3
 801d402:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d404:	441a      	add	r2, r3
 801d406:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d408:	441d      	add	r5, r3
 801d40a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d40c:	9225      	str	r2, [sp, #148]	; 0x94
 801d40e:	3b01      	subs	r3, #1
 801d410:	9317      	str	r3, [sp, #92]	; 0x5c
 801d412:	e6b0      	b.n	801d176 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d414:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d416:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d418:	441c      	add	r4, r3
 801d41a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d41c:	441d      	add	r5, r3
 801d41e:	9b07      	ldr	r3, [sp, #28]
 801d420:	9425      	str	r4, [sp, #148]	; 0x94
 801d422:	3b01      	subs	r3, #1
 801d424:	9307      	str	r3, [sp, #28]
 801d426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d428:	3303      	adds	r3, #3
 801d42a:	930a      	str	r3, [sp, #40]	; 0x28
 801d42c:	e683      	b.n	801d136 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d42e:	d026      	beq.n	801d47e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801d430:	9b07      	ldr	r3, [sp, #28]
 801d432:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d434:	3b01      	subs	r3, #1
 801d436:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d438:	fb00 4003 	mla	r0, r0, r3, r4
 801d43c:	1400      	asrs	r0, r0, #16
 801d43e:	f53f ae97 	bmi.w	801d170 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d442:	3901      	subs	r1, #1
 801d444:	4288      	cmp	r0, r1
 801d446:	f6bf ae93 	bge.w	801d170 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d44a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d44c:	fb01 5303 	mla	r3, r1, r3, r5
 801d450:	141b      	asrs	r3, r3, #16
 801d452:	f53f ae8d 	bmi.w	801d170 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d456:	3a01      	subs	r2, #1
 801d458:	4293      	cmp	r3, r2
 801d45a:	f6bf ae89 	bge.w	801d170 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d460:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d464:	f103 0e03 	add.w	lr, r3, #3
 801d468:	f1bb 0f00 	cmp.w	fp, #0
 801d46c:	dc6d      	bgt.n	801d54a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801d46e:	9b07      	ldr	r3, [sp, #28]
 801d470:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d476:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d47a:	4423      	add	r3, r4
 801d47c:	930a      	str	r3, [sp, #40]	; 0x28
 801d47e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d480:	2b00      	cmp	r3, #0
 801d482:	f340 81a0 	ble.w	801d7c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d486:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d48a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d48c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d490:	eeb0 6a62 	vmov.f32	s12, s5
 801d494:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d498:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d49c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4a0:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801d4a4:	eeb0 6a43 	vmov.f32	s12, s6
 801d4a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4ac:	ee16 5a10 	vmov	r5, s12
 801d4b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d4c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d4c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d4c8:	ee12 2a90 	vmov	r2, s5
 801d4cc:	eef0 2a47 	vmov.f32	s5, s14
 801d4d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4d4:	ee13 2a10 	vmov	r2, s6
 801d4d8:	9327      	str	r3, [sp, #156]	; 0x9c
 801d4da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d4dc:	eeb0 3a67 	vmov.f32	s6, s15
 801d4e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4e4:	9328      	str	r3, [sp, #160]	; 0xa0
 801d4e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d4e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d4ea:	3b01      	subs	r3, #1
 801d4ec:	9316      	str	r3, [sp, #88]	; 0x58
 801d4ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d4f0:	bf08      	it	eq
 801d4f2:	4613      	moveq	r3, r2
 801d4f4:	9307      	str	r3, [sp, #28]
 801d4f6:	e610      	b.n	801d11a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d4f8:	2800      	cmp	r0, #0
 801d4fa:	f43f ae82 	beq.w	801d202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d4fe:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d502:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d506:	9108      	str	r1, [sp, #32]
 801d508:	0e09      	lsrs	r1, r1, #24
 801d50a:	9110      	str	r1, [sp, #64]	; 0x40
 801d50c:	e679      	b.n	801d202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d50e:	f113 0801 	adds.w	r8, r3, #1
 801d512:	f53f af74 	bmi.w	801d3fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d516:	4541      	cmp	r1, r8
 801d518:	f6ff af71 	blt.w	801d3fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d51c:	f11c 0801 	adds.w	r8, ip, #1
 801d520:	f53f af6d 	bmi.w	801d3fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d524:	45c6      	cmp	lr, r8
 801d526:	f6ff af6a 	blt.w	801d3fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d52a:	b209      	sxth	r1, r1
 801d52c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d530:	fa0f f38e 	sxth.w	r3, lr
 801d534:	9100      	str	r1, [sp, #0]
 801d536:	4639      	mov	r1, r7
 801d538:	9301      	str	r3, [sp, #4]
 801d53a:	4633      	mov	r3, r6
 801d53c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801d540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d542:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d544:	f7ff fca3 	bl	801ce8e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801d548:	e759      	b.n	801d3fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d54a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d54c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d550:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d552:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d556:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d558:	1427      	asrs	r7, r4, #16
 801d55a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d55c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d560:	142b      	asrs	r3, r5, #16
 801d562:	fb01 7303 	mla	r3, r1, r3, r7
 801d566:	18e7      	adds	r7, r4, r3
 801d568:	5ce3      	ldrb	r3, [r4, r3]
 801d56a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d56e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d572:	2a00      	cmp	r2, #0
 801d574:	f000 811d 	beq.w	801d7b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801d578:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d57c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d580:	940d      	str	r4, [sp, #52]	; 0x34
 801d582:	0e24      	lsrs	r4, r4, #24
 801d584:	9414      	str	r4, [sp, #80]	; 0x50
 801d586:	b170      	cbz	r0, 801d5a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d588:	eb07 0801 	add.w	r8, r7, r1
 801d58c:	5c79      	ldrb	r1, [r7, r1]
 801d58e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d592:	9109      	str	r1, [sp, #36]	; 0x24
 801d594:	0e09      	lsrs	r1, r1, #24
 801d596:	9111      	str	r1, [sp, #68]	; 0x44
 801d598:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d59c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d5a0:	910e      	str	r1, [sp, #56]	; 0x38
 801d5a2:	0e09      	lsrs	r1, r1, #24
 801d5a4:	9115      	str	r1, [sp, #84]	; 0x54
 801d5a6:	b292      	uxth	r2, r2
 801d5a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d5aa:	b280      	uxth	r0, r0
 801d5ac:	fb02 f900 	mul.w	r9, r2, r0
 801d5b0:	0112      	lsls	r2, r2, #4
 801d5b2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d5b6:	eba2 0809 	sub.w	r8, r2, r9
 801d5ba:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801d5be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5c0:	b280      	uxth	r0, r0
 801d5c2:	fa1f f888 	uxth.w	r8, r8
 801d5c6:	1a09      	subs	r1, r1, r0
 801d5c8:	fb08 f202 	mul.w	r2, r8, r2
 801d5cc:	b289      	uxth	r1, r1
 801d5ce:	fb01 220c 	mla	r2, r1, ip, r2
 801d5d2:	fb00 2204 	mla	r2, r0, r4, r2
 801d5d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d5d8:	fb09 2204 	mla	r2, r9, r4, r2
 801d5dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d5e0:	2a00      	cmp	r2, #0
 801d5e2:	f000 80db 	beq.w	801d79c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801d5e6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d5ea:	d019      	beq.n	801d620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801d5ec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d5f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d5f4:	fb0c fa0a 	mul.w	sl, ip, sl
 801d5f8:	fb0c fc03 	mul.w	ip, ip, r3
 801d5fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d600:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d604:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d608:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d60c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d610:	4453      	add	r3, sl
 801d612:	0a3f      	lsrs	r7, r7, #8
 801d614:	0a1b      	lsrs	r3, r3, #8
 801d616:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d61a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d61e:	433b      	orrs	r3, r7
 801d620:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d622:	2cff      	cmp	r4, #255	; 0xff
 801d624:	d020      	beq.n	801d668 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801d626:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d628:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d62c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d62e:	4367      	muls	r7, r4
 801d630:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d632:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d636:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d63a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d63c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d640:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d644:	fb04 fa0a 	mul.w	sl, r4, sl
 801d648:	44bc      	add	ip, r7
 801d64a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d64e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d652:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d656:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d65a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d65e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d662:	ea4c 040a 	orr.w	r4, ip, sl
 801d666:	940d      	str	r4, [sp, #52]	; 0x34
 801d668:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d66a:	2cff      	cmp	r4, #255	; 0xff
 801d66c:	d020      	beq.n	801d6b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801d66e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d670:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d674:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d676:	4367      	muls	r7, r4
 801d678:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d67a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d67e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d682:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d684:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d688:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d68c:	fb04 fa0a 	mul.w	sl, r4, sl
 801d690:	44bc      	add	ip, r7
 801d692:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d696:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d69a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d69e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d6a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d6aa:	ea4c 040a 	orr.w	r4, ip, sl
 801d6ae:	9409      	str	r4, [sp, #36]	; 0x24
 801d6b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d6b2:	2cff      	cmp	r4, #255	; 0xff
 801d6b4:	d020      	beq.n	801d6f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801d6b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d6b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d6bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d6be:	4367      	muls	r7, r4
 801d6c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d6c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d6c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d6ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d6cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d6d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6d4:	fb04 fa0a 	mul.w	sl, r4, sl
 801d6d8:	44bc      	add	ip, r7
 801d6da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d6de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d6e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d6ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d6f2:	ea4c 040a 	orr.w	r4, ip, sl
 801d6f6:	940e      	str	r4, [sp, #56]	; 0x38
 801d6f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d6fa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d6fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d702:	43d2      	mvns	r2, r2
 801d704:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d708:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d70a:	b2d2      	uxtb	r2, r2
 801d70c:	fb08 f707 	mul.w	r7, r8, r7
 801d710:	fb01 770c 	mla	r7, r1, ip, r7
 801d714:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d718:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d71a:	fb00 770c 	mla	r7, r0, ip, r7
 801d71e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d722:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d724:	fb09 770c 	mla	r7, r9, ip, r7
 801d728:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d72c:	fb08 f80c 	mul.w	r8, r8, ip
 801d730:	0a3f      	lsrs	r7, r7, #8
 801d732:	fb01 8303 	mla	r3, r1, r3, r8
 801d736:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d738:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d73c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801d740:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d742:	fb00 330a 	mla	r3, r0, sl, r3
 801d746:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801d74a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d74e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d752:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d756:	fb03 f102 	mul.w	r1, r3, r2
 801d75a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d75e:	1c4b      	adds	r3, r1, #1
 801d760:	ea47 070c 	orr.w	r7, r7, ip
 801d764:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d768:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801d76c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d770:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801d774:	4353      	muls	r3, r2
 801d776:	1c59      	adds	r1, r3, #1
 801d778:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d77c:	0a3b      	lsrs	r3, r7, #8
 801d77e:	0c3f      	lsrs	r7, r7, #16
 801d780:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d784:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d788:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d78c:	435a      	muls	r2, r3
 801d78e:	1c53      	adds	r3, r2, #1
 801d790:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d794:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d798:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d79c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d79e:	f10e 0e03 	add.w	lr, lr, #3
 801d7a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d7a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d7a8:	441a      	add	r2, r3
 801d7aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d7ac:	9225      	str	r2, [sp, #148]	; 0x94
 801d7ae:	441d      	add	r5, r3
 801d7b0:	e65a      	b.n	801d468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d7b2:	2800      	cmp	r0, #0
 801d7b4:	f43f aef7 	beq.w	801d5a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d7b8:	5c79      	ldrb	r1, [r7, r1]
 801d7ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d7be:	9109      	str	r1, [sp, #36]	; 0x24
 801d7c0:	0e09      	lsrs	r1, r1, #24
 801d7c2:	9111      	str	r1, [sp, #68]	; 0x44
 801d7c4:	e6ef      	b.n	801d5a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d7c6:	b01b      	add	sp, #108	; 0x6c
 801d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d7cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7d0:	b08d      	sub	sp, #52	; 0x34
 801d7d2:	468b      	mov	fp, r1
 801d7d4:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801d7d8:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801d7dc:	fb0c 5703 	mla	r7, ip, r3, r5
 801d7e0:	f1bc 0f00 	cmp.w	ip, #0
 801d7e4:	910b      	str	r1, [sp, #44]	; 0x2c
 801d7e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d7ea:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d7ee:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801d7f2:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801d7f6:	eb02 0607 	add.w	r6, r2, r7
 801d7fa:	f89b 4000 	ldrb.w	r4, [fp]
 801d7fe:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d802:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801d806:	f2c0 80c1 	blt.w	801d98c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d80a:	45e6      	cmp	lr, ip
 801d80c:	f340 80be 	ble.w	801d98c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d810:	2d00      	cmp	r5, #0
 801d812:	f2c0 80b7 	blt.w	801d984 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d816:	42ab      	cmp	r3, r5
 801d818:	f340 80b4 	ble.w	801d984 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d81c:	5dd2      	ldrb	r2, [r2, r7]
 801d81e:	9205      	str	r2, [sp, #20]
 801d820:	7872      	ldrb	r2, [r6, #1]
 801d822:	9206      	str	r2, [sp, #24]
 801d824:	78b2      	ldrb	r2, [r6, #2]
 801d826:	9207      	str	r2, [sp, #28]
 801d828:	1c6a      	adds	r2, r5, #1
 801d82a:	f100 80b6 	bmi.w	801d99a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d82e:	4293      	cmp	r3, r2
 801d830:	f340 80b3 	ble.w	801d99a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d834:	f1b8 0f00 	cmp.w	r8, #0
 801d838:	f000 80af 	beq.w	801d99a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d83c:	78f2      	ldrb	r2, [r6, #3]
 801d83e:	9201      	str	r2, [sp, #4]
 801d840:	7932      	ldrb	r2, [r6, #4]
 801d842:	9202      	str	r2, [sp, #8]
 801d844:	7972      	ldrb	r2, [r6, #5]
 801d846:	9203      	str	r2, [sp, #12]
 801d848:	f11c 0c01 	adds.w	ip, ip, #1
 801d84c:	f100 80ad 	bmi.w	801d9aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d850:	45e6      	cmp	lr, ip
 801d852:	f340 80aa 	ble.w	801d9aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d856:	f1ba 0f00 	cmp.w	sl, #0
 801d85a:	f000 80a6 	beq.w	801d9aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d85e:	2d00      	cmp	r5, #0
 801d860:	f2c0 809f 	blt.w	801d9a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d864:	42ab      	cmp	r3, r5
 801d866:	f340 809c 	ble.w	801d9a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d86a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d86e:	f816 9002 	ldrb.w	r9, [r6, r2]
 801d872:	2203      	movs	r2, #3
 801d874:	fb03 6c02 	mla	ip, r3, r2, r6
 801d878:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801d87c:	f89c e002 	ldrb.w	lr, [ip, #2]
 801d880:	9704      	str	r7, [sp, #16]
 801d882:	3501      	adds	r5, #1
 801d884:	f100 8098 	bmi.w	801d9b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d888:	42ab      	cmp	r3, r5
 801d88a:	f340 8095 	ble.w	801d9b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d88e:	f1b8 0f00 	cmp.w	r8, #0
 801d892:	f000 8091 	beq.w	801d9b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d896:	f04f 0c03 	mov.w	ip, #3
 801d89a:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801d89e:	5cb5      	ldrb	r5, [r6, r2]
 801d8a0:	fb03 620c 	mla	r2, r3, ip, r6
 801d8a4:	fb03 630c 	mla	r3, r3, ip, r6
 801d8a8:	7912      	ldrb	r2, [r2, #4]
 801d8aa:	795e      	ldrb	r6, [r3, #5]
 801d8ac:	fa1f f388 	uxth.w	r3, r8
 801d8b0:	fa1f fc8a 	uxth.w	ip, sl
 801d8b4:	fb03 f70c 	mul.w	r7, r3, ip
 801d8b8:	011b      	lsls	r3, r3, #4
 801d8ba:	9708      	str	r7, [sp, #32]
 801d8bc:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801d8c0:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801d8c4:	1bdb      	subs	r3, r3, r7
 801d8c6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801d8ca:	fa1f fc8c 	uxth.w	ip, ip
 801d8ce:	b29b      	uxth	r3, r3
 801d8d0:	9709      	str	r7, [sp, #36]	; 0x24
 801d8d2:	ebaa 0a0c 	sub.w	sl, sl, ip
 801d8d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d8d8:	930a      	str	r3, [sp, #40]	; 0x28
 801d8da:	fa1f fa8a 	uxth.w	sl, sl
 801d8de:	ea6f 0807 	mvn.w	r8, r7
 801d8e2:	9f01      	ldr	r7, [sp, #4]
 801d8e4:	435f      	muls	r7, r3
 801d8e6:	9b05      	ldr	r3, [sp, #20]
 801d8e8:	fa5f f888 	uxtb.w	r8, r8
 801d8ec:	fb0a 7703 	mla	r7, sl, r3, r7
 801d8f0:	9b08      	ldr	r3, [sp, #32]
 801d8f2:	fb14 f408 	smulbb	r4, r4, r8
 801d8f6:	fb0c 7709 	mla	r7, ip, r9, r7
 801d8fa:	fb10 f008 	smulbb	r0, r0, r8
 801d8fe:	fb11 f108 	smulbb	r1, r1, r8
 801d902:	fb03 7705 	mla	r7, r3, r5, r7
 801d906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d908:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d90c:	fb07 4703 	mla	r7, r7, r3, r4
 801d910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d912:	b2bf      	uxth	r7, r7
 801d914:	1c7c      	adds	r4, r7, #1
 801d916:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801d91a:	1224      	asrs	r4, r4, #8
 801d91c:	f88b 4000 	strb.w	r4, [fp]
 801d920:	9c02      	ldr	r4, [sp, #8]
 801d922:	435c      	muls	r4, r3
 801d924:	9b06      	ldr	r3, [sp, #24]
 801d926:	fb0a 4403 	mla	r4, sl, r3, r4
 801d92a:	9b04      	ldr	r3, [sp, #16]
 801d92c:	fb0c 4403 	mla	r4, ip, r3, r4
 801d930:	9b08      	ldr	r3, [sp, #32]
 801d932:	fb03 4402 	mla	r4, r3, r2, r4
 801d936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d93a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d93e:	fb04 0403 	mla	r4, r4, r3, r0
 801d942:	9b03      	ldr	r3, [sp, #12]
 801d944:	435a      	muls	r2, r3
 801d946:	b2a4      	uxth	r4, r4
 801d948:	4613      	mov	r3, r2
 801d94a:	9a07      	ldr	r2, [sp, #28]
 801d94c:	1c60      	adds	r0, r4, #1
 801d94e:	fb0a 3a02 	mla	sl, sl, r2, r3
 801d952:	9b08      	ldr	r3, [sp, #32]
 801d954:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801d958:	fb0c ac0e 	mla	ip, ip, lr, sl
 801d95c:	1224      	asrs	r4, r4, #8
 801d95e:	fb03 c606 	mla	r6, r3, r6, ip
 801d962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d964:	f88b 4001 	strb.w	r4, [fp, #1]
 801d968:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d96c:	fb06 1103 	mla	r1, r6, r3, r1
 801d970:	b289      	uxth	r1, r1
 801d972:	1c4e      	adds	r6, r1, #1
 801d974:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801d978:	1209      	asrs	r1, r1, #8
 801d97a:	f88b 1002 	strb.w	r1, [fp, #2]
 801d97e:	b00d      	add	sp, #52	; 0x34
 801d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d988:	9405      	str	r4, [sp, #20]
 801d98a:	e74d      	b.n	801d828 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801d98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d990:	9401      	str	r4, [sp, #4]
 801d992:	9405      	str	r4, [sp, #20]
 801d994:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d998:	e756      	b.n	801d848 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d99a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d99e:	9401      	str	r4, [sp, #4]
 801d9a0:	e752      	b.n	801d848 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d9a2:	468e      	mov	lr, r1
 801d9a4:	9004      	str	r0, [sp, #16]
 801d9a6:	46a1      	mov	r9, r4
 801d9a8:	e76b      	b.n	801d882 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801d9aa:	460e      	mov	r6, r1
 801d9ac:	4602      	mov	r2, r0
 801d9ae:	4625      	mov	r5, r4
 801d9b0:	468e      	mov	lr, r1
 801d9b2:	9004      	str	r0, [sp, #16]
 801d9b4:	46a1      	mov	r9, r4
 801d9b6:	e779      	b.n	801d8ac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801d9b8:	460e      	mov	r6, r1
 801d9ba:	4602      	mov	r2, r0
 801d9bc:	4625      	mov	r5, r4
 801d9be:	e775      	b.n	801d8ac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801d9c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9c4:	b09f      	sub	sp, #124	; 0x7c
 801d9c6:	920e      	str	r2, [sp, #56]	; 0x38
 801d9c8:	9307      	str	r3, [sp, #28]
 801d9ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d9cc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d9d0:	901d      	str	r0, [sp, #116]	; 0x74
 801d9d2:	930c      	str	r3, [sp, #48]	; 0x30
 801d9d4:	6850      	ldr	r0, [r2, #4]
 801d9d6:	910b      	str	r1, [sp, #44]	; 0x2c
 801d9d8:	6812      	ldr	r2, [r2, #0]
 801d9da:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801d9de:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801d9e2:	fb00 1303 	mla	r3, r0, r3, r1
 801d9e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9ea:	18d3      	adds	r3, r2, r3
 801d9ec:	9308      	str	r3, [sp, #32]
 801d9ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	930a      	str	r3, [sp, #40]	; 0x28
 801d9f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d9f6:	43db      	mvns	r3, r3
 801d9f8:	b2db      	uxtb	r3, r3
 801d9fa:	9309      	str	r3, [sp, #36]	; 0x24
 801d9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	dc03      	bgt.n	801da0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801da02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801da04:	2b00      	cmp	r3, #0
 801da06:	f340 81f5 	ble.w	801ddf4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801da0a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801da0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801da10:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801da14:	1e48      	subs	r0, r1, #1
 801da16:	1e54      	subs	r4, r2, #1
 801da18:	9b07      	ldr	r3, [sp, #28]
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	f340 80d5 	ble.w	801dbca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801da20:	ea5f 452a 	movs.w	r5, sl, asr #16
 801da24:	ea4f 4328 	mov.w	r3, r8, asr #16
 801da28:	d406      	bmi.n	801da38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801da2a:	4285      	cmp	r5, r0
 801da2c:	da04      	bge.n	801da38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801da2e:	2b00      	cmp	r3, #0
 801da30:	db02      	blt.n	801da38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801da32:	42a3      	cmp	r3, r4
 801da34:	f2c0 80ca 	blt.w	801dbcc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801da38:	3501      	adds	r5, #1
 801da3a:	f100 80bb 	bmi.w	801dbb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801da3e:	42a9      	cmp	r1, r5
 801da40:	f2c0 80b8 	blt.w	801dbb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801da44:	3301      	adds	r3, #1
 801da46:	f100 80b5 	bmi.w	801dbb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801da4a:	429a      	cmp	r2, r3
 801da4c:	f2c0 80b2 	blt.w	801dbb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801da50:	9b07      	ldr	r3, [sp, #28]
 801da52:	9d08      	ldr	r5, [sp, #32]
 801da54:	930d      	str	r3, [sp, #52]	; 0x34
 801da56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da58:	2b00      	cmp	r3, #0
 801da5a:	f340 80d6 	ble.w	801dc0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801da5e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801da60:	ea4f 4428 	mov.w	r4, r8, asr #16
 801da64:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801da66:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801da6a:	68c6      	ldr	r6, [r0, #12]
 801da6c:	ea5f 402a 	movs.w	r0, sl, asr #16
 801da70:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801da74:	689b      	ldr	r3, [r3, #8]
 801da76:	f100 810f 	bmi.w	801dc98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801da7a:	1e5f      	subs	r7, r3, #1
 801da7c:	42b8      	cmp	r0, r7
 801da7e:	f280 810b 	bge.w	801dc98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801da82:	2c00      	cmp	r4, #0
 801da84:	f2c0 8108 	blt.w	801dc98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801da88:	1e77      	subs	r7, r6, #1
 801da8a:	42bc      	cmp	r4, r7
 801da8c:	f280 8104 	bge.w	801dc98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801da90:	b21b      	sxth	r3, r3
 801da92:	fb04 0003 	mla	r0, r4, r3, r0
 801da96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801da98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801da9c:	1826      	adds	r6, r4, r0
 801da9e:	5c24      	ldrb	r4, [r4, r0]
 801daa0:	78b7      	ldrb	r7, [r6, #2]
 801daa2:	7870      	ldrb	r0, [r6, #1]
 801daa4:	970f      	str	r7, [sp, #60]	; 0x3c
 801daa6:	7977      	ldrb	r7, [r6, #5]
 801daa8:	f896 e003 	ldrb.w	lr, [r6, #3]
 801daac:	f896 c004 	ldrb.w	ip, [r6, #4]
 801dab0:	9710      	str	r7, [sp, #64]	; 0x40
 801dab2:	b1c9      	cbz	r1, 801dae8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801dab4:	f04f 0b03 	mov.w	fp, #3
 801dab8:	f06f 0904 	mvn.w	r9, #4
 801dabc:	3605      	adds	r6, #5
 801dabe:	fb13 930b 	smlabb	r3, r3, fp, r9
 801dac2:	eb06 0b03 	add.w	fp, r6, r3
 801dac6:	5cf3      	ldrb	r3, [r6, r3]
 801dac8:	9311      	str	r3, [sp, #68]	; 0x44
 801daca:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801dace:	9313      	str	r3, [sp, #76]	; 0x4c
 801dad0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801dad4:	9315      	str	r3, [sp, #84]	; 0x54
 801dad6:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801dada:	9312      	str	r3, [sp, #72]	; 0x48
 801dadc:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801dae0:	9314      	str	r3, [sp, #80]	; 0x50
 801dae2:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801dae6:	9316      	str	r3, [sp, #88]	; 0x58
 801dae8:	b292      	uxth	r2, r2
 801daea:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801daec:	b289      	uxth	r1, r1
 801daee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801daf2:	fb02 f601 	mul.w	r6, r2, r1
 801daf6:	0112      	lsls	r2, r2, #4
 801daf8:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801dafc:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801db00:	1b92      	subs	r2, r2, r6
 801db02:	b289      	uxth	r1, r1
 801db04:	b292      	uxth	r2, r2
 801db06:	eba9 0901 	sub.w	r9, r9, r1
 801db0a:	fb02 fe0e 	mul.w	lr, r2, lr
 801db0e:	fa1f f989 	uxth.w	r9, r9
 801db12:	fb02 fc0c 	mul.w	ip, r2, ip
 801db16:	fb09 e404 	mla	r4, r9, r4, lr
 801db1a:	f895 e000 	ldrb.w	lr, [r5]
 801db1e:	fb09 c000 	mla	r0, r9, r0, ip
 801db22:	fb01 4407 	mla	r4, r1, r7, r4
 801db26:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801db28:	fb06 4407 	mla	r4, r6, r7, r4
 801db2c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801db2e:	fb1e fe07 	smulbb	lr, lr, r7
 801db32:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801db36:	fb04 e403 	mla	r4, r4, r3, lr
 801db3a:	b2a4      	uxth	r4, r4
 801db3c:	f104 0e01 	add.w	lr, r4, #1
 801db40:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801db44:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801db46:	fb01 0004 	mla	r0, r1, r4, r0
 801db4a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801db4c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801db50:	fb06 0004 	mla	r0, r6, r4, r0
 801db54:	786c      	ldrb	r4, [r5, #1]
 801db56:	f885 e000 	strb.w	lr, [r5]
 801db5a:	fb14 f407 	smulbb	r4, r4, r7
 801db5e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801db62:	fb00 4003 	mla	r0, r0, r3, r4
 801db66:	b280      	uxth	r0, r0
 801db68:	1c44      	adds	r4, r0, #1
 801db6a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801db6e:	1200      	asrs	r0, r0, #8
 801db70:	7068      	strb	r0, [r5, #1]
 801db72:	9810      	ldr	r0, [sp, #64]	; 0x40
 801db74:	4342      	muls	r2, r0
 801db76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801db78:	fb09 2200 	mla	r2, r9, r0, r2
 801db7c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801db7e:	fb01 2100 	mla	r1, r1, r0, r2
 801db82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801db84:	fb06 1602 	mla	r6, r6, r2, r1
 801db88:	78a9      	ldrb	r1, [r5, #2]
 801db8a:	fb11 f107 	smulbb	r1, r1, r7
 801db8e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801db92:	fb06 1303 	mla	r3, r6, r3, r1
 801db96:	b29b      	uxth	r3, r3
 801db98:	1c5e      	adds	r6, r3, #1
 801db9a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801db9e:	121b      	asrs	r3, r3, #8
 801dba0:	70ab      	strb	r3, [r5, #2]
 801dba2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801dba4:	3503      	adds	r5, #3
 801dba6:	449a      	add	sl, r3
 801dba8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dbaa:	4498      	add	r8, r3
 801dbac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dbae:	3b01      	subs	r3, #1
 801dbb0:	930d      	str	r3, [sp, #52]	; 0x34
 801dbb2:	e750      	b.n	801da56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dbb4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801dbb6:	449a      	add	sl, r3
 801dbb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dbba:	4498      	add	r8, r3
 801dbbc:	9b07      	ldr	r3, [sp, #28]
 801dbbe:	3b01      	subs	r3, #1
 801dbc0:	9307      	str	r3, [sp, #28]
 801dbc2:	9b08      	ldr	r3, [sp, #32]
 801dbc4:	3303      	adds	r3, #3
 801dbc6:	9308      	str	r3, [sp, #32]
 801dbc8:	e726      	b.n	801da18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801dbca:	d026      	beq.n	801dc1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801dbcc:	9b07      	ldr	r3, [sp, #28]
 801dbce:	982b      	ldr	r0, [sp, #172]	; 0xac
 801dbd0:	3b01      	subs	r3, #1
 801dbd2:	fb00 a003 	mla	r0, r0, r3, sl
 801dbd6:	1400      	asrs	r0, r0, #16
 801dbd8:	f53f af3a 	bmi.w	801da50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dbdc:	3901      	subs	r1, #1
 801dbde:	4288      	cmp	r0, r1
 801dbe0:	f6bf af36 	bge.w	801da50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dbe4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801dbe6:	fb01 8303 	mla	r3, r1, r3, r8
 801dbea:	141b      	asrs	r3, r3, #16
 801dbec:	f53f af30 	bmi.w	801da50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dbf0:	3a01      	subs	r2, #1
 801dbf2:	4293      	cmp	r3, r2
 801dbf4:	f6bf af2c 	bge.w	801da50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dbf8:	9b08      	ldr	r3, [sp, #32]
 801dbfa:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801dbfe:	1cdd      	adds	r5, r3, #3
 801dc00:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801dc04:	f1bc 0f00 	cmp.w	ip, #0
 801dc08:	dc5f      	bgt.n	801dcca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801dc0a:	9b07      	ldr	r3, [sp, #28]
 801dc0c:	9a08      	ldr	r2, [sp, #32]
 801dc0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc16:	441a      	add	r2, r3
 801dc18:	9208      	str	r2, [sp, #32]
 801dc1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	f340 80e9 	ble.w	801ddf4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801dc22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dc26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc28:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc30:	eef0 6a62 	vmov.f32	s13, s5
 801dc34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dc38:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dc40:	ee16 aa90 	vmov	sl, s13
 801dc44:	eef0 6a43 	vmov.f32	s13, s6
 801dc48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dc4c:	ee16 8a90 	vmov	r8, s13
 801dc50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc54:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc58:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc68:	ee12 2a90 	vmov	r2, s5
 801dc6c:	eef0 2a47 	vmov.f32	s5, s14
 801dc70:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc74:	ee13 2a10 	vmov	r2, s6
 801dc78:	932b      	str	r3, [sp, #172]	; 0xac
 801dc7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc7c:	eeb0 3a67 	vmov.f32	s6, s15
 801dc80:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc84:	932c      	str	r3, [sp, #176]	; 0xb0
 801dc86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dc8a:	3b01      	subs	r3, #1
 801dc8c:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc90:	bf08      	it	eq
 801dc92:	4613      	moveq	r3, r2
 801dc94:	9307      	str	r3, [sp, #28]
 801dc96:	e6b1      	b.n	801d9fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dc98:	1c47      	adds	r7, r0, #1
 801dc9a:	d482      	bmi.n	801dba2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dc9c:	42bb      	cmp	r3, r7
 801dc9e:	db80      	blt.n	801dba2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dca0:	1c67      	adds	r7, r4, #1
 801dca2:	f53f af7e 	bmi.w	801dba2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dca6:	42be      	cmp	r6, r7
 801dca8:	f6ff af7b 	blt.w	801dba2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dcac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801dcae:	b236      	sxth	r6, r6
 801dcb0:	9001      	str	r0, [sp, #4]
 801dcb2:	b21b      	sxth	r3, r3
 801dcb4:	9600      	str	r6, [sp, #0]
 801dcb6:	981d      	ldr	r0, [sp, #116]	; 0x74
 801dcb8:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801dcbc:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801dcc0:	4629      	mov	r1, r5
 801dcc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dcc4:	f7ff fd82 	bl	801d7cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801dcc8:	e76b      	b.n	801dba2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dcca:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801dccc:	ea4f 402a 	mov.w	r0, sl, asr #16
 801dcd0:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801dcd4:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801dcd8:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801dcdc:	ea4f 4128 	mov.w	r1, r8, asr #16
 801dce0:	fb07 0101 	mla	r1, r7, r1, r0
 801dce4:	980a      	ldr	r0, [sp, #40]	; 0x28
 801dce6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dcea:	1844      	adds	r4, r0, r1
 801dcec:	5c40      	ldrb	r0, [r0, r1]
 801dcee:	78a6      	ldrb	r6, [r4, #2]
 801dcf0:	7861      	ldrb	r1, [r4, #1]
 801dcf2:	960f      	str	r6, [sp, #60]	; 0x3c
 801dcf4:	78e6      	ldrb	r6, [r4, #3]
 801dcf6:	910d      	str	r1, [sp, #52]	; 0x34
 801dcf8:	9610      	str	r6, [sp, #64]	; 0x40
 801dcfa:	f894 9004 	ldrb.w	r9, [r4, #4]
 801dcfe:	f894 b005 	ldrb.w	fp, [r4, #5]
 801dd02:	b192      	cbz	r2, 801dd2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801dd04:	f06f 0604 	mvn.w	r6, #4
 801dd08:	2103      	movs	r1, #3
 801dd0a:	3405      	adds	r4, #5
 801dd0c:	fb17 6701 	smlabb	r7, r7, r1, r6
 801dd10:	19e6      	adds	r6, r4, r7
 801dd12:	5de4      	ldrb	r4, [r4, r7]
 801dd14:	9417      	str	r4, [sp, #92]	; 0x5c
 801dd16:	7874      	ldrb	r4, [r6, #1]
 801dd18:	9419      	str	r4, [sp, #100]	; 0x64
 801dd1a:	78b4      	ldrb	r4, [r6, #2]
 801dd1c:	941b      	str	r4, [sp, #108]	; 0x6c
 801dd1e:	78f4      	ldrb	r4, [r6, #3]
 801dd20:	9418      	str	r4, [sp, #96]	; 0x60
 801dd22:	7934      	ldrb	r4, [r6, #4]
 801dd24:	941a      	str	r4, [sp, #104]	; 0x68
 801dd26:	7974      	ldrb	r4, [r6, #5]
 801dd28:	941c      	str	r4, [sp, #112]	; 0x70
 801dd2a:	b29b      	uxth	r3, r3
 801dd2c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801dd2e:	b292      	uxth	r2, r2
 801dd30:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dd32:	3503      	adds	r5, #3
 801dd34:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dd38:	fb03 f402 	mul.w	r4, r3, r2
 801dd3c:	011b      	lsls	r3, r3, #4
 801dd3e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801dd42:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801dd46:	1b1b      	subs	r3, r3, r4
 801dd48:	b292      	uxth	r2, r2
 801dd4a:	b29b      	uxth	r3, r3
 801dd4c:	1ab6      	subs	r6, r6, r2
 801dd4e:	435f      	muls	r7, r3
 801dd50:	b2b6      	uxth	r6, r6
 801dd52:	fb03 f909 	mul.w	r9, r3, r9
 801dd56:	fb03 fb0b 	mul.w	fp, r3, fp
 801dd5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd5c:	fb06 7000 	mla	r0, r6, r0, r7
 801dd60:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801dd62:	fb06 bb03 	mla	fp, r6, r3, fp
 801dd66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dd68:	fb02 0007 	mla	r0, r2, r7, r0
 801dd6c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801dd6e:	fb02 bb03 	mla	fp, r2, r3, fp
 801dd72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dd74:	fb04 0007 	mla	r0, r4, r7, r0
 801dd78:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801dd7c:	fb17 f701 	smulbb	r7, r7, r1
 801dd80:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dd84:	990d      	ldr	r1, [sp, #52]	; 0x34
 801dd86:	fb00 700e 	mla	r0, r0, lr, r7
 801dd8a:	fb06 9101 	mla	r1, r6, r1, r9
 801dd8e:	b280      	uxth	r0, r0
 801dd90:	1c47      	adds	r7, r0, #1
 801dd92:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801dd96:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dd98:	1200      	asrs	r0, r0, #8
 801dd9a:	f805 0c06 	strb.w	r0, [r5, #-6]
 801dd9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801dda0:	fb02 1100 	mla	r1, r2, r0, r1
 801dda4:	981a      	ldr	r0, [sp, #104]	; 0x68
 801dda6:	fb04 1100 	mla	r1, r4, r0, r1
 801ddaa:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801ddae:	fb04 b403 	mla	r4, r4, r3, fp
 801ddb2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801ddb6:	fb10 f007 	smulbb	r0, r0, r7
 801ddba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ddbe:	fb13 f307 	smulbb	r3, r3, r7
 801ddc2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ddc6:	fb01 010e 	mla	r1, r1, lr, r0
 801ddca:	fb04 340e 	mla	r4, r4, lr, r3
 801ddce:	b289      	uxth	r1, r1
 801ddd0:	b2a4      	uxth	r4, r4
 801ddd2:	1c48      	adds	r0, r1, #1
 801ddd4:	1c63      	adds	r3, r4, #1
 801ddd6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ddda:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ddde:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801dde0:	1209      	asrs	r1, r1, #8
 801dde2:	1224      	asrs	r4, r4, #8
 801dde4:	449a      	add	sl, r3
 801dde6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dde8:	f805 1c05 	strb.w	r1, [r5, #-5]
 801ddec:	f805 4c04 	strb.w	r4, [r5, #-4]
 801ddf0:	4498      	add	r8, r3
 801ddf2:	e707      	b.n	801dc04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ddf4:	b01f      	add	sp, #124	; 0x7c
 801ddf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ddfa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801ddfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddfe:	b087      	sub	sp, #28
 801de00:	780d      	ldrb	r5, [r1, #0]
 801de02:	784c      	ldrb	r4, [r1, #1]
 801de04:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801de08:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801de0c:	9004      	str	r0, [sp, #16]
 801de0e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801de12:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801de16:	9005      	str	r0, [sp, #20]
 801de18:	fb06 bc03 	mla	ip, r6, r3, fp
 801de1c:	2e00      	cmp	r6, #0
 801de1e:	7888      	ldrb	r0, [r1, #2]
 801de20:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801de24:	eb02 090c 	add.w	r9, r2, ip
 801de28:	f2c0 8084 	blt.w	801df34 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801de2c:	42b7      	cmp	r7, r6
 801de2e:	f340 8081 	ble.w	801df34 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801de32:	f1bb 0f00 	cmp.w	fp, #0
 801de36:	db79      	blt.n	801df2c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801de38:	455b      	cmp	r3, fp
 801de3a:	dd77      	ble.n	801df2c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801de3c:	f812 200c 	ldrb.w	r2, [r2, ip]
 801de40:	9201      	str	r2, [sp, #4]
 801de42:	f899 2001 	ldrb.w	r2, [r9, #1]
 801de46:	9202      	str	r2, [sp, #8]
 801de48:	f899 2002 	ldrb.w	r2, [r9, #2]
 801de4c:	9203      	str	r2, [sp, #12]
 801de4e:	f11b 0201 	adds.w	r2, fp, #1
 801de52:	d476      	bmi.n	801df42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801de54:	4293      	cmp	r3, r2
 801de56:	dd74      	ble.n	801df42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801de58:	9a04      	ldr	r2, [sp, #16]
 801de5a:	2a00      	cmp	r2, #0
 801de5c:	d071      	beq.n	801df42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801de5e:	f899 8003 	ldrb.w	r8, [r9, #3]
 801de62:	f899 c004 	ldrb.w	ip, [r9, #4]
 801de66:	f899 a005 	ldrb.w	sl, [r9, #5]
 801de6a:	3601      	adds	r6, #1
 801de6c:	d471      	bmi.n	801df52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801de6e:	42b7      	cmp	r7, r6
 801de70:	dd6f      	ble.n	801df52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801de72:	9a05      	ldr	r2, [sp, #20]
 801de74:	2a00      	cmp	r2, #0
 801de76:	d06c      	beq.n	801df52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801de78:	f1bb 0f00 	cmp.w	fp, #0
 801de7c:	db65      	blt.n	801df4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801de7e:	455b      	cmp	r3, fp
 801de80:	dd63      	ble.n	801df4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801de82:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801de86:	f819 e002 	ldrb.w	lr, [r9, r2]
 801de8a:	2203      	movs	r2, #3
 801de8c:	fb03 9602 	mla	r6, r3, r2, r9
 801de90:	7877      	ldrb	r7, [r6, #1]
 801de92:	78b6      	ldrb	r6, [r6, #2]
 801de94:	f11b 0b01 	adds.w	fp, fp, #1
 801de98:	d40c      	bmi.n	801deb4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801de9a:	455b      	cmp	r3, fp
 801de9c:	dd0a      	ble.n	801deb4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801de9e:	9a04      	ldr	r2, [sp, #16]
 801dea0:	b142      	cbz	r2, 801deb4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801dea2:	2203      	movs	r2, #3
 801dea4:	fb13 2002 	smlabb	r0, r3, r2, r2
 801dea8:	f819 5000 	ldrb.w	r5, [r9, r0]
 801deac:	fb03 9002 	mla	r0, r3, r2, r9
 801deb0:	7904      	ldrb	r4, [r0, #4]
 801deb2:	7940      	ldrb	r0, [r0, #5]
 801deb4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801deb8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801debc:	fb03 fb02 	mul.w	fp, r3, r2
 801dec0:	011b      	lsls	r3, r3, #4
 801dec2:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801dec6:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801deca:	eba3 030b 	sub.w	r3, r3, fp
 801dece:	b292      	uxth	r2, r2
 801ded0:	b29b      	uxth	r3, r3
 801ded2:	eba9 0902 	sub.w	r9, r9, r2
 801ded6:	9304      	str	r3, [sp, #16]
 801ded8:	fa1f f989 	uxth.w	r9, r9
 801dedc:	fb03 f808 	mul.w	r8, r3, r8
 801dee0:	9b01      	ldr	r3, [sp, #4]
 801dee2:	fb09 8803 	mla	r8, r9, r3, r8
 801dee6:	9b04      	ldr	r3, [sp, #16]
 801dee8:	fb03 fc0c 	mul.w	ip, r3, ip
 801deec:	9b02      	ldr	r3, [sp, #8]
 801deee:	fb02 880e 	mla	r8, r2, lr, r8
 801def2:	fb09 cc03 	mla	ip, r9, r3, ip
 801def6:	9b04      	ldr	r3, [sp, #16]
 801def8:	fb0b 8805 	mla	r8, fp, r5, r8
 801defc:	fb02 c707 	mla	r7, r2, r7, ip
 801df00:	fb03 f30a 	mul.w	r3, r3, sl
 801df04:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df08:	fb0b 7404 	mla	r4, fp, r4, r7
 801df0c:	f881 8000 	strb.w	r8, [r1]
 801df10:	1224      	asrs	r4, r4, #8
 801df12:	704c      	strb	r4, [r1, #1]
 801df14:	9c03      	ldr	r4, [sp, #12]
 801df16:	fb09 3904 	mla	r9, r9, r4, r3
 801df1a:	fb02 9206 	mla	r2, r2, r6, r9
 801df1e:	fb0b 2000 	mla	r0, fp, r0, r2
 801df22:	1200      	asrs	r0, r0, #8
 801df24:	7088      	strb	r0, [r1, #2]
 801df26:	b007      	add	sp, #28
 801df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df2c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801df30:	9501      	str	r5, [sp, #4]
 801df32:	e78c      	b.n	801de4e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801df34:	4682      	mov	sl, r0
 801df36:	46a4      	mov	ip, r4
 801df38:	46a8      	mov	r8, r5
 801df3a:	9501      	str	r5, [sp, #4]
 801df3c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801df40:	e793      	b.n	801de6a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801df42:	4682      	mov	sl, r0
 801df44:	46a4      	mov	ip, r4
 801df46:	46a8      	mov	r8, r5
 801df48:	e78f      	b.n	801de6a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801df4a:	4606      	mov	r6, r0
 801df4c:	4627      	mov	r7, r4
 801df4e:	46ae      	mov	lr, r5
 801df50:	e7a0      	b.n	801de94 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801df52:	4606      	mov	r6, r0
 801df54:	4627      	mov	r7, r4
 801df56:	46ae      	mov	lr, r5
 801df58:	e7ac      	b.n	801deb4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801df5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df5e:	b09b      	sub	sp, #108	; 0x6c
 801df60:	920b      	str	r2, [sp, #44]	; 0x2c
 801df62:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801df64:	9019      	str	r0, [sp, #100]	; 0x64
 801df66:	9109      	str	r1, [sp, #36]	; 0x24
 801df68:	6850      	ldr	r0, [r2, #4]
 801df6a:	9306      	str	r3, [sp, #24]
 801df6c:	6812      	ldr	r2, [r2, #0]
 801df6e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801df72:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801df76:	fb00 1303 	mla	r3, r0, r3, r1
 801df7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df7e:	18d3      	adds	r3, r2, r3
 801df80:	9307      	str	r3, [sp, #28]
 801df82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	9308      	str	r3, [sp, #32]
 801df88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	dc03      	bgt.n	801df96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801df8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df90:	2b00      	cmp	r3, #0
 801df92:	f340 81ab 	ble.w	801e2ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801df96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801df98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df9c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dfa0:	1e48      	subs	r0, r1, #1
 801dfa2:	1e55      	subs	r5, r2, #1
 801dfa4:	9b06      	ldr	r3, [sp, #24]
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	f340 80b1 	ble.w	801e10e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dfac:	ea5f 462b 	movs.w	r6, fp, asr #16
 801dfb0:	ea4f 4324 	mov.w	r3, r4, asr #16
 801dfb4:	d406      	bmi.n	801dfc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dfb6:	4286      	cmp	r6, r0
 801dfb8:	da04      	bge.n	801dfc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	db02      	blt.n	801dfc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dfbe:	42ab      	cmp	r3, r5
 801dfc0:	f2c0 80a6 	blt.w	801e110 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801dfc4:	3601      	adds	r6, #1
 801dfc6:	f100 8097 	bmi.w	801e0f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dfca:	42b1      	cmp	r1, r6
 801dfcc:	f2c0 8094 	blt.w	801e0f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dfd0:	3301      	adds	r3, #1
 801dfd2:	f100 8091 	bmi.w	801e0f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dfd6:	429a      	cmp	r2, r3
 801dfd8:	f2c0 808e 	blt.w	801e0f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dfdc:	9b06      	ldr	r3, [sp, #24]
 801dfde:	9e07      	ldr	r6, [sp, #28]
 801dfe0:	930a      	str	r3, [sp, #40]	; 0x28
 801dfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	f340 80b0 	ble.w	801e14a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dfea:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801dfec:	1425      	asrs	r5, r4, #16
 801dfee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dff0:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801dff4:	68c7      	ldr	r7, [r0, #12]
 801dff6:	ea5f 402b 	movs.w	r0, fp, asr #16
 801dffa:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801dffe:	689b      	ldr	r3, [r3, #8]
 801e000:	f100 80ea 	bmi.w	801e1d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e004:	f103 3cff 	add.w	ip, r3, #4294967295
 801e008:	4560      	cmp	r0, ip
 801e00a:	f280 80e5 	bge.w	801e1d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e00e:	2d00      	cmp	r5, #0
 801e010:	f2c0 80e2 	blt.w	801e1d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e014:	f107 3cff 	add.w	ip, r7, #4294967295
 801e018:	4565      	cmp	r5, ip
 801e01a:	f280 80dd 	bge.w	801e1d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e01e:	b21b      	sxth	r3, r3
 801e020:	fb05 0003 	mla	r0, r5, r3, r0
 801e024:	9d08      	ldr	r5, [sp, #32]
 801e026:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e02a:	182f      	adds	r7, r5, r0
 801e02c:	5c2d      	ldrb	r5, [r5, r0]
 801e02e:	7878      	ldrb	r0, [r7, #1]
 801e030:	f897 e002 	ldrb.w	lr, [r7, #2]
 801e034:	900c      	str	r0, [sp, #48]	; 0x30
 801e036:	f897 9003 	ldrb.w	r9, [r7, #3]
 801e03a:	f897 8004 	ldrb.w	r8, [r7, #4]
 801e03e:	f897 a005 	ldrb.w	sl, [r7, #5]
 801e042:	b1c9      	cbz	r1, 801e078 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e044:	f04f 0c03 	mov.w	ip, #3
 801e048:	f06f 0004 	mvn.w	r0, #4
 801e04c:	3705      	adds	r7, #5
 801e04e:	fb13 030c 	smlabb	r3, r3, ip, r0
 801e052:	eb07 0c03 	add.w	ip, r7, r3
 801e056:	5cfb      	ldrb	r3, [r7, r3]
 801e058:	930d      	str	r3, [sp, #52]	; 0x34
 801e05a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e05e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e060:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e064:	9311      	str	r3, [sp, #68]	; 0x44
 801e066:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e06a:	930e      	str	r3, [sp, #56]	; 0x38
 801e06c:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801e070:	9310      	str	r3, [sp, #64]	; 0x40
 801e072:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801e076:	9312      	str	r3, [sp, #72]	; 0x48
 801e078:	b292      	uxth	r2, r2
 801e07a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e07c:	b289      	uxth	r1, r1
 801e07e:	fb02 f301 	mul.w	r3, r2, r1
 801e082:	0112      	lsls	r2, r2, #4
 801e084:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e088:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801e08c:	1ad2      	subs	r2, r2, r3
 801e08e:	b289      	uxth	r1, r1
 801e090:	b292      	uxth	r2, r2
 801e092:	1a7f      	subs	r7, r7, r1
 801e094:	fb02 f909 	mul.w	r9, r2, r9
 801e098:	b2bf      	uxth	r7, r7
 801e09a:	fb02 f808 	mul.w	r8, r2, r8
 801e09e:	fb02 fa0a 	mul.w	sl, r2, sl
 801e0a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e0a4:	fb07 9905 	mla	r9, r7, r5, r9
 801e0a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e0aa:	fb07 8800 	mla	r8, r7, r0, r8
 801e0ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e0b0:	fb07 aa0e 	mla	sl, r7, lr, sl
 801e0b4:	fb01 9905 	mla	r9, r1, r5, r9
 801e0b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e0ba:	fb01 8800 	mla	r8, r1, r0, r8
 801e0be:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e0c0:	fb01 a102 	mla	r1, r1, r2, sl
 801e0c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e0c6:	fb03 9905 	mla	r9, r3, r5, r9
 801e0ca:	fb03 8800 	mla	r8, r3, r0, r8
 801e0ce:	fb03 1302 	mla	r3, r3, r2, r1
 801e0d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e0d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e0da:	121b      	asrs	r3, r3, #8
 801e0dc:	f886 9000 	strb.w	r9, [r6]
 801e0e0:	f886 8001 	strb.w	r8, [r6, #1]
 801e0e4:	70b3      	strb	r3, [r6, #2]
 801e0e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e0e8:	3603      	adds	r6, #3
 801e0ea:	449b      	add	fp, r3
 801e0ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e0ee:	441c      	add	r4, r3
 801e0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0f2:	3b01      	subs	r3, #1
 801e0f4:	930a      	str	r3, [sp, #40]	; 0x28
 801e0f6:	e774      	b.n	801dfe2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e0f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e0fa:	449b      	add	fp, r3
 801e0fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e0fe:	441c      	add	r4, r3
 801e100:	9b06      	ldr	r3, [sp, #24]
 801e102:	3b01      	subs	r3, #1
 801e104:	9306      	str	r3, [sp, #24]
 801e106:	9b07      	ldr	r3, [sp, #28]
 801e108:	3303      	adds	r3, #3
 801e10a:	9307      	str	r3, [sp, #28]
 801e10c:	e74a      	b.n	801dfa4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e10e:	d024      	beq.n	801e15a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e110:	9b06      	ldr	r3, [sp, #24]
 801e112:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e114:	3b01      	subs	r3, #1
 801e116:	fb00 b003 	mla	r0, r0, r3, fp
 801e11a:	1400      	asrs	r0, r0, #16
 801e11c:	f53f af5e 	bmi.w	801dfdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e120:	3901      	subs	r1, #1
 801e122:	4288      	cmp	r0, r1
 801e124:	f6bf af5a 	bge.w	801dfdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e128:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e12a:	fb01 4303 	mla	r3, r1, r3, r4
 801e12e:	141b      	asrs	r3, r3, #16
 801e130:	f53f af54 	bmi.w	801dfdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e134:	3a01      	subs	r2, #1
 801e136:	4293      	cmp	r3, r2
 801e138:	f6bf af50 	bge.w	801dfdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e13c:	9b07      	ldr	r3, [sp, #28]
 801e13e:	f8dd e018 	ldr.w	lr, [sp, #24]
 801e142:	1cde      	adds	r6, r3, #3
 801e144:	f1be 0f00 	cmp.w	lr, #0
 801e148:	dc5f      	bgt.n	801e20a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e14a:	9b06      	ldr	r3, [sp, #24]
 801e14c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e150:	9b07      	ldr	r3, [sp, #28]
 801e152:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e156:	4423      	add	r3, r4
 801e158:	9307      	str	r3, [sp, #28]
 801e15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	f340 80c5 	ble.w	801e2ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e166:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e168:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e16c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e170:	eef0 6a62 	vmov.f32	s13, s5
 801e174:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e178:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e17c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e180:	ee16 ba90 	vmov	fp, s13
 801e184:	eef0 6a43 	vmov.f32	s13, s6
 801e188:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e18c:	ee16 4a90 	vmov	r4, s13
 801e190:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e194:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e198:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e19c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e1a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e1a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e1a8:	ee12 2a90 	vmov	r2, s5
 801e1ac:	eef0 2a47 	vmov.f32	s5, s14
 801e1b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1b4:	ee13 2a10 	vmov	r2, s6
 801e1b8:	9327      	str	r3, [sp, #156]	; 0x9c
 801e1ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e1bc:	eeb0 3a67 	vmov.f32	s6, s15
 801e1c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1c4:	9328      	str	r3, [sp, #160]	; 0xa0
 801e1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e1ca:	3b01      	subs	r3, #1
 801e1cc:	9309      	str	r3, [sp, #36]	; 0x24
 801e1ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e1d0:	bf08      	it	eq
 801e1d2:	4613      	moveq	r3, r2
 801e1d4:	9306      	str	r3, [sp, #24]
 801e1d6:	e6d7      	b.n	801df88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e1d8:	f110 0c01 	adds.w	ip, r0, #1
 801e1dc:	d483      	bmi.n	801e0e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e1de:	4563      	cmp	r3, ip
 801e1e0:	db81      	blt.n	801e0e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e1e2:	f115 0c01 	adds.w	ip, r5, #1
 801e1e6:	f53f af7e 	bmi.w	801e0e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e1ea:	4567      	cmp	r7, ip
 801e1ec:	f6ff af7b 	blt.w	801e0e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e1f0:	b23f      	sxth	r7, r7
 801e1f2:	b21b      	sxth	r3, r3
 801e1f4:	9700      	str	r7, [sp, #0]
 801e1f6:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801e1fa:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801e1fe:	9a08      	ldr	r2, [sp, #32]
 801e200:	4631      	mov	r1, r6
 801e202:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e204:	f7ff fdf9 	bl	801ddfa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801e208:	e76d      	b.n	801e0e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e20a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e20c:	ea4f 402b 	mov.w	r0, fp, asr #16
 801e210:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801e214:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e218:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e21c:	1421      	asrs	r1, r4, #16
 801e21e:	930a      	str	r3, [sp, #40]	; 0x28
 801e220:	fb0c 0101 	mla	r1, ip, r1, r0
 801e224:	9808      	ldr	r0, [sp, #32]
 801e226:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e22a:	1845      	adds	r5, r0, r1
 801e22c:	5c40      	ldrb	r0, [r0, r1]
 801e22e:	796f      	ldrb	r7, [r5, #5]
 801e230:	7869      	ldrb	r1, [r5, #1]
 801e232:	f895 8002 	ldrb.w	r8, [r5, #2]
 801e236:	f895 a003 	ldrb.w	sl, [r5, #3]
 801e23a:	f895 9004 	ldrb.w	r9, [r5, #4]
 801e23e:	970c      	str	r7, [sp, #48]	; 0x30
 801e240:	b1a2      	cbz	r2, 801e26c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801e242:	2703      	movs	r7, #3
 801e244:	f06f 0304 	mvn.w	r3, #4
 801e248:	3505      	adds	r5, #5
 801e24a:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801e24e:	eb05 070c 	add.w	r7, r5, ip
 801e252:	f815 500c 	ldrb.w	r5, [r5, ip]
 801e256:	9513      	str	r5, [sp, #76]	; 0x4c
 801e258:	787d      	ldrb	r5, [r7, #1]
 801e25a:	9515      	str	r5, [sp, #84]	; 0x54
 801e25c:	78bd      	ldrb	r5, [r7, #2]
 801e25e:	9517      	str	r5, [sp, #92]	; 0x5c
 801e260:	78fd      	ldrb	r5, [r7, #3]
 801e262:	9514      	str	r5, [sp, #80]	; 0x50
 801e264:	793d      	ldrb	r5, [r7, #4]
 801e266:	9516      	str	r5, [sp, #88]	; 0x58
 801e268:	797d      	ldrb	r5, [r7, #5]
 801e26a:	9518      	str	r5, [sp, #96]	; 0x60
 801e26c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801e270:	b292      	uxth	r2, r2
 801e272:	3603      	adds	r6, #3
 801e274:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e278:	fb03 f502 	mul.w	r5, r3, r2
 801e27c:	011b      	lsls	r3, r3, #4
 801e27e:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801e282:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801e286:	1b5b      	subs	r3, r3, r5
 801e288:	b292      	uxth	r2, r2
 801e28a:	b29b      	uxth	r3, r3
 801e28c:	1abf      	subs	r7, r7, r2
 801e28e:	fb03 f909 	mul.w	r9, r3, r9
 801e292:	b2bf      	uxth	r7, r7
 801e294:	fb03 fa0a 	mul.w	sl, r3, sl
 801e298:	fb07 9901 	mla	r9, r7, r1, r9
 801e29c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e29e:	fb07 aa00 	mla	sl, r7, r0, sl
 801e2a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e2a4:	fb02 9901 	mla	r9, r2, r1, r9
 801e2a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e2aa:	fb02 aa00 	mla	sl, r2, r0, sl
 801e2ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e2b0:	fb05 9901 	mla	r9, r5, r1, r9
 801e2b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e2b6:	fb05 aa00 	mla	sl, r5, r0, sl
 801e2ba:	434b      	muls	r3, r1
 801e2bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e2be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e2c2:	fb07 3308 	mla	r3, r7, r8, r3
 801e2c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e2ca:	f806 ac06 	strb.w	sl, [r6, #-6]
 801e2ce:	fb02 3201 	mla	r2, r2, r1, r3
 801e2d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e2d4:	f806 9c05 	strb.w	r9, [r6, #-5]
 801e2d8:	fb05 2503 	mla	r5, r5, r3, r2
 801e2dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e2de:	122d      	asrs	r5, r5, #8
 801e2e0:	449b      	add	fp, r3
 801e2e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e2e4:	f806 5c04 	strb.w	r5, [r6, #-4]
 801e2e8:	441c      	add	r4, r3
 801e2ea:	e72b      	b.n	801e144 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e2ec:	b01b      	add	sp, #108	; 0x6c
 801e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801e2f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2f6:	b087      	sub	sp, #28
 801e2f8:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801e2fc:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801e300:	fb05 7003 	mla	r0, r5, r3, r7
 801e304:	2d00      	cmp	r5, #0
 801e306:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801e30a:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801e30e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801e312:	f2c0 811f 	blt.w	801e554 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801e316:	45a8      	cmp	r8, r5
 801e318:	f340 811c 	ble.w	801e554 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801e31c:	2f00      	cmp	r7, #0
 801e31e:	f2c0 8117 	blt.w	801e550 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801e322:	42bb      	cmp	r3, r7
 801e324:	f340 8114 	ble.w	801e550 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801e328:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801e32c:	1c7a      	adds	r2, r7, #1
 801e32e:	f100 8114 	bmi.w	801e55a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801e332:	4293      	cmp	r3, r2
 801e334:	f340 8111 	ble.w	801e55a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801e338:	2c00      	cmp	r4, #0
 801e33a:	f000 8110 	beq.w	801e55e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801e33e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801e342:	3501      	adds	r5, #1
 801e344:	f100 810f 	bmi.w	801e566 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801e348:	45a8      	cmp	r8, r5
 801e34a:	f340 810c 	ble.w	801e566 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801e34e:	f1be 0f00 	cmp.w	lr, #0
 801e352:	f000 810b 	beq.w	801e56c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801e356:	2f00      	cmp	r7, #0
 801e358:	f2c0 8103 	blt.w	801e562 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801e35c:	42bb      	cmp	r3, r7
 801e35e:	f340 8100 	ble.w	801e562 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801e362:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801e366:	3701      	adds	r7, #1
 801e368:	f100 8103 	bmi.w	801e572 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801e36c:	42bb      	cmp	r3, r7
 801e36e:	f340 8100 	ble.w	801e572 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801e372:	2c00      	cmp	r4, #0
 801e374:	f000 80ff 	beq.w	801e576 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801e378:	3301      	adds	r3, #1
 801e37a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e37e:	fa1f fc84 	uxth.w	ip, r4
 801e382:	fa1f fe8e 	uxth.w	lr, lr
 801e386:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e38a:	fb0c f90e 	mul.w	r9, ip, lr
 801e38e:	0e13      	lsrs	r3, r2, #24
 801e390:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e394:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801e398:	9302      	str	r3, [sp, #8]
 801e39a:	ebac 0709 	sub.w	r7, ip, r9
 801e39e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801e3a2:	fa1f f48e 	uxth.w	r4, lr
 801e3a6:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801e3aa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e3ae:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801e3b2:	fb0a fe0e 	mul.w	lr, sl, lr
 801e3b6:	1b1b      	subs	r3, r3, r4
 801e3b8:	fb0a f606 	mul.w	r6, sl, r6
 801e3bc:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e3c0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e3c4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e3c8:	b29b      	uxth	r3, r3
 801e3ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e3ce:	b2bf      	uxth	r7, r7
 801e3d0:	9301      	str	r3, [sp, #4]
 801e3d2:	44e6      	add	lr, ip
 801e3d4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e3d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e3dc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e3e0:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801e3e4:	9303      	str	r3, [sp, #12]
 801e3e6:	0a33      	lsrs	r3, r6, #8
 801e3e8:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801e3ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e3f0:	9304      	str	r3, [sp, #16]
 801e3f2:	fb0b f606 	mul.w	r6, fp, r6
 801e3f6:	fb0b f000 	mul.w	r0, fp, r0
 801e3fa:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801e3fe:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e402:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e406:	44b6      	add	lr, r6
 801e408:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801e40c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801e410:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801e414:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e418:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e41c:	fb08 f606 	mul.w	r6, r8, r6
 801e420:	0a03      	lsrs	r3, r0, #8
 801e422:	fb08 f505 	mul.w	r5, r8, r5
 801e426:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e42a:	0a30      	lsrs	r0, r6, #8
 801e42c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e430:	9305      	str	r3, [sp, #20]
 801e432:	0e13      	lsrs	r3, r2, #24
 801e434:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e438:	fb0e fe07 	mul.w	lr, lr, r7
 801e43c:	4430      	add	r0, r6
 801e43e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801e442:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e446:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801e44a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e44e:	0a00      	lsrs	r0, r0, #8
 801e450:	435e      	muls	r6, r3
 801e452:	0a2d      	lsrs	r5, r5, #8
 801e454:	435a      	muls	r2, r3
 801e456:	9b03      	ldr	r3, [sp, #12]
 801e458:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801e45c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e460:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e464:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e468:	44b4      	add	ip, r6
 801e46a:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801e46e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e472:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e476:	9e01      	ldr	r6, [sp, #4]
 801e478:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e47c:	fb03 ee06 	mla	lr, r3, r6, lr
 801e480:	9b04      	ldr	r3, [sp, #16]
 801e482:	0a12      	lsrs	r2, r2, #8
 801e484:	fb0c ee09 	mla	lr, ip, r9, lr
 801e488:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801e48c:	9b05      	ldr	r3, [sp, #20]
 801e48e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e492:	fb00 ee04 	mla	lr, r0, r4, lr
 801e496:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e49a:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801e49e:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801e4a2:	9b01      	ldr	r3, [sp, #4]
 801e4a4:	fb07 fe0e 	mul.w	lr, r7, lr
 801e4a8:	fb07 f70b 	mul.w	r7, r7, fp
 801e4ac:	fb03 ee06 	mla	lr, r3, r6, lr
 801e4b0:	fb03 730a 	mla	r3, r3, sl, r7
 801e4b4:	fb09 e202 	mla	r2, r9, r2, lr
 801e4b8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801e4bc:	fb04 2e0e 	mla	lr, r4, lr, r2
 801e4c0:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801e4c4:	fb04 3408 	mla	r4, r4, r8, r3
 801e4c8:	9b02      	ldr	r3, [sp, #8]
 801e4ca:	b292      	uxth	r2, r2
 801e4cc:	fb09 4903 	mla	r9, r9, r3, r4
 801e4d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e4d4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e4d8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e4dc:	fb09 f902 	mul.w	r9, r9, r2
 801e4e0:	ea40 0e0e 	orr.w	lr, r0, lr
 801e4e4:	f109 0301 	add.w	r3, r9, #1
 801e4e8:	fa5f f08e 	uxtb.w	r0, lr
 801e4ec:	fb10 f002 	smulbb	r0, r0, r2
 801e4f0:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e4f4:	780b      	ldrb	r3, [r1, #0]
 801e4f6:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801e4fa:	fa5f f989 	uxtb.w	r9, r9
 801e4fe:	fb03 0309 	mla	r3, r3, r9, r0
 801e502:	b29b      	uxth	r3, r3
 801e504:	1c58      	adds	r0, r3, #1
 801e506:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e50a:	7848      	ldrb	r0, [r1, #1]
 801e50c:	fb10 f009 	smulbb	r0, r0, r9
 801e510:	121b      	asrs	r3, r3, #8
 801e512:	700b      	strb	r3, [r1, #0]
 801e514:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801e518:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e51c:	fb03 0302 	mla	r3, r3, r2, r0
 801e520:	b29b      	uxth	r3, r3
 801e522:	1c58      	adds	r0, r3, #1
 801e524:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e528:	121b      	asrs	r3, r3, #8
 801e52a:	704b      	strb	r3, [r1, #1]
 801e52c:	788b      	ldrb	r3, [r1, #2]
 801e52e:	fb13 f909 	smulbb	r9, r3, r9
 801e532:	fb0e 9e02 	mla	lr, lr, r2, r9
 801e536:	fa1f fe8e 	uxth.w	lr, lr
 801e53a:	f10e 0301 	add.w	r3, lr, #1
 801e53e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801e542:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e546:	f881 e002 	strb.w	lr, [r1, #2]
 801e54a:	b007      	add	sp, #28
 801e54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e550:	2600      	movs	r6, #0
 801e552:	e6eb      	b.n	801e32c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801e554:	2000      	movs	r0, #0
 801e556:	4606      	mov	r6, r0
 801e558:	e6f3      	b.n	801e342 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e55a:	2000      	movs	r0, #0
 801e55c:	e6f1      	b.n	801e342 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e55e:	4620      	mov	r0, r4
 801e560:	e6ef      	b.n	801e342 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e562:	2500      	movs	r5, #0
 801e564:	e6ff      	b.n	801e366 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801e566:	2200      	movs	r2, #0
 801e568:	4615      	mov	r5, r2
 801e56a:	e708      	b.n	801e37e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e56c:	4672      	mov	r2, lr
 801e56e:	4675      	mov	r5, lr
 801e570:	e705      	b.n	801e37e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e572:	2200      	movs	r2, #0
 801e574:	e703      	b.n	801e37e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e576:	4622      	mov	r2, r4
 801e578:	e701      	b.n	801e37e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801e57a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e57a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e57e:	b09d      	sub	sp, #116	; 0x74
 801e580:	9219      	str	r2, [sp, #100]	; 0x64
 801e582:	9307      	str	r3, [sp, #28]
 801e584:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e586:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801e58a:	901b      	str	r0, [sp, #108]	; 0x6c
 801e58c:	931a      	str	r3, [sp, #104]	; 0x68
 801e58e:	6850      	ldr	r0, [r2, #4]
 801e590:	9117      	str	r1, [sp, #92]	; 0x5c
 801e592:	6812      	ldr	r2, [r2, #0]
 801e594:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e598:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801e59c:	fb00 1303 	mla	r3, r0, r3, r1
 801e5a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5a4:	18d3      	adds	r3, r2, r3
 801e5a6:	930a      	str	r3, [sp, #40]	; 0x28
 801e5a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	9310      	str	r3, [sp, #64]	; 0x40
 801e5ae:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801e5b2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e5b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	dc03      	bgt.n	801e5c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e5ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	f340 8368 	ble.w	801ec92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e5c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e5c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e5c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e5cc:	1e48      	subs	r0, r1, #1
 801e5ce:	1e57      	subs	r7, r2, #1
 801e5d0:	9b07      	ldr	r3, [sp, #28]
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	f340 8187 	ble.w	801e8e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e5d8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e5dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e5e0:	d406      	bmi.n	801e5f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e5e2:	4584      	cmp	ip, r0
 801e5e4:	da04      	bge.n	801e5f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	db02      	blt.n	801e5f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e5ea:	42bb      	cmp	r3, r7
 801e5ec:	f2c0 817c 	blt.w	801e8e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e5f0:	f11c 0c01 	adds.w	ip, ip, #1
 801e5f4:	f100 816c 	bmi.w	801e8d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e5f8:	4561      	cmp	r1, ip
 801e5fa:	f2c0 8169 	blt.w	801e8d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e5fe:	3301      	adds	r3, #1
 801e600:	f100 8166 	bmi.w	801e8d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e604:	429a      	cmp	r2, r3
 801e606:	f2c0 8163 	blt.w	801e8d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e60a:	9b07      	ldr	r3, [sp, #28]
 801e60c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e60e:	9318      	str	r3, [sp, #96]	; 0x60
 801e610:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e612:	2b00      	cmp	r3, #0
 801e614:	f340 8186 	ble.w	801e924 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e618:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e61a:	142a      	asrs	r2, r5, #16
 801e61c:	ea4f 4026 	mov.w	r0, r6, asr #16
 801e620:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e624:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e628:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801e62c:	f100 81cb 	bmi.w	801e9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e630:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e634:	4542      	cmp	r2, r8
 801e636:	f280 81c6 	bge.w	801e9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e63a:	2800      	cmp	r0, #0
 801e63c:	f2c0 81c3 	blt.w	801e9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e640:	f103 38ff 	add.w	r8, r3, #4294967295
 801e644:	4540      	cmp	r0, r8
 801e646:	f280 81be 	bge.w	801e9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e64a:	fa0f f38e 	sxth.w	r3, lr
 801e64e:	fb00 2203 	mla	r2, r0, r3, r2
 801e652:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e654:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801e658:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801e65c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801e660:	2900      	cmp	r1, #0
 801e662:	f000 81a6 	beq.w	801e9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801e666:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e66a:	900c      	str	r0, [sp, #48]	; 0x30
 801e66c:	0e00      	lsrs	r0, r0, #24
 801e66e:	9013      	str	r0, [sp, #76]	; 0x4c
 801e670:	f1bc 0f00 	cmp.w	ip, #0
 801e674:	d00f      	beq.n	801e696 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e67a:	3b01      	subs	r3, #1
 801e67c:	009b      	lsls	r3, r3, #2
 801e67e:	3304      	adds	r3, #4
 801e680:	eb08 0003 	add.w	r0, r8, r3
 801e684:	f858 3003 	ldr.w	r3, [r8, r3]
 801e688:	9308      	str	r3, [sp, #32]
 801e68a:	0e1b      	lsrs	r3, r3, #24
 801e68c:	9311      	str	r3, [sp, #68]	; 0x44
 801e68e:	6843      	ldr	r3, [r0, #4]
 801e690:	930d      	str	r3, [sp, #52]	; 0x34
 801e692:	0e1b      	lsrs	r3, r3, #24
 801e694:	9314      	str	r3, [sp, #80]	; 0x50
 801e696:	b289      	uxth	r1, r1
 801e698:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e69a:	fa1f fc8c 	uxth.w	ip, ip
 801e69e:	0108      	lsls	r0, r1, #4
 801e6a0:	fb01 f90c 	mul.w	r9, r1, ip
 801e6a4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801e6a8:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801e6ac:	eba0 0809 	sub.w	r8, r0, r9
 801e6b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e6b2:	fa1f f18c 	uxth.w	r1, ip
 801e6b6:	fa1f f888 	uxth.w	r8, r8
 801e6ba:	1a5b      	subs	r3, r3, r1
 801e6bc:	fb08 f000 	mul.w	r0, r8, r0
 801e6c0:	b29b      	uxth	r3, r3
 801e6c2:	fb03 000e 	mla	r0, r3, lr, r0
 801e6c6:	fb01 0004 	mla	r0, r1, r4, r0
 801e6ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e6cc:	fb09 0004 	mla	r0, r9, r4, r0
 801e6d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e6d4:	2800      	cmp	r0, #0
 801e6d6:	f000 80f2 	beq.w	801e8be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e6da:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e6de:	d01b      	beq.n	801e718 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e6e0:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801e6e4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e6e8:	fb0e fa0a 	mul.w	sl, lr, sl
 801e6ec:	fb0e fe02 	mul.w	lr, lr, r2
 801e6f0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801e6f4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e6f8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e6fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e700:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e704:	4452      	add	r2, sl
 801e706:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e70a:	0a12      	lsrs	r2, r2, #8
 801e70c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e710:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e714:	ea42 020c 	orr.w	r2, r2, ip
 801e718:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e71a:	2cff      	cmp	r4, #255	; 0xff
 801e71c:	d021      	beq.n	801e762 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e71e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e720:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e724:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e726:	fb04 fb0b 	mul.w	fp, r4, fp
 801e72a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e72c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e730:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e732:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e736:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e73a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e73e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e742:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e746:	44de      	add	lr, fp
 801e748:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e74c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e750:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e754:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e758:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e75c:	ea4e 040a 	orr.w	r4, lr, sl
 801e760:	940c      	str	r4, [sp, #48]	; 0x30
 801e762:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e764:	2cff      	cmp	r4, #255	; 0xff
 801e766:	d021      	beq.n	801e7ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801e768:	9c08      	ldr	r4, [sp, #32]
 801e76a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e76e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e770:	fb04 fb0b 	mul.w	fp, r4, fp
 801e774:	9c08      	ldr	r4, [sp, #32]
 801e776:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e77a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e77c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e780:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e784:	fb04 fa0a 	mul.w	sl, r4, sl
 801e788:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e78c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e790:	44de      	add	lr, fp
 801e792:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e796:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e79a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e79e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e7a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e7a6:	ea4e 040a 	orr.w	r4, lr, sl
 801e7aa:	9408      	str	r4, [sp, #32]
 801e7ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e7ae:	2cff      	cmp	r4, #255	; 0xff
 801e7b0:	d021      	beq.n	801e7f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e7b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e7b4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e7b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e7ba:	fb04 fb0b 	mul.w	fp, r4, fp
 801e7be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e7c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e7c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e7c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e7ca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e7ce:	fb04 fa0a 	mul.w	sl, r4, sl
 801e7d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e7d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e7da:	44de      	add	lr, fp
 801e7dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e7e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e7e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e7e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e7ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e7f0:	ea4e 040a 	orr.w	r4, lr, sl
 801e7f4:	940d      	str	r4, [sp, #52]	; 0x34
 801e7f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e7f8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801e7fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e800:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e804:	9c08      	ldr	r4, [sp, #32]
 801e806:	fb08 fc0c 	mul.w	ip, r8, ip
 801e80a:	fb03 cc0e 	mla	ip, r3, lr, ip
 801e80e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e812:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e814:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e818:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e81c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e81e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e822:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e826:	fb08 f80e 	mul.w	r8, r8, lr
 801e82a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e82e:	fb03 8202 	mla	r2, r3, r2, r8
 801e832:	9b08      	ldr	r3, [sp, #32]
 801e834:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e838:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801e83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e83e:	fb01 220a 	mla	r2, r1, sl, r2
 801e842:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801e846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e848:	fb09 2901 	mla	r9, r9, r1, r2
 801e84c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e84e:	4343      	muls	r3, r0
 801e850:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e854:	1c58      	adds	r0, r3, #1
 801e856:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e85a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e85e:	783b      	ldrb	r3, [r7, #0]
 801e860:	ea4c 0c09 	orr.w	ip, ip, r9
 801e864:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e868:	fa5f f28c 	uxtb.w	r2, ip
 801e86c:	b2c0      	uxtb	r0, r0
 801e86e:	fb12 f201 	smulbb	r2, r2, r1
 801e872:	fb03 2300 	mla	r3, r3, r0, r2
 801e876:	b29b      	uxth	r3, r3
 801e878:	1c5a      	adds	r2, r3, #1
 801e87a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e87e:	787a      	ldrb	r2, [r7, #1]
 801e880:	fb12 f200 	smulbb	r2, r2, r0
 801e884:	121b      	asrs	r3, r3, #8
 801e886:	703b      	strb	r3, [r7, #0]
 801e888:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e88c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e890:	fb03 2301 	mla	r3, r3, r1, r2
 801e894:	b29b      	uxth	r3, r3
 801e896:	1c5a      	adds	r2, r3, #1
 801e898:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e89c:	121b      	asrs	r3, r3, #8
 801e89e:	707b      	strb	r3, [r7, #1]
 801e8a0:	78bb      	ldrb	r3, [r7, #2]
 801e8a2:	fb13 f000 	smulbb	r0, r3, r0
 801e8a6:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e8aa:	fa1f fc8c 	uxth.w	ip, ip
 801e8ae:	f10c 0301 	add.w	r3, ip, #1
 801e8b2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e8b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e8ba:	f887 c002 	strb.w	ip, [r7, #2]
 801e8be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e8c0:	3703      	adds	r7, #3
 801e8c2:	441d      	add	r5, r3
 801e8c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e8c6:	441e      	add	r6, r3
 801e8c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e8ca:	3b01      	subs	r3, #1
 801e8cc:	9318      	str	r3, [sp, #96]	; 0x60
 801e8ce:	e69f      	b.n	801e610 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e8d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e8d2:	441d      	add	r5, r3
 801e8d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e8d6:	441e      	add	r6, r3
 801e8d8:	9b07      	ldr	r3, [sp, #28]
 801e8da:	3b01      	subs	r3, #1
 801e8dc:	9307      	str	r3, [sp, #28]
 801e8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8e0:	3303      	adds	r3, #3
 801e8e2:	930a      	str	r3, [sp, #40]	; 0x28
 801e8e4:	e674      	b.n	801e5d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e8e6:	d025      	beq.n	801e934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801e8e8:	9b07      	ldr	r3, [sp, #28]
 801e8ea:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801e8ec:	3b01      	subs	r3, #1
 801e8ee:	fb00 5003 	mla	r0, r0, r3, r5
 801e8f2:	1400      	asrs	r0, r0, #16
 801e8f4:	f53f ae89 	bmi.w	801e60a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8f8:	3901      	subs	r1, #1
 801e8fa:	4288      	cmp	r0, r1
 801e8fc:	f6bf ae85 	bge.w	801e60a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e900:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e902:	fb01 6303 	mla	r3, r1, r3, r6
 801e906:	141b      	asrs	r3, r3, #16
 801e908:	f53f ae7f 	bmi.w	801e60a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e90c:	3a01      	subs	r2, #1
 801e90e:	4293      	cmp	r3, r2
 801e910:	f6bf ae7b 	bge.w	801e60a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e916:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e91a:	f103 0e03 	add.w	lr, r3, #3
 801e91e:	f1bb 0f00 	cmp.w	fp, #0
 801e922:	dc6e      	bgt.n	801ea02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801e924:	9b07      	ldr	r3, [sp, #28]
 801e926:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e92c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e930:	4423      	add	r3, r4
 801e932:	930a      	str	r3, [sp, #40]	; 0x28
 801e934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e936:	2b00      	cmp	r3, #0
 801e938:	f340 81ab 	ble.w	801ec92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e93c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e940:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e942:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e946:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e94a:	eef0 6a62 	vmov.f32	s13, s5
 801e94e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e952:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e956:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e95a:	ee16 5a90 	vmov	r5, s13
 801e95e:	eef0 6a43 	vmov.f32	s13, s6
 801e962:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e966:	ee16 6a90 	vmov	r6, s13
 801e96a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e96e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e972:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e976:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e97a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e97e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e982:	ee12 2a90 	vmov	r2, s5
 801e986:	eef0 2a47 	vmov.f32	s5, s14
 801e98a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e98e:	ee13 2a10 	vmov	r2, s6
 801e992:	9329      	str	r3, [sp, #164]	; 0xa4
 801e994:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e996:	eeb0 3a67 	vmov.f32	s6, s15
 801e99a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e99e:	932a      	str	r3, [sp, #168]	; 0xa8
 801e9a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e9a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e9a4:	3b01      	subs	r3, #1
 801e9a6:	9317      	str	r3, [sp, #92]	; 0x5c
 801e9a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9aa:	bf08      	it	eq
 801e9ac:	4613      	moveq	r3, r2
 801e9ae:	9307      	str	r3, [sp, #28]
 801e9b0:	e600      	b.n	801e5b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e9b2:	f1bc 0f00 	cmp.w	ip, #0
 801e9b6:	f43f ae6e 	beq.w	801e696 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e9ba:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e9be:	9308      	str	r3, [sp, #32]
 801e9c0:	0e1b      	lsrs	r3, r3, #24
 801e9c2:	9311      	str	r3, [sp, #68]	; 0x44
 801e9c4:	e667      	b.n	801e696 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e9c6:	f112 0801 	adds.w	r8, r2, #1
 801e9ca:	f53f af78 	bmi.w	801e8be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e9ce:	45c6      	cmp	lr, r8
 801e9d0:	f6ff af75 	blt.w	801e8be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e9d4:	f110 0801 	adds.w	r8, r0, #1
 801e9d8:	f53f af71 	bmi.w	801e8be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e9dc:	4543      	cmp	r3, r8
 801e9de:	f6ff af6e 	blt.w	801e8be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e9e2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e9e4:	b21b      	sxth	r3, r3
 801e9e6:	9201      	str	r2, [sp, #4]
 801e9e8:	9300      	str	r3, [sp, #0]
 801e9ea:	fa0f f38e 	sxth.w	r3, lr
 801e9ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e9f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e9f4:	e9cd c404 	strd	ip, r4, [sp, #16]
 801e9f8:	4639      	mov	r1, r7
 801e9fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801e9fc:	f7ff fc79 	bl	801e2f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801ea00:	e75d      	b.n	801e8be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ea02:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ea04:	142f      	asrs	r7, r5, #16
 801ea06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ea08:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ea0c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801ea10:	1433      	asrs	r3, r6, #16
 801ea12:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ea16:	fb02 7303 	mla	r3, r2, r3, r7
 801ea1a:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801ea1e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ea22:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ea26:	2900      	cmp	r1, #0
 801ea28:	f000 812a 	beq.w	801ec80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801ea2c:	687c      	ldr	r4, [r7, #4]
 801ea2e:	940e      	str	r4, [sp, #56]	; 0x38
 801ea30:	0e24      	lsrs	r4, r4, #24
 801ea32:	9415      	str	r4, [sp, #84]	; 0x54
 801ea34:	b178      	cbz	r0, 801ea56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ea36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801ea3a:	3a01      	subs	r2, #1
 801ea3c:	0092      	lsls	r2, r2, #2
 801ea3e:	3204      	adds	r2, #4
 801ea40:	eb07 0802 	add.w	r8, r7, r2
 801ea44:	58ba      	ldr	r2, [r7, r2]
 801ea46:	9209      	str	r2, [sp, #36]	; 0x24
 801ea48:	0e12      	lsrs	r2, r2, #24
 801ea4a:	9212      	str	r2, [sp, #72]	; 0x48
 801ea4c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ea50:	920f      	str	r2, [sp, #60]	; 0x3c
 801ea52:	0e12      	lsrs	r2, r2, #24
 801ea54:	9216      	str	r2, [sp, #88]	; 0x58
 801ea56:	b289      	uxth	r1, r1
 801ea58:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ea5a:	b280      	uxth	r0, r0
 801ea5c:	fb01 f900 	mul.w	r9, r1, r0
 801ea60:	0109      	lsls	r1, r1, #4
 801ea62:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ea66:	eba1 0809 	sub.w	r8, r1, r9
 801ea6a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801ea6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ea70:	b280      	uxth	r0, r0
 801ea72:	fa1f f888 	uxth.w	r8, r8
 801ea76:	1a12      	subs	r2, r2, r0
 801ea78:	fb08 f101 	mul.w	r1, r8, r1
 801ea7c:	b292      	uxth	r2, r2
 801ea7e:	fb02 110c 	mla	r1, r2, ip, r1
 801ea82:	fb00 1104 	mla	r1, r0, r4, r1
 801ea86:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ea88:	fb09 1104 	mla	r1, r9, r4, r1
 801ea8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ea90:	2900      	cmp	r1, #0
 801ea92:	f000 80ec 	beq.w	801ec6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801ea96:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ea9a:	d019      	beq.n	801ead0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801ea9c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801eaa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eaa4:	fb0c fa0a 	mul.w	sl, ip, sl
 801eaa8:	fb0c fc03 	mul.w	ip, ip, r3
 801eaac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801eab0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801eab4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801eab8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eabc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801eac0:	4453      	add	r3, sl
 801eac2:	0a3f      	lsrs	r7, r7, #8
 801eac4:	0a1b      	lsrs	r3, r3, #8
 801eac6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801eaca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eace:	433b      	orrs	r3, r7
 801ead0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ead2:	2cff      	cmp	r4, #255	; 0xff
 801ead4:	d020      	beq.n	801eb18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801ead6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ead8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eadc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eade:	4367      	muls	r7, r4
 801eae0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eae2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eae6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eaea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eaec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801eaf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eaf4:	fb04 fa0a 	mul.w	sl, r4, sl
 801eaf8:	44bc      	add	ip, r7
 801eafa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801eafe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb02:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eb06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eb12:	ea4c 040a 	orr.w	r4, ip, sl
 801eb16:	940e      	str	r4, [sp, #56]	; 0x38
 801eb18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eb1a:	2cff      	cmp	r4, #255	; 0xff
 801eb1c:	d020      	beq.n	801eb60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801eb1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eb20:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eb24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eb26:	4367      	muls	r7, r4
 801eb28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eb2a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eb2e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eb32:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eb34:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801eb38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb3c:	fb04 fa0a 	mul.w	sl, r4, sl
 801eb40:	44bc      	add	ip, r7
 801eb42:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801eb46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb4a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eb4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eb5a:	ea4c 040a 	orr.w	r4, ip, sl
 801eb5e:	9409      	str	r4, [sp, #36]	; 0x24
 801eb60:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801eb62:	2cff      	cmp	r4, #255	; 0xff
 801eb64:	d020      	beq.n	801eba8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801eb66:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801eb68:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eb6c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801eb6e:	4367      	muls	r7, r4
 801eb70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801eb72:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eb76:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eb7a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801eb7c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801eb80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb84:	fb04 fa0a 	mul.w	sl, r4, sl
 801eb88:	44bc      	add	ip, r7
 801eb8a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801eb8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eb96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eba2:	ea4c 040a 	orr.w	r4, ip, sl
 801eba6:	940f      	str	r4, [sp, #60]	; 0x3c
 801eba8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ebaa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ebae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ebb2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ebb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ebb8:	fb08 f707 	mul.w	r7, r8, r7
 801ebbc:	fb02 770c 	mla	r7, r2, ip, r7
 801ebc0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ebc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ebc6:	fb00 770c 	mla	r7, r0, ip, r7
 801ebca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ebce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ebd0:	fb09 770c 	mla	r7, r9, ip, r7
 801ebd4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ebd8:	fb08 f80c 	mul.w	r8, r8, ip
 801ebdc:	0a3f      	lsrs	r7, r7, #8
 801ebde:	fb02 8303 	mla	r3, r2, r3, r8
 801ebe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ebe4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ebe8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ebec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ebee:	fb00 330a 	mla	r3, r0, sl, r3
 801ebf2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ebf6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ebf8:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ebfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebfe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec02:	434b      	muls	r3, r1
 801ec04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ec08:	1c59      	adds	r1, r3, #1
 801ec0a:	ea47 070c 	orr.w	r7, r7, ip
 801ec0e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ec12:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ec16:	b2fa      	uxtb	r2, r7
 801ec18:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ec1c:	fb12 f200 	smulbb	r2, r2, r0
 801ec20:	b2c9      	uxtb	r1, r1
 801ec22:	fb03 2301 	mla	r3, r3, r1, r2
 801ec26:	b29b      	uxth	r3, r3
 801ec28:	1c5a      	adds	r2, r3, #1
 801ec2a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ec2e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ec32:	fb12 f201 	smulbb	r2, r2, r1
 801ec36:	121b      	asrs	r3, r3, #8
 801ec38:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ec3c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ec40:	0c3f      	lsrs	r7, r7, #16
 801ec42:	fb03 2300 	mla	r3, r3, r0, r2
 801ec46:	b29b      	uxth	r3, r3
 801ec48:	1c5a      	adds	r2, r3, #1
 801ec4a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ec4e:	121b      	asrs	r3, r3, #8
 801ec50:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ec54:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ec58:	fb13 f101 	smulbb	r1, r3, r1
 801ec5c:	fb07 1700 	mla	r7, r7, r0, r1
 801ec60:	b2bf      	uxth	r7, r7
 801ec62:	1c79      	adds	r1, r7, #1
 801ec64:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801ec68:	123f      	asrs	r7, r7, #8
 801ec6a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ec6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ec70:	f10e 0e03 	add.w	lr, lr, #3
 801ec74:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ec78:	441d      	add	r5, r3
 801ec7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ec7c:	441e      	add	r6, r3
 801ec7e:	e64e      	b.n	801e91e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801ec80:	2800      	cmp	r0, #0
 801ec82:	f43f aee8 	beq.w	801ea56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ec86:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801ec8a:	9209      	str	r2, [sp, #36]	; 0x24
 801ec8c:	0e12      	lsrs	r2, r2, #24
 801ec8e:	9212      	str	r2, [sp, #72]	; 0x48
 801ec90:	e6e1      	b.n	801ea56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ec92:	b01d      	add	sp, #116	; 0x74
 801ec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec98 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801ec98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec9c:	b087      	sub	sp, #28
 801ec9e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801eca2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801eca6:	fb05 7003 	mla	r0, r5, r3, r7
 801ecaa:	2d00      	cmp	r5, #0
 801ecac:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ecb0:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801ecb4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801ecb8:	f2c0 810a 	blt.w	801eed0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801ecbc:	45a8      	cmp	r8, r5
 801ecbe:	f340 8107 	ble.w	801eed0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801ecc2:	2f00      	cmp	r7, #0
 801ecc4:	f2c0 8102 	blt.w	801eecc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801ecc8:	42bb      	cmp	r3, r7
 801ecca:	f340 80ff 	ble.w	801eecc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801ecce:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801ecd2:	1c7a      	adds	r2, r7, #1
 801ecd4:	f100 80ff 	bmi.w	801eed6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801ecd8:	4293      	cmp	r3, r2
 801ecda:	f340 80fc 	ble.w	801eed6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801ecde:	2c00      	cmp	r4, #0
 801ece0:	f000 80fb 	beq.w	801eeda <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801ece4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801ece8:	3501      	adds	r5, #1
 801ecea:	f100 80fa 	bmi.w	801eee2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801ecee:	45a8      	cmp	r8, r5
 801ecf0:	f340 80f7 	ble.w	801eee2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801ecf4:	f1be 0f00 	cmp.w	lr, #0
 801ecf8:	f000 80f6 	beq.w	801eee8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801ecfc:	2f00      	cmp	r7, #0
 801ecfe:	f2c0 80ee 	blt.w	801eede <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801ed02:	42bb      	cmp	r3, r7
 801ed04:	f340 80eb 	ble.w	801eede <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801ed08:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801ed0c:	3701      	adds	r7, #1
 801ed0e:	f100 80ee 	bmi.w	801eeee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801ed12:	42bb      	cmp	r3, r7
 801ed14:	f340 80eb 	ble.w	801eeee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801ed18:	2c00      	cmp	r4, #0
 801ed1a:	f000 80ea 	beq.w	801eef2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801ed1e:	3301      	adds	r3, #1
 801ed20:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ed24:	fa1f fc84 	uxth.w	ip, r4
 801ed28:	fa1f fe8e 	uxth.w	lr, lr
 801ed2c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ed30:	fb0c f90e 	mul.w	r9, ip, lr
 801ed34:	0e13      	lsrs	r3, r2, #24
 801ed36:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ed3a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ed3e:	9302      	str	r3, [sp, #8]
 801ed40:	ebac 0709 	sub.w	r7, ip, r9
 801ed44:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ed48:	fa1f f48e 	uxth.w	r4, lr
 801ed4c:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801ed50:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ed54:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ed58:	fb0a fe0e 	mul.w	lr, sl, lr
 801ed5c:	1b1b      	subs	r3, r3, r4
 801ed5e:	fb0a f606 	mul.w	r6, sl, r6
 801ed62:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ed66:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ed6a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ed6e:	b29b      	uxth	r3, r3
 801ed70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ed74:	b2bf      	uxth	r7, r7
 801ed76:	9301      	str	r3, [sp, #4]
 801ed78:	44e6      	add	lr, ip
 801ed7a:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ed7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed82:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ed86:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801ed8a:	9303      	str	r3, [sp, #12]
 801ed8c:	0a33      	lsrs	r3, r6, #8
 801ed8e:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801ed92:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ed96:	9304      	str	r3, [sp, #16]
 801ed98:	fb0b f606 	mul.w	r6, fp, r6
 801ed9c:	fb0b f000 	mul.w	r0, fp, r0
 801eda0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801eda4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801eda8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801edac:	44b6      	add	lr, r6
 801edae:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801edb2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801edb6:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801edba:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801edbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801edc2:	fb08 f606 	mul.w	r6, r8, r6
 801edc6:	0a03      	lsrs	r3, r0, #8
 801edc8:	fb08 f505 	mul.w	r5, r8, r5
 801edcc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801edd0:	0a30      	lsrs	r0, r6, #8
 801edd2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801edd6:	9305      	str	r3, [sp, #20]
 801edd8:	0e13      	lsrs	r3, r2, #24
 801edda:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801edde:	fb0e fe07 	mul.w	lr, lr, r7
 801ede2:	4430      	add	r0, r6
 801ede4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801ede8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801edec:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801edf0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801edf4:	0a00      	lsrs	r0, r0, #8
 801edf6:	435e      	muls	r6, r3
 801edf8:	0a2d      	lsrs	r5, r5, #8
 801edfa:	435a      	muls	r2, r3
 801edfc:	9b03      	ldr	r3, [sp, #12]
 801edfe:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ee02:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ee06:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ee0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee0e:	44b4      	add	ip, r6
 801ee10:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801ee14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee18:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801ee1c:	9e01      	ldr	r6, [sp, #4]
 801ee1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee22:	fb03 ee06 	mla	lr, r3, r6, lr
 801ee26:	9b04      	ldr	r3, [sp, #16]
 801ee28:	0a12      	lsrs	r2, r2, #8
 801ee2a:	fb0c ee09 	mla	lr, ip, r9, lr
 801ee2e:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801ee32:	9b05      	ldr	r3, [sp, #20]
 801ee34:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ee38:	fb00 ee04 	mla	lr, r0, r4, lr
 801ee3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee40:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801ee44:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801ee48:	9b01      	ldr	r3, [sp, #4]
 801ee4a:	fb07 fe0e 	mul.w	lr, r7, lr
 801ee4e:	fb07 f70b 	mul.w	r7, r7, fp
 801ee52:	fb03 ee06 	mla	lr, r3, r6, lr
 801ee56:	fb03 730a 	mla	r3, r3, sl, r7
 801ee5a:	fb09 e202 	mla	r2, r9, r2, lr
 801ee5e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801ee62:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ee66:	fb04 3408 	mla	r4, r4, r8, r3
 801ee6a:	9b02      	ldr	r3, [sp, #8]
 801ee6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee70:	fb09 4903 	mla	r9, r9, r3, r4
 801ee74:	780b      	ldrb	r3, [r1, #0]
 801ee76:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ee7a:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801ee7e:	ea40 0e0e 	orr.w	lr, r0, lr
 801ee82:	fa5f f989 	uxtb.w	r9, r9
 801ee86:	fb03 f209 	mul.w	r2, r3, r9
 801ee8a:	1c53      	adds	r3, r2, #1
 801ee8c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ee90:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ee94:	700b      	strb	r3, [r1, #0]
 801ee96:	784b      	ldrb	r3, [r1, #1]
 801ee98:	fb03 f309 	mul.w	r3, r3, r9
 801ee9c:	1c5a      	adds	r2, r3, #1
 801ee9e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801eea2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801eea6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801eeaa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eeae:	704b      	strb	r3, [r1, #1]
 801eeb0:	788b      	ldrb	r3, [r1, #2]
 801eeb2:	fb03 f909 	mul.w	r9, r3, r9
 801eeb6:	f109 0301 	add.w	r3, r9, #1
 801eeba:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801eebe:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801eec2:	f881 e002 	strb.w	lr, [r1, #2]
 801eec6:	b007      	add	sp, #28
 801eec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eecc:	2600      	movs	r6, #0
 801eece:	e700      	b.n	801ecd2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801eed0:	2000      	movs	r0, #0
 801eed2:	4606      	mov	r6, r0
 801eed4:	e708      	b.n	801ece8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eed6:	2000      	movs	r0, #0
 801eed8:	e706      	b.n	801ece8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eeda:	4620      	mov	r0, r4
 801eedc:	e704      	b.n	801ece8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eede:	2500      	movs	r5, #0
 801eee0:	e714      	b.n	801ed0c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801eee2:	2200      	movs	r2, #0
 801eee4:	4615      	mov	r5, r2
 801eee6:	e71d      	b.n	801ed24 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eee8:	4672      	mov	r2, lr
 801eeea:	4675      	mov	r5, lr
 801eeec:	e71a      	b.n	801ed24 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eeee:	2200      	movs	r2, #0
 801eef0:	e718      	b.n	801ed24 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eef2:	4622      	mov	r2, r4
 801eef4:	e716      	b.n	801ed24 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801eef6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eefa:	b099      	sub	sp, #100	; 0x64
 801eefc:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801ef00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ef02:	9017      	str	r0, [sp, #92]	; 0x5c
 801ef04:	9306      	str	r3, [sp, #24]
 801ef06:	6850      	ldr	r0, [r2, #4]
 801ef08:	6812      	ldr	r2, [r2, #0]
 801ef0a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801ef0e:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801ef12:	fb00 1303 	mla	r3, r0, r3, r1
 801ef16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef1a:	18d3      	adds	r3, r2, r3
 801ef1c:	9309      	str	r3, [sp, #36]	; 0x24
 801ef1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	930e      	str	r3, [sp, #56]	; 0x38
 801ef24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	dc03      	bgt.n	801ef32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ef2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	f340 8360 	ble.w	801f5f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801ef32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef34:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef38:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef3c:	1e48      	subs	r0, r1, #1
 801ef3e:	1e57      	subs	r7, r2, #1
 801ef40:	9b06      	ldr	r3, [sp, #24]
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	f340 817b 	ble.w	801f23e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801ef48:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ef4c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ef50:	d406      	bmi.n	801ef60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef52:	4584      	cmp	ip, r0
 801ef54:	da04      	bge.n	801ef60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	db02      	blt.n	801ef60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef5a:	42bb      	cmp	r3, r7
 801ef5c:	f2c0 8170 	blt.w	801f240 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ef60:	f11c 0c01 	adds.w	ip, ip, #1
 801ef64:	f100 8160 	bmi.w	801f228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ef68:	4561      	cmp	r1, ip
 801ef6a:	f2c0 815d 	blt.w	801f228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ef6e:	3301      	adds	r3, #1
 801ef70:	f100 815a 	bmi.w	801f228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ef74:	429a      	cmp	r2, r3
 801ef76:	f2c0 8157 	blt.w	801f228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ef7a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ef7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ef80:	f1b8 0f00 	cmp.w	r8, #0
 801ef84:	f340 8179 	ble.w	801f27a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ef88:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ef8a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ef8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef90:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ef94:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ef98:	142a      	asrs	r2, r5, #16
 801ef9a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ef9e:	689b      	ldr	r3, [r3, #8]
 801efa0:	f100 81be 	bmi.w	801f320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801efa4:	f103 39ff 	add.w	r9, r3, #4294967295
 801efa8:	454a      	cmp	r2, r9
 801efaa:	f280 81b9 	bge.w	801f320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801efae:	f1bc 0f00 	cmp.w	ip, #0
 801efb2:	f2c0 81b5 	blt.w	801f320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801efb6:	f10e 39ff 	add.w	r9, lr, #4294967295
 801efba:	45cc      	cmp	ip, r9
 801efbc:	f280 81b0 	bge.w	801f320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801efc0:	b21b      	sxth	r3, r3
 801efc2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801efc4:	fb0c 2203 	mla	r2, ip, r3, r2
 801efc8:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801efcc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801efd0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801efd4:	2900      	cmp	r1, #0
 801efd6:	f000 8197 	beq.w	801f308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801efda:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801efde:	940a      	str	r4, [sp, #40]	; 0x28
 801efe0:	0e24      	lsrs	r4, r4, #24
 801efe2:	9411      	str	r4, [sp, #68]	; 0x44
 801efe4:	b180      	cbz	r0, 801f008 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801efe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801efea:	3b01      	subs	r3, #1
 801efec:	009b      	lsls	r3, r3, #2
 801efee:	3304      	adds	r3, #4
 801eff0:	eb09 0c03 	add.w	ip, r9, r3
 801eff4:	f859 3003 	ldr.w	r3, [r9, r3]
 801eff8:	9307      	str	r3, [sp, #28]
 801effa:	0e1b      	lsrs	r3, r3, #24
 801effc:	930f      	str	r3, [sp, #60]	; 0x3c
 801effe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f002:	930b      	str	r3, [sp, #44]	; 0x2c
 801f004:	0e1b      	lsrs	r3, r3, #24
 801f006:	9312      	str	r3, [sp, #72]	; 0x48
 801f008:	b289      	uxth	r1, r1
 801f00a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f00c:	b280      	uxth	r0, r0
 801f00e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f010:	fb01 fa00 	mul.w	sl, r1, r0
 801f014:	0109      	lsls	r1, r1, #4
 801f016:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f01a:	eba1 090a 	sub.w	r9, r1, sl
 801f01e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801f022:	b280      	uxth	r0, r0
 801f024:	fa1f f989 	uxth.w	r9, r9
 801f028:	1a09      	subs	r1, r1, r0
 801f02a:	fb09 f303 	mul.w	r3, r9, r3
 801f02e:	b289      	uxth	r1, r1
 801f030:	fb01 330e 	mla	r3, r1, lr, r3
 801f034:	fb00 3304 	mla	r3, r0, r4, r3
 801f038:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f03a:	fb0a 3304 	mla	r3, sl, r4, r3
 801f03e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f042:	2b00      	cmp	r3, #0
 801f044:	f000 80e8 	beq.w	801f218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f048:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f04c:	d01b      	beq.n	801f086 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801f04e:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801f052:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f056:	fb0e fb0b 	mul.w	fp, lr, fp
 801f05a:	fb0e fe02 	mul.w	lr, lr, r2
 801f05e:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801f062:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f066:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f06a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f06e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f072:	445a      	add	r2, fp
 801f074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f078:	0a12      	lsrs	r2, r2, #8
 801f07a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f07e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f082:	ea42 020c 	orr.w	r2, r2, ip
 801f086:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f088:	2cff      	cmp	r4, #255	; 0xff
 801f08a:	d021      	beq.n	801f0d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f08c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f08e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f092:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f094:	fb04 fc0c 	mul.w	ip, r4, ip
 801f098:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f09a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f09e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801f0a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f0a4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f0a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f0ac:	fb04 fb0b 	mul.w	fp, r4, fp
 801f0b0:	44e6      	add	lr, ip
 801f0b2:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801f0b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f0ba:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f0be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f0c2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f0c6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f0ca:	ea4e 040b 	orr.w	r4, lr, fp
 801f0ce:	940a      	str	r4, [sp, #40]	; 0x28
 801f0d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f0d2:	2cff      	cmp	r4, #255	; 0xff
 801f0d4:	d021      	beq.n	801f11a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f0d6:	9c07      	ldr	r4, [sp, #28]
 801f0d8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f0dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f0de:	fb04 fc0c 	mul.w	ip, r4, ip
 801f0e2:	9c07      	ldr	r4, [sp, #28]
 801f0e4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f0e8:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801f0ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f0ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f0f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f0f6:	fb04 fb0b 	mul.w	fp, r4, fp
 801f0fa:	44e6      	add	lr, ip
 801f0fc:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801f100:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f104:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f108:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f10c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f110:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f114:	ea4e 040b 	orr.w	r4, lr, fp
 801f118:	9407      	str	r4, [sp, #28]
 801f11a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f11c:	2cff      	cmp	r4, #255	; 0xff
 801f11e:	d021      	beq.n	801f164 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f120:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f122:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f126:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f128:	fb04 fc0c 	mul.w	ip, r4, ip
 801f12c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f12e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f132:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801f136:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f138:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f13c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f140:	fb04 fb0b 	mul.w	fp, r4, fp
 801f144:	44e6      	add	lr, ip
 801f146:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801f14a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f14e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f152:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f156:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f15a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f15e:	ea4e 040b 	orr.w	r4, lr, fp
 801f162:	940b      	str	r4, [sp, #44]	; 0x2c
 801f164:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f166:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f16a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f16e:	2bff      	cmp	r3, #255	; 0xff
 801f170:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f174:	9c07      	ldr	r4, [sp, #28]
 801f176:	fb09 fc0c 	mul.w	ip, r9, ip
 801f17a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f17e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f182:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f184:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f188:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f18c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f18e:	fb0a cc0e 	mla	ip, sl, lr, ip
 801f192:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f196:	fb09 f90e 	mul.w	r9, r9, lr
 801f19a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f19e:	fb01 9202 	mla	r2, r1, r2, r9
 801f1a2:	9907      	ldr	r1, [sp, #28]
 801f1a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f1a8:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801f1ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f1ae:	fb00 220b 	mla	r2, r0, fp, r2
 801f1b2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801f1b6:	fb0a 2a00 	mla	sl, sl, r0, r2
 801f1ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f1c2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f1c6:	fa5f f08c 	uxtb.w	r0, ip
 801f1ca:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f1ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f1d2:	f000 80a2 	beq.w	801f31a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801f1d6:	43db      	mvns	r3, r3
 801f1d8:	783a      	ldrb	r2, [r7, #0]
 801f1da:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f1de:	b2db      	uxtb	r3, r3
 801f1e0:	fb02 fe03 	mul.w	lr, r2, r3
 801f1e4:	fb0a fa03 	mul.w	sl, sl, r3
 801f1e8:	f10e 0201 	add.w	r2, lr, #1
 801f1ec:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801f1f0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f1f4:	703a      	strb	r2, [r7, #0]
 801f1f6:	787a      	ldrb	r2, [r7, #1]
 801f1f8:	fb02 f003 	mul.w	r0, r2, r3
 801f1fc:	f10a 0301 	add.w	r3, sl, #1
 801f200:	1c42      	adds	r2, r0, #1
 801f202:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f206:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f20a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f20e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f212:	707a      	strb	r2, [r7, #1]
 801f214:	f887 c002 	strb.w	ip, [r7, #2]
 801f218:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f21a:	3703      	adds	r7, #3
 801f21c:	f108 38ff 	add.w	r8, r8, #4294967295
 801f220:	441d      	add	r5, r3
 801f222:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f224:	441e      	add	r6, r3
 801f226:	e6ab      	b.n	801ef80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f228:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f22a:	441d      	add	r5, r3
 801f22c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f22e:	441e      	add	r6, r3
 801f230:	9b06      	ldr	r3, [sp, #24]
 801f232:	3b01      	subs	r3, #1
 801f234:	9306      	str	r3, [sp, #24]
 801f236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f238:	3303      	adds	r3, #3
 801f23a:	9309      	str	r3, [sp, #36]	; 0x24
 801f23c:	e680      	b.n	801ef40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f23e:	d024      	beq.n	801f28a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f240:	9b06      	ldr	r3, [sp, #24]
 801f242:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f244:	3b01      	subs	r3, #1
 801f246:	fb00 5003 	mla	r0, r0, r3, r5
 801f24a:	1400      	asrs	r0, r0, #16
 801f24c:	f53f ae95 	bmi.w	801ef7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f250:	3901      	subs	r1, #1
 801f252:	4288      	cmp	r0, r1
 801f254:	f6bf ae91 	bge.w	801ef7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f258:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f25a:	fb01 6303 	mla	r3, r1, r3, r6
 801f25e:	141b      	asrs	r3, r3, #16
 801f260:	f53f ae8b 	bmi.w	801ef7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f264:	3a01      	subs	r2, #1
 801f266:	4293      	cmp	r3, r2
 801f268:	f6bf ae87 	bge.w	801ef7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f26e:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f272:	1cdf      	adds	r7, r3, #3
 801f274:	f1bb 0f00 	cmp.w	fp, #0
 801f278:	dc6e      	bgt.n	801f358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801f27a:	9b06      	ldr	r3, [sp, #24]
 801f27c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f282:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f286:	4423      	add	r3, r4
 801f288:	9309      	str	r3, [sp, #36]	; 0x24
 801f28a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	f340 81b0 	ble.w	801f5f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801f292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f296:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f298:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f29c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2a0:	eef0 6a62 	vmov.f32	s13, s5
 801f2a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f2a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2b0:	ee16 5a90 	vmov	r5, s13
 801f2b4:	eef0 6a43 	vmov.f32	s13, s6
 801f2b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2bc:	ee16 6a90 	vmov	r6, s13
 801f2c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2d8:	ee12 2a90 	vmov	r2, s5
 801f2dc:	eef0 2a47 	vmov.f32	s5, s14
 801f2e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2e4:	ee13 2a10 	vmov	r2, s6
 801f2e8:	9325      	str	r3, [sp, #148]	; 0x94
 801f2ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2ec:	eeb0 3a67 	vmov.f32	s6, s15
 801f2f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2f4:	9326      	str	r3, [sp, #152]	; 0x98
 801f2f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f2f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f2fa:	3b01      	subs	r3, #1
 801f2fc:	9315      	str	r3, [sp, #84]	; 0x54
 801f2fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f300:	bf08      	it	eq
 801f302:	4613      	moveq	r3, r2
 801f304:	9306      	str	r3, [sp, #24]
 801f306:	e60d      	b.n	801ef24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f308:	2800      	cmp	r0, #0
 801f30a:	f43f ae7d 	beq.w	801f008 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f30e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f312:	9307      	str	r3, [sp, #28]
 801f314:	0e1b      	lsrs	r3, r3, #24
 801f316:	930f      	str	r3, [sp, #60]	; 0x3c
 801f318:	e676      	b.n	801f008 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f31a:	7038      	strb	r0, [r7, #0]
 801f31c:	7079      	strb	r1, [r7, #1]
 801f31e:	e779      	b.n	801f214 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f320:	f112 0901 	adds.w	r9, r2, #1
 801f324:	f53f af78 	bmi.w	801f218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f328:	454b      	cmp	r3, r9
 801f32a:	f6ff af75 	blt.w	801f218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f32e:	f11c 0901 	adds.w	r9, ip, #1
 801f332:	f53f af71 	bmi.w	801f218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f336:	45ce      	cmp	lr, r9
 801f338:	f6ff af6e 	blt.w	801f218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f33c:	b21b      	sxth	r3, r3
 801f33e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801f342:	fa0f f28e 	sxth.w	r2, lr
 801f346:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801f34a:	9200      	str	r2, [sp, #0]
 801f34c:	4639      	mov	r1, r7
 801f34e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f350:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f352:	f7ff fca1 	bl	801ec98 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801f356:	e75f      	b.n	801f218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f358:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f35a:	1429      	asrs	r1, r5, #16
 801f35c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f35e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f362:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801f366:	1433      	asrs	r3, r6, #16
 801f368:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f36c:	fb0c 1303 	mla	r3, ip, r3, r1
 801f370:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f372:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f376:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f37a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f37e:	2a00      	cmp	r2, #0
 801f380:	f000 8129 	beq.w	801f5d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801f384:	684c      	ldr	r4, [r1, #4]
 801f386:	940c      	str	r4, [sp, #48]	; 0x30
 801f388:	0e24      	lsrs	r4, r4, #24
 801f38a:	9413      	str	r4, [sp, #76]	; 0x4c
 801f38c:	b198      	cbz	r0, 801f3b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f38e:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801f392:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f396:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f39a:	f10c 0c04 	add.w	ip, ip, #4
 801f39e:	eb01 080c 	add.w	r8, r1, ip
 801f3a2:	f851 100c 	ldr.w	r1, [r1, ip]
 801f3a6:	9108      	str	r1, [sp, #32]
 801f3a8:	0e09      	lsrs	r1, r1, #24
 801f3aa:	9110      	str	r1, [sp, #64]	; 0x40
 801f3ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f3b0:	910d      	str	r1, [sp, #52]	; 0x34
 801f3b2:	0e09      	lsrs	r1, r1, #24
 801f3b4:	9114      	str	r1, [sp, #80]	; 0x50
 801f3b6:	b292      	uxth	r2, r2
 801f3b8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f3ba:	b280      	uxth	r0, r0
 801f3bc:	fb02 f900 	mul.w	r9, r2, r0
 801f3c0:	0112      	lsls	r2, r2, #4
 801f3c2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f3c6:	eba2 0809 	sub.w	r8, r2, r9
 801f3ca:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801f3ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f3d0:	b280      	uxth	r0, r0
 801f3d2:	fa1f f888 	uxth.w	r8, r8
 801f3d6:	1a09      	subs	r1, r1, r0
 801f3d8:	fb08 f202 	mul.w	r2, r8, r2
 801f3dc:	b289      	uxth	r1, r1
 801f3de:	fb01 220e 	mla	r2, r1, lr, r2
 801f3e2:	fb00 2204 	mla	r2, r0, r4, r2
 801f3e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f3e8:	fb09 2204 	mla	r2, r9, r4, r2
 801f3ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f3f0:	2a00      	cmp	r2, #0
 801f3f2:	f000 80e8 	beq.w	801f5c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801f3f6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f3fa:	d01b      	beq.n	801f434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801f3fc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f404:	fb0e fa0a 	mul.w	sl, lr, sl
 801f408:	fb0e fe03 	mul.w	lr, lr, r3
 801f40c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f410:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f414:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f418:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f41c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f420:	4453      	add	r3, sl
 801f422:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f426:	0a1b      	lsrs	r3, r3, #8
 801f428:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f42c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f430:	ea43 030c 	orr.w	r3, r3, ip
 801f434:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f436:	2cff      	cmp	r4, #255	; 0xff
 801f438:	d021      	beq.n	801f47e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801f43a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f43c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f440:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f442:	fb04 fc0c 	mul.w	ip, r4, ip
 801f446:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f448:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f44c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f450:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f452:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f456:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f45a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f45e:	44e6      	add	lr, ip
 801f460:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f464:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f468:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f46c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f470:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f474:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f478:	ea4e 040a 	orr.w	r4, lr, sl
 801f47c:	940c      	str	r4, [sp, #48]	; 0x30
 801f47e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f480:	2cff      	cmp	r4, #255	; 0xff
 801f482:	d021      	beq.n	801f4c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801f484:	9c08      	ldr	r4, [sp, #32]
 801f486:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f48a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f48c:	fb04 fc0c 	mul.w	ip, r4, ip
 801f490:	9c08      	ldr	r4, [sp, #32]
 801f492:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f496:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f498:	fb04 fa0e 	mul.w	sl, r4, lr
 801f49c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f4a0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f4a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f4a8:	44e6      	add	lr, ip
 801f4aa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f4ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f4b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f4b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f4ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f4be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f4c2:	ea4e 040a 	orr.w	r4, lr, sl
 801f4c6:	9408      	str	r4, [sp, #32]
 801f4c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f4ca:	2cff      	cmp	r4, #255	; 0xff
 801f4cc:	d021      	beq.n	801f512 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801f4ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f4d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f4d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f4d6:	fb04 fc0c 	mul.w	ip, r4, ip
 801f4da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f4dc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f4e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f4e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f4e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f4ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f4ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801f4f2:	44e6      	add	lr, ip
 801f4f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f4f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f4fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f500:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f504:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f508:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f50c:	ea4e 040a 	orr.w	r4, lr, sl
 801f510:	940d      	str	r4, [sp, #52]	; 0x34
 801f512:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f514:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f51c:	2aff      	cmp	r2, #255	; 0xff
 801f51e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f522:	9c08      	ldr	r4, [sp, #32]
 801f524:	fb08 fc0c 	mul.w	ip, r8, ip
 801f528:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f52c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f530:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f532:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f536:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f53a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f53c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f540:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f544:	fb08 f80e 	mul.w	r8, r8, lr
 801f548:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f54c:	fb01 8303 	mla	r3, r1, r3, r8
 801f550:	9908      	ldr	r1, [sp, #32]
 801f552:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f556:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801f55a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f55c:	fb00 330a 	mla	r3, r0, sl, r3
 801f560:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801f564:	fb09 3e0e 	mla	lr, r9, lr, r3
 801f568:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f56c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f570:	ea4c 0c0e 	orr.w	ip, ip, lr
 801f574:	fa5f f08c 	uxtb.w	r0, ip
 801f578:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f57c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f580:	d032      	beq.n	801f5e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801f582:	43d2      	mvns	r2, r2
 801f584:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801f588:	b2d2      	uxtb	r2, r2
 801f58a:	fb0e fe02 	mul.w	lr, lr, r2
 801f58e:	f10e 0301 	add.w	r3, lr, #1
 801f592:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801f596:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f59a:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801f59e:	4350      	muls	r0, r2
 801f5a0:	f807 3c03 	strb.w	r3, [r7, #-3]
 801f5a4:	1c43      	adds	r3, r0, #1
 801f5a6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f5aa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f5ae:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801f5b2:	4353      	muls	r3, r2
 801f5b4:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f5b8:	1c5a      	adds	r2, r3, #1
 801f5ba:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f5be:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801f5c2:	f807 cc01 	strb.w	ip, [r7, #-1]
 801f5c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f5c8:	3703      	adds	r7, #3
 801f5ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f5ce:	441d      	add	r5, r3
 801f5d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f5d2:	441e      	add	r6, r3
 801f5d4:	e64e      	b.n	801f274 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801f5d6:	2800      	cmp	r0, #0
 801f5d8:	f43f aeed 	beq.w	801f3b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f5dc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801f5e0:	9108      	str	r1, [sp, #32]
 801f5e2:	0e09      	lsrs	r1, r1, #24
 801f5e4:	9110      	str	r1, [sp, #64]	; 0x40
 801f5e6:	e6e6      	b.n	801f3b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f5e8:	f807 0c03 	strb.w	r0, [r7, #-3]
 801f5ec:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f5f0:	e7e7      	b.n	801f5c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801f5f2:	b019      	add	sp, #100	; 0x64
 801f5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801f5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5fc:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801f600:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801f604:	2c00      	cmp	r4, #0
 801f606:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801f60a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801f60e:	fb00 4e03 	mla	lr, r0, r3, r4
 801f612:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801f616:	f2c0 80b8 	blt.w	801f78a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f61a:	45a1      	cmp	r9, r4
 801f61c:	f340 80b5 	ble.w	801f78a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f620:	2800      	cmp	r0, #0
 801f622:	f2c0 80b2 	blt.w	801f78a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f626:	4580      	cmp	r8, r0
 801f628:	f340 80af 	ble.w	801f78a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f62c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801f630:	f01e 0f01 	tst.w	lr, #1
 801f634:	5d56      	ldrb	r6, [r2, r5]
 801f636:	bf0c      	ite	eq
 801f638:	f006 060f 	andeq.w	r6, r6, #15
 801f63c:	1136      	asrne	r6, r6, #4
 801f63e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f642:	b2f6      	uxtb	r6, r6
 801f644:	f114 0a01 	adds.w	sl, r4, #1
 801f648:	f100 80a1 	bmi.w	801f78e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f64c:	45d1      	cmp	r9, sl
 801f64e:	f340 809e 	ble.w	801f78e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f652:	2800      	cmp	r0, #0
 801f654:	f2c0 809b 	blt.w	801f78e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f658:	4580      	cmp	r8, r0
 801f65a:	f340 8098 	ble.w	801f78e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f65e:	2f00      	cmp	r7, #0
 801f660:	f000 8097 	beq.w	801f792 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801f664:	f10e 0b01 	add.w	fp, lr, #1
 801f668:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801f66c:	f01b 0f01 	tst.w	fp, #1
 801f670:	5d55      	ldrb	r5, [r2, r5]
 801f672:	bf0c      	ite	eq
 801f674:	f005 050f 	andeq.w	r5, r5, #15
 801f678:	112d      	asrne	r5, r5, #4
 801f67a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801f67e:	b2ed      	uxtb	r5, r5
 801f680:	f1bc 0f00 	cmp.w	ip, #0
 801f684:	f000 8089 	beq.w	801f79a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801f688:	2c00      	cmp	r4, #0
 801f68a:	f100 0001 	add.w	r0, r0, #1
 801f68e:	f2c0 8082 	blt.w	801f796 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f692:	45a1      	cmp	r9, r4
 801f694:	dd7f      	ble.n	801f796 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f696:	2800      	cmp	r0, #0
 801f698:	db7d      	blt.n	801f796 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f69a:	4580      	cmp	r8, r0
 801f69c:	dd7b      	ble.n	801f796 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f69e:	eb03 0b0e 	add.w	fp, r3, lr
 801f6a2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801f6a6:	f01b 0f01 	tst.w	fp, #1
 801f6aa:	5d14      	ldrb	r4, [r2, r4]
 801f6ac:	bf0c      	ite	eq
 801f6ae:	f004 040f 	andeq.w	r4, r4, #15
 801f6b2:	1124      	asrne	r4, r4, #4
 801f6b4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f6b8:	b2e4      	uxtb	r4, r4
 801f6ba:	f1ba 0f00 	cmp.w	sl, #0
 801f6be:	db6f      	blt.n	801f7a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f6c0:	45d1      	cmp	r9, sl
 801f6c2:	dd6d      	ble.n	801f7a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f6c4:	2800      	cmp	r0, #0
 801f6c6:	db6b      	blt.n	801f7a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f6c8:	4580      	cmp	r8, r0
 801f6ca:	dd69      	ble.n	801f7a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f6cc:	2f00      	cmp	r7, #0
 801f6ce:	d069      	beq.n	801f7a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801f6d0:	3301      	adds	r3, #1
 801f6d2:	449e      	add	lr, r3
 801f6d4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f6d8:	f01e 0f01 	tst.w	lr, #1
 801f6dc:	5cd0      	ldrb	r0, [r2, r3]
 801f6de:	bf0c      	ite	eq
 801f6e0:	f000 000f 	andeq.w	r0, r0, #15
 801f6e4:	1100      	asrne	r0, r0, #4
 801f6e6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f6ea:	b2c3      	uxtb	r3, r0
 801f6ec:	b2ba      	uxth	r2, r7
 801f6ee:	fa1f fc8c 	uxth.w	ip, ip
 801f6f2:	fb02 f00c 	mul.w	r0, r2, ip
 801f6f6:	0112      	lsls	r2, r2, #4
 801f6f8:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801f6fc:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801f700:	1a12      	subs	r2, r2, r0
 801f702:	fa1f fc8c 	uxth.w	ip, ip
 801f706:	b292      	uxth	r2, r2
 801f708:	eba7 070c 	sub.w	r7, r7, ip
 801f70c:	436a      	muls	r2, r5
 801f70e:	b2bf      	uxth	r7, r7
 801f710:	fb06 2207 	mla	r2, r6, r7, r2
 801f714:	fb0c 2404 	mla	r4, ip, r4, r2
 801f718:	fb00 4303 	mla	r3, r0, r3, r4
 801f71c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f720:	b38b      	cbz	r3, 801f786 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801f722:	4a21      	ldr	r2, [pc, #132]	; (801f7a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801f724:	6814      	ldr	r4, [r2, #0]
 801f726:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801f72a:	b2e5      	uxtb	r5, r4
 801f72c:	4353      	muls	r3, r2
 801f72e:	1c5a      	adds	r2, r3, #1
 801f730:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f734:	1212      	asrs	r2, r2, #8
 801f736:	b290      	uxth	r0, r2
 801f738:	43d2      	mvns	r2, r2
 801f73a:	fb15 f500 	smulbb	r5, r5, r0
 801f73e:	b2d3      	uxtb	r3, r2
 801f740:	780a      	ldrb	r2, [r1, #0]
 801f742:	fb02 5203 	mla	r2, r2, r3, r5
 801f746:	b292      	uxth	r2, r2
 801f748:	1c55      	adds	r5, r2, #1
 801f74a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f74e:	784d      	ldrb	r5, [r1, #1]
 801f750:	fb15 f503 	smulbb	r5, r5, r3
 801f754:	1212      	asrs	r2, r2, #8
 801f756:	700a      	strb	r2, [r1, #0]
 801f758:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f75c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801f760:	fb02 5200 	mla	r2, r2, r0, r5
 801f764:	b292      	uxth	r2, r2
 801f766:	1c55      	adds	r5, r2, #1
 801f768:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f76c:	1212      	asrs	r2, r2, #8
 801f76e:	704a      	strb	r2, [r1, #1]
 801f770:	788a      	ldrb	r2, [r1, #2]
 801f772:	fb12 f303 	smulbb	r3, r2, r3
 801f776:	fb04 3300 	mla	r3, r4, r0, r3
 801f77a:	b29b      	uxth	r3, r3
 801f77c:	1c5a      	adds	r2, r3, #1
 801f77e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f782:	121b      	asrs	r3, r3, #8
 801f784:	708b      	strb	r3, [r1, #2]
 801f786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f78a:	2600      	movs	r6, #0
 801f78c:	e75a      	b.n	801f644 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801f78e:	2500      	movs	r5, #0
 801f790:	e776      	b.n	801f680 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f792:	463d      	mov	r5, r7
 801f794:	e774      	b.n	801f680 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f796:	2400      	movs	r4, #0
 801f798:	e78f      	b.n	801f6ba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801f79a:	4663      	mov	r3, ip
 801f79c:	4664      	mov	r4, ip
 801f79e:	e7a5      	b.n	801f6ec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f7a0:	2300      	movs	r3, #0
 801f7a2:	e7a3      	b.n	801f6ec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f7a4:	463b      	mov	r3, r7
 801f7a6:	e7a1      	b.n	801f6ec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f7a8:	2400c85c 	.word	0x2400c85c

0801f7ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b0:	b097      	sub	sp, #92	; 0x5c
 801f7b2:	9214      	str	r2, [sp, #80]	; 0x50
 801f7b4:	9309      	str	r3, [sp, #36]	; 0x24
 801f7b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f7b8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801f7bc:	9015      	str	r0, [sp, #84]	; 0x54
 801f7be:	910c      	str	r1, [sp, #48]	; 0x30
 801f7c0:	6850      	ldr	r0, [r2, #4]
 801f7c2:	930e      	str	r3, [sp, #56]	; 0x38
 801f7c4:	6812      	ldr	r2, [r2, #0]
 801f7c6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801f7ca:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801f7ce:	fb00 1303 	mla	r3, r0, r3, r1
 801f7d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7d6:	eb02 0a03 	add.w	sl, r2, r3
 801f7da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f7dc:	689b      	ldr	r3, [r3, #8]
 801f7de:	3301      	adds	r3, #1
 801f7e0:	f023 0301 	bic.w	r3, r3, #1
 801f7e4:	930f      	str	r3, [sp, #60]	; 0x3c
 801f7e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f7e8:	681f      	ldr	r7, [r3, #0]
 801f7ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	dc03      	bgt.n	801f7f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f7f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	f340 8247 	ble.w	801fc86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f7f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f7fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f802:	1e48      	subs	r0, r1, #1
 801f804:	f102 3cff 	add.w	ip, r2, #4294967295
 801f808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	f340 80e5 	ble.w	801f9da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801f810:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801f814:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f818:	d406      	bmi.n	801f828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f81a:	4586      	cmp	lr, r0
 801f81c:	da04      	bge.n	801f828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f81e:	2b00      	cmp	r3, #0
 801f820:	db02      	blt.n	801f828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f822:	4563      	cmp	r3, ip
 801f824:	f2c0 80da 	blt.w	801f9dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801f828:	f11e 0e01 	adds.w	lr, lr, #1
 801f82c:	f100 80cb 	bmi.w	801f9c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f830:	4571      	cmp	r1, lr
 801f832:	f2c0 80c8 	blt.w	801f9c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f836:	3301      	adds	r3, #1
 801f838:	f100 80c5 	bmi.w	801f9c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f83c:	429a      	cmp	r2, r3
 801f83e:	f2c0 80c2 	blt.w	801f9c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f844:	46d0      	mov	r8, sl
 801f846:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801f84a:	930d      	str	r3, [sp, #52]	; 0x34
 801f84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f84e:	2b00      	cmp	r3, #0
 801f850:	f340 80e3 	ble.w	801fa1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f854:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f856:	1430      	asrs	r0, r6, #16
 801f858:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f85c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f860:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801f864:	142b      	asrs	r3, r5, #16
 801f866:	f100 812e 	bmi.w	801fac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f86a:	f10c 3bff 	add.w	fp, ip, #4294967295
 801f86e:	455b      	cmp	r3, fp
 801f870:	f280 8129 	bge.w	801fac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f874:	2800      	cmp	r0, #0
 801f876:	f2c0 8126 	blt.w	801fac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f87a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801f87e:	4558      	cmp	r0, fp
 801f880:	f280 8121 	bge.w	801fac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f884:	fb00 3309 	mla	r3, r0, r9, r3
 801f888:	0858      	lsrs	r0, r3, #1
 801f88a:	07dc      	lsls	r4, r3, #31
 801f88c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f890:	bf54      	ite	pl
 801f892:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f896:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f89a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f89e:	fa5f fc8c 	uxtb.w	ip, ip
 801f8a2:	2a00      	cmp	r2, #0
 801f8a4:	f000 80fe 	beq.w	801faa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f8a8:	1c58      	adds	r0, r3, #1
 801f8aa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801f8ae:	07c0      	lsls	r0, r0, #31
 801f8b0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f8b4:	bf54      	ite	pl
 801f8b6:	f00e 0e0f 	andpl.w	lr, lr, #15
 801f8ba:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801f8be:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801f8c2:	fa5f f08e 	uxtb.w	r0, lr
 801f8c6:	9010      	str	r0, [sp, #64]	; 0x40
 801f8c8:	b1d9      	cbz	r1, 801f902 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f8ca:	444b      	add	r3, r9
 801f8cc:	0858      	lsrs	r0, r3, #1
 801f8ce:	07dc      	lsls	r4, r3, #31
 801f8d0:	f103 0301 	add.w	r3, r3, #1
 801f8d4:	5c38      	ldrb	r0, [r7, r0]
 801f8d6:	bf54      	ite	pl
 801f8d8:	f000 000f 	andpl.w	r0, r0, #15
 801f8dc:	1100      	asrmi	r0, r0, #4
 801f8de:	07dc      	lsls	r4, r3, #31
 801f8e0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f8e4:	b2c0      	uxtb	r0, r0
 801f8e6:	900a      	str	r0, [sp, #40]	; 0x28
 801f8e8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801f8ec:	f817 e000 	ldrb.w	lr, [r7, r0]
 801f8f0:	bf54      	ite	pl
 801f8f2:	f00e 030f 	andpl.w	r3, lr, #15
 801f8f6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801f8fa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f8fe:	b2db      	uxtb	r3, r3
 801f900:	9311      	str	r3, [sp, #68]	; 0x44
 801f902:	b292      	uxth	r2, r2
 801f904:	b289      	uxth	r1, r1
 801f906:	0113      	lsls	r3, r2, #4
 801f908:	fb02 f001 	mul.w	r0, r2, r1
 801f90c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f90e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f912:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801f916:	1a1b      	subs	r3, r3, r0
 801f918:	b289      	uxth	r1, r1
 801f91a:	b29b      	uxth	r3, r3
 801f91c:	ebae 0e01 	sub.w	lr, lr, r1
 801f920:	4353      	muls	r3, r2
 801f922:	fa1f fe8e 	uxth.w	lr, lr
 801f926:	fb0c 320e 	mla	r2, ip, lr, r3
 801f92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f92c:	fb01 2203 	mla	r2, r1, r3, r2
 801f930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f932:	fb00 2203 	mla	r2, r0, r3, r2
 801f936:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f93a:	2a00      	cmp	r2, #0
 801f93c:	d039      	beq.n	801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f93e:	4bc7      	ldr	r3, [pc, #796]	; (801fc5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801f940:	6819      	ldr	r1, [r3, #0]
 801f942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f944:	fa5f fc81 	uxtb.w	ip, r1
 801f948:	435a      	muls	r2, r3
 801f94a:	1c53      	adds	r3, r2, #1
 801f94c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f950:	1212      	asrs	r2, r2, #8
 801f952:	b290      	uxth	r0, r2
 801f954:	43d2      	mvns	r2, r2
 801f956:	fb1c fc00 	smulbb	ip, ip, r0
 801f95a:	b2d3      	uxtb	r3, r2
 801f95c:	f898 2000 	ldrb.w	r2, [r8]
 801f960:	fb02 c203 	mla	r2, r2, r3, ip
 801f964:	b292      	uxth	r2, r2
 801f966:	f102 0c01 	add.w	ip, r2, #1
 801f96a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f96e:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f972:	fb1c fc03 	smulbb	ip, ip, r3
 801f976:	1212      	asrs	r2, r2, #8
 801f978:	f888 2000 	strb.w	r2, [r8]
 801f97c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801f980:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801f984:	fb02 c200 	mla	r2, r2, r0, ip
 801f988:	b292      	uxth	r2, r2
 801f98a:	f102 0c01 	add.w	ip, r2, #1
 801f98e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f992:	1212      	asrs	r2, r2, #8
 801f994:	f888 2001 	strb.w	r2, [r8, #1]
 801f998:	f898 2002 	ldrb.w	r2, [r8, #2]
 801f99c:	fb12 f303 	smulbb	r3, r2, r3
 801f9a0:	fb01 3300 	mla	r3, r1, r0, r3
 801f9a4:	b29b      	uxth	r3, r3
 801f9a6:	1c5a      	adds	r2, r3, #1
 801f9a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f9ac:	121b      	asrs	r3, r3, #8
 801f9ae:	f888 3002 	strb.w	r3, [r8, #2]
 801f9b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f9b4:	f108 0803 	add.w	r8, r8, #3
 801f9b8:	441d      	add	r5, r3
 801f9ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9bc:	441e      	add	r6, r3
 801f9be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9c0:	3b01      	subs	r3, #1
 801f9c2:	930d      	str	r3, [sp, #52]	; 0x34
 801f9c4:	e742      	b.n	801f84c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f9c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f9c8:	f10a 0a03 	add.w	sl, sl, #3
 801f9cc:	441d      	add	r5, r3
 801f9ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9d0:	441e      	add	r6, r3
 801f9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9d4:	3b01      	subs	r3, #1
 801f9d6:	9309      	str	r3, [sp, #36]	; 0x24
 801f9d8:	e716      	b.n	801f808 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f9da:	d024      	beq.n	801fa26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9de:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f9e0:	3b01      	subs	r3, #1
 801f9e2:	fb00 5003 	mla	r0, r0, r3, r5
 801f9e6:	1400      	asrs	r0, r0, #16
 801f9e8:	f53f af2b 	bmi.w	801f842 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f9ec:	3901      	subs	r1, #1
 801f9ee:	4288      	cmp	r0, r1
 801f9f0:	f6bf af27 	bge.w	801f842 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f9f4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f9f6:	fb01 6303 	mla	r3, r1, r3, r6
 801f9fa:	141b      	asrs	r3, r3, #16
 801f9fc:	f53f af21 	bmi.w	801f842 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa00:	3a01      	subs	r2, #1
 801fa02:	4293      	cmp	r3, r2
 801fa04:	f6bf af1d 	bge.w	801f842 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa08:	f10a 0e03 	add.w	lr, sl, #3
 801fa0c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801fa10:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fa14:	f1b8 0f00 	cmp.w	r8, #0
 801fa18:	dc76      	bgt.n	801fb08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801fa1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa1c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fa20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fa24:	44a2      	add	sl, r4
 801fa26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	f340 812c 	ble.w	801fc86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801fa2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fa32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fa34:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa3c:	eef0 6a62 	vmov.f32	s13, s5
 801fa40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fa44:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa4c:	ee16 5a90 	vmov	r5, s13
 801fa50:	eef0 6a43 	vmov.f32	s13, s6
 801fa54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa58:	ee16 6a90 	vmov	r6, s13
 801fa5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa60:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa64:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa74:	ee12 2a90 	vmov	r2, s5
 801fa78:	eef0 2a47 	vmov.f32	s5, s14
 801fa7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa80:	ee13 2a10 	vmov	r2, s6
 801fa84:	9323      	str	r3, [sp, #140]	; 0x8c
 801fa86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fa88:	eeb0 3a67 	vmov.f32	s6, s15
 801fa8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa90:	9324      	str	r3, [sp, #144]	; 0x90
 801fa92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa96:	3b01      	subs	r3, #1
 801fa98:	930c      	str	r3, [sp, #48]	; 0x30
 801fa9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fa9c:	bf08      	it	eq
 801fa9e:	4613      	moveq	r3, r2
 801faa0:	9309      	str	r3, [sp, #36]	; 0x24
 801faa2:	e6a2      	b.n	801f7ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801faa4:	2900      	cmp	r1, #0
 801faa6:	f43f af2c 	beq.w	801f902 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801faaa:	eb09 0003 	add.w	r0, r9, r3
 801faae:	0843      	lsrs	r3, r0, #1
 801fab0:	07c0      	lsls	r0, r0, #31
 801fab2:	5cfb      	ldrb	r3, [r7, r3]
 801fab4:	bf54      	ite	pl
 801fab6:	f003 030f 	andpl.w	r3, r3, #15
 801faba:	111b      	asrmi	r3, r3, #4
 801fabc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fac0:	b2db      	uxtb	r3, r3
 801fac2:	930a      	str	r3, [sp, #40]	; 0x28
 801fac4:	e71d      	b.n	801f902 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fac6:	f113 0b01 	adds.w	fp, r3, #1
 801faca:	f53f af72 	bmi.w	801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801face:	45dc      	cmp	ip, fp
 801fad0:	f6ff af6f 	blt.w	801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801fad4:	f110 0b01 	adds.w	fp, r0, #1
 801fad8:	f53f af6b 	bmi.w	801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801fadc:	45de      	cmp	lr, fp
 801fade:	f6ff af68 	blt.w	801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801fae2:	9302      	str	r3, [sp, #8]
 801fae4:	fa0f f38e 	sxth.w	r3, lr
 801fae8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801faea:	9301      	str	r3, [sp, #4]
 801faec:	fa0f f38c 	sxth.w	r3, ip
 801faf0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801faf4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801faf8:	9300      	str	r3, [sp, #0]
 801fafa:	463a      	mov	r2, r7
 801fafc:	464b      	mov	r3, r9
 801fafe:	4641      	mov	r1, r8
 801fb00:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fb02:	f7ff fd79 	bl	801f5f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801fb06:	e754      	b.n	801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801fb08:	142a      	asrs	r2, r5, #16
 801fb0a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fb0e:	1433      	asrs	r3, r6, #16
 801fb10:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fb14:	fb09 2303 	mla	r3, r9, r3, r2
 801fb18:	085a      	lsrs	r2, r3, #1
 801fb1a:	07dc      	lsls	r4, r3, #31
 801fb1c:	5cba      	ldrb	r2, [r7, r2]
 801fb1e:	bf54      	ite	pl
 801fb20:	f002 020f 	andpl.w	r2, r2, #15
 801fb24:	1112      	asrmi	r2, r2, #4
 801fb26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fb2a:	b2d2      	uxtb	r2, r2
 801fb2c:	2900      	cmp	r1, #0
 801fb2e:	f000 8097 	beq.w	801fc60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801fb32:	f103 0b01 	add.w	fp, r3, #1
 801fb36:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801fb3a:	f01b 0f01 	tst.w	fp, #1
 801fb3e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fb42:	bf0c      	ite	eq
 801fb44:	f00c 0c0f 	andeq.w	ip, ip, #15
 801fb48:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801fb4c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fb50:	fa5f f48c 	uxtb.w	r4, ip
 801fb54:	9412      	str	r4, [sp, #72]	; 0x48
 801fb56:	b300      	cbz	r0, 801fb9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fb58:	444b      	add	r3, r9
 801fb5a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fb5e:	07dc      	lsls	r4, r3, #31
 801fb60:	f103 0301 	add.w	r3, r3, #1
 801fb64:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fb68:	bf54      	ite	pl
 801fb6a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fb6e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fb72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fb76:	fa5f f48c 	uxtb.w	r4, ip
 801fb7a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fb7e:	940b      	str	r4, [sp, #44]	; 0x2c
 801fb80:	07dc      	lsls	r4, r3, #31
 801fb82:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fb86:	bf54      	ite	pl
 801fb88:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fb8c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fb90:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fb94:	fa5f f38c 	uxtb.w	r3, ip
 801fb98:	9313      	str	r3, [sp, #76]	; 0x4c
 801fb9a:	b289      	uxth	r1, r1
 801fb9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb9e:	b280      	uxth	r0, r0
 801fba0:	fb01 f300 	mul.w	r3, r1, r0
 801fba4:	0109      	lsls	r1, r1, #4
 801fba6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801fbaa:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801fbae:	1ac9      	subs	r1, r1, r3
 801fbb0:	b280      	uxth	r0, r0
 801fbb2:	b289      	uxth	r1, r1
 801fbb4:	ebac 0c00 	sub.w	ip, ip, r0
 801fbb8:	4361      	muls	r1, r4
 801fbba:	fa1f fc8c 	uxth.w	ip, ip
 801fbbe:	fb02 120c 	mla	r2, r2, ip, r1
 801fbc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fbc4:	fb00 2001 	mla	r0, r0, r1, r2
 801fbc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fbca:	fb03 0302 	mla	r3, r3, r2, r0
 801fbce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d039      	beq.n	801fc4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fbd6:	4a21      	ldr	r2, [pc, #132]	; (801fc5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801fbd8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801fbdc:	6810      	ldr	r0, [r2, #0]
 801fbde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fbe0:	fa5f fc80 	uxtb.w	ip, r0
 801fbe4:	4353      	muls	r3, r2
 801fbe6:	1c5a      	adds	r2, r3, #1
 801fbe8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbec:	121b      	asrs	r3, r3, #8
 801fbee:	b29a      	uxth	r2, r3
 801fbf0:	43db      	mvns	r3, r3
 801fbf2:	fb1c fc02 	smulbb	ip, ip, r2
 801fbf6:	b2db      	uxtb	r3, r3
 801fbf8:	fb01 c103 	mla	r1, r1, r3, ip
 801fbfc:	b289      	uxth	r1, r1
 801fbfe:	f101 0c01 	add.w	ip, r1, #1
 801fc02:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801fc06:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801fc0a:	fb1c fc03 	smulbb	ip, ip, r3
 801fc0e:	1209      	asrs	r1, r1, #8
 801fc10:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801fc14:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801fc18:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801fc1c:	fb01 c102 	mla	r1, r1, r2, ip
 801fc20:	b289      	uxth	r1, r1
 801fc22:	f101 0c01 	add.w	ip, r1, #1
 801fc26:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801fc2a:	1209      	asrs	r1, r1, #8
 801fc2c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801fc30:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801fc34:	fb11 f303 	smulbb	r3, r1, r3
 801fc38:	fb00 3002 	mla	r0, r0, r2, r3
 801fc3c:	b280      	uxth	r0, r0
 801fc3e:	1c42      	adds	r2, r0, #1
 801fc40:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fc44:	1200      	asrs	r0, r0, #8
 801fc46:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801fc4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc4c:	f10e 0e03 	add.w	lr, lr, #3
 801fc50:	f108 38ff 	add.w	r8, r8, #4294967295
 801fc54:	441d      	add	r5, r3
 801fc56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc58:	441e      	add	r6, r3
 801fc5a:	e6db      	b.n	801fa14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801fc5c:	2400c85c 	.word	0x2400c85c
 801fc60:	2800      	cmp	r0, #0
 801fc62:	d09a      	beq.n	801fb9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fc64:	444b      	add	r3, r9
 801fc66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fc6a:	07db      	lsls	r3, r3, #31
 801fc6c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fc70:	bf54      	ite	pl
 801fc72:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fc76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fc7a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fc7e:	fa5f f38c 	uxtb.w	r3, ip
 801fc82:	930b      	str	r3, [sp, #44]	; 0x2c
 801fc84:	e789      	b.n	801fb9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fc86:	b017      	add	sp, #92	; 0x5c
 801fc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc8c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801fc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc90:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801fc94:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801fc98:	2d00      	cmp	r5, #0
 801fc9a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801fc9e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801fca2:	fb04 5e03 	mla	lr, r4, r3, r5
 801fca6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801fcaa:	f2c0 80b1 	blt.w	801fe10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fcae:	45a9      	cmp	r9, r5
 801fcb0:	f340 80ae 	ble.w	801fe10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fcb4:	2c00      	cmp	r4, #0
 801fcb6:	f2c0 80ab 	blt.w	801fe10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fcba:	45a0      	cmp	r8, r4
 801fcbc:	f340 80a8 	ble.w	801fe10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fcc0:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801fcc4:	f01e 0f01 	tst.w	lr, #1
 801fcc8:	5d97      	ldrb	r7, [r2, r6]
 801fcca:	bf0c      	ite	eq
 801fccc:	f007 070f 	andeq.w	r7, r7, #15
 801fcd0:	113f      	asrne	r7, r7, #4
 801fcd2:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801fcd6:	b2ff      	uxtb	r7, r7
 801fcd8:	f115 0a01 	adds.w	sl, r5, #1
 801fcdc:	f100 809a 	bmi.w	801fe14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fce0:	45d1      	cmp	r9, sl
 801fce2:	f340 8097 	ble.w	801fe14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fce6:	2c00      	cmp	r4, #0
 801fce8:	f2c0 8094 	blt.w	801fe14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fcec:	45a0      	cmp	r8, r4
 801fcee:	f340 8091 	ble.w	801fe14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fcf2:	2800      	cmp	r0, #0
 801fcf4:	f000 8090 	beq.w	801fe18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801fcf8:	f10e 0b01 	add.w	fp, lr, #1
 801fcfc:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801fd00:	f01b 0f01 	tst.w	fp, #1
 801fd04:	5d96      	ldrb	r6, [r2, r6]
 801fd06:	bf0c      	ite	eq
 801fd08:	f006 060f 	andeq.w	r6, r6, #15
 801fd0c:	1136      	asrne	r6, r6, #4
 801fd0e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801fd12:	b2f6      	uxtb	r6, r6
 801fd14:	f1bc 0f00 	cmp.w	ip, #0
 801fd18:	f000 8082 	beq.w	801fe20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801fd1c:	2d00      	cmp	r5, #0
 801fd1e:	f104 0401 	add.w	r4, r4, #1
 801fd22:	db7b      	blt.n	801fe1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fd24:	45a9      	cmp	r9, r5
 801fd26:	dd79      	ble.n	801fe1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fd28:	2c00      	cmp	r4, #0
 801fd2a:	db77      	blt.n	801fe1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fd2c:	45a0      	cmp	r8, r4
 801fd2e:	dd75      	ble.n	801fe1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fd30:	eb03 0b0e 	add.w	fp, r3, lr
 801fd34:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801fd38:	f01b 0f01 	tst.w	fp, #1
 801fd3c:	5d55      	ldrb	r5, [r2, r5]
 801fd3e:	bf0c      	ite	eq
 801fd40:	f005 050f 	andeq.w	r5, r5, #15
 801fd44:	112d      	asrne	r5, r5, #4
 801fd46:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801fd4a:	b2ed      	uxtb	r5, r5
 801fd4c:	f1ba 0f00 	cmp.w	sl, #0
 801fd50:	db69      	blt.n	801fe26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fd52:	45d1      	cmp	r9, sl
 801fd54:	dd67      	ble.n	801fe26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fd56:	2c00      	cmp	r4, #0
 801fd58:	db65      	blt.n	801fe26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fd5a:	45a0      	cmp	r8, r4
 801fd5c:	dd63      	ble.n	801fe26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fd5e:	2800      	cmp	r0, #0
 801fd60:	d063      	beq.n	801fe2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801fd62:	3301      	adds	r3, #1
 801fd64:	449e      	add	lr, r3
 801fd66:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801fd6a:	f01e 0f01 	tst.w	lr, #1
 801fd6e:	5cd4      	ldrb	r4, [r2, r3]
 801fd70:	bf0c      	ite	eq
 801fd72:	f004 040f 	andeq.w	r4, r4, #15
 801fd76:	1124      	asrne	r4, r4, #4
 801fd78:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801fd7c:	b2e3      	uxtb	r3, r4
 801fd7e:	b282      	uxth	r2, r0
 801fd80:	fa1f fc8c 	uxth.w	ip, ip
 801fd84:	fb02 f40c 	mul.w	r4, r2, ip
 801fd88:	0112      	lsls	r2, r2, #4
 801fd8a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801fd8e:	fa1f f08c 	uxth.w	r0, ip
 801fd92:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801fd96:	1b12      	subs	r2, r2, r4
 801fd98:	ebac 0c00 	sub.w	ip, ip, r0
 801fd9c:	b292      	uxth	r2, r2
 801fd9e:	fa1f fc8c 	uxth.w	ip, ip
 801fda2:	4372      	muls	r2, r6
 801fda4:	fb07 220c 	mla	r2, r7, ip, r2
 801fda8:	fb00 2005 	mla	r0, r0, r5, r2
 801fdac:	fb04 0303 	mla	r3, r4, r3, r0
 801fdb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fdb4:	b353      	cbz	r3, 801fe0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801fdb6:	4a1e      	ldr	r2, [pc, #120]	; (801fe30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801fdb8:	7808      	ldrb	r0, [r1, #0]
 801fdba:	6814      	ldr	r4, [r2, #0]
 801fdbc:	b29a      	uxth	r2, r3
 801fdbe:	43db      	mvns	r3, r3
 801fdc0:	b2e5      	uxtb	r5, r4
 801fdc2:	b2db      	uxtb	r3, r3
 801fdc4:	fb15 f502 	smulbb	r5, r5, r2
 801fdc8:	fb00 5003 	mla	r0, r0, r3, r5
 801fdcc:	b280      	uxth	r0, r0
 801fdce:	1c45      	adds	r5, r0, #1
 801fdd0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fdd4:	784d      	ldrb	r5, [r1, #1]
 801fdd6:	fb15 f503 	smulbb	r5, r5, r3
 801fdda:	1200      	asrs	r0, r0, #8
 801fddc:	7008      	strb	r0, [r1, #0]
 801fdde:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801fde2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801fde6:	fb00 5002 	mla	r0, r0, r2, r5
 801fdea:	b280      	uxth	r0, r0
 801fdec:	1c45      	adds	r5, r0, #1
 801fdee:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fdf2:	1200      	asrs	r0, r0, #8
 801fdf4:	7048      	strb	r0, [r1, #1]
 801fdf6:	7888      	ldrb	r0, [r1, #2]
 801fdf8:	fb10 f303 	smulbb	r3, r0, r3
 801fdfc:	fb04 3202 	mla	r2, r4, r2, r3
 801fe00:	b292      	uxth	r2, r2
 801fe02:	1c53      	adds	r3, r2, #1
 801fe04:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fe08:	1212      	asrs	r2, r2, #8
 801fe0a:	708a      	strb	r2, [r1, #2]
 801fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe10:	2700      	movs	r7, #0
 801fe12:	e761      	b.n	801fcd8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801fe14:	2600      	movs	r6, #0
 801fe16:	e77d      	b.n	801fd14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801fe18:	4606      	mov	r6, r0
 801fe1a:	e77b      	b.n	801fd14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801fe1c:	2500      	movs	r5, #0
 801fe1e:	e795      	b.n	801fd4c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801fe20:	4663      	mov	r3, ip
 801fe22:	4665      	mov	r5, ip
 801fe24:	e7ab      	b.n	801fd7e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fe26:	2300      	movs	r3, #0
 801fe28:	e7a9      	b.n	801fd7e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fe2a:	4603      	mov	r3, r0
 801fe2c:	e7a7      	b.n	801fd7e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fe2e:	bf00      	nop
 801fe30:	2400c85c 	.word	0x2400c85c

0801fe34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe38:	b093      	sub	sp, #76	; 0x4c
 801fe3a:	461c      	mov	r4, r3
 801fe3c:	920c      	str	r2, [sp, #48]	; 0x30
 801fe3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fe40:	9011      	str	r0, [sp, #68]	; 0x44
 801fe42:	9107      	str	r1, [sp, #28]
 801fe44:	6850      	ldr	r0, [r2, #4]
 801fe46:	6812      	ldr	r2, [r2, #0]
 801fe48:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801fe4c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801fe50:	fb00 1303 	mla	r3, r0, r3, r1
 801fe54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe58:	eb02 0b03 	add.w	fp, r2, r3
 801fe5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe5e:	689b      	ldr	r3, [r3, #8]
 801fe60:	3301      	adds	r3, #1
 801fe62:	f023 0301 	bic.w	r3, r3, #1
 801fe66:	9309      	str	r3, [sp, #36]	; 0x24
 801fe68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe6a:	f8d3 8000 	ldr.w	r8, [r3]
 801fe6e:	9b07      	ldr	r3, [sp, #28]
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	dc03      	bgt.n	801fe7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fe74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	f340 822b 	ble.w	80202d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fe7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe86:	1e48      	subs	r0, r1, #1
 801fe88:	1e57      	subs	r7, r2, #1
 801fe8a:	2c00      	cmp	r4, #0
 801fe8c:	f340 80d7 	ble.w	802003e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801fe90:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fe94:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fe98:	d406      	bmi.n	801fea8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fe9a:	4584      	cmp	ip, r0
 801fe9c:	da04      	bge.n	801fea8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	db02      	blt.n	801fea8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fea2:	42bb      	cmp	r3, r7
 801fea4:	f2c0 80cc 	blt.w	8020040 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fea8:	f11c 0c01 	adds.w	ip, ip, #1
 801feac:	f100 80bf 	bmi.w	802002e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801feb0:	4561      	cmp	r1, ip
 801feb2:	f2c0 80bc 	blt.w	802002e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801feb6:	3301      	adds	r3, #1
 801feb8:	f100 80b9 	bmi.w	802002e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801febc:	429a      	cmp	r2, r3
 801febe:	f2c0 80b6 	blt.w	802002e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fec2:	46a2      	mov	sl, r4
 801fec4:	465f      	mov	r7, fp
 801fec6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801feca:	f1ba 0f00 	cmp.w	sl, #0
 801fece:	f340 80d4 	ble.w	802007a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801fed2:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801fed6:	1430      	asrs	r0, r6, #16
 801fed8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fedc:	9308      	str	r3, [sp, #32]
 801fede:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fee0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801fee4:	142b      	asrs	r3, r5, #16
 801fee6:	f100 8124 	bmi.w	8020132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801feea:	f10c 32ff 	add.w	r2, ip, #4294967295
 801feee:	4293      	cmp	r3, r2
 801fef0:	f280 811f 	bge.w	8020132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fef4:	2800      	cmp	r0, #0
 801fef6:	f2c0 811c 	blt.w	8020132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fefa:	f10e 32ff 	add.w	r2, lr, #4294967295
 801fefe:	4290      	cmp	r0, r2
 801ff00:	f280 8117 	bge.w	8020132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ff04:	fb00 3309 	mla	r3, r0, r9, r3
 801ff08:	0858      	lsrs	r0, r3, #1
 801ff0a:	07da      	lsls	r2, r3, #31
 801ff0c:	9a08      	ldr	r2, [sp, #32]
 801ff0e:	f818 c000 	ldrb.w	ip, [r8, r0]
 801ff12:	bf54      	ite	pl
 801ff14:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ff18:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ff1c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ff20:	fa5f fc8c 	uxtb.w	ip, ip
 801ff24:	2a00      	cmp	r2, #0
 801ff26:	f000 80ed 	beq.w	8020104 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801ff2a:	1c58      	adds	r0, r3, #1
 801ff2c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801ff30:	07c0      	lsls	r0, r0, #31
 801ff32:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801ff36:	bf54      	ite	pl
 801ff38:	f00e 0e0f 	andpl.w	lr, lr, #15
 801ff3c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801ff40:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801ff44:	fa5f fe8e 	uxtb.w	lr, lr
 801ff48:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801ff4c:	b1c9      	cbz	r1, 801ff82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ff4e:	444b      	add	r3, r9
 801ff50:	0858      	lsrs	r0, r3, #1
 801ff52:	07da      	lsls	r2, r3, #31
 801ff54:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ff58:	bf54      	ite	pl
 801ff5a:	f000 000f 	andpl.w	r0, r0, #15
 801ff5e:	1100      	asrmi	r0, r0, #4
 801ff60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ff64:	b2c0      	uxtb	r0, r0
 801ff66:	900a      	str	r0, [sp, #40]	; 0x28
 801ff68:	1c58      	adds	r0, r3, #1
 801ff6a:	0843      	lsrs	r3, r0, #1
 801ff6c:	07c2      	lsls	r2, r0, #31
 801ff6e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ff72:	bf54      	ite	pl
 801ff74:	f003 030f 	andpl.w	r3, r3, #15
 801ff78:	111b      	asrmi	r3, r3, #4
 801ff7a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ff7e:	b2db      	uxtb	r3, r3
 801ff80:	930e      	str	r3, [sp, #56]	; 0x38
 801ff82:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ff86:	b289      	uxth	r1, r1
 801ff88:	fb02 f301 	mul.w	r3, r2, r1
 801ff8c:	0112      	lsls	r2, r2, #4
 801ff8e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ff92:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801ff96:	1ad2      	subs	r2, r2, r3
 801ff98:	b289      	uxth	r1, r1
 801ff9a:	b292      	uxth	r2, r2
 801ff9c:	1a40      	subs	r0, r0, r1
 801ff9e:	fa1f fe80 	uxth.w	lr, r0
 801ffa2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ffa4:	4342      	muls	r2, r0
 801ffa6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801ffaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ffac:	fb01 c102 	mla	r1, r1, r2, ip
 801ffb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ffb2:	fb03 1302 	mla	r3, r3, r2, r1
 801ffb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ffba:	b383      	cbz	r3, 802001e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ffbc:	4ac6      	ldr	r2, [pc, #792]	; (80202d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801ffbe:	2bff      	cmp	r3, #255	; 0xff
 801ffc0:	6812      	ldr	r2, [r2, #0]
 801ffc2:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801ffc6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801ffca:	b2d2      	uxtb	r2, r2
 801ffcc:	f000 80ac 	beq.w	8020128 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ffd0:	b299      	uxth	r1, r3
 801ffd2:	43db      	mvns	r3, r3
 801ffd4:	f897 c000 	ldrb.w	ip, [r7]
 801ffd8:	fb12 f201 	smulbb	r2, r2, r1
 801ffdc:	b2db      	uxtb	r3, r3
 801ffde:	fb10 f001 	smulbb	r0, r0, r1
 801ffe2:	fb0c 2203 	mla	r2, ip, r3, r2
 801ffe6:	fb1e f101 	smulbb	r1, lr, r1
 801ffea:	b292      	uxth	r2, r2
 801ffec:	f102 0c01 	add.w	ip, r2, #1
 801fff0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fff4:	1212      	asrs	r2, r2, #8
 801fff6:	703a      	strb	r2, [r7, #0]
 801fff8:	787a      	ldrb	r2, [r7, #1]
 801fffa:	fb02 0003 	mla	r0, r2, r3, r0
 801fffe:	b280      	uxth	r0, r0
 8020000:	1c42      	adds	r2, r0, #1
 8020002:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020006:	78ba      	ldrb	r2, [r7, #2]
 8020008:	fb02 1303 	mla	r3, r2, r3, r1
 802000c:	1200      	asrs	r0, r0, #8
 802000e:	b29b      	uxth	r3, r3
 8020010:	7078      	strb	r0, [r7, #1]
 8020012:	f103 0e01 	add.w	lr, r3, #1
 8020016:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802001a:	121b      	asrs	r3, r3, #8
 802001c:	70bb      	strb	r3, [r7, #2]
 802001e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020020:	3703      	adds	r7, #3
 8020022:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020026:	441d      	add	r5, r3
 8020028:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802002a:	441e      	add	r6, r3
 802002c:	e74d      	b.n	801feca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802002e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020030:	3c01      	subs	r4, #1
 8020032:	f10b 0b03 	add.w	fp, fp, #3
 8020036:	441d      	add	r5, r3
 8020038:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802003a:	441e      	add	r6, r3
 802003c:	e725      	b.n	801fe8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802003e:	d021      	beq.n	8020084 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020040:	1e63      	subs	r3, r4, #1
 8020042:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020044:	fb00 5003 	mla	r0, r0, r3, r5
 8020048:	1400      	asrs	r0, r0, #16
 802004a:	f53f af3a 	bmi.w	801fec2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802004e:	3901      	subs	r1, #1
 8020050:	4288      	cmp	r0, r1
 8020052:	f6bf af36 	bge.w	801fec2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020056:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020058:	fb01 6303 	mla	r3, r1, r3, r6
 802005c:	141b      	asrs	r3, r3, #16
 802005e:	f53f af30 	bmi.w	801fec2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020062:	3a01      	subs	r2, #1
 8020064:	4293      	cmp	r3, r2
 8020066:	f6bf af2c 	bge.w	801fec2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802006a:	f10b 0c03 	add.w	ip, fp, #3
 802006e:	46a6      	mov	lr, r4
 8020070:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020074:	f1be 0f00 	cmp.w	lr, #0
 8020078:	dc79      	bgt.n	802016e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802007a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802007e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020082:	44a3      	add	fp, r4
 8020084:	9b07      	ldr	r3, [sp, #28]
 8020086:	2b00      	cmp	r3, #0
 8020088:	f340 8123 	ble.w	80202d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802008c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020090:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020092:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020096:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802009a:	eef0 6a62 	vmov.f32	s13, s5
 802009e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80200a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80200a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200aa:	ee16 5a90 	vmov	r5, s13
 80200ae:	eef0 6a43 	vmov.f32	s13, s6
 80200b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200b6:	ee16 6a90 	vmov	r6, s13
 80200ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80200be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80200c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80200c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80200ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80200ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80200d2:	ee12 2a90 	vmov	r2, s5
 80200d6:	eef0 2a47 	vmov.f32	s5, s14
 80200da:	fb92 f3f3 	sdiv	r3, r2, r3
 80200de:	ee13 2a10 	vmov	r2, s6
 80200e2:	931f      	str	r3, [sp, #124]	; 0x7c
 80200e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80200e6:	eeb0 3a67 	vmov.f32	s6, s15
 80200ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80200ee:	9320      	str	r3, [sp, #128]	; 0x80
 80200f0:	9b07      	ldr	r3, [sp, #28]
 80200f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80200f4:	3b01      	subs	r3, #1
 80200f6:	9307      	str	r3, [sp, #28]
 80200f8:	bf08      	it	eq
 80200fa:	4614      	moveq	r4, r2
 80200fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80200fe:	bf18      	it	ne
 8020100:	461c      	movne	r4, r3
 8020102:	e6b4      	b.n	801fe6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020104:	2900      	cmp	r1, #0
 8020106:	f43f af3c 	beq.w	801ff82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802010a:	eb09 0003 	add.w	r0, r9, r3
 802010e:	0843      	lsrs	r3, r0, #1
 8020110:	07c0      	lsls	r0, r0, #31
 8020112:	f818 3003 	ldrb.w	r3, [r8, r3]
 8020116:	bf54      	ite	pl
 8020118:	f003 030f 	andpl.w	r3, r3, #15
 802011c:	111b      	asrmi	r3, r3, #4
 802011e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020122:	b2db      	uxtb	r3, r3
 8020124:	930a      	str	r3, [sp, #40]	; 0x28
 8020126:	e72c      	b.n	801ff82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020128:	703a      	strb	r2, [r7, #0]
 802012a:	7078      	strb	r0, [r7, #1]
 802012c:	f887 e002 	strb.w	lr, [r7, #2]
 8020130:	e775      	b.n	802001e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020132:	1c5a      	adds	r2, r3, #1
 8020134:	f53f af73 	bmi.w	802001e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020138:	4594      	cmp	ip, r2
 802013a:	f6ff af70 	blt.w	802001e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802013e:	1c42      	adds	r2, r0, #1
 8020140:	f53f af6d 	bmi.w	802001e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020144:	4596      	cmp	lr, r2
 8020146:	f6ff af6a 	blt.w	802001e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802014a:	9302      	str	r3, [sp, #8]
 802014c:	fa0f f38e 	sxth.w	r3, lr
 8020150:	9a08      	ldr	r2, [sp, #32]
 8020152:	9301      	str	r3, [sp, #4]
 8020154:	fa0f f38c 	sxth.w	r3, ip
 8020158:	9105      	str	r1, [sp, #20]
 802015a:	4639      	mov	r1, r7
 802015c:	9300      	str	r3, [sp, #0]
 802015e:	464b      	mov	r3, r9
 8020160:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020164:	4642      	mov	r2, r8
 8020166:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020168:	f7ff fd90 	bl	801fc8c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 802016c:	e757      	b.n	802001e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802016e:	142a      	asrs	r2, r5, #16
 8020170:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020174:	1433      	asrs	r3, r6, #16
 8020176:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802017a:	fb09 2303 	mla	r3, r9, r3, r2
 802017e:	085a      	lsrs	r2, r3, #1
 8020180:	07d9      	lsls	r1, r3, #31
 8020182:	f818 2002 	ldrb.w	r2, [r8, r2]
 8020186:	bf54      	ite	pl
 8020188:	f002 020f 	andpl.w	r2, r2, #15
 802018c:	1112      	asrmi	r2, r2, #4
 802018e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020192:	b2d2      	uxtb	r2, r2
 8020194:	2800      	cmp	r0, #0
 8020196:	f000 8085 	beq.w	80202a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802019a:	f103 0a01 	add.w	sl, r3, #1
 802019e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80201a2:	f01a 0f01 	tst.w	sl, #1
 80201a6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80201aa:	bf0c      	ite	eq
 80201ac:	f001 010f 	andeq.w	r1, r1, #15
 80201b0:	1109      	asrne	r1, r1, #4
 80201b2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80201b6:	b2c9      	uxtb	r1, r1
 80201b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80201ba:	b1df      	cbz	r7, 80201f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80201bc:	444b      	add	r3, r9
 80201be:	0859      	lsrs	r1, r3, #1
 80201c0:	f013 0f01 	tst.w	r3, #1
 80201c4:	f103 0301 	add.w	r3, r3, #1
 80201c8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80201cc:	bf0c      	ite	eq
 80201ce:	f001 010f 	andeq.w	r1, r1, #15
 80201d2:	1109      	asrne	r1, r1, #4
 80201d4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80201d8:	b2c9      	uxtb	r1, r1
 80201da:	910b      	str	r1, [sp, #44]	; 0x2c
 80201dc:	0859      	lsrs	r1, r3, #1
 80201de:	07db      	lsls	r3, r3, #31
 80201e0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80201e4:	bf54      	ite	pl
 80201e6:	f001 010f 	andpl.w	r1, r1, #15
 80201ea:	1109      	asrmi	r1, r1, #4
 80201ec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80201f0:	b2c9      	uxtb	r1, r1
 80201f2:	9110      	str	r1, [sp, #64]	; 0x40
 80201f4:	b280      	uxth	r0, r0
 80201f6:	b2bf      	uxth	r7, r7
 80201f8:	fb00 f307 	mul.w	r3, r0, r7
 80201fc:	0100      	lsls	r0, r0, #4
 80201fe:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8020202:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8020206:	1ac0      	subs	r0, r0, r3
 8020208:	b2bf      	uxth	r7, r7
 802020a:	b280      	uxth	r0, r0
 802020c:	1bc9      	subs	r1, r1, r7
 802020e:	fa1f fa81 	uxth.w	sl, r1
 8020212:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020214:	4348      	muls	r0, r1
 8020216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020218:	fb02 020a 	mla	r2, r2, sl, r0
 802021c:	fb07 2701 	mla	r7, r7, r1, r2
 8020220:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020222:	fb03 7302 	mla	r3, r3, r2, r7
 8020226:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802022a:	b393      	cbz	r3, 8020292 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802022c:	4a2a      	ldr	r2, [pc, #168]	; (80202d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802022e:	2bff      	cmp	r3, #255	; 0xff
 8020230:	6811      	ldr	r1, [r2, #0]
 8020232:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8020236:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802023a:	b2c9      	uxtb	r1, r1
 802023c:	d042      	beq.n	80202c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802023e:	b298      	uxth	r0, r3
 8020240:	43db      	mvns	r3, r3
 8020242:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8020246:	fb11 f100 	smulbb	r1, r1, r0
 802024a:	b2db      	uxtb	r3, r3
 802024c:	fb17 f700 	smulbb	r7, r7, r0
 8020250:	fb02 1103 	mla	r1, r2, r3, r1
 8020254:	fb1a f000 	smulbb	r0, sl, r0
 8020258:	b289      	uxth	r1, r1
 802025a:	1c4a      	adds	r2, r1, #1
 802025c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020260:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8020264:	fb02 7703 	mla	r7, r2, r3, r7
 8020268:	1209      	asrs	r1, r1, #8
 802026a:	b2bf      	uxth	r7, r7
 802026c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020270:	1c7a      	adds	r2, r7, #1
 8020272:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020276:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802027a:	fb02 0303 	mla	r3, r2, r3, r0
 802027e:	123f      	asrs	r7, r7, #8
 8020280:	b29b      	uxth	r3, r3
 8020282:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8020286:	1c5a      	adds	r2, r3, #1
 8020288:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802028c:	121b      	asrs	r3, r3, #8
 802028e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8020292:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020294:	f10c 0c03 	add.w	ip, ip, #3
 8020298:	f10e 3eff 	add.w	lr, lr, #4294967295
 802029c:	441d      	add	r5, r3
 802029e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80202a0:	441e      	add	r6, r3
 80202a2:	e6e7      	b.n	8020074 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80202a4:	2f00      	cmp	r7, #0
 80202a6:	d0a5      	beq.n	80201f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80202a8:	444b      	add	r3, r9
 80202aa:	0859      	lsrs	r1, r3, #1
 80202ac:	07db      	lsls	r3, r3, #31
 80202ae:	f818 1001 	ldrb.w	r1, [r8, r1]
 80202b2:	bf54      	ite	pl
 80202b4:	f001 010f 	andpl.w	r1, r1, #15
 80202b8:	1109      	asrmi	r1, r1, #4
 80202ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80202be:	b2c9      	uxtb	r1, r1
 80202c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80202c2:	e797      	b.n	80201f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80202c4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80202c8:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80202cc:	f80c ac01 	strb.w	sl, [ip, #-1]
 80202d0:	e7df      	b.n	8020292 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80202d2:	b013      	add	sp, #76	; 0x4c
 80202d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202d8:	2400c85c 	.word	0x2400c85c

080202dc <CRC_Lock>:
 80202dc:	4a20      	ldr	r2, [pc, #128]	; (8020360 <CRC_Lock+0x84>)
 80202de:	b530      	push	{r4, r5, lr}
 80202e0:	6813      	ldr	r3, [r2, #0]
 80202e2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80202e6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80202ea:	f023 0301 	bic.w	r3, r3, #1
 80202ee:	6013      	str	r3, [r2, #0]
 80202f0:	4b1c      	ldr	r3, [pc, #112]	; (8020364 <CRC_Lock+0x88>)
 80202f2:	681a      	ldr	r2, [r3, #0]
 80202f4:	4022      	ands	r2, r4
 80202f6:	42aa      	cmp	r2, r5
 80202f8:	d005      	beq.n	8020306 <CRC_Lock+0x2a>
 80202fa:	681b      	ldr	r3, [r3, #0]
 80202fc:	f24c 2270 	movw	r2, #49776	; 0xc270
 8020300:	4023      	ands	r3, r4
 8020302:	4293      	cmp	r3, r2
 8020304:	d124      	bne.n	8020350 <CRC_Lock+0x74>
 8020306:	4b18      	ldr	r3, [pc, #96]	; (8020368 <CRC_Lock+0x8c>)
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	bb0b      	cbnz	r3, 8020350 <CRC_Lock+0x74>
 802030c:	4b17      	ldr	r3, [pc, #92]	; (802036c <CRC_Lock+0x90>)
 802030e:	681a      	ldr	r2, [r3, #0]
 8020310:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020314:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8020318:	d00d      	beq.n	8020336 <CRC_Lock+0x5a>
 802031a:	681a      	ldr	r2, [r3, #0]
 802031c:	f240 4483 	movw	r4, #1155	; 0x483
 8020320:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020324:	42a2      	cmp	r2, r4
 8020326:	d006      	beq.n	8020336 <CRC_Lock+0x5a>
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	f240 4285 	movw	r2, #1157	; 0x485
 802032e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020332:	4293      	cmp	r3, r2
 8020334:	d10c      	bne.n	8020350 <CRC_Lock+0x74>
 8020336:	4b0e      	ldr	r3, [pc, #56]	; (8020370 <CRC_Lock+0x94>)
 8020338:	2201      	movs	r2, #1
 802033a:	601a      	str	r2, [r3, #0]
 802033c:	681a      	ldr	r2, [r3, #0]
 802033e:	2a00      	cmp	r2, #0
 8020340:	d1fc      	bne.n	802033c <CRC_Lock+0x60>
 8020342:	4b0c      	ldr	r3, [pc, #48]	; (8020374 <CRC_Lock+0x98>)
 8020344:	6018      	str	r0, [r3, #0]
 8020346:	6818      	ldr	r0, [r3, #0]
 8020348:	1a43      	subs	r3, r0, r1
 802034a:	4258      	negs	r0, r3
 802034c:	4158      	adcs	r0, r3
 802034e:	bd30      	pop	{r4, r5, pc}
 8020350:	4b09      	ldr	r3, [pc, #36]	; (8020378 <CRC_Lock+0x9c>)
 8020352:	2201      	movs	r2, #1
 8020354:	601a      	str	r2, [r3, #0]
 8020356:	681a      	ldr	r2, [r3, #0]
 8020358:	2a00      	cmp	r2, #0
 802035a:	d1fc      	bne.n	8020356 <CRC_Lock+0x7a>
 802035c:	4b07      	ldr	r3, [pc, #28]	; (802037c <CRC_Lock+0xa0>)
 802035e:	e7f1      	b.n	8020344 <CRC_Lock+0x68>
 8020360:	e0002000 	.word	0xe0002000
 8020364:	e000ed00 	.word	0xe000ed00
 8020368:	e0042000 	.word	0xe0042000
 802036c:	5c001000 	.word	0x5c001000
 8020370:	58024c08 	.word	0x58024c08
 8020374:	58024c00 	.word	0x58024c00
 8020378:	40023008 	.word	0x40023008
 802037c:	40023000 	.word	0x40023000

08020380 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020380:	6101      	str	r1, [r0, #16]
 8020382:	4770      	bx	lr

08020384 <_ZN8touchgfx8Gestures4tickEv>:
 8020384:	7b83      	ldrb	r3, [r0, #14]
 8020386:	b14b      	cbz	r3, 802039c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020388:	8903      	ldrh	r3, [r0, #8]
 802038a:	3301      	adds	r3, #1
 802038c:	b29b      	uxth	r3, r3
 802038e:	2b07      	cmp	r3, #7
 8020390:	8103      	strh	r3, [r0, #8]
 8020392:	bf81      	itttt	hi
 8020394:	2300      	movhi	r3, #0
 8020396:	8143      	strhhi	r3, [r0, #10]
 8020398:	8183      	strhhi	r3, [r0, #12]
 802039a:	7383      	strbhi	r3, [r0, #14]
 802039c:	4770      	bx	lr
	...

080203a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80203a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80203a4:	4698      	mov	r8, r3
 80203a6:	8883      	ldrh	r3, [r0, #4]
 80203a8:	4604      	mov	r4, r0
 80203aa:	4617      	mov	r7, r2
 80203ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80203b0:	eba8 0303 	sub.w	r3, r8, r3
 80203b4:	4a19      	ldr	r2, [pc, #100]	; (802041c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80203b6:	460e      	mov	r6, r1
 80203b8:	b21b      	sxth	r3, r3
 80203ba:	88c1      	ldrh	r1, [r0, #6]
 80203bc:	9200      	str	r2, [sp, #0]
 80203be:	2000      	movs	r0, #0
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	8aa2      	ldrh	r2, [r4, #20]
 80203c4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80203c8:	bfb8      	it	lt
 80203ca:	425b      	neglt	r3, r3
 80203cc:	f88d 0004 	strb.w	r0, [sp, #4]
 80203d0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80203d4:	b21b      	sxth	r3, r3
 80203d6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80203da:	f8ad 500c 	strh.w	r5, [sp, #12]
 80203de:	4293      	cmp	r3, r2
 80203e0:	dc07      	bgt.n	80203f2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80203e2:	1a69      	subs	r1, r5, r1
 80203e4:	b209      	sxth	r1, r1
 80203e6:	2900      	cmp	r1, #0
 80203e8:	bfb8      	it	lt
 80203ea:	4249      	neglt	r1, r1
 80203ec:	b209      	sxth	r1, r1
 80203ee:	428a      	cmp	r2, r1
 80203f0:	da10      	bge.n	8020414 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80203f2:	6920      	ldr	r0, [r4, #16]
 80203f4:	4669      	mov	r1, sp
 80203f6:	eba8 0606 	sub.w	r6, r8, r6
 80203fa:	1bef      	subs	r7, r5, r7
 80203fc:	6803      	ldr	r3, [r0, #0]
 80203fe:	685b      	ldr	r3, [r3, #4]
 8020400:	4798      	blx	r3
 8020402:	2300      	movs	r3, #0
 8020404:	2001      	movs	r0, #1
 8020406:	8166      	strh	r6, [r4, #10]
 8020408:	8123      	strh	r3, [r4, #8]
 802040a:	81a7      	strh	r7, [r4, #12]
 802040c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020410:	80e5      	strh	r5, [r4, #6]
 8020412:	73a0      	strb	r0, [r4, #14]
 8020414:	b004      	add	sp, #16
 8020416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802041a:	bf00      	nop
 802041c:	08023738 	.word	0x08023738

08020420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8020420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020422:	461e      	mov	r6, r3
 8020424:	1e4b      	subs	r3, r1, #1
 8020426:	b085      	sub	sp, #20
 8020428:	4604      	mov	r4, r0
 802042a:	2b01      	cmp	r3, #1
 802042c:	460d      	mov	r5, r1
 802042e:	4617      	mov	r7, r2
 8020430:	d84b      	bhi.n	80204ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8020432:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020436:	1cd3      	adds	r3, r2, #3
 8020438:	b29b      	uxth	r3, r3
 802043a:	2b06      	cmp	r3, #6
 802043c:	d916      	bls.n	802046c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802043e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80204e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020442:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020446:	f8cd c004 	str.w	ip, [sp, #4]
 802044a:	f04f 0c00 	mov.w	ip, #0
 802044e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020452:	6900      	ldr	r0, [r0, #16]
 8020454:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020458:	a901      	add	r1, sp, #4
 802045a:	f88d c008 	strb.w	ip, [sp, #8]
 802045e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020462:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020466:	6803      	ldr	r3, [r0, #0]
 8020468:	689b      	ldr	r3, [r3, #8]
 802046a:	4798      	blx	r3
 802046c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020470:	1cd3      	adds	r3, r2, #3
 8020472:	b29b      	uxth	r3, r3
 8020474:	2b06      	cmp	r3, #6
 8020476:	d916      	bls.n	80204a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020478:	f8df c064 	ldr.w	ip, [pc, #100]	; 80204e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802047c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020480:	f8cd c004 	str.w	ip, [sp, #4]
 8020484:	f04f 0c01 	mov.w	ip, #1
 8020488:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802048c:	6920      	ldr	r0, [r4, #16]
 802048e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020492:	a901      	add	r1, sp, #4
 8020494:	f88d c008 	strb.w	ip, [sp, #8]
 8020498:	f8ad 200a 	strh.w	r2, [sp, #10]
 802049c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80204a0:	6803      	ldr	r3, [r0, #0]
 80204a2:	689b      	ldr	r3, [r3, #8]
 80204a4:	4798      	blx	r3
 80204a6:	4b0d      	ldr	r3, [pc, #52]	; (80204dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80204a8:	a901      	add	r1, sp, #4
 80204aa:	6920      	ldr	r0, [r4, #16]
 80204ac:	9301      	str	r3, [sp, #4]
 80204ae:	2300      	movs	r3, #0
 80204b0:	f88d 5008 	strb.w	r5, [sp, #8]
 80204b4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80204b8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80204bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80204c0:	6803      	ldr	r3, [r0, #0]
 80204c2:	681b      	ldr	r3, [r3, #0]
 80204c4:	4798      	blx	r3
 80204c6:	b005      	add	sp, #20
 80204c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204ca:	2900      	cmp	r1, #0
 80204cc:	d1eb      	bne.n	80204a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80204ce:	80a2      	strh	r2, [r4, #4]
 80204d0:	80c6      	strh	r6, [r0, #6]
 80204d2:	60a1      	str	r1, [r4, #8]
 80204d4:	81a1      	strh	r1, [r4, #12]
 80204d6:	73a1      	strb	r1, [r4, #14]
 80204d8:	e7e5      	b.n	80204a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80204da:	bf00      	nop
 80204dc:	08023724 	.word	0x08023724
 80204e0:	08023c8c 	.word	0x08023c8c

080204e4 <__aeabi_atexit>:
 80204e4:	460b      	mov	r3, r1
 80204e6:	4601      	mov	r1, r0
 80204e8:	4618      	mov	r0, r3
 80204ea:	f000 b853 	b.w	8020594 <__cxa_atexit>

080204ee <_ZdlPvj>:
 80204ee:	f000 b812 	b.w	8020516 <_ZdlPv>

080204f2 <__cxa_guard_acquire>:
 80204f2:	6803      	ldr	r3, [r0, #0]
 80204f4:	07db      	lsls	r3, r3, #31
 80204f6:	d406      	bmi.n	8020506 <__cxa_guard_acquire+0x14>
 80204f8:	7843      	ldrb	r3, [r0, #1]
 80204fa:	b103      	cbz	r3, 80204fe <__cxa_guard_acquire+0xc>
 80204fc:	deff      	udf	#255	; 0xff
 80204fe:	2301      	movs	r3, #1
 8020500:	7043      	strb	r3, [r0, #1]
 8020502:	4618      	mov	r0, r3
 8020504:	4770      	bx	lr
 8020506:	2000      	movs	r0, #0
 8020508:	4770      	bx	lr

0802050a <__cxa_guard_release>:
 802050a:	2301      	movs	r3, #1
 802050c:	6003      	str	r3, [r0, #0]
 802050e:	4770      	bx	lr

08020510 <__cxa_pure_virtual>:
 8020510:	b508      	push	{r3, lr}
 8020512:	f000 f80f 	bl	8020534 <_ZSt9terminatev>

08020516 <_ZdlPv>:
 8020516:	f000 b989 	b.w	802082c <free>

0802051a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802051a:	b508      	push	{r3, lr}
 802051c:	4780      	blx	r0
 802051e:	f000 f80e 	bl	802053e <abort>
	...

08020524 <_ZSt13get_terminatev>:
 8020524:	4b02      	ldr	r3, [pc, #8]	; (8020530 <_ZSt13get_terminatev+0xc>)
 8020526:	6818      	ldr	r0, [r3, #0]
 8020528:	f3bf 8f5b 	dmb	ish
 802052c:	4770      	bx	lr
 802052e:	bf00      	nop
 8020530:	240000d8 	.word	0x240000d8

08020534 <_ZSt9terminatev>:
 8020534:	b508      	push	{r3, lr}
 8020536:	f7ff fff5 	bl	8020524 <_ZSt13get_terminatev>
 802053a:	f7ff ffee 	bl	802051a <_ZN10__cxxabiv111__terminateEPFvvE>

0802053e <abort>:
 802053e:	b508      	push	{r3, lr}
 8020540:	2006      	movs	r0, #6
 8020542:	f000 fe11 	bl	8021168 <raise>
 8020546:	2001      	movs	r0, #1
 8020548:	f7e2 ff04 	bl	8003354 <_exit>

0802054c <__assert_func>:
 802054c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802054e:	4614      	mov	r4, r2
 8020550:	461a      	mov	r2, r3
 8020552:	4b09      	ldr	r3, [pc, #36]	; (8020578 <__assert_func+0x2c>)
 8020554:	681b      	ldr	r3, [r3, #0]
 8020556:	4605      	mov	r5, r0
 8020558:	68d8      	ldr	r0, [r3, #12]
 802055a:	b14c      	cbz	r4, 8020570 <__assert_func+0x24>
 802055c:	4b07      	ldr	r3, [pc, #28]	; (802057c <__assert_func+0x30>)
 802055e:	9100      	str	r1, [sp, #0]
 8020560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020564:	4906      	ldr	r1, [pc, #24]	; (8020580 <__assert_func+0x34>)
 8020566:	462b      	mov	r3, r5
 8020568:	f000 f8fe 	bl	8020768 <fiprintf>
 802056c:	f7ff ffe7 	bl	802053e <abort>
 8020570:	4b04      	ldr	r3, [pc, #16]	; (8020584 <__assert_func+0x38>)
 8020572:	461c      	mov	r4, r3
 8020574:	e7f3      	b.n	802055e <__assert_func+0x12>
 8020576:	bf00      	nop
 8020578:	240000dc 	.word	0x240000dc
 802057c:	08023eb4 	.word	0x08023eb4
 8020580:	08023ec1 	.word	0x08023ec1
 8020584:	08023eef 	.word	0x08023eef

08020588 <atexit>:
 8020588:	2300      	movs	r3, #0
 802058a:	4601      	mov	r1, r0
 802058c:	461a      	mov	r2, r3
 802058e:	4618      	mov	r0, r3
 8020590:	f000 bfa4 	b.w	80214dc <__register_exitproc>

08020594 <__cxa_atexit>:
 8020594:	b510      	push	{r4, lr}
 8020596:	4c05      	ldr	r4, [pc, #20]	; (80205ac <__cxa_atexit+0x18>)
 8020598:	4613      	mov	r3, r2
 802059a:	b12c      	cbz	r4, 80205a8 <__cxa_atexit+0x14>
 802059c:	460a      	mov	r2, r1
 802059e:	4601      	mov	r1, r0
 80205a0:	2002      	movs	r0, #2
 80205a2:	f000 ff9b 	bl	80214dc <__register_exitproc>
 80205a6:	bd10      	pop	{r4, pc}
 80205a8:	4620      	mov	r0, r4
 80205aa:	e7fc      	b.n	80205a6 <__cxa_atexit+0x12>
 80205ac:	080214dd 	.word	0x080214dd

080205b0 <__errno>:
 80205b0:	4b01      	ldr	r3, [pc, #4]	; (80205b8 <__errno+0x8>)
 80205b2:	6818      	ldr	r0, [r3, #0]
 80205b4:	4770      	bx	lr
 80205b6:	bf00      	nop
 80205b8:	240000dc 	.word	0x240000dc

080205bc <std>:
 80205bc:	2300      	movs	r3, #0
 80205be:	b510      	push	{r4, lr}
 80205c0:	4604      	mov	r4, r0
 80205c2:	e9c0 3300 	strd	r3, r3, [r0]
 80205c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80205ca:	6083      	str	r3, [r0, #8]
 80205cc:	8181      	strh	r1, [r0, #12]
 80205ce:	6643      	str	r3, [r0, #100]	; 0x64
 80205d0:	81c2      	strh	r2, [r0, #14]
 80205d2:	6183      	str	r3, [r0, #24]
 80205d4:	4619      	mov	r1, r3
 80205d6:	2208      	movs	r2, #8
 80205d8:	305c      	adds	r0, #92	; 0x5c
 80205da:	f000 f94d 	bl	8020878 <memset>
 80205de:	4b05      	ldr	r3, [pc, #20]	; (80205f4 <std+0x38>)
 80205e0:	6263      	str	r3, [r4, #36]	; 0x24
 80205e2:	4b05      	ldr	r3, [pc, #20]	; (80205f8 <std+0x3c>)
 80205e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80205e6:	4b05      	ldr	r3, [pc, #20]	; (80205fc <std+0x40>)
 80205e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80205ea:	4b05      	ldr	r3, [pc, #20]	; (8020600 <std+0x44>)
 80205ec:	6224      	str	r4, [r4, #32]
 80205ee:	6323      	str	r3, [r4, #48]	; 0x30
 80205f0:	bd10      	pop	{r4, pc}
 80205f2:	bf00      	nop
 80205f4:	080211e1 	.word	0x080211e1
 80205f8:	08021203 	.word	0x08021203
 80205fc:	0802123b 	.word	0x0802123b
 8020600:	0802125f 	.word	0x0802125f

08020604 <_cleanup_r>:
 8020604:	4901      	ldr	r1, [pc, #4]	; (802060c <_cleanup_r+0x8>)
 8020606:	f000 b8c1 	b.w	802078c <_fwalk_reent>
 802060a:	bf00      	nop
 802060c:	080216cd 	.word	0x080216cd

08020610 <__sfmoreglue>:
 8020610:	b570      	push	{r4, r5, r6, lr}
 8020612:	2268      	movs	r2, #104	; 0x68
 8020614:	1e4d      	subs	r5, r1, #1
 8020616:	4355      	muls	r5, r2
 8020618:	460e      	mov	r6, r1
 802061a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802061e:	f000 f99f 	bl	8020960 <_malloc_r>
 8020622:	4604      	mov	r4, r0
 8020624:	b140      	cbz	r0, 8020638 <__sfmoreglue+0x28>
 8020626:	2100      	movs	r1, #0
 8020628:	e9c0 1600 	strd	r1, r6, [r0]
 802062c:	300c      	adds	r0, #12
 802062e:	60a0      	str	r0, [r4, #8]
 8020630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020634:	f000 f920 	bl	8020878 <memset>
 8020638:	4620      	mov	r0, r4
 802063a:	bd70      	pop	{r4, r5, r6, pc}

0802063c <__sfp_lock_acquire>:
 802063c:	4801      	ldr	r0, [pc, #4]	; (8020644 <__sfp_lock_acquire+0x8>)
 802063e:	f000 b8ea 	b.w	8020816 <__retarget_lock_acquire_recursive>
 8020642:	bf00      	nop
 8020644:	2400c932 	.word	0x2400c932

08020648 <__sfp_lock_release>:
 8020648:	4801      	ldr	r0, [pc, #4]	; (8020650 <__sfp_lock_release+0x8>)
 802064a:	f000 b8e6 	b.w	802081a <__retarget_lock_release_recursive>
 802064e:	bf00      	nop
 8020650:	2400c932 	.word	0x2400c932

08020654 <__sinit_lock_acquire>:
 8020654:	4801      	ldr	r0, [pc, #4]	; (802065c <__sinit_lock_acquire+0x8>)
 8020656:	f000 b8de 	b.w	8020816 <__retarget_lock_acquire_recursive>
 802065a:	bf00      	nop
 802065c:	2400c933 	.word	0x2400c933

08020660 <__sinit_lock_release>:
 8020660:	4801      	ldr	r0, [pc, #4]	; (8020668 <__sinit_lock_release+0x8>)
 8020662:	f000 b8da 	b.w	802081a <__retarget_lock_release_recursive>
 8020666:	bf00      	nop
 8020668:	2400c933 	.word	0x2400c933

0802066c <__sinit>:
 802066c:	b510      	push	{r4, lr}
 802066e:	4604      	mov	r4, r0
 8020670:	f7ff fff0 	bl	8020654 <__sinit_lock_acquire>
 8020674:	69a3      	ldr	r3, [r4, #24]
 8020676:	b11b      	cbz	r3, 8020680 <__sinit+0x14>
 8020678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802067c:	f7ff bff0 	b.w	8020660 <__sinit_lock_release>
 8020680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020684:	6523      	str	r3, [r4, #80]	; 0x50
 8020686:	4b13      	ldr	r3, [pc, #76]	; (80206d4 <__sinit+0x68>)
 8020688:	4a13      	ldr	r2, [pc, #76]	; (80206d8 <__sinit+0x6c>)
 802068a:	681b      	ldr	r3, [r3, #0]
 802068c:	62a2      	str	r2, [r4, #40]	; 0x28
 802068e:	42a3      	cmp	r3, r4
 8020690:	bf04      	itt	eq
 8020692:	2301      	moveq	r3, #1
 8020694:	61a3      	streq	r3, [r4, #24]
 8020696:	4620      	mov	r0, r4
 8020698:	f000 f820 	bl	80206dc <__sfp>
 802069c:	6060      	str	r0, [r4, #4]
 802069e:	4620      	mov	r0, r4
 80206a0:	f000 f81c 	bl	80206dc <__sfp>
 80206a4:	60a0      	str	r0, [r4, #8]
 80206a6:	4620      	mov	r0, r4
 80206a8:	f000 f818 	bl	80206dc <__sfp>
 80206ac:	2200      	movs	r2, #0
 80206ae:	60e0      	str	r0, [r4, #12]
 80206b0:	2104      	movs	r1, #4
 80206b2:	6860      	ldr	r0, [r4, #4]
 80206b4:	f7ff ff82 	bl	80205bc <std>
 80206b8:	68a0      	ldr	r0, [r4, #8]
 80206ba:	2201      	movs	r2, #1
 80206bc:	2109      	movs	r1, #9
 80206be:	f7ff ff7d 	bl	80205bc <std>
 80206c2:	68e0      	ldr	r0, [r4, #12]
 80206c4:	2202      	movs	r2, #2
 80206c6:	2112      	movs	r1, #18
 80206c8:	f7ff ff78 	bl	80205bc <std>
 80206cc:	2301      	movs	r3, #1
 80206ce:	61a3      	str	r3, [r4, #24]
 80206d0:	e7d2      	b.n	8020678 <__sinit+0xc>
 80206d2:	bf00      	nop
 80206d4:	08023f50 	.word	0x08023f50
 80206d8:	08020605 	.word	0x08020605

080206dc <__sfp>:
 80206dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206de:	4607      	mov	r7, r0
 80206e0:	f7ff ffac 	bl	802063c <__sfp_lock_acquire>
 80206e4:	4b1e      	ldr	r3, [pc, #120]	; (8020760 <__sfp+0x84>)
 80206e6:	681e      	ldr	r6, [r3, #0]
 80206e8:	69b3      	ldr	r3, [r6, #24]
 80206ea:	b913      	cbnz	r3, 80206f2 <__sfp+0x16>
 80206ec:	4630      	mov	r0, r6
 80206ee:	f7ff ffbd 	bl	802066c <__sinit>
 80206f2:	3648      	adds	r6, #72	; 0x48
 80206f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80206f8:	3b01      	subs	r3, #1
 80206fa:	d503      	bpl.n	8020704 <__sfp+0x28>
 80206fc:	6833      	ldr	r3, [r6, #0]
 80206fe:	b30b      	cbz	r3, 8020744 <__sfp+0x68>
 8020700:	6836      	ldr	r6, [r6, #0]
 8020702:	e7f7      	b.n	80206f4 <__sfp+0x18>
 8020704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020708:	b9d5      	cbnz	r5, 8020740 <__sfp+0x64>
 802070a:	4b16      	ldr	r3, [pc, #88]	; (8020764 <__sfp+0x88>)
 802070c:	60e3      	str	r3, [r4, #12]
 802070e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020712:	6665      	str	r5, [r4, #100]	; 0x64
 8020714:	f000 f87e 	bl	8020814 <__retarget_lock_init_recursive>
 8020718:	f7ff ff96 	bl	8020648 <__sfp_lock_release>
 802071c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020724:	6025      	str	r5, [r4, #0]
 8020726:	61a5      	str	r5, [r4, #24]
 8020728:	2208      	movs	r2, #8
 802072a:	4629      	mov	r1, r5
 802072c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020730:	f000 f8a2 	bl	8020878 <memset>
 8020734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802073c:	4620      	mov	r0, r4
 802073e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020740:	3468      	adds	r4, #104	; 0x68
 8020742:	e7d9      	b.n	80206f8 <__sfp+0x1c>
 8020744:	2104      	movs	r1, #4
 8020746:	4638      	mov	r0, r7
 8020748:	f7ff ff62 	bl	8020610 <__sfmoreglue>
 802074c:	4604      	mov	r4, r0
 802074e:	6030      	str	r0, [r6, #0]
 8020750:	2800      	cmp	r0, #0
 8020752:	d1d5      	bne.n	8020700 <__sfp+0x24>
 8020754:	f7ff ff78 	bl	8020648 <__sfp_lock_release>
 8020758:	230c      	movs	r3, #12
 802075a:	603b      	str	r3, [r7, #0]
 802075c:	e7ee      	b.n	802073c <__sfp+0x60>
 802075e:	bf00      	nop
 8020760:	08023f50 	.word	0x08023f50
 8020764:	ffff0001 	.word	0xffff0001

08020768 <fiprintf>:
 8020768:	b40e      	push	{r1, r2, r3}
 802076a:	b503      	push	{r0, r1, lr}
 802076c:	4601      	mov	r1, r0
 802076e:	ab03      	add	r3, sp, #12
 8020770:	4805      	ldr	r0, [pc, #20]	; (8020788 <fiprintf+0x20>)
 8020772:	f853 2b04 	ldr.w	r2, [r3], #4
 8020776:	6800      	ldr	r0, [r0, #0]
 8020778:	9301      	str	r3, [sp, #4]
 802077a:	f000 f98f 	bl	8020a9c <_vfiprintf_r>
 802077e:	b002      	add	sp, #8
 8020780:	f85d eb04 	ldr.w	lr, [sp], #4
 8020784:	b003      	add	sp, #12
 8020786:	4770      	bx	lr
 8020788:	240000dc 	.word	0x240000dc

0802078c <_fwalk_reent>:
 802078c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020790:	4606      	mov	r6, r0
 8020792:	4688      	mov	r8, r1
 8020794:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020798:	2700      	movs	r7, #0
 802079a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802079e:	f1b9 0901 	subs.w	r9, r9, #1
 80207a2:	d505      	bpl.n	80207b0 <_fwalk_reent+0x24>
 80207a4:	6824      	ldr	r4, [r4, #0]
 80207a6:	2c00      	cmp	r4, #0
 80207a8:	d1f7      	bne.n	802079a <_fwalk_reent+0xe>
 80207aa:	4638      	mov	r0, r7
 80207ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80207b0:	89ab      	ldrh	r3, [r5, #12]
 80207b2:	2b01      	cmp	r3, #1
 80207b4:	d907      	bls.n	80207c6 <_fwalk_reent+0x3a>
 80207b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80207ba:	3301      	adds	r3, #1
 80207bc:	d003      	beq.n	80207c6 <_fwalk_reent+0x3a>
 80207be:	4629      	mov	r1, r5
 80207c0:	4630      	mov	r0, r6
 80207c2:	47c0      	blx	r8
 80207c4:	4307      	orrs	r7, r0
 80207c6:	3568      	adds	r5, #104	; 0x68
 80207c8:	e7e9      	b.n	802079e <_fwalk_reent+0x12>
	...

080207cc <__libc_init_array>:
 80207cc:	b570      	push	{r4, r5, r6, lr}
 80207ce:	4d0d      	ldr	r5, [pc, #52]	; (8020804 <__libc_init_array+0x38>)
 80207d0:	4c0d      	ldr	r4, [pc, #52]	; (8020808 <__libc_init_array+0x3c>)
 80207d2:	1b64      	subs	r4, r4, r5
 80207d4:	10a4      	asrs	r4, r4, #2
 80207d6:	2600      	movs	r6, #0
 80207d8:	42a6      	cmp	r6, r4
 80207da:	d109      	bne.n	80207f0 <__libc_init_array+0x24>
 80207dc:	4d0b      	ldr	r5, [pc, #44]	; (802080c <__libc_init_array+0x40>)
 80207de:	4c0c      	ldr	r4, [pc, #48]	; (8020810 <__libc_init_array+0x44>)
 80207e0:	f001 fa14 	bl	8021c0c <_init>
 80207e4:	1b64      	subs	r4, r4, r5
 80207e6:	10a4      	asrs	r4, r4, #2
 80207e8:	2600      	movs	r6, #0
 80207ea:	42a6      	cmp	r6, r4
 80207ec:	d105      	bne.n	80207fa <__libc_init_array+0x2e>
 80207ee:	bd70      	pop	{r4, r5, r6, pc}
 80207f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80207f4:	4798      	blx	r3
 80207f6:	3601      	adds	r6, #1
 80207f8:	e7ee      	b.n	80207d8 <__libc_init_array+0xc>
 80207fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80207fe:	4798      	blx	r3
 8020800:	3601      	adds	r6, #1
 8020802:	e7f2      	b.n	80207ea <__libc_init_array+0x1e>
 8020804:	08024718 	.word	0x08024718
 8020808:	08024718 	.word	0x08024718
 802080c:	08024718 	.word	0x08024718
 8020810:	08024740 	.word	0x08024740

08020814 <__retarget_lock_init_recursive>:
 8020814:	4770      	bx	lr

08020816 <__retarget_lock_acquire_recursive>:
 8020816:	4770      	bx	lr

08020818 <__retarget_lock_release>:
 8020818:	4770      	bx	lr

0802081a <__retarget_lock_release_recursive>:
 802081a:	4770      	bx	lr

0802081c <malloc>:
 802081c:	4b02      	ldr	r3, [pc, #8]	; (8020828 <malloc+0xc>)
 802081e:	4601      	mov	r1, r0
 8020820:	6818      	ldr	r0, [r3, #0]
 8020822:	f000 b89d 	b.w	8020960 <_malloc_r>
 8020826:	bf00      	nop
 8020828:	240000dc 	.word	0x240000dc

0802082c <free>:
 802082c:	4b02      	ldr	r3, [pc, #8]	; (8020838 <free+0xc>)
 802082e:	4601      	mov	r1, r0
 8020830:	6818      	ldr	r0, [r3, #0]
 8020832:	f000 b829 	b.w	8020888 <_free_r>
 8020836:	bf00      	nop
 8020838:	240000dc 	.word	0x240000dc

0802083c <memcmp>:
 802083c:	b510      	push	{r4, lr}
 802083e:	3901      	subs	r1, #1
 8020840:	4402      	add	r2, r0
 8020842:	4290      	cmp	r0, r2
 8020844:	d101      	bne.n	802084a <memcmp+0xe>
 8020846:	2000      	movs	r0, #0
 8020848:	e005      	b.n	8020856 <memcmp+0x1a>
 802084a:	7803      	ldrb	r3, [r0, #0]
 802084c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020850:	42a3      	cmp	r3, r4
 8020852:	d001      	beq.n	8020858 <memcmp+0x1c>
 8020854:	1b18      	subs	r0, r3, r4
 8020856:	bd10      	pop	{r4, pc}
 8020858:	3001      	adds	r0, #1
 802085a:	e7f2      	b.n	8020842 <memcmp+0x6>

0802085c <memcpy>:
 802085c:	440a      	add	r2, r1
 802085e:	4291      	cmp	r1, r2
 8020860:	f100 33ff 	add.w	r3, r0, #4294967295
 8020864:	d100      	bne.n	8020868 <memcpy+0xc>
 8020866:	4770      	bx	lr
 8020868:	b510      	push	{r4, lr}
 802086a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802086e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020872:	4291      	cmp	r1, r2
 8020874:	d1f9      	bne.n	802086a <memcpy+0xe>
 8020876:	bd10      	pop	{r4, pc}

08020878 <memset>:
 8020878:	4402      	add	r2, r0
 802087a:	4603      	mov	r3, r0
 802087c:	4293      	cmp	r3, r2
 802087e:	d100      	bne.n	8020882 <memset+0xa>
 8020880:	4770      	bx	lr
 8020882:	f803 1b01 	strb.w	r1, [r3], #1
 8020886:	e7f9      	b.n	802087c <memset+0x4>

08020888 <_free_r>:
 8020888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802088a:	2900      	cmp	r1, #0
 802088c:	d044      	beq.n	8020918 <_free_r+0x90>
 802088e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020892:	9001      	str	r0, [sp, #4]
 8020894:	2b00      	cmp	r3, #0
 8020896:	f1a1 0404 	sub.w	r4, r1, #4
 802089a:	bfb8      	it	lt
 802089c:	18e4      	addlt	r4, r4, r3
 802089e:	f000 ffe3 	bl	8021868 <__malloc_lock>
 80208a2:	4a1e      	ldr	r2, [pc, #120]	; (802091c <_free_r+0x94>)
 80208a4:	9801      	ldr	r0, [sp, #4]
 80208a6:	6813      	ldr	r3, [r2, #0]
 80208a8:	b933      	cbnz	r3, 80208b8 <_free_r+0x30>
 80208aa:	6063      	str	r3, [r4, #4]
 80208ac:	6014      	str	r4, [r2, #0]
 80208ae:	b003      	add	sp, #12
 80208b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80208b4:	f000 bfde 	b.w	8021874 <__malloc_unlock>
 80208b8:	42a3      	cmp	r3, r4
 80208ba:	d908      	bls.n	80208ce <_free_r+0x46>
 80208bc:	6825      	ldr	r5, [r4, #0]
 80208be:	1961      	adds	r1, r4, r5
 80208c0:	428b      	cmp	r3, r1
 80208c2:	bf01      	itttt	eq
 80208c4:	6819      	ldreq	r1, [r3, #0]
 80208c6:	685b      	ldreq	r3, [r3, #4]
 80208c8:	1949      	addeq	r1, r1, r5
 80208ca:	6021      	streq	r1, [r4, #0]
 80208cc:	e7ed      	b.n	80208aa <_free_r+0x22>
 80208ce:	461a      	mov	r2, r3
 80208d0:	685b      	ldr	r3, [r3, #4]
 80208d2:	b10b      	cbz	r3, 80208d8 <_free_r+0x50>
 80208d4:	42a3      	cmp	r3, r4
 80208d6:	d9fa      	bls.n	80208ce <_free_r+0x46>
 80208d8:	6811      	ldr	r1, [r2, #0]
 80208da:	1855      	adds	r5, r2, r1
 80208dc:	42a5      	cmp	r5, r4
 80208de:	d10b      	bne.n	80208f8 <_free_r+0x70>
 80208e0:	6824      	ldr	r4, [r4, #0]
 80208e2:	4421      	add	r1, r4
 80208e4:	1854      	adds	r4, r2, r1
 80208e6:	42a3      	cmp	r3, r4
 80208e8:	6011      	str	r1, [r2, #0]
 80208ea:	d1e0      	bne.n	80208ae <_free_r+0x26>
 80208ec:	681c      	ldr	r4, [r3, #0]
 80208ee:	685b      	ldr	r3, [r3, #4]
 80208f0:	6053      	str	r3, [r2, #4]
 80208f2:	4421      	add	r1, r4
 80208f4:	6011      	str	r1, [r2, #0]
 80208f6:	e7da      	b.n	80208ae <_free_r+0x26>
 80208f8:	d902      	bls.n	8020900 <_free_r+0x78>
 80208fa:	230c      	movs	r3, #12
 80208fc:	6003      	str	r3, [r0, #0]
 80208fe:	e7d6      	b.n	80208ae <_free_r+0x26>
 8020900:	6825      	ldr	r5, [r4, #0]
 8020902:	1961      	adds	r1, r4, r5
 8020904:	428b      	cmp	r3, r1
 8020906:	bf04      	itt	eq
 8020908:	6819      	ldreq	r1, [r3, #0]
 802090a:	685b      	ldreq	r3, [r3, #4]
 802090c:	6063      	str	r3, [r4, #4]
 802090e:	bf04      	itt	eq
 8020910:	1949      	addeq	r1, r1, r5
 8020912:	6021      	streq	r1, [r4, #0]
 8020914:	6054      	str	r4, [r2, #4]
 8020916:	e7ca      	b.n	80208ae <_free_r+0x26>
 8020918:	b003      	add	sp, #12
 802091a:	bd30      	pop	{r4, r5, pc}
 802091c:	2400c934 	.word	0x2400c934

08020920 <sbrk_aligned>:
 8020920:	b570      	push	{r4, r5, r6, lr}
 8020922:	4e0e      	ldr	r6, [pc, #56]	; (802095c <sbrk_aligned+0x3c>)
 8020924:	460c      	mov	r4, r1
 8020926:	6831      	ldr	r1, [r6, #0]
 8020928:	4605      	mov	r5, r0
 802092a:	b911      	cbnz	r1, 8020932 <sbrk_aligned+0x12>
 802092c:	f000 fbe4 	bl	80210f8 <_sbrk_r>
 8020930:	6030      	str	r0, [r6, #0]
 8020932:	4621      	mov	r1, r4
 8020934:	4628      	mov	r0, r5
 8020936:	f000 fbdf 	bl	80210f8 <_sbrk_r>
 802093a:	1c43      	adds	r3, r0, #1
 802093c:	d00a      	beq.n	8020954 <sbrk_aligned+0x34>
 802093e:	1cc4      	adds	r4, r0, #3
 8020940:	f024 0403 	bic.w	r4, r4, #3
 8020944:	42a0      	cmp	r0, r4
 8020946:	d007      	beq.n	8020958 <sbrk_aligned+0x38>
 8020948:	1a21      	subs	r1, r4, r0
 802094a:	4628      	mov	r0, r5
 802094c:	f000 fbd4 	bl	80210f8 <_sbrk_r>
 8020950:	3001      	adds	r0, #1
 8020952:	d101      	bne.n	8020958 <sbrk_aligned+0x38>
 8020954:	f04f 34ff 	mov.w	r4, #4294967295
 8020958:	4620      	mov	r0, r4
 802095a:	bd70      	pop	{r4, r5, r6, pc}
 802095c:	2400c938 	.word	0x2400c938

08020960 <_malloc_r>:
 8020960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020964:	1ccd      	adds	r5, r1, #3
 8020966:	f025 0503 	bic.w	r5, r5, #3
 802096a:	3508      	adds	r5, #8
 802096c:	2d0c      	cmp	r5, #12
 802096e:	bf38      	it	cc
 8020970:	250c      	movcc	r5, #12
 8020972:	2d00      	cmp	r5, #0
 8020974:	4607      	mov	r7, r0
 8020976:	db01      	blt.n	802097c <_malloc_r+0x1c>
 8020978:	42a9      	cmp	r1, r5
 802097a:	d905      	bls.n	8020988 <_malloc_r+0x28>
 802097c:	230c      	movs	r3, #12
 802097e:	603b      	str	r3, [r7, #0]
 8020980:	2600      	movs	r6, #0
 8020982:	4630      	mov	r0, r6
 8020984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020988:	4e2e      	ldr	r6, [pc, #184]	; (8020a44 <_malloc_r+0xe4>)
 802098a:	f000 ff6d 	bl	8021868 <__malloc_lock>
 802098e:	6833      	ldr	r3, [r6, #0]
 8020990:	461c      	mov	r4, r3
 8020992:	bb34      	cbnz	r4, 80209e2 <_malloc_r+0x82>
 8020994:	4629      	mov	r1, r5
 8020996:	4638      	mov	r0, r7
 8020998:	f7ff ffc2 	bl	8020920 <sbrk_aligned>
 802099c:	1c43      	adds	r3, r0, #1
 802099e:	4604      	mov	r4, r0
 80209a0:	d14d      	bne.n	8020a3e <_malloc_r+0xde>
 80209a2:	6834      	ldr	r4, [r6, #0]
 80209a4:	4626      	mov	r6, r4
 80209a6:	2e00      	cmp	r6, #0
 80209a8:	d140      	bne.n	8020a2c <_malloc_r+0xcc>
 80209aa:	6823      	ldr	r3, [r4, #0]
 80209ac:	4631      	mov	r1, r6
 80209ae:	4638      	mov	r0, r7
 80209b0:	eb04 0803 	add.w	r8, r4, r3
 80209b4:	f000 fba0 	bl	80210f8 <_sbrk_r>
 80209b8:	4580      	cmp	r8, r0
 80209ba:	d13a      	bne.n	8020a32 <_malloc_r+0xd2>
 80209bc:	6821      	ldr	r1, [r4, #0]
 80209be:	3503      	adds	r5, #3
 80209c0:	1a6d      	subs	r5, r5, r1
 80209c2:	f025 0503 	bic.w	r5, r5, #3
 80209c6:	3508      	adds	r5, #8
 80209c8:	2d0c      	cmp	r5, #12
 80209ca:	bf38      	it	cc
 80209cc:	250c      	movcc	r5, #12
 80209ce:	4629      	mov	r1, r5
 80209d0:	4638      	mov	r0, r7
 80209d2:	f7ff ffa5 	bl	8020920 <sbrk_aligned>
 80209d6:	3001      	adds	r0, #1
 80209d8:	d02b      	beq.n	8020a32 <_malloc_r+0xd2>
 80209da:	6823      	ldr	r3, [r4, #0]
 80209dc:	442b      	add	r3, r5
 80209de:	6023      	str	r3, [r4, #0]
 80209e0:	e00e      	b.n	8020a00 <_malloc_r+0xa0>
 80209e2:	6822      	ldr	r2, [r4, #0]
 80209e4:	1b52      	subs	r2, r2, r5
 80209e6:	d41e      	bmi.n	8020a26 <_malloc_r+0xc6>
 80209e8:	2a0b      	cmp	r2, #11
 80209ea:	d916      	bls.n	8020a1a <_malloc_r+0xba>
 80209ec:	1961      	adds	r1, r4, r5
 80209ee:	42a3      	cmp	r3, r4
 80209f0:	6025      	str	r5, [r4, #0]
 80209f2:	bf18      	it	ne
 80209f4:	6059      	strne	r1, [r3, #4]
 80209f6:	6863      	ldr	r3, [r4, #4]
 80209f8:	bf08      	it	eq
 80209fa:	6031      	streq	r1, [r6, #0]
 80209fc:	5162      	str	r2, [r4, r5]
 80209fe:	604b      	str	r3, [r1, #4]
 8020a00:	4638      	mov	r0, r7
 8020a02:	f104 060b 	add.w	r6, r4, #11
 8020a06:	f000 ff35 	bl	8021874 <__malloc_unlock>
 8020a0a:	f026 0607 	bic.w	r6, r6, #7
 8020a0e:	1d23      	adds	r3, r4, #4
 8020a10:	1af2      	subs	r2, r6, r3
 8020a12:	d0b6      	beq.n	8020982 <_malloc_r+0x22>
 8020a14:	1b9b      	subs	r3, r3, r6
 8020a16:	50a3      	str	r3, [r4, r2]
 8020a18:	e7b3      	b.n	8020982 <_malloc_r+0x22>
 8020a1a:	6862      	ldr	r2, [r4, #4]
 8020a1c:	42a3      	cmp	r3, r4
 8020a1e:	bf0c      	ite	eq
 8020a20:	6032      	streq	r2, [r6, #0]
 8020a22:	605a      	strne	r2, [r3, #4]
 8020a24:	e7ec      	b.n	8020a00 <_malloc_r+0xa0>
 8020a26:	4623      	mov	r3, r4
 8020a28:	6864      	ldr	r4, [r4, #4]
 8020a2a:	e7b2      	b.n	8020992 <_malloc_r+0x32>
 8020a2c:	4634      	mov	r4, r6
 8020a2e:	6876      	ldr	r6, [r6, #4]
 8020a30:	e7b9      	b.n	80209a6 <_malloc_r+0x46>
 8020a32:	230c      	movs	r3, #12
 8020a34:	603b      	str	r3, [r7, #0]
 8020a36:	4638      	mov	r0, r7
 8020a38:	f000 ff1c 	bl	8021874 <__malloc_unlock>
 8020a3c:	e7a1      	b.n	8020982 <_malloc_r+0x22>
 8020a3e:	6025      	str	r5, [r4, #0]
 8020a40:	e7de      	b.n	8020a00 <_malloc_r+0xa0>
 8020a42:	bf00      	nop
 8020a44:	2400c934 	.word	0x2400c934

08020a48 <__sfputc_r>:
 8020a48:	6893      	ldr	r3, [r2, #8]
 8020a4a:	3b01      	subs	r3, #1
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	b410      	push	{r4}
 8020a50:	6093      	str	r3, [r2, #8]
 8020a52:	da08      	bge.n	8020a66 <__sfputc_r+0x1e>
 8020a54:	6994      	ldr	r4, [r2, #24]
 8020a56:	42a3      	cmp	r3, r4
 8020a58:	db01      	blt.n	8020a5e <__sfputc_r+0x16>
 8020a5a:	290a      	cmp	r1, #10
 8020a5c:	d103      	bne.n	8020a66 <__sfputc_r+0x1e>
 8020a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a62:	f000 bc69 	b.w	8021338 <__swbuf_r>
 8020a66:	6813      	ldr	r3, [r2, #0]
 8020a68:	1c58      	adds	r0, r3, #1
 8020a6a:	6010      	str	r0, [r2, #0]
 8020a6c:	7019      	strb	r1, [r3, #0]
 8020a6e:	4608      	mov	r0, r1
 8020a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a74:	4770      	bx	lr

08020a76 <__sfputs_r>:
 8020a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a78:	4606      	mov	r6, r0
 8020a7a:	460f      	mov	r7, r1
 8020a7c:	4614      	mov	r4, r2
 8020a7e:	18d5      	adds	r5, r2, r3
 8020a80:	42ac      	cmp	r4, r5
 8020a82:	d101      	bne.n	8020a88 <__sfputs_r+0x12>
 8020a84:	2000      	movs	r0, #0
 8020a86:	e007      	b.n	8020a98 <__sfputs_r+0x22>
 8020a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a8c:	463a      	mov	r2, r7
 8020a8e:	4630      	mov	r0, r6
 8020a90:	f7ff ffda 	bl	8020a48 <__sfputc_r>
 8020a94:	1c43      	adds	r3, r0, #1
 8020a96:	d1f3      	bne.n	8020a80 <__sfputs_r+0xa>
 8020a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020a9c <_vfiprintf_r>:
 8020a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020aa0:	460d      	mov	r5, r1
 8020aa2:	b09d      	sub	sp, #116	; 0x74
 8020aa4:	4614      	mov	r4, r2
 8020aa6:	4698      	mov	r8, r3
 8020aa8:	4606      	mov	r6, r0
 8020aaa:	b118      	cbz	r0, 8020ab4 <_vfiprintf_r+0x18>
 8020aac:	6983      	ldr	r3, [r0, #24]
 8020aae:	b90b      	cbnz	r3, 8020ab4 <_vfiprintf_r+0x18>
 8020ab0:	f7ff fddc 	bl	802066c <__sinit>
 8020ab4:	4b89      	ldr	r3, [pc, #548]	; (8020cdc <_vfiprintf_r+0x240>)
 8020ab6:	429d      	cmp	r5, r3
 8020ab8:	d11b      	bne.n	8020af2 <_vfiprintf_r+0x56>
 8020aba:	6875      	ldr	r5, [r6, #4]
 8020abc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020abe:	07d9      	lsls	r1, r3, #31
 8020ac0:	d405      	bmi.n	8020ace <_vfiprintf_r+0x32>
 8020ac2:	89ab      	ldrh	r3, [r5, #12]
 8020ac4:	059a      	lsls	r2, r3, #22
 8020ac6:	d402      	bmi.n	8020ace <_vfiprintf_r+0x32>
 8020ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020aca:	f7ff fea4 	bl	8020816 <__retarget_lock_acquire_recursive>
 8020ace:	89ab      	ldrh	r3, [r5, #12]
 8020ad0:	071b      	lsls	r3, r3, #28
 8020ad2:	d501      	bpl.n	8020ad8 <_vfiprintf_r+0x3c>
 8020ad4:	692b      	ldr	r3, [r5, #16]
 8020ad6:	b9eb      	cbnz	r3, 8020b14 <_vfiprintf_r+0x78>
 8020ad8:	4629      	mov	r1, r5
 8020ada:	4630      	mov	r0, r6
 8020adc:	f000 fc90 	bl	8021400 <__swsetup_r>
 8020ae0:	b1c0      	cbz	r0, 8020b14 <_vfiprintf_r+0x78>
 8020ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020ae4:	07dc      	lsls	r4, r3, #31
 8020ae6:	d50e      	bpl.n	8020b06 <_vfiprintf_r+0x6a>
 8020ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8020aec:	b01d      	add	sp, #116	; 0x74
 8020aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020af2:	4b7b      	ldr	r3, [pc, #492]	; (8020ce0 <_vfiprintf_r+0x244>)
 8020af4:	429d      	cmp	r5, r3
 8020af6:	d101      	bne.n	8020afc <_vfiprintf_r+0x60>
 8020af8:	68b5      	ldr	r5, [r6, #8]
 8020afa:	e7df      	b.n	8020abc <_vfiprintf_r+0x20>
 8020afc:	4b79      	ldr	r3, [pc, #484]	; (8020ce4 <_vfiprintf_r+0x248>)
 8020afe:	429d      	cmp	r5, r3
 8020b00:	bf08      	it	eq
 8020b02:	68f5      	ldreq	r5, [r6, #12]
 8020b04:	e7da      	b.n	8020abc <_vfiprintf_r+0x20>
 8020b06:	89ab      	ldrh	r3, [r5, #12]
 8020b08:	0598      	lsls	r0, r3, #22
 8020b0a:	d4ed      	bmi.n	8020ae8 <_vfiprintf_r+0x4c>
 8020b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020b0e:	f7ff fe84 	bl	802081a <__retarget_lock_release_recursive>
 8020b12:	e7e9      	b.n	8020ae8 <_vfiprintf_r+0x4c>
 8020b14:	2300      	movs	r3, #0
 8020b16:	9309      	str	r3, [sp, #36]	; 0x24
 8020b18:	2320      	movs	r3, #32
 8020b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b22:	2330      	movs	r3, #48	; 0x30
 8020b24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020ce8 <_vfiprintf_r+0x24c>
 8020b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020b2c:	f04f 0901 	mov.w	r9, #1
 8020b30:	4623      	mov	r3, r4
 8020b32:	469a      	mov	sl, r3
 8020b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b38:	b10a      	cbz	r2, 8020b3e <_vfiprintf_r+0xa2>
 8020b3a:	2a25      	cmp	r2, #37	; 0x25
 8020b3c:	d1f9      	bne.n	8020b32 <_vfiprintf_r+0x96>
 8020b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8020b42:	d00b      	beq.n	8020b5c <_vfiprintf_r+0xc0>
 8020b44:	465b      	mov	r3, fp
 8020b46:	4622      	mov	r2, r4
 8020b48:	4629      	mov	r1, r5
 8020b4a:	4630      	mov	r0, r6
 8020b4c:	f7ff ff93 	bl	8020a76 <__sfputs_r>
 8020b50:	3001      	adds	r0, #1
 8020b52:	f000 80aa 	beq.w	8020caa <_vfiprintf_r+0x20e>
 8020b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b58:	445a      	add	r2, fp
 8020b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8020b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8020b60:	2b00      	cmp	r3, #0
 8020b62:	f000 80a2 	beq.w	8020caa <_vfiprintf_r+0x20e>
 8020b66:	2300      	movs	r3, #0
 8020b68:	f04f 32ff 	mov.w	r2, #4294967295
 8020b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020b70:	f10a 0a01 	add.w	sl, sl, #1
 8020b74:	9304      	str	r3, [sp, #16]
 8020b76:	9307      	str	r3, [sp, #28]
 8020b78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020b7c:	931a      	str	r3, [sp, #104]	; 0x68
 8020b7e:	4654      	mov	r4, sl
 8020b80:	2205      	movs	r2, #5
 8020b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b86:	4858      	ldr	r0, [pc, #352]	; (8020ce8 <_vfiprintf_r+0x24c>)
 8020b88:	f7df fbca 	bl	8000320 <memchr>
 8020b8c:	9a04      	ldr	r2, [sp, #16]
 8020b8e:	b9d8      	cbnz	r0, 8020bc8 <_vfiprintf_r+0x12c>
 8020b90:	06d1      	lsls	r1, r2, #27
 8020b92:	bf44      	itt	mi
 8020b94:	2320      	movmi	r3, #32
 8020b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b9a:	0713      	lsls	r3, r2, #28
 8020b9c:	bf44      	itt	mi
 8020b9e:	232b      	movmi	r3, #43	; 0x2b
 8020ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8020ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8020baa:	d015      	beq.n	8020bd8 <_vfiprintf_r+0x13c>
 8020bac:	9a07      	ldr	r2, [sp, #28]
 8020bae:	4654      	mov	r4, sl
 8020bb0:	2000      	movs	r0, #0
 8020bb2:	f04f 0c0a 	mov.w	ip, #10
 8020bb6:	4621      	mov	r1, r4
 8020bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020bbc:	3b30      	subs	r3, #48	; 0x30
 8020bbe:	2b09      	cmp	r3, #9
 8020bc0:	d94e      	bls.n	8020c60 <_vfiprintf_r+0x1c4>
 8020bc2:	b1b0      	cbz	r0, 8020bf2 <_vfiprintf_r+0x156>
 8020bc4:	9207      	str	r2, [sp, #28]
 8020bc6:	e014      	b.n	8020bf2 <_vfiprintf_r+0x156>
 8020bc8:	eba0 0308 	sub.w	r3, r0, r8
 8020bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8020bd0:	4313      	orrs	r3, r2
 8020bd2:	9304      	str	r3, [sp, #16]
 8020bd4:	46a2      	mov	sl, r4
 8020bd6:	e7d2      	b.n	8020b7e <_vfiprintf_r+0xe2>
 8020bd8:	9b03      	ldr	r3, [sp, #12]
 8020bda:	1d19      	adds	r1, r3, #4
 8020bdc:	681b      	ldr	r3, [r3, #0]
 8020bde:	9103      	str	r1, [sp, #12]
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	bfbb      	ittet	lt
 8020be4:	425b      	neglt	r3, r3
 8020be6:	f042 0202 	orrlt.w	r2, r2, #2
 8020bea:	9307      	strge	r3, [sp, #28]
 8020bec:	9307      	strlt	r3, [sp, #28]
 8020bee:	bfb8      	it	lt
 8020bf0:	9204      	strlt	r2, [sp, #16]
 8020bf2:	7823      	ldrb	r3, [r4, #0]
 8020bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8020bf6:	d10c      	bne.n	8020c12 <_vfiprintf_r+0x176>
 8020bf8:	7863      	ldrb	r3, [r4, #1]
 8020bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8020bfc:	d135      	bne.n	8020c6a <_vfiprintf_r+0x1ce>
 8020bfe:	9b03      	ldr	r3, [sp, #12]
 8020c00:	1d1a      	adds	r2, r3, #4
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	9203      	str	r2, [sp, #12]
 8020c06:	2b00      	cmp	r3, #0
 8020c08:	bfb8      	it	lt
 8020c0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8020c0e:	3402      	adds	r4, #2
 8020c10:	9305      	str	r3, [sp, #20]
 8020c12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020cf8 <_vfiprintf_r+0x25c>
 8020c16:	7821      	ldrb	r1, [r4, #0]
 8020c18:	2203      	movs	r2, #3
 8020c1a:	4650      	mov	r0, sl
 8020c1c:	f7df fb80 	bl	8000320 <memchr>
 8020c20:	b140      	cbz	r0, 8020c34 <_vfiprintf_r+0x198>
 8020c22:	2340      	movs	r3, #64	; 0x40
 8020c24:	eba0 000a 	sub.w	r0, r0, sl
 8020c28:	fa03 f000 	lsl.w	r0, r3, r0
 8020c2c:	9b04      	ldr	r3, [sp, #16]
 8020c2e:	4303      	orrs	r3, r0
 8020c30:	3401      	adds	r4, #1
 8020c32:	9304      	str	r3, [sp, #16]
 8020c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c38:	482c      	ldr	r0, [pc, #176]	; (8020cec <_vfiprintf_r+0x250>)
 8020c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020c3e:	2206      	movs	r2, #6
 8020c40:	f7df fb6e 	bl	8000320 <memchr>
 8020c44:	2800      	cmp	r0, #0
 8020c46:	d03f      	beq.n	8020cc8 <_vfiprintf_r+0x22c>
 8020c48:	4b29      	ldr	r3, [pc, #164]	; (8020cf0 <_vfiprintf_r+0x254>)
 8020c4a:	bb1b      	cbnz	r3, 8020c94 <_vfiprintf_r+0x1f8>
 8020c4c:	9b03      	ldr	r3, [sp, #12]
 8020c4e:	3307      	adds	r3, #7
 8020c50:	f023 0307 	bic.w	r3, r3, #7
 8020c54:	3308      	adds	r3, #8
 8020c56:	9303      	str	r3, [sp, #12]
 8020c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c5a:	443b      	add	r3, r7
 8020c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8020c5e:	e767      	b.n	8020b30 <_vfiprintf_r+0x94>
 8020c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8020c64:	460c      	mov	r4, r1
 8020c66:	2001      	movs	r0, #1
 8020c68:	e7a5      	b.n	8020bb6 <_vfiprintf_r+0x11a>
 8020c6a:	2300      	movs	r3, #0
 8020c6c:	3401      	adds	r4, #1
 8020c6e:	9305      	str	r3, [sp, #20]
 8020c70:	4619      	mov	r1, r3
 8020c72:	f04f 0c0a 	mov.w	ip, #10
 8020c76:	4620      	mov	r0, r4
 8020c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020c7c:	3a30      	subs	r2, #48	; 0x30
 8020c7e:	2a09      	cmp	r2, #9
 8020c80:	d903      	bls.n	8020c8a <_vfiprintf_r+0x1ee>
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d0c5      	beq.n	8020c12 <_vfiprintf_r+0x176>
 8020c86:	9105      	str	r1, [sp, #20]
 8020c88:	e7c3      	b.n	8020c12 <_vfiprintf_r+0x176>
 8020c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8020c8e:	4604      	mov	r4, r0
 8020c90:	2301      	movs	r3, #1
 8020c92:	e7f0      	b.n	8020c76 <_vfiprintf_r+0x1da>
 8020c94:	ab03      	add	r3, sp, #12
 8020c96:	9300      	str	r3, [sp, #0]
 8020c98:	462a      	mov	r2, r5
 8020c9a:	4b16      	ldr	r3, [pc, #88]	; (8020cf4 <_vfiprintf_r+0x258>)
 8020c9c:	a904      	add	r1, sp, #16
 8020c9e:	4630      	mov	r0, r6
 8020ca0:	f3af 8000 	nop.w
 8020ca4:	4607      	mov	r7, r0
 8020ca6:	1c78      	adds	r0, r7, #1
 8020ca8:	d1d6      	bne.n	8020c58 <_vfiprintf_r+0x1bc>
 8020caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020cac:	07d9      	lsls	r1, r3, #31
 8020cae:	d405      	bmi.n	8020cbc <_vfiprintf_r+0x220>
 8020cb0:	89ab      	ldrh	r3, [r5, #12]
 8020cb2:	059a      	lsls	r2, r3, #22
 8020cb4:	d402      	bmi.n	8020cbc <_vfiprintf_r+0x220>
 8020cb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020cb8:	f7ff fdaf 	bl	802081a <__retarget_lock_release_recursive>
 8020cbc:	89ab      	ldrh	r3, [r5, #12]
 8020cbe:	065b      	lsls	r3, r3, #25
 8020cc0:	f53f af12 	bmi.w	8020ae8 <_vfiprintf_r+0x4c>
 8020cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020cc6:	e711      	b.n	8020aec <_vfiprintf_r+0x50>
 8020cc8:	ab03      	add	r3, sp, #12
 8020cca:	9300      	str	r3, [sp, #0]
 8020ccc:	462a      	mov	r2, r5
 8020cce:	4b09      	ldr	r3, [pc, #36]	; (8020cf4 <_vfiprintf_r+0x258>)
 8020cd0:	a904      	add	r1, sp, #16
 8020cd2:	4630      	mov	r0, r6
 8020cd4:	f000 f880 	bl	8020dd8 <_printf_i>
 8020cd8:	e7e4      	b.n	8020ca4 <_vfiprintf_r+0x208>
 8020cda:	bf00      	nop
 8020cdc:	08023f10 	.word	0x08023f10
 8020ce0:	08023f30 	.word	0x08023f30
 8020ce4:	08023ef0 	.word	0x08023ef0
 8020ce8:	08023f54 	.word	0x08023f54
 8020cec:	08023f5e 	.word	0x08023f5e
 8020cf0:	00000000 	.word	0x00000000
 8020cf4:	08020a77 	.word	0x08020a77
 8020cf8:	08023f5a 	.word	0x08023f5a

08020cfc <_printf_common>:
 8020cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d00:	4616      	mov	r6, r2
 8020d02:	4699      	mov	r9, r3
 8020d04:	688a      	ldr	r2, [r1, #8]
 8020d06:	690b      	ldr	r3, [r1, #16]
 8020d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020d0c:	4293      	cmp	r3, r2
 8020d0e:	bfb8      	it	lt
 8020d10:	4613      	movlt	r3, r2
 8020d12:	6033      	str	r3, [r6, #0]
 8020d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020d18:	4607      	mov	r7, r0
 8020d1a:	460c      	mov	r4, r1
 8020d1c:	b10a      	cbz	r2, 8020d22 <_printf_common+0x26>
 8020d1e:	3301      	adds	r3, #1
 8020d20:	6033      	str	r3, [r6, #0]
 8020d22:	6823      	ldr	r3, [r4, #0]
 8020d24:	0699      	lsls	r1, r3, #26
 8020d26:	bf42      	ittt	mi
 8020d28:	6833      	ldrmi	r3, [r6, #0]
 8020d2a:	3302      	addmi	r3, #2
 8020d2c:	6033      	strmi	r3, [r6, #0]
 8020d2e:	6825      	ldr	r5, [r4, #0]
 8020d30:	f015 0506 	ands.w	r5, r5, #6
 8020d34:	d106      	bne.n	8020d44 <_printf_common+0x48>
 8020d36:	f104 0a19 	add.w	sl, r4, #25
 8020d3a:	68e3      	ldr	r3, [r4, #12]
 8020d3c:	6832      	ldr	r2, [r6, #0]
 8020d3e:	1a9b      	subs	r3, r3, r2
 8020d40:	42ab      	cmp	r3, r5
 8020d42:	dc26      	bgt.n	8020d92 <_printf_common+0x96>
 8020d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020d48:	1e13      	subs	r3, r2, #0
 8020d4a:	6822      	ldr	r2, [r4, #0]
 8020d4c:	bf18      	it	ne
 8020d4e:	2301      	movne	r3, #1
 8020d50:	0692      	lsls	r2, r2, #26
 8020d52:	d42b      	bmi.n	8020dac <_printf_common+0xb0>
 8020d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020d58:	4649      	mov	r1, r9
 8020d5a:	4638      	mov	r0, r7
 8020d5c:	47c0      	blx	r8
 8020d5e:	3001      	adds	r0, #1
 8020d60:	d01e      	beq.n	8020da0 <_printf_common+0xa4>
 8020d62:	6823      	ldr	r3, [r4, #0]
 8020d64:	68e5      	ldr	r5, [r4, #12]
 8020d66:	6832      	ldr	r2, [r6, #0]
 8020d68:	f003 0306 	and.w	r3, r3, #6
 8020d6c:	2b04      	cmp	r3, #4
 8020d6e:	bf08      	it	eq
 8020d70:	1aad      	subeq	r5, r5, r2
 8020d72:	68a3      	ldr	r3, [r4, #8]
 8020d74:	6922      	ldr	r2, [r4, #16]
 8020d76:	bf0c      	ite	eq
 8020d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020d7c:	2500      	movne	r5, #0
 8020d7e:	4293      	cmp	r3, r2
 8020d80:	bfc4      	itt	gt
 8020d82:	1a9b      	subgt	r3, r3, r2
 8020d84:	18ed      	addgt	r5, r5, r3
 8020d86:	2600      	movs	r6, #0
 8020d88:	341a      	adds	r4, #26
 8020d8a:	42b5      	cmp	r5, r6
 8020d8c:	d11a      	bne.n	8020dc4 <_printf_common+0xc8>
 8020d8e:	2000      	movs	r0, #0
 8020d90:	e008      	b.n	8020da4 <_printf_common+0xa8>
 8020d92:	2301      	movs	r3, #1
 8020d94:	4652      	mov	r2, sl
 8020d96:	4649      	mov	r1, r9
 8020d98:	4638      	mov	r0, r7
 8020d9a:	47c0      	blx	r8
 8020d9c:	3001      	adds	r0, #1
 8020d9e:	d103      	bne.n	8020da8 <_printf_common+0xac>
 8020da0:	f04f 30ff 	mov.w	r0, #4294967295
 8020da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020da8:	3501      	adds	r5, #1
 8020daa:	e7c6      	b.n	8020d3a <_printf_common+0x3e>
 8020dac:	18e1      	adds	r1, r4, r3
 8020dae:	1c5a      	adds	r2, r3, #1
 8020db0:	2030      	movs	r0, #48	; 0x30
 8020db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020db6:	4422      	add	r2, r4
 8020db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020dc0:	3302      	adds	r3, #2
 8020dc2:	e7c7      	b.n	8020d54 <_printf_common+0x58>
 8020dc4:	2301      	movs	r3, #1
 8020dc6:	4622      	mov	r2, r4
 8020dc8:	4649      	mov	r1, r9
 8020dca:	4638      	mov	r0, r7
 8020dcc:	47c0      	blx	r8
 8020dce:	3001      	adds	r0, #1
 8020dd0:	d0e6      	beq.n	8020da0 <_printf_common+0xa4>
 8020dd2:	3601      	adds	r6, #1
 8020dd4:	e7d9      	b.n	8020d8a <_printf_common+0x8e>
	...

08020dd8 <_printf_i>:
 8020dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020ddc:	7e0f      	ldrb	r7, [r1, #24]
 8020dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020de0:	2f78      	cmp	r7, #120	; 0x78
 8020de2:	4691      	mov	r9, r2
 8020de4:	4680      	mov	r8, r0
 8020de6:	460c      	mov	r4, r1
 8020de8:	469a      	mov	sl, r3
 8020dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020dee:	d807      	bhi.n	8020e00 <_printf_i+0x28>
 8020df0:	2f62      	cmp	r7, #98	; 0x62
 8020df2:	d80a      	bhi.n	8020e0a <_printf_i+0x32>
 8020df4:	2f00      	cmp	r7, #0
 8020df6:	f000 80d8 	beq.w	8020faa <_printf_i+0x1d2>
 8020dfa:	2f58      	cmp	r7, #88	; 0x58
 8020dfc:	f000 80a3 	beq.w	8020f46 <_printf_i+0x16e>
 8020e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020e08:	e03a      	b.n	8020e80 <_printf_i+0xa8>
 8020e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020e0e:	2b15      	cmp	r3, #21
 8020e10:	d8f6      	bhi.n	8020e00 <_printf_i+0x28>
 8020e12:	a101      	add	r1, pc, #4	; (adr r1, 8020e18 <_printf_i+0x40>)
 8020e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020e18:	08020e71 	.word	0x08020e71
 8020e1c:	08020e85 	.word	0x08020e85
 8020e20:	08020e01 	.word	0x08020e01
 8020e24:	08020e01 	.word	0x08020e01
 8020e28:	08020e01 	.word	0x08020e01
 8020e2c:	08020e01 	.word	0x08020e01
 8020e30:	08020e85 	.word	0x08020e85
 8020e34:	08020e01 	.word	0x08020e01
 8020e38:	08020e01 	.word	0x08020e01
 8020e3c:	08020e01 	.word	0x08020e01
 8020e40:	08020e01 	.word	0x08020e01
 8020e44:	08020f91 	.word	0x08020f91
 8020e48:	08020eb5 	.word	0x08020eb5
 8020e4c:	08020f73 	.word	0x08020f73
 8020e50:	08020e01 	.word	0x08020e01
 8020e54:	08020e01 	.word	0x08020e01
 8020e58:	08020fb3 	.word	0x08020fb3
 8020e5c:	08020e01 	.word	0x08020e01
 8020e60:	08020eb5 	.word	0x08020eb5
 8020e64:	08020e01 	.word	0x08020e01
 8020e68:	08020e01 	.word	0x08020e01
 8020e6c:	08020f7b 	.word	0x08020f7b
 8020e70:	682b      	ldr	r3, [r5, #0]
 8020e72:	1d1a      	adds	r2, r3, #4
 8020e74:	681b      	ldr	r3, [r3, #0]
 8020e76:	602a      	str	r2, [r5, #0]
 8020e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020e80:	2301      	movs	r3, #1
 8020e82:	e0a3      	b.n	8020fcc <_printf_i+0x1f4>
 8020e84:	6820      	ldr	r0, [r4, #0]
 8020e86:	6829      	ldr	r1, [r5, #0]
 8020e88:	0606      	lsls	r6, r0, #24
 8020e8a:	f101 0304 	add.w	r3, r1, #4
 8020e8e:	d50a      	bpl.n	8020ea6 <_printf_i+0xce>
 8020e90:	680e      	ldr	r6, [r1, #0]
 8020e92:	602b      	str	r3, [r5, #0]
 8020e94:	2e00      	cmp	r6, #0
 8020e96:	da03      	bge.n	8020ea0 <_printf_i+0xc8>
 8020e98:	232d      	movs	r3, #45	; 0x2d
 8020e9a:	4276      	negs	r6, r6
 8020e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020ea0:	485e      	ldr	r0, [pc, #376]	; (802101c <_printf_i+0x244>)
 8020ea2:	230a      	movs	r3, #10
 8020ea4:	e019      	b.n	8020eda <_printf_i+0x102>
 8020ea6:	680e      	ldr	r6, [r1, #0]
 8020ea8:	602b      	str	r3, [r5, #0]
 8020eaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020eae:	bf18      	it	ne
 8020eb0:	b236      	sxthne	r6, r6
 8020eb2:	e7ef      	b.n	8020e94 <_printf_i+0xbc>
 8020eb4:	682b      	ldr	r3, [r5, #0]
 8020eb6:	6820      	ldr	r0, [r4, #0]
 8020eb8:	1d19      	adds	r1, r3, #4
 8020eba:	6029      	str	r1, [r5, #0]
 8020ebc:	0601      	lsls	r1, r0, #24
 8020ebe:	d501      	bpl.n	8020ec4 <_printf_i+0xec>
 8020ec0:	681e      	ldr	r6, [r3, #0]
 8020ec2:	e002      	b.n	8020eca <_printf_i+0xf2>
 8020ec4:	0646      	lsls	r6, r0, #25
 8020ec6:	d5fb      	bpl.n	8020ec0 <_printf_i+0xe8>
 8020ec8:	881e      	ldrh	r6, [r3, #0]
 8020eca:	4854      	ldr	r0, [pc, #336]	; (802101c <_printf_i+0x244>)
 8020ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8020ece:	bf0c      	ite	eq
 8020ed0:	2308      	moveq	r3, #8
 8020ed2:	230a      	movne	r3, #10
 8020ed4:	2100      	movs	r1, #0
 8020ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020eda:	6865      	ldr	r5, [r4, #4]
 8020edc:	60a5      	str	r5, [r4, #8]
 8020ede:	2d00      	cmp	r5, #0
 8020ee0:	bfa2      	ittt	ge
 8020ee2:	6821      	ldrge	r1, [r4, #0]
 8020ee4:	f021 0104 	bicge.w	r1, r1, #4
 8020ee8:	6021      	strge	r1, [r4, #0]
 8020eea:	b90e      	cbnz	r6, 8020ef0 <_printf_i+0x118>
 8020eec:	2d00      	cmp	r5, #0
 8020eee:	d04d      	beq.n	8020f8c <_printf_i+0x1b4>
 8020ef0:	4615      	mov	r5, r2
 8020ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8020ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8020efa:	5dc7      	ldrb	r7, [r0, r7]
 8020efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020f00:	4637      	mov	r7, r6
 8020f02:	42bb      	cmp	r3, r7
 8020f04:	460e      	mov	r6, r1
 8020f06:	d9f4      	bls.n	8020ef2 <_printf_i+0x11a>
 8020f08:	2b08      	cmp	r3, #8
 8020f0a:	d10b      	bne.n	8020f24 <_printf_i+0x14c>
 8020f0c:	6823      	ldr	r3, [r4, #0]
 8020f0e:	07de      	lsls	r6, r3, #31
 8020f10:	d508      	bpl.n	8020f24 <_printf_i+0x14c>
 8020f12:	6923      	ldr	r3, [r4, #16]
 8020f14:	6861      	ldr	r1, [r4, #4]
 8020f16:	4299      	cmp	r1, r3
 8020f18:	bfde      	ittt	le
 8020f1a:	2330      	movle	r3, #48	; 0x30
 8020f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020f24:	1b52      	subs	r2, r2, r5
 8020f26:	6122      	str	r2, [r4, #16]
 8020f28:	f8cd a000 	str.w	sl, [sp]
 8020f2c:	464b      	mov	r3, r9
 8020f2e:	aa03      	add	r2, sp, #12
 8020f30:	4621      	mov	r1, r4
 8020f32:	4640      	mov	r0, r8
 8020f34:	f7ff fee2 	bl	8020cfc <_printf_common>
 8020f38:	3001      	adds	r0, #1
 8020f3a:	d14c      	bne.n	8020fd6 <_printf_i+0x1fe>
 8020f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8020f40:	b004      	add	sp, #16
 8020f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f46:	4835      	ldr	r0, [pc, #212]	; (802101c <_printf_i+0x244>)
 8020f48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020f4c:	6829      	ldr	r1, [r5, #0]
 8020f4e:	6823      	ldr	r3, [r4, #0]
 8020f50:	f851 6b04 	ldr.w	r6, [r1], #4
 8020f54:	6029      	str	r1, [r5, #0]
 8020f56:	061d      	lsls	r5, r3, #24
 8020f58:	d514      	bpl.n	8020f84 <_printf_i+0x1ac>
 8020f5a:	07df      	lsls	r7, r3, #31
 8020f5c:	bf44      	itt	mi
 8020f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8020f62:	6023      	strmi	r3, [r4, #0]
 8020f64:	b91e      	cbnz	r6, 8020f6e <_printf_i+0x196>
 8020f66:	6823      	ldr	r3, [r4, #0]
 8020f68:	f023 0320 	bic.w	r3, r3, #32
 8020f6c:	6023      	str	r3, [r4, #0]
 8020f6e:	2310      	movs	r3, #16
 8020f70:	e7b0      	b.n	8020ed4 <_printf_i+0xfc>
 8020f72:	6823      	ldr	r3, [r4, #0]
 8020f74:	f043 0320 	orr.w	r3, r3, #32
 8020f78:	6023      	str	r3, [r4, #0]
 8020f7a:	2378      	movs	r3, #120	; 0x78
 8020f7c:	4828      	ldr	r0, [pc, #160]	; (8021020 <_printf_i+0x248>)
 8020f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020f82:	e7e3      	b.n	8020f4c <_printf_i+0x174>
 8020f84:	0659      	lsls	r1, r3, #25
 8020f86:	bf48      	it	mi
 8020f88:	b2b6      	uxthmi	r6, r6
 8020f8a:	e7e6      	b.n	8020f5a <_printf_i+0x182>
 8020f8c:	4615      	mov	r5, r2
 8020f8e:	e7bb      	b.n	8020f08 <_printf_i+0x130>
 8020f90:	682b      	ldr	r3, [r5, #0]
 8020f92:	6826      	ldr	r6, [r4, #0]
 8020f94:	6961      	ldr	r1, [r4, #20]
 8020f96:	1d18      	adds	r0, r3, #4
 8020f98:	6028      	str	r0, [r5, #0]
 8020f9a:	0635      	lsls	r5, r6, #24
 8020f9c:	681b      	ldr	r3, [r3, #0]
 8020f9e:	d501      	bpl.n	8020fa4 <_printf_i+0x1cc>
 8020fa0:	6019      	str	r1, [r3, #0]
 8020fa2:	e002      	b.n	8020faa <_printf_i+0x1d2>
 8020fa4:	0670      	lsls	r0, r6, #25
 8020fa6:	d5fb      	bpl.n	8020fa0 <_printf_i+0x1c8>
 8020fa8:	8019      	strh	r1, [r3, #0]
 8020faa:	2300      	movs	r3, #0
 8020fac:	6123      	str	r3, [r4, #16]
 8020fae:	4615      	mov	r5, r2
 8020fb0:	e7ba      	b.n	8020f28 <_printf_i+0x150>
 8020fb2:	682b      	ldr	r3, [r5, #0]
 8020fb4:	1d1a      	adds	r2, r3, #4
 8020fb6:	602a      	str	r2, [r5, #0]
 8020fb8:	681d      	ldr	r5, [r3, #0]
 8020fba:	6862      	ldr	r2, [r4, #4]
 8020fbc:	2100      	movs	r1, #0
 8020fbe:	4628      	mov	r0, r5
 8020fc0:	f7df f9ae 	bl	8000320 <memchr>
 8020fc4:	b108      	cbz	r0, 8020fca <_printf_i+0x1f2>
 8020fc6:	1b40      	subs	r0, r0, r5
 8020fc8:	6060      	str	r0, [r4, #4]
 8020fca:	6863      	ldr	r3, [r4, #4]
 8020fcc:	6123      	str	r3, [r4, #16]
 8020fce:	2300      	movs	r3, #0
 8020fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020fd4:	e7a8      	b.n	8020f28 <_printf_i+0x150>
 8020fd6:	6923      	ldr	r3, [r4, #16]
 8020fd8:	462a      	mov	r2, r5
 8020fda:	4649      	mov	r1, r9
 8020fdc:	4640      	mov	r0, r8
 8020fde:	47d0      	blx	sl
 8020fe0:	3001      	adds	r0, #1
 8020fe2:	d0ab      	beq.n	8020f3c <_printf_i+0x164>
 8020fe4:	6823      	ldr	r3, [r4, #0]
 8020fe6:	079b      	lsls	r3, r3, #30
 8020fe8:	d413      	bmi.n	8021012 <_printf_i+0x23a>
 8020fea:	68e0      	ldr	r0, [r4, #12]
 8020fec:	9b03      	ldr	r3, [sp, #12]
 8020fee:	4298      	cmp	r0, r3
 8020ff0:	bfb8      	it	lt
 8020ff2:	4618      	movlt	r0, r3
 8020ff4:	e7a4      	b.n	8020f40 <_printf_i+0x168>
 8020ff6:	2301      	movs	r3, #1
 8020ff8:	4632      	mov	r2, r6
 8020ffa:	4649      	mov	r1, r9
 8020ffc:	4640      	mov	r0, r8
 8020ffe:	47d0      	blx	sl
 8021000:	3001      	adds	r0, #1
 8021002:	d09b      	beq.n	8020f3c <_printf_i+0x164>
 8021004:	3501      	adds	r5, #1
 8021006:	68e3      	ldr	r3, [r4, #12]
 8021008:	9903      	ldr	r1, [sp, #12]
 802100a:	1a5b      	subs	r3, r3, r1
 802100c:	42ab      	cmp	r3, r5
 802100e:	dcf2      	bgt.n	8020ff6 <_printf_i+0x21e>
 8021010:	e7eb      	b.n	8020fea <_printf_i+0x212>
 8021012:	2500      	movs	r5, #0
 8021014:	f104 0619 	add.w	r6, r4, #25
 8021018:	e7f5      	b.n	8021006 <_printf_i+0x22e>
 802101a:	bf00      	nop
 802101c:	08023f65 	.word	0x08023f65
 8021020:	08023f76 	.word	0x08023f76

08021024 <cleanup_glue>:
 8021024:	b538      	push	{r3, r4, r5, lr}
 8021026:	460c      	mov	r4, r1
 8021028:	6809      	ldr	r1, [r1, #0]
 802102a:	4605      	mov	r5, r0
 802102c:	b109      	cbz	r1, 8021032 <cleanup_glue+0xe>
 802102e:	f7ff fff9 	bl	8021024 <cleanup_glue>
 8021032:	4621      	mov	r1, r4
 8021034:	4628      	mov	r0, r5
 8021036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802103a:	f7ff bc25 	b.w	8020888 <_free_r>
	...

08021040 <_reclaim_reent>:
 8021040:	4b2c      	ldr	r3, [pc, #176]	; (80210f4 <_reclaim_reent+0xb4>)
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	4283      	cmp	r3, r0
 8021046:	b570      	push	{r4, r5, r6, lr}
 8021048:	4604      	mov	r4, r0
 802104a:	d051      	beq.n	80210f0 <_reclaim_reent+0xb0>
 802104c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802104e:	b143      	cbz	r3, 8021062 <_reclaim_reent+0x22>
 8021050:	68db      	ldr	r3, [r3, #12]
 8021052:	2b00      	cmp	r3, #0
 8021054:	d14a      	bne.n	80210ec <_reclaim_reent+0xac>
 8021056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021058:	6819      	ldr	r1, [r3, #0]
 802105a:	b111      	cbz	r1, 8021062 <_reclaim_reent+0x22>
 802105c:	4620      	mov	r0, r4
 802105e:	f7ff fc13 	bl	8020888 <_free_r>
 8021062:	6961      	ldr	r1, [r4, #20]
 8021064:	b111      	cbz	r1, 802106c <_reclaim_reent+0x2c>
 8021066:	4620      	mov	r0, r4
 8021068:	f7ff fc0e 	bl	8020888 <_free_r>
 802106c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802106e:	b111      	cbz	r1, 8021076 <_reclaim_reent+0x36>
 8021070:	4620      	mov	r0, r4
 8021072:	f7ff fc09 	bl	8020888 <_free_r>
 8021076:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021078:	b111      	cbz	r1, 8021080 <_reclaim_reent+0x40>
 802107a:	4620      	mov	r0, r4
 802107c:	f7ff fc04 	bl	8020888 <_free_r>
 8021080:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8021082:	b111      	cbz	r1, 802108a <_reclaim_reent+0x4a>
 8021084:	4620      	mov	r0, r4
 8021086:	f7ff fbff 	bl	8020888 <_free_r>
 802108a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802108c:	b111      	cbz	r1, 8021094 <_reclaim_reent+0x54>
 802108e:	4620      	mov	r0, r4
 8021090:	f7ff fbfa 	bl	8020888 <_free_r>
 8021094:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021096:	b111      	cbz	r1, 802109e <_reclaim_reent+0x5e>
 8021098:	4620      	mov	r0, r4
 802109a:	f7ff fbf5 	bl	8020888 <_free_r>
 802109e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80210a0:	b111      	cbz	r1, 80210a8 <_reclaim_reent+0x68>
 80210a2:	4620      	mov	r0, r4
 80210a4:	f7ff fbf0 	bl	8020888 <_free_r>
 80210a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80210aa:	b111      	cbz	r1, 80210b2 <_reclaim_reent+0x72>
 80210ac:	4620      	mov	r0, r4
 80210ae:	f7ff fbeb 	bl	8020888 <_free_r>
 80210b2:	69a3      	ldr	r3, [r4, #24]
 80210b4:	b1e3      	cbz	r3, 80210f0 <_reclaim_reent+0xb0>
 80210b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80210b8:	4620      	mov	r0, r4
 80210ba:	4798      	blx	r3
 80210bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80210be:	b1b9      	cbz	r1, 80210f0 <_reclaim_reent+0xb0>
 80210c0:	4620      	mov	r0, r4
 80210c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80210c6:	f7ff bfad 	b.w	8021024 <cleanup_glue>
 80210ca:	5949      	ldr	r1, [r1, r5]
 80210cc:	b941      	cbnz	r1, 80210e0 <_reclaim_reent+0xa0>
 80210ce:	3504      	adds	r5, #4
 80210d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80210d2:	2d80      	cmp	r5, #128	; 0x80
 80210d4:	68d9      	ldr	r1, [r3, #12]
 80210d6:	d1f8      	bne.n	80210ca <_reclaim_reent+0x8a>
 80210d8:	4620      	mov	r0, r4
 80210da:	f7ff fbd5 	bl	8020888 <_free_r>
 80210de:	e7ba      	b.n	8021056 <_reclaim_reent+0x16>
 80210e0:	680e      	ldr	r6, [r1, #0]
 80210e2:	4620      	mov	r0, r4
 80210e4:	f7ff fbd0 	bl	8020888 <_free_r>
 80210e8:	4631      	mov	r1, r6
 80210ea:	e7ef      	b.n	80210cc <_reclaim_reent+0x8c>
 80210ec:	2500      	movs	r5, #0
 80210ee:	e7ef      	b.n	80210d0 <_reclaim_reent+0x90>
 80210f0:	bd70      	pop	{r4, r5, r6, pc}
 80210f2:	bf00      	nop
 80210f4:	240000dc 	.word	0x240000dc

080210f8 <_sbrk_r>:
 80210f8:	b538      	push	{r3, r4, r5, lr}
 80210fa:	4d06      	ldr	r5, [pc, #24]	; (8021114 <_sbrk_r+0x1c>)
 80210fc:	2300      	movs	r3, #0
 80210fe:	4604      	mov	r4, r0
 8021100:	4608      	mov	r0, r1
 8021102:	602b      	str	r3, [r5, #0]
 8021104:	f7e2 f956 	bl	80033b4 <_sbrk>
 8021108:	1c43      	adds	r3, r0, #1
 802110a:	d102      	bne.n	8021112 <_sbrk_r+0x1a>
 802110c:	682b      	ldr	r3, [r5, #0]
 802110e:	b103      	cbz	r3, 8021112 <_sbrk_r+0x1a>
 8021110:	6023      	str	r3, [r4, #0]
 8021112:	bd38      	pop	{r3, r4, r5, pc}
 8021114:	2400ca44 	.word	0x2400ca44

08021118 <_raise_r>:
 8021118:	291f      	cmp	r1, #31
 802111a:	b538      	push	{r3, r4, r5, lr}
 802111c:	4604      	mov	r4, r0
 802111e:	460d      	mov	r5, r1
 8021120:	d904      	bls.n	802112c <_raise_r+0x14>
 8021122:	2316      	movs	r3, #22
 8021124:	6003      	str	r3, [r0, #0]
 8021126:	f04f 30ff 	mov.w	r0, #4294967295
 802112a:	bd38      	pop	{r3, r4, r5, pc}
 802112c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802112e:	b112      	cbz	r2, 8021136 <_raise_r+0x1e>
 8021130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021134:	b94b      	cbnz	r3, 802114a <_raise_r+0x32>
 8021136:	4620      	mov	r0, r4
 8021138:	f000 f830 	bl	802119c <_getpid_r>
 802113c:	462a      	mov	r2, r5
 802113e:	4601      	mov	r1, r0
 8021140:	4620      	mov	r0, r4
 8021142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021146:	f000 b817 	b.w	8021178 <_kill_r>
 802114a:	2b01      	cmp	r3, #1
 802114c:	d00a      	beq.n	8021164 <_raise_r+0x4c>
 802114e:	1c59      	adds	r1, r3, #1
 8021150:	d103      	bne.n	802115a <_raise_r+0x42>
 8021152:	2316      	movs	r3, #22
 8021154:	6003      	str	r3, [r0, #0]
 8021156:	2001      	movs	r0, #1
 8021158:	e7e7      	b.n	802112a <_raise_r+0x12>
 802115a:	2400      	movs	r4, #0
 802115c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021160:	4628      	mov	r0, r5
 8021162:	4798      	blx	r3
 8021164:	2000      	movs	r0, #0
 8021166:	e7e0      	b.n	802112a <_raise_r+0x12>

08021168 <raise>:
 8021168:	4b02      	ldr	r3, [pc, #8]	; (8021174 <raise+0xc>)
 802116a:	4601      	mov	r1, r0
 802116c:	6818      	ldr	r0, [r3, #0]
 802116e:	f7ff bfd3 	b.w	8021118 <_raise_r>
 8021172:	bf00      	nop
 8021174:	240000dc 	.word	0x240000dc

08021178 <_kill_r>:
 8021178:	b538      	push	{r3, r4, r5, lr}
 802117a:	4d07      	ldr	r5, [pc, #28]	; (8021198 <_kill_r+0x20>)
 802117c:	2300      	movs	r3, #0
 802117e:	4604      	mov	r4, r0
 8021180:	4608      	mov	r0, r1
 8021182:	4611      	mov	r1, r2
 8021184:	602b      	str	r3, [r5, #0]
 8021186:	f7e2 f8dd 	bl	8003344 <_kill>
 802118a:	1c43      	adds	r3, r0, #1
 802118c:	d102      	bne.n	8021194 <_kill_r+0x1c>
 802118e:	682b      	ldr	r3, [r5, #0]
 8021190:	b103      	cbz	r3, 8021194 <_kill_r+0x1c>
 8021192:	6023      	str	r3, [r4, #0]
 8021194:	bd38      	pop	{r3, r4, r5, pc}
 8021196:	bf00      	nop
 8021198:	2400ca44 	.word	0x2400ca44

0802119c <_getpid_r>:
 802119c:	f7e2 b8d0 	b.w	8003340 <_getpid>

080211a0 <siprintf>:
 80211a0:	b40e      	push	{r1, r2, r3}
 80211a2:	b500      	push	{lr}
 80211a4:	b09c      	sub	sp, #112	; 0x70
 80211a6:	ab1d      	add	r3, sp, #116	; 0x74
 80211a8:	9002      	str	r0, [sp, #8]
 80211aa:	9006      	str	r0, [sp, #24]
 80211ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80211b0:	4809      	ldr	r0, [pc, #36]	; (80211d8 <siprintf+0x38>)
 80211b2:	9107      	str	r1, [sp, #28]
 80211b4:	9104      	str	r1, [sp, #16]
 80211b6:	4909      	ldr	r1, [pc, #36]	; (80211dc <siprintf+0x3c>)
 80211b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80211bc:	9105      	str	r1, [sp, #20]
 80211be:	6800      	ldr	r0, [r0, #0]
 80211c0:	9301      	str	r3, [sp, #4]
 80211c2:	a902      	add	r1, sp, #8
 80211c4:	f000 fbe6 	bl	8021994 <_svfiprintf_r>
 80211c8:	9b02      	ldr	r3, [sp, #8]
 80211ca:	2200      	movs	r2, #0
 80211cc:	701a      	strb	r2, [r3, #0]
 80211ce:	b01c      	add	sp, #112	; 0x70
 80211d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80211d4:	b003      	add	sp, #12
 80211d6:	4770      	bx	lr
 80211d8:	240000dc 	.word	0x240000dc
 80211dc:	ffff0208 	.word	0xffff0208

080211e0 <__sread>:
 80211e0:	b510      	push	{r4, lr}
 80211e2:	460c      	mov	r4, r1
 80211e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80211e8:	f000 fcd4 	bl	8021b94 <_read_r>
 80211ec:	2800      	cmp	r0, #0
 80211ee:	bfab      	itete	ge
 80211f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80211f2:	89a3      	ldrhlt	r3, [r4, #12]
 80211f4:	181b      	addge	r3, r3, r0
 80211f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80211fa:	bfac      	ite	ge
 80211fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80211fe:	81a3      	strhlt	r3, [r4, #12]
 8021200:	bd10      	pop	{r4, pc}

08021202 <__swrite>:
 8021202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021206:	461f      	mov	r7, r3
 8021208:	898b      	ldrh	r3, [r1, #12]
 802120a:	05db      	lsls	r3, r3, #23
 802120c:	4605      	mov	r5, r0
 802120e:	460c      	mov	r4, r1
 8021210:	4616      	mov	r6, r2
 8021212:	d505      	bpl.n	8021220 <__swrite+0x1e>
 8021214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021218:	2302      	movs	r3, #2
 802121a:	2200      	movs	r2, #0
 802121c:	f000 fa92 	bl	8021744 <_lseek_r>
 8021220:	89a3      	ldrh	r3, [r4, #12]
 8021222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802122a:	81a3      	strh	r3, [r4, #12]
 802122c:	4632      	mov	r2, r6
 802122e:	463b      	mov	r3, r7
 8021230:	4628      	mov	r0, r5
 8021232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021236:	f000 b8d1 	b.w	80213dc <_write_r>

0802123a <__sseek>:
 802123a:	b510      	push	{r4, lr}
 802123c:	460c      	mov	r4, r1
 802123e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021242:	f000 fa7f 	bl	8021744 <_lseek_r>
 8021246:	1c43      	adds	r3, r0, #1
 8021248:	89a3      	ldrh	r3, [r4, #12]
 802124a:	bf15      	itete	ne
 802124c:	6560      	strne	r0, [r4, #84]	; 0x54
 802124e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021256:	81a3      	strheq	r3, [r4, #12]
 8021258:	bf18      	it	ne
 802125a:	81a3      	strhne	r3, [r4, #12]
 802125c:	bd10      	pop	{r4, pc}

0802125e <__sclose>:
 802125e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021262:	f000 b99d 	b.w	80215a0 <_close_r>

08021266 <strncmp>:
 8021266:	b510      	push	{r4, lr}
 8021268:	b17a      	cbz	r2, 802128a <strncmp+0x24>
 802126a:	4603      	mov	r3, r0
 802126c:	3901      	subs	r1, #1
 802126e:	1884      	adds	r4, r0, r2
 8021270:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021274:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8021278:	4290      	cmp	r0, r2
 802127a:	d101      	bne.n	8021280 <strncmp+0x1a>
 802127c:	42a3      	cmp	r3, r4
 802127e:	d101      	bne.n	8021284 <strncmp+0x1e>
 8021280:	1a80      	subs	r0, r0, r2
 8021282:	bd10      	pop	{r4, pc}
 8021284:	2800      	cmp	r0, #0
 8021286:	d1f3      	bne.n	8021270 <strncmp+0xa>
 8021288:	e7fa      	b.n	8021280 <strncmp+0x1a>
 802128a:	4610      	mov	r0, r2
 802128c:	e7f9      	b.n	8021282 <strncmp+0x1c>

0802128e <strncpy>:
 802128e:	b510      	push	{r4, lr}
 8021290:	3901      	subs	r1, #1
 8021292:	4603      	mov	r3, r0
 8021294:	b132      	cbz	r2, 80212a4 <strncpy+0x16>
 8021296:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802129a:	f803 4b01 	strb.w	r4, [r3], #1
 802129e:	3a01      	subs	r2, #1
 80212a0:	2c00      	cmp	r4, #0
 80212a2:	d1f7      	bne.n	8021294 <strncpy+0x6>
 80212a4:	441a      	add	r2, r3
 80212a6:	2100      	movs	r1, #0
 80212a8:	4293      	cmp	r3, r2
 80212aa:	d100      	bne.n	80212ae <strncpy+0x20>
 80212ac:	bd10      	pop	{r4, pc}
 80212ae:	f803 1b01 	strb.w	r1, [r3], #1
 80212b2:	e7f9      	b.n	80212a8 <strncpy+0x1a>

080212b4 <strstr>:
 80212b4:	780a      	ldrb	r2, [r1, #0]
 80212b6:	b570      	push	{r4, r5, r6, lr}
 80212b8:	b96a      	cbnz	r2, 80212d6 <strstr+0x22>
 80212ba:	bd70      	pop	{r4, r5, r6, pc}
 80212bc:	429a      	cmp	r2, r3
 80212be:	d109      	bne.n	80212d4 <strstr+0x20>
 80212c0:	460c      	mov	r4, r1
 80212c2:	4605      	mov	r5, r0
 80212c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	d0f6      	beq.n	80212ba <strstr+0x6>
 80212cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80212d0:	429e      	cmp	r6, r3
 80212d2:	d0f7      	beq.n	80212c4 <strstr+0x10>
 80212d4:	3001      	adds	r0, #1
 80212d6:	7803      	ldrb	r3, [r0, #0]
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d1ef      	bne.n	80212bc <strstr+0x8>
 80212dc:	4618      	mov	r0, r3
 80212de:	e7ec      	b.n	80212ba <strstr+0x6>

080212e0 <__strtok_r>:
 80212e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80212e2:	b908      	cbnz	r0, 80212e8 <__strtok_r+0x8>
 80212e4:	6810      	ldr	r0, [r2, #0]
 80212e6:	b188      	cbz	r0, 802130c <__strtok_r+0x2c>
 80212e8:	4604      	mov	r4, r0
 80212ea:	4620      	mov	r0, r4
 80212ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80212f0:	460f      	mov	r7, r1
 80212f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80212f6:	b91e      	cbnz	r6, 8021300 <__strtok_r+0x20>
 80212f8:	b965      	cbnz	r5, 8021314 <__strtok_r+0x34>
 80212fa:	6015      	str	r5, [r2, #0]
 80212fc:	4628      	mov	r0, r5
 80212fe:	e005      	b.n	802130c <__strtok_r+0x2c>
 8021300:	42b5      	cmp	r5, r6
 8021302:	d1f6      	bne.n	80212f2 <__strtok_r+0x12>
 8021304:	2b00      	cmp	r3, #0
 8021306:	d1f0      	bne.n	80212ea <__strtok_r+0xa>
 8021308:	6014      	str	r4, [r2, #0]
 802130a:	7003      	strb	r3, [r0, #0]
 802130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802130e:	461c      	mov	r4, r3
 8021310:	e00c      	b.n	802132c <__strtok_r+0x4c>
 8021312:	b915      	cbnz	r5, 802131a <__strtok_r+0x3a>
 8021314:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021318:	460e      	mov	r6, r1
 802131a:	f816 5b01 	ldrb.w	r5, [r6], #1
 802131e:	42ab      	cmp	r3, r5
 8021320:	d1f7      	bne.n	8021312 <__strtok_r+0x32>
 8021322:	2b00      	cmp	r3, #0
 8021324:	d0f3      	beq.n	802130e <__strtok_r+0x2e>
 8021326:	2300      	movs	r3, #0
 8021328:	f804 3c01 	strb.w	r3, [r4, #-1]
 802132c:	6014      	str	r4, [r2, #0]
 802132e:	e7ed      	b.n	802130c <__strtok_r+0x2c>

08021330 <strtok_r>:
 8021330:	2301      	movs	r3, #1
 8021332:	f7ff bfd5 	b.w	80212e0 <__strtok_r>
	...

08021338 <__swbuf_r>:
 8021338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802133a:	460e      	mov	r6, r1
 802133c:	4614      	mov	r4, r2
 802133e:	4605      	mov	r5, r0
 8021340:	b118      	cbz	r0, 802134a <__swbuf_r+0x12>
 8021342:	6983      	ldr	r3, [r0, #24]
 8021344:	b90b      	cbnz	r3, 802134a <__swbuf_r+0x12>
 8021346:	f7ff f991 	bl	802066c <__sinit>
 802134a:	4b21      	ldr	r3, [pc, #132]	; (80213d0 <__swbuf_r+0x98>)
 802134c:	429c      	cmp	r4, r3
 802134e:	d12b      	bne.n	80213a8 <__swbuf_r+0x70>
 8021350:	686c      	ldr	r4, [r5, #4]
 8021352:	69a3      	ldr	r3, [r4, #24]
 8021354:	60a3      	str	r3, [r4, #8]
 8021356:	89a3      	ldrh	r3, [r4, #12]
 8021358:	071a      	lsls	r2, r3, #28
 802135a:	d52f      	bpl.n	80213bc <__swbuf_r+0x84>
 802135c:	6923      	ldr	r3, [r4, #16]
 802135e:	b36b      	cbz	r3, 80213bc <__swbuf_r+0x84>
 8021360:	6923      	ldr	r3, [r4, #16]
 8021362:	6820      	ldr	r0, [r4, #0]
 8021364:	1ac0      	subs	r0, r0, r3
 8021366:	6963      	ldr	r3, [r4, #20]
 8021368:	b2f6      	uxtb	r6, r6
 802136a:	4283      	cmp	r3, r0
 802136c:	4637      	mov	r7, r6
 802136e:	dc04      	bgt.n	802137a <__swbuf_r+0x42>
 8021370:	4621      	mov	r1, r4
 8021372:	4628      	mov	r0, r5
 8021374:	f000 f9aa 	bl	80216cc <_fflush_r>
 8021378:	bb30      	cbnz	r0, 80213c8 <__swbuf_r+0x90>
 802137a:	68a3      	ldr	r3, [r4, #8]
 802137c:	3b01      	subs	r3, #1
 802137e:	60a3      	str	r3, [r4, #8]
 8021380:	6823      	ldr	r3, [r4, #0]
 8021382:	1c5a      	adds	r2, r3, #1
 8021384:	6022      	str	r2, [r4, #0]
 8021386:	701e      	strb	r6, [r3, #0]
 8021388:	6963      	ldr	r3, [r4, #20]
 802138a:	3001      	adds	r0, #1
 802138c:	4283      	cmp	r3, r0
 802138e:	d004      	beq.n	802139a <__swbuf_r+0x62>
 8021390:	89a3      	ldrh	r3, [r4, #12]
 8021392:	07db      	lsls	r3, r3, #31
 8021394:	d506      	bpl.n	80213a4 <__swbuf_r+0x6c>
 8021396:	2e0a      	cmp	r6, #10
 8021398:	d104      	bne.n	80213a4 <__swbuf_r+0x6c>
 802139a:	4621      	mov	r1, r4
 802139c:	4628      	mov	r0, r5
 802139e:	f000 f995 	bl	80216cc <_fflush_r>
 80213a2:	b988      	cbnz	r0, 80213c8 <__swbuf_r+0x90>
 80213a4:	4638      	mov	r0, r7
 80213a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80213a8:	4b0a      	ldr	r3, [pc, #40]	; (80213d4 <__swbuf_r+0x9c>)
 80213aa:	429c      	cmp	r4, r3
 80213ac:	d101      	bne.n	80213b2 <__swbuf_r+0x7a>
 80213ae:	68ac      	ldr	r4, [r5, #8]
 80213b0:	e7cf      	b.n	8021352 <__swbuf_r+0x1a>
 80213b2:	4b09      	ldr	r3, [pc, #36]	; (80213d8 <__swbuf_r+0xa0>)
 80213b4:	429c      	cmp	r4, r3
 80213b6:	bf08      	it	eq
 80213b8:	68ec      	ldreq	r4, [r5, #12]
 80213ba:	e7ca      	b.n	8021352 <__swbuf_r+0x1a>
 80213bc:	4621      	mov	r1, r4
 80213be:	4628      	mov	r0, r5
 80213c0:	f000 f81e 	bl	8021400 <__swsetup_r>
 80213c4:	2800      	cmp	r0, #0
 80213c6:	d0cb      	beq.n	8021360 <__swbuf_r+0x28>
 80213c8:	f04f 37ff 	mov.w	r7, #4294967295
 80213cc:	e7ea      	b.n	80213a4 <__swbuf_r+0x6c>
 80213ce:	bf00      	nop
 80213d0:	08023f10 	.word	0x08023f10
 80213d4:	08023f30 	.word	0x08023f30
 80213d8:	08023ef0 	.word	0x08023ef0

080213dc <_write_r>:
 80213dc:	b538      	push	{r3, r4, r5, lr}
 80213de:	4d07      	ldr	r5, [pc, #28]	; (80213fc <_write_r+0x20>)
 80213e0:	4604      	mov	r4, r0
 80213e2:	4608      	mov	r0, r1
 80213e4:	4611      	mov	r1, r2
 80213e6:	2200      	movs	r2, #0
 80213e8:	602a      	str	r2, [r5, #0]
 80213ea:	461a      	mov	r2, r3
 80213ec:	f7e1 ffc8 	bl	8003380 <_write>
 80213f0:	1c43      	adds	r3, r0, #1
 80213f2:	d102      	bne.n	80213fa <_write_r+0x1e>
 80213f4:	682b      	ldr	r3, [r5, #0]
 80213f6:	b103      	cbz	r3, 80213fa <_write_r+0x1e>
 80213f8:	6023      	str	r3, [r4, #0]
 80213fa:	bd38      	pop	{r3, r4, r5, pc}
 80213fc:	2400ca44 	.word	0x2400ca44

08021400 <__swsetup_r>:
 8021400:	4b32      	ldr	r3, [pc, #200]	; (80214cc <__swsetup_r+0xcc>)
 8021402:	b570      	push	{r4, r5, r6, lr}
 8021404:	681d      	ldr	r5, [r3, #0]
 8021406:	4606      	mov	r6, r0
 8021408:	460c      	mov	r4, r1
 802140a:	b125      	cbz	r5, 8021416 <__swsetup_r+0x16>
 802140c:	69ab      	ldr	r3, [r5, #24]
 802140e:	b913      	cbnz	r3, 8021416 <__swsetup_r+0x16>
 8021410:	4628      	mov	r0, r5
 8021412:	f7ff f92b 	bl	802066c <__sinit>
 8021416:	4b2e      	ldr	r3, [pc, #184]	; (80214d0 <__swsetup_r+0xd0>)
 8021418:	429c      	cmp	r4, r3
 802141a:	d10f      	bne.n	802143c <__swsetup_r+0x3c>
 802141c:	686c      	ldr	r4, [r5, #4]
 802141e:	89a3      	ldrh	r3, [r4, #12]
 8021420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021424:	0719      	lsls	r1, r3, #28
 8021426:	d42c      	bmi.n	8021482 <__swsetup_r+0x82>
 8021428:	06dd      	lsls	r5, r3, #27
 802142a:	d411      	bmi.n	8021450 <__swsetup_r+0x50>
 802142c:	2309      	movs	r3, #9
 802142e:	6033      	str	r3, [r6, #0]
 8021430:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021434:	81a3      	strh	r3, [r4, #12]
 8021436:	f04f 30ff 	mov.w	r0, #4294967295
 802143a:	e03e      	b.n	80214ba <__swsetup_r+0xba>
 802143c:	4b25      	ldr	r3, [pc, #148]	; (80214d4 <__swsetup_r+0xd4>)
 802143e:	429c      	cmp	r4, r3
 8021440:	d101      	bne.n	8021446 <__swsetup_r+0x46>
 8021442:	68ac      	ldr	r4, [r5, #8]
 8021444:	e7eb      	b.n	802141e <__swsetup_r+0x1e>
 8021446:	4b24      	ldr	r3, [pc, #144]	; (80214d8 <__swsetup_r+0xd8>)
 8021448:	429c      	cmp	r4, r3
 802144a:	bf08      	it	eq
 802144c:	68ec      	ldreq	r4, [r5, #12]
 802144e:	e7e6      	b.n	802141e <__swsetup_r+0x1e>
 8021450:	0758      	lsls	r0, r3, #29
 8021452:	d512      	bpl.n	802147a <__swsetup_r+0x7a>
 8021454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021456:	b141      	cbz	r1, 802146a <__swsetup_r+0x6a>
 8021458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802145c:	4299      	cmp	r1, r3
 802145e:	d002      	beq.n	8021466 <__swsetup_r+0x66>
 8021460:	4630      	mov	r0, r6
 8021462:	f7ff fa11 	bl	8020888 <_free_r>
 8021466:	2300      	movs	r3, #0
 8021468:	6363      	str	r3, [r4, #52]	; 0x34
 802146a:	89a3      	ldrh	r3, [r4, #12]
 802146c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021470:	81a3      	strh	r3, [r4, #12]
 8021472:	2300      	movs	r3, #0
 8021474:	6063      	str	r3, [r4, #4]
 8021476:	6923      	ldr	r3, [r4, #16]
 8021478:	6023      	str	r3, [r4, #0]
 802147a:	89a3      	ldrh	r3, [r4, #12]
 802147c:	f043 0308 	orr.w	r3, r3, #8
 8021480:	81a3      	strh	r3, [r4, #12]
 8021482:	6923      	ldr	r3, [r4, #16]
 8021484:	b94b      	cbnz	r3, 802149a <__swsetup_r+0x9a>
 8021486:	89a3      	ldrh	r3, [r4, #12]
 8021488:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802148c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021490:	d003      	beq.n	802149a <__swsetup_r+0x9a>
 8021492:	4621      	mov	r1, r4
 8021494:	4630      	mov	r0, r6
 8021496:	f000 f98d 	bl	80217b4 <__smakebuf_r>
 802149a:	89a0      	ldrh	r0, [r4, #12]
 802149c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80214a0:	f010 0301 	ands.w	r3, r0, #1
 80214a4:	d00a      	beq.n	80214bc <__swsetup_r+0xbc>
 80214a6:	2300      	movs	r3, #0
 80214a8:	60a3      	str	r3, [r4, #8]
 80214aa:	6963      	ldr	r3, [r4, #20]
 80214ac:	425b      	negs	r3, r3
 80214ae:	61a3      	str	r3, [r4, #24]
 80214b0:	6923      	ldr	r3, [r4, #16]
 80214b2:	b943      	cbnz	r3, 80214c6 <__swsetup_r+0xc6>
 80214b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80214b8:	d1ba      	bne.n	8021430 <__swsetup_r+0x30>
 80214ba:	bd70      	pop	{r4, r5, r6, pc}
 80214bc:	0781      	lsls	r1, r0, #30
 80214be:	bf58      	it	pl
 80214c0:	6963      	ldrpl	r3, [r4, #20]
 80214c2:	60a3      	str	r3, [r4, #8]
 80214c4:	e7f4      	b.n	80214b0 <__swsetup_r+0xb0>
 80214c6:	2000      	movs	r0, #0
 80214c8:	e7f7      	b.n	80214ba <__swsetup_r+0xba>
 80214ca:	bf00      	nop
 80214cc:	240000dc 	.word	0x240000dc
 80214d0:	08023f10 	.word	0x08023f10
 80214d4:	08023f30 	.word	0x08023f30
 80214d8:	08023ef0 	.word	0x08023ef0

080214dc <__register_exitproc>:
 80214dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80214e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802159c <__register_exitproc+0xc0>
 80214e4:	4606      	mov	r6, r0
 80214e6:	f8d8 0000 	ldr.w	r0, [r8]
 80214ea:	461f      	mov	r7, r3
 80214ec:	460d      	mov	r5, r1
 80214ee:	4691      	mov	r9, r2
 80214f0:	f7ff f991 	bl	8020816 <__retarget_lock_acquire_recursive>
 80214f4:	4b25      	ldr	r3, [pc, #148]	; (802158c <__register_exitproc+0xb0>)
 80214f6:	681c      	ldr	r4, [r3, #0]
 80214f8:	b934      	cbnz	r4, 8021508 <__register_exitproc+0x2c>
 80214fa:	4c25      	ldr	r4, [pc, #148]	; (8021590 <__register_exitproc+0xb4>)
 80214fc:	601c      	str	r4, [r3, #0]
 80214fe:	4b25      	ldr	r3, [pc, #148]	; (8021594 <__register_exitproc+0xb8>)
 8021500:	b113      	cbz	r3, 8021508 <__register_exitproc+0x2c>
 8021502:	681b      	ldr	r3, [r3, #0]
 8021504:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021508:	6863      	ldr	r3, [r4, #4]
 802150a:	2b1f      	cmp	r3, #31
 802150c:	dd07      	ble.n	802151e <__register_exitproc+0x42>
 802150e:	f8d8 0000 	ldr.w	r0, [r8]
 8021512:	f7ff f982 	bl	802081a <__retarget_lock_release_recursive>
 8021516:	f04f 30ff 	mov.w	r0, #4294967295
 802151a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802151e:	b34e      	cbz	r6, 8021574 <__register_exitproc+0x98>
 8021520:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021524:	b988      	cbnz	r0, 802154a <__register_exitproc+0x6e>
 8021526:	4b1c      	ldr	r3, [pc, #112]	; (8021598 <__register_exitproc+0xbc>)
 8021528:	b923      	cbnz	r3, 8021534 <__register_exitproc+0x58>
 802152a:	f8d8 0000 	ldr.w	r0, [r8]
 802152e:	f7ff f973 	bl	8020818 <__retarget_lock_release>
 8021532:	e7f0      	b.n	8021516 <__register_exitproc+0x3a>
 8021534:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021538:	f7ff f970 	bl	802081c <malloc>
 802153c:	2800      	cmp	r0, #0
 802153e:	d0f4      	beq.n	802152a <__register_exitproc+0x4e>
 8021540:	2300      	movs	r3, #0
 8021542:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021546:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802154a:	6863      	ldr	r3, [r4, #4]
 802154c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021550:	2201      	movs	r2, #1
 8021552:	409a      	lsls	r2, r3
 8021554:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021558:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802155c:	4313      	orrs	r3, r2
 802155e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021562:	2e02      	cmp	r6, #2
 8021564:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021568:	bf02      	ittt	eq
 802156a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802156e:	4313      	orreq	r3, r2
 8021570:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8021574:	6863      	ldr	r3, [r4, #4]
 8021576:	f8d8 0000 	ldr.w	r0, [r8]
 802157a:	1c5a      	adds	r2, r3, #1
 802157c:	3302      	adds	r3, #2
 802157e:	6062      	str	r2, [r4, #4]
 8021580:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021584:	f7ff f949 	bl	802081a <__retarget_lock_release_recursive>
 8021588:	2000      	movs	r0, #0
 802158a:	e7c6      	b.n	802151a <__register_exitproc+0x3e>
 802158c:	2400cad4 	.word	0x2400cad4
 8021590:	2400ca48 	.word	0x2400ca48
 8021594:	08023f88 	.word	0x08023f88
 8021598:	0802081d 	.word	0x0802081d
 802159c:	24000140 	.word	0x24000140

080215a0 <_close_r>:
 80215a0:	b538      	push	{r3, r4, r5, lr}
 80215a2:	4d06      	ldr	r5, [pc, #24]	; (80215bc <_close_r+0x1c>)
 80215a4:	2300      	movs	r3, #0
 80215a6:	4604      	mov	r4, r0
 80215a8:	4608      	mov	r0, r1
 80215aa:	602b      	str	r3, [r5, #0]
 80215ac:	f7e1 fef6 	bl	800339c <_close>
 80215b0:	1c43      	adds	r3, r0, #1
 80215b2:	d102      	bne.n	80215ba <_close_r+0x1a>
 80215b4:	682b      	ldr	r3, [r5, #0]
 80215b6:	b103      	cbz	r3, 80215ba <_close_r+0x1a>
 80215b8:	6023      	str	r3, [r4, #0]
 80215ba:	bd38      	pop	{r3, r4, r5, pc}
 80215bc:	2400ca44 	.word	0x2400ca44

080215c0 <__sflush_r>:
 80215c0:	898a      	ldrh	r2, [r1, #12]
 80215c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215c6:	4605      	mov	r5, r0
 80215c8:	0710      	lsls	r0, r2, #28
 80215ca:	460c      	mov	r4, r1
 80215cc:	d458      	bmi.n	8021680 <__sflush_r+0xc0>
 80215ce:	684b      	ldr	r3, [r1, #4]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	dc05      	bgt.n	80215e0 <__sflush_r+0x20>
 80215d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	dc02      	bgt.n	80215e0 <__sflush_r+0x20>
 80215da:	2000      	movs	r0, #0
 80215dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80215e2:	2e00      	cmp	r6, #0
 80215e4:	d0f9      	beq.n	80215da <__sflush_r+0x1a>
 80215e6:	2300      	movs	r3, #0
 80215e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80215ec:	682f      	ldr	r7, [r5, #0]
 80215ee:	602b      	str	r3, [r5, #0]
 80215f0:	d032      	beq.n	8021658 <__sflush_r+0x98>
 80215f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80215f4:	89a3      	ldrh	r3, [r4, #12]
 80215f6:	075a      	lsls	r2, r3, #29
 80215f8:	d505      	bpl.n	8021606 <__sflush_r+0x46>
 80215fa:	6863      	ldr	r3, [r4, #4]
 80215fc:	1ac0      	subs	r0, r0, r3
 80215fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021600:	b10b      	cbz	r3, 8021606 <__sflush_r+0x46>
 8021602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021604:	1ac0      	subs	r0, r0, r3
 8021606:	2300      	movs	r3, #0
 8021608:	4602      	mov	r2, r0
 802160a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802160c:	6a21      	ldr	r1, [r4, #32]
 802160e:	4628      	mov	r0, r5
 8021610:	47b0      	blx	r6
 8021612:	1c43      	adds	r3, r0, #1
 8021614:	89a3      	ldrh	r3, [r4, #12]
 8021616:	d106      	bne.n	8021626 <__sflush_r+0x66>
 8021618:	6829      	ldr	r1, [r5, #0]
 802161a:	291d      	cmp	r1, #29
 802161c:	d82c      	bhi.n	8021678 <__sflush_r+0xb8>
 802161e:	4a2a      	ldr	r2, [pc, #168]	; (80216c8 <__sflush_r+0x108>)
 8021620:	40ca      	lsrs	r2, r1
 8021622:	07d6      	lsls	r6, r2, #31
 8021624:	d528      	bpl.n	8021678 <__sflush_r+0xb8>
 8021626:	2200      	movs	r2, #0
 8021628:	6062      	str	r2, [r4, #4]
 802162a:	04d9      	lsls	r1, r3, #19
 802162c:	6922      	ldr	r2, [r4, #16]
 802162e:	6022      	str	r2, [r4, #0]
 8021630:	d504      	bpl.n	802163c <__sflush_r+0x7c>
 8021632:	1c42      	adds	r2, r0, #1
 8021634:	d101      	bne.n	802163a <__sflush_r+0x7a>
 8021636:	682b      	ldr	r3, [r5, #0]
 8021638:	b903      	cbnz	r3, 802163c <__sflush_r+0x7c>
 802163a:	6560      	str	r0, [r4, #84]	; 0x54
 802163c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802163e:	602f      	str	r7, [r5, #0]
 8021640:	2900      	cmp	r1, #0
 8021642:	d0ca      	beq.n	80215da <__sflush_r+0x1a>
 8021644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021648:	4299      	cmp	r1, r3
 802164a:	d002      	beq.n	8021652 <__sflush_r+0x92>
 802164c:	4628      	mov	r0, r5
 802164e:	f7ff f91b 	bl	8020888 <_free_r>
 8021652:	2000      	movs	r0, #0
 8021654:	6360      	str	r0, [r4, #52]	; 0x34
 8021656:	e7c1      	b.n	80215dc <__sflush_r+0x1c>
 8021658:	6a21      	ldr	r1, [r4, #32]
 802165a:	2301      	movs	r3, #1
 802165c:	4628      	mov	r0, r5
 802165e:	47b0      	blx	r6
 8021660:	1c41      	adds	r1, r0, #1
 8021662:	d1c7      	bne.n	80215f4 <__sflush_r+0x34>
 8021664:	682b      	ldr	r3, [r5, #0]
 8021666:	2b00      	cmp	r3, #0
 8021668:	d0c4      	beq.n	80215f4 <__sflush_r+0x34>
 802166a:	2b1d      	cmp	r3, #29
 802166c:	d001      	beq.n	8021672 <__sflush_r+0xb2>
 802166e:	2b16      	cmp	r3, #22
 8021670:	d101      	bne.n	8021676 <__sflush_r+0xb6>
 8021672:	602f      	str	r7, [r5, #0]
 8021674:	e7b1      	b.n	80215da <__sflush_r+0x1a>
 8021676:	89a3      	ldrh	r3, [r4, #12]
 8021678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802167c:	81a3      	strh	r3, [r4, #12]
 802167e:	e7ad      	b.n	80215dc <__sflush_r+0x1c>
 8021680:	690f      	ldr	r7, [r1, #16]
 8021682:	2f00      	cmp	r7, #0
 8021684:	d0a9      	beq.n	80215da <__sflush_r+0x1a>
 8021686:	0793      	lsls	r3, r2, #30
 8021688:	680e      	ldr	r6, [r1, #0]
 802168a:	bf08      	it	eq
 802168c:	694b      	ldreq	r3, [r1, #20]
 802168e:	600f      	str	r7, [r1, #0]
 8021690:	bf18      	it	ne
 8021692:	2300      	movne	r3, #0
 8021694:	eba6 0807 	sub.w	r8, r6, r7
 8021698:	608b      	str	r3, [r1, #8]
 802169a:	f1b8 0f00 	cmp.w	r8, #0
 802169e:	dd9c      	ble.n	80215da <__sflush_r+0x1a>
 80216a0:	6a21      	ldr	r1, [r4, #32]
 80216a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80216a4:	4643      	mov	r3, r8
 80216a6:	463a      	mov	r2, r7
 80216a8:	4628      	mov	r0, r5
 80216aa:	47b0      	blx	r6
 80216ac:	2800      	cmp	r0, #0
 80216ae:	dc06      	bgt.n	80216be <__sflush_r+0xfe>
 80216b0:	89a3      	ldrh	r3, [r4, #12]
 80216b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80216b6:	81a3      	strh	r3, [r4, #12]
 80216b8:	f04f 30ff 	mov.w	r0, #4294967295
 80216bc:	e78e      	b.n	80215dc <__sflush_r+0x1c>
 80216be:	4407      	add	r7, r0
 80216c0:	eba8 0800 	sub.w	r8, r8, r0
 80216c4:	e7e9      	b.n	802169a <__sflush_r+0xda>
 80216c6:	bf00      	nop
 80216c8:	20400001 	.word	0x20400001

080216cc <_fflush_r>:
 80216cc:	b538      	push	{r3, r4, r5, lr}
 80216ce:	690b      	ldr	r3, [r1, #16]
 80216d0:	4605      	mov	r5, r0
 80216d2:	460c      	mov	r4, r1
 80216d4:	b913      	cbnz	r3, 80216dc <_fflush_r+0x10>
 80216d6:	2500      	movs	r5, #0
 80216d8:	4628      	mov	r0, r5
 80216da:	bd38      	pop	{r3, r4, r5, pc}
 80216dc:	b118      	cbz	r0, 80216e6 <_fflush_r+0x1a>
 80216de:	6983      	ldr	r3, [r0, #24]
 80216e0:	b90b      	cbnz	r3, 80216e6 <_fflush_r+0x1a>
 80216e2:	f7fe ffc3 	bl	802066c <__sinit>
 80216e6:	4b14      	ldr	r3, [pc, #80]	; (8021738 <_fflush_r+0x6c>)
 80216e8:	429c      	cmp	r4, r3
 80216ea:	d11b      	bne.n	8021724 <_fflush_r+0x58>
 80216ec:	686c      	ldr	r4, [r5, #4]
 80216ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	d0ef      	beq.n	80216d6 <_fflush_r+0xa>
 80216f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80216f8:	07d0      	lsls	r0, r2, #31
 80216fa:	d404      	bmi.n	8021706 <_fflush_r+0x3a>
 80216fc:	0599      	lsls	r1, r3, #22
 80216fe:	d402      	bmi.n	8021706 <_fflush_r+0x3a>
 8021700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021702:	f7ff f888 	bl	8020816 <__retarget_lock_acquire_recursive>
 8021706:	4628      	mov	r0, r5
 8021708:	4621      	mov	r1, r4
 802170a:	f7ff ff59 	bl	80215c0 <__sflush_r>
 802170e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021710:	07da      	lsls	r2, r3, #31
 8021712:	4605      	mov	r5, r0
 8021714:	d4e0      	bmi.n	80216d8 <_fflush_r+0xc>
 8021716:	89a3      	ldrh	r3, [r4, #12]
 8021718:	059b      	lsls	r3, r3, #22
 802171a:	d4dd      	bmi.n	80216d8 <_fflush_r+0xc>
 802171c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802171e:	f7ff f87c 	bl	802081a <__retarget_lock_release_recursive>
 8021722:	e7d9      	b.n	80216d8 <_fflush_r+0xc>
 8021724:	4b05      	ldr	r3, [pc, #20]	; (802173c <_fflush_r+0x70>)
 8021726:	429c      	cmp	r4, r3
 8021728:	d101      	bne.n	802172e <_fflush_r+0x62>
 802172a:	68ac      	ldr	r4, [r5, #8]
 802172c:	e7df      	b.n	80216ee <_fflush_r+0x22>
 802172e:	4b04      	ldr	r3, [pc, #16]	; (8021740 <_fflush_r+0x74>)
 8021730:	429c      	cmp	r4, r3
 8021732:	bf08      	it	eq
 8021734:	68ec      	ldreq	r4, [r5, #12]
 8021736:	e7da      	b.n	80216ee <_fflush_r+0x22>
 8021738:	08023f10 	.word	0x08023f10
 802173c:	08023f30 	.word	0x08023f30
 8021740:	08023ef0 	.word	0x08023ef0

08021744 <_lseek_r>:
 8021744:	b538      	push	{r3, r4, r5, lr}
 8021746:	4d07      	ldr	r5, [pc, #28]	; (8021764 <_lseek_r+0x20>)
 8021748:	4604      	mov	r4, r0
 802174a:	4608      	mov	r0, r1
 802174c:	4611      	mov	r1, r2
 802174e:	2200      	movs	r2, #0
 8021750:	602a      	str	r2, [r5, #0]
 8021752:	461a      	mov	r2, r3
 8021754:	f7e1 fe2c 	bl	80033b0 <_lseek>
 8021758:	1c43      	adds	r3, r0, #1
 802175a:	d102      	bne.n	8021762 <_lseek_r+0x1e>
 802175c:	682b      	ldr	r3, [r5, #0]
 802175e:	b103      	cbz	r3, 8021762 <_lseek_r+0x1e>
 8021760:	6023      	str	r3, [r4, #0]
 8021762:	bd38      	pop	{r3, r4, r5, pc}
 8021764:	2400ca44 	.word	0x2400ca44

08021768 <__swhatbuf_r>:
 8021768:	b570      	push	{r4, r5, r6, lr}
 802176a:	460e      	mov	r6, r1
 802176c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021770:	2900      	cmp	r1, #0
 8021772:	b096      	sub	sp, #88	; 0x58
 8021774:	4614      	mov	r4, r2
 8021776:	461d      	mov	r5, r3
 8021778:	da08      	bge.n	802178c <__swhatbuf_r+0x24>
 802177a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802177e:	2200      	movs	r2, #0
 8021780:	602a      	str	r2, [r5, #0]
 8021782:	061a      	lsls	r2, r3, #24
 8021784:	d410      	bmi.n	80217a8 <__swhatbuf_r+0x40>
 8021786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802178a:	e00e      	b.n	80217aa <__swhatbuf_r+0x42>
 802178c:	466a      	mov	r2, sp
 802178e:	f000 fa13 	bl	8021bb8 <_fstat_r>
 8021792:	2800      	cmp	r0, #0
 8021794:	dbf1      	blt.n	802177a <__swhatbuf_r+0x12>
 8021796:	9a01      	ldr	r2, [sp, #4]
 8021798:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802179c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80217a0:	425a      	negs	r2, r3
 80217a2:	415a      	adcs	r2, r3
 80217a4:	602a      	str	r2, [r5, #0]
 80217a6:	e7ee      	b.n	8021786 <__swhatbuf_r+0x1e>
 80217a8:	2340      	movs	r3, #64	; 0x40
 80217aa:	2000      	movs	r0, #0
 80217ac:	6023      	str	r3, [r4, #0]
 80217ae:	b016      	add	sp, #88	; 0x58
 80217b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080217b4 <__smakebuf_r>:
 80217b4:	898b      	ldrh	r3, [r1, #12]
 80217b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80217b8:	079d      	lsls	r5, r3, #30
 80217ba:	4606      	mov	r6, r0
 80217bc:	460c      	mov	r4, r1
 80217be:	d507      	bpl.n	80217d0 <__smakebuf_r+0x1c>
 80217c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80217c4:	6023      	str	r3, [r4, #0]
 80217c6:	6123      	str	r3, [r4, #16]
 80217c8:	2301      	movs	r3, #1
 80217ca:	6163      	str	r3, [r4, #20]
 80217cc:	b002      	add	sp, #8
 80217ce:	bd70      	pop	{r4, r5, r6, pc}
 80217d0:	ab01      	add	r3, sp, #4
 80217d2:	466a      	mov	r2, sp
 80217d4:	f7ff ffc8 	bl	8021768 <__swhatbuf_r>
 80217d8:	9900      	ldr	r1, [sp, #0]
 80217da:	4605      	mov	r5, r0
 80217dc:	4630      	mov	r0, r6
 80217de:	f7ff f8bf 	bl	8020960 <_malloc_r>
 80217e2:	b948      	cbnz	r0, 80217f8 <__smakebuf_r+0x44>
 80217e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217e8:	059a      	lsls	r2, r3, #22
 80217ea:	d4ef      	bmi.n	80217cc <__smakebuf_r+0x18>
 80217ec:	f023 0303 	bic.w	r3, r3, #3
 80217f0:	f043 0302 	orr.w	r3, r3, #2
 80217f4:	81a3      	strh	r3, [r4, #12]
 80217f6:	e7e3      	b.n	80217c0 <__smakebuf_r+0xc>
 80217f8:	4b0d      	ldr	r3, [pc, #52]	; (8021830 <__smakebuf_r+0x7c>)
 80217fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80217fc:	89a3      	ldrh	r3, [r4, #12]
 80217fe:	6020      	str	r0, [r4, #0]
 8021800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021804:	81a3      	strh	r3, [r4, #12]
 8021806:	9b00      	ldr	r3, [sp, #0]
 8021808:	6163      	str	r3, [r4, #20]
 802180a:	9b01      	ldr	r3, [sp, #4]
 802180c:	6120      	str	r0, [r4, #16]
 802180e:	b15b      	cbz	r3, 8021828 <__smakebuf_r+0x74>
 8021810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021814:	4630      	mov	r0, r6
 8021816:	f000 f9e1 	bl	8021bdc <_isatty_r>
 802181a:	b128      	cbz	r0, 8021828 <__smakebuf_r+0x74>
 802181c:	89a3      	ldrh	r3, [r4, #12]
 802181e:	f023 0303 	bic.w	r3, r3, #3
 8021822:	f043 0301 	orr.w	r3, r3, #1
 8021826:	81a3      	strh	r3, [r4, #12]
 8021828:	89a0      	ldrh	r0, [r4, #12]
 802182a:	4305      	orrs	r5, r0
 802182c:	81a5      	strh	r5, [r4, #12]
 802182e:	e7cd      	b.n	80217cc <__smakebuf_r+0x18>
 8021830:	08020605 	.word	0x08020605

08021834 <memmove>:
 8021834:	4288      	cmp	r0, r1
 8021836:	b510      	push	{r4, lr}
 8021838:	eb01 0402 	add.w	r4, r1, r2
 802183c:	d902      	bls.n	8021844 <memmove+0x10>
 802183e:	4284      	cmp	r4, r0
 8021840:	4623      	mov	r3, r4
 8021842:	d807      	bhi.n	8021854 <memmove+0x20>
 8021844:	1e43      	subs	r3, r0, #1
 8021846:	42a1      	cmp	r1, r4
 8021848:	d008      	beq.n	802185c <memmove+0x28>
 802184a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802184e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021852:	e7f8      	b.n	8021846 <memmove+0x12>
 8021854:	4402      	add	r2, r0
 8021856:	4601      	mov	r1, r0
 8021858:	428a      	cmp	r2, r1
 802185a:	d100      	bne.n	802185e <memmove+0x2a>
 802185c:	bd10      	pop	{r4, pc}
 802185e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021866:	e7f7      	b.n	8021858 <memmove+0x24>

08021868 <__malloc_lock>:
 8021868:	4801      	ldr	r0, [pc, #4]	; (8021870 <__malloc_lock+0x8>)
 802186a:	f7fe bfd4 	b.w	8020816 <__retarget_lock_acquire_recursive>
 802186e:	bf00      	nop
 8021870:	2400c931 	.word	0x2400c931

08021874 <__malloc_unlock>:
 8021874:	4801      	ldr	r0, [pc, #4]	; (802187c <__malloc_unlock+0x8>)
 8021876:	f7fe bfd0 	b.w	802081a <__retarget_lock_release_recursive>
 802187a:	bf00      	nop
 802187c:	2400c931 	.word	0x2400c931

08021880 <_realloc_r>:
 8021880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021884:	4680      	mov	r8, r0
 8021886:	4614      	mov	r4, r2
 8021888:	460e      	mov	r6, r1
 802188a:	b921      	cbnz	r1, 8021896 <_realloc_r+0x16>
 802188c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021890:	4611      	mov	r1, r2
 8021892:	f7ff b865 	b.w	8020960 <_malloc_r>
 8021896:	b92a      	cbnz	r2, 80218a4 <_realloc_r+0x24>
 8021898:	f7fe fff6 	bl	8020888 <_free_r>
 802189c:	4625      	mov	r5, r4
 802189e:	4628      	mov	r0, r5
 80218a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218a4:	f000 f9aa 	bl	8021bfc <_malloc_usable_size_r>
 80218a8:	4284      	cmp	r4, r0
 80218aa:	4607      	mov	r7, r0
 80218ac:	d802      	bhi.n	80218b4 <_realloc_r+0x34>
 80218ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80218b2:	d812      	bhi.n	80218da <_realloc_r+0x5a>
 80218b4:	4621      	mov	r1, r4
 80218b6:	4640      	mov	r0, r8
 80218b8:	f7ff f852 	bl	8020960 <_malloc_r>
 80218bc:	4605      	mov	r5, r0
 80218be:	2800      	cmp	r0, #0
 80218c0:	d0ed      	beq.n	802189e <_realloc_r+0x1e>
 80218c2:	42bc      	cmp	r4, r7
 80218c4:	4622      	mov	r2, r4
 80218c6:	4631      	mov	r1, r6
 80218c8:	bf28      	it	cs
 80218ca:	463a      	movcs	r2, r7
 80218cc:	f7fe ffc6 	bl	802085c <memcpy>
 80218d0:	4631      	mov	r1, r6
 80218d2:	4640      	mov	r0, r8
 80218d4:	f7fe ffd8 	bl	8020888 <_free_r>
 80218d8:	e7e1      	b.n	802189e <_realloc_r+0x1e>
 80218da:	4635      	mov	r5, r6
 80218dc:	e7df      	b.n	802189e <_realloc_r+0x1e>

080218de <__ssputs_r>:
 80218de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80218e2:	688e      	ldr	r6, [r1, #8]
 80218e4:	429e      	cmp	r6, r3
 80218e6:	4682      	mov	sl, r0
 80218e8:	460c      	mov	r4, r1
 80218ea:	4690      	mov	r8, r2
 80218ec:	461f      	mov	r7, r3
 80218ee:	d838      	bhi.n	8021962 <__ssputs_r+0x84>
 80218f0:	898a      	ldrh	r2, [r1, #12]
 80218f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80218f6:	d032      	beq.n	802195e <__ssputs_r+0x80>
 80218f8:	6825      	ldr	r5, [r4, #0]
 80218fa:	6909      	ldr	r1, [r1, #16]
 80218fc:	eba5 0901 	sub.w	r9, r5, r1
 8021900:	6965      	ldr	r5, [r4, #20]
 8021902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021906:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802190a:	3301      	adds	r3, #1
 802190c:	444b      	add	r3, r9
 802190e:	106d      	asrs	r5, r5, #1
 8021910:	429d      	cmp	r5, r3
 8021912:	bf38      	it	cc
 8021914:	461d      	movcc	r5, r3
 8021916:	0553      	lsls	r3, r2, #21
 8021918:	d531      	bpl.n	802197e <__ssputs_r+0xa0>
 802191a:	4629      	mov	r1, r5
 802191c:	f7ff f820 	bl	8020960 <_malloc_r>
 8021920:	4606      	mov	r6, r0
 8021922:	b950      	cbnz	r0, 802193a <__ssputs_r+0x5c>
 8021924:	230c      	movs	r3, #12
 8021926:	f8ca 3000 	str.w	r3, [sl]
 802192a:	89a3      	ldrh	r3, [r4, #12]
 802192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021930:	81a3      	strh	r3, [r4, #12]
 8021932:	f04f 30ff 	mov.w	r0, #4294967295
 8021936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802193a:	6921      	ldr	r1, [r4, #16]
 802193c:	464a      	mov	r2, r9
 802193e:	f7fe ff8d 	bl	802085c <memcpy>
 8021942:	89a3      	ldrh	r3, [r4, #12]
 8021944:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802194c:	81a3      	strh	r3, [r4, #12]
 802194e:	6126      	str	r6, [r4, #16]
 8021950:	6165      	str	r5, [r4, #20]
 8021952:	444e      	add	r6, r9
 8021954:	eba5 0509 	sub.w	r5, r5, r9
 8021958:	6026      	str	r6, [r4, #0]
 802195a:	60a5      	str	r5, [r4, #8]
 802195c:	463e      	mov	r6, r7
 802195e:	42be      	cmp	r6, r7
 8021960:	d900      	bls.n	8021964 <__ssputs_r+0x86>
 8021962:	463e      	mov	r6, r7
 8021964:	6820      	ldr	r0, [r4, #0]
 8021966:	4632      	mov	r2, r6
 8021968:	4641      	mov	r1, r8
 802196a:	f7ff ff63 	bl	8021834 <memmove>
 802196e:	68a3      	ldr	r3, [r4, #8]
 8021970:	1b9b      	subs	r3, r3, r6
 8021972:	60a3      	str	r3, [r4, #8]
 8021974:	6823      	ldr	r3, [r4, #0]
 8021976:	4433      	add	r3, r6
 8021978:	6023      	str	r3, [r4, #0]
 802197a:	2000      	movs	r0, #0
 802197c:	e7db      	b.n	8021936 <__ssputs_r+0x58>
 802197e:	462a      	mov	r2, r5
 8021980:	f7ff ff7e 	bl	8021880 <_realloc_r>
 8021984:	4606      	mov	r6, r0
 8021986:	2800      	cmp	r0, #0
 8021988:	d1e1      	bne.n	802194e <__ssputs_r+0x70>
 802198a:	6921      	ldr	r1, [r4, #16]
 802198c:	4650      	mov	r0, sl
 802198e:	f7fe ff7b 	bl	8020888 <_free_r>
 8021992:	e7c7      	b.n	8021924 <__ssputs_r+0x46>

08021994 <_svfiprintf_r>:
 8021994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021998:	4698      	mov	r8, r3
 802199a:	898b      	ldrh	r3, [r1, #12]
 802199c:	061b      	lsls	r3, r3, #24
 802199e:	b09d      	sub	sp, #116	; 0x74
 80219a0:	4607      	mov	r7, r0
 80219a2:	460d      	mov	r5, r1
 80219a4:	4614      	mov	r4, r2
 80219a6:	d50e      	bpl.n	80219c6 <_svfiprintf_r+0x32>
 80219a8:	690b      	ldr	r3, [r1, #16]
 80219aa:	b963      	cbnz	r3, 80219c6 <_svfiprintf_r+0x32>
 80219ac:	2140      	movs	r1, #64	; 0x40
 80219ae:	f7fe ffd7 	bl	8020960 <_malloc_r>
 80219b2:	6028      	str	r0, [r5, #0]
 80219b4:	6128      	str	r0, [r5, #16]
 80219b6:	b920      	cbnz	r0, 80219c2 <_svfiprintf_r+0x2e>
 80219b8:	230c      	movs	r3, #12
 80219ba:	603b      	str	r3, [r7, #0]
 80219bc:	f04f 30ff 	mov.w	r0, #4294967295
 80219c0:	e0d1      	b.n	8021b66 <_svfiprintf_r+0x1d2>
 80219c2:	2340      	movs	r3, #64	; 0x40
 80219c4:	616b      	str	r3, [r5, #20]
 80219c6:	2300      	movs	r3, #0
 80219c8:	9309      	str	r3, [sp, #36]	; 0x24
 80219ca:	2320      	movs	r3, #32
 80219cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80219d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80219d4:	2330      	movs	r3, #48	; 0x30
 80219d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021b80 <_svfiprintf_r+0x1ec>
 80219da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80219de:	f04f 0901 	mov.w	r9, #1
 80219e2:	4623      	mov	r3, r4
 80219e4:	469a      	mov	sl, r3
 80219e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80219ea:	b10a      	cbz	r2, 80219f0 <_svfiprintf_r+0x5c>
 80219ec:	2a25      	cmp	r2, #37	; 0x25
 80219ee:	d1f9      	bne.n	80219e4 <_svfiprintf_r+0x50>
 80219f0:	ebba 0b04 	subs.w	fp, sl, r4
 80219f4:	d00b      	beq.n	8021a0e <_svfiprintf_r+0x7a>
 80219f6:	465b      	mov	r3, fp
 80219f8:	4622      	mov	r2, r4
 80219fa:	4629      	mov	r1, r5
 80219fc:	4638      	mov	r0, r7
 80219fe:	f7ff ff6e 	bl	80218de <__ssputs_r>
 8021a02:	3001      	adds	r0, #1
 8021a04:	f000 80aa 	beq.w	8021b5c <_svfiprintf_r+0x1c8>
 8021a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a0a:	445a      	add	r2, fp
 8021a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8021a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8021a12:	2b00      	cmp	r3, #0
 8021a14:	f000 80a2 	beq.w	8021b5c <_svfiprintf_r+0x1c8>
 8021a18:	2300      	movs	r3, #0
 8021a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8021a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021a22:	f10a 0a01 	add.w	sl, sl, #1
 8021a26:	9304      	str	r3, [sp, #16]
 8021a28:	9307      	str	r3, [sp, #28]
 8021a2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021a2e:	931a      	str	r3, [sp, #104]	; 0x68
 8021a30:	4654      	mov	r4, sl
 8021a32:	2205      	movs	r2, #5
 8021a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a38:	4851      	ldr	r0, [pc, #324]	; (8021b80 <_svfiprintf_r+0x1ec>)
 8021a3a:	f7de fc71 	bl	8000320 <memchr>
 8021a3e:	9a04      	ldr	r2, [sp, #16]
 8021a40:	b9d8      	cbnz	r0, 8021a7a <_svfiprintf_r+0xe6>
 8021a42:	06d0      	lsls	r0, r2, #27
 8021a44:	bf44      	itt	mi
 8021a46:	2320      	movmi	r3, #32
 8021a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021a4c:	0711      	lsls	r1, r2, #28
 8021a4e:	bf44      	itt	mi
 8021a50:	232b      	movmi	r3, #43	; 0x2b
 8021a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021a56:	f89a 3000 	ldrb.w	r3, [sl]
 8021a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8021a5c:	d015      	beq.n	8021a8a <_svfiprintf_r+0xf6>
 8021a5e:	9a07      	ldr	r2, [sp, #28]
 8021a60:	4654      	mov	r4, sl
 8021a62:	2000      	movs	r0, #0
 8021a64:	f04f 0c0a 	mov.w	ip, #10
 8021a68:	4621      	mov	r1, r4
 8021a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021a6e:	3b30      	subs	r3, #48	; 0x30
 8021a70:	2b09      	cmp	r3, #9
 8021a72:	d94e      	bls.n	8021b12 <_svfiprintf_r+0x17e>
 8021a74:	b1b0      	cbz	r0, 8021aa4 <_svfiprintf_r+0x110>
 8021a76:	9207      	str	r2, [sp, #28]
 8021a78:	e014      	b.n	8021aa4 <_svfiprintf_r+0x110>
 8021a7a:	eba0 0308 	sub.w	r3, r0, r8
 8021a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8021a82:	4313      	orrs	r3, r2
 8021a84:	9304      	str	r3, [sp, #16]
 8021a86:	46a2      	mov	sl, r4
 8021a88:	e7d2      	b.n	8021a30 <_svfiprintf_r+0x9c>
 8021a8a:	9b03      	ldr	r3, [sp, #12]
 8021a8c:	1d19      	adds	r1, r3, #4
 8021a8e:	681b      	ldr	r3, [r3, #0]
 8021a90:	9103      	str	r1, [sp, #12]
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	bfbb      	ittet	lt
 8021a96:	425b      	neglt	r3, r3
 8021a98:	f042 0202 	orrlt.w	r2, r2, #2
 8021a9c:	9307      	strge	r3, [sp, #28]
 8021a9e:	9307      	strlt	r3, [sp, #28]
 8021aa0:	bfb8      	it	lt
 8021aa2:	9204      	strlt	r2, [sp, #16]
 8021aa4:	7823      	ldrb	r3, [r4, #0]
 8021aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8021aa8:	d10c      	bne.n	8021ac4 <_svfiprintf_r+0x130>
 8021aaa:	7863      	ldrb	r3, [r4, #1]
 8021aac:	2b2a      	cmp	r3, #42	; 0x2a
 8021aae:	d135      	bne.n	8021b1c <_svfiprintf_r+0x188>
 8021ab0:	9b03      	ldr	r3, [sp, #12]
 8021ab2:	1d1a      	adds	r2, r3, #4
 8021ab4:	681b      	ldr	r3, [r3, #0]
 8021ab6:	9203      	str	r2, [sp, #12]
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	bfb8      	it	lt
 8021abc:	f04f 33ff 	movlt.w	r3, #4294967295
 8021ac0:	3402      	adds	r4, #2
 8021ac2:	9305      	str	r3, [sp, #20]
 8021ac4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021b90 <_svfiprintf_r+0x1fc>
 8021ac8:	7821      	ldrb	r1, [r4, #0]
 8021aca:	2203      	movs	r2, #3
 8021acc:	4650      	mov	r0, sl
 8021ace:	f7de fc27 	bl	8000320 <memchr>
 8021ad2:	b140      	cbz	r0, 8021ae6 <_svfiprintf_r+0x152>
 8021ad4:	2340      	movs	r3, #64	; 0x40
 8021ad6:	eba0 000a 	sub.w	r0, r0, sl
 8021ada:	fa03 f000 	lsl.w	r0, r3, r0
 8021ade:	9b04      	ldr	r3, [sp, #16]
 8021ae0:	4303      	orrs	r3, r0
 8021ae2:	3401      	adds	r4, #1
 8021ae4:	9304      	str	r3, [sp, #16]
 8021ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021aea:	4826      	ldr	r0, [pc, #152]	; (8021b84 <_svfiprintf_r+0x1f0>)
 8021aec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021af0:	2206      	movs	r2, #6
 8021af2:	f7de fc15 	bl	8000320 <memchr>
 8021af6:	2800      	cmp	r0, #0
 8021af8:	d038      	beq.n	8021b6c <_svfiprintf_r+0x1d8>
 8021afa:	4b23      	ldr	r3, [pc, #140]	; (8021b88 <_svfiprintf_r+0x1f4>)
 8021afc:	bb1b      	cbnz	r3, 8021b46 <_svfiprintf_r+0x1b2>
 8021afe:	9b03      	ldr	r3, [sp, #12]
 8021b00:	3307      	adds	r3, #7
 8021b02:	f023 0307 	bic.w	r3, r3, #7
 8021b06:	3308      	adds	r3, #8
 8021b08:	9303      	str	r3, [sp, #12]
 8021b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b0c:	4433      	add	r3, r6
 8021b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8021b10:	e767      	b.n	80219e2 <_svfiprintf_r+0x4e>
 8021b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8021b16:	460c      	mov	r4, r1
 8021b18:	2001      	movs	r0, #1
 8021b1a:	e7a5      	b.n	8021a68 <_svfiprintf_r+0xd4>
 8021b1c:	2300      	movs	r3, #0
 8021b1e:	3401      	adds	r4, #1
 8021b20:	9305      	str	r3, [sp, #20]
 8021b22:	4619      	mov	r1, r3
 8021b24:	f04f 0c0a 	mov.w	ip, #10
 8021b28:	4620      	mov	r0, r4
 8021b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b2e:	3a30      	subs	r2, #48	; 0x30
 8021b30:	2a09      	cmp	r2, #9
 8021b32:	d903      	bls.n	8021b3c <_svfiprintf_r+0x1a8>
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	d0c5      	beq.n	8021ac4 <_svfiprintf_r+0x130>
 8021b38:	9105      	str	r1, [sp, #20]
 8021b3a:	e7c3      	b.n	8021ac4 <_svfiprintf_r+0x130>
 8021b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021b40:	4604      	mov	r4, r0
 8021b42:	2301      	movs	r3, #1
 8021b44:	e7f0      	b.n	8021b28 <_svfiprintf_r+0x194>
 8021b46:	ab03      	add	r3, sp, #12
 8021b48:	9300      	str	r3, [sp, #0]
 8021b4a:	462a      	mov	r2, r5
 8021b4c:	4b0f      	ldr	r3, [pc, #60]	; (8021b8c <_svfiprintf_r+0x1f8>)
 8021b4e:	a904      	add	r1, sp, #16
 8021b50:	4638      	mov	r0, r7
 8021b52:	f3af 8000 	nop.w
 8021b56:	1c42      	adds	r2, r0, #1
 8021b58:	4606      	mov	r6, r0
 8021b5a:	d1d6      	bne.n	8021b0a <_svfiprintf_r+0x176>
 8021b5c:	89ab      	ldrh	r3, [r5, #12]
 8021b5e:	065b      	lsls	r3, r3, #25
 8021b60:	f53f af2c 	bmi.w	80219bc <_svfiprintf_r+0x28>
 8021b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021b66:	b01d      	add	sp, #116	; 0x74
 8021b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b6c:	ab03      	add	r3, sp, #12
 8021b6e:	9300      	str	r3, [sp, #0]
 8021b70:	462a      	mov	r2, r5
 8021b72:	4b06      	ldr	r3, [pc, #24]	; (8021b8c <_svfiprintf_r+0x1f8>)
 8021b74:	a904      	add	r1, sp, #16
 8021b76:	4638      	mov	r0, r7
 8021b78:	f7ff f92e 	bl	8020dd8 <_printf_i>
 8021b7c:	e7eb      	b.n	8021b56 <_svfiprintf_r+0x1c2>
 8021b7e:	bf00      	nop
 8021b80:	08023f54 	.word	0x08023f54
 8021b84:	08023f5e 	.word	0x08023f5e
 8021b88:	00000000 	.word	0x00000000
 8021b8c:	080218df 	.word	0x080218df
 8021b90:	08023f5a 	.word	0x08023f5a

08021b94 <_read_r>:
 8021b94:	b538      	push	{r3, r4, r5, lr}
 8021b96:	4d07      	ldr	r5, [pc, #28]	; (8021bb4 <_read_r+0x20>)
 8021b98:	4604      	mov	r4, r0
 8021b9a:	4608      	mov	r0, r1
 8021b9c:	4611      	mov	r1, r2
 8021b9e:	2200      	movs	r2, #0
 8021ba0:	602a      	str	r2, [r5, #0]
 8021ba2:	461a      	mov	r2, r3
 8021ba4:	f7e1 fbdc 	bl	8003360 <_read>
 8021ba8:	1c43      	adds	r3, r0, #1
 8021baa:	d102      	bne.n	8021bb2 <_read_r+0x1e>
 8021bac:	682b      	ldr	r3, [r5, #0]
 8021bae:	b103      	cbz	r3, 8021bb2 <_read_r+0x1e>
 8021bb0:	6023      	str	r3, [r4, #0]
 8021bb2:	bd38      	pop	{r3, r4, r5, pc}
 8021bb4:	2400ca44 	.word	0x2400ca44

08021bb8 <_fstat_r>:
 8021bb8:	b538      	push	{r3, r4, r5, lr}
 8021bba:	4d07      	ldr	r5, [pc, #28]	; (8021bd8 <_fstat_r+0x20>)
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	4604      	mov	r4, r0
 8021bc0:	4608      	mov	r0, r1
 8021bc2:	4611      	mov	r1, r2
 8021bc4:	602b      	str	r3, [r5, #0]
 8021bc6:	f7e1 fbec 	bl	80033a2 <_fstat>
 8021bca:	1c43      	adds	r3, r0, #1
 8021bcc:	d102      	bne.n	8021bd4 <_fstat_r+0x1c>
 8021bce:	682b      	ldr	r3, [r5, #0]
 8021bd0:	b103      	cbz	r3, 8021bd4 <_fstat_r+0x1c>
 8021bd2:	6023      	str	r3, [r4, #0]
 8021bd4:	bd38      	pop	{r3, r4, r5, pc}
 8021bd6:	bf00      	nop
 8021bd8:	2400ca44 	.word	0x2400ca44

08021bdc <_isatty_r>:
 8021bdc:	b538      	push	{r3, r4, r5, lr}
 8021bde:	4d06      	ldr	r5, [pc, #24]	; (8021bf8 <_isatty_r+0x1c>)
 8021be0:	2300      	movs	r3, #0
 8021be2:	4604      	mov	r4, r0
 8021be4:	4608      	mov	r0, r1
 8021be6:	602b      	str	r3, [r5, #0]
 8021be8:	f7e1 fbe0 	bl	80033ac <_isatty>
 8021bec:	1c43      	adds	r3, r0, #1
 8021bee:	d102      	bne.n	8021bf6 <_isatty_r+0x1a>
 8021bf0:	682b      	ldr	r3, [r5, #0]
 8021bf2:	b103      	cbz	r3, 8021bf6 <_isatty_r+0x1a>
 8021bf4:	6023      	str	r3, [r4, #0]
 8021bf6:	bd38      	pop	{r3, r4, r5, pc}
 8021bf8:	2400ca44 	.word	0x2400ca44

08021bfc <_malloc_usable_size_r>:
 8021bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021c00:	1f18      	subs	r0, r3, #4
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	bfbc      	itt	lt
 8021c06:	580b      	ldrlt	r3, [r1, r0]
 8021c08:	18c0      	addlt	r0, r0, r3
 8021c0a:	4770      	bx	lr

08021c0c <_init>:
 8021c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c0e:	bf00      	nop
 8021c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021c12:	bc08      	pop	{r3}
 8021c14:	469e      	mov	lr, r3
 8021c16:	4770      	bx	lr

08021c18 <_fini>:
 8021c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c1a:	bf00      	nop
 8021c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021c1e:	bc08      	pop	{r3}
 8021c20:	469e      	mov	lr, r3
 8021c22:	4770      	bx	lr
